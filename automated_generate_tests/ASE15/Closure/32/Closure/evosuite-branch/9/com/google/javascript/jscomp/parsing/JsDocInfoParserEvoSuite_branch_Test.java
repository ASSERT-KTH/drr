/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:28:21 GMT 2014
 */

package com.google.javascript.jscomp.parsing;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.JsDocInfoParser;
import com.google.javascript.jscomp.parsing.JsDocToken;
import com.google.javascript.jscomp.parsing.JsDocTokenStream;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.head.ErrorReporter;
import com.google.javascript.rhino.head.Token;
import com.google.javascript.rhino.head.ast.AstNode;
import com.google.javascript.rhino.head.ast.CatchClause;
import com.google.javascript.rhino.head.ast.Comment;
import com.google.javascript.rhino.head.ast.ErrorCollector;
import com.google.javascript.rhino.head.ast.FunctionNode;
import com.google.javascript.rhino.head.ast.Name;
import com.google.javascript.rhino.head.ast.NumberLiteral;
import com.google.javascript.rhino.head.ast.StringLiteral;
import com.google.javascript.rhino.head.ast.Yield;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.FileSystemHandling;
import org.junit.runner.RunWith;


public class JsDocInfoParserEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "{pr<j,Hy:";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "{CYl:%U{3M=0W1Q=<Z";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "{";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "[\n";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "['^&DrZ8^9+Hav,$W";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "(\"MD_ET,\"QfhF";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "<\n";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFor());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getLength());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isContinue());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOr());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAdd());
      assertNotNull(node0);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = ".\n";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isSwitch());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isLocalResultCall());
      assertNull(node0.getSourceFileName());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.isString());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNot());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(1, node0.getLength());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isExprResult());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNew());
      assertNotNull(node0);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "undefined";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFalse());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isContinue());
      assertEquals(9, node0.getLength());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNE());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAssign());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isReturn());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isWith());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.hasOneChild());
      assertNotNull(node0);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "null";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isQuotedString());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNot());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isName());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isFalse());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isParamList());
      assertEquals(4, node0.getLength());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isObjectLit());
      assertNotNull(node0);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "function";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "LpY|f|nd!k)";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(4, node0.getCharno());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDec());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNumber());
      assertEquals(3, node0.getChildCount());
      assertEquals(false, node0.isAssign());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAdd());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isThis());
      assertEquals(4, node0.getSourcePosition());
      assertEquals(false, node0.isSwitch());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isComma());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNew());
      assertEquals(301, node0.getType());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isHook());
      assertNotNull(node0);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "hu?ction";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isAssign());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isVar());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLabel());
      assertEquals(2, node0.getSourcePosition());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isTry());
      assertEquals(304, node0.getType());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isAdd());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNumber());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOr());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isString());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(2, node0.getCharno());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isComma());
      assertNotNull(node0);
  }

  @Test
  public void test13()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "(Ljava/lang/String;)Ljava/lang/StringBuffer;";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isName());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isFor());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDelProp());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isParamList());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isCase());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isReturn());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isTypeOf());
      assertEquals(301, node0.getType());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isWhile());
      assertEquals(0, node0.getLength());
      assertEquals(0, node0.getSideEffectFlags());
      assertNotNull(node0);
      
      String string1 = "*=(<t_f^YaTy^cTm";
      assertNotSame(string1, string0);
      
      int int0 = (-116);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string1, int0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(jsDocTokenStream0);
      assertNotSame(string1, string0);
      
      NumberLiteral numberLiteral0 = new NumberLiteral(int0, string1);
      assertEquals("40", numberLiteral0.toString());
      assertEquals(-1, numberLiteral0.getLineno());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(0, numberLiteral0.depth());
      assertEquals(40, numberLiteral0.getType());
      assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals(16, numberLiteral0.getLength());
      assertEquals(-116, numberLiteral0.getPosition());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals("*=(<t_f^YaTy^cTm", numberLiteral0.getValue());
      assertEquals(-116, numberLiteral0.getAbsolutePosition());
      assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(numberLiteral0);
      assertNotSame(string1, string0);
      
      Comment comment0 = numberLiteral0.getJsDocNode();
      assertEquals("40", numberLiteral0.toString());
      assertEquals(-1, numberLiteral0.getLineno());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(0, numberLiteral0.depth());
      assertEquals(40, numberLiteral0.getType());
      assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals(16, numberLiteral0.getLength());
      assertEquals(-116, numberLiteral0.getPosition());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals("*=(<t_f^YaTy^cTm", numberLiteral0.getValue());
      assertEquals(-116, numberLiteral0.getAbsolutePosition());
      assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
      assertFalse(string1.equals((Object)string0));
      assertNull(comment0);
      assertNotSame(string1, string0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertEquals("40", numberLiteral0.toString());
      assertEquals(-1, numberLiteral0.getLineno());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(0, numberLiteral0.depth());
      assertEquals(40, numberLiteral0.getType());
      assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals(16, numberLiteral0.getLength());
      assertEquals(-116, numberLiteral0.getPosition());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals("*=(<t_f^YaTy^cTm", numberLiteral0.getValue());
      assertEquals(-116, numberLiteral0.getAbsolutePosition());
      assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isName());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isFor());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDelProp());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isParamList());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isCase());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isReturn());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isTypeOf());
      assertEquals(301, node0.getType());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isWhile());
      assertEquals(0, node0.getLength());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(jsDocInfoParser0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "(Ljava/lang/String;)Ljava/lang/StringBuffer;";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isDo());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(301, node0.getType());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isString());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isRegExp());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isAssign());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isComma());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNE());
      assertNotNull(node0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string1 = ")";
      assertNotSame(string1, string0);
      
      int int0 = 2526;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string1, int0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(jsDocTokenStream0);
      assertNotSame(string1, string0);
      
      NumberLiteral numberLiteral0 = new NumberLiteral(int0, string1);
      assertEquals(")", numberLiteral0.getValue());
      assertEquals(40, numberLiteral0.getType());
      assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(-1, numberLiteral0.getLineno());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(2526, numberLiteral0.getPosition());
      assertEquals(2526, numberLiteral0.getAbsolutePosition());
      assertEquals(0, numberLiteral0.depth());
      assertEquals("40", numberLiteral0.toString());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(1, numberLiteral0.getLength());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(numberLiteral0);
      assertNotSame(string1, string0);
      
      Comment comment0 = numberLiteral0.getJsDocNode();
      assertEquals(")", numberLiteral0.getValue());
      assertEquals(40, numberLiteral0.getType());
      assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(-1, numberLiteral0.getLineno());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(2526, numberLiteral0.getPosition());
      assertEquals(2526, numberLiteral0.getAbsolutePosition());
      assertEquals(0, numberLiteral0.depth());
      assertEquals("40", numberLiteral0.toString());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(1, numberLiteral0.getLength());
      assertFalse(string1.equals((Object)string0));
      assertNull(comment0);
      assertNotSame(string1, string0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertEquals(")", numberLiteral0.getValue());
      assertEquals(40, numberLiteral0.getType());
      assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(-1, numberLiteral0.getLineno());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(2526, numberLiteral0.getPosition());
      assertEquals(2526, numberLiteral0.getAbsolutePosition());
      assertEquals(0, numberLiteral0.depth());
      assertEquals("40", numberLiteral0.toString());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(1, numberLiteral0.getLength());
      assertEquals(false, node0.isDo());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(301, node0.getType());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isString());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isRegExp());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isAssign());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isComma());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNE());
      assertEquals("[]", treeSet0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(jsDocInfoParser0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "%--n";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isComma());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNot());
      assertEquals(4, node0.getLength());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(0, node0.getSourcePosition());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isFalse());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isGetProp());
      assertNotNull(node0);
      
      String string1 = "|syt--KeEq 9;U]I2";
      assertNotSame(string1, string0);
      
      int int0 = (-122);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string1, int0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(jsDocTokenStream0);
      assertNotSame(string1, string0);
      
      NumberLiteral numberLiteral0 = new NumberLiteral(int0, string1);
      assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals(0, numberLiteral0.depth());
      assertEquals("|syt--KeEq 9;U]I2", numberLiteral0.getValue());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(40, numberLiteral0.getType());
      assertEquals(-122, numberLiteral0.getPosition());
      assertEquals(17, numberLiteral0.getLength());
      assertEquals("40", numberLiteral0.toString());
      assertEquals(-122, numberLiteral0.getAbsolutePosition());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(numberLiteral0);
      assertNotSame(string1, string0);
      
      Comment comment0 = numberLiteral0.getJsDocNode();
      assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals(0, numberLiteral0.depth());
      assertEquals("|syt--KeEq 9;U]I2", numberLiteral0.getValue());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(40, numberLiteral0.getType());
      assertEquals(-122, numberLiteral0.getPosition());
      assertEquals(17, numberLiteral0.getLength());
      assertEquals("40", numberLiteral0.toString());
      assertEquals(-122, numberLiteral0.getAbsolutePosition());
      assertFalse(string1.equals((Object)string0));
      assertNull(comment0);
      assertNotSame(string1, string0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals(0, numberLiteral0.depth());
      assertEquals("|syt--KeEq 9;U]I2", numberLiteral0.getValue());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(40, numberLiteral0.getType());
      assertEquals(-122, numberLiteral0.getPosition());
      assertEquals(17, numberLiteral0.getLength());
      assertEquals("40", numberLiteral0.toString());
      assertEquals(-122, numberLiteral0.getAbsolutePosition());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isComma());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNot());
      assertEquals(4, node0.getLength());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(0, node0.getSourcePosition());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isFalse());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isGetProp());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(jsDocInfoParser0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = "(Ljava/lang/String;)Ljava/lang/StringBuffer;";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isExprResult());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTypeOf());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isObjectLit());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isContinue());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isBlock());
      assertEquals(301, node0.getType());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isInstanceOf());
      assertNotNull(node0);
      
      boolean boolean1 = true;
      int int0 = 2526;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      NumberLiteral numberLiteral0 = new NumberLiteral(int0, string0);
      assertEquals(2526, numberLiteral0.getPosition());
      assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals("40", numberLiteral0.toString());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(40, numberLiteral0.getType());
      assertEquals(44, numberLiteral0.getLength());
      assertEquals(2526, numberLiteral0.getAbsolutePosition());
      assertEquals("(Ljava/lang/String;)Ljava/lang/StringBuffer;", numberLiteral0.getValue());
      assertEquals(0, numberLiteral0.depth());
      assertEquals(false, numberLiteral0.hasChildren());
      assertNotNull(numberLiteral0);
      
      Comment comment0 = numberLiteral0.getJsDocNode();
      assertEquals(2526, numberLiteral0.getPosition());
      assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals("40", numberLiteral0.toString());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(40, numberLiteral0.getType());
      assertEquals(44, numberLiteral0.getLength());
      assertEquals(2526, numberLiteral0.getAbsolutePosition());
      assertEquals("(Ljava/lang/String;)Ljava/lang/StringBuffer;", numberLiteral0.getValue());
      assertEquals(0, numberLiteral0.depth());
      assertEquals(false, numberLiteral0.hasChildren());
      assertNull(comment0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, boolean1, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertEquals(2526, numberLiteral0.getPosition());
      assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals("40", numberLiteral0.toString());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(40, numberLiteral0.getType());
      assertEquals(44, numberLiteral0.getLength());
      assertEquals(2526, numberLiteral0.getAbsolutePosition());
      assertEquals("(Ljava/lang/String;)Ljava/lang/StringBuffer;", numberLiteral0.getValue());
      assertEquals(0, numberLiteral0.depth());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isExprResult());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTypeOf());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isObjectLit());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isContinue());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isBlock());
      assertEquals(301, node0.getType());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isInstanceOf());
      assertEquals("[]", treeSet0.toString());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertNotNull(jsDocInfoParser0);
      
      // Undeclared exception!
      try {
        boolean boolean2 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "(Ljava/lang/String;)Ljava/lang/StringBuffer;";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isRegExp());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isBreak());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isOr());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isGetProp());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isScript());
      assertEquals(0, node0.getLength());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isString());
      assertEquals(301, node0.getType());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isWhile());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLabelName());
      assertEquals(1, node0.getCharno());
      assertEquals(true, node0.hasChildren());
      assertNotNull(node0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string1 = "{";
      assertNotSame(string1, string0);
      
      int int0 = 2505;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string1, int0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(jsDocTokenStream0);
      assertNotSame(string1, string0);
      
      NumberLiteral numberLiteral0 = new NumberLiteral(int0, string1);
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(2505, numberLiteral0.getPosition());
      assertEquals("40", numberLiteral0.toString());
      assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals(1, numberLiteral0.getLength());
      assertEquals(2505, numberLiteral0.getAbsolutePosition());
      assertEquals(40, numberLiteral0.getType());
      assertEquals("{", numberLiteral0.getValue());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(0, numberLiteral0.depth());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(numberLiteral0);
      assertNotSame(string1, string0);
      
      Comment comment0 = numberLiteral0.getJsDocNode();
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(2505, numberLiteral0.getPosition());
      assertEquals("40", numberLiteral0.toString());
      assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals(1, numberLiteral0.getLength());
      assertEquals(2505, numberLiteral0.getAbsolutePosition());
      assertEquals(40, numberLiteral0.getType());
      assertEquals("{", numberLiteral0.getValue());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(0, numberLiteral0.depth());
      assertFalse(string1.equals((Object)string0));
      assertNull(comment0);
      assertNotSame(string1, string0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(2505, numberLiteral0.getPosition());
      assertEquals("40", numberLiteral0.toString());
      assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals(1, numberLiteral0.getLength());
      assertEquals(2505, numberLiteral0.getAbsolutePosition());
      assertEquals(40, numberLiteral0.getType());
      assertEquals("{", numberLiteral0.getValue());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(0, numberLiteral0.depth());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isRegExp());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isBreak());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isOr());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isGetProp());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isScript());
      assertEquals(0, node0.getLength());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isString());
      assertEquals(301, node0.getType());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isWhile());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLabelName());
      assertEquals(1, node0.getCharno());
      assertEquals(true, node0.hasChildren());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(jsDocInfoParser0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "[_&6:0L #`=)]h iE";
      int int0 = 1968;
      boolean boolean0 = true;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      Comment comment0 = null;
      Node node0 = null;
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorReporter errorReporter0 = null;
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(jsDocInfoParser0);
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "(Ljava/lang/String;)Ljava/lang/StringBuffer;";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(301, node0.getType());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTypeOf());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isDo());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVar());
      assertEquals(true, node0.hasChildren());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isBreak());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isGetterDef());
      assertNotNull(node0);
      
      String string1 = "*,(<t_f^YaTy^cTm";
      assertNotSame(string1, string0);
      
      int int0 = (-114);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string1, int0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(jsDocTokenStream0);
      assertNotSame(string1, string0);
      
      NumberLiteral numberLiteral0 = new NumberLiteral(int0, string1);
      assertEquals(0, numberLiteral0.depth());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals("40", numberLiteral0.toString());
      assertEquals(-114, numberLiteral0.getPosition());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals("*,(<t_f^YaTy^cTm", numberLiteral0.getValue());
      assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(16, numberLiteral0.getLength());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(-114, numberLiteral0.getAbsolutePosition());
      assertEquals(40, numberLiteral0.getType());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(numberLiteral0);
      assertNotSame(string1, string0);
      
      Comment comment0 = numberLiteral0.getJsDocNode();
      assertEquals(0, numberLiteral0.depth());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals("40", numberLiteral0.toString());
      assertEquals(-114, numberLiteral0.getPosition());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals("*,(<t_f^YaTy^cTm", numberLiteral0.getValue());
      assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(16, numberLiteral0.getLength());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(-114, numberLiteral0.getAbsolutePosition());
      assertEquals(40, numberLiteral0.getType());
      assertFalse(string1.equals((Object)string0));
      assertNull(comment0);
      assertNotSame(string1, string0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertEquals(0, numberLiteral0.depth());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals("40", numberLiteral0.toString());
      assertEquals(-114, numberLiteral0.getPosition());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals("*,(<t_f^YaTy^cTm", numberLiteral0.getValue());
      assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(16, numberLiteral0.getLength());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(-114, numberLiteral0.getAbsolutePosition());
      assertEquals(40, numberLiteral0.getType());
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(301, node0.getType());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTypeOf());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isDo());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVar());
      assertEquals(true, node0.hasChildren());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isBreak());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isGetterDef());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(jsDocInfoParser0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "~O.w!v`F{ ";
      int int0 = 0;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      Comment comment0 = null;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isWhile());
      assertEquals(0, node0.getType());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNE());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNew());
      assertNotNull(node0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(set0);
      
      boolean boolean0 = true;
      JsDocToken jsDocToken0 = jsDocTokenStream0.getJsDocToken();
      assertEquals("STRING", jsDocToken0.toString());
      assertEquals("STRING", jsDocToken0.name());
      assertEquals(4, jsDocToken0.ordinal());
      
      Config.LanguageMode config_LanguageMode0 = null;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isWhile());
      assertEquals(0, node0.getType());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNE());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNew());
      assertNotNull(jsDocInfoParser0);
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      boolean boolean1 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      
      String string0 = "DEL_EF";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0.getSourceFileName());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isGetterDef());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isReturn());
      assertEquals(6, node0.getLength());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, node0.getLineno());
      assertNotNull(node0);
      
      String string1 = "*(<_f^YaTy^cTm";
      assertNotSame(string1, string0);
      
      int int0 = 2526;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string1, int0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(jsDocTokenStream0);
      assertNotSame(string1, string0);
      
      NumberLiteral numberLiteral0 = new NumberLiteral(int0, string0);
      assertEquals(0, numberLiteral0.depth());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(40, numberLiteral0.getType());
      assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(2526, numberLiteral0.getPosition());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals("40", numberLiteral0.toString());
      assertEquals(2526, numberLiteral0.getAbsolutePosition());
      assertEquals(6, numberLiteral0.getLength());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals("DEL_EF", numberLiteral0.getValue());
      assertFalse(string0.equals((Object)string1));
      assertNotNull(numberLiteral0);
      assertNotSame(string0, string1);
      
      Comment comment0 = numberLiteral0.getJsDocNode();
      assertEquals(0, numberLiteral0.depth());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(40, numberLiteral0.getType());
      assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(2526, numberLiteral0.getPosition());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals("40", numberLiteral0.toString());
      assertEquals(2526, numberLiteral0.getAbsolutePosition());
      assertEquals(6, numberLiteral0.getLength());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals("DEL_EF", numberLiteral0.getValue());
      assertFalse(string0.equals((Object)string1));
      assertNull(comment0);
      assertNotSame(string0, string1);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, boolean1, config_LanguageMode0, boolean1);
      assertEquals("[]", treeSet0.toString());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertEquals(0, numberLiteral0.depth());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(40, numberLiteral0.getType());
      assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(2526, numberLiteral0.getPosition());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals("40", numberLiteral0.toString());
      assertEquals(2526, numberLiteral0.getAbsolutePosition());
      assertEquals(6, numberLiteral0.getLength());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals("DEL_EF", numberLiteral0.getValue());
      assertNull(node0.getSourceFileName());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isGetterDef());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isReturn());
      assertEquals(6, node0.getLength());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, node0.getLineno());
      assertEquals("[]", treeSet0.toString());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(jsDocInfoParser0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      // Undeclared exception!
      try {
        boolean boolean2 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "S.@lvS;V9PA9my'f6VJ>";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      int int0 = (-74);
      JsDocToken jsDocToken0 = jsDocTokenStream0.getJsDocToken();
      assertEquals("STRING", jsDocToken0.toString());
      assertEquals(4, jsDocToken0.ordinal());
      assertEquals("STRING", jsDocToken0.name());
      
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isRegExp());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDo());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isBreak());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDec());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isFalse());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(2, node0.getLength());
      assertEquals(false, node0.isObjectLit());
      assertNotNull(node0);
      
      CatchClause catchClause0 = new CatchClause();
      assertNull(catchClause0.getJsDoc());
      assertEquals(-1, catchClause0.getLp());
      assertEquals("124", catchClause0.toString());
      assertEquals(1, catchClause0.getLength());
      assertEquals(-1, catchClause0.getPosition());
      assertEquals(-1, catchClause0.getAbsolutePosition());
      assertEquals(false, catchClause0.hasChildren());
      assertEquals(0, catchClause0.depth());
      assertEquals(-1, catchClause0.getLineno());
      assertEquals(-1, catchClause0.getRp());
      assertEquals(-1, catchClause0.getIfPosition());
      assertEquals(124, catchClause0.getType());
      assertNotNull(catchClause0);
      
      Name name0 = catchClause0.getVarName();
      assertNull(catchClause0.getJsDoc());
      assertEquals(-1, catchClause0.getLp());
      assertEquals("124", catchClause0.toString());
      assertEquals(1, catchClause0.getLength());
      assertEquals(-1, catchClause0.getPosition());
      assertEquals(-1, catchClause0.getAbsolutePosition());
      assertEquals(false, catchClause0.hasChildren());
      assertEquals(0, catchClause0.depth());
      assertEquals(-1, catchClause0.getLineno());
      assertEquals(-1, catchClause0.getRp());
      assertEquals(-1, catchClause0.getIfPosition());
      assertEquals(124, catchClause0.getType());
      assertNull(name0);
      
      FunctionNode functionNode0 = new FunctionNode(int0, name0);
      assertEquals(0, functionNode0.depth());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals(false, functionNode0.isGetter());
      assertEquals(-1, functionNode0.getLp());
      assertEquals(-74, functionNode0.getAbsolutePosition());
      assertEquals(-1, functionNode0.getEncodedSourceEnd());
      assertEquals(-1, functionNode0.getLineno());
      assertEquals(false, functionNode0.hasChildren());
      assertEquals(false, functionNode0.isExpressionClosure());
      assertEquals(false, functionNode0.isSetter());
      assertEquals(false, functionNode0.requiresActivation());
      assertEquals(109, functionNode0.getType());
      assertEquals("", functionNode0.getName());
      assertNull(functionNode0.getSourceName());
      assertEquals(false, functionNode0.isGetterOrSetter());
      assertNull(functionNode0.getEncodedSource());
      assertEquals(-74, functionNode0.getPosition());
      assertEquals(-1, functionNode0.getBaseLineno());
      assertEquals(-1, functionNode0.getEncodedSourceStart());
      assertEquals(-1, functionNode0.getEndLineno());
      assertEquals(-1, functionNode0.getRp());
      assertEquals("109", functionNode0.toString());
      assertEquals(0, functionNode0.getRegexpCount());
      assertNull(functionNode0.getJsDoc());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals(0, functionNode0.getFunctionCount());
      assertEquals(false, functionNode0.isGenerator());
      assertEquals(1, functionNode0.getLength());
      assertNull(catchClause0.getJsDoc());
      assertEquals(-1, catchClause0.getLp());
      assertEquals("124", catchClause0.toString());
      assertEquals(1, catchClause0.getLength());
      assertEquals(-1, catchClause0.getPosition());
      assertEquals(-1, catchClause0.getAbsolutePosition());
      assertEquals(false, catchClause0.hasChildren());
      assertEquals(0, catchClause0.depth());
      assertEquals(-1, catchClause0.getLineno());
      assertEquals(-1, catchClause0.getRp());
      assertEquals(-1, catchClause0.getIfPosition());
      assertEquals(124, catchClause0.getType());
      assertNotNull(functionNode0);
      
      Yield yield0 = new Yield(int0, int0, (AstNode) functionNode0);
      assertEquals(0, functionNode0.getPosition());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals(false, functionNode0.isGetter());
      assertEquals(-1, functionNode0.getLp());
      assertEquals(-74, functionNode0.getAbsolutePosition());
      assertEquals(-1, functionNode0.getEncodedSourceEnd());
      assertEquals(-1, functionNode0.getLineno());
      assertEquals(false, functionNode0.hasChildren());
      assertEquals(false, functionNode0.isExpressionClosure());
      assertEquals(false, functionNode0.isSetter());
      assertEquals(false, functionNode0.requiresActivation());
      assertEquals(109, functionNode0.getType());
      assertEquals("", functionNode0.getName());
      assertNull(functionNode0.getSourceName());
      assertEquals(false, functionNode0.isGetterOrSetter());
      assertNull(functionNode0.getEncodedSource());
      assertEquals(1, functionNode0.depth());
      assertEquals(-1, functionNode0.getBaseLineno());
      assertEquals(-1, functionNode0.getEncodedSourceStart());
      assertEquals(-1, functionNode0.getEndLineno());
      assertEquals(-1, functionNode0.getRp());
      assertEquals("109", functionNode0.toString());
      assertEquals(0, functionNode0.getRegexpCount());
      assertNull(functionNode0.getJsDoc());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals(0, functionNode0.getFunctionCount());
      assertEquals(false, functionNode0.isGenerator());
      assertEquals(1, functionNode0.getLength());
      assertNull(catchClause0.getJsDoc());
      assertEquals(-1, catchClause0.getLp());
      assertEquals("124", catchClause0.toString());
      assertEquals(1, catchClause0.getLength());
      assertEquals(-1, catchClause0.getPosition());
      assertEquals(-1, catchClause0.getAbsolutePosition());
      assertEquals(false, catchClause0.hasChildren());
      assertEquals(0, catchClause0.depth());
      assertEquals(-1, catchClause0.getLineno());
      assertEquals(-1, catchClause0.getRp());
      assertEquals(-1, catchClause0.getIfPosition());
      assertEquals(124, catchClause0.getType());
      assertEquals(72, yield0.getType());
      assertEquals(false, yield0.hasChildren());
      assertEquals(0, yield0.depth());
      assertEquals(-1, yield0.getLineno());
      assertEquals(-74, yield0.getAbsolutePosition());
      assertEquals(-74, yield0.getPosition());
      assertEquals("72", yield0.toString());
      assertEquals(-74, yield0.getLength());
      assertNull(yield0.getJsDoc());
      assertNotNull(yield0);
      
      Comment comment0 = yield0.getJsDocNode();
      assertEquals(0, functionNode0.getPosition());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals(false, functionNode0.isGetter());
      assertEquals(-1, functionNode0.getLp());
      assertEquals(-74, functionNode0.getAbsolutePosition());
      assertEquals(-1, functionNode0.getEncodedSourceEnd());
      assertEquals(-1, functionNode0.getLineno());
      assertEquals(false, functionNode0.hasChildren());
      assertEquals(false, functionNode0.isExpressionClosure());
      assertEquals(false, functionNode0.isSetter());
      assertEquals(false, functionNode0.requiresActivation());
      assertEquals(109, functionNode0.getType());
      assertEquals("", functionNode0.getName());
      assertNull(functionNode0.getSourceName());
      assertEquals(false, functionNode0.isGetterOrSetter());
      assertNull(functionNode0.getEncodedSource());
      assertEquals(1, functionNode0.depth());
      assertEquals(-1, functionNode0.getBaseLineno());
      assertEquals(-1, functionNode0.getEncodedSourceStart());
      assertEquals(-1, functionNode0.getEndLineno());
      assertEquals(-1, functionNode0.getRp());
      assertEquals("109", functionNode0.toString());
      assertEquals(0, functionNode0.getRegexpCount());
      assertNull(functionNode0.getJsDoc());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals(0, functionNode0.getFunctionCount());
      assertEquals(false, functionNode0.isGenerator());
      assertEquals(1, functionNode0.getLength());
      assertNull(catchClause0.getJsDoc());
      assertEquals(-1, catchClause0.getLp());
      assertEquals("124", catchClause0.toString());
      assertEquals(1, catchClause0.getLength());
      assertEquals(-1, catchClause0.getPosition());
      assertEquals(-1, catchClause0.getAbsolutePosition());
      assertEquals(false, catchClause0.hasChildren());
      assertEquals(0, catchClause0.depth());
      assertEquals(-1, catchClause0.getLineno());
      assertEquals(-1, catchClause0.getRp());
      assertEquals(-1, catchClause0.getIfPosition());
      assertEquals(124, catchClause0.getType());
      assertEquals(72, yield0.getType());
      assertEquals(false, yield0.hasChildren());
      assertEquals(0, yield0.depth());
      assertEquals(-1, yield0.getLineno());
      assertEquals(-74, yield0.getAbsolutePosition());
      assertEquals(-74, yield0.getPosition());
      assertEquals("72", yield0.toString());
      assertEquals(-74, yield0.getLength());
      assertNull(yield0.getJsDoc());
      assertNull(comment0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertEquals(0, functionNode0.getPosition());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals(false, functionNode0.isGetter());
      assertEquals(-1, functionNode0.getLp());
      assertEquals(-74, functionNode0.getAbsolutePosition());
      assertEquals(-1, functionNode0.getEncodedSourceEnd());
      assertEquals(-1, functionNode0.getLineno());
      assertEquals(false, functionNode0.hasChildren());
      assertEquals(false, functionNode0.isExpressionClosure());
      assertEquals(false, functionNode0.isSetter());
      assertEquals(false, functionNode0.requiresActivation());
      assertEquals(109, functionNode0.getType());
      assertEquals("", functionNode0.getName());
      assertNull(functionNode0.getSourceName());
      assertEquals(false, functionNode0.isGetterOrSetter());
      assertNull(functionNode0.getEncodedSource());
      assertEquals(1, functionNode0.depth());
      assertEquals(-1, functionNode0.getBaseLineno());
      assertEquals(-1, functionNode0.getEncodedSourceStart());
      assertEquals(-1, functionNode0.getEndLineno());
      assertEquals(-1, functionNode0.getRp());
      assertEquals("109", functionNode0.toString());
      assertEquals(0, functionNode0.getRegexpCount());
      assertNull(functionNode0.getJsDoc());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals(0, functionNode0.getFunctionCount());
      assertEquals(false, functionNode0.isGenerator());
      assertEquals(1, functionNode0.getLength());
      assertNull(catchClause0.getJsDoc());
      assertEquals(-1, catchClause0.getLp());
      assertEquals("124", catchClause0.toString());
      assertEquals(1, catchClause0.getLength());
      assertEquals(-1, catchClause0.getPosition());
      assertEquals(-1, catchClause0.getAbsolutePosition());
      assertEquals(false, catchClause0.hasChildren());
      assertEquals(0, catchClause0.depth());
      assertEquals(-1, catchClause0.getLineno());
      assertEquals(-1, catchClause0.getRp());
      assertEquals(-1, catchClause0.getIfPosition());
      assertEquals(124, catchClause0.getType());
      assertEquals("[]", treeSet0.toString());
      assertEquals(72, yield0.getType());
      assertEquals(false, yield0.hasChildren());
      assertEquals(0, yield0.depth());
      assertEquals(-1, yield0.getLineno());
      assertEquals(-74, yield0.getAbsolutePosition());
      assertEquals(-74, yield0.getPosition());
      assertEquals("72", yield0.toString());
      assertEquals(-74, yield0.getLength());
      assertNull(yield0.getJsDoc());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isRegExp());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDo());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isBreak());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDec());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isFalse());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(2, node0.getLength());
      assertEquals(false, node0.isObjectLit());
      assertNotNull(jsDocInfoParser0);
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "_+~=PIfBj<?";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isQuotedString());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(3, node0.getLength());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isArrayLit());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isFalse());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isReturn());
      assertEquals(0, node0.getChildCount());
      assertNotNull(node0);
      
      boolean boolean0 = node0.isCase();
      assertFalse(boolean0);
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isQuotedString());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(3, node0.getLength());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isArrayLit());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isFalse());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isReturn());
      assertEquals(0, node0.getChildCount());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      int int0 = 57296;
      StringLiteral stringLiteral0 = new StringLiteral(int0, int0);
      assertEquals(57296, stringLiteral0.getLength());
      assertEquals(57296, stringLiteral0.getPosition());
      assertEquals('\u0000', stringLiteral0.getQuoteCharacter());
      assertEquals(57296, stringLiteral0.getAbsolutePosition());
      assertEquals(0, stringLiteral0.depth());
      assertEquals("41", stringLiteral0.toString());
      assertNull(stringLiteral0.getJsDoc());
      assertNull(stringLiteral0.getValue());
      assertEquals(-1, stringLiteral0.getLineno());
      assertEquals(false, stringLiteral0.hasChildren());
      assertEquals(41, stringLiteral0.getType());
      assertNotNull(stringLiteral0);
      
      Comment comment0 = stringLiteral0.getJsDocNode();
      assertEquals(57296, stringLiteral0.getLength());
      assertEquals(57296, stringLiteral0.getPosition());
      assertEquals('\u0000', stringLiteral0.getQuoteCharacter());
      assertEquals(57296, stringLiteral0.getAbsolutePosition());
      assertEquals(0, stringLiteral0.depth());
      assertEquals("41", stringLiteral0.toString());
      assertNull(stringLiteral0.getJsDoc());
      assertNull(stringLiteral0.getValue());
      assertEquals(-1, stringLiteral0.getLineno());
      assertEquals(false, stringLiteral0.hasChildren());
      assertEquals(41, stringLiteral0.getType());
      assertNull(comment0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isQuotedString());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(3, node0.getLength());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isArrayLit());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isFalse());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isReturn());
      assertEquals(0, node0.getChildCount());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      node0.setSourceFileForTesting(string0);
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDebugger());
      assertEquals("_+~=PIfBj<?", node0.getSourceFileName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isQuotedString());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(3, node0.getLength());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isArrayLit());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isFalse());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isReturn());
      assertEquals(0, node0.getChildCount());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertEquals(57296, stringLiteral0.getLength());
      assertEquals(57296, stringLiteral0.getPosition());
      assertEquals('\u0000', stringLiteral0.getQuoteCharacter());
      assertEquals(57296, stringLiteral0.getAbsolutePosition());
      assertEquals(0, stringLiteral0.depth());
      assertEquals("41", stringLiteral0.toString());
      assertNull(stringLiteral0.getJsDoc());
      assertNull(stringLiteral0.getValue());
      assertEquals(-1, stringLiteral0.getLineno());
      assertEquals(false, stringLiteral0.hasChildren());
      assertEquals(41, stringLiteral0.getType());
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDebugger());
      assertEquals("_+~=PIfBj<?", node0.getSourceFileName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isQuotedString());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(3, node0.getLength());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isArrayLit());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isFalse());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isReturn());
      assertEquals(0, node0.getChildCount());
      assertNotNull(jsDocInfoParser0);
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = "F(nQyl";
      int int0 = 12;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(int0, int0, token_CommentType0, string0);
      assertNull(comment0.getJsDoc());
      assertEquals(161, comment0.getType());
      assertEquals(12, comment0.getLength());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(12, comment0.getAbsolutePosition());
      assertEquals("F(nQyl", comment0.getValue());
      assertEquals(0, comment0.depth());
      assertEquals(false, comment0.hasChildren());
      assertEquals(12, comment0.getPosition());
      assertEquals("161", comment0.toString());
      assertEquals(-1, comment0.getLineno());
      assertNotNull(comment0);
      
      Node node0 = Node.newString(string0, int0, int0);
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isComma());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isGetterDef());
      assertEquals(true, node0.isString());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(49164, node0.getSourcePosition());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFalse());
      assertEquals(12, node0.getLineno());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isArrayLit());
      assertEquals(12, node0.getCharno());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isVar());
      assertNotNull(node0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertNull(comment0.getJsDoc());
      assertEquals(161, comment0.getType());
      assertEquals(12, comment0.getLength());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(12, comment0.getAbsolutePosition());
      assertEquals("F(nQyl", comment0.getValue());
      assertEquals(0, comment0.depth());
      assertEquals(false, comment0.hasChildren());
      assertEquals(12, comment0.getPosition());
      assertEquals("161", comment0.toString());
      assertEquals(-1, comment0.getLineno());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isComma());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isGetterDef());
      assertEquals(true, node0.isString());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(49164, node0.getSourcePosition());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFalse());
      assertEquals(12, node0.getLineno());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isArrayLit());
      assertEquals(12, node0.getCharno());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isVar());
      assertNotNull(jsDocInfoParser0);
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = "_+~=PIfBj<?";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isGetProp());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isInstanceOf());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDo());
      assertEquals(3, node0.getLength());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isIn());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isArrayLit());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.wasEmptyNode());
      assertNotNull(node0);
      
      boolean boolean0 = node0.isCase();
      assertFalse(boolean0);
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isGetProp());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isInstanceOf());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDo());
      assertEquals(3, node0.getLength());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isIn());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isArrayLit());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.wasEmptyNode());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      int int0 = 57296;
      StringLiteral stringLiteral0 = new StringLiteral(int0, int0);
      assertEquals(41, stringLiteral0.getType());
      assertNull(stringLiteral0.getJsDoc());
      assertNull(stringLiteral0.getValue());
      assertEquals(0, stringLiteral0.depth());
      assertEquals(57296, stringLiteral0.getLength());
      assertEquals(57296, stringLiteral0.getAbsolutePosition());
      assertEquals(57296, stringLiteral0.getPosition());
      assertEquals('\u0000', stringLiteral0.getQuoteCharacter());
      assertEquals(false, stringLiteral0.hasChildren());
      assertEquals("41", stringLiteral0.toString());
      assertEquals(-1, stringLiteral0.getLineno());
      assertNotNull(stringLiteral0);
      
      Comment comment0 = stringLiteral0.getJsDocNode();
      assertEquals(41, stringLiteral0.getType());
      assertNull(stringLiteral0.getJsDoc());
      assertNull(stringLiteral0.getValue());
      assertEquals(0, stringLiteral0.depth());
      assertEquals(57296, stringLiteral0.getLength());
      assertEquals(57296, stringLiteral0.getAbsolutePosition());
      assertEquals(57296, stringLiteral0.getPosition());
      assertEquals('\u0000', stringLiteral0.getQuoteCharacter());
      assertEquals(false, stringLiteral0.hasChildren());
      assertEquals("41", stringLiteral0.toString());
      assertEquals(-1, stringLiteral0.getLineno());
      assertNull(comment0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isGetProp());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isInstanceOf());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDo());
      assertEquals(3, node0.getLength());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isIn());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isArrayLit());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isGetProp());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isInstanceOf());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDo());
      assertEquals(3, node0.getLength());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isIn());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isArrayLit());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(41, stringLiteral0.getType());
      assertNull(stringLiteral0.getJsDoc());
      assertNull(stringLiteral0.getValue());
      assertEquals(0, stringLiteral0.depth());
      assertEquals(57296, stringLiteral0.getLength());
      assertEquals(57296, stringLiteral0.getAbsolutePosition());
      assertEquals(57296, stringLiteral0.getPosition());
      assertEquals('\u0000', stringLiteral0.getQuoteCharacter());
      assertEquals(false, stringLiteral0.hasChildren());
      assertEquals("41", stringLiteral0.toString());
      assertEquals(-1, stringLiteral0.getLineno());
      assertEquals("[]", treeSet0.toString());
      assertNotNull(jsDocInfoParser0);
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.getFileOverviewJSDocInfo();
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isGetProp());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isInstanceOf());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDo());
      assertEquals(3, node0.getLength());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isIn());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isArrayLit());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(41, stringLiteral0.getType());
      assertNull(stringLiteral0.getJsDoc());
      assertNull(stringLiteral0.getValue());
      assertEquals(0, stringLiteral0.depth());
      assertEquals(57296, stringLiteral0.getLength());
      assertEquals(57296, stringLiteral0.getAbsolutePosition());
      assertEquals(57296, stringLiteral0.getPosition());
      assertEquals('\u0000', stringLiteral0.getQuoteCharacter());
      assertEquals(false, stringLiteral0.hasChildren());
      assertEquals("41", stringLiteral0.toString());
      assertEquals(-1, stringLiteral0.getLineno());
      assertEquals("[]", treeSet0.toString());
      assertNull(jSDocInfo0);
      
      jsDocInfoParser0.setFileOverviewJSDocInfo(jSDocInfo0);
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isGetProp());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isInstanceOf());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDo());
      assertEquals(3, node0.getLength());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isIn());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isArrayLit());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(41, stringLiteral0.getType());
      assertNull(stringLiteral0.getJsDoc());
      assertNull(stringLiteral0.getValue());
      assertEquals(0, stringLiteral0.depth());
      assertEquals(57296, stringLiteral0.getLength());
      assertEquals(57296, stringLiteral0.getAbsolutePosition());
      assertEquals(57296, stringLiteral0.getPosition());
      assertEquals('\u0000', stringLiteral0.getQuoteCharacter());
      assertEquals(false, stringLiteral0.hasChildren());
      assertEquals("41", stringLiteral0.toString());
      assertEquals(-1, stringLiteral0.getLineno());
      assertEquals("[]", treeSet0.toString());
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = "!{CYl}%Uy3NM0W'1Q[<Z";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isAssignAdd());
      assertEquals(306, node0.getType());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFalse());
      assertEquals(5, node0.getCharno());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isLabelName());
      assertEquals(true, node0.hasOneChild());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isObjectLit());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isComma());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOr());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(5, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFromExterns());
      assertNotNull(node0);
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = "[_&6:0L #`=)]h iE";
      int int0 = 1968;
      boolean boolean0 = true;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      Comment comment0 = null;
      Node node0 = null;
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorReporter errorReporter0 = null;
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(jsDocInfoParser0);
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.retrieveAndResetParsedJSDocInfo();
      assertEquals("[]", treeSet0.toString());
      assertNull(jSDocInfo0);
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = "(";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = "_+~=PIfBj<?";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isAssign());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(3, node0.getLength());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNull(node0.getSourceFileName());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNE());
      assertNotNull(node0);
      
      boolean boolean0 = node0.isCase();
      assertFalse(boolean0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isAssign());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(3, node0.getLength());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNull(node0.getSourceFileName());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNE());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      int int0 = 57296;
      StringLiteral stringLiteral0 = new StringLiteral(int0, int0);
      assertEquals(false, stringLiteral0.hasChildren());
      assertEquals(57296, stringLiteral0.getPosition());
      assertEquals('\u0000', stringLiteral0.getQuoteCharacter());
      assertEquals(41, stringLiteral0.getType());
      assertEquals(-1, stringLiteral0.getLineno());
      assertEquals(57296, stringLiteral0.getAbsolutePosition());
      assertEquals("41", stringLiteral0.toString());
      assertNull(stringLiteral0.getValue());
      assertNull(stringLiteral0.getJsDoc());
      assertEquals(0, stringLiteral0.depth());
      assertEquals(57296, stringLiteral0.getLength());
      assertNotNull(stringLiteral0);
      
      Comment comment0 = stringLiteral0.getJsDocNode();
      assertEquals(false, stringLiteral0.hasChildren());
      assertEquals(57296, stringLiteral0.getPosition());
      assertEquals('\u0000', stringLiteral0.getQuoteCharacter());
      assertEquals(41, stringLiteral0.getType());
      assertEquals(-1, stringLiteral0.getLineno());
      assertEquals(57296, stringLiteral0.getAbsolutePosition());
      assertEquals("41", stringLiteral0.toString());
      assertNull(stringLiteral0.getValue());
      assertNull(stringLiteral0.getJsDoc());
      assertEquals(0, stringLiteral0.depth());
      assertEquals(57296, stringLiteral0.getLength());
      assertNull(comment0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isAssign());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(3, node0.getLength());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNull(node0.getSourceFileName());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNE());
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isAssign());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(3, node0.getLength());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNull(node0.getSourceFileName());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNE());
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, stringLiteral0.hasChildren());
      assertEquals(57296, stringLiteral0.getPosition());
      assertEquals('\u0000', stringLiteral0.getQuoteCharacter());
      assertEquals(41, stringLiteral0.getType());
      assertEquals(-1, stringLiteral0.getLineno());
      assertEquals(57296, stringLiteral0.getAbsolutePosition());
      assertEquals("41", stringLiteral0.toString());
      assertNull(stringLiteral0.getValue());
      assertNull(stringLiteral0.getJsDoc());
      assertEquals(0, stringLiteral0.depth());
      assertEquals(57296, stringLiteral0.getLength());
      assertNotNull(jsDocInfoParser0);
      
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isAssign());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(3, node0.getLength());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNull(node0.getSourceFileName());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNE());
      assertNotNull(node_FileLevelJsDocBuilder0);
      
      jsDocInfoParser0.setFileLevelJsDocBuilder(node_FileLevelJsDocBuilder0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isAssign());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(3, node0.getLength());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNull(node0.getSourceFileName());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNE());
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, stringLiteral0.hasChildren());
      assertEquals(57296, stringLiteral0.getPosition());
      assertEquals('\u0000', stringLiteral0.getQuoteCharacter());
      assertEquals(41, stringLiteral0.getType());
      assertEquals(-1, stringLiteral0.getLineno());
      assertEquals(57296, stringLiteral0.getAbsolutePosition());
      assertEquals("41", stringLiteral0.toString());
      assertNull(stringLiteral0.getValue());
      assertNull(stringLiteral0.getJsDoc());
      assertEquals(0, stringLiteral0.depth());
      assertEquals(57296, stringLiteral0.getLength());
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = "(Ljava/lang/String;)Ljava/lang/StringBuffer;";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDelProp());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isLabelName());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isScript());
      assertEquals(301, node0.getType());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isBreak());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isName());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isVar());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isTrue());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isObjectLit());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.isThis());
      assertEquals(true, node0.hasOneChild());
      assertNotNull(node0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = 2505;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      NumberLiteral numberLiteral0 = new NumberLiteral(int0, string0);
      assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(40, numberLiteral0.getType());
      assertEquals(0, numberLiteral0.depth());
      assertEquals("(Ljava/lang/String;)Ljava/lang/StringBuffer;", numberLiteral0.getValue());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(2505, numberLiteral0.getPosition());
      assertEquals(2505, numberLiteral0.getAbsolutePosition());
      assertEquals(44, numberLiteral0.getLength());
      assertEquals("40", numberLiteral0.toString());
      assertNotNull(numberLiteral0);
      
      Comment comment0 = numberLiteral0.getJsDocNode();
      assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(40, numberLiteral0.getType());
      assertEquals(0, numberLiteral0.depth());
      assertEquals("(Ljava/lang/String;)Ljava/lang/StringBuffer;", numberLiteral0.getValue());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(2505, numberLiteral0.getPosition());
      assertEquals(2505, numberLiteral0.getAbsolutePosition());
      assertEquals(44, numberLiteral0.getLength());
      assertEquals("40", numberLiteral0.toString());
      assertNull(comment0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDelProp());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isLabelName());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isScript());
      assertEquals(301, node0.getType());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isBreak());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isName());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isVar());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isTrue());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isObjectLit());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.isThis());
      assertEquals(true, node0.hasOneChild());
      assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(40, numberLiteral0.getType());
      assertEquals(0, numberLiteral0.depth());
      assertEquals("(Ljava/lang/String;)Ljava/lang/StringBuffer;", numberLiteral0.getValue());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(2505, numberLiteral0.getPosition());
      assertEquals(2505, numberLiteral0.getAbsolutePosition());
      assertEquals(44, numberLiteral0.getLength());
      assertEquals("40", numberLiteral0.toString());
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean1 = jsDocInfoParser0.hasParsedJSDocInfo();
      assertFalse(boolean1);
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDelProp());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isLabelName());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isScript());
      assertEquals(301, node0.getType());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isBreak());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isName());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isVar());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isTrue());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isObjectLit());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.isThis());
      assertEquals(true, node0.hasOneChild());
      assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(40, numberLiteral0.getType());
      assertEquals(0, numberLiteral0.depth());
      assertEquals("(Ljava/lang/String;)Ljava/lang/StringBuffer;", numberLiteral0.getValue());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(2505, numberLiteral0.getPosition());
      assertEquals(2505, numberLiteral0.getAbsolutePosition());
      assertEquals(44, numberLiteral0.getLength());
      assertEquals("40", numberLiteral0.toString());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test31()  throws Throwable  {
      String string0 = "*#";
      String string1 = "S.@lvS;V9PA9my'f6VJ>";
      assertNotSame(string1, string0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(jsDocTokenStream0);
      assertNotSame(string1, string0);
      
      int int0 = (-74);
      JsDocToken jsDocToken0 = jsDocTokenStream0.getJsDocToken();
      assertEquals("STRING", jsDocToken0.name());
      assertEquals(4, jsDocToken0.ordinal());
      assertEquals("STRING", jsDocToken0.toString());
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isCase());
      assertEquals(302, node0.getType());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isIn());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isReturn());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isGetProp());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAnd());
      assertFalse(string0.equals((Object)string1));
      assertNotNull(node0);
      assertNotSame(string0, string1);
      
      CatchClause catchClause0 = new CatchClause();
      assertEquals(-1, catchClause0.getPosition());
      assertEquals(-1, catchClause0.getLp());
      assertEquals(-1, catchClause0.getIfPosition());
      assertEquals(false, catchClause0.hasChildren());
      assertEquals(1, catchClause0.getLength());
      assertEquals("124", catchClause0.toString());
      assertEquals(-1, catchClause0.getAbsolutePosition());
      assertEquals(0, catchClause0.depth());
      assertEquals(-1, catchClause0.getLineno());
      assertNull(catchClause0.getJsDoc());
      assertEquals(-1, catchClause0.getRp());
      assertEquals(124, catchClause0.getType());
      assertNotNull(catchClause0);
      
      Name name0 = catchClause0.getVarName();
      assertEquals(-1, catchClause0.getPosition());
      assertEquals(-1, catchClause0.getLp());
      assertEquals(-1, catchClause0.getIfPosition());
      assertEquals(false, catchClause0.hasChildren());
      assertEquals(1, catchClause0.getLength());
      assertEquals("124", catchClause0.toString());
      assertEquals(-1, catchClause0.getAbsolutePosition());
      assertEquals(0, catchClause0.depth());
      assertEquals(-1, catchClause0.getLineno());
      assertNull(catchClause0.getJsDoc());
      assertEquals(-1, catchClause0.getRp());
      assertEquals(124, catchClause0.getType());
      assertNull(name0);
      
      FunctionNode functionNode0 = new FunctionNode(int0, name0);
      assertEquals(-1, functionNode0.getRp());
      assertEquals("109", functionNode0.toString());
      assertNull(functionNode0.getSourceName());
      assertEquals(-1, functionNode0.getEncodedSourceStart());
      assertEquals(-1, functionNode0.getEncodedSourceEnd());
      assertEquals(false, functionNode0.isGetterOrSetter());
      assertEquals(0, functionNode0.getRegexpCount());
      assertEquals(false, functionNode0.isExpressionClosure());
      assertEquals(false, functionNode0.isSetter());
      assertEquals(1, functionNode0.getLength());
      assertEquals(false, functionNode0.isGetter());
      assertEquals("", functionNode0.getName());
      assertEquals(0, functionNode0.getFunctionCount());
      assertEquals(-74, functionNode0.getAbsolutePosition());
      assertEquals(-1, functionNode0.getLineno());
      assertEquals(-1, functionNode0.getLp());
      assertEquals(-1, functionNode0.getBaseLineno());
      assertEquals(-1, functionNode0.getEndLineno());
      assertEquals(109, functionNode0.getType());
      assertEquals(0, functionNode0.depth());
      assertEquals(0, functionNode0.getFunctionType());
      assertNull(functionNode0.getEncodedSource());
      assertEquals(false, functionNode0.isGenerator());
      assertNull(functionNode0.getJsDoc());
      assertEquals(-74, functionNode0.getPosition());
      assertEquals(false, functionNode0.requiresActivation());
      assertEquals(false, functionNode0.hasChildren());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals(-1, catchClause0.getPosition());
      assertEquals(-1, catchClause0.getLp());
      assertEquals(-1, catchClause0.getIfPosition());
      assertEquals(false, catchClause0.hasChildren());
      assertEquals(1, catchClause0.getLength());
      assertEquals("124", catchClause0.toString());
      assertEquals(-1, catchClause0.getAbsolutePosition());
      assertEquals(0, catchClause0.depth());
      assertEquals(-1, catchClause0.getLineno());
      assertNull(catchClause0.getJsDoc());
      assertEquals(-1, catchClause0.getRp());
      assertEquals(124, catchClause0.getType());
      assertNotNull(functionNode0);
      
      Yield yield0 = new Yield(int0, int0, (AstNode) functionNode0);
      assertEquals("72", yield0.toString());
      assertEquals(-74, yield0.getAbsolutePosition());
      assertEquals(-1, yield0.getLineno());
      assertEquals(-74, yield0.getPosition());
      assertEquals(false, yield0.hasChildren());
      assertEquals(0, yield0.depth());
      assertNull(yield0.getJsDoc());
      assertEquals(72, yield0.getType());
      assertEquals(-74, yield0.getLength());
      assertEquals(1, functionNode0.depth());
      assertEquals(-1, functionNode0.getRp());
      assertEquals("109", functionNode0.toString());
      assertNull(functionNode0.getSourceName());
      assertEquals(-1, functionNode0.getEncodedSourceStart());
      assertEquals(-1, functionNode0.getEncodedSourceEnd());
      assertEquals(false, functionNode0.isGetterOrSetter());
      assertEquals(0, functionNode0.getRegexpCount());
      assertEquals(false, functionNode0.isExpressionClosure());
      assertEquals(false, functionNode0.isSetter());
      assertEquals(1, functionNode0.getLength());
      assertEquals(false, functionNode0.isGetter());
      assertEquals("", functionNode0.getName());
      assertEquals(0, functionNode0.getFunctionCount());
      assertEquals(-74, functionNode0.getAbsolutePosition());
      assertEquals(-1, functionNode0.getLineno());
      assertEquals(-1, functionNode0.getLp());
      assertEquals(-1, functionNode0.getBaseLineno());
      assertEquals(-1, functionNode0.getEndLineno());
      assertEquals(109, functionNode0.getType());
      assertEquals(0, functionNode0.getFunctionType());
      assertNull(functionNode0.getEncodedSource());
      assertEquals(0, functionNode0.getPosition());
      assertEquals(false, functionNode0.isGenerator());
      assertNull(functionNode0.getJsDoc());
      assertEquals(false, functionNode0.requiresActivation());
      assertEquals(false, functionNode0.hasChildren());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals(-1, catchClause0.getPosition());
      assertEquals(-1, catchClause0.getLp());
      assertEquals(-1, catchClause0.getIfPosition());
      assertEquals(false, catchClause0.hasChildren());
      assertEquals(1, catchClause0.getLength());
      assertEquals("124", catchClause0.toString());
      assertEquals(-1, catchClause0.getAbsolutePosition());
      assertEquals(0, catchClause0.depth());
      assertEquals(-1, catchClause0.getLineno());
      assertNull(catchClause0.getJsDoc());
      assertEquals(-1, catchClause0.getRp());
      assertEquals(124, catchClause0.getType());
      assertNotNull(yield0);
      
      Comment comment0 = yield0.getJsDocNode();
      assertEquals("72", yield0.toString());
      assertEquals(-74, yield0.getAbsolutePosition());
      assertEquals(-1, yield0.getLineno());
      assertEquals(-74, yield0.getPosition());
      assertEquals(false, yield0.hasChildren());
      assertEquals(0, yield0.depth());
      assertNull(yield0.getJsDoc());
      assertEquals(72, yield0.getType());
      assertEquals(-74, yield0.getLength());
      assertEquals(1, functionNode0.depth());
      assertEquals(-1, functionNode0.getRp());
      assertEquals("109", functionNode0.toString());
      assertNull(functionNode0.getSourceName());
      assertEquals(-1, functionNode0.getEncodedSourceStart());
      assertEquals(-1, functionNode0.getEncodedSourceEnd());
      assertEquals(false, functionNode0.isGetterOrSetter());
      assertEquals(0, functionNode0.getRegexpCount());
      assertEquals(false, functionNode0.isExpressionClosure());
      assertEquals(false, functionNode0.isSetter());
      assertEquals(1, functionNode0.getLength());
      assertEquals(false, functionNode0.isGetter());
      assertEquals("", functionNode0.getName());
      assertEquals(0, functionNode0.getFunctionCount());
      assertEquals(-74, functionNode0.getAbsolutePosition());
      assertEquals(-1, functionNode0.getLineno());
      assertEquals(-1, functionNode0.getLp());
      assertEquals(-1, functionNode0.getBaseLineno());
      assertEquals(-1, functionNode0.getEndLineno());
      assertEquals(109, functionNode0.getType());
      assertEquals(0, functionNode0.getFunctionType());
      assertNull(functionNode0.getEncodedSource());
      assertEquals(0, functionNode0.getPosition());
      assertEquals(false, functionNode0.isGenerator());
      assertNull(functionNode0.getJsDoc());
      assertEquals(false, functionNode0.requiresActivation());
      assertEquals(false, functionNode0.hasChildren());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals(-1, catchClause0.getPosition());
      assertEquals(-1, catchClause0.getLp());
      assertEquals(-1, catchClause0.getIfPosition());
      assertEquals(false, catchClause0.hasChildren());
      assertEquals(1, catchClause0.getLength());
      assertEquals("124", catchClause0.toString());
      assertEquals(-1, catchClause0.getAbsolutePosition());
      assertEquals(0, catchClause0.depth());
      assertEquals(-1, catchClause0.getLineno());
      assertNull(catchClause0.getJsDoc());
      assertEquals(-1, catchClause0.getRp());
      assertEquals(124, catchClause0.getType());
      assertNull(comment0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isCase());
      assertEquals(302, node0.getType());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isIn());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isReturn());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isGetProp());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAnd());
      assertEquals("72", yield0.toString());
      assertEquals(-74, yield0.getAbsolutePosition());
      assertEquals(-1, yield0.getLineno());
      assertEquals(-74, yield0.getPosition());
      assertEquals(false, yield0.hasChildren());
      assertEquals(0, yield0.depth());
      assertNull(yield0.getJsDoc());
      assertEquals(72, yield0.getType());
      assertEquals(-74, yield0.getLength());
      assertEquals("[]", treeSet0.toString());
      assertEquals(1, functionNode0.depth());
      assertEquals(-1, functionNode0.getRp());
      assertEquals("109", functionNode0.toString());
      assertNull(functionNode0.getSourceName());
      assertEquals(-1, functionNode0.getEncodedSourceStart());
      assertEquals(-1, functionNode0.getEncodedSourceEnd());
      assertEquals(false, functionNode0.isGetterOrSetter());
      assertEquals(0, functionNode0.getRegexpCount());
      assertEquals(false, functionNode0.isExpressionClosure());
      assertEquals(false, functionNode0.isSetter());
      assertEquals(1, functionNode0.getLength());
      assertEquals(false, functionNode0.isGetter());
      assertEquals("", functionNode0.getName());
      assertEquals(0, functionNode0.getFunctionCount());
      assertEquals(-74, functionNode0.getAbsolutePosition());
      assertEquals(-1, functionNode0.getLineno());
      assertEquals(-1, functionNode0.getLp());
      assertEquals(-1, functionNode0.getBaseLineno());
      assertEquals(-1, functionNode0.getEndLineno());
      assertEquals(109, functionNode0.getType());
      assertEquals(0, functionNode0.getFunctionType());
      assertNull(functionNode0.getEncodedSource());
      assertEquals(0, functionNode0.getPosition());
      assertEquals(false, functionNode0.isGenerator());
      assertNull(functionNode0.getJsDoc());
      assertEquals(false, functionNode0.requiresActivation());
      assertEquals(false, functionNode0.hasChildren());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals(-1, catchClause0.getPosition());
      assertEquals(-1, catchClause0.getLp());
      assertEquals(-1, catchClause0.getIfPosition());
      assertEquals(false, catchClause0.hasChildren());
      assertEquals(1, catchClause0.getLength());
      assertEquals("124", catchClause0.toString());
      assertEquals(-1, catchClause0.getAbsolutePosition());
      assertEquals(0, catchClause0.depth());
      assertEquals(-1, catchClause0.getLineno());
      assertNull(catchClause0.getJsDoc());
      assertEquals(-1, catchClause0.getRp());
      assertEquals(124, catchClause0.getType());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(jsDocInfoParser0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
