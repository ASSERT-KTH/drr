/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 12:06:57 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CleanupPasses;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.FlowSensitiveInlineVariables;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.MemoizedScopeCreator;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.rhino.Node;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class FlowSensitiveInlineVariablesEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      AbstractCompiler abstractCompiler0 = null;
      FlowSensitiveInlineVariables flowSensitiveInlineVariables0 = new FlowSensitiveInlineVariables(abstractCompiler0);
      assertNotNull(flowSensitiveInlineVariables0);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal(abstractCompiler0, (NodeTraversal.Callback) flowSensitiveInlineVariables0);
      assertNotNull(nodeTraversal0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      
      flowSensitiveInlineVariables0.enterScope(nodeTraversal0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
  }

  @Test
  public void test1()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      assertNotNull(logger0);
      assertNull(logger0.getResourceBundleName());
      assertEquals("global", logger0.getName());
      assertEquals(true, logger0.getUseParentHandlers());
      
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      assertNotNull(loggerErrorManager0);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertNull(logger0.getResourceBundleName());
      assertEquals("global", logger0.getName());
      assertEquals(true, logger0.getUseParentHandlers());
      
      Compiler compiler0 = new Compiler((ErrorManager) loggerErrorManager0);
      assertNotNull(compiler0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertNull(logger0.getResourceBundleName());
      assertEquals("global", logger0.getName());
      assertEquals(true, logger0.getUseParentHandlers());
      
      FlowSensitiveInlineVariables flowSensitiveInlineVariables0 = new FlowSensitiveInlineVariables((AbstractCompiler) compiler0);
      assertNotNull(flowSensitiveInlineVariables0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertNull(logger0.getResourceBundleName());
      assertEquals("global", logger0.getName());
      assertEquals(true, logger0.getUseParentHandlers());
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertNotNull(compilerOptions0);
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertNotNull(cleanupPasses0);
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      
      MemoizedScopeCreator memoizedScopeCreator0 = cleanupPasses0.getTypedScopeCreator();
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertNull(memoizedScopeCreator0);
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) flowSensitiveInlineVariables0, (ScopeCreator) memoizedScopeCreator0);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertNotNull(nodeTraversal0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertNull(logger0.getResourceBundleName());
      assertEquals("global", logger0.getName());
      assertEquals(true, logger0.getUseParentHandlers());
      
      double double0 = (-1.4400667779185863);
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSwitch());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isInstanceOf());
      assertNull(node0.getSourceFileName());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isReturn());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isContinue());
      
      flowSensitiveInlineVariables0.visit(nodeTraversal0, node0, node0);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertNull(logger0.getResourceBundleName());
      assertEquals("global", logger0.getName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSwitch());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isInstanceOf());
      assertNull(node0.getSourceFileName());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isReturn());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isContinue());
  }

  @Test
  public void test2()  throws Throwable  {
      AbstractCompiler abstractCompiler0 = null;
      FlowSensitiveInlineVariables flowSensitiveInlineVariables0 = new FlowSensitiveInlineVariables(abstractCompiler0);
      assertNotNull(flowSensitiveInlineVariables0);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal(abstractCompiler0, (NodeTraversal.Callback) flowSensitiveInlineVariables0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      
      flowSensitiveInlineVariables0.exitScope(nodeTraversal0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
  }

  @Test
  public void test3()  throws Throwable  {
      AbstractCompiler abstractCompiler0 = null;
      FlowSensitiveInlineVariables flowSensitiveInlineVariables0 = new FlowSensitiveInlineVariables(abstractCompiler0);
      assertNotNull(flowSensitiveInlineVariables0);
      
      Node node0 = null;
      // Undeclared exception!
      try {
        flowSensitiveInlineVariables0.process(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
