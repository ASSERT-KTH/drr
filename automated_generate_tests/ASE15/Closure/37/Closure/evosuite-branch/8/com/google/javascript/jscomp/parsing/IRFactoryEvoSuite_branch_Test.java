/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 00:36:25 GMT 2014
 */

package com.google.javascript.jscomp.parsing;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.IRFactory;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ErrorReporter;
import com.google.javascript.rhino.head.ast.AstRoot;
import com.google.javascript.rhino.head.ast.ErrorCollector;
import com.google.javascript.rhino.head.ast.ExpressionStatement;
import com.google.javascript.rhino.head.ast.NumberLiteral;
import com.google.javascript.rhino.head.tools.ToolErrorReporter;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import java.io.File;
import java.io.PrintStream;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;


public class IRFactoryEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      String string0 = "S";
      int int0 = 0;
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getPosition());
      assertNotNull(astRoot0);
      
      boolean boolean0 = false;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertEquals(false, simpleSourceFile0.isExtern());
      assertEquals("S", simpleSourceFile0.getName());
      assertEquals("S", simpleSourceFile0.toString());
      assertNotNull(simpleSourceFile0);
      
      Locale locale0 = Locale.forLanguageTag(string0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(config0);
      
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream((File) mockFile0);
      assertNotNull(mockPrintStream0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0, (PrintStream) mockPrintStream0);
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDebugger());
      assertEquals("S", node0.getSourceFileName());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isVar());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isTrue());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isVoid());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isGetProp());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(false, simpleSourceFile0.isExtern());
      assertEquals("S", simpleSourceFile0.getName());
      assertEquals("S", simpleSourceFile0.toString());
      assertNotNull(node0);
  }

  @Test
  public void test1() {}
//   @Test
//   public void test1()  throws Throwable  {
//       int int0 = 17;
//       AstRoot astRoot0 = new AstRoot(int0);
//       //  // Unstable assertion: assertEquals(0, astRoot0.getParamCount());
//       //  // Unstable assertion: assertEquals(0, astRoot0.depth());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getLineno());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceStart());
//       //  // Unstable assertion: assertEquals(17, astRoot0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(false, astRoot0.hasChildren());
//       //  // Unstable assertion: assertNull(astRoot0.getEncodedSource());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEndLineno());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getFunctionCount());
//       //  // Unstable assertion: assertEquals(17, astRoot0.getPosition());
//       //  // Unstable assertion: assertEquals(1, astRoot0.getLength());
//       //  // Unstable assertion: assertEquals(false, astRoot0.isInStrictMode());
//       //  // Unstable assertion: assertEquals("136", astRoot0.toString());
//       //  // Unstable assertion: assertNull(astRoot0.getSourceName());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getBaseLineno());
//       //  // Unstable assertion: assertNull(astRoot0.getJsDoc());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getRegexpCount());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceEnd());
//       //  // Unstable assertion: assertEquals(136, astRoot0.getType());
//       //  // Unstable assertion: assertNotNull(astRoot0);
//       
//       boolean boolean0 = false;
//       Locale locale0 = Locale.KOREA;
//       //  // Unstable assertion: assertEquals("ko_KR", locale0.toString());
//       //  // Unstable assertion: assertEquals("kor", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("KR", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("KOR", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("ko", locale0.getLanguage());
//       //  // Unstable assertion: assertNotNull(locale0);
//       
//       Set<String> set0 = locale0.getUnicodeLocaleAttributes();
//       //  // Unstable assertion: assertEquals("ko_KR", locale0.toString());
//       //  // Unstable assertion: assertEquals("kor", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("KR", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("KOR", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("ko", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertNotNull(set0);
//       
//       String string0 = "";
//       ExpressionStatement expressionStatement0 = new ExpressionStatement(int0, int0);
//       //  // Unstable assertion: assertEquals(0, expressionStatement0.depth());
//       //  // Unstable assertion: assertEquals(17, expressionStatement0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(17, expressionStatement0.getPosition());
//       //  // Unstable assertion: assertEquals(133, expressionStatement0.getType());
//       //  // Unstable assertion: assertEquals("133", expressionStatement0.toString());
//       //  // Unstable assertion: assertNull(expressionStatement0.getJsDoc());
//       //  // Unstable assertion: assertEquals(17, expressionStatement0.getLength());
//       //  // Unstable assertion: assertEquals(false, expressionStatement0.hasChildren());
//       //  // Unstable assertion: assertEquals(-1, expressionStatement0.getLineno());
//       //  // Unstable assertion: assertNotNull(expressionStatement0);
//       
//       astRoot0.addChildrenToFront((com.google.javascript.rhino.head.Node) expressionStatement0);
//       //  // Unstable assertion: assertEquals(0, astRoot0.getParamCount());
//       //  // Unstable assertion: assertEquals(0, astRoot0.depth());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getLineno());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceStart());
//       //  // Unstable assertion: assertEquals(17, astRoot0.getAbsolutePosition());
//       //  // Unstable assertion: assertNull(astRoot0.getEncodedSource());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEndLineno());
//       //  // Unstable assertion: assertEquals(true, astRoot0.hasChildren());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getFunctionCount());
//       //  // Unstable assertion: assertEquals(17, astRoot0.getPosition());
//       //  // Unstable assertion: assertEquals(1, astRoot0.getLength());
//       //  // Unstable assertion: assertEquals(false, astRoot0.isInStrictMode());
//       //  // Unstable assertion: assertEquals("136", astRoot0.toString());
//       //  // Unstable assertion: assertNull(astRoot0.getSourceName());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getBaseLineno());
//       //  // Unstable assertion: assertNull(astRoot0.getJsDoc());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getRegexpCount());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceEnd());
//       //  // Unstable assertion: assertEquals(136, astRoot0.getType());
//       //  // Unstable assertion: assertEquals(0, expressionStatement0.depth());
//       //  // Unstable assertion: assertEquals(17, expressionStatement0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(17, expressionStatement0.getPosition());
//       //  // Unstable assertion: assertEquals(133, expressionStatement0.getType());
//       //  // Unstable assertion: assertEquals("133", expressionStatement0.toString());
//       //  // Unstable assertion: assertNull(expressionStatement0.getJsDoc());
//       //  // Unstable assertion: assertEquals(17, expressionStatement0.getLength());
//       //  // Unstable assertion: assertEquals(false, expressionStatement0.hasChildren());
//       //  // Unstable assertion: assertEquals(-1, expressionStatement0.getLineno());
//       
//       SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
//       //  // Unstable assertion: assertEquals("", simpleSourceFile0.toString());
//       //  // Unstable assertion: assertEquals(false, simpleSourceFile0.isExtern());
//       //  // Unstable assertion: assertEquals("", simpleSourceFile0.getName());
//       //  // Unstable assertion: assertNotNull(simpleSourceFile0);
//       
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
//       Context context0 = Context.enter();
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertNotNull(context0);
//       
//       ErrorCollector errorCollector0 = (ErrorCollector)context0.getErrorReporter();
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertNotNull(errorCollector0);
//       
//       Config config0 = new Config(set0, set0, context0.generateObserverCount, config_LanguageMode0, boolean0);
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       //  // Unstable assertion: assertEquals("ko_KR", locale0.toString());
//       //  // Unstable assertion: assertEquals("kor", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("KR", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("KOR", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("ko", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertNotNull(config0);
//       
//       // Undeclared exception!
//       try {
//         Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) errorCollector0);
//        //  fail("Expecting exception: NullPointerException");
//        // Unstable assertion
//       } catch(NullPointerException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test2() {}
//   @Test
//   public void test2()  throws Throwable  {
//       int int0 = 17;
//       AstRoot astRoot0 = new AstRoot(int0);
//       //  // Unstable assertion: assertEquals(0, astRoot0.getRegexpCount());
//       //  // Unstable assertion: assertEquals(false, astRoot0.isInStrictMode());
//       //  // Unstable assertion: assertEquals("136", astRoot0.toString());
//       //  // Unstable assertion: assertNull(astRoot0.getEncodedSource());
//       //  // Unstable assertion: assertEquals(17, astRoot0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceStart());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getBaseLineno());
//       //  // Unstable assertion: assertEquals(1, astRoot0.getLength());
//       //  // Unstable assertion: assertEquals(false, astRoot0.hasChildren());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getParamCount());
//       //  // Unstable assertion: assertEquals(17, astRoot0.getPosition());
//       //  // Unstable assertion: assertEquals(136, astRoot0.getType());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getLineno());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getFunctionCount());
//       //  // Unstable assertion: assertNull(astRoot0.getSourceName());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEndLineno());
//       //  // Unstable assertion: assertNull(astRoot0.getJsDoc());
//       //  // Unstable assertion: assertEquals(0, astRoot0.depth());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceEnd());
//       //  // Unstable assertion: assertNotNull(astRoot0);
//       
//       boolean boolean0 = false;
//       Locale locale0 = Locale.KOREA;
//       //  // Unstable assertion: assertEquals("ko_KR", locale0.toString());
//       //  // Unstable assertion: assertEquals("KOR", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("kor", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("ko", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("KR", locale0.getCountry());
//       //  // Unstable assertion: assertNotNull(locale0);
//       
//       Set<String> set0 = locale0.getUnicodeLocaleAttributes();
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals("ko_KR", locale0.toString());
//       //  // Unstable assertion: assertEquals("KOR", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("kor", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("ko", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("KR", locale0.getCountry());
//       //  // Unstable assertion: assertNotNull(set0);
//       
//       String string0 = "";
//       SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
//       //  // Unstable assertion: assertEquals("", simpleSourceFile0.toString());
//       //  // Unstable assertion: assertEquals("", simpleSourceFile0.getName());
//       //  // Unstable assertion: assertEquals(false, simpleSourceFile0.isExtern());
//       //  // Unstable assertion: assertNotNull(simpleSourceFile0);
//       
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
//       Context context0 = Context.enter();
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertNotNull(context0);
//       
//       ErrorCollector errorCollector0 = (ErrorCollector)context0.getErrorReporter();
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertNotNull(errorCollector0);
//       
//       NumberLiteral numberLiteral0 = (NumberLiteral)com.google.javascript.rhino.head.Node.newNumber((double) int0);
//       //  // Unstable assertion: assertEquals(40, numberLiteral0.getType());
//       //  // Unstable assertion: assertNull(numberLiteral0.getValue());
//       //  // Unstable assertion: assertEquals(0, numberLiteral0.depth());
//       //  // Unstable assertion: assertNull(numberLiteral0.getJsDoc());
//       //  // Unstable assertion: assertEquals(1, numberLiteral0.getLength());
//       //  // Unstable assertion: assertEquals(17.0, numberLiteral0.getDouble(), 0.01D);
//       //  // Unstable assertion: assertEquals(-1, numberLiteral0.getLineno());
//       //  // Unstable assertion: assertEquals(-1, numberLiteral0.getPosition());
//       //  // Unstable assertion: assertEquals(17.0, numberLiteral0.getNumber(), 0.01D);
//       //  // Unstable assertion: assertEquals("40", numberLiteral0.toString());
//       //  // Unstable assertion: assertEquals(false, numberLiteral0.hasChildren());
//       //  // Unstable assertion: assertEquals(-1, numberLiteral0.getAbsolutePosition());
//       //  // Unstable assertion: assertNotNull(numberLiteral0);
//       
//       astRoot0.addChildToFront((com.google.javascript.rhino.head.Node) numberLiteral0);
//       //  // Unstable assertion: assertEquals(0, astRoot0.getRegexpCount());
//       //  // Unstable assertion: assertEquals(false, astRoot0.isInStrictMode());
//       //  // Unstable assertion: assertEquals("136", astRoot0.toString());
//       //  // Unstable assertion: assertNull(astRoot0.getEncodedSource());
//       //  // Unstable assertion: assertEquals(17, astRoot0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceStart());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getBaseLineno());
//       //  // Unstable assertion: assertEquals(1, astRoot0.getLength());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getParamCount());
//       //  // Unstable assertion: assertEquals(17, astRoot0.getPosition());
//       //  // Unstable assertion: assertEquals(136, astRoot0.getType());
//       //  // Unstable assertion: assertEquals(true, astRoot0.hasChildren());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getLineno());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getFunctionCount());
//       //  // Unstable assertion: assertNull(astRoot0.getSourceName());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEndLineno());
//       //  // Unstable assertion: assertNull(astRoot0.getJsDoc());
//       //  // Unstable assertion: assertEquals(0, astRoot0.depth());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceEnd());
//       //  // Unstable assertion: assertEquals(40, numberLiteral0.getType());
//       //  // Unstable assertion: assertNull(numberLiteral0.getValue());
//       //  // Unstable assertion: assertEquals(0, numberLiteral0.depth());
//       //  // Unstable assertion: assertNull(numberLiteral0.getJsDoc());
//       //  // Unstable assertion: assertEquals(1, numberLiteral0.getLength());
//       //  // Unstable assertion: assertEquals(17.0, numberLiteral0.getDouble(), 0.01D);
//       //  // Unstable assertion: assertEquals(-1, numberLiteral0.getLineno());
//       //  // Unstable assertion: assertEquals(-1, numberLiteral0.getPosition());
//       //  // Unstable assertion: assertEquals(17.0, numberLiteral0.getNumber(), 0.01D);
//       //  // Unstable assertion: assertEquals("40", numberLiteral0.toString());
//       //  // Unstable assertion: assertEquals(false, numberLiteral0.hasChildren());
//       //  // Unstable assertion: assertEquals(-1, numberLiteral0.getAbsolutePosition());
//       
//       Config config0 = new Config(set0, set0, context0.generateObserverCount, config_LanguageMode0, boolean0);
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals("ko_KR", locale0.toString());
//       //  // Unstable assertion: assertEquals("KOR", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("kor", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("ko", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("KR", locale0.getCountry());
//       //  // Unstable assertion: assertNotNull(config0);
//       
//       Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) errorCollector0);
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       //  // Unstable assertion: assertEquals(0, astRoot0.getRegexpCount());
//       //  // Unstable assertion: assertEquals(false, astRoot0.isInStrictMode());
//       //  // Unstable assertion: assertEquals("136", astRoot0.toString());
//       //  // Unstable assertion: assertNull(astRoot0.getEncodedSource());
//       //  // Unstable assertion: assertEquals(17, astRoot0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceStart());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getBaseLineno());
//       //  // Unstable assertion: assertEquals(1, astRoot0.getLength());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getParamCount());
//       //  // Unstable assertion: assertEquals(17, astRoot0.getPosition());
//       //  // Unstable assertion: assertEquals(136, astRoot0.getType());
//       //  // Unstable assertion: assertEquals(true, astRoot0.hasChildren());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getLineno());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getFunctionCount());
//       //  // Unstable assertion: assertNull(astRoot0.getSourceName());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEndLineno());
//       //  // Unstable assertion: assertNull(astRoot0.getJsDoc());
//       //  // Unstable assertion: assertEquals(0, astRoot0.depth());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceEnd());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(false, node0.isIf());
//       //  // Unstable assertion: assertEquals(false, node0.isNew());
//       //  // Unstable assertion: assertEquals(false, node0.isWith());
//       //  // Unstable assertion: assertEquals(false, node0.isFor());
//       //  // Unstable assertion: assertEquals(false, node0.isVoid());
//       //  // Unstable assertion: assertEquals(false, node0.isNE());
//       //  // Unstable assertion: assertEquals(false, node0.isNull());
//       //  // Unstable assertion: assertEquals(false, node0.isSwitch());
//       //  // Unstable assertion: assertEquals(false, node0.isTrue());
//       //  // Unstable assertion: assertEquals(false, node0.isThrow());
//       //  // Unstable assertion: assertEquals(false, node0.isCase());
//       //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isObjectLit());
//       //  // Unstable assertion: assertEquals(false, node0.isRegExp());
//       //  // Unstable assertion: assertEquals(2147483647, node0.getSourceOffset());
//       //  // Unstable assertion: assertEquals(false, node0.isIn());
//       //  // Unstable assertion: assertEquals("", node0.getSourceFileName());
//       //  // Unstable assertion: assertEquals(false, node0.isFunction());
//       //  // Unstable assertion: assertEquals(false, node0.isHook());
//       //  // Unstable assertion: assertEquals(false, node0.isNot());
//       //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
//       //  // Unstable assertion: assertEquals(false, node0.isReturn());
//       //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
//       //  // Unstable assertion: assertEquals(false, node0.isFalse());
//       //  // Unstable assertion: assertEquals(false, node0.isArrayLit());
//       //  // Unstable assertion: assertEquals(false, node0.isParamList());
//       //  // Unstable assertion: assertEquals(false, node0.isAssign());
//       //  // Unstable assertion: assertEquals(false, node0.isDebugger());
//       //  // Unstable assertion: assertEquals(false, node0.isWhile());
//       //  // Unstable assertion: assertEquals(false, node0.isGetterDef());
//       //  // Unstable assertion: assertEquals(false, node0.isString());
//       //  // Unstable assertion: assertEquals(false, node0.isEmpty());
//       //  // Unstable assertion: assertEquals(false, node0.isInc());
//       //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
//       //  // Unstable assertion: assertEquals(false, node0.isInstanceOf());
//       //  // Unstable assertion: assertEquals(false, node0.isLabelName());
//       //  // Unstable assertion: assertEquals(-1, node0.getSourcePosition());
//       //  // Unstable assertion: assertEquals(false, node0.isSetterDef());
//       //  // Unstable assertion: assertEquals(false, node0.isOr());
//       //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
//       //  // Unstable assertion: assertEquals(false, node0.isBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isCatch());
//       //  // Unstable assertion: assertEquals(-1, node0.getLineno());
//       //  // Unstable assertion: assertEquals(false, node0.isFromExterns());
//       //  // Unstable assertion: assertEquals(false, node0.isThis());
//       //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
//       //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
//       //  // Unstable assertion: assertEquals(1, node0.getChildCount());
//       //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
//       //  // Unstable assertion: assertEquals(true, node0.isScript());
//       //  // Unstable assertion: assertEquals(false, node0.isGetElem());
//       //  // Unstable assertion: assertEquals(1, node0.getLength());
//       //  // Unstable assertion: assertEquals(false, node0.isTry());
//       //  // Unstable assertion: assertEquals(false, node0.isDefaultCase());
//       //  // Unstable assertion: assertEquals(false, node0.isCall());
//       //  // Unstable assertion: assertEquals(false, node0.isTypeOf());
//       //  // Unstable assertion: assertEquals(false, node0.isGetProp());
//       //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
//       //  // Unstable assertion: assertEquals(-1, node0.getCharno());
//       //  // Unstable assertion: assertEquals(false, node0.isDo());
//       //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.isDelProp());
//       //  // Unstable assertion: assertEquals(132, node0.getType());
//       //  // Unstable assertion: assertEquals(false, node0.isExprResult());
//       //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
//       //  // Unstable assertion: assertEquals(false, node0.isLabel());
//       //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
//       //  // Unstable assertion: assertEquals(false, node0.isDec());
//       //  // Unstable assertion: assertEquals(true, node0.hasOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.isContinue());
//       //  // Unstable assertion: assertEquals(false, node0.isComma());
//       //  // Unstable assertion: assertEquals(false, node0.isVar());
//       //  // Unstable assertion: assertEquals(false, node0.isBreak());
//       //  // Unstable assertion: assertEquals(false, node0.isAnd());
//       //  // Unstable assertion: assertEquals(false, node0.isName());
//       //  // Unstable assertion: assertEquals(true, node0.hasChildren());
//       //  // Unstable assertion: assertEquals(false, node0.isAssignAdd());
//       //  // Unstable assertion: assertEquals(false, node0.isNumber());
//       //  // Unstable assertion: assertEquals(false, node0.isAdd());
//       //  // Unstable assertion: assertEquals("", simpleSourceFile0.toString());
//       //  // Unstable assertion: assertEquals("", simpleSourceFile0.getName());
//       //  // Unstable assertion: assertEquals(false, simpleSourceFile0.isExtern());
//       //  // Unstable assertion: assertEquals("ko_KR", locale0.toString());
//       //  // Unstable assertion: assertEquals("KOR", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("kor", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("ko", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("KR", locale0.getCountry());
//       //  // Unstable assertion: assertNotNull(node0);
//   }
}
