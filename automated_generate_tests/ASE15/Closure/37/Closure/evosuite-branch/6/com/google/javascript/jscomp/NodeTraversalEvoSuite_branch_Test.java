/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 00:04:37 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CheckMissingGetCssName;
import com.google.javascript.jscomp.CheckSideEffects;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.ConstCheck;
import com.google.javascript.jscomp.ControlFlowGraph;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.FindExportableNodes;
import com.google.javascript.jscomp.FlowSensitiveInlineVariables;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.MemoizedScopeCreator;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.ProcessClosurePrimitives;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SourceInformationAnnotator;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.rhino.Node;
import java.io.File;
import java.io.PrintStream;
import java.util.logging.Logger;



import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.junit.runner.RunWith;


public class NodeTraversalEvoSuite_branch_Test  {

  @Test
  public void test00() {}
//   @Test
//   public void test00()  throws Throwable  {
//       Logger logger0 = Logger.getGlobal();
//       assertNotNull(logger0);
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       
//       LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
//       assertNotNull(loggerErrorManager0);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       
//       Compiler compiler0 = new Compiler((ErrorManager) loggerErrorManager0);
//       assertNotNull(compiler0);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       
//       CheckSideEffects.StripProtection checkSideEffects_StripProtection0 = new CheckSideEffects.StripProtection(compiler0);
//       assertNotNull(checkSideEffects_StripProtection0);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkSideEffects_StripProtection0);
//       assertNotNull(nodeTraversal0);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       
//       // Undeclared exception!
//       try {
//         ControlFlowGraph<Node> controlFlowGraph0 = nodeTraversal0.getControlFlowGraph();
//         fail("Expecting exception: NullPointerException");
//       
//       } catch(NullPointerException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test01()  throws Throwable  {
      boolean boolean0 = false;
      AbstractCompiler abstractCompiler0 = null;
      String string0 = "T'Na#^nglO";
      SourceInformationAnnotator sourceInformationAnnotator0 = new SourceInformationAnnotator(string0, boolean0);
      assertNotNull(sourceInformationAnnotator0);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal(abstractCompiler0, (NodeTraversal.Callback) sourceInformationAnnotator0);
      assertNotNull(nodeTraversal0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      
      Scope scope0 = nodeTraversal0.getScope();
      assertNull(scope0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
  }

  @Test
  public void test02()  throws Throwable  {
      AbstractCompiler abstractCompiler0 = null;
      Node node0 = null;
      ConstCheck constCheck0 = new ConstCheck(abstractCompiler0);
      assertNotNull(constCheck0);
      
      // Undeclared exception!
      try {
        NodeTraversal.traverse(abstractCompiler0, node0, (NodeTraversal.Callback) constCheck0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test03() {}
//   @Test
//   public void test03()  throws Throwable  {
//       Logger logger0 = Logger.getGlobal();
//       assertNotNull(logger0);
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       
//       LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
//       assertNotNull(loggerErrorManager0);
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       
//       Compiler compiler0 = new Compiler((ErrorManager) loggerErrorManager0);
//       assertNotNull(compiler0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       
//       CheckSideEffects.StripProtection checkSideEffects_StripProtection0 = new CheckSideEffects.StripProtection(compiler0);
//       assertNotNull(checkSideEffects_StripProtection0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkSideEffects_StripProtection0);
//       assertNotNull(nodeTraversal0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       
//       Node node0 = nodeTraversal0.getEnclosingFunction();
//       assertNull(node0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//   }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "";
      String string1 = "r'zyaLm/JZj*VcD4'+";
      assertNotSame(string1, string0);
      
      MockFile mockFile0 = new MockFile(string0, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream((File) mockFile0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(mockPrintStream0);
      
      char char0 = '4';
      Compiler compiler0 = new Compiler((PrintStream) mockPrintStream0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      FindExportableNodes findExportableNodes0 = new FindExportableNodes((AbstractCompiler) compiler0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(findExportableNodes0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) findExportableNodes0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(nodeTraversal0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      Node node0 = Node.newNumber((double) char0, (int) char0, (int) char0);
      assertNotNull(node0);
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(213044, node0.getSourcePosition());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isHook());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isSetterDef());
      assertEquals(52, node0.getCharno());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isInc());
      assertEquals(52, node0.getLineno());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDo());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDec());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNot());
      
      Scope scope0 = null;
      nodeTraversal0.traverseInnerNode(node0, node0, scope0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(213044, node0.getSourcePosition());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isHook());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isSetterDef());
      assertEquals(52, node0.getCharno());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isInc());
      assertEquals(52, node0.getLineno());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDo());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDec());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNot());
      assertEquals(52, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      FlowSensitiveInlineVariables flowSensitiveInlineVariables0 = new FlowSensitiveInlineVariables((AbstractCompiler) compiler0);
      assertNotNull(flowSensitiveInlineVariables0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      assertNotNull(defaultPassConfig0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      MemoizedScopeCreator memoizedScopeCreator0 = defaultPassConfig0.getTypedScopeCreator();
      assertNull(memoizedScopeCreator0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) flowSensitiveInlineVariables0, (ScopeCreator) memoizedScopeCreator0);
      assertNotNull(nodeTraversal0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      
      Node[] nodeArray0 = new Node[2];
      double double0 = (-1.0);
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isExprResult());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNew());
      assertEquals(true, node0.isNumber());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isArrayLit());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isParamList());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isDo());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isWhile());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDebugger());
      
      nodeArray0[0] = node0;
      assertNotNull(nodeArray0[0]);
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isExprResult());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNew());
      assertEquals(true, node0.isNumber());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isArrayLit());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isParamList());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isDo());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isWhile());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, nodeArray0[0].isNumber());
      assertEquals(false, nodeArray0[0].isBlock());
      assertEquals(false, nodeArray0[0].isOr());
      assertEquals(false, nodeArray0[0].isVar());
      assertEquals(false, nodeArray0[0].isUnscopedQualifiedName());
      assertEquals(false, nodeArray0[0].isNull());
      assertEquals(false, nodeArray0[0].isGetterDef());
      assertEquals(false, nodeArray0[0].isDebugger());
      assertEquals(false, nodeArray0[0].isFor());
      assertEquals(false, nodeArray0[0].isNoSideEffectsCall());
      assertEquals(false, nodeArray0[0].isReturn());
      assertEquals(false, nodeArray0[0].isSetterDef());
      assertEquals(false, nodeArray0[0].isFromExterns());
      assertEquals(false, nodeArray0[0].isHook());
      assertEquals(false, nodeArray0[0].isThis());
      assertEquals(false, nodeArray0[0].isSwitch());
      assertEquals(false, nodeArray0[0].isAssignAdd());
      assertEquals(false, nodeArray0[0].isNew());
      assertEquals(false, nodeArray0[0].hasOneChild());
      assertEquals(false, nodeArray0[0].isInc());
      assertEquals(false, nodeArray0[0].isGetProp());
      assertEquals(false, nodeArray0[0].isIn());
      assertEquals(false, nodeArray0[0].isCase());
      assertEquals(false, nodeArray0[0].isContinue());
      assertEquals(false, nodeArray0[0].isLabel());
      assertEquals(false, nodeArray0[0].hasChildren());
      assertEquals(false, nodeArray0[0].isDefaultCase());
      assertEquals(false, nodeArray0[0].isAdd());
      assertEquals(-1, nodeArray0[0].getCharno());
      assertEquals(false, nodeArray0[0].isLocalResultCall());
      assertEquals(false, nodeArray0[0].isIf());
      assertEquals(39, nodeArray0[0].getType());
      assertEquals(false, nodeArray0[0].isEmpty());
      assertEquals(false, nodeArray0[0].isTrue());
      assertEquals(false, nodeArray0[0].isAnd());
      assertEquals(false, nodeArray0[0].isThrow());
      assertEquals(false, nodeArray0[0].isNE());
      assertEquals(false, nodeArray0[0].isBreak());
      assertEquals(-1, nodeArray0[0].getSourcePosition());
      assertNull(nodeArray0[0].getSourceFileName());
      assertEquals(false, nodeArray0[0].isDelProp());
      assertEquals(false, nodeArray0[0].isCatch());
      assertEquals(false, nodeArray0[0].isOnlyModifiesThisCall());
      assertEquals(false, nodeArray0[0].isQualifiedName());
      assertEquals(false, nodeArray0[0].isOptionalArg());
      assertEquals(false, nodeArray0[0].hasMoreThanOneChild());
      assertEquals(false, nodeArray0[0].isInstanceOf());
      assertEquals(false, nodeArray0[0].isName());
      assertEquals(false, nodeArray0[0].isString());
      assertEquals(0, nodeArray0[0].getChildCount());
      assertEquals(false, nodeArray0[0].isQuotedString());
      assertEquals(false, nodeArray0[0].isNot());
      assertEquals(false, nodeArray0[0].isAssign());
      assertEquals(false, nodeArray0[0].isFunction());
      assertEquals(false, nodeArray0[0].isParamList());
      assertEquals(false, nodeArray0[0].isVoid());
      assertEquals(false, nodeArray0[0].wasEmptyNode());
      assertEquals(false, nodeArray0[0].isWith());
      assertEquals(false, nodeArray0[0].isVarArgs());
      assertEquals(false, nodeArray0[0].isObjectLit());
      assertEquals(false, nodeArray0[0].isArrayLit());
      assertEquals(false, nodeArray0[0].isDo());
      assertEquals(false, nodeArray0[0].isScript());
      assertEquals(-1, nodeArray0[0].getLineno());
      assertEquals(false, nodeArray0[0].isCall());
      assertEquals(false, nodeArray0[0].isFalse());
      assertEquals(false, nodeArray0[0].isWhile());
      assertEquals(false, nodeArray0[0].isSyntheticBlock());
      assertEquals(false, nodeArray0[0].isExprResult());
      assertEquals(false, nodeArray0[0].isTry());
      assertEquals(false, nodeArray0[0].isComma());
      assertEquals(false, nodeArray0[0].isDec());
      assertEquals(false, nodeArray0[0].isGetElem());
      assertEquals(false, nodeArray0[0].isRegExp());
      assertEquals(false, nodeArray0[0].isLabelName());
      assertEquals(0, nodeArray0[0].getSideEffectFlags());
      assertEquals(0, nodeArray0[0].getLength());
      assertEquals(false, nodeArray0[0].isTypeOf());
      
      int int0 = (-712);
      Node node1 = new Node(int0, node0, nodeArray0[0]);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isExprResult());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNew());
      assertEquals(true, node0.isNumber());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isArrayLit());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isParamList());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isDo());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isWhile());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node1.isArrayLit());
      assertEquals(false, node1.isInstanceOf());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isGetElem());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isVar());
      assertEquals(false, node1.isNE());
      assertEquals(false, node1.isCall());
      assertEquals(-712, node1.getType());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isObjectLit());
      assertEquals(false, node1.isThis());
      assertEquals(false, node1.isFalse());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isHook());
      assertEquals(false, node1.isTrue());
      assertEquals(false, node1.isRegExp());
      assertEquals(false, node1.isSetterDef());
      assertEquals(false, node1.isString());
      assertEquals(false, node1.isGetterDef());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isAdd());
      assertEquals(false, node1.isNumber());
      assertEquals(false, node1.isBlock());
      assertEquals(false, node1.isNew());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isWhile());
      assertEquals(false, node1.isAssign());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isName());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isLabel());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isOr());
      assertEquals(false, node1.isParamList());
      assertEquals(false, node1.isDelProp());
      assertEquals(false, node1.isIn());
      assertEquals(false, node1.isFunction());
      assertEquals(false, node1.isComma());
      assertEquals(false, node1.isWith());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isAnd());
      assertEquals(false, node1.isNot());
      assertEquals(false, node1.isLabelName());
      assertEquals(false, node1.isSwitch());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isEmpty());
      assertEquals(false, node1.isTry());
      assertEquals(false, node1.isFor());
      assertEquals(0, node1.getLength());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isThrow());
      assertEquals(false, node1.isIf());
      assertEquals(false, node1.isCase());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isCatch());
      assertEquals(false, node1.isExprResult());
      assertEquals(false, node1.isDec());
      assertEquals(false, node1.isReturn());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isInc());
      assertEquals(false, node1.isAssignAdd());
      assertEquals(false, node1.isVoid());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isContinue());
      assertEquals(false, node1.isScript());
      assertEquals(false, node1.isNull());
      assertEquals(false, node1.isGetProp());
      assertEquals(false, node1.isBreak());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isTypeOf());
      assertEquals(false, node1.isDefaultCase());
      assertEquals(false, node1.isDo());
      assertEquals(false, node1.isDebugger());
      
      nodeArray0[1] = node1;
      assertNotNull(nodeArray0[1]);
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isExprResult());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNew());
      assertEquals(true, node0.isNumber());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isArrayLit());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isParamList());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isDo());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isWhile());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node1.isArrayLit());
      assertEquals(false, node1.isInstanceOf());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isGetElem());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isVar());
      assertEquals(false, node1.isNE());
      assertEquals(false, node1.isCall());
      assertEquals(-712, node1.getType());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isObjectLit());
      assertEquals(false, node1.isThis());
      assertEquals(false, node1.isFalse());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isHook());
      assertEquals(false, node1.isTrue());
      assertEquals(false, node1.isRegExp());
      assertEquals(false, node1.isSetterDef());
      assertEquals(false, node1.isString());
      assertEquals(false, node1.isGetterDef());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isAdd());
      assertEquals(false, node1.isNumber());
      assertEquals(false, node1.isBlock());
      assertEquals(false, node1.isNew());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isWhile());
      assertEquals(false, node1.isAssign());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isName());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isLabel());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isOr());
      assertEquals(false, node1.isParamList());
      assertEquals(false, node1.isDelProp());
      assertEquals(false, node1.isIn());
      assertEquals(false, node1.isFunction());
      assertEquals(false, node1.isComma());
      assertEquals(false, node1.isWith());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isAnd());
      assertEquals(false, node1.isNot());
      assertEquals(false, node1.isLabelName());
      assertEquals(false, node1.isSwitch());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isEmpty());
      assertEquals(false, node1.isTry());
      assertEquals(false, node1.isFor());
      assertEquals(0, node1.getLength());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isThrow());
      assertEquals(false, node1.isIf());
      assertEquals(false, node1.isCase());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isCatch());
      assertEquals(false, node1.isExprResult());
      assertEquals(false, node1.isDec());
      assertEquals(false, node1.isReturn());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isInc());
      assertEquals(false, node1.isAssignAdd());
      assertEquals(false, node1.isVoid());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isContinue());
      assertEquals(false, node1.isScript());
      assertEquals(false, node1.isNull());
      assertEquals(false, node1.isGetProp());
      assertEquals(false, node1.isBreak());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isTypeOf());
      assertEquals(false, node1.isDefaultCase());
      assertEquals(false, node1.isDo());
      assertEquals(false, node1.isDebugger());
      assertEquals(false, nodeArray0[1].isThis());
      assertEquals(false, nodeArray0[1].isParamList());
      assertEquals(false, nodeArray0[1].isVarArgs());
      assertEquals(false, nodeArray0[1].isTry());
      assertEquals(false, nodeArray0[1].isCatch());
      assertEquals(false, nodeArray0[1].isExprResult());
      assertEquals(false, nodeArray0[1].isArrayLit());
      assertEquals(false, nodeArray0[1].isVoid());
      assertEquals(false, nodeArray0[1].isDec());
      assertEquals(false, nodeArray0[1].wasEmptyNode());
      assertEquals(false, nodeArray0[1].isDefaultCase());
      assertEquals(false, nodeArray0[1].isLabelName());
      assertEquals(false, nodeArray0[1].isSyntheticBlock());
      assertEquals(false, nodeArray0[1].isTrue());
      assertEquals(true, nodeArray0[1].hasOneChild());
      assertEquals(false, nodeArray0[1].isAssign());
      assertEquals(false, nodeArray0[1].isNumber());
      assertEquals(false, nodeArray0[1].isDo());
      assertEquals(false, nodeArray0[1].isCase());
      assertEquals(false, nodeArray0[1].isOptionalArg());
      assertEquals(false, nodeArray0[1].isInstanceOf());
      assertEquals(false, nodeArray0[1].hasMoreThanOneChild());
      assertEquals(0, nodeArray0[1].getLength());
      assertEquals(false, nodeArray0[1].isGetterDef());
      assertEquals(false, nodeArray0[1].isBlock());
      assertEquals(false, nodeArray0[1].isDelProp());
      assertEquals(0, nodeArray0[1].getSideEffectFlags());
      assertEquals(false, nodeArray0[1].isLabel());
      assertEquals(-1, nodeArray0[1].getSourcePosition());
      assertEquals(false, nodeArray0[1].isContinue());
      assertNull(nodeArray0[1].getSourceFileName());
      assertEquals(false, nodeArray0[1].isDebugger());
      assertEquals(-1, nodeArray0[1].getLineno());
      assertEquals(false, nodeArray0[1].isIn());
      assertEquals(false, nodeArray0[1].isRegExp());
      assertEquals(false, nodeArray0[1].isNull());
      assertEquals(false, nodeArray0[1].isFalse());
      assertEquals(false, nodeArray0[1].isNew());
      assertEquals(false, nodeArray0[1].isUnscopedQualifiedName());
      assertEquals(false, nodeArray0[1].isWhile());
      assertEquals(false, nodeArray0[1].isQualifiedName());
      assertEquals(false, nodeArray0[1].isSetterDef());
      assertEquals(false, nodeArray0[1].isVar());
      assertEquals(false, nodeArray0[1].isNoSideEffectsCall());
      assertEquals(false, nodeArray0[1].isOnlyModifiesThisCall());
      assertEquals(false, nodeArray0[1].isGetProp());
      assertEquals(false, nodeArray0[1].isGetElem());
      assertEquals(1, nodeArray0[1].getChildCount());
      assertEquals(false, nodeArray0[1].isFromExterns());
      assertEquals(false, nodeArray0[1].isCall());
      assertEquals(false, nodeArray0[1].isHook());
      assertEquals(false, nodeArray0[1].isBreak());
      assertEquals(false, nodeArray0[1].isFor());
      assertEquals(false, nodeArray0[1].isTypeOf());
      assertEquals(false, nodeArray0[1].isThrow());
      assertEquals(false, nodeArray0[1].isLocalResultCall());
      assertEquals(true, nodeArray0[1].hasChildren());
      assertEquals(false, nodeArray0[1].isNE());
      assertEquals(false, nodeArray0[1].isObjectLit());
      assertEquals(false, nodeArray0[1].isInc());
      assertEquals(false, nodeArray0[1].isFunction());
      assertEquals(false, nodeArray0[1].isComma());
      assertEquals(false, nodeArray0[1].isReturn());
      assertEquals(false, nodeArray0[1].isAssignAdd());
      assertEquals(false, nodeArray0[1].isSwitch());
      assertEquals(false, nodeArray0[1].isScript());
      assertEquals(false, nodeArray0[1].isQuotedString());
      assertEquals(false, nodeArray0[1].isEmpty());
      assertEquals(false, nodeArray0[1].isName());
      assertEquals(-1, nodeArray0[1].getCharno());
      assertEquals(-712, nodeArray0[1].getType());
      assertEquals(false, nodeArray0[1].isAdd());
      assertEquals(false, nodeArray0[1].isString());
      assertEquals(false, nodeArray0[1].isNot());
      assertEquals(false, nodeArray0[1].isWith());
      assertEquals(false, nodeArray0[1].isAnd());
      assertEquals(false, nodeArray0[1].isOr());
      assertEquals(false, nodeArray0[1].isIf());
      
      // Undeclared exception!
      try {
        nodeTraversal0.traverseRoots(nodeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      String string0 = "";
      CheckMissingGetCssName checkMissingGetCssName0 = new CheckMissingGetCssName(compiler0, checkLevel0, string0);
      assertNotNull(checkMissingGetCssName0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      assertNotNull(syntacticScopeCreator0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkMissingGetCssName0, (ScopeCreator) syntacticScopeCreator0);
      assertNotNull(nodeTraversal0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      
      Node node0 = nodeTraversal0.getCurrentNode();
      assertNull(node0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      
      DiagnosticType diagnosticType0 = ProcessClosurePrimitives.TOO_MANY_ARGUMENTS_ERROR;
      assertNotNull(diagnosticType0);
      
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try {
        nodeTraversal0.report(node0, diagnosticType0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test07() {}
//   @Test
//   public void test07()  throws Throwable  {
//       Logger logger0 = Logger.getGlobal();
//       assertNotNull(logger0);
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("global", logger0.getName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       
//       LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
//       assertNotNull(loggerErrorManager0);
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("global", logger0.getName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       
//       Compiler compiler0 = new Compiler((ErrorManager) loggerErrorManager0);
//       assertNotNull(compiler0);
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("global", logger0.getName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       
//       CheckSideEffects.StripProtection checkSideEffects_StripProtection0 = new CheckSideEffects.StripProtection(compiler0);
//       assertNotNull(checkSideEffects_StripProtection0);
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("global", logger0.getName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkSideEffects_StripProtection0);
//       assertNotNull(nodeTraversal0);
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("global", logger0.getName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       
//       int int0 = 376;
//       String string0 = "JSC_DUPLICATE_EXTERN_INPUT";
//       Node node0 = Node.newString(int0, string0, int0, int0);
//       assertNotNull(node0);
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isTry());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isThrow());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isNumber());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(376, node0.getLineno());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isNE());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(376, node0.getType());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isWhile());
//       assertEquals(1540472, node0.getSourcePosition());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isScript());
//       assertEquals(false, node0.isName());
//       assertEquals(376, node0.getCharno());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isGetElem());
//       
//       DiagnosticType diagnosticType0 = Compiler.OPTIMIZE_LOOP_ERROR;
//       assertNotNull(diagnosticType0);
//       
//       String[] stringArray0 = new String[18];
//       JSError jSError0 = nodeTraversal0.makeError(node0, diagnosticType0.level, diagnosticType0, stringArray0);
//       assertNotNull(jSError0);
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("global", logger0.getName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals(0, jSError0.getNodeLength());
//       assertEquals(376, jSError0.getCharno());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isTry());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isThrow());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isNumber());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(376, node0.getLineno());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isNE());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(376, node0.getType());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isWhile());
//       assertEquals(1540472, node0.getSourcePosition());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isScript());
//       assertEquals(false, node0.isName());
//       assertEquals(376, node0.getCharno());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isGetElem());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//   }

  @Test
  public void test08() {}
//   @Test
//   public void test08()  throws Throwable  {
//       Logger logger0 = Logger.getGlobal();
//       assertNotNull(logger0);
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       
//       LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
//       assertNotNull(loggerErrorManager0);
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       
//       Compiler compiler0 = new Compiler((ErrorManager) loggerErrorManager0);
//       assertNotNull(compiler0);
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       
//       CheckSideEffects.StripProtection checkSideEffects_StripProtection0 = new CheckSideEffects.StripProtection(compiler0);
//       assertNotNull(checkSideEffects_StripProtection0);
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkSideEffects_StripProtection0);
//       assertNotNull(nodeTraversal0);
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       
//       // Undeclared exception!
//       try {
//         CompilerInput compilerInput0 = nodeTraversal0.getInput();
//         fail("Expecting exception: NullPointerException");
//       
//       } catch(NullPointerException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test09() {}
//   @Test
//   public void test09()  throws Throwable  {
//       Logger logger0 = Logger.getGlobal();
//       assertNotNull(logger0);
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       
//       LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
//       assertNotNull(loggerErrorManager0);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       
//       Compiler compiler0 = new Compiler((ErrorManager) loggerErrorManager0);
//       assertNotNull(compiler0);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getErrorCount());
//       
//       CheckSideEffects.StripProtection checkSideEffects_StripProtection0 = new CheckSideEffects.StripProtection(compiler0);
//       assertNotNull(checkSideEffects_StripProtection0);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getErrorCount());
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkSideEffects_StripProtection0);
//       assertNotNull(nodeTraversal0);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       
//       int int0 = 376;
//       String string0 = "JSC_DUPLICATE_EXTERN_INPUT";
//       Node node0 = Node.newString(int0, string0, int0, int0);
//       assertNotNull(node0);
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isQualifiedName());
//       assertNull(node0.getSourceFileName());
//       assertEquals(376, node0.getLineno());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(1540472, node0.getSourcePosition());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isScript());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(376, node0.getCharno());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isIn());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isFunction());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isTrue());
//       assertEquals(376, node0.getType());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isBreak());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isAssign());
//       
//       DiagnosticType diagnosticType0 = Compiler.OPTIMIZE_LOOP_ERROR;
//       assertNotNull(diagnosticType0);
//       
//       String[] stringArray0 = new String[18];
//       JSError jSError0 = nodeTraversal0.makeError(node0, diagnosticType0, stringArray0);
//       assertNotNull(jSError0);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertEquals(376, jSError0.getCharno());
//       assertEquals(0, jSError0.getNodeLength());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isQualifiedName());
//       assertNull(node0.getSourceFileName());
//       assertEquals(376, node0.getLineno());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(1540472, node0.getSourcePosition());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isScript());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(376, node0.getCharno());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isIn());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isFunction());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isTrue());
//       assertEquals(376, node0.getType());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isBreak());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isAssign());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//   }

  @Test
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      String string0 = "";
      CheckMissingGetCssName checkMissingGetCssName0 = new CheckMissingGetCssName(compiler0, checkLevel0, string0);
      assertNotNull(checkMissingGetCssName0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      int int0 = 100;
      Node node0 = Node.newString(int0, string0);
      assertNotNull(node0);
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isSetterDef());
      assertEquals(true, node0.isOr());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAnd());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNE());
      assertEquals(-1, node0.getLineno());
      assertEquals(100, node0.getType());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isBlock());
      
      NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) checkMissingGetCssName0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isSetterDef());
      assertEquals(true, node0.isOr());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAnd());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNE());
      assertEquals(-1, node0.getLineno());
      assertEquals(100, node0.getType());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isBlock());
  }
}
