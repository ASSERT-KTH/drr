/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 23:35:05 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.CollapseProperties;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.rhino.Node;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class CollapsePropertiesEvoSuite_branch_Test  {

  @Test
  public void test0() {}
//   @Test
//   public void test0()  throws Throwable  {
//       Logger logger0 = Logger.getGlobal();
//       assertNotNull(logger0);
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       
//       LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
//       assertNotNull(loggerErrorManager0);
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       
//       Compiler compiler0 = new Compiler((ErrorManager) loggerErrorManager0);
//       assertNotNull(compiler0);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, compiler0.getErrorCount());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       
//       boolean boolean0 = false;
//       boolean boolean1 = true;
//       CollapseProperties collapseProperties0 = new CollapseProperties(compiler0, boolean0, boolean1);
//       assertNotNull(collapseProperties0);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, compiler0.getErrorCount());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertFalse(boolean1 == boolean0);
//       assertFalse(boolean0 == boolean1);
//       
//       int int0 = 0;
//       Node node0 = new Node(int0);
//       assertNotNull(node0);
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(0, node0.getType());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isQuotedString());
//       
//       collapseProperties0.process(node0, node0);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, compiler0.getErrorCount());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(0, node0.getType());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertFalse(boolean1 == boolean0);
//       assertFalse(boolean0 == boolean1);
//   }

  @Test
  public void test1() {}
//   @Test
//   public void test1()  throws Throwable  {
//       Logger logger0 = Logger.getGlobal();
//       assertNotNull(logger0);
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       
//       LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
//       assertNotNull(loggerErrorManager0);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       
//       Compiler compiler0 = new Compiler((ErrorManager) loggerErrorManager0);
//       assertNotNull(compiler0);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       
//       boolean boolean0 = false;
//       CollapseProperties collapseProperties0 = new CollapseProperties(compiler0, boolean0, boolean0);
//       assertNotNull(collapseProperties0);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       
//       int int0 = 0;
//       Node node0 = new Node(int0);
//       assertNotNull(node0);
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(0, node0.getType());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.hasChildren());
//       
//       collapseProperties0.process(node0, node0);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(0, node0.getType());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.hasChildren());
//   }
}
