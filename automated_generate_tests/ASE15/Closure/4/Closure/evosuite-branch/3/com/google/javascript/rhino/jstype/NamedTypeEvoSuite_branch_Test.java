/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:14:58 GMT 2014
 */

package com.google.javascript.rhino.jstype;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.SimpleSlot;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.UnknownType;



import org.junit.runner.RunWith;


public class NamedTypeEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "&\"W2;c3t~+0qORT";
      int int0 = 1404;
      boolean boolean0 = true;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      SimpleSlot simpleSlot0 = new SimpleSlot(string0, (JSType) namedType0, boolean0);
      assertNotNull(simpleSlot0);
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(true, simpleSlot0.isTypeInferred());
      assertEquals("&\"W2;c3t~+0qORT", simpleSlot0.getName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NamedType namedType1 = (NamedType)namedType0.getTypedefType(simpleErrorReporter0, simpleSlot0, string0);
      assertSame(namedType0, namedType1);
      assertSame(namedType1, namedType0);
      assertNotNull(namedType1);
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(true, simpleSlot0.isTypeInferred());
      assertEquals("&\"W2;c3t~+0qORT", simpleSlot0.getName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType1.isNominalConstructor());
      assertEquals(false, namedType1.isUnionType());
      assertEquals(false, namedType1.isEnumType());
      assertEquals(false, namedType1.hasCachedValues());
      assertEquals(false, namedType1.isEnumElementType());
      assertEquals(false, namedType1.isNullType());
      assertEquals(false, namedType1.isTemplateType());
      assertEquals(false, namedType1.isFunctionType());
      assertEquals(false, namedType1.isRecordType());
      assertEquals(false, namedType1.isStringValueType());
      assertEquals(false, namedType1.isBooleanValueType());
      assertEquals(false, namedType1.isFunctionPrototypeType());
      assertEquals(false, namedType1.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, namedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType1.isResolved());
      assertEquals(false, namedType1.isParameterizedType());
      assertEquals(false, namedType1.isNumberValueType());
  }

  @Test
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "nul";
      int int0 = (-1885);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NamedType namedType1 = null;
      SimpleSlot simpleSlot0 = new SimpleSlot(string0, (JSType) namedType1, boolean0);
      assertNotNull(simpleSlot0);
      assertEquals(false, simpleSlot0.isTypeInferred());
      assertEquals("nul", simpleSlot0.getName());
      
      JSType jSType0 = namedType0.getTypedefType(simpleErrorReporter0, simpleSlot0, string0);
      assertNull(jSType0);
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, namedType0.isResolved());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, simpleSlot0.isTypeInferred());
      assertEquals("nul", simpleSlot0.getName());
  }

  @Test
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertNotNull(unknownType0);
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      jSTypeRegistry0.setLastGeneration(boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "";
      int int0 = 124;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isResolved());
      
      NamedType namedType1 = (NamedType)namedType0.resolveInternal(simpleErrorReporter0, unknownType0);
      assertSame(namedType1, namedType0);
      assertSame(namedType0, namedType1);
      assertNotNull(namedType1);
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, namedType1.isEnumElementType());
      assertEquals(false, namedType1.isParameterizedType());
      assertEquals(false, namedType1.isNominalConstructor());
      assertEquals(false, namedType1.isFunctionType());
      assertEquals(false, namedType1.isVoidType());
      assertEquals(false, namedType1.isBooleanValueType());
      assertEquals(false, namedType1.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType1.isEnumType());
      assertEquals(false, namedType1.isStringValueType());
      assertEquals(false, namedType1.isNullType());
      assertEquals(false, namedType1.isNumberValueType());
      assertEquals(false, namedType1.isRecordType());
      assertEquals(false, namedType1.isFunctionPrototypeType());
      assertEquals(false, namedType1.isTemplateType());
      assertEquals(true, namedType1.isResolved());
      assertEquals(false, namedType1.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, namedType0.isResolved());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isEnumType());
  }

  @Test
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertNotNull(unknownType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNumberValueType());
      
      jSTypeRegistry0.setLastGeneration(boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "null";
      int int0 = (-811);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNullType());
      
      NamedType namedType1 = (NamedType)namedType0.resolveInternal(simpleErrorReporter0, unknownType0);
      assertSame(namedType1, namedType0);
      assertSame(namedType0, namedType1);
      assertNotNull(namedType1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, namedType1.hasCachedValues());
      assertEquals(false, namedType1.isEnumElementType());
      assertEquals(true, namedType1.isResolved());
      assertEquals(false, namedType1.isStringValueType());
      assertEquals(false, namedType1.isFunctionPrototypeType());
      assertEquals(false, namedType1.isParameterizedType());
      assertEquals(false, namedType1.isNullType());
      assertEquals(false, namedType1.isBooleanValueType());
      assertEquals(false, namedType1.isRecordType());
      assertEquals(false, namedType1.isNumberValueType());
      assertEquals(false, namedType1.isEnumType());
      assertEquals(false, namedType1.isTemplateType());
      assertEquals(false, namedType1.isVoidType());
      assertEquals(false, namedType1.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType1.isNominalConstructor());
      assertEquals(false, namedType1.isUnionType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, namedType0.isResolved());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNullType());
  }

  @Test
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "nul";
      int int0 = (-1885);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      jSTypeRegistry0.forwardDeclareType(string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = (NoResolvedType)JSType.safeResolve(namedType0, simpleErrorReporter0, namedType0);
      assertNotNull(noResolvedType0);
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(true, namedType0.isResolved());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
  }

  @Test
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertNotNull(unknownType0);
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "null";
      int int0 = 10;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NullType nullType0 = (NullType)namedType0.resolveInternal(simpleErrorReporter0, unknownType0);
      assertNotNull(nullType0);
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(true, nullType0.isResolved());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isParameterizedType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, namedType0.isResolved());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "&\"W2;c3t~+0qORT";
      int int0 = 1404;
      boolean boolean0 = true;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertNotNull(unknownType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isParameterizedType());
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNotNull(noObjectType0);
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isParameterizedType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = noObjectType0.getSource();
      assertNull(node0);
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isParameterizedType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = namedType0.defineProperty(string0, unknownType0, boolean0, node0);
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isParameterizedType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isParameterizedType());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      
      boolean boolean2 = namedType0.defineProperty(string0, noObjectType0, boolean0, node0);
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isParameterizedType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isParameterizedType());
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
  }

  @Test
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      //  // Unstable assertion: assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      //  // Unstable assertion: assertNotNull(jSTypeRegistry0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "Dlz9\\";
      int int0 = 540;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      //  // Unstable assertion: assertNotNull(namedType0);
      //  // Unstable assertion: assertEquals(false, namedType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, namedType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, namedType0.isResolved());
      //  // Unstable assertion: assertEquals(false, namedType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, namedType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, namedType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, namedType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, namedType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, namedType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, namedType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, namedType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, namedType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, namedType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, namedType0.isNullType());
      //  // Unstable assertion: assertEquals(false, namedType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, namedType0.isVoidType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      //  // Unstable assertion: assertNotNull(noResolvedType0);
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNullType());
      //  // Unstable assertion: assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesObjectContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesNumberContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(2147483647, noResolvedType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesStringContext());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isEnumType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isInterface());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isRecordType());
      //  // Unstable assertion: assertNull(noResolvedType0.getReferenceName());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isResolved());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isAllType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.isNullable());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isFunctionType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = noResolvedType0.getSource();
      //  // Unstable assertion: assertNull(node0);
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNullType());
      //  // Unstable assertion: assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesObjectContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesNumberContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(2147483647, noResolvedType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesStringContext());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isEnumType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isInterface());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isRecordType());
      //  // Unstable assertion: assertNull(noResolvedType0.getReferenceName());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isResolved());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isAllType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.isNullable());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isFunctionType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      jSTypeRegistry0.forwardDeclareType(string0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = namedType0.defineDeclaredProperty(string0, (JSType) noResolvedType0, node0);
      //  // Unstable assertion: assertEquals(false, namedType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, namedType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, namedType0.isResolved());
      //  // Unstable assertion: assertEquals(false, namedType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, namedType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, namedType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, namedType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, namedType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, namedType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, namedType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, namedType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, namedType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, namedType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, namedType0.isNullType());
      //  // Unstable assertion: assertEquals(false, namedType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, namedType0.isVoidType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNullType());
      //  // Unstable assertion: assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesObjectContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesNumberContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(2147483647, noResolvedType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesStringContext());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isEnumType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isInterface());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isRecordType());
      //  // Unstable assertion: assertNull(noResolvedType0.getReferenceName());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isResolved());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isAllType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.isNullable());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isFunctionType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertTrue(boolean1);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(boolean0 == boolean1);
      
      NoResolvedType noResolvedType1 = (NoResolvedType)namedType0.forceResolve((ErrorReporter) simpleErrorReporter0, (StaticScope<JSType>) noResolvedType0);
      //  // Unstable assertion: assertNotSame(noResolvedType1, noResolvedType0);
      //  // Unstable assertion: assertNotSame(noResolvedType0, noResolvedType1);
      //  // Unstable assertion: assertNotNull(noResolvedType1);
      //  // Unstable assertion: assertEquals(false, namedType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, namedType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(true, namedType0.isResolved());
      //  // Unstable assertion: assertEquals(false, namedType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, namedType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, namedType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, namedType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, namedType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, namedType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, namedType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, namedType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, namedType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, namedType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, namedType0.isNullType());
      //  // Unstable assertion: assertEquals(false, namedType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, namedType0.isVoidType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertNull(noResolvedType1.getReferenceName());
      //  // Unstable assertion: assertEquals(false, noResolvedType1.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, noResolvedType1.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(0, noResolvedType1.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(true, noResolvedType1.matchesStringContext());
      //  // Unstable assertion: assertEquals(true, noResolvedType1.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, noResolvedType1.isInterface());
      //  // Unstable assertion: assertEquals(true, noResolvedType1.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, noResolvedType1.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, noResolvedType1.isNullType());
      //  // Unstable assertion: assertEquals(false, noResolvedType1.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(true, noResolvedType1.matchesObjectContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType1.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, noResolvedType1.isStringValueType());
      //  // Unstable assertion: assertEquals(true, noResolvedType1.isResolved());
      //  // Unstable assertion: assertEquals(false, noResolvedType1.isFunctionType());
      //  // Unstable assertion: assertEquals(false, noResolvedType1.isNominalConstructor());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.EMPTY, noResolvedType1.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, noResolvedType1.isTemplateType());
      //  // Unstable assertion: assertEquals(false, noResolvedType1.isRecordType());
      //  // Unstable assertion: assertEquals(false, noResolvedType1.isVoidType());
      //  // Unstable assertion: assertEquals(true, noResolvedType1.isConstructor());
      //  // Unstable assertion: assertEquals(false, noResolvedType1.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(true, noResolvedType1.isNullable());
      //  // Unstable assertion: assertEquals(false, noResolvedType1.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, noResolvedType1.isUnionType());
      //  // Unstable assertion: assertEquals(false, noResolvedType1.isNominalType());
      //  // Unstable assertion: assertEquals(false, noResolvedType1.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, noResolvedType1.isEnumType());
      //  // Unstable assertion: assertEquals(false, noResolvedType1.isAllType());
      //  // Unstable assertion: assertEquals(true, noResolvedType1.canBeCalled());
      //  // Unstable assertion: assertEquals(true, noResolvedType1.matchesNumberContext());
      //  // Unstable assertion: assertEquals(2147483647, noResolvedType1.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, noResolvedType1.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNullType());
      //  // Unstable assertion: assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesObjectContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesNumberContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(2147483647, noResolvedType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesStringContext());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isEnumType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isInterface());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isRecordType());
      //  // Unstable assertion: assertNull(noResolvedType0.getReferenceName());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isResolved());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isAllType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.isNullable());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isFunctionType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertFalse(noResolvedType1.equals((Object)noResolvedType0));
      //  // Unstable assertion: assertFalse(noResolvedType0.equals((Object)noResolvedType1));
      //  // Unstable assertion: assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "Bad type annotation. Unknown type ";
      int int0 = (-1224);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = false;
      String string1 = namedType0.toStringHelper(boolean0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("Bad type annotation. Unknown type ", string1);
  }

  @Test
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      int int0 = 0;
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "SyngtaxError";
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = namedType0.isNamedType();
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "Bad type annotation. Unknown type ";
      int int0 = (-1224);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isNumberValueType());
      
      int int1 = namedType0.hashCode();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals((-1369642140), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "Bad type annotation. Unknown type ";
      int int0 = (-1224);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnknownType unknownType0 = (UnknownType)namedType0.getTemplatizedType(string0);
      assertNotNull(unknownType0);
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = namedType0.isEquivalentTo((JSType) unknownType0);
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean0);
  }
}
