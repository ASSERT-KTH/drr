/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 00:10:41 GMT 2014
 */

package com.google.javascript.rhino.jstype;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.PrototypeObjectType;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.UnresolvedTypeExpression;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class ObjectTypeEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      JSType jSType0 = null;
      ObjectType objectType0 = ObjectType.cast(jSType0);
      assertNull(objectType0);
  }

  @Test
  public void test01()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      NoResolvedType noResolvedType1 = (NoResolvedType)ObjectType.cast((JSType) noResolvedType0);
      assertSame(noResolvedType1, noResolvedType0);
      assertSame(noResolvedType0, noResolvedType1);
      assertEquals(false, noResolvedType1.isFunctionPrototypeType());
      assertEquals(false, noResolvedType1.isOrdinaryFunction());
      assertEquals(false, noResolvedType1.isEnumType());
      assertEquals(true, noResolvedType1.matchesObjectContext());
      assertEquals(false, noResolvedType1.isEnumElementType());
      assertEquals(true, noResolvedType1.isNullable());
      assertEquals(true, noResolvedType1.matchesNumberContext());
      assertEquals(false, noResolvedType1.isStringValueType());
      assertEquals(false, noResolvedType1.isParameterizedType());
      assertEquals(false, noResolvedType1.isInterface());
      assertEquals(true, noResolvedType1.matchesStringContext());
      assertEquals(false, noResolvedType1.isNominalConstructor());
      assertEquals(false, noResolvedType1.isResolved());
      assertEquals(2147483647, noResolvedType1.getMaxArguments());
      assertEquals(0, noResolvedType1.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType1.isNullType());
      assertEquals(false, noResolvedType1.isVoidType());
      assertEquals(false, noResolvedType1.hasCachedValues());
      assertEquals(false, noResolvedType1.isReturnTypeInferred());
      assertEquals(false, noResolvedType1.isNoObjectType());
      assertNull(noResolvedType1.getReferenceName());
      assertEquals(false, noResolvedType1.isRecordType());
      assertEquals(false, noResolvedType1.isTemplateType());
      assertEquals(false, noResolvedType1.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType1.isAllType());
      assertEquals(false, noResolvedType1.isUnionType());
      assertEquals(false, noResolvedType1.isFunctionType());
      assertEquals(true, noResolvedType1.isConstructor());
      assertEquals(true, noResolvedType1.canBeCalled());
      assertEquals(false, noResolvedType1.isCheckedUnknownType());
      assertEquals(false, noResolvedType1.isBooleanValueType());
      assertEquals(true, noResolvedType1.hasInstanceType());
      assertEquals(false, noResolvedType1.isNumberValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType1);
  }

  @Test
  public void test02()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isParameterizedType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertNotNull(stringType0);
      
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)stringType0.dereference();
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isParameterizedType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isParameterizedType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertNotNull(instanceObjectType0);
      
      boolean boolean0 = instanceObjectType0.hasCachedValues();
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isParameterizedType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isParameterizedType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertTrue(boolean0);
  }

  @Test
  public void test03()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[6];
      JSTypeNative jSTypeNative0 = JSTypeNative.RANGE_ERROR_FUNCTION_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals("RANGE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[0].name());
      assertEquals(22, jSTypeNativeArray0[0].ordinal());
      assertEquals("RANGE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[0].toString());
      
      JSTypeNative jSTypeNative1 = JSTypeNative.EVAL_ERROR_TYPE;
      assertNotSame(jSTypeNative1, jSTypeNative0);
      
      jSTypeNativeArray0[1] = jSTypeNative1;
      assertEquals("EVAL_ERROR_TYPE", jSTypeNativeArray0[1].toString());
      assertEquals("EVAL_ERROR_TYPE", jSTypeNativeArray0[1].name());
      assertEquals(11, jSTypeNativeArray0[1].ordinal());
      
      // Undeclared exception!
      try {
        JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      int int0 = 1981;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isBlock());
      assertEquals(1981, node0.getCharno());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isName());
      assertEquals(8116157, node0.getSourcePosition());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1981, node0.getLineno());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isExprResult());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNumber());
      assertEquals(1981, node0.getType());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isThis());
      assertNotNull(node0);
      
      String string0 = "t";
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unresolvedTypeExpression0.isEnumType());
      assertEquals(false, unresolvedTypeExpression0.isNominalConstructor());
      assertEquals(false, unresolvedTypeExpression0.isNativeObjectType());
      assertEquals(false, unresolvedTypeExpression0.isAllType());
      assertEquals(false, unresolvedTypeExpression0.isInterface());
      assertEquals(false, unresolvedTypeExpression0.isStringValueType());
      assertEquals(false, unresolvedTypeExpression0.isNoObjectType());
      assertEquals(false, unresolvedTypeExpression0.isNoType());
      assertEquals(false, unresolvedTypeExpression0.isNoResolvedType());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals(true, unresolvedTypeExpression0.isUnknownType());
      assertEquals(false, unresolvedTypeExpression0.hasCachedValues());
      assertEquals(false, unresolvedTypeExpression0.isParameterizedType());
      assertEquals(false, unresolvedTypeExpression0.isFunctionType());
      assertEquals(false, unresolvedTypeExpression0.hasReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isOrdinaryFunction());
      assertEquals(false, unresolvedTypeExpression0.isFunctionPrototypeType());
      assertEquals(false, unresolvedTypeExpression0.isNullType());
      assertEquals(true, unresolvedTypeExpression0.isNullable());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertEquals(true, unresolvedTypeExpression0.hasDisplayName());
      assertEquals(true, unresolvedTypeExpression0.matchesObjectContext());
      assertEquals(false, unresolvedTypeExpression0.isResolved());
      assertEquals(false, unresolvedTypeExpression0.isBooleanValueType());
      assertEquals(false, unresolvedTypeExpression0.isRecordType());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isEnumElementType());
      assertEquals(false, unresolvedTypeExpression0.isNumberValueType());
      assertEquals(false, unresolvedTypeExpression0.isNominalType());
      assertEquals(true, unresolvedTypeExpression0.canBeCalled());
      assertEquals(false, unresolvedTypeExpression0.isTemplateType());
      assertEquals(false, unresolvedTypeExpression0.isCheckedUnknownType());
      assertEquals(true, unresolvedTypeExpression0.matchesStringContext());
      assertEquals(false, unresolvedTypeExpression0.isUnionType());
      assertEquals(false, unresolvedTypeExpression0.isVoidType());
      assertEquals(false, unresolvedTypeExpression0.isConstructor());
      assertEquals(true, unresolvedTypeExpression0.matchesNumberContext());
      assertEquals(false, node0.isBlock());
      assertEquals(1981, node0.getCharno());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isName());
      assertEquals(8116157, node0.getSourcePosition());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1981, node0.getLineno());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isExprResult());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNumber());
      assertEquals(1981, node0.getType());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isThis());
      assertNotNull(unresolvedTypeExpression0);
      
      boolean boolean0 = unresolvedTypeExpression0.isPropertyInExterns(string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unresolvedTypeExpression0.isEnumType());
      assertEquals(false, unresolvedTypeExpression0.isNominalConstructor());
      assertEquals(false, unresolvedTypeExpression0.isNativeObjectType());
      assertEquals(false, unresolvedTypeExpression0.isAllType());
      assertEquals(false, unresolvedTypeExpression0.isInterface());
      assertEquals(false, unresolvedTypeExpression0.isStringValueType());
      assertEquals(false, unresolvedTypeExpression0.isNoObjectType());
      assertEquals(false, unresolvedTypeExpression0.isNoType());
      assertEquals(false, unresolvedTypeExpression0.isNoResolvedType());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals(true, unresolvedTypeExpression0.isUnknownType());
      assertEquals(false, unresolvedTypeExpression0.hasCachedValues());
      assertEquals(false, unresolvedTypeExpression0.isParameterizedType());
      assertEquals(false, unresolvedTypeExpression0.isFunctionType());
      assertEquals(false, unresolvedTypeExpression0.hasReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isOrdinaryFunction());
      assertEquals(false, unresolvedTypeExpression0.isFunctionPrototypeType());
      assertEquals(false, unresolvedTypeExpression0.isNullType());
      assertEquals(true, unresolvedTypeExpression0.isNullable());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertEquals(true, unresolvedTypeExpression0.hasDisplayName());
      assertEquals(true, unresolvedTypeExpression0.matchesObjectContext());
      assertEquals(false, unresolvedTypeExpression0.isResolved());
      assertEquals(false, unresolvedTypeExpression0.isBooleanValueType());
      assertEquals(false, unresolvedTypeExpression0.isRecordType());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isEnumElementType());
      assertEquals(false, unresolvedTypeExpression0.isNumberValueType());
      assertEquals(false, unresolvedTypeExpression0.isNominalType());
      assertEquals(true, unresolvedTypeExpression0.canBeCalled());
      assertEquals(false, unresolvedTypeExpression0.isTemplateType());
      assertEquals(false, unresolvedTypeExpression0.isCheckedUnknownType());
      assertEquals(true, unresolvedTypeExpression0.matchesStringContext());
      assertEquals(false, unresolvedTypeExpression0.isUnionType());
      assertEquals(false, unresolvedTypeExpression0.isVoidType());
      assertEquals(false, unresolvedTypeExpression0.isConstructor());
      assertEquals(true, unresolvedTypeExpression0.matchesNumberContext());
      assertEquals(false, node0.isBlock());
      assertEquals(1981, node0.getCharno());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isName());
      assertEquals(8116157, node0.getSourcePosition());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1981, node0.getLineno());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isExprResult());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNumber());
      assertEquals(1981, node0.getType());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isThis());
      assertFalse(boolean0);
  }

  @Test
  public void test05()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNominalType());
      assertNotNull(noResolvedType0);
      
      String string0 = noResolvedType0.getDisplayName();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNominalType());
      assertNull(string0);
      
      String string1 = "rv<zoEJ{$(";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNominalType());
      assertNotNull(errorFunctionType0);
      
      Node node0 = noResolvedType0.getSource();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNominalType());
      assertNull(node0);
      
      boolean boolean0 = errorFunctionType0.defineDeclaredProperty(string1, (JSType) noResolvedType0, node0);
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNominalType());
      assertTrue(boolean0);
      
      boolean boolean1 = errorFunctionType0.defineSynthesizedProperty(string1, (JSType) noResolvedType0, node0);
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNominalType());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test
  public void test06()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "L-y";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertNotNull(errorFunctionType0);
      
      boolean boolean0 = errorFunctionType0.isPropertyTypeInferred(string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertFalse(boolean0);
  }

  @Test
  public void test07()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isAllType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      String string0 = "6n7O+8{\\X";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      Node node0 = noResolvedType0.getSource();
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isAllType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(node0);
      
      boolean boolean0 = errorFunctionType0.defineInferredProperty(string0, (JSType) noResolvedType0, node0);
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isAllType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean0);
      
      boolean boolean1 = errorFunctionType0.isPropertyTypeInferred(string0);
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test
  public void test08()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertNotNull(noResolvedType0);
      
      String string0 = "6n7O+8{\\X";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertNotNull(errorFunctionType0);
      
      Node node0 = noResolvedType0.getSource();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertNull(node0);
      
      boolean boolean0 = errorFunctionType0.defineInferredProperty(string0, (JSType) noResolvedType0, node0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertTrue(boolean0);
      
      boolean boolean1 = errorFunctionType0.defineSynthesizedProperty(string0, (JSType) noResolvedType0, node0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test
  public void test09()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      String string0 = "6n7O+8{\\X";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      Node node0 = noResolvedType0.getSource();
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(node0);
      
      boolean boolean0 = errorFunctionType0.defineInferredProperty(string0, (JSType) noResolvedType0, node0);
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean0);
      
      ErrorFunctionType errorFunctionType1 = (ErrorFunctionType)FunctionType.getTopDefiningInterface((ObjectType) errorFunctionType0, string0);
      assertSame(errorFunctionType0, errorFunctionType1);
      assertSame(errorFunctionType1, errorFunctionType0);
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType1.isNominalType());
      assertEquals(false, errorFunctionType1.isReturnTypeInferred());
      assertEquals(false, errorFunctionType1.isRecordType());
      assertEquals(false, errorFunctionType1.isEnumElementType());
      assertEquals(false, errorFunctionType1.isNoType());
      assertEquals(false, errorFunctionType1.isNoResolvedType());
      assertEquals(true, errorFunctionType1.isConstructor());
      assertEquals(false, errorFunctionType1.isVoidType());
      assertEquals(false, errorFunctionType1.isNumberValueType());
      assertEquals(true, errorFunctionType1.canBeCalled());
      assertEquals(false, errorFunctionType1.isStringValueType());
      assertEquals(false, errorFunctionType1.isResolved());
      assertEquals(true, errorFunctionType1.isNominalConstructor());
      assertEquals(true, errorFunctionType1.hasCachedValues());
      assertEquals(true, errorFunctionType1.isFunctionType());
      assertEquals(3, errorFunctionType1.getMaxArguments());
      assertEquals(false, errorFunctionType1.isParameterizedType());
      assertEquals(false, errorFunctionType1.isNoObjectType());
      assertEquals(0, errorFunctionType1.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType1.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType1.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType1.isInterface());
      assertEquals(false, errorFunctionType1.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType1.isAllType());
      assertEquals(false, errorFunctionType1.isTemplateType());
      assertEquals(false, errorFunctionType1.isUnionType());
      assertEquals(false, errorFunctionType1.isOrdinaryFunction());
      assertEquals(false, errorFunctionType1.isNullType());
      assertEquals(true, errorFunctionType1.hasInstanceType());
      assertEquals(false, errorFunctionType1.isBooleanValueType());
      assertEquals(false, errorFunctionType1.isCheckedUnknownType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType1);
  }

  @Test
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isParameterizedType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noObjectType0);
      
      String string0 = "";
      NoType noType0 = (NoType)noObjectType0.getPropertyType(string0);
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isParameterizedType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isResolved());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isInterface());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isParameterizedType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noType0);
  }

  @Test
  public void test11()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      boolean boolean0 = true;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isResolved());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isUnionType());
      assertNotNull(unknownType0);
      
      String string0 = "";
      // Undeclared exception!
      try {
        JSType jSType0 = unknownType0.getPropertyType(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertNotNull(noResolvedType0);
      
      String string0 = "rv<zoEJ{$(";
      UnknownType unknownType0 = (UnknownType)noResolvedType0.findPropertyType(string0);
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertNotNull(unknownType0);
  }

  @Test
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "^X,<)A";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertNotNull(errorFunctionType0);
      
      JSType jSType0 = errorFunctionType0.findPropertyType(string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertNull(jSType0);
  }

  @Test
  public void test14()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isVoidType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertNotNull(noResolvedType0);
      
      String string0 = "6n7O+8{\\X";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoType());
      assertNotNull(errorFunctionType0);
      
      Node node0 = noResolvedType0.getSource();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isVoidType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertNull(node0);
      
      boolean boolean0 = errorFunctionType0.defineInferredProperty(string0, (JSType) noResolvedType0, node0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isVoidType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertTrue(boolean0);
      
      JSDocInfo jSDocInfo0 = errorFunctionType0.getOwnPropertyJSDocInfo(string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoType());
      assertNull(jSDocInfo0);
  }

  @Test
  public void test15()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "";
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isUnionType());
      assertNotNull(noResolvedType0);
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
      assertEquals(false, instanceObjectType0.isParameterizedType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isUnionType());
      assertNotNull(instanceObjectType0);
      
      Node node0 = instanceObjectType0.getPropertyNode(string0);
      assertEquals(false, instanceObjectType0.isParameterizedType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isUnionType());
      assertNull(node0);
  }

  @Test
  public void test16()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isResolved());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isParameterizedType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isInterface());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isNullType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(stringType0);
      
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)stringType0.dereference();
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isResolved());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isParameterizedType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isInterface());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isNullType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isParameterizedType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(instanceObjectType0);
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, instanceObjectType0, stringType0);
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isResolved());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isParameterizedType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isInterface());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isNullType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isParameterizedType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isParameterizedType());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(indexedType0);
      
      boolean boolean0 = instanceObjectType0.canTestForEqualityWith((JSType) indexedType0);
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isResolved());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isParameterizedType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isInterface());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isNullType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isParameterizedType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isParameterizedType());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderInequality((JSType) noResolvedType0);
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSType_TypePair0);
  }

  @Test
  public void test18()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isParameterizedType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isNoType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isResolved());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertNotNull(stringType0);
      
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)stringType0.dereference();
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isParameterizedType());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isParameterizedType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isNoType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isResolved());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertNotNull(instanceObjectType0);
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, instanceObjectType0, stringType0);
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isParameterizedType());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isParameterizedType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isNoType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isResolved());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertNotNull(indexedType0);
      
      JSType.TypePair jSType_TypePair0 = indexedType0.getTypesUnderEquality((JSType) stringType0);
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isParameterizedType());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isParameterizedType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isNoType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isResolved());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertNotNull(jSType_TypePair0);
  }

  @Test
  public void test19()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "(";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isInterface());
      assertNotNull(errorFunctionType0);
      
      boolean boolean0 = errorFunctionType0.hasDisplayName();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isInterface());
      assertFalse(boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      boolean boolean0 = true;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(unknownType0);
      
      String string0 = unknownType0.getNormalizedReferenceName();
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(string0);
      assertEquals("??", string0);
  }

  @Test
  public void test21()  throws Throwable  {
      int int0 = 296;
      boolean boolean0 = true;
      SimpleErrorReporter simpleErrorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertNotNull(noResolvedType0);
      
      FunctionType functionType0 = noResolvedType0.getBindReturnType(int0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertNotNull(functionType0);
      
      boolean boolean1 = functionType0.detectImplicitPrototypeCycle();
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test
  public void test22()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertNotNull(noResolvedType0);
      
      String string0 = noResolvedType0.getDisplayName();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertNull(string0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertNotNull(errorFunctionType0);
      
      boolean boolean0 = errorFunctionType0.isStruct();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertFalse(boolean0);
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "^X,<)A";
      String string1 = ObjectType.createDelegateSuffix(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("(^X,<)A)", string1);
  }

  @Test
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "^X,<)A";
      int int0 = 22;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertNotNull(namedType0);
      
      JSType jSType0 = namedType0.getTypeOfThis();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertNull(jSType0);
  }

  @Test
  public void test25()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertNotNull(noResolvedType0);
      
      String string0 = "rv<zoEJ{$(";
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isParameterizedType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertNotNull(instanceObjectType0);
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noResolvedType0, instanceObjectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isParameterizedType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isParameterizedType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertNotNull(indexedType0);
      
      JSDocInfo jSDocInfo0 = indexedType0.getOwnPropertyJSDocInfo(string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isParameterizedType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isParameterizedType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertNull(jSDocInfo0);
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isParameterizedType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isNominalConstructor());
      assertEquals(false, prototypeObjectType0.isParameterizedType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isParameterizedType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertNotNull(prototypeObjectType0);
  }

  @Test
  public void test26()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      int int0 = 1981;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isLabel());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNE());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isCast());
      assertEquals(1981, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isOr());
      assertEquals(1981, node0.getLineno());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isCall());
      assertEquals(1981, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isFalse());
      assertEquals(8116157, node0.getSourcePosition());
      assertNotNull(node0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertNotNull(noResolvedType0);
      
      UnknownType unknownType0 = (UnknownType)noResolvedType0.getPrototype();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertNull(noResolvedType0.getReferenceName());
      assertNotNull(unknownType0);
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, unknownType0, noResolvedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isParameterizedType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertNull(noResolvedType0.getReferenceName());
      assertNotNull(indexedType0);
      
      String string0 = "t";
      boolean boolean0 = indexedType0.defineInferredProperty(string0, (JSType) unknownType0, node0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isParameterizedType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, node0.isLabel());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNE());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isCast());
      assertEquals(1981, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isOr());
      assertEquals(1981, node0.getLineno());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isCall());
      assertEquals(1981, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isFalse());
      assertEquals(8116157, node0.getSourcePosition());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(boolean0);
  }

  @Test
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertNotNull(noResolvedType0);
      
      JSType jSType0 = noResolvedType0.getIndexType();
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertNull(jSType0);
  }

  @Test
  public void test28()  throws Throwable  {
      boolean boolean0 = true;
      SimpleErrorReporter simpleErrorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      Set<String> set0 = noResolvedType0.getPropertyNames();
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(set0);
  }

  @Test
  public void test29()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isRecordType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isRecordType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isParameterizedType());
      assertNotNull(instanceObjectType0);
      
      boolean boolean0 = instanceObjectType0.canCastTo((JSType) noResolvedType0);
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isRecordType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isParameterizedType());
      assertTrue(boolean0);
  }

  @Test
  public void test30()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(unknownType0);
      
      int int0 = unknownType0.getPropertiesCount();
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, int0);
  }

  @Test
  public void test31()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "e";
      int int0 = 2189;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isNullType());
      assertNotNull(namedType0);
      
      boolean boolean0 = namedType0.removeProperty(string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isNullType());
      assertFalse(boolean0);
  }

  @Test
  public void test32()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(unknownType0);
      
      String string0 = "w1+&tx\"";
      JSDocInfo jSDocInfo0 = unknownType0.getOwnPropertyJSDocInfo(string0);
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(jSDocInfo0);
      
      unknownType0.setPropertyJSDocInfo(string0, jSDocInfo0);
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test33()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      FunctionType functionType0 = noResolvedType0.cloneWithoutArrowType();
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(true, functionType0.canBeCalled());
      assertNotNull(functionType0);
      
      boolean boolean0 = false;
      NoType noType0 = (NoType)functionType0.getRestrictedTypeGivenToBooleanOutcome(boolean0);
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isParameterizedType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNumberValueType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(true, functionType0.canBeCalled());
      assertNotNull(noType0);
  }

  @Test
  public void test34()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "(";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertNotNull(errorFunctionType0);
      
      JSType jSType0 = errorFunctionType0.getParameterType();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertNull(jSType0);
  }

  @Test
  public void test35()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      String string0 = "^X,<)A";
      int int0 = 22;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(namedType0);
      
      UnknownType unknownType0 = (UnknownType)JSType.safeResolve(namedType0, simpleErrorReporter0, noResolvedType0);
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, namedType0.isResolved());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNumberValueType());
      assertNotNull(unknownType0);
  }

  @Test
  public void test36()  throws Throwable  {
      boolean boolean0 = true;
      SimpleErrorReporter simpleErrorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      jSTypeRegistry0.resolveTypesInScope((StaticScope<JSType>) noResolvedType0);
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test37()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "(";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      Node node0 = errorFunctionType0.getRootNode();
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(node0);
  }

  @Test
  public void test38()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
      assertEquals(false, indexedType0.isParameterizedType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(indexedType0);
      
      indexedType0.clearCachedValues();
      assertEquals(false, indexedType0.isParameterizedType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test39()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "^X,<)A";
      int int0 = 22;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertNotNull(namedType0);
      
      Set<String> set0 = namedType0.getOwnPropertyNames();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertNotNull(set0);
  }

  @Test
  public void test40()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "^X,<)A";
      int int0 = 22;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(namedType0);
      
      FunctionType functionType0 = namedType0.getOwnerFunction();
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(functionType0);
  }
}
