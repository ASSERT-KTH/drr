/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:25:53 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import com.google.common.base.Supplier;
import com.google.javascript.jscomp.CodeChangeHandler;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ControlFlowGraph;
import com.google.javascript.jscomp.CssRenamingMap;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.DiagnosticGroup;
import com.google.javascript.jscomp.DiagnosticGroups;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.FunctionInformationMap;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.PassConfig;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.ReferenceCollectingCallback;
import com.google.javascript.jscomp.Region;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.jscomp.Tracer;
import com.google.javascript.jscomp.TypeInferencePass;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.jscomp.VariableMap;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.rhino.Node;
import com.google.protobuf.ByteString;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import java.util.logging.ConsoleHandler;
import java.util.logging.Level;
import java.util.logging.Logger;



import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.junit.runner.RunWith;


public class CompilerEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(loggerErrorManager0);
      
      LoggerErrorManager loggerErrorManager1 = (LoggerErrorManager)compiler0.getErrorManager();
      assertEquals(0, loggerErrorManager1.getWarningCount());
      assertEquals(0, loggerErrorManager1.getErrorCount());
      assertEquals(0.0, loggerErrorManager1.getTypedPercent(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertSame(loggerErrorManager1, loggerErrorManager0);
      assertNotNull(loggerErrorManager1);
  }

  @Test
  public void test01()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getName());
      assertNull(logger0.getResourceBundleName());
      assertNotNull(logger0);
      
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getName());
      assertNull(logger0.getResourceBundleName());
      assertNotNull(loggerErrorManager0);
      
      Compiler compiler0 = new Compiler((ErrorManager) loggerErrorManager0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getName());
      assertNull(logger0.getResourceBundleName());
      assertNotNull(compiler0);
      
      String string0 = compiler0.getAstDotGraph();
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getName());
      assertNull(logger0.getResourceBundleName());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "/8jB_chtHm*9/";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream((OutputStream) mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      Compiler compiler0 = new Compiler((PrintStream) mockPrintStream0);
      assertNotNull(compiler0);
      
      int int0 = 0;
      Region region0 = compiler0.getSourceRegion(string0, int0);
      assertNull(region0);
  }

  @Test
  public void test03() {}
//   @Test
//   public void test03()  throws Throwable  {
//       String string0 = "dK$-&5\\[M5O0P\"mm";
//       MockFile mockFile0 = new MockFile(string0, string0);
//       assertNotNull(mockFile0);
//       
//       MockPrintStream mockPrintStream0 = new MockPrintStream((File) mockFile0);
//       assertNotNull(mockPrintStream0);
//       
//       Compiler compiler0 = new Compiler((PrintStream) mockPrintStream0);
//       assertNotNull(compiler0);
//       
//       Node node0 = compiler0.parseTestCode(string0);
//       assertEquals(false, node0.hasChildren());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(125, node0.getType());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(4, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertNotNull(node0);
//       
//       ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
//       assertEquals(0, arrayList0.size());
//       assertEquals("[]", arrayList0.toString());
//       assertEquals(true, arrayList0.isEmpty());
//       assertNotNull(arrayList0);
//       
//       LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
//       assertEquals(0, linkedList0.size());
//       assertEquals("[]", linkedList0.toString());
//       assertNotNull(linkedList0);
//       
//       CompilerOptions compilerOptions0 = compiler0.options;
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.isAssumeStrictThis());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(4, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertNotNull(compilerOptions0);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.allowLegacyJsMessages);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.ignoreCajaProperties);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.specializeInitialModule);
//       assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.inlineLocalVariables);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.tightenTypes);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.groupVariableDeclarations);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.collapseObjectLiterals);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.checkTypedPropertyCalls);
//       assertFalse(compilerOptions0.checkEs5Strict);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.inferTypesInGlobalScope);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.checkCaja);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.removeEmptyFunctions);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.instrumentForCoverageOnly);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.strictMessageReplacement);
//       assertFalse(compilerOptions0.checkDuplicateMessages);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.decomposeExpressions);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       
//       Result result0 = compiler0.compileModules((List<JSSourceFile>) arrayList0, (List<JSModule>) linkedList0, compilerOptions0);
//       assertEquals(0, linkedList0.size());
//       assertEquals("[]", linkedList0.toString());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.isAssumeStrictThis());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(0, arrayList0.size());
//       assertEquals("[]", arrayList0.toString());
//       assertEquals(true, arrayList0.isEmpty());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(5, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertNotNull(result0);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.allowLegacyJsMessages);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.ignoreCajaProperties);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.specializeInitialModule);
//       assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.inlineLocalVariables);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.tightenTypes);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.groupVariableDeclarations);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.collapseObjectLiterals);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.checkTypedPropertyCalls);
//       assertFalse(compilerOptions0.checkEs5Strict);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.inferTypesInGlobalScope);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.checkCaja);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.removeEmptyFunctions);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.instrumentForCoverageOnly);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.strictMessageReplacement);
//       assertFalse(compilerOptions0.checkDuplicateMessages);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.decomposeExpressions);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//   }

  @Test
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "JSC_DUPLICATE_EXTERN_INPUT";
      Node node0 = compiler0.parseTestCode(string0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getCharno());
      assertNotNull(node0);
      
      int int0 = 9;
      Region region0 = compiler0.getSourceRegion(string0, int0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertNull(region0);
  }

  @Test
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
      assertEquals(0, arrayList0.size());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals("[]", arrayList0.toString());
      assertNotNull(arrayList0);
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isAssumeStrictThis());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      
      Result result0 = compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
      assertEquals(0, arrayList0.size());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals("[]", arrayList0.toString());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isAssumeStrictThis());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNotNull(result0);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      
      Config config0 = compiler0.getParserConfig();
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertNotNull(config0);
  }

  @Test
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertNotNull(loggerErrorManager0);
      
      boolean boolean0 = compiler0.acceptEcmaScript5();
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertFalse(boolean0);
  }

  @Test
  public void test07()  throws Throwable  {
      Logger logger0 = Tracer.logger;
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getResourceBundleName());
      assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
      assertNotNull(logger0);
      
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getResourceBundleName());
      assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertNotNull(loggerErrorManager0);
      
      Compiler compiler0 = new Compiler((ErrorManager) loggerErrorManager0);
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getResourceBundleName());
      assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertNotNull(compiler0);
      
      compiler0.reportCodeChange();
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getResourceBundleName());
      assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
  }

  @Test
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(loggerErrorManager0);
      
      boolean boolean0 = compiler0.isInliningForbidden();
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(boolean0);
  }

  @Test
  public void test09()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      assertNotNull(compiler_CodeBuilder0);
      
      String string0 = "ZeD";
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append(string0);
      assertSame(compiler_CodeBuilder0, compiler_CodeBuilder1);
      assertSame(compiler_CodeBuilder1, compiler_CodeBuilder0);
      assertNotNull(compiler_CodeBuilder1);
      
      String string1 = "";
      assertNotSame(string1, string0);
      
      boolean boolean0 = compiler_CodeBuilder1.endsWith(string1);
      assertSame(compiler_CodeBuilder0, compiler_CodeBuilder1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertSame(compiler_CodeBuilder1, compiler_CodeBuilder0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "msg.no.overload";
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      assertNotNull(compiler_CodeBuilder0);
      
      boolean boolean0 = compiler_CodeBuilder0.endsWith(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "INTERNAL COMPILER ERROR.\nPlease report this problem.\n";
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      assertNotNull(compiler_CodeBuilder0);
      
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append(string0);
      assertSame(compiler_CodeBuilder0, compiler_CodeBuilder1);
      assertSame(compiler_CodeBuilder1, compiler_CodeBuilder0);
      assertNotNull(compiler_CodeBuilder1);
  }

  @Test
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
      assertEquals(0, arrayList0.size());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals("[]", arrayList0.toString());
      assertNotNull(arrayList0);
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isAssumeStrictThis());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.checkEs5Strict);
      
      Result result0 = compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
      assertEquals(0, arrayList0.size());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals("[]", arrayList0.toString());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isAssumeStrictThis());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotNull(result0);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.checkEs5Strict);
      
      compiler0.disableThreads();
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      compiler0.recordFunctionInformation();
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
  }

  @Test
  public void test13() {}
//   @Test
//   public void test13()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       
//       String string0 = "T%}'qe";
//       MockFile mockFile0 = new MockFile(string0);
//       assertNotNull(mockFile0);
//       
//       SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
//       assertEquals("T%}'qe", sourceFile_OnDisk0.getName());
//       assertEquals("T%}'qe", sourceFile_OnDisk0.getOriginalPath());
//       assertEquals("T%}'qe", sourceFile_OnDisk0.toString());
//       assertNotNull(sourceFile_OnDisk0);
//       
//       Charset charset0 = sourceFile_OnDisk0.getCharset();
//       assertEquals("UTF-8", charset0.name());
//       assertEquals("UTF-8", charset0.displayName());
//       assertEquals(true, charset0.isRegistered());
//       assertEquals(true, charset0.canEncode());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals("T%}'qe", sourceFile_OnDisk0.getName());
//       assertEquals("T%}'qe", sourceFile_OnDisk0.getOriginalPath());
//       assertEquals("T%}'qe", sourceFile_OnDisk0.toString());
//       assertNotNull(charset0);
//       
//       JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(string0, charset0);
//       assertEquals("T%}'qe", jSSourceFile0.getOriginalPath());
//       assertEquals("T%}'qe", jSSourceFile0.toString());
//       assertEquals("T%}'qe", jSSourceFile0.getName());
//       assertEquals("UTF-8", charset0.name());
//       assertEquals("UTF-8", charset0.displayName());
//       assertEquals(true, charset0.isRegistered());
//       assertEquals(true, charset0.canEncode());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals("T%}'qe", sourceFile_OnDisk0.getName());
//       assertEquals("T%}'qe", sourceFile_OnDisk0.getOriginalPath());
//       assertEquals("T%}'qe", sourceFile_OnDisk0.toString());
//       assertNotNull(jSSourceFile0);
//       
//       CompilerOptions compilerOptions0 = new CompilerOptions();
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.isAssumeStrictThis());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertNotNull(compilerOptions0);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.inferTypesInGlobalScope);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
//       assertFalse(compilerOptions0.tightenTypes);
//       assertFalse(compilerOptions0.specializeInitialModule);
//       assertFalse(compilerOptions0.allowLegacyJsMessages);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.groupVariableDeclarations);
//       assertFalse(compilerOptions0.checkEs5Strict);
//       assertFalse(compilerOptions0.decomposeExpressions);
//       assertFalse(compilerOptions0.collapseObjectLiterals);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.strictMessageReplacement);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.removeEmptyFunctions);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.checkDuplicateMessages);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.instrumentForCoverageOnly);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.ignoreCajaProperties);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
//       assertFalse(compilerOptions0.inlineLocalVariables);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.checkTypedPropertyCalls);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.checkCaja);
//       
//       Result result0 = compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
//       assertEquals("T%}'qe", jSSourceFile0.getOriginalPath());
//       assertEquals("T%}'qe", jSSourceFile0.toString());
//       assertEquals("T%}'qe", jSSourceFile0.getName());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals("UTF-8", charset0.name());
//       assertEquals("UTF-8", charset0.displayName());
//       assertEquals(true, charset0.isRegistered());
//       assertEquals(true, charset0.canEncode());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals("T%}'qe", sourceFile_OnDisk0.getName());
//       assertEquals("T%}'qe", sourceFile_OnDisk0.getOriginalPath());
//       assertEquals("T%}'qe", sourceFile_OnDisk0.toString());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.isAssumeStrictThis());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertNotNull(result0);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.inferTypesInGlobalScope);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
//       assertFalse(compilerOptions0.tightenTypes);
//       assertFalse(compilerOptions0.specializeInitialModule);
//       assertFalse(compilerOptions0.allowLegacyJsMessages);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.groupVariableDeclarations);
//       assertFalse(compilerOptions0.checkEs5Strict);
//       assertFalse(compilerOptions0.decomposeExpressions);
//       assertFalse(compilerOptions0.collapseObjectLiterals);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.strictMessageReplacement);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.removeEmptyFunctions);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.checkDuplicateMessages);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.instrumentForCoverageOnly);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.ignoreCajaProperties);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
//       assertFalse(compilerOptions0.inlineLocalVariables);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.checkTypedPropertyCalls);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.checkCaja);
//       
//       Node node0 = compiler0.parseTestCode(compilerOptions0.inputDelimiter);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.isAssumeStrictThis());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(125, node0.getType());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.hasChildren());
//       assertNotNull(node0);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.inferTypesInGlobalScope);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
//       assertFalse(compilerOptions0.tightenTypes);
//       assertFalse(compilerOptions0.specializeInitialModule);
//       assertFalse(compilerOptions0.allowLegacyJsMessages);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.groupVariableDeclarations);
//       assertFalse(compilerOptions0.checkEs5Strict);
//       assertFalse(compilerOptions0.decomposeExpressions);
//       assertFalse(compilerOptions0.collapseObjectLiterals);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.strictMessageReplacement);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.removeEmptyFunctions);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.checkDuplicateMessages);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.instrumentForCoverageOnly);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.ignoreCajaProperties);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
//       assertFalse(compilerOptions0.inlineLocalVariables);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.checkTypedPropertyCalls);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.checkCaja);
//   }

  @Test
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
      assertEquals(0, arrayList0.size());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals("[]", arrayList0.toString());
      assertNotNull(arrayList0);
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isAssumeStrictThis());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNull(compilerOptions0.getLanguageOut());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.prettyPrint);
      
      Result result0 = compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isAssumeStrictThis());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(0, arrayList0.size());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals("[]", arrayList0.toString());
      assertNotNull(result0);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.prettyPrint);
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertNotNull(typedScopeCreator0);
      
      CodingConvention codingConvention0 = compilerOptions0.getCodingConvention();
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isAssumeStrictThis());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNull(compilerOptions0.getLanguageOut());
      assertNull(codingConvention0);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.prettyPrint);
      
      TypedScopeCreator typedScopeCreator1 = new TypedScopeCreator(compiler0, codingConvention0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isAssumeStrictThis());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNull(compilerOptions0.getLanguageOut());
      assertNotSame(typedScopeCreator1, typedScopeCreator0);
      assertFalse(typedScopeCreator1.equals((Object)typedScopeCreator0));
      assertNotNull(typedScopeCreator1);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.prettyPrint);
  }

  @Test
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("[]", arrayList0.toString());
      assertNotNull(arrayList0);
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isAssumeStrictThis());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.exportTestFunctions);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isAssumeStrictThis());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.exportTestFunctions);
      
      PassConfig.PassConfigDelegate passConfig_PassConfigDelegate0 = new PassConfig.PassConfigDelegate(defaultPassConfig0);
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isAssumeStrictThis());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNotNull(passConfig_PassConfigDelegate0);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.exportTestFunctions);
      
      Result result0 = compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("[]", arrayList0.toString());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isAssumeStrictThis());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNotNull(result0);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.exportTestFunctions);
      
      TypeInferencePass typeInferencePass0 = passConfig_PassConfigDelegate0.makeTypeInference(compiler0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isAssumeStrictThis());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNotNull(typeInferencePass0);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.exportTestFunctions);
  }

  @Test
  public void test16() {}
//   @Test
//   public void test16()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       
//       Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
//       assertEquals(true, vector0.isEmpty());
//       assertEquals("[]", vector0.toString());
//       assertEquals(10, vector0.capacity());
//       assertEquals(0, vector0.size());
//       assertNotNull(vector0);
//       
//       Stack<JSModule> stack0 = new Stack<JSModule>();
//       assertEquals(0, stack0.size());
//       assertEquals(true, stack0.isEmpty());
//       assertEquals("[]", stack0.toString());
//       assertEquals(10, stack0.capacity());
//       assertEquals(true, stack0.empty());
//       assertNotNull(stack0);
//       
//       CompilerOptions compilerOptions0 = new CompilerOptions();
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.isAssumeStrictThis());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertNotNull(compilerOptions0);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.tightenTypes);
//       assertFalse(compilerOptions0.allowLegacyJsMessages);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.checkDuplicateMessages);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.checkCaja);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.collapseObjectLiterals);
//       assertFalse(compilerOptions0.inlineLocalVariables);
//       assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.checkTypedPropertyCalls);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.specializeInitialModule);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.ignoreCajaProperties);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.decomposeExpressions);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.checkEs5Strict);
//       assertFalse(compilerOptions0.removeEmptyFunctions);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.strictMessageReplacement);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.inferTypesInGlobalScope);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.groupVariableDeclarations);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.instrumentForCoverageOnly);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.optimizeReturns);
//       
//       Result result0 = compiler0.compileModules((List<JSSourceFile>) vector0, (List<JSModule>) stack0, compilerOptions0);
//       assertEquals(true, vector0.isEmpty());
//       assertEquals("[]", vector0.toString());
//       assertEquals(10, vector0.capacity());
//       assertEquals(0, vector0.size());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.isAssumeStrictThis());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(0, stack0.size());
//       assertEquals(true, stack0.isEmpty());
//       assertEquals("[]", stack0.toString());
//       assertEquals(10, stack0.capacity());
//       assertEquals(true, stack0.empty());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertNotNull(result0);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.tightenTypes);
//       assertFalse(compilerOptions0.allowLegacyJsMessages);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.checkDuplicateMessages);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.checkCaja);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.collapseObjectLiterals);
//       assertFalse(compilerOptions0.inlineLocalVariables);
//       assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.checkTypedPropertyCalls);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.specializeInitialModule);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.ignoreCajaProperties);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.decomposeExpressions);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.checkEs5Strict);
//       assertFalse(compilerOptions0.removeEmptyFunctions);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.strictMessageReplacement);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.inferTypesInGlobalScope);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.groupVariableDeclarations);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.instrumentForCoverageOnly);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.optimizeReturns);
//       
//       // Undeclared exception!
//       try {
//         CompilerInput compilerInput0 = compiler0.newExternInput(compilerOptions0.renamePrefix);
//         fail("Expecting exception: NullPointerException");
//       
//       } catch(NullPointerException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      double double0 = 4.294967296E9;
      Node node0 = Node.newNumber(double0);
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertNotNull(node0);
      
      String string0 = compiler0.toSource(node0);
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertNotNull(string0);
      assertEquals("4294967296", string0);
      
      boolean boolean0 = compiler0.areNodesEqualForInlining(node0, node0);
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertTrue(boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertNotNull(loggerErrorManager0);
      
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isAssumeStrictThis());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.reserveRawExports);
      
      // Undeclared exception!
      try {
        compiler0.stripCode(compilerOptions0.stripNamePrefixes, compilerOptions0.stripNamePrefixes, compilerOptions0.stripNameSuffixes, compilerOptions0.stripNameSuffixes);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      DefaultPassConfig defaultPassConfig0 = (DefaultPassConfig)compiler0.createPassConfigInternal();
      assertNotNull(defaultPassConfig0);
      
      compiler0.setPassConfig((PassConfig) defaultPassConfig0);
  }

  @Test
  public void test20()  throws Throwable  {
      JSModule jSModule0 = null;
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(loggerErrorManager0);
      
      // Undeclared exception!
      try {
        String[] stringArray0 = compiler0.toSourceArray(jSModule0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.getRoot();
      assertNull(node0);
  }

  @Test
  public void test22()  throws Throwable  {
      Logger logger0 = Logger.global;
      assertEquals("global", logger0.getName());
      assertNull(logger0.getResourceBundleName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNotNull(logger0);
      
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals("global", logger0.getName());
      assertNull(logger0.getResourceBundleName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNotNull(loggerErrorManager0);
      
      Compiler compiler0 = new Compiler((ErrorManager) loggerErrorManager0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals("global", logger0.getName());
      assertNull(logger0.getResourceBundleName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNotNull(compiler0);
      
      int int0 = compiler0.getWarningCount();
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals("global", logger0.getName());
      assertNull(logger0.getResourceBundleName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertEquals(0, int0);
  }

  @Test
  public void test23()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      ReferenceCollectingCallback.ReferenceMap referenceCollectingCallback_ReferenceMap0 = compiler0.getGlobalVarReferences();
      assertNull(referenceCollectingCallback_ReferenceMap0);
  }

  @Test
  public void test24()  throws Throwable  {
      DiagnosticGroup diagnosticGroup0 = DiagnosticGroups.GLOBAL_THIS;
      assertNotNull(diagnosticGroup0);
      
      String string0 = diagnosticGroup0.toString();
      assertNotNull(string0);
      assertEquals("DiagnosticGroup<globalThis>", string0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0);
      assertNotNull(mockPrintStream0);
      
      Compiler compiler0 = new Compiler((PrintStream) mockPrintStream0);
      assertNotNull(compiler0);
      
      // Undeclared exception!
      try {
        compiler0.processDefines();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = "dK$-&5\\[M5O0P\"mm";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream((File) mockFile0);
      assertNotNull(mockPrintStream0);
      
      Compiler compiler0 = new Compiler((PrintStream) mockPrintStream0);
      assertNotNull(compiler0);
      
      List<CompilerInput> list0 = compiler0.getExternsForTesting();
      assertNull(list0);
  }

  @Test
  public void test26()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      assertNull(logger0.getResourceBundleName());
      assertNull(logger0.getName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNotNull(logger0);
      
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertNull(logger0.getResourceBundleName());
      assertNull(logger0.getName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNotNull(loggerErrorManager0);
      
      Compiler compiler0 = new Compiler((ErrorManager) loggerErrorManager0);
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertNull(logger0.getResourceBundleName());
      assertNull(logger0.getName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNotNull(compiler0);
      
      String string0 = "runCustomPasses";
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(true, byteArrayInputStream0.markSupported());
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromInputStream(string0, (InputStream) byteArrayInputStream0);
      assertEquals("runCustomPasses", sourceFile_Preloaded0.toString());
      assertEquals("runCustomPasses", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("runCustomPasses", sourceFile_Preloaded0.getName());
      assertEquals(true, byteArrayInputStream0.markSupported());
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(sourceFile_Preloaded0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      JsAst jsAst0 = new JsAst((SourceFile) sourceFile_Preloaded0);
      assertEquals("runCustomPasses", sourceFile_Preloaded0.toString());
      assertEquals("runCustomPasses", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("runCustomPasses", sourceFile_Preloaded0.getName());
      assertEquals(true, byteArrayInputStream0.markSupported());
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(jsAst0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try {
        compiler0.addIncrementalSourceAst(jsAst0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      compiler0.resetUniqueNameId();
  }

  @Test
  public void test28()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      boolean boolean0 = true;
      compiler0.setHasRegExpGlobalReferences(boolean0);
  }

  @Test
  public void test29()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      assertNull(logger0.getResourceBundleName());
      assertNull(logger0.getName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNotNull(logger0);
      
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertNull(logger0.getResourceBundleName());
      assertNull(logger0.getName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNotNull(loggerErrorManager0);
      
      Compiler compiler0 = new Compiler((ErrorManager) loggerErrorManager0);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertNull(logger0.getResourceBundleName());
      assertNull(logger0.getName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNotNull(compiler0);
      
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertNull(logger0.getResourceBundleName());
      assertNull(logger0.getName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNotNull(supplier0);
  }

  @Test
  public void test30()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      // Undeclared exception!
      try {
        compiler0.removeTryCatchFinally();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getResourceBundleName());
      assertNull(logger0.getName());
      assertNotNull(logger0);
      
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getResourceBundleName());
      assertNull(logger0.getName());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertNotNull(loggerErrorManager0);
      
      Compiler compiler0 = new Compiler((ErrorManager) loggerErrorManager0);
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getResourceBundleName());
      assertNull(logger0.getName());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertNotNull(compiler0);
      
      List<CompilerInput> list0 = compiler0.getInputsForTesting();
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getResourceBundleName());
      assertNull(logger0.getName());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertNull(list0);
  }

  @Test
  public void test32()  throws Throwable  {
      Logger logger0 = Tracer.logger;
      assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
      assertNull(logger0.getResourceBundleName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNotNull(logger0);
      
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
      assertNull(logger0.getResourceBundleName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertNotNull(loggerErrorManager0);
      
      Compiler compiler0 = new Compiler((ErrorManager) loggerErrorManager0);
      assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
      assertNull(logger0.getResourceBundleName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertNotNull(compiler0);
      
      // Undeclared exception!
      try {
        compiler0.rebuildInputsFromModules();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      // Undeclared exception!
      try {
        CssRenamingMap cssRenamingMap0 = compiler0.getCssRenamingMap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      String string0 = "dangerous use of the global 'this' object";
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0);
      assertNotNull(mockPrintStream0);
      
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) mockPrintStream0);
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertNotNull(printStreamErrorManager0);
      
      Compiler compiler0 = new Compiler((ErrorManager) printStreamErrorManager0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode(string0, string0);
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(125, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(1, printStreamErrorManager0.getErrorCount());
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertNotNull(node0);
  }

  @Test
  public void test35()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      FunctionInformationMap functionInformationMap0 = compiler0.getFunctionalInformationMap();
      assertNull(functionInformationMap0);
  }

  @Test
  public void test36()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      VariableMap variableMap0 = compiler0.getPropertyMap();
      assertNull(variableMap0);
  }

  @Test
  public void test37()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      
      // Undeclared exception!
      try {
        JSError[] jSErrorArray0 = compiler0.getMessages();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      ByteString.Output byteString_Output0 = ByteString.newOutput();
      assertNotNull(byteString_Output0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream((OutputStream) byteString_Output0);
      assertNotNull(mockPrintStream0);
      
      Compiler compiler0 = new Compiler((PrintStream) mockPrintStream0);
      assertNotNull(compiler0);
      
      Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
      assertNotNull(compiler_IntermediateState0);
      
      compiler0.setState(compiler_IntermediateState0);
  }

  @Test
  public void test39()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Scope scope0 = compiler0.getTopScope();
      assertNull(scope0);
  }

  @Test
  public void test40()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      // Undeclared exception!
      try {
        CompilerOptions.LanguageMode compilerOptions_LanguageMode0 = compiler0.languageMode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test41()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      // Undeclared exception!
      try {
        List<CompilerInput> list0 = compiler0.getInputsInOrder();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test42()  throws Throwable  {
      String string0 = "INTERNAL COMPILER ERROR.\nPlease report this problem.\n";
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      // Undeclared exception!
      try {
        Node node0 = compiler0.parseSyntheticCode(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test43()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      CodeChangeHandler codeChangeHandler0 = null;
      compiler0.removeChangeHandler(codeChangeHandler0);
  }

  @Test
  public void test44()  throws Throwable  {
      String string0 = "dK$-&5\\[M5O0P\"mm";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream((File) mockFile0);
      assertNotNull(mockPrintStream0);
      
      Compiler compiler0 = new Compiler((PrintStream) mockPrintStream0);
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseTestCode(string0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(125, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(4, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(true, compiler0.hasErrors());
      assertNotNull(node0);
      
      JSSourceFile jSSourceFile0 = null;
      JSModule[] jSModuleArray0 = new JSModule[5];
      CompilerOptions compilerOptions0 = compiler0.options;
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isAssumeStrictThis());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(4, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(true, compiler0.hasErrors());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.smartNameRemoval);
      
      // Undeclared exception!
      try {
        Result result0 = compiler0.compile(jSSourceFile0, jSModuleArray0, compilerOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test45()  throws Throwable  {
      ConsoleHandler consoleHandler0 = new ConsoleHandler();
      assertNull(consoleHandler0.getEncoding());
      assertNotNull(consoleHandler0);
      
      Level level0 = consoleHandler0.getLevel();
      assertNull(consoleHandler0.getEncoding());
      assertEquals("INFO", level0.toString());
      assertEquals(800, level0.intValue());
      assertEquals("INFO", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertNotNull(level0);
      
      Compiler.setLoggingLevel(level0);
      assertNull(consoleHandler0.getEncoding());
      assertEquals("INFO", level0.toString());
      assertEquals(800, level0.intValue());
      assertEquals("INFO", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
  }

  @Test
  public void test46()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      
      boolean boolean0 = compiler0.hasRegExpGlobalReferences();
      assertTrue(boolean0);
  }

  @Test
  public void test47()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      // Undeclared exception!
      try {
        ControlFlowGraph<Node> controlFlowGraph0 = compiler0.computeCFG();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test48()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      VariableMap variableMap0 = compiler0.getVariableMap();
      assertNull(variableMap0);
  }

  @Test
  public void test49()  throws Throwable  {
      Logger logger0 = Logger.global;
      assertEquals("global", logger0.getName());
      assertNull(logger0.getResourceBundleName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNotNull(logger0);
      
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals("global", logger0.getName());
      assertNull(logger0.getResourceBundleName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNotNull(loggerErrorManager0);
      
      Compiler compiler0 = new Compiler((ErrorManager) loggerErrorManager0);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals("global", logger0.getName());
      assertNull(logger0.getResourceBundleName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(compiler0);
      
      ScopeCreator scopeCreator0 = compiler0.getTypedScopeCreator();
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals("global", logger0.getName());
      assertNull(logger0.getResourceBundleName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertNull(scopeCreator0);
  }

  @Test
  public void test50()  throws Throwable  {
      String string0 = "dK$-&5\\[M5O0P\"mm";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream((File) mockFile0);
      assertNotNull(mockPrintStream0);
      
      Compiler compiler0 = new Compiler((PrintStream) mockPrintStream0);
      assertNotNull(compiler0);
      
      SourceMap sourceMap0 = compiler0.getSourceMap();
      assertNull(sourceMap0);
  }

  @Test
  public void test51()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      assertNotNull(compiler_CodeBuilder0);
      
      int int0 = compiler_CodeBuilder0.getLineIndex();
      assertEquals(0, int0);
  }

  @Test
  public void test52()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      assertNotNull(compiler_CodeBuilder0);
      
      int int0 = compiler_CodeBuilder0.getLength();
      assertEquals(0, int0);
  }

  @Test
  public void test53()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      assertNotNull(compiler_CodeBuilder0);
      
      int int0 = compiler_CodeBuilder0.getColumnIndex();
      assertEquals(0, int0);
  }

  @Test
  public void test54()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
      assertEquals("[]", arrayList0.toString());
      assertEquals(0, arrayList0.size());
      assertEquals(true, arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.isAssumeStrictThis());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      
      compiler0.disableThreads();
      Result result0 = compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
      assertEquals(false, compilerOptions0.isAssumeStrictThis());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals("[]", arrayList0.toString());
      assertEquals(0, arrayList0.size());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotNull(result0);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      
      String[] stringArray0 = compiler0.toSourceArray();
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotNull(stringArray0);
  }
}
