/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:26:21 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CleanupPasses;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.GlobalNamespace;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.ProcessCommonJSModules;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StaticSlot;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.junit.runner.RunWith;


public class GlobalNamespaceEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = null;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      // Undeclared exception!
      try {
        GlobalNamespace.Ref.markTwins(globalNamespace_Ref0, globalNamespace_Ref0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.ALIASING_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      // Undeclared exception!
      try {
        GlobalNamespace.Ref.markTwins(globalNamespace_Ref0, globalNamespace_Ref0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_LOCAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      boolean boolean0 = globalNamespace_Ref0.isSet();
      assertTrue(boolean0);
  }

  @Test
  public void test03()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.PROTOTYPE_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      boolean boolean0 = globalNamespace_Ref0.isSet();
      assertFalse(boolean0);
  }

  @Test
  public void test04()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.CALL_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      
      GlobalNamespace.Ref globalNamespace_Ref1 = globalNamespace_Ref0.cloneAndReclassify(globalNamespace_Ref_Type1);
      assertNotNull(globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
      assertNotSame(globalNamespace_Ref_Type0, globalNamespace_Ref_Type1);
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertFalse(globalNamespace_Ref_Type0.equals((Object)globalNamespace_Ref_Type1));
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      assertFalse(globalNamespace_Ref0.equals((Object)globalNamespace_Ref1));
      
      boolean boolean0 = globalNamespace_Ref1.isSet();
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
      assertNotSame(globalNamespace_Ref_Type0, globalNamespace_Ref_Type1);
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
      assertTrue(boolean0);
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertFalse(globalNamespace_Ref_Type0.equals((Object)globalNamespace_Ref_Type1));
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      assertFalse(globalNamespace_Ref0.equals((Object)globalNamespace_Ref1));
  }

  @Test
  public void test05()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_LOCAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      String string0 = globalNamespace_Ref0.getSourceName();
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "~Sht%u";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      boolean boolean1 = globalNamespace_Name1.isSimpleName();
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = null;
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      boolean boolean1 = globalNamespace_Name1.needsToBeStubbed();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      
      GlobalNamespace.Name globalNamespace_Name2 = globalNamespace_Name1.addProperty(string0, boolean1);
      assertNotNull(globalNamespace_Name2);
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
      assertNotSame(globalNamespace_Name2, globalNamespace_Name1);
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      assertFalse(boolean1 == boolean0);
      assertFalse(globalNamespace_Name2.equals((Object)globalNamespace_Name1));
      assertFalse(boolean0 == boolean1);
      
      boolean boolean2 = globalNamespace_Name2.isSimpleName();
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
      assertNotSame(globalNamespace_Name2, globalNamespace_Name1);
      assertFalse(boolean2);
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      assertTrue(boolean1 == boolean2);
      assertFalse(boolean1 == boolean0);
      assertFalse(globalNamespace_Name2.equals((Object)globalNamespace_Name1));
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = null;
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      boolean boolean1 = globalNamespace_Name1.isNamespace();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = null;
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Name.Type globalNamespace_Name_Type0 = GlobalNamespace.Name.Type.OBJECTLIT;
      globalNamespace_Name1.type = globalNamespace_Name_Type0;
      assertEquals("OBJECTLIT", globalNamespace_Name1.type.name());
      assertEquals("OBJECTLIT", globalNamespace_Name1.type.toString());
      assertEquals(0, globalNamespace_Name1.type.ordinal());
      
      boolean boolean1 = globalNamespace_Name1.shouldKeepKeys();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = null;
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      boolean boolean1 = globalNamespace_Name1.shouldKeepKeys();
      assertFalse(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = null;
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Name.Type globalNamespace_Name_Type0 = GlobalNamespace.Name.Type.OBJECTLIT;
      globalNamespace_Name1.type = globalNamespace_Name_Type0;
      assertEquals(0, globalNamespace_Name1.type.ordinal());
      assertEquals("OBJECTLIT", globalNamespace_Name1.type.toString());
      assertEquals("OBJECTLIT", globalNamespace_Name1.type.name());
      
      boolean boolean1 = globalNamespace_Name1.canEliminate();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = null;
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_LOCAL;
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      globalNamespace_Name1.addRef(globalNamespace_Ref0);
      boolean boolean1 = globalNamespace_Name1.canCollapse();
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = null;
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      globalNamespace_Name1.addRef(globalNamespace_Ref0);
      boolean boolean1 = globalNamespace_Name1.canCollapse();
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = null;
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      boolean boolean1 = globalNamespace_Name1.needsToBeStubbed();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      
      GlobalNamespace.Name globalNamespace_Name2 = globalNamespace_Name1.addProperty(string0, boolean1);
      assertNotNull(globalNamespace_Name2);
      assertNotSame(globalNamespace_Name2, globalNamespace_Name1);
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
      assertFalse(globalNamespace_Name2.equals((Object)globalNamespace_Name1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      
      boolean boolean2 = globalNamespace_Name2.canCollapse();
      assertNotSame(globalNamespace_Name2, globalNamespace_Name1);
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
      assertFalse(boolean2);
      assertFalse(globalNamespace_Name2.equals((Object)globalNamespace_Name1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1 == boolean2);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = null;
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      globalNamespace_Name1.setDeclaredType();
      boolean boolean1 = globalNamespace_Name1.canCollapse();
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "</a>";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      boolean boolean1 = globalNamespace_Name1.canCollapse();
      assertFalse(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = null;
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      boolean boolean1 = globalNamespace_Name1.canCollapse();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "~Sht%u";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      boolean boolean1 = globalNamespace_Name1.isSimpleStubDeclaration();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = null;
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.DELETE_PROP;
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      globalNamespace_Name1.addRef(globalNamespace_Ref0);
      // Undeclared exception!
      try {
        boolean boolean1 = globalNamespace_Name1.isSimpleStubDeclaration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = null;
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.DELETE_PROP;
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      globalNamespace_Name1.addRef(globalNamespace_Ref0);
      globalNamespace_Name1.removeRef(globalNamespace_Ref0);
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = null;
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.PROTOTYPE_GET;
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      globalNamespace_Name1.addRef(globalNamespace_Ref0);
      globalNamespace_Name1.removeRef(globalNamespace_Ref0);
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = null;
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      globalNamespace_Name1.addRef(globalNamespace_Ref0);
      globalNamespace_Name1.addRefInternal(globalNamespace_Ref0);
      globalNamespace_Name1.removeRef(globalNamespace_Ref0);
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = null;
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      globalNamespace_Name1.addRef(globalNamespace_Ref0);
      globalNamespace_Name1.removeRef(globalNamespace_Ref0);
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = null;
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.DIRECT_GET;
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      globalNamespace_Name1.addRef(globalNamespace_Ref0);
      globalNamespace_Name1.removeRef(globalNamespace_Ref0);
      globalNamespace_Name1.removeRef(globalNamespace_Ref0);
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = null;
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.ALIASING_GET;
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      globalNamespace_Name1.addRef(globalNamespace_Ref0);
      globalNamespace_Name1.removeRef(globalNamespace_Ref0);
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = null;
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_LOCAL;
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      globalNamespace_Name1.removeRef(globalNamespace_Ref0);
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = null;
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.CALL_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      globalNamespace_Name1.addRef(globalNamespace_Ref0);
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = null;
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      boolean boolean1 = globalNamespace_Name1.needsToBeStubbed();
      assertFalse(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      
      GlobalNamespace.Name globalNamespace_Name2 = globalNamespace_Name1.addProperty(string0, boolean1);
      assertNotNull(globalNamespace_Name2);
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
      assertNotSame(globalNamespace_Name2, globalNamespace_Name1);
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(globalNamespace_Name2.equals((Object)globalNamespace_Name1));
      
      String string1 = globalNamespace_Name2.toString();
      assertNotNull(string1);
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
      assertNotSame(globalNamespace_Name2, globalNamespace_Name1);
      assertEquals("null.null (OTHER): globalSets=0, localSets=0, totalGets=0, aliasingGets=0, callGets=0", string1);
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(globalNamespace_Name2.equals((Object)globalNamespace_Name1));
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = null;
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      boolean boolean1 = globalNamespace_Name1.needsToBeStubbed();
      assertFalse(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      
      GlobalNamespace.Name globalNamespace_Name2 = globalNamespace_Name1.addProperty(string0, boolean1);
      assertNotNull(globalNamespace_Name2);
      assertNotSame(globalNamespace_Name2, globalNamespace_Name1);
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(globalNamespace_Name2.equals((Object)globalNamespace_Name1));
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      
      GlobalNamespace.Name globalNamespace_Name3 = globalNamespace_Name1.addProperty(string0, boolean0);
      assertNotNull(globalNamespace_Name3);
      assertNotSame(globalNamespace_Name3, globalNamespace_Name2);
      assertNotSame(globalNamespace_Name3, globalNamespace_Name1);
      assertNotSame(globalNamespace_Name1, globalNamespace_Name3);
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
      assertFalse(globalNamespace_Name3.equals((Object)globalNamespace_Name2));
      assertFalse(globalNamespace_Name3.equals((Object)globalNamespace_Name1));
      assertFalse(boolean0 == boolean1);
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name3));
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
  }

  @Test
  public void test30()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      String string0 = "P";
      int int0 = (-771);
      Node node0 = Node.newString(string0, int0, int0);
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isIf());
      assertEquals(true, node0.isString());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isAssign());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isFunction());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isParamList());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isWith());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNew());
      assertNotNull(node0);
      
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0);
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isIf());
      assertEquals(true, node0.isString());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isAssign());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isFunction());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isParamList());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isWith());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNew());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(globalNamespace0);
      
      // Undeclared exception!
      try {
        Iterable<GlobalNamespace.Name> iterable0 = globalNamespace0.getAllSymbols();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      Node node0 = null;
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0, node0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(globalNamespace0);
      
      LinkedList<GlobalNamespace.AstChange> linkedList0 = new LinkedList<GlobalNamespace.AstChange>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      globalNamespace0.scanNewNodes(linkedList0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
  }

  @Test
  public void test32()  throws Throwable  {
      String string0 = ";D@NYeC";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      String string1 = globalNamespace_Name1.getName();
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals(";D@NYeC", string1);
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = null;
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref globalNamespace_Ref0 = globalNamespace_Name1.getDeclaration();
      assertNull(globalNamespace_Ref0);
  }

  @Test
  public void test34()  throws Throwable  {
      String string0 = null;
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      boolean boolean1 = globalNamespace_Name1.isTypeInferred();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
  }

  @Test
  public void test35()  throws Throwable  {
      String string0 = ";D@NYeC";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      boolean boolean1 = globalNamespace_Name1.isDeclaredType();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test36()  throws Throwable  {
      String string0 = null;
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      String string1 = globalNamespace_Name1.getBaseName();
      assertNull(string1);
  }

  @Test
  public void test37()  throws Throwable  {
      String string0 = null;
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      JSType jSType0 = globalNamespace_Name1.getType();
      assertNull(jSType0);
  }

  @Test
  public void test38()  throws Throwable  {
      String string0 = null;
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      JSDocInfo jSDocInfo0 = globalNamespace_Name1.getJSDocInfo();
      assertNull(jSDocInfo0);
  }

  @Test
  public void test39()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_LOCAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      StaticSlot<JSType> staticSlot0 = globalNamespace_Ref0.getSymbol();
      assertNull(staticSlot0);
  }

  @Test
  public void test40()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.ALIASING_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      StaticSourceFile staticSourceFile0 = globalNamespace_Ref0.getSourceFile();
      assertNull(staticSourceFile0);
  }

  @Test
  public void test41()  throws Throwable  {
      JSModule jSModule0 = null;
      Node node0 = null;
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNull(compilerOptions0);
      
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(cleanupPasses0);
      
      Scope scope0 = cleanupPasses0.getTopScope();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNull(scope0);
      
      GlobalNamespace.Name globalNamespace_Name0 = null;
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.ALIASING_GET;
      int int0 = (-53);
      GlobalNamespace.Ref globalNamespace_Ref0 = null;
      try {
        globalNamespace_Ref0 = new GlobalNamespace.Ref(jSModule0, scope0, node0, globalNamespace_Name0, globalNamespace_Ref_Type0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test42()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.DIRECT_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      JSModule jSModule0 = globalNamespace_Ref0.getModule();
      assertNull(jSModule0);
  }

  @Test
  public void test43()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      GlobalNamespace.Ref globalNamespace_Ref1 = globalNamespace_Ref0.getTwin();
      assertNull(globalNamespace_Ref1);
  }

  @Test
  public void test44()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_LOCAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      Node node0 = globalNamespace_Ref0.getNode();
      assertNull(node0);
  }

  @Test
  public void test45()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      Node node0 = null;
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0, node0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(globalNamespace0);
      
      boolean boolean0 = globalNamespace0.hasExternsRoot();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertFalse(boolean0);
      
      String string0 = "DIRECT_GET";
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, string0, boolean0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(processCommonJSModules0);
      
      JSModule jSModule0 = processCommonJSModules0.getModule();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNull(jSModule0);
      
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNull(compilerOptions0);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(defaultPassConfig0);
      
      Scope scope0 = defaultPassConfig0.getTopScope();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNull(scope0);
      
      GlobalNamespace.AstChange globalNamespace_AstChange0 = new GlobalNamespace.AstChange(jSModule0, scope0, node0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(globalNamespace_AstChange0);
  }

  @Test
  public void test46() {}
//   @Test
//   public void test46()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       DefaultPassConfig defaultPassConfig0 = (DefaultPassConfig)compiler0.getPassConfig();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(defaultPassConfig0);
//       
//       String string0 = "s8";
//       Node node0 = compiler0.parseTestCode(string0);
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isIf());
//       assertEquals(true, node0.hasOneChild());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isString());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(1, node0.getChildCount());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isLabel());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isInc());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isName());
//       assertEquals(0, node0.getLength());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isWhile());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isNumber());
//       assertNotNull(node0);
//       
//       GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0, node0);
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isIf());
//       assertEquals(true, node0.hasOneChild());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isString());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(1, node0.getChildCount());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isLabel());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isInc());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isName());
//       assertEquals(0, node0.getLength());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isWhile());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isNumber());
//       assertNotNull(globalNamespace0);
//       
//       JSType jSType0 = globalNamespace0.getTypeOfThis();
//       assertEquals(false, jSType0.isBooleanValueType());
//       assertEquals(false, jSType0.isNoObjectType());
//       assertEquals(false, jSType0.isAllType());
//       assertEquals(false, jSType0.isTemplateType());
//       assertEquals(false, jSType0.isEnumType());
//       assertEquals(false, jSType0.isOrdinaryFunction());
//       assertEquals(false, jSType0.isNominalConstructor());
//       assertEquals(false, jSType0.isResolved());
//       assertEquals(false, jSType0.isTemplatizedType());
//       assertEquals(false, jSType0.isRecordType());
//       assertEquals(false, jSType0.isInterface());
//       assertEquals(false, jSType0.isEnumElementType());
//       assertEquals(false, jSType0.isNumberValueType());
//       assertEquals(false, jSType0.isVoidType());
//       assertEquals(false, jSType0.isNullType());
//       assertEquals(false, jSType0.isFunctionPrototypeType());
//       assertEquals(true, jSType0.isNominalType());
//       assertEquals(false, jSType0.isNoResolvedType());
//       assertEquals(false, jSType0.isStringValueType());
//       assertEquals(false, jSType0.isNoType());
//       assertEquals(false, jSType0.isCheckedUnknownType());
//       assertEquals(false, jSType0.isConstructor());
//       assertEquals(false, jSType0.isUnionType());
//       assertEquals(false, jSType0.isFunctionType());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isIf());
//       assertEquals(true, node0.hasOneChild());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isString());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(1, node0.getChildCount());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isLabel());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isInc());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isName());
//       assertEquals(0, node0.getLength());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isWhile());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isNumber());
//       assertNotNull(jSType0);
//   }

  @Test
  public void test47()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      Node node0 = null;
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0, node0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(globalNamespace0);
      
      StaticScope<JSType> staticScope0 = globalNamespace0.getParentScope();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNull(staticScope0);
  }

  @Test
  public void test48()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      Node node0 = null;
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0, node0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(globalNamespace0);
      
      // Undeclared exception!
      try {
        List<GlobalNamespace.Name> list0 = globalNamespace0.getNameForest();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
      }
  }

  @Test
  public void test49() {}
//   @Test
//   public void test49()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       DefaultPassConfig defaultPassConfig0 = (DefaultPassConfig)compiler0.getPassConfig();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(defaultPassConfig0);
//       
//       String string0 = "s8";
//       Node node0 = compiler0.parseTestCode(string0);
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isBlock());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isIn());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isParamList());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isNew());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isHook());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isCall());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isReturn());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isFunction());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isWhile());
//       assertEquals(true, node0.hasOneChild());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(1, node0.getChildCount());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getErrorCount());
//       assertNotNull(node0);
//       
//       GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0, node0);
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isBlock());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isIn());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isParamList());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isNew());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isHook());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isCall());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isReturn());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isFunction());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isWhile());
//       assertEquals(true, node0.hasOneChild());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(1, node0.getChildCount());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getErrorCount());
//       assertNotNull(globalNamespace0);
//       
//       GlobalNamespace.Name globalNamespace_Name0 = globalNamespace0.getSlot(string0);
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isBlock());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isIn());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isParamList());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isNew());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isHook());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isCall());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isReturn());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isFunction());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isWhile());
//       assertEquals(true, node0.hasOneChild());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(1, node0.getChildCount());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getErrorCount());
//       assertNull(globalNamespace_Name0);
//   }

  @Test
  public void test50()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      DefaultPassConfig defaultPassConfig0 = (DefaultPassConfig)compiler0.getPassConfig();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(defaultPassConfig0);
      
      String string0 = "s8";
      Node node0 = compiler0.parseTestCode(string0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, node0.isParamList());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isVar());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCast());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAssign());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNew());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isRegExp());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLabel());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isThis());
      assertNotNull(node0);
      
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0, node0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, node0.isParamList());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isVar());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCast());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAssign());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNew());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isRegExp());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLabel());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isThis());
      assertNotNull(globalNamespace0);
      
      Iterable<GlobalNamespace.Name> iterable0 = globalNamespace0.getAllSymbols();
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, node0.isParamList());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isVar());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCast());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAssign());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNew());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isRegExp());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLabel());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isThis());
      assertNotNull(iterable0);
  }

  @Test
  public void test51()  throws Throwable  {
      AbstractCompiler abstractCompiler0 = null;
      String string0 = "";
      int int0 = 0;
      Node node0 = Node.newString(string0, int0, int0);
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isWhile());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isName());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(true, node0.mayMutateArguments());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isAnd());
      assertEquals(0, node0.getChildCount());
      assertNotNull(node0);
      
      GlobalNamespace globalNamespace0 = new GlobalNamespace(abstractCompiler0, node0, node0);
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isWhile());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isName());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(true, node0.mayMutateArguments());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isAnd());
      assertEquals(0, node0.getChildCount());
      assertNotNull(globalNamespace0);
      
      GlobalNamespace.Name globalNamespace_Name0 = null;
      // Undeclared exception!
      try {
        Iterable<GlobalNamespace.Ref> iterable0 = globalNamespace0.getReferences(globalNamespace_Name0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
