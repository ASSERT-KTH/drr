/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:13:00 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.lang.LocaleUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;


public class LocaleUtilsEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "ja";
      List list0 = LocaleUtils.countriesByLanguage(string0);
      assertNotNull(list0);
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "";
      List list0 = LocaleUtils.languagesByCountry(string0);
      assertNotNull(list0);
      assertEquals(false, list0.isEmpty());
      assertEquals(44, list0.size());
  }

  @Test
  public void test02()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(boolean0);
  }

  @Test
  public void test03()  throws Throwable  {
      Set set0 = LocaleUtils.availableLocaleSet();
      assertNotNull(set0);
      assertEquals(false, set0.isEmpty());
      assertEquals(156, set0.size());
      
      Set set1 = LocaleUtils.availableLocaleSet();
      assertNotNull(set1);
      assertEquals(false, set1.isEmpty());
      assertEquals(156, set1.size());
      assertSame(set1, set0);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "'6\\E";
      Locale locale0 = new Locale(string0, string0, string0);
      assertNotNull(locale0);
      assertEquals("'6\\e_'6\\E_'6\\E", locale0.toString());
      assertEquals("'6\\e", locale0.getLanguage());
      assertEquals("'6\\E", locale0.getCountry());
      assertEquals("'6\\E", locale0.getVariant());
      
      Locale locale1 = Locale.KOREA;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("KOR", locale1.getISO3Country());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("KR", locale1.getCountry());
      assertEquals("ko_KR", locale1.toString());
      assertEquals("ko", locale1.getLanguage());
      assertNotSame(locale1, locale0);
      
      List list0 = LocaleUtils.localeLookupList(locale0, locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(list0);
      assertEquals("'6\\e_'6\\E_'6\\E", locale0.toString());
      assertEquals("'6\\e", locale0.getLanguage());
      assertEquals("'6\\E", locale0.getCountry());
      assertEquals("'6\\E", locale0.getVariant());
      assertEquals(4, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals("", locale1.getVariant());
      assertEquals("KOR", locale1.getISO3Country());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("KR", locale1.getCountry());
      assertEquals("ko_KR", locale1.toString());
      assertEquals("ko", locale1.getLanguage());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "'6\\E";
      Locale locale0 = new Locale(string0, string0, string0);
      assertNotNull(locale0);
      assertEquals("'6\\E", locale0.getCountry());
      assertEquals("'6\\E", locale0.getVariant());
      assertEquals("'6\\e_'6\\E_'6\\E", locale0.toString());
      assertEquals("'6\\e", locale0.getLanguage());
      
      List list0 = LocaleUtils.localeLookupList(locale0, locale0);
      assertNotNull(list0);
      assertEquals(3, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals("'6\\E", locale0.getCountry());
      assertEquals("'6\\E", locale0.getVariant());
      assertEquals("'6\\e_'6\\E_'6\\E", locale0.toString());
      assertEquals("'6\\e", locale0.getLanguage());
  }

  @Test
  public void test06()  throws Throwable  {
      Locale locale0 = null;
      List list0 = LocaleUtils.localeLookupList(locale0, locale0);
      assertNotNull(list0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "ha_SSXO=l8:hZDN";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: ha_SSXO=l8:hZDN
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "ha_XlDg";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: ha_XlDg
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "ha_S7X=lR8:Dg";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: ha_S7X=lR8:Dg
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "ha_`8n:Dg";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: ha_`8n:Dg
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "hp_=7E8:Dg";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: hp_=7E8:Dg
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "fk])P*+v`hXIgei.79";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: fk])P*+v`hXIgei.79
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "el";
      Locale locale0 = LocaleUtils.toLocale(string0);
      assertNotNull(locale0);
      assertEquals("ell", locale0.getISO3Language());
      assertEquals("el", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("el", locale0.getLanguage());
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "q:+JO.}(Fm{<[@";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: q:+JO.}(Fm{<[@
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "{5IP %C&P}le";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: {5IP %C&P}le
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "B5xhv\\M-~Nq";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: B5xhv\\M-~Nq
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: 
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      
      String string0 = locale0.toString();
      assertNotNull(string0);
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", string0);
      
      Locale locale1 = LocaleUtils.toLocale(string0);
      assertTrue(locale1.equals((Object)locale0));
      assertTrue(locale0.equals((Object)locale1));
      assertNotNull(locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("KR", locale1.getCountry());
      assertEquals("ko_KR", locale1.toString());
      assertEquals("KOR", locale1.getISO3Country());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertNotSame(locale1, locale0);
      assertNotSame(locale0, locale1);
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "s";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: s
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = null;
      Locale locale0 = LocaleUtils.toLocale(string0);
      assertNull(locale0);
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "ha_XK_l;?g";
      Locale locale0 = LocaleUtils.toLocale(string0);
      assertNotNull(locale0);
      assertEquals("l;?g", locale0.getVariant());
      assertEquals("ha_XK_l;?g", locale0.toString());
      assertEquals("XK", locale0.getCountry());
      assertEquals("hau", locale0.getISO3Language());
      assertEquals("ha", locale0.getLanguage());
      
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      assertEquals("l;?g", locale0.getVariant());
      assertEquals("ha_XK_l;?g", locale0.toString());
      assertEquals("XK", locale0.getCountry());
      assertEquals("hau", locale0.getISO3Language());
      assertEquals("ha", locale0.getLanguage());
      assertFalse(boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      List list0 = LocaleUtils.localeLookupList(locale0);
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
  }

  @Test
  public void test23()  throws Throwable  {
      LocaleUtils localeUtils0 = new LocaleUtils();
      assertNotNull(localeUtils0);
  }
}
