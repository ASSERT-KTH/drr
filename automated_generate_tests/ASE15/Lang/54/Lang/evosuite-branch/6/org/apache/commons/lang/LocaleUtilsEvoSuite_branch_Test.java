/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:23:21 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.lang.LocaleUtils;




import org.junit.runner.RunWith;


public class LocaleUtilsEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "th";
      List list0 = LocaleUtils.countriesByLanguage(string0);
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      assertNotNull(list0);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "th";
      List list0 = LocaleUtils.languagesByCountry(string0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test
  public void test02()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertTrue(boolean0);
  }

  @Test
  public void test03()  throws Throwable  {
      Locale locale0 = null;
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      assertFalse(boolean0);
  }

  @Test
  public void test04()  throws Throwable  {
      Set set0 = LocaleUtils.availableLocaleSet();
      assertEquals(156, set0.size());
      assertEquals(false, set0.isEmpty());
      assertNotNull(set0);
      
      Set set1 = LocaleUtils.availableLocaleSet();
      assertEquals(false, set1.isEmpty());
      assertEquals(156, set1.size());
      assertNotNull(set1);
      assertSame(set1, set0);
  }

  @Test
  public void test05()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = null;
      List list0 = LocaleUtils.localeLookupList(locale0, locale1);
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals(3, list0.size());
      assertEquals(false, list0.isEmpty());
      assertNotNull(list0);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "3{]HDc`(Hsmjs+Pn";
      Locale locale0 = new Locale(string0, string0, string0);
      assertEquals("3{]HDc`(Hsmjs+Pn", locale0.getVariant());
      assertEquals("3{]hdc`(hsmjs+pn", locale0.getLanguage());
      assertEquals("3{]hdc`(hsmjs+pn_3{]HDC`(HSMJS+PN_3{]HDc`(Hsmjs+Pn", locale0.toString());
      assertEquals("3{]HDC`(HSMJS+PN", locale0.getCountry());
      assertNotNull(locale0);
      
      List list0 = LocaleUtils.localeLookupList(locale0, locale0);
      assertEquals("3{]HDc`(Hsmjs+Pn", locale0.getVariant());
      assertEquals("3{]hdc`(hsmjs+pn", locale0.getLanguage());
      assertEquals("3{]hdc`(hsmjs+pn_3{]HDC`(HSMJS+PN_3{]HDc`(Hsmjs+Pn", locale0.toString());
      assertEquals("3{]HDC`(HSMJS+PN", locale0.getCountry());
      assertEquals(3, list0.size());
      assertEquals(false, list0.isEmpty());
      assertNotNull(list0);
  }

  @Test
  public void test07()  throws Throwable  {
      Locale locale0 = null;
      List list0 = LocaleUtils.localeLookupList(locale0, locale0);
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertNotNull(list0);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "iq_TX`G{-q0$j";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: iq_TX`G{-q0$j
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "iq_X{-q0$j";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: iq_X{-q0$j
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "iq_X-q0$j";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: iq_X-q0$j
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "iq_{${q$j";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: iq_{${q$j
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "iq_+-q0Xj";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: iq_+-q0Xj
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "hxXvYE81ExW]+{";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: hxXvYE81ExW]+{
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "m~k[J";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: m~k[J
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "cF";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: cF
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "mk";
      Locale locale0 = LocaleUtils.toLocale(string0);
      assertEquals("mk", locale0.getLanguage());
      assertEquals("mkd", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("mk", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string1 = locale0.getDisplayName(locale0);
      assertEquals("mk", locale0.getLanguage());
      assertEquals("mkd", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("mk", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("\u043C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      // Undeclared exception!
      try {
        Locale locale1 = LocaleUtils.toLocale(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: \u043C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: 
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string0 = locale0.toString();
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", string0);
      assertNotNull(string0);
      
      Locale locale1 = LocaleUtils.toLocale(string0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("TW", locale1.getCountry());
      assertNotNull(locale1);
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(locale1.equals((Object)locale0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "(1ZF`[=eI${T5--l_)(";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: (1ZF`[=eI${T5--l_)(
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = null;
      Locale locale0 = LocaleUtils.toLocale(string0);
      assertNull(locale0);
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "th";
      Locale locale0 = LocaleUtils.toLocale(string0);
      assertEquals("", locale0.getVariant());
      assertEquals("tha", locale0.getISO3Language());
      assertEquals("th", locale0.getLanguage());
      assertEquals("th", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      List list0 = LocaleUtils.localeLookupList(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("tha", locale0.getISO3Language());
      assertEquals("th", locale0.getLanguage());
      assertEquals("th", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      assertNotNull(list0);
  }

  @Test
  public void test22()  throws Throwable  {
      LocaleUtils localeUtils0 = new LocaleUtils();
      assertNotNull(localeUtils0);
  }
}
