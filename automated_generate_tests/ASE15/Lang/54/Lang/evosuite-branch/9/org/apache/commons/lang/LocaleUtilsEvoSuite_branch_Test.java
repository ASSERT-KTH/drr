/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:54:14 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.lang.LocaleUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;


public class LocaleUtilsEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "pl";
      List list0 = LocaleUtils.countriesByLanguage(string0);
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      assertNotNull(list0);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "NO";
      List list0 = LocaleUtils.languagesByCountry(string0);
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test
  public void test02()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(boolean0);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "Wj)";
      Locale locale0 = new Locale(string0);
      assertEquals("wj)", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("wj)", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("wj)", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      assertEquals("wj)", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("wj)", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("wj)", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(boolean0);
  }

  @Test
  public void test04()  throws Throwable  {
      Set set0 = LocaleUtils.availableLocaleSet();
      assertEquals(156, set0.size());
      assertEquals(false, set0.isEmpty());
      assertNotNull(set0);
      
      Set set1 = LocaleUtils.availableLocaleSet();
      assertEquals(false, set1.isEmpty());
      assertEquals(156, set1.size());
      assertSame(set1, set0);
      assertNotNull(set1);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "Wj)";
      Locale locale0 = new Locale(string0);
      assertEquals("wj)", locale0.toString());
      assertEquals("wj)", locale0.getLanguage());
      assertEquals("wj)", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.FRENCH;
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("fr", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      
      List list0 = LocaleUtils.localeLookupList(locale0, locale1);
      assertEquals(false, list0.isEmpty());
      assertEquals(2, list0.size());
      assertEquals("wj)", locale0.toString());
      assertEquals("wj)", locale0.getLanguage());
      assertEquals("wj)", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("fr", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(list0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
  }

  @Test
  public void test06()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      List list0 = LocaleUtils.localeLookupList(locale0);
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(list0);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "wQ0'S}<p!";
      Locale locale0 = new Locale(string0, string0, string0);
      assertEquals("wQ0'S}<p!", locale0.getVariant());
      assertEquals("WQ0'S}<P!", locale0.getCountry());
      assertEquals("wq0's}<p!_WQ0'S}<P!_wQ0'S}<p!", locale0.toString());
      assertEquals("wq0's}<p!", locale0.getLanguage());
      assertNotNull(locale0);
      
      List list0 = LocaleUtils.localeLookupList(locale0);
      assertEquals(false, list0.isEmpty());
      assertEquals(3, list0.size());
      assertEquals("wQ0'S}<p!", locale0.getVariant());
      assertEquals("WQ0'S}<P!", locale0.getCountry());
      assertEquals("wq0's}<p!_WQ0'S}<P!_wQ0'S}<p!", locale0.toString());
      assertEquals("wq0's}<p!", locale0.getLanguage());
      assertNotNull(list0);
  }

  @Test
  public void test08()  throws Throwable  {
      Locale locale0 = null;
      List list0 = LocaleUtils.localeLookupList(locale0, locale0);
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertNotNull(list0);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "xx_MVrHP=9";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: xx_MVrHP=9
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "xx_MV_@Y=1";
      Locale locale0 = LocaleUtils.toLocale(string0);
      assertEquals("xx", locale0.getLanguage());
      assertEquals("@Y=1", locale0.getVariant());
      assertEquals("MDV", locale0.getISO3Country());
      assertEquals("xx_MV_@Y=1", locale0.toString());
      assertEquals("MV", locale0.getCountry());
      assertNotNull(locale0);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "xf_MjiV_qr/V9";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: xf_MjiV_qr/V9
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "xx_M*qr/=9";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: xx_M*qr/=9
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "xx_fMVqr/=9s";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: xx_fMVqr/=9s
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "xx_<!r/=n9";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: xx_<!r/=n9
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "org.apache.commons.lang.LocaleUtils";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: org.apache.commons.lang.LocaleUtils
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "j{";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: j{
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "|4]2\\";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: |4]2\\
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "Irb965)0p]+( Xg5";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: Irb965)0p]+( Xg5
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "yX5A1[H";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: yX5A1[H
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      String string0 = locale0.toString();
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", string0);
      assertNotNull(string0);
      
      Locale locale1 = LocaleUtils.toLocale(string0);
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("CA", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertNotSame(locale1, locale0);
      assertNotSame(locale0, locale1);
      assertNotNull(locale1);
      assertTrue(locale1.equals((Object)locale0));
      assertTrue(locale0.equals((Object)locale1));
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "be";
      Locale locale0 = LocaleUtils.toLocale(string0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("be", locale0.toString());
      assertEquals("bel", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("be", locale0.getLanguage());
      assertNotNull(locale0);
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = null;
      Locale locale0 = LocaleUtils.toLocale(string0);
      assertNull(locale0);
  }

  @Test
  public void test23()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string0 = locale0.getISO3Country();
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try {
        Locale locale1 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: CAN
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      LocaleUtils localeUtils0 = new LocaleUtils();
      assertNotNull(localeUtils0);
  }
}
