/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:03:10 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.util.Arrays;
import org.apache.commons.lang.BooleanUtils;




import org.junit.runner.RunWith;


public class BooleanUtilsEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      Boolean[] booleanArray0 = null;
      // Undeclared exception!
      try {
        Boolean boolean0 = BooleanUtils.xor(booleanArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = BooleanUtils.toBoolean(int0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = (Boolean) boolean0;
      Boolean boolean1 = BooleanUtils.xor(booleanArray0);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "UPF)^LY1ofEMo}vG=C";
      boolean boolean0 = BooleanUtils.toBoolean(string0, string0, string0);
      assertTrue(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = (Boolean) boolean0;
      Boolean boolean1 = BooleanUtils.xor(booleanArray0);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
  }

  @Test
  public void test03()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[6];
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      booleanArray0[1] = booleanArray0[0];
      booleanArray0[2] = boolean0;
      booleanArray0[3] = booleanArray0[2];
      booleanArray0[4] = booleanArray0[3];
      booleanArray0[5] = booleanArray0[2];
      Boolean boolean1 = BooleanUtils.xor(booleanArray0);
      assertFalse(boolean1);
      assertNotSame(boolean1, boolean0);
      assertFalse(boolean1.equals((Object)boolean0));
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = 39;
      int int1 = 1520;
      Boolean boolean0 = BooleanUtils.toBooleanObject(int1, int0, int1, int0);
      assertFalse(boolean0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      String string0 = BooleanUtils.toStringYesNo((boolean) boolean0);
      assertNotNull(string0);
      assertEquals("no", string0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test05()  throws Throwable  {
      boolean boolean0 = true;
      Integer integer0 = BooleanUtils.toIntegerObject(boolean0);
      assertEquals(1, (int)integer0);
      
      int int0 = (-3759);
      Integer integer1 = new Integer(int0);
      assertEquals((-3759), (int)integer1);
      assertNotSame(integer1, integer0);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      
      Boolean boolean1 = BooleanUtils.toBooleanObject(integer0, integer1, integer0, integer1);
      assertFalse(boolean1);
      assertNotSame(integer0, integer1);
      assertNotSame(integer1, integer0);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      
      String string0 = BooleanUtils.toStringYesNo(boolean1);
      assertNotNull(string0);
      assertEquals("no", string0);
      assertNotSame(integer0, integer1);
      assertNotSame(integer1, integer0);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "f{~Vx";
      String string1 = "U";
      assertNotSame(string1, string0);
      
      // Undeclared exception!
      try {
        boolean boolean0 = BooleanUtils.toBoolean(string0, string1, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match either specified value
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "UPF)^LY1ofEMo}vG=C";
      String string1 = "java.lang.Object";
      assertNotSame(string1, string0);
      
      boolean boolean0 = BooleanUtils.toBoolean(string0, string1, string0);
      assertFalse(boolean0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "2D2KM>M/-{dv";
      String string1 = null;
      boolean boolean0 = BooleanUtils.toBoolean(string1, string0, string1);
      assertFalse(boolean0);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "2D2KM>M|-{dv";
      String string1 = null;
      // Undeclared exception!
      try {
        boolean boolean0 = BooleanUtils.toBoolean(string1, string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match either specified value
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "tcu0";
      boolean boolean0 = BooleanUtils.toBoolean(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "yes";
      boolean boolean0 = BooleanUtils.toBoolean(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "yzr";
      boolean boolean0 = BooleanUtils.toBoolean(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "E[W";
      boolean boolean0 = BooleanUtils.toBoolean(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "R{";
      boolean boolean0 = BooleanUtils.toBoolean(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "f{~Vx";
      boolean boolean0 = BooleanUtils.toBoolean(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = BooleanUtils.toStringTrueFalse(boolean0);
      assertNotNull(string0);
      assertEquals("true", string0);
      
      boolean boolean1 = BooleanUtils.toBoolean(string0);
      assertTrue(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "on";
      String string1 = "SB(D";
      assertNotSame(string1, string0);
      
      boolean boolean0 = BooleanUtils.toBoolean(string1);
      assertFalse(boolean0);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Boolean.toString(boolean0);
      assertNotNull(string2);
      assertEquals("false", string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      // Undeclared exception!
      try {
        Boolean boolean1 = BooleanUtils.toBooleanObject(string1, string0, string2, string2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match any specified value
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "on";
      String string1 = "true";
      assertNotSame(string1, string0);
      
      String string2 = "SB(D";
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      boolean boolean0 = BooleanUtils.toBoolean(string2);
      assertFalse(boolean0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = Boolean.toString(boolean0);
      assertNotNull(string3);
      assertEquals("false", string3);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      Boolean boolean1 = BooleanUtils.toBooleanObject(string1, string0, string3, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "UPF)^LY1ofEMo}vG=C";
      int int0 = 2302;
      Integer integer0 = new Integer(int0);
      assertEquals(2302, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Boolean boolean0 = BooleanUtils.toBooleanObject(integer0, integer0, (Integer) int0, (Integer) int0);
      assertTrue(boolean0);
      assertTrue(integer0.equals((Object)int0));
      
      String string1 = BooleanUtils.toStringYesNo(boolean0);
      assertNotNull(string1);
      assertEquals("yes", string1);
      assertNotSame(string1, string0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(string1.equals((Object)string0));
      
      Boolean boolean1 = BooleanUtils.toBooleanObject(string1, string0, string1, string0);
      assertFalse(boolean1);
      assertNotSame(boolean0, boolean1);
      assertNotSame(boolean1, boolean0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(boolean0.equals((Object)boolean1));
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = null;
      String string1 = "A blank string is not a valid number";
      Boolean boolean0 = BooleanUtils.toBooleanObject(string0, string1, string1, string0);
  }

  @Test
  public void test21()  throws Throwable  {
      int int0 = (-2755);
      Integer integer0 = new Integer(int0);
      assertEquals((-2755), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Boolean boolean0 = BooleanUtils.toBooleanObject(integer0);
      assertTrue(boolean0);
      assertTrue(integer0.equals((Object)int0));
      
      String string0 = BooleanUtils.toStringYesNo((boolean) boolean0);
      assertNotNull(string0);
      assertEquals("yes", string0);
      assertTrue(integer0.equals((Object)int0));
      
      String string1 = null;
      // Undeclared exception!
      try {
        Boolean boolean1 = BooleanUtils.toBooleanObject(string1, string0, string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match any specified value
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "The array must not contavn any nullFelement";
      String string1 = null;
      Boolean boolean0 = BooleanUtils.toBooleanObject(string1, string0, string1, string0);
      assertFalse(boolean0);
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "[,SPg*Ul%A";
      Boolean boolean0 = BooleanUtils.toBooleanObject(string0, string0, string0, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = "no";
      Boolean boolean0 = BooleanUtils.toBooleanObject(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = "off";
      Boolean boolean0 = BooleanUtils.toBooleanObject(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = "on";
      Boolean boolean0 = BooleanUtils.toBooleanObject(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test27()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      boolean boolean0 = BooleanUtils.isNotFalse((Boolean) booleanArray0[1]);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertFalse(boolean0);
      
      String string0 = Boolean.toString(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertNotNull(string0);
      assertEquals("false", string0);
      
      Boolean boolean1 = BooleanUtils.toBooleanObject(string0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = "yes";
      Boolean boolean0 = BooleanUtils.toBooleanObject(string0);
      assertTrue(boolean0);
      
      String string1 = BooleanUtils.toStringTrueFalse(boolean0);
      assertNotNull(string1);
      assertEquals("true", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      Boolean boolean1 = BooleanUtils.toBooleanObject(string1);
      assertTrue(boolean1);
      assertSame(boolean1, boolean0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertSame(boolean0, boolean1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = 0;
      Boolean boolean0 = BooleanUtils.toBooleanObject((Integer) int0);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(int0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Integer integer1 = BooleanUtils.toIntegerObject(boolean0, integer0, integer0, integer0);
      assertEquals(0, (int)integer1);
      assertSame(integer0, integer1);
      assertSame(integer1, integer0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer1.equals((Object)int0));
  }

  @Test
  public void test30()  throws Throwable  {
      int int0 = 1190;
      int int1 = 1098;
      Boolean boolean0 = BooleanUtils.toBooleanObject(int0, int1, int1, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      Integer integer0 = new Integer(int0);
      assertEquals(1190, (int)integer0);
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(int0 == int1);
      
      Integer integer1 = BooleanUtils.toIntegerObject(boolean0, (Integer) int1, (Integer) int1, integer0);
      assertEquals(1190, (int)integer1);
      assertSame(integer0, integer1);
      assertSame(integer1, integer0);
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
  }

  @Test
  public void test31()  throws Throwable  {
      int int0 = (-2755);
      Integer integer0 = new Integer(int0);
      assertEquals((-2755), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Boolean boolean0 = BooleanUtils.toBooleanObject(integer0);
      assertTrue(boolean0);
      assertTrue(integer0.equals((Object)int0));
      
      Integer integer1 = BooleanUtils.toIntegerObject(boolean0, integer0, integer0, integer0);
      assertEquals((-2755), (int)integer1);
      assertSame(integer1, integer0);
      assertSame(integer0, integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer0.equals((Object)int0));
  }

  @Test
  public void test32()  throws Throwable  {
      int int0 = 111;
      Boolean boolean0 = BooleanUtils.toBooleanObject(int0);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(int0);
      assertEquals(111, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Integer integer1 = BooleanUtils.toIntegerObject((boolean) boolean0, integer0, (Integer) int0);
      assertEquals(111, (int)integer1);
      assertSame(integer0, integer1);
      assertSame(integer1, integer0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer1.equals((Object)int0));
  }

  @Test
  public void test33()  throws Throwable  {
      boolean boolean0 = false;
      int int0 = 4919;
      Integer integer0 = new Integer(int0);
      assertEquals(4919, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      int int1 = BooleanUtils.toInteger((Boolean) boolean0, (int) integer0, int0, int0);
      assertEquals(4919, int1);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test34()  throws Throwable  {
      int int0 = 47;
      String string0 = null;
      boolean boolean0 = BooleanUtils.toBoolean(string0, string0, string0);
      assertTrue(boolean0);
      
      int int1 = BooleanUtils.toInteger(boolean0, int0, int0);
      assertEquals(47, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test35()  throws Throwable  {
      boolean boolean0 = false;
      int int0 = 4919;
      Integer integer0 = new Integer(int0);
      assertEquals(4919, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      int int1 = BooleanUtils.toInteger(boolean0, (int) integer0, (int) integer0);
      assertEquals(4919, int1);
      assertTrue(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test36()  throws Throwable  {
      int int0 = 111;
      Boolean boolean0 = BooleanUtils.toBooleanObject(int0);
      assertTrue(boolean0);
      
      Integer integer0 = BooleanUtils.toIntegerObject(boolean0);
      assertEquals(1, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
  }

  @Test
  public void test37()  throws Throwable  {
      Boolean boolean0 = null;
      Integer integer0 = BooleanUtils.toIntegerObject(boolean0);
  }

  @Test
  public void test38()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = BooleanUtils.toBoolean(string0);
      assertFalse(boolean0);
      
      int int0 = BooleanUtils.toInteger(boolean0);
      assertEquals(0, int0);
  }

  @Test
  public void test39()  throws Throwable  {
      int int0 = 22;
      Integer integer0 = new Integer(int0);
      assertEquals(22, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      int int1 = (-1697);
      Integer integer1 = new Integer(int1);
      assertEquals((-1697), (int)integer1);
      assertNotSame(integer1, integer0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(int1 == int0);
      
      Boolean boolean0 = BooleanUtils.toBooleanObject(integer0, integer1, integer1, integer0);
      assertNotSame(integer1, integer0);
      assertNotSame(integer0, integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(int1 == int0);
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(int0 == int1);
  }

  @Test
  public void test40()  throws Throwable  {
      int int0 = 0;
      Boolean boolean0 = BooleanUtils.toBooleanObject(int0);
      assertFalse(boolean0);
      
      Boolean boolean1 = BooleanUtils.negate(boolean0);
      assertTrue(boolean1);
      assertNotSame(boolean1, boolean0);
      assertNotSame(boolean0, boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean0.equals((Object)boolean1));
      
      int int1 = Boolean.compare((boolean) boolean1, (boolean) boolean0);
      assertEquals(1, int1);
      assertNotSame(boolean1, boolean0);
      assertNotSame(boolean0, boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean0.equals((Object)boolean1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      Integer integer0 = BooleanUtils.toIntegerObject((boolean) boolean0, (Integer) int1, (Integer) int0);
      assertEquals(0, (int)integer0);
      assertNotSame(boolean1, boolean0);
      assertNotSame(boolean0, boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean0.equals((Object)boolean1));
      assertFalse(int0 == int1);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try {
        Boolean boolean2 = BooleanUtils.toBooleanObject(integer0, (Integer) int1, (Integer) int1, (Integer) int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match any specified value
         //
      }
  }

  @Test
  public void test41()  throws Throwable  {
      int int0 = 39;
      Integer integer0 = null;
      Boolean boolean0 = BooleanUtils.toBooleanObject(integer0, (Integer) int0, (Integer) int0, integer0);
  }

  @Test
  public void test42()  throws Throwable  {
      boolean boolean0 = true;
      Integer integer0 = null;
      Integer integer1 = BooleanUtils.toIntegerObject(boolean0);
      assertEquals(1, (int)integer1);
      
      Boolean boolean1 = BooleanUtils.toBooleanObject(integer0, integer1, integer0, integer0);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
  }

  @Test
  public void test43()  throws Throwable  {
      boolean boolean0 = false;
      Integer integer0 = BooleanUtils.toIntegerObject(boolean0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = null;
      Integer integer2 = BooleanUtils.toIntegerObject(boolean0, integer0, integer1);
      // Undeclared exception!
      try {
        Boolean boolean1 = BooleanUtils.toBooleanObject(integer2, integer0, integer0, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match any specified value
         //
      }
  }

  @Test
  public void test44()  throws Throwable  {
      Integer integer0 = null;
      Boolean boolean0 = BooleanUtils.toBooleanObject(integer0, integer0, integer0, integer0);
      assertTrue(boolean0);
  }

  @Test
  public void test45()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(int0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      int int1 = 121;
      // Undeclared exception!
      try {
        Boolean boolean0 = BooleanUtils.toBooleanObject(int1, (int) integer0, (int) integer0, (int) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match any specified value
         //
      }
  }

  @Test
  public void test46()  throws Throwable  {
      int int0 = 2302;
      Boolean boolean0 = BooleanUtils.toBooleanObject(int0, int0, int0, int0);
      assertTrue(boolean0);
  }

  @Test
  public void test47()  throws Throwable  {
      int int0 = 89;
      int int1 = 2440;
      Integer integer0 = new Integer(int1);
      assertEquals(2440, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertFalse(int1 == int0);
      
      Integer integer1 = new Integer(int0);
      assertEquals(89, (int)integer1);
      assertNotSame(integer1, integer0);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(int0 == int1);
      
      boolean boolean0 = BooleanUtils.toBoolean((Integer) int0, integer0, integer1);
      assertFalse(boolean0);
      assertNotSame(integer1, integer0);
      assertNotSame(integer0, integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test48()  throws Throwable  {
      Boolean boolean0 = null;
      int int0 = 0;
      int int1 = BooleanUtils.toInteger(boolean0, int0, int0, int0);
      assertEquals(0, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      boolean boolean1 = true;
      int int2 = BooleanUtils.toInteger(boolean1);
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      // Undeclared exception!
      try {
        boolean boolean2 = BooleanUtils.toBoolean((Integer) int2, (Integer) int1, (Integer) int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match either specified value
         //
      }
  }

  @Test
  public void test49()  throws Throwable  {
      int int0 = 89;
      Integer integer0 = new Integer(int0);
      assertEquals(89, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Integer integer1 = null;
      // Undeclared exception!
      try {
        boolean boolean0 = BooleanUtils.toBoolean(integer1, integer0, (Integer) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match either specified value
         //
      }
  }

  @Test
  public void test50()  throws Throwable  {
      String string0 = ".";
      Integer integer0 = Integer.getInteger(string0);
      int int0 = 2921;
      Integer integer1 = new Integer(int0);
      assertEquals(2921, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      
      boolean boolean0 = BooleanUtils.toBoolean(integer0, integer1, integer0);
      assertFalse(boolean0);
      assertTrue(integer1.equals((Object)int0));
  }

  @Test
  public void test51()  throws Throwable  {
      Integer integer0 = null;
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      
      Integer integer1 = BooleanUtils.toIntegerObject(boolean0);
      assertEquals(0, (int)integer1);
      
      boolean boolean1 = BooleanUtils.toBoolean(integer0, integer0, integer1);
      assertTrue(boolean1);
      assertFalse(boolean0.equals((Object)boolean1));
  }

  @Test
  public void test52()  throws Throwable  {
      Boolean boolean0 = null;
      int int0 = 0;
      int int1 = BooleanUtils.toInteger(boolean0, int0, int0, int0);
      assertEquals(0, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      boolean boolean1 = BooleanUtils.toBoolean((Integer) int1, (Integer) int1, (Integer) int1);
      assertTrue(boolean1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test53()  throws Throwable  {
      int int0 = 0;
      int int1 = 176;
      // Undeclared exception!
      try {
        boolean boolean0 = BooleanUtils.toBoolean(int1, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match either specified value
         //
      }
  }

  @Test
  public void test54()  throws Throwable  {
      int int0 = 22;
      boolean boolean0 = BooleanUtils.toBoolean(int0, int0, int0);
      assertTrue(boolean0);
  }

  @Test
  public void test55()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[6];
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      booleanArray0[1] = booleanArray0[0];
      int int0 = 2697;
      int int1 = 0;
      int int2 = BooleanUtils.toInteger(booleanArray0[1], int0, int1, int1);
      assertEquals(2697, int2);
      assertFalse(int0 == int1);
      assertTrue(int0 == int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      
      boolean boolean1 = BooleanUtils.toBoolean(int2, int1, int2);
      assertFalse(boolean1);
      assertFalse(int0 == int1);
      assertTrue(int0 == int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
  }

  @Test
  public void test56()  throws Throwable  {
      Integer integer0 = null;
      Boolean boolean0 = BooleanUtils.toBooleanObject(integer0);
  }

  @Test
  public void test57()  throws Throwable  {
      int int0 = 47;
      boolean boolean0 = BooleanUtils.toBoolean(int0);
      assertTrue(boolean0);
  }

  @Test
  public void test58()  throws Throwable  {
      boolean boolean0 = false;
      boolean boolean1 = BooleanUtils.toBooleanDefaultIfNull((Boolean) boolean0, boolean0);
      assertFalse(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test
  public void test59()  throws Throwable  {
      int int0 = 0;
      Boolean boolean0 = BooleanUtils.toBooleanObject(int0);
      assertFalse(boolean0);
      
      Boolean boolean1 = BooleanUtils.negate(boolean0);
      assertTrue(boolean1);
      assertNotSame(boolean1, boolean0);
      assertNotSame(boolean0, boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean0.equals((Object)boolean1));
      
      Boolean boolean2 = Boolean.valueOf((boolean) boolean1);
      assertTrue(boolean2);
      assertNotSame(boolean1, boolean0);
      assertSame(boolean1, boolean2);
      assertSame(boolean2, boolean1);
      assertNotSame(boolean2, boolean0);
      assertNotSame(boolean0, boolean1);
      assertNotSame(boolean0, boolean2);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean0.equals((Object)boolean1));
      assertFalse(boolean0.equals((Object)boolean2));
      
      boolean boolean3 = false;
      int int1 = Boolean.compare((boolean) boolean2, boolean3);
      assertEquals(1, int1);
      assertNotSame(boolean1, boolean0);
      assertSame(boolean1, boolean2);
      assertSame(boolean2, boolean1);
      assertNotSame(boolean2, boolean0);
      assertNotSame(boolean0, boolean1);
      assertNotSame(boolean0, boolean2);
      assertFalse(int0 == int1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1.equals((Object)boolean3));
      assertFalse(boolean2.equals((Object)boolean3));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean0.equals((Object)boolean1));
      assertFalse(boolean0.equals((Object)boolean2));
      assertFalse(int1 == int0);
      
      Boolean boolean4 = BooleanUtils.toBooleanObject(int1, int0, int0, int1);
      assertNotSame(boolean1, boolean0);
      assertSame(boolean1, boolean2);
      assertSame(boolean2, boolean1);
      assertNotSame(boolean2, boolean0);
      assertNotSame(boolean0, boolean1);
      assertNotSame(boolean0, boolean2);
      assertFalse(int0 == int1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1.equals((Object)boolean3));
      assertFalse(boolean2.equals((Object)boolean3));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean0.equals((Object)boolean1));
      assertFalse(boolean0.equals((Object)boolean2));
      assertFalse(int1 == int0);
      
      boolean boolean5 = BooleanUtils.toBooleanDefaultIfNull(boolean4, boolean3);
      assertFalse(boolean5);
      assertNotSame(boolean1, boolean0);
      assertSame(boolean1, boolean2);
      assertSame(boolean2, boolean1);
      assertNotSame(boolean2, boolean0);
      assertNotSame(boolean0, boolean1);
      assertNotSame(boolean0, boolean2);
      assertFalse(int0 == int1);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1.equals((Object)boolean5));
      assertFalse(boolean1.equals((Object)boolean3));
      assertTrue(boolean3 == boolean5);
      assertFalse(boolean2.equals((Object)boolean3));
      assertFalse(boolean2.equals((Object)boolean5));
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean0.equals((Object)boolean5));
      assertFalse(boolean0.equals((Object)boolean1));
      assertFalse(boolean0.equals((Object)boolean2));
      assertFalse(int1 == int0);
  }

  @Test
  public void test60()  throws Throwable  {
      String string0 = "UPF)^LY1ofEMo}vG=C";
      boolean boolean0 = BooleanUtils.toBoolean(string0, string0, string0);
      assertTrue(boolean0);
      
      boolean boolean1 = BooleanUtils.toBooleanDefaultIfNull((Boolean) boolean0, boolean0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
  }

  @Test
  public void test61()  throws Throwable  {
      boolean boolean0 = true;
      Boolean boolean1 = BooleanUtils.toBooleanObject(boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = BooleanUtils.toBoolean(boolean1);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean0 == boolean2);
      assertTrue(boolean1.equals((Object)boolean2));
  }

  @Test
  public void test62()  throws Throwable  {
      String string0 = null;
      Boolean boolean0 = BooleanUtils.toBooleanObject(string0);
      boolean boolean1 = BooleanUtils.toBoolean(boolean0);
      assertFalse(boolean1);
  }

  @Test
  public void test63()  throws Throwable  {
      String string0 = "yeQ";
      boolean boolean0 = BooleanUtils.toBoolean(string0);
      assertFalse(boolean0);
      
      boolean boolean1 = BooleanUtils.toBoolean((Boolean) boolean0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
  }

  @Test
  public void test64()  throws Throwable  {
      String string0 = "oK";
      boolean boolean0 = BooleanUtils.toBoolean(string0);
      assertFalse(boolean0);
      
      Boolean boolean1 = BooleanUtils.toBooleanObject(boolean0);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
  }

  @Test
  public void test65()  throws Throwable  {
      int int0 = 1190;
      int int1 = 1098;
      Boolean boolean0 = BooleanUtils.toBooleanObject(int0, int1, int1, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      boolean boolean1 = BooleanUtils.isNotFalse(boolean0);
      assertTrue(boolean1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test66()  throws Throwable  {
      String string0 = "on";
      boolean boolean0 = BooleanUtils.toBoolean(string0);
      assertTrue(boolean0);
      
      boolean boolean1 = BooleanUtils.isNotFalse((Boolean) boolean0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
  }

  @Test
  public void test67()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      String string0 = null;
      Boolean boolean0 = BooleanUtils.toBooleanObject(string0, string0, string0, string0);
      assertTrue(boolean0);
      
      booleanArray0[2] = (boolean) boolean0;
      boolean boolean1 = BooleanUtils.isNotTrue((Boolean) booleanArray0[2]);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false, false}, booleanArray0));
      assertFalse(boolean1);
  }

  @Test
  public void test68()  throws Throwable  {
      String string0 = null;
      Boolean boolean0 = BooleanUtils.toBooleanObject(string0);
      boolean boolean1 = BooleanUtils.isTrue(boolean0);
      assertFalse(boolean1);
  }

  @Test
  public void test69()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      boolean boolean0 = BooleanUtils.isNotTrue((Boolean) booleanArray0[0]);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(boolean0);
  }

  @Test
  public void test70()  throws Throwable  {
      String string0 = "UPF)^LY1ofEMo}vG=C";
      Boolean boolean0 = BooleanUtils.toBooleanObject(string0);
      Boolean boolean1 = BooleanUtils.negate(boolean0);
  }

  @Test
  public void test71()  throws Throwable  {
      String string0 = "UPF)^LY1ofEMo}vG=C";
      boolean boolean0 = BooleanUtils.toBoolean(string0, string0, string0);
      assertTrue(boolean0);
      
      Boolean boolean1 = BooleanUtils.negate((Boolean) boolean0);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
  }

  @Test
  public void test72()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[6];
      String string0 = BooleanUtils.toStringYesNo(booleanArray0[0]);
      assertNull(string0);
  }

  @Test
  public void test73()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = BooleanUtils.toStringOnOff((Boolean) boolean0);
      assertNotNull(string0);
      assertEquals("on", string0);
  }

  @Test
  public void test74()  throws Throwable  {
      BooleanUtils booleanUtils0 = new BooleanUtils();
      assertNotNull(booleanUtils0);
  }

  @Test
  public void test75()  throws Throwable  {
      int int0 = (-15);
      Boolean boolean0 = BooleanUtils.toBooleanObject(int0);
      assertTrue(boolean0);
      
      String string0 = BooleanUtils.toStringOnOff((boolean) boolean0);
      assertNotNull(string0);
      assertEquals("on", string0);
  }
}
