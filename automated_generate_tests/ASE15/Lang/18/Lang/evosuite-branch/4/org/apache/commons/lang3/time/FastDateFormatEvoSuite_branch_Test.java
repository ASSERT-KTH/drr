/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:19:21 GMT 2014
 */

package org.apache.commons.lang3.time;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.text.AttributedCharacterIterator;
import java.text.FieldPosition;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDateFormat;




import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;


public class FastDateFormatEvoSuite_branch_Test  {

  @Test
  public void test00() {}
//   @Test
//   public void test00()  throws Throwable  {
//       int int0 = 538;
//       String string0 = "k";
//       Locale locale0 = Locale.FRANCE;
//       assertNotNull(locale0);
//       assertEquals("FR", locale0.getCountry());
//       assertEquals("fr_FR", locale0.toString());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("FRA", locale0.getISO3Country());
//       assertEquals("fr", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("FR", locale0.getCountry());
//       assertEquals("fr_FR", locale0.toString());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("FRA", locale0.getISO3Country());
//       assertEquals("fr", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals(4, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("k", fastDateFormat0.getPattern());
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=538,MONTH=538,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=538,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=538,HOUR_OF_DAY=538,MINUTE=538,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       String string1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
//       assertNotNull(string1);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-43726194120000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=584,MONTH=4,WEEK_OF_YEAR=20,WEEK_OF_MONTH=2,DAY_OF_MONTH=13,DAY_OF_YEAR=134,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=58,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("FR", locale0.getCountry());
//       assertEquals("fr_FR", locale0.toString());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("FRA", locale0.getISO3Country());
//       assertEquals("fr", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals(4, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("k", fastDateFormat0.getPattern());
//       assertEquals("18", string1);
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//   }

  @Test
  public void test01() {}
//   @Test
//   public void test01()  throws Throwable  {
//       int int0 = 1;
//       Locale locale0 = Locale.KOREAN;
//       assertNotNull(locale0);
//       assertEquals("kor", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("ko", locale0.toString());
//       assertEquals("ko", locale0.getLanguage());
//       assertEquals("", locale0.getCountry());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, locale0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' '('EE')' a h'\uC2DC' mm'\uBD84' ss'\uCD08'", fastDateFormat0.getPattern());
//       assertEquals(36, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("kor", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("ko", locale0.toString());
//       assertEquals("ko", locale0.getLanguage());
//       assertEquals("", locale0.getCountry());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) zoneInfo0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       
//       AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator((Object) mockGregorianCalendar0);
//       assertNotNull(attributedCharacterIterator0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(0, attributedCharacterIterator0.getRunStart());
//       assertEquals(0, attributedCharacterIterator0.getIndex());
//       assertEquals(0, attributedCharacterIterator0.getBeginIndex());
//       assertEquals(30, attributedCharacterIterator0.getRunLimit());
//       assertEquals(30, attributedCharacterIterator0.getEndIndex());
//       assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' '('EE')' a h'\uC2DC' mm'\uBD84' ss'\uCD08'", fastDateFormat0.getPattern());
//       assertEquals(36, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals("kor", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("ko", locale0.toString());
//       assertEquals("ko", locale0.getLanguage());
//       assertEquals("", locale0.getCountry());
//   }

  @Test
  public void test02() {}
//   @Test
//   public void test02()  throws Throwable  {
//       int int0 = 1;
//       Locale locale0 = Locale.KOREAN;
//       assertNotNull(locale0);
//       assertEquals("ko", locale0.toString());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("ko", locale0.getLanguage());
//       assertEquals("kor", locale0.getISO3Language());
//       assertEquals("", locale0.getCountry());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, locale0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' '('EE')' a h'\uC2DC' mm'\uBD84' ss'\uCD08'", fastDateFormat0.getPattern());
//       assertEquals(36, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("ko", locale0.toString());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("ko", locale0.getLanguage());
//       assertEquals("kor", locale0.getISO3Language());
//       assertEquals("", locale0.getCountry());
//       
//       int int1 = (-1497);
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int1, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1,MONTH=-1497,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
//       assertNotNull(string0);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' '('EE')' a h'\uC2DC' mm'\uBD84' ss'\uCD08'", fastDateFormat0.getPattern());
//       assertEquals(36, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("ko", locale0.toString());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("ko", locale0.getLanguage());
//       assertEquals("kor", locale0.getISO3Language());
//       assertEquals("", locale0.getCountry());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-66072672000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=125,MONTH=3,WEEK_OF_YEAR=14,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=92,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals("0125\uB144 4\uC6D4 1\uC77C (\uC218) \uC624\uC804 12\uC2DC 00\uBD84 00\uCD08", string0);
//   }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "h#8D7'E\\\"~tnn?";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
      assertNotNull(fastDateFormat0);
      assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("h#8D7'E\\\"~tnn?", fastDateFormat0.getPattern());
      
      int int0 = (-957);
      MockDate mockDate0 = new MockDate(int0, int0, int0);
      assertNotNull(mockDate0);
      assertEquals("Fri Aug 16 00:00:00 GMT 860", mockDate0.toString());
      
      String string1 = fastDateFormat0.format((Date) mockDate0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("Fri Aug 16 00:00:00 GMT 860", mockDate0.toString());
      assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("h#8D7'E\\\"~tnn?", fastDateFormat0.getPattern());
      assertEquals("12#82297E\\\"~tnn?", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test04() {}
//   @Test
//   public void test04()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat0);
//       assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
//       assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
//       
//       String string0 = "";
//       Locale locale0 = Locale.CANADA_FRENCH;
//       assertNotNull(locale0);
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("fr_CA", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("fr", locale0.getLanguage());
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0, locale0);
//       assertNotNull(fastDateFormat1);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertEquals(0, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals("", fastDateFormat1.getPattern());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("fr_CA", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("fr", locale0.getLanguage());
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       
//       boolean boolean0 = fastDateFormat0.equals((Object) fastDateFormat1);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
//       assertEquals(0, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals("", fastDateFormat1.getPattern());
//       assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
//       assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("fr_CA", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("fr", locale0.getLanguage());
//       assertFalse(boolean0);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertNotSame(fastDateFormat0, fastDateFormat1);
//   }

  @Test
  public void test05()  throws Throwable  {
      int int0 = 1;
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' '('EE')' a h'\uC2DC' mm'\uBD84' ss'\uCD08'", fastDateFormat0.getPattern());
      assertEquals(36, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      boolean boolean0 = fastDateFormat0.equals((Object) fastDateFormat0);
      assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' '('EE')' a h'\uC2DC' mm'\uBD84' ss'\uCD08'", fastDateFormat0.getPattern());
      assertEquals(36, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(boolean0);
  }

  @Test
  public void test06() {}
//   @Test
//   public void test06()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
//       assertEquals(49, fastDateFormat0.getMaxLengthEstimate());
//       
//       FastDateFormat fastDateFormat1 = null;
//       // Undeclared exception!
//       try {
//         AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator((Object) fastDateFormat1);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Unknown class: <null>
//          //
//       }
//   }

  @Test
  public void test07() {}
//   @Test
//   public void test07()  throws Throwable  {
//       int int0 = 1;
//       Locale locale0 = Locale.KOREAN;
//       assertNotNull(locale0);
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("ko", locale0.getLanguage());
//       assertEquals("", locale0.getCountry());
//       assertEquals("kor", locale0.getISO3Language());
//       assertEquals("ko", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, locale0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("ko", locale0.getLanguage());
//       assertEquals("", locale0.getCountry());
//       assertEquals("kor", locale0.getISO3Language());
//       assertEquals("ko", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' '('EE')' a h'\uC2DC' mm'\uBD84' ss'\uCD08'", fastDateFormat0.getPattern());
//       assertEquals(36, fastDateFormat0.getMaxLengthEstimate());
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       
//       AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator((Object) mockGregorianCalendar0);
//       assertNotNull(attributedCharacterIterator0);
//       assertEquals(0, attributedCharacterIterator0.getIndex());
//       assertEquals(0, attributedCharacterIterator0.getBeginIndex());
//       assertEquals(30, attributedCharacterIterator0.getRunLimit());
//       assertEquals(30, attributedCharacterIterator0.getEndIndex());
//       assertEquals(0, attributedCharacterIterator0.getRunStart());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("ko", locale0.getLanguage());
//       assertEquals("", locale0.getCountry());
//       assertEquals("kor", locale0.getISO3Language());
//       assertEquals("ko", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62133091200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=32,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' '('EE')' a h'\uC2DC' mm'\uBD84' ss'\uCD08'", fastDateFormat0.getPattern());
//       assertEquals(36, fastDateFormat0.getMaxLengthEstimate());
//   }

  @Test
  public void test08() {}
//   @Test
//   public void test08()  throws Throwable  {
//       int int0 = 10;
//       int int1 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int1);
//       assertNotNull(fastDateFormat0);
//       assertFalse(int1 == int0);
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
//       assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
//       
//       MockDate mockDate0 = new MockDate(int0, int1, int0, int0, int1, int0);
//       assertNotNull(mockDate0);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertEquals("Mon Jan 10 10:00:10 GMT 1910", mockDate0.toString());
//       
//       String string0 = "yy/MM/dd H:mm";
//       StringBuffer stringBuffer0 = new StringBuffer(string0);
//       assertNotNull(stringBuffer0);
//       assertEquals(29, stringBuffer0.capacity());
//       assertEquals(13, stringBuffer0.length());
//       assertEquals("yy/MM/dd H:mm", stringBuffer0.toString());
//       
//       FieldPosition fieldPosition0 = new FieldPosition(int1);
//       assertNotNull(fieldPosition0);
//       assertFalse(int1 == int0);
//       assertEquals("java.text.FieldPosition[field=0,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
//       assertEquals(0, fieldPosition0.getField());
//       assertEquals(0, fieldPosition0.getBeginIndex());
//       assertEquals(0, fieldPosition0.getEndIndex());
//       
//       StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockDate0, stringBuffer0, fieldPosition0);
//       assertNotNull(stringBuffer1);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
//       assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yy/MM/dd H:mmMonday, January 10, 1910", stringBuffer0.toString());
//       assertEquals(37, stringBuffer0.length());
//       assertEquals(60, stringBuffer0.capacity());
//       assertEquals("yy/MM/dd H:mmMonday, January 10, 1910", stringBuffer1.toString());
//       assertEquals(60, stringBuffer1.capacity());
//       assertEquals(37, stringBuffer1.length());
//       assertEquals("Mon Jan 10 10:00:10 GMT 1910", mockDate0.toString());
//       assertEquals("java.text.FieldPosition[field=0,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
//       assertEquals(0, fieldPosition0.getField());
//       assertEquals(0, fieldPosition0.getBeginIndex());
//       assertEquals(0, fieldPosition0.getEndIndex());
//       assertSame(stringBuffer0, stringBuffer1);
//       assertSame(stringBuffer1, stringBuffer0);
//   }

  @Test
  public void test09() {}
//   @Test
//   public void test09()  throws Throwable  {
//       int int0 = 2;
//       int int1 = 2;
//       TimeZone timeZone0 = null;
//       Locale locale0 = Locale.CANADA;
//       assertNotNull(locale0);
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("CA", locale0.getCountry());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int1, timeZone0, locale0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("h:mm:ss a", fastDateFormat0.getPattern());
//       assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("CA", locale0.getCountry());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)fastDateFormat0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("h:mm:ss a", fastDateFormat0.getPattern());
//       assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("CA", locale0.getCountry());
//       
//       String string0 = "<6%XLzPLpe";
//       ZoneInfo zoneInfo1 = (ZoneInfo)TimeZone.getDefault();
//       assertNotNull(zoneInfo1);
//       assertTrue(zoneInfo1.equals((Object)zoneInfo0));
//       assertEquals("GMT", zoneInfo1.getID());
//       assertNotSame(zoneInfo1, zoneInfo0);
//       
//       Locale locale1 = Locale.UK;
//       assertNotNull(locale1);
//       assertFalse(locale1.equals((Object)locale0));
//       assertEquals("GBR", locale1.getISO3Country());
//       assertEquals("en_GB", locale1.toString());
//       assertEquals("GB", locale1.getCountry());
//       assertEquals("", locale1.getVariant());
//       assertEquals("eng", locale1.getISO3Language());
//       assertEquals("en", locale1.getLanguage());
//       assertNotSame(locale1, locale0);
//       
//       String string1 = fastDateFormat0.getPattern();
//       assertNotNull(string1);
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(locale0.equals((Object)locale1));
//       assertEquals("h:mm:ss a", fastDateFormat0.getPattern());
//       assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("h:mm:ss a", string1);
//       assertNotSame(string1, string0);
//       assertNotSame(locale0, locale1);
//       
//       int int2 = 0;
//       FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(int1, int1);
//       assertNotNull(fastDateFormat1);
//       assertFalse(int1 == int2);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertEquals(28, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals("MMM d, yyyy h:mm:ss a", fastDateFormat1.getPattern());
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//   }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "4(!Z[?x1EHfjh_a&Y5+";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: x
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "v";
      int int0 = 419;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(419, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=v,offset=419,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("v", simpleTimeZone0.getID());
      
      Locale locale0 = Locale.forLanguageTag(string0);
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      FastDateFormat fastDateFormat0 = null;
      try {
        fastDateFormat0 = new FastDateFormat(string0, simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: v
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "ZE^w)>w28Gu=%<O";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "t:%`M[5[@>%HD";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "2(8@r`1Vl+cKH44GAlv";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "W7ypmV)-Lif@8A";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: p
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      
      String string0 = "<null>";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "l<iHhQ@ `9/&8";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: l
         //
      }
  }

  @Test
  public void test18() {}
//   @Test
//   public void test18()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat0);
//       assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
//       
//       String string0 = fastDateFormat0.getPattern();
//       assertNotNull(string0);
//       assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
//       assertEquals("M/d/yy h:mm a", string0);
//       
//       String string1 = "iBwOQp9y";
//       assertFalse(string1.equals((Object)string0));
//       assertNotSame(string1, string0);
//       
//       int int0 = 0;
//       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
//       assertNotNull(simpleTimeZone0);
//       assertFalse(string0.equals((Object)string1));
//       assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("java.util.SimpleTimeZone[id=M/d/yy h:mm a,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals("M/d/yy h:mm a", simpleTimeZone0.getID());
//       assertNotSame(string0, string1);
//       
//       Locale locale0 = Locale.FRENCH;
//       assertNotNull(locale0);
//       assertEquals("", locale0.getCountry());
//       assertEquals("fr", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("fr", locale0.toString());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("", locale0.getISO3Country());
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string1, (TimeZone) simpleTimeZone0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: i
//          //
//       }
//   }

  @Test
  public void test19() {}
//   @Test
//   public void test19()  throws Throwable  {
//       String string0 = "zfyp^H<oDb*(";
//       int int0 = 2203;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2203,MONTH=2203,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2203,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=2203,HOUR_OF_DAY=2203,MINUTE=2203,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2203,MONTH=2203,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2203,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=2203,HOUR_OF_DAY=2203,MINUTE=2203,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       Locale locale0 = Locale.CHINA;
//       assertNotNull(locale0);
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("zh_CN", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("CHN", locale0.getISO3Country());
//       
//       FastDateFormat fastDateFormat0 = null;
//       try {
//         fastDateFormat0 = new FastDateFormat(string0, zoneInfo0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: f
//          //
//       }
//   }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "e";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: e
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "cKYsaD";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      int int0 = (-7);
      String string0 = "7b(sRT<gp13)&A(ULW!";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=7b(sRT<gp13)&A(ULW!,offset=-7,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(-7, simpleTimeZone0.getRawOffset());
      assertEquals("7b(sRT<gp13)&A(ULW!", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "\"ymYn&\"S0K9rk-gZ";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Y
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = 2;
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, timeZone0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals("h:mm:ss a", fastDateFormat0.getPattern());
      assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)fastDateFormat0.getTimeZone();
      assertNotNull(zoneInfo0);
      assertEquals("h:mm:ss a", fastDateFormat0.getPattern());
      assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("GMT", zoneInfo0.getID());
      
      String string0 = "<6%XLzPLpe";
      FastDateFormat fastDateFormat1 = null;
      try {
        fastDateFormat1 = new FastDateFormat(string0, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: X
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
      assertNotNull(zoneInfo0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("GMT", zoneInfo0.getID());
      
      String string0 = "}V|8x5sR.Rf";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: V
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = "0/;0S?a.?mjX";
      int int0 = 2971;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals("0/;0S?a.?mjX", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=0/;0S?a.?mjX,offset=2971,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(2971, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: j
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      
      String string0 = "\"RZ2\\%%@8]";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: R
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = "QyP)|!";
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Q
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = "EEEE, MMMM d, yyyy h:mm:ss a z";
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      
      int int0 = 172;
      String string1 = "0Pb,;7<:U";
      assertNotSame(string1, string0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertFalse(string0.equals((Object)string1));
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=EEEE, MMMM d, yyyy h:mm:ss a z,offset=172,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", simpleTimeZone0.getID());
      assertEquals(172, simpleTimeZone0.getRawOffset());
      assertNotSame(string0, string1);
      
      FastDateFormat fastDateFormat0 = null;
      try {
        fastDateFormat0 = new FastDateFormat(string1, simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = "Oo'X?OVsJTP+&d[N/Y\"";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: O
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      String string0 = "Negative valu-s should;notDge po)sibe";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      String string0 = "L#5\\";
      Locale locale0 = null;
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: L
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = "KgpEZqrCM3JqF${";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: g
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      String string0 = "Il7egal pattern component: ";
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
      }
  }

  @Test
  public void test35() {}
//   @Test
//   public void test35()  throws Throwable  {
//       String string0 = ")W/zz9Hzo{";
//       int int0 = 1378;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1378,MONTH=1378,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1378,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1378,MONTH=1378,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1378,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       
//       Locale locale0 = Locale.PRC;
//       assertNotNull(locale0);
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("zh_CN", locale0.toString());
//       assertEquals("CHN", locale0.getISO3Country());
//       
//       FastDateFormat fastDateFormat0 = null;
//       try {
//         fastDateFormat0 = new FastDateFormat(string0, zoneInfo0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: o
//          //
//       }
//   }

  @Test
  public void test36()  throws Throwable  {
      String string0 = "62F$2`JZfi%~&mb8I+M";
      Locale locale0 = null;
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: J
         //
      }
  }

  @Test
  public void test37()  throws Throwable  {
      String string0 = "yD<0-=UaHa_&5";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      
      FastDateFormat fastDateFormat0 = null;
      try {
        fastDateFormat0 = new FastDateFormat(string0, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      String string0 = "Csq}2u4BTsV.4*";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
      }
  }

  @Test
  public void test39()  throws Throwable  {
      int int0 = 0;
      String string0 = "dd/MM/yy H.mm";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("dd/MM/yy H.mm", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=dd/MM/yy H.mm,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      String string1 = "0GB";
      assertNotSame(string1, string0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string1, (TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: B
         //
      }
  }

  @Test
  public void test40()  throws Throwable  {
      String string0 = "y$U}wc!v/Lu";
      String string1 = "dA";
      assertNotSame(string1, string0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertFalse(string0.equals((Object)string1));
      assertEquals("GMT", zoneInfo0.getID());
      assertNotSame(string0, string1);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string1, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
      }
  }

  @Test
  public void test41() {}
//   @Test
//   public void test41()  throws Throwable  {
//       int int0 = 0;
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       int int1 = 0;
//       Locale locale0 = Locale.ENGLISH;
//       assertNotNull(locale0);
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("en", locale0.toString());
//       assertEquals("", locale0.getCountry());
//       assertEquals("eng", locale0.getISO3Language());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int1, (TimeZone) zoneInfo0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
//       assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
//       
//       String string0 = "";
//       int int2 = 0;
//       FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(int2, int1);
//       assertNotNull(fastDateFormat1);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat1.getPattern());
//       assertEquals(49, fastDateFormat1.getMaxLengthEstimate());
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       ZoneInfo zoneInfo1 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertNotNull(zoneInfo1);
//       assertTrue(zoneInfo1.equals((Object)zoneInfo0));
//       assertEquals("GMT", zoneInfo1.getID());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertNotSame(zoneInfo1, zoneInfo0);
//       
//       Date date0 = mockGregorianCalendar0.getTime();
//       assertNotNull(date0);
//       assertEquals("Wed Dec 31 00:00:00 GMT 2", date0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=31,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       
//       int int3 = 0;
//       String string1 = locale0.getDisplayLanguage();
//       assertNotNull(string1);
//       assertFalse(string1.equals((Object)string0));
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("en", locale0.toString());
//       assertEquals("", locale0.getCountry());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("English", string1);
//       assertNotSame(string1, string0);
//       
//       int int4 = 0;
//       FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(int3, int4, locale0);
//       assertNotNull(fastDateFormat2);
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat0));
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("en", locale0.toString());
//       assertEquals("", locale0.getCountry());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals(49, fastDateFormat2.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat2.getPattern());
//       assertNotSame(fastDateFormat2, fastDateFormat1);
//       assertNotSame(fastDateFormat2, fastDateFormat0);
//       
//       String string2 = fastDateFormat2.format((Calendar) mockGregorianCalendar0);
//       assertNotNull(string2);
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat0));
//       assertFalse(string2.equals((Object)string0));
//       assertFalse(string2.equals((Object)string1));
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("en", locale0.toString());
//       assertEquals("", locale0.getCountry());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals(49, fastDateFormat2.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat2.getPattern());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals("Wednesday, December 31, 0002 12:00:00 AM GMT", string2);
//       assertNotSame(fastDateFormat2, fastDateFormat1);
//       assertNotSame(fastDateFormat2, fastDateFormat0);
//       assertNotSame(string2, string0);
//       assertNotSame(string2, string1);
//       
//       FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(int0, locale0);
//       assertNotNull(fastDateFormat3);
//       assertFalse(fastDateFormat3.equals((Object)fastDateFormat2));
//       assertFalse(fastDateFormat3.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat3.equals((Object)fastDateFormat0));
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("en", locale0.toString());
//       assertEquals("", locale0.getCountry());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat3.getPattern());
//       assertEquals(31, fastDateFormat3.getMaxLengthEstimate());
//       assertNotSame(fastDateFormat3, fastDateFormat2);
//       assertNotSame(fastDateFormat3, fastDateFormat1);
//       assertNotSame(fastDateFormat3, fastDateFormat0);
//       
//       ZoneInfo zoneInfo2 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       assertNotNull(zoneInfo2);
//       assertTrue(zoneInfo2.equals((Object)zoneInfo1));
//       assertTrue(zoneInfo2.equals((Object)zoneInfo0));
//       assertFalse(string0.equals((Object)string2));
//       assertFalse(string0.equals((Object)string1));
//       assertEquals("GMT", zoneInfo2.getID());
//       assertNotSame(zoneInfo2, zoneInfo1);
//       assertNotSame(zoneInfo2, zoneInfo0);
//       assertNotSame(string0, string2);
//       assertNotSame(string0, string1);
//       
//       FastDateFormat fastDateFormat4 = FastDateFormat.getTimeInstance(int0);
//       assertNotNull(fastDateFormat4);
//       assertTrue(fastDateFormat4.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat4.equals((Object)fastDateFormat2));
//       assertFalse(fastDateFormat4.equals((Object)fastDateFormat3));
//       assertFalse(fastDateFormat4.equals((Object)fastDateFormat1));
//       assertEquals(17, fastDateFormat4.getMaxLengthEstimate());
//       assertEquals("h:mm:ss a z", fastDateFormat4.getPattern());
//       assertNotSame(fastDateFormat4, fastDateFormat2);
//       assertNotSame(fastDateFormat4, fastDateFormat3);
//       assertNotSame(fastDateFormat4, fastDateFormat1);
//       assertNotSame(fastDateFormat4, fastDateFormat0);
//       
//       Locale locale1 = fastDateFormat1.getLocale();
//       assertNotNull(locale1);
//       assertFalse(locale1.equals((Object)locale0));
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat4));
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat3));
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat2));
//       assertEquals("", locale1.getISO3Language());
//       assertEquals("", locale1.getVariant());
//       assertEquals("", locale1.toString());
//       assertEquals("", locale1.getCountry());
//       assertEquals("", locale1.getISO3Country());
//       assertEquals("", locale1.getLanguage());
//       assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat1.getPattern());
//       assertEquals(49, fastDateFormat1.getMaxLengthEstimate());
//       assertNotSame(locale1, locale0);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertNotSame(fastDateFormat1, fastDateFormat4);
//       assertNotSame(fastDateFormat1, fastDateFormat3);
//       assertNotSame(fastDateFormat1, fastDateFormat2);
//       
//       FastDateFormat fastDateFormat5 = FastDateFormat.getTimeInstance(int0, (TimeZone) zoneInfo2, locale0);
//       assertNotNull(fastDateFormat5);
//       assertFalse(locale0.equals((Object)locale1));
//       assertTrue(zoneInfo2.equals((Object)zoneInfo1));
//       assertTrue(zoneInfo2.equals((Object)zoneInfo0));
//       assertFalse(fastDateFormat5.equals((Object)fastDateFormat4));
//       assertFalse(fastDateFormat5.equals((Object)fastDateFormat3));
//       assertFalse(fastDateFormat5.equals((Object)fastDateFormat2));
//       assertFalse(fastDateFormat5.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat5.equals((Object)fastDateFormat1));
//       assertFalse(string0.equals((Object)string2));
//       assertFalse(string0.equals((Object)string1));
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("en", locale0.toString());
//       assertEquals("", locale0.getCountry());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("GMT", zoneInfo2.getID());
//       assertEquals("h:mm:ss a z", fastDateFormat5.getPattern());
//       assertEquals(17, fastDateFormat5.getMaxLengthEstimate());
//       assertNotSame(locale0, locale1);
//       assertNotSame(zoneInfo2, zoneInfo1);
//       assertNotSame(zoneInfo2, zoneInfo0);
//       assertNotSame(fastDateFormat5, fastDateFormat4);
//       assertNotSame(fastDateFormat5, fastDateFormat3);
//       assertNotSame(fastDateFormat5, fastDateFormat2);
//       assertNotSame(fastDateFormat5, fastDateFormat0);
//       assertNotSame(fastDateFormat5, fastDateFormat1);
//       assertNotSame(string0, string2);
//       assertNotSame(string0, string1);
//       
//       String string3 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
//       assertNotNull(string3);
//       assertTrue(zoneInfo0.equals((Object)zoneInfo2));
//       assertTrue(zoneInfo0.equals((Object)zoneInfo1));
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
//       assertTrue(fastDateFormat0.equals((Object)fastDateFormat4));
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat3));
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat2));
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat5));
//       assertFalse(string3.equals((Object)string0));
//       assertFalse(string3.equals((Object)string1));
//       assertFalse(string3.equals((Object)string2));
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
//       assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals("12:00:00 AM GMT", string3);
//       assertNotSame(zoneInfo0, zoneInfo2);
//       assertNotSame(zoneInfo0, zoneInfo1);
//       assertNotSame(fastDateFormat0, fastDateFormat1);
//       assertNotSame(fastDateFormat0, fastDateFormat3);
//       assertNotSame(fastDateFormat0, fastDateFormat4);
//       assertNotSame(fastDateFormat0, fastDateFormat2);
//       assertNotSame(fastDateFormat0, fastDateFormat5);
//       assertNotSame(string3, string0);
//       assertNotSame(string3, string1);
//       assertNotSame(string3, string2);
//       
//       int int5 = 2745;
//       String string4 = locale0.getDisplayName();
//       assertNotNull(string4);
//       assertFalse(locale0.equals((Object)locale1));
//       assertFalse(string4.equals((Object)string0));
//       assertFalse(string4.equals((Object)string2));
//       assertFalse(string4.equals((Object)string3));
//       assertTrue(string4.equals((Object)string1));
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("en", locale0.toString());
//       assertEquals("", locale0.getCountry());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("English", string4);
//       assertNotSame(locale0, locale1);
//       assertNotSame(string4, string0);
//       assertNotSame(string4, string2);
//       assertNotSame(string4, string3);
//       assertNotSame(string4, string1);
//       
//       int int6 = (-83);
//       ZoneInfo zoneInfo3 = (ZoneInfo)TimeZone.getTimeZone(string2);
//       assertNotNull(zoneInfo3);
//       assertTrue(zoneInfo3.equals((Object)zoneInfo1));
//       assertTrue(zoneInfo3.equals((Object)zoneInfo0));
//       assertTrue(zoneInfo3.equals((Object)zoneInfo2));
//       assertFalse(locale0.equals((Object)locale1));
//       assertFalse(int3 == int6);
//       assertFalse(int3 == int5);
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat4));
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat5));
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat3));
//       assertFalse(string2.equals((Object)string4));
//       assertFalse(string2.equals((Object)string0));
//       assertFalse(string2.equals((Object)string1));
//       assertFalse(string2.equals((Object)string3));
//       assertFalse(int0 == int6);
//       assertFalse(int0 == int5);
//       assertFalse(int4 == int5);
//       assertFalse(int4 == int6);
//       assertEquals("GMT", zoneInfo3.getID());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("en", locale0.toString());
//       assertEquals("", locale0.getCountry());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals(49, fastDateFormat2.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat2.getPattern());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertNotSame(zoneInfo3, zoneInfo2);
//       assertNotSame(zoneInfo3, zoneInfo1);
//       assertNotSame(zoneInfo3, zoneInfo0);
//       assertNotSame(locale0, locale1);
//       assertNotSame(fastDateFormat2, fastDateFormat1);
//       assertNotSame(fastDateFormat2, fastDateFormat4);
//       assertNotSame(fastDateFormat2, fastDateFormat0);
//       assertNotSame(fastDateFormat2, fastDateFormat5);
//       assertNotSame(fastDateFormat2, fastDateFormat3);
//       assertNotSame(string2, string4);
//       assertNotSame(string2, string0);
//       assertNotSame(string2, string1);
//       assertNotSame(string2, string3);
//       
//       ZoneInfo zoneInfo4 = (ZoneInfo)TimeZone.getDefault();
//       assertNotNull(zoneInfo4);
//       assertTrue(zoneInfo4.equals((Object)zoneInfo1));
//       assertTrue(zoneInfo4.equals((Object)zoneInfo3));
//       assertTrue(zoneInfo4.equals((Object)zoneInfo0));
//       assertTrue(zoneInfo4.equals((Object)zoneInfo2));
//       assertEquals("GMT", zoneInfo4.getID());
//       assertNotSame(zoneInfo4, zoneInfo2);
//       assertNotSame(zoneInfo4, zoneInfo1);
//       assertNotSame(zoneInfo4, zoneInfo0);
//       assertNotSame(zoneInfo4, zoneInfo3);
//       
//       FastDateFormat fastDateFormat6 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo4);
//       assertNotNull(fastDateFormat6);
//       assertTrue(zoneInfo4.equals((Object)zoneInfo1));
//       assertTrue(zoneInfo4.equals((Object)zoneInfo3));
//       assertTrue(zoneInfo4.equals((Object)zoneInfo0));
//       assertTrue(zoneInfo4.equals((Object)zoneInfo2));
//       assertFalse(fastDateFormat6.equals((Object)fastDateFormat4));
//       assertFalse(fastDateFormat6.equals((Object)fastDateFormat2));
//       assertFalse(fastDateFormat6.equals((Object)fastDateFormat5));
//       assertFalse(fastDateFormat6.equals((Object)fastDateFormat3));
//       assertFalse(fastDateFormat6.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat6.equals((Object)fastDateFormat0));
//       assertFalse(string0.equals((Object)string2));
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string0.equals((Object)string3));
//       assertFalse(string0.equals((Object)string4));
//       assertEquals("GMT", zoneInfo4.getID());
//       assertEquals("", fastDateFormat6.getPattern());
//       assertEquals(0, fastDateFormat6.getMaxLengthEstimate());
//       assertNotSame(zoneInfo4, zoneInfo2);
//       assertNotSame(zoneInfo4, zoneInfo1);
//       assertNotSame(zoneInfo4, zoneInfo0);
//       assertNotSame(zoneInfo4, zoneInfo3);
//       assertNotSame(fastDateFormat6, fastDateFormat4);
//       assertNotSame(fastDateFormat6, fastDateFormat2);
//       assertNotSame(fastDateFormat6, fastDateFormat5);
//       assertNotSame(fastDateFormat6, fastDateFormat3);
//       assertNotSame(fastDateFormat6, fastDateFormat1);
//       assertNotSame(fastDateFormat6, fastDateFormat0);
//       assertNotSame(string0, string2);
//       assertNotSame(string0, string1);
//       assertNotSame(string0, string3);
//       assertNotSame(string0, string4);
//       
//       int int7 = 0;
//       MockDate mockDate0 = new MockDate(int5, int7, int7);
//       assertNotNull(mockDate0);
//       assertFalse(int7 == int5);
//       assertFalse(int7 == int6);
//       assertFalse(int5 == int6);
//       assertFalse(int5 == int0);
//       assertFalse(int5 == int1);
//       assertFalse(int5 == int4);
//       assertFalse(int5 == int7);
//       assertFalse(int5 == int2);
//       assertFalse(int5 == int3);
//       assertEquals("Tue Dec 31 00:00:00 GMT 4644", mockDate0.toString());
//   }

  @Test
  public void test42() {}
//   @Test
//   public void test42()  throws Throwable  {
//       int int0 = 0;
//       Locale locale0 = Locale.SIMPLIFIED_CHINESE;
//       assertNotNull(locale0);
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("CHN", locale0.getISO3Country());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("zh_CN", locale0.toString());
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, (TimeZone) zoneInfo0, locale0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("CHN", locale0.getISO3Country());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("zh_CN", locale0.toString());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat0.getPattern());
//   }

  @Test
  public void test43()  throws Throwable  {
      String string0 = "Z,;%G(W -E";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
      //  // Unstable assertion: assertNotNull(fastDateFormat0);
      //  // Unstable assertion: assertEquals("Z,;%G(W -E", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
      
      int int0 = fastDateFormat0.hashCode();
      //  // Unstable assertion: assertEquals("Z,;%G(W -E", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals(1866763135, int0);
  }

  @Test
  public void test44()  throws Throwable  {
      int int0 = 1883;
      String string0 = "Z,;%G(W -E";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 1883
         //
      }
  }

  @Test
  public void test45()  throws Throwable  {
      int int0 = 0;
      String string0 = "T\\OeZ=|@Q+i8+Gr@RT";
      int int1 = 1;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0, int1, int1, int0, int0, int1, int0, int0, int0, int1);
      assertNotNull(simpleTimeZone0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=T\\OeZ=|@Q+i8+Gr@RT,offset=0,dstSavings=1,useDaylight=false,startYear=0,startMode=1,startMonth=1,startDay=1,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=1,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("T\\OeZ=|@Q+i8+Gr@RT", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, (TimeZone) simpleTimeZone0, locale0);
      assertNotNull(fastDateFormat0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("HH:mm' Uhr 'z", fastDateFormat0.getPattern());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=T\\OeZ=|@Q+i8+Gr@RT,offset=0,dstSavings=1,useDaylight=false,startYear=0,startMode=1,startMonth=1,startDay=1,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=1,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("T\\OeZ=|@Q+i8+Gr@RT", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      
      Long long0 = new Long((long) int0);
      assertFalse(int0 == int1);
      assertEquals(0L, (long)long0);
      
      AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator((Object) long0);
      assertNotNull(attributedCharacterIterator0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("HH:mm' Uhr 'z", fastDateFormat0.getPattern());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=T\\OeZ=|@Q+i8+Gr@RT,offset=0,dstSavings=1,useDaylight=false,startYear=0,startMode=1,startMonth=1,startDay=1,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=1,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("T\\OeZ=|@Q+i8+Gr@RT", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(19, attributedCharacterIterator0.getEndIndex());
      assertEquals(0, attributedCharacterIterator0.getBeginIndex());
      assertEquals(19, attributedCharacterIterator0.getRunLimit());
      assertEquals(0, attributedCharacterIterator0.getRunStart());
      assertEquals(0, attributedCharacterIterator0.getIndex());
  }

  @Test
  public void test46()  throws Throwable  {
      String string0 = "T\\OeZ=|@Q+i8+Gr@RT";
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
      }
  }

  @Test
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = null;
      String string0 = "kH%=";
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, timeZone0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("kH%=", fastDateFormat0.getPattern());
      assertEquals(10, fastDateFormat0.getMaxLengthEstimate());
      
      long long0 = 0L;
      String string1 = fastDateFormat0.format(long0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("kH%=", fastDateFormat0.getPattern());
      assertEquals(10, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("240%=", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      try {
        Object object0 = fastDateFormat0.parseObject(string1);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Format.parseObject(String) failed
         //
      }
  }

  @Test
  public void test48() {}
//   @Test
//   public void test48()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat0);
//       assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
//       assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
//       
//       String string0 = fastDateFormat0.getPattern();
//       assertNotNull(string0);
//       assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
//       assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("M/d/yy h:mm a", string0);
//       
//       int int0 = 0;
//       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
//       assertNotNull(simpleTimeZone0);
//       assertEquals("M/d/yy h:mm a", simpleTimeZone0.getID());
//       assertEquals("java.util.SimpleTimeZone[id=M/d/yy h:mm a,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
//       assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(int0, int0, (TimeZone) simpleTimeZone0);
//       assertNotNull(fastDateFormat1);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
//       assertEquals("M/d/yy h:mm a", simpleTimeZone0.getID());
//       assertEquals("java.util.SimpleTimeZone[id=M/d/yy h:mm a,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals(55, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat1.getPattern());
//       assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
//       assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertNotSame(fastDateFormat0, fastDateFormat1);
//   }

  @Test
  public void test49() {}
//   @Test
//   public void test49()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat0);
//       assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
//       assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
//       
//       String string0 = fastDateFormat0.toString();
//       assertNotNull(string0);
//       assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
//       assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("FastDateFormat[M/d/yy h:mm a]", string0);
//   }

  @Test
  public void test50()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
      
      int int1 = fastDateFormat0.getMaxLengthEstimate();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
      assertEquals(31, int1);
  }

  @Test
  public void test51() {}
//   @Test
//   public void test51()  throws Throwable  {
//       int int0 = 1878;
//       String string0 = "Z,;%G(W -E";
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("Z,;%G(W -E", fastDateFormat0.getPattern());
//       assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1878,MONTH=1878,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1878,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       
//       String string1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
//       assertNotNull(string1);
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=2197497600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2039,MONTH=7,WEEK_OF_YEAR=35,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=233,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("Z,;%G(W -E", fastDateFormat0.getPattern());
//       assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("+0000,;%AD(4 -Sun", string1);
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       
//       String string2 = "q}j,+mdJe|&~Tq<;p$$p";
//       assertFalse(string2.equals((Object)string1));
//       assertNotSame(string2, string1);
//       assertNotSame(string2, string0);
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string2);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: q
//          //
//       }
//   }

  @Test
  public void test52() {}
//   @Test
//   public void test52()  throws Throwable  {
//       int int0 = 0;
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       int int1 = 0;
//       Locale locale0 = Locale.ENGLISH;
//       assertNotNull(locale0);
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("en", locale0.toString());
//       assertEquals("", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getISO3Country());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int1, (TimeZone) zoneInfo0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
//       assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
//       
//       Locale locale1 = Locale.ITALY;
//       assertNotNull(locale1);
//       assertFalse(locale1.equals((Object)locale0));
//       assertEquals("IT", locale1.getCountry());
//       assertEquals("it", locale1.getLanguage());
//       assertEquals("", locale1.getVariant());
//       assertEquals("ITA", locale1.getISO3Country());
//       assertEquals("it_IT", locale1.toString());
//       assertEquals("ita", locale1.getISO3Language());
//       assertNotSame(locale1, locale0);
//       
//       String string0 = "";
//       int int2 = 0;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat1);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertEquals("M/d/yy h:mm a", fastDateFormat1.getPattern());
//       assertEquals(21, fastDateFormat1.getMaxLengthEstimate());
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       
//       ZoneInfo zoneInfo1 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertNotNull(zoneInfo1);
//       assertTrue(zoneInfo1.equals((Object)zoneInfo0));
//       assertEquals("GMT", zoneInfo1.getID());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertNotSame(zoneInfo1, zoneInfo0);
//       
//       Date date0 = mockGregorianCalendar0.getTime();
//       assertNotNull(date0);
//       assertEquals("Wed Dec 31 00:00:00 GMT 2", date0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=31,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       
//       Locale locale2 = Locale.SIMPLIFIED_CHINESE;
//       assertNotNull(locale2);
//       assertFalse(locale2.equals((Object)locale0));
//       assertFalse(locale2.equals((Object)locale1));
//       assertEquals("CN", locale2.getCountry());
//       assertEquals("zh_CN", locale2.toString());
//       assertEquals("CHN", locale2.getISO3Country());
//       assertEquals("zho", locale2.getISO3Language());
//       assertEquals("", locale2.getVariant());
//       assertEquals("zh", locale2.getLanguage());
//       assertNotSame(locale2, locale0);
//       assertNotSame(locale2, locale1);
//       
//       int int3 = 0;
//       String string1 = locale1.getDisplayLanguage();
//       assertNotNull(string1);
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(locale1.equals((Object)locale0));
//       assertFalse(locale1.equals((Object)locale2));
//       assertEquals("IT", locale1.getCountry());
//       assertEquals("it", locale1.getLanguage());
//       assertEquals("", locale1.getVariant());
//       assertEquals("ITA", locale1.getISO3Country());
//       assertEquals("it_IT", locale1.toString());
//       assertEquals("ita", locale1.getISO3Language());
//       assertEquals("Italian", string1);
//       assertNotSame(string1, string0);
//       assertNotSame(locale1, locale0);
//       assertNotSame(locale1, locale2);
//       
//       int int4 = 0;
//       FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(int3, int4, locale2);
//       assertNotNull(fastDateFormat2);
//       assertFalse(locale2.equals((Object)locale0));
//       assertFalse(locale2.equals((Object)locale1));
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat0));
//       assertEquals("CN", locale2.getCountry());
//       assertEquals("zh_CN", locale2.toString());
//       assertEquals("CHN", locale2.getISO3Country());
//       assertEquals("zho", locale2.getISO3Language());
//       assertEquals("", locale2.getVariant());
//       assertEquals("zh", locale2.getLanguage());
//       assertEquals(33, fastDateFormat2.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat2.getPattern());
//       assertNotSame(locale2, locale0);
//       assertNotSame(locale2, locale1);
//       assertNotSame(fastDateFormat2, fastDateFormat1);
//       assertNotSame(fastDateFormat2, fastDateFormat0);
//       
//       String string2 = fastDateFormat2.format((Calendar) mockGregorianCalendar0);
//       assertNotNull(string2);
//       assertFalse(string2.equals((Object)string1));
//       assertFalse(string2.equals((Object)string0));
//       assertFalse(locale2.equals((Object)locale0));
//       assertFalse(locale2.equals((Object)locale1));
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat0));
//       assertEquals("CN", locale2.getCountry());
//       assertEquals("zh_CN", locale2.toString());
//       assertEquals("CHN", locale2.getISO3Country());
//       assertEquals("zho", locale2.getISO3Language());
//       assertEquals("", locale2.getVariant());
//       assertEquals("zh", locale2.getLanguage());
//       assertEquals(33, fastDateFormat2.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat2.getPattern());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("0002\u5E7412\u670831\u65E5 \u661F\u671F\u4E09 \u4E0A\u534812\u65F600\u520600\u79D2 GMT", string2);
//       assertNotSame(string2, string1);
//       assertNotSame(string2, string0);
//       assertNotSame(locale2, locale0);
//       assertNotSame(locale2, locale1);
//       assertNotSame(fastDateFormat2, fastDateFormat1);
//       assertNotSame(fastDateFormat2, fastDateFormat0);
//       
//       FastDateFormat fastDateFormat3 = FastDateFormat.getTimeInstance(int3, locale2);
//       assertNotNull(fastDateFormat3);
//       assertFalse(locale2.equals((Object)locale0));
//       assertFalse(locale2.equals((Object)locale1));
//       assertFalse(fastDateFormat3.equals((Object)fastDateFormat2));
//       assertFalse(fastDateFormat3.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat3.equals((Object)fastDateFormat1));
//       assertEquals("CN", locale2.getCountry());
//       assertEquals("zh_CN", locale2.toString());
//       assertEquals("CHN", locale2.getISO3Country());
//       assertEquals("zho", locale2.getISO3Language());
//       assertEquals("", locale2.getVariant());
//       assertEquals("zh", locale2.getLanguage());
//       assertEquals("ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat3.getPattern());
//       assertEquals(15, fastDateFormat3.getMaxLengthEstimate());
//       assertNotSame(locale2, locale0);
//       assertNotSame(locale2, locale1);
//       assertNotSame(fastDateFormat3, fastDateFormat2);
//       assertNotSame(fastDateFormat3, fastDateFormat0);
//       assertNotSame(fastDateFormat3, fastDateFormat1);
//       
//       Locale locale3 = Locale.forLanguageTag(string0);
//       assertNotNull(locale3);
//       assertFalse(locale3.equals((Object)locale1));
//       assertFalse(locale3.equals((Object)locale2));
//       assertFalse(locale3.equals((Object)locale0));
//       assertFalse(string0.equals((Object)string2));
//       assertFalse(string0.equals((Object)string1));
//       assertEquals("", locale3.getCountry());
//       assertEquals("", locale3.getISO3Language());
//       assertEquals("", locale3.getLanguage());
//       assertEquals("", locale3.getVariant());
//       assertEquals("", locale3.toString());
//       assertEquals("", locale3.getISO3Country());
//       assertNotSame(locale3, locale1);
//       assertNotSame(locale3, locale2);
//       assertNotSame(locale3, locale0);
//       assertNotSame(string0, string2);
//       assertNotSame(string0, string1);
//       
//       FastDateFormat fastDateFormat4 = FastDateFormat.getDateInstance(int0, locale3);
//       assertNotNull(fastDateFormat4);
//       assertFalse(fastDateFormat4.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat4.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat4.equals((Object)fastDateFormat2));
//       assertFalse(fastDateFormat4.equals((Object)fastDateFormat3));
//       assertFalse(locale3.equals((Object)locale1));
//       assertFalse(locale3.equals((Object)locale2));
//       assertFalse(locale3.equals((Object)locale0));
//       assertFalse(string0.equals((Object)string2));
//       assertFalse(string0.equals((Object)string1));
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat4.getPattern());
//       assertEquals(31, fastDateFormat4.getMaxLengthEstimate());
//       assertEquals("", locale3.getCountry());
//       assertEquals("", locale3.getISO3Language());
//       assertEquals("", locale3.getLanguage());
//       assertEquals("", locale3.getVariant());
//       assertEquals("", locale3.toString());
//       assertEquals("", locale3.getISO3Country());
//       assertNotSame(fastDateFormat4, fastDateFormat1);
//       assertNotSame(fastDateFormat4, fastDateFormat0);
//       assertNotSame(fastDateFormat4, fastDateFormat2);
//       assertNotSame(fastDateFormat4, fastDateFormat3);
//       assertNotSame(locale3, locale1);
//       assertNotSame(locale3, locale2);
//       assertNotSame(locale3, locale0);
//       assertNotSame(string0, string2);
//       assertNotSame(string0, string1);
//       
//       ZoneInfo zoneInfo2 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       assertNotNull(zoneInfo2);
//       assertFalse(string0.equals((Object)string2));
//       assertFalse(string0.equals((Object)string1));
//       assertTrue(zoneInfo2.equals((Object)zoneInfo0));
//       assertTrue(zoneInfo2.equals((Object)zoneInfo1));
//       assertEquals("GMT", zoneInfo2.getID());
//       assertNotSame(string0, string2);
//       assertNotSame(string0, string1);
//       assertNotSame(zoneInfo2, zoneInfo1);
//       assertNotSame(zoneInfo2, zoneInfo0);
//       
//       FastDateFormat fastDateFormat5 = FastDateFormat.getTimeInstance(int0);
//       assertNotNull(fastDateFormat5);
//       assertFalse(fastDateFormat5.equals((Object)fastDateFormat4));
//       assertFalse(fastDateFormat5.equals((Object)fastDateFormat2));
//       assertFalse(fastDateFormat5.equals((Object)fastDateFormat3));
//       assertFalse(fastDateFormat5.equals((Object)fastDateFormat1));
//       assertTrue(fastDateFormat5.equals((Object)fastDateFormat0));
//       assertEquals("h:mm:ss a z", fastDateFormat5.getPattern());
//       assertEquals(17, fastDateFormat5.getMaxLengthEstimate());
//       assertNotSame(fastDateFormat5, fastDateFormat4);
//       assertNotSame(fastDateFormat5, fastDateFormat2);
//       assertNotSame(fastDateFormat5, fastDateFormat3);
//       assertNotSame(fastDateFormat5, fastDateFormat1);
//       assertNotSame(fastDateFormat5, fastDateFormat0);
//       
//       Locale locale4 = fastDateFormat1.getLocale();
//       assertNotNull(locale4);
//       assertFalse(locale4.equals((Object)locale0));
//       assertFalse(locale4.equals((Object)locale1));
//       assertFalse(locale4.equals((Object)locale2));
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat4));
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat2));
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat5));
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat3));
//       assertEquals("", locale4.getCountry());
//       assertEquals("", locale4.getVariant());
//       assertEquals("", locale4.toString());
//       assertEquals("", locale4.getISO3Country());
//       assertEquals("", locale4.getISO3Language());
//       assertEquals("", locale4.getLanguage());
//       assertEquals("M/d/yy h:mm a", fastDateFormat1.getPattern());
//       assertEquals(21, fastDateFormat1.getMaxLengthEstimate());
//       assertNotSame(locale4, locale0);
//       assertSame(locale4, locale3);
//       assertNotSame(locale4, locale1);
//       assertNotSame(locale4, locale2);
//       assertNotSame(fastDateFormat1, fastDateFormat4);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertNotSame(fastDateFormat1, fastDateFormat2);
//       assertNotSame(fastDateFormat1, fastDateFormat5);
//       assertNotSame(fastDateFormat1, fastDateFormat3);
//       
//       FastDateFormat fastDateFormat6 = FastDateFormat.getTimeInstance(int0, (TimeZone) zoneInfo2, locale3);
//       assertNotNull(fastDateFormat6);
//       assertFalse(locale3.equals((Object)locale1));
//       assertFalse(locale3.equals((Object)locale2));
//       assertFalse(locale3.equals((Object)locale0));
//       assertFalse(string0.equals((Object)string2));
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(fastDateFormat6.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat6.equals((Object)fastDateFormat3));
//       assertFalse(fastDateFormat6.equals((Object)fastDateFormat2));
//       assertTrue(fastDateFormat6.equals((Object)fastDateFormat5));
//       assertTrue(fastDateFormat6.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat6.equals((Object)fastDateFormat4));
//       assertTrue(zoneInfo2.equals((Object)zoneInfo0));
//       assertTrue(zoneInfo2.equals((Object)zoneInfo1));
//       assertEquals("", locale3.getCountry());
//       assertEquals("", locale3.getISO3Language());
//       assertEquals("", locale3.getLanguage());
//       assertEquals("", locale3.getVariant());
//       assertEquals("", locale3.toString());
//       assertEquals("", locale3.getISO3Country());
//       assertEquals("h:mm:ss a z", fastDateFormat6.getPattern());
//       assertEquals(17, fastDateFormat6.getMaxLengthEstimate());
//       assertEquals("GMT", zoneInfo2.getID());
//       assertSame(locale3, locale4);
//       assertNotSame(locale3, locale1);
//       assertNotSame(locale3, locale2);
//       assertNotSame(locale3, locale0);
//       assertNotSame(string0, string2);
//       assertNotSame(string0, string1);
//       assertNotSame(fastDateFormat6, fastDateFormat1);
//       assertNotSame(fastDateFormat6, fastDateFormat3);
//       assertNotSame(fastDateFormat6, fastDateFormat5);
//       assertNotSame(fastDateFormat6, fastDateFormat2);
//       assertNotSame(fastDateFormat6, fastDateFormat0);
//       assertNotSame(fastDateFormat6, fastDateFormat4);
//       assertNotSame(zoneInfo2, zoneInfo1);
//       assertNotSame(zoneInfo2, zoneInfo0);
//       
//       String string3 = fastDateFormat1.format((Calendar) mockGregorianCalendar0);
//       assertNotNull(string3);
//       assertFalse(string3.equals((Object)string1));
//       assertFalse(string3.equals((Object)string0));
//       assertFalse(string3.equals((Object)string2));
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat4));
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat2));
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat5));
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat3));
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat6));
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("M/d/yy h:mm a", fastDateFormat1.getPattern());
//       assertEquals(21, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals("12/31/02 12:00 AM", string3);
//       assertNotSame(string3, string1);
//       assertNotSame(string3, string0);
//       assertNotSame(string3, string2);
//       assertNotSame(fastDateFormat1, fastDateFormat4);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertNotSame(fastDateFormat1, fastDateFormat2);
//       assertNotSame(fastDateFormat1, fastDateFormat5);
//       assertNotSame(fastDateFormat1, fastDateFormat3);
//       assertNotSame(fastDateFormat1, fastDateFormat6);
//       
//       int int5 = 2745;
//       String string4 = locale3.getDisplayName();
//       assertNotNull(string4);
//       assertFalse(string4.equals((Object)string2));
//       assertFalse(string4.equals((Object)string3));
//       assertFalse(string4.equals((Object)string1));
//       assertFalse(locale3.equals((Object)locale1));
//       assertFalse(locale3.equals((Object)locale2));
//       assertFalse(locale3.equals((Object)locale0));
//       assertFalse(string0.equals((Object)string2));
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string0.equals((Object)string3));
//       assertEquals("", locale3.getCountry());
//       assertEquals("", locale3.getISO3Language());
//       assertEquals("", locale3.getLanguage());
//       assertEquals("", locale3.getVariant());
//       assertEquals("", locale3.toString());
//       assertEquals("", locale3.getISO3Country());
//       assertEquals("", string4);
//       assertNotSame(string4, string2);
//       assertNotSame(string4, string3);
//       assertSame(string4, string0);
//       assertNotSame(string4, string1);
//       assertSame(locale3, locale4);
//       assertNotSame(locale3, locale1);
//       assertNotSame(locale3, locale2);
//       assertNotSame(locale3, locale0);
//       assertNotSame(string0, string2);
//       assertSame(string0, string4);
//       assertNotSame(string0, string1);
//       assertNotSame(string0, string3);
//       
//       int int6 = (-83);
//       ZoneInfo zoneInfo3 = (ZoneInfo)TimeZone.getTimeZone(string2);
//       assertNotNull(zoneInfo3);
//       assertFalse(string2.equals((Object)string3));
//       assertFalse(string2.equals((Object)string4));
//       assertFalse(string2.equals((Object)string1));
//       assertFalse(string2.equals((Object)string0));
//       assertFalse(int4 == int6);
//       assertFalse(int4 == int5);
//       assertFalse(locale2.equals((Object)locale3));
//       assertFalse(locale2.equals((Object)locale4));
//       assertFalse(locale2.equals((Object)locale0));
//       assertFalse(locale2.equals((Object)locale1));
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat5));
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat4));
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat6));
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat3));
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat0));
//       assertFalse(int3 == int6);
//       assertFalse(int3 == int5);
//       assertTrue(zoneInfo3.equals((Object)zoneInfo2));
//       assertTrue(zoneInfo3.equals((Object)zoneInfo1));
//       assertTrue(zoneInfo3.equals((Object)zoneInfo0));
//       assertFalse(int0 == int6);
//       assertFalse(int0 == int5);
//       assertEquals("CN", locale2.getCountry());
//       assertEquals("zh_CN", locale2.toString());
//       assertEquals("CHN", locale2.getISO3Country());
//       assertEquals("zho", locale2.getISO3Language());
//       assertEquals("", locale2.getVariant());
//       assertEquals("zh", locale2.getLanguage());
//       assertEquals(33, fastDateFormat2.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat2.getPattern());
//       assertEquals("GMT", zoneInfo3.getID());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertNotSame(string2, string3);
//       assertNotSame(string2, string4);
//       assertNotSame(string2, string1);
//       assertNotSame(string2, string0);
//       assertNotSame(locale2, locale3);
//       assertNotSame(locale2, locale4);
//       assertNotSame(locale2, locale0);
//       assertNotSame(locale2, locale1);
//       assertNotSame(fastDateFormat2, fastDateFormat1);
//       assertNotSame(fastDateFormat2, fastDateFormat5);
//       assertNotSame(fastDateFormat2, fastDateFormat4);
//       assertNotSame(fastDateFormat2, fastDateFormat6);
//       assertNotSame(fastDateFormat2, fastDateFormat3);
//       assertNotSame(fastDateFormat2, fastDateFormat0);
//       assertNotSame(zoneInfo3, zoneInfo2);
//       assertNotSame(zoneInfo3, zoneInfo0);
//       assertNotSame(zoneInfo3, zoneInfo1);
//       
//       ZoneInfo zoneInfo4 = (ZoneInfo)TimeZone.getDefault();
//       assertNotNull(zoneInfo4);
//       assertTrue(zoneInfo4.equals((Object)zoneInfo3));
//       assertTrue(zoneInfo4.equals((Object)zoneInfo1));
//       assertTrue(zoneInfo4.equals((Object)zoneInfo2));
//       assertTrue(zoneInfo4.equals((Object)zoneInfo0));
//       assertEquals("GMT", zoneInfo4.getID());
//       assertNotSame(zoneInfo4, zoneInfo1);
//       assertNotSame(zoneInfo4, zoneInfo0);
//       assertNotSame(zoneInfo4, zoneInfo3);
//       assertNotSame(zoneInfo4, zoneInfo2);
//       
//       FastDateFormat fastDateFormat7 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo4);
//       assertNotNull(fastDateFormat7);
//       assertTrue(zoneInfo4.equals((Object)zoneInfo3));
//       assertTrue(zoneInfo4.equals((Object)zoneInfo1));
//       assertTrue(zoneInfo4.equals((Object)zoneInfo2));
//       assertTrue(zoneInfo4.equals((Object)zoneInfo0));
//       assertFalse(string0.equals((Object)string2));
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string0.equals((Object)string3));
//       assertFalse(fastDateFormat7.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat7.equals((Object)fastDateFormat2));
//       assertFalse(fastDateFormat7.equals((Object)fastDateFormat3));
//       assertFalse(fastDateFormat7.equals((Object)fastDateFormat5));
//       assertFalse(fastDateFormat7.equals((Object)fastDateFormat4));
//       assertFalse(fastDateFormat7.equals((Object)fastDateFormat6));
//       assertFalse(fastDateFormat7.equals((Object)fastDateFormat1));
//       assertEquals("GMT", zoneInfo4.getID());
//       assertEquals("", fastDateFormat7.getPattern());
//       assertEquals(0, fastDateFormat7.getMaxLengthEstimate());
//       assertNotSame(zoneInfo4, zoneInfo1);
//       assertNotSame(zoneInfo4, zoneInfo0);
//       assertNotSame(zoneInfo4, zoneInfo3);
//       assertNotSame(zoneInfo4, zoneInfo2);
//       assertNotSame(string0, string2);
//       assertSame(string0, string4);
//       assertNotSame(string0, string1);
//       assertNotSame(string0, string3);
//       assertNotSame(fastDateFormat7, fastDateFormat0);
//       assertNotSame(fastDateFormat7, fastDateFormat2);
//       assertNotSame(fastDateFormat7, fastDateFormat3);
//       assertNotSame(fastDateFormat7, fastDateFormat5);
//       assertNotSame(fastDateFormat7, fastDateFormat4);
//       assertNotSame(fastDateFormat7, fastDateFormat6);
//       assertNotSame(fastDateFormat7, fastDateFormat1);
//       
//       int int7 = 0;
//       MockDate mockDate0 = new MockDate(int5, int7, int7);
//       assertNotNull(mockDate0);
//       assertFalse(int7 == int5);
//       assertFalse(int7 == int6);
//       assertFalse(int5 == int2);
//       assertFalse(int5 == int0);
//       assertFalse(int5 == int1);
//       assertFalse(int5 == int6);
//       assertFalse(int5 == int3);
//       assertFalse(int5 == int4);
//       assertFalse(int5 == int7);
//       assertEquals("Tue Dec 31 00:00:00 GMT 4644", mockDate0.toString());
//       
//       boolean boolean0 = fastDateFormat4.equals((Object) mockDate0);
//       assertFalse(fastDateFormat4.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat4.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat4.equals((Object)fastDateFormat5));
//       assertFalse(fastDateFormat4.equals((Object)fastDateFormat2));
//       assertFalse(fastDateFormat4.equals((Object)fastDateFormat7));
//       assertFalse(fastDateFormat4.equals((Object)fastDateFormat6));
//       assertFalse(fastDateFormat4.equals((Object)fastDateFormat3));
//       assertFalse(locale3.equals((Object)locale1));
//       assertFalse(locale3.equals((Object)locale2));
//       assertFalse(locale3.equals((Object)locale0));
//       assertFalse(string0.equals((Object)string2));
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string0.equals((Object)string3));
//       assertFalse(int7 == int5);
//       assertFalse(int7 == int6);
//       assertFalse(int5 == int2);
//       assertFalse(int5 == int0);
//       assertFalse(int5 == int1);
//       assertFalse(int5 == int6);
//       assertFalse(int5 == int3);
//       assertFalse(int5 == int4);
//       assertFalse(int5 == int7);
//       assertFalse(int0 == int6);
//       assertFalse(int0 == int5);
//       assertEquals("Tue Dec 31 00:00:00 GMT 4644", mockDate0.toString());
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat4.getPattern());
//       assertEquals(31, fastDateFormat4.getMaxLengthEstimate());
//       assertEquals("", locale3.getCountry());
//       assertEquals("", locale3.getISO3Language());
//       assertEquals("", locale3.getLanguage());
//       assertEquals("", locale3.getVariant());
//       assertEquals("", locale3.toString());
//       assertEquals("", locale3.getISO3Country());
//       assertFalse(boolean0);
//       assertNotSame(fastDateFormat4, fastDateFormat1);
//       assertNotSame(fastDateFormat4, fastDateFormat0);
//       assertNotSame(fastDateFormat4, fastDateFormat5);
//       assertNotSame(fastDateFormat4, fastDateFormat2);
//       assertNotSame(fastDateFormat4, fastDateFormat7);
//       assertNotSame(fastDateFormat4, fastDateFormat6);
//       assertNotSame(fastDateFormat4, fastDateFormat3);
//       assertSame(locale3, locale4);
//       assertNotSame(locale3, locale1);
//       assertNotSame(locale3, locale2);
//       assertNotSame(locale3, locale0);
//       assertNotSame(string0, string2);
//       assertSame(string0, string4);
//       assertNotSame(string0, string1);
//       assertNotSame(string0, string3);
//   }

  @Test
  public void test53() {}
//   @Test
//   public void test53()  throws Throwable  {
//       int int0 = 0;
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       int int1 = 0;
//       Locale locale0 = Locale.ENGLISH;
//       assertNotNull(locale0);
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("en", locale0.toString());
//       assertEquals("", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int1, (TimeZone) zoneInfo0, locale0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
//       assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("en", locale0.toString());
//       assertEquals("", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       Locale locale1 = Locale.ITALY;
//       assertNotNull(locale1);
//       assertFalse(locale1.equals((Object)locale0));
//       assertEquals("it_IT", locale1.toString());
//       assertEquals("IT", locale1.getCountry());
//       assertEquals("ITA", locale1.getISO3Country());
//       assertEquals("it", locale1.getLanguage());
//       assertEquals("ita", locale1.getISO3Language());
//       assertEquals("", locale1.getVariant());
//       assertNotSame(locale1, locale0);
//       
//       String string0 = "";
//       int int2 = 0;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat1);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertEquals(21, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals("M/d/yy h:mm a", fastDateFormat1.getPattern());
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       
//       ZoneInfo zoneInfo1 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertNotNull(zoneInfo1);
//       assertTrue(zoneInfo1.equals((Object)zoneInfo0));
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("GMT", zoneInfo1.getID());
//       assertNotSame(zoneInfo1, zoneInfo0);
//       
//       Date date0 = mockGregorianCalendar0.getTime();
//       assertNotNull(date0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=31,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("Wed Dec 31 00:00:00 GMT 2", date0.toString());
//       
//       Locale locale2 = Locale.SIMPLIFIED_CHINESE;
//       assertNotNull(locale2);
//       assertFalse(locale2.equals((Object)locale0));
//       assertFalse(locale2.equals((Object)locale1));
//       assertEquals("zho", locale2.getISO3Language());
//       assertEquals("CN", locale2.getCountry());
//       assertEquals("zh", locale2.getLanguage());
//       assertEquals("zh_CN", locale2.toString());
//       assertEquals("", locale2.getVariant());
//       assertEquals("CHN", locale2.getISO3Country());
//       assertNotSame(locale2, locale0);
//       assertNotSame(locale2, locale1);
//       
//       int int3 = 0;
//       String string1 = locale1.getDisplayLanguage();
//       assertNotNull(string1);
//       assertFalse(locale1.equals((Object)locale0));
//       assertFalse(locale1.equals((Object)locale2));
//       assertFalse(string1.equals((Object)string0));
//       assertEquals("it_IT", locale1.toString());
//       assertEquals("IT", locale1.getCountry());
//       assertEquals("ITA", locale1.getISO3Country());
//       assertEquals("it", locale1.getLanguage());
//       assertEquals("ita", locale1.getISO3Language());
//       assertEquals("", locale1.getVariant());
//       assertEquals("Italian", string1);
//       assertNotSame(locale1, locale0);
//       assertNotSame(locale1, locale2);
//       assertNotSame(string1, string0);
//       
//       int int4 = 0;
//       FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(int3, int4, locale2);
//       assertNotNull(fastDateFormat2);
//       assertFalse(locale2.equals((Object)locale0));
//       assertFalse(locale2.equals((Object)locale1));
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat0));
//       assertEquals("zho", locale2.getISO3Language());
//       assertEquals("CN", locale2.getCountry());
//       assertEquals("zh", locale2.getLanguage());
//       assertEquals("zh_CN", locale2.toString());
//       assertEquals("", locale2.getVariant());
//       assertEquals("CHN", locale2.getISO3Country());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat2.getPattern());
//       assertEquals(33, fastDateFormat2.getMaxLengthEstimate());
//       assertNotSame(locale2, locale0);
//       assertNotSame(locale2, locale1);
//       assertNotSame(fastDateFormat2, fastDateFormat1);
//       assertNotSame(fastDateFormat2, fastDateFormat0);
//       
//       String string2 = fastDateFormat2.format((Calendar) mockGregorianCalendar0);
//       assertNotNull(string2);
//       assertFalse(string2.equals((Object)string1));
//       assertFalse(string2.equals((Object)string0));
//       assertFalse(locale2.equals((Object)locale0));
//       assertFalse(locale2.equals((Object)locale1));
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat0));
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("zho", locale2.getISO3Language());
//       assertEquals("CN", locale2.getCountry());
//       assertEquals("zh", locale2.getLanguage());
//       assertEquals("zh_CN", locale2.toString());
//       assertEquals("", locale2.getVariant());
//       assertEquals("CHN", locale2.getISO3Country());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat2.getPattern());
//       assertEquals(33, fastDateFormat2.getMaxLengthEstimate());
//       assertEquals("0002\u5E7412\u670831\u65E5 \u661F\u671F\u4E09 \u4E0A\u534812\u65F600\u520600\u79D2 GMT", string2);
//       assertNotSame(string2, string1);
//       assertNotSame(string2, string0);
//       assertNotSame(locale2, locale0);
//       assertNotSame(locale2, locale1);
//       assertNotSame(fastDateFormat2, fastDateFormat1);
//       assertNotSame(fastDateFormat2, fastDateFormat0);
//       
//       FastDateFormat fastDateFormat3 = FastDateFormat.getTimeInstance(int3, locale2);
//       assertNotNull(fastDateFormat3);
//       assertFalse(locale2.equals((Object)locale0));
//       assertFalse(locale2.equals((Object)locale1));
//       assertFalse(fastDateFormat3.equals((Object)fastDateFormat2));
//       assertFalse(fastDateFormat3.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat3.equals((Object)fastDateFormat1));
//       assertEquals("zho", locale2.getISO3Language());
//       assertEquals("CN", locale2.getCountry());
//       assertEquals("zh", locale2.getLanguage());
//       assertEquals("zh_CN", locale2.toString());
//       assertEquals("", locale2.getVariant());
//       assertEquals("CHN", locale2.getISO3Country());
//       assertEquals("ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat3.getPattern());
//       assertEquals(15, fastDateFormat3.getMaxLengthEstimate());
//       assertNotSame(locale2, locale0);
//       assertNotSame(locale2, locale1);
//       assertNotSame(fastDateFormat3, fastDateFormat2);
//       assertNotSame(fastDateFormat3, fastDateFormat0);
//       assertNotSame(fastDateFormat3, fastDateFormat1);
//       
//       Locale locale3 = Locale.forLanguageTag(string0);
//       assertNotNull(locale3);
//       assertFalse(string0.equals((Object)string2));
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(locale3.equals((Object)locale2));
//       assertFalse(locale3.equals((Object)locale1));
//       assertFalse(locale3.equals((Object)locale0));
//       assertEquals("", locale3.toString());
//       assertEquals("", locale3.getCountry());
//       assertEquals("", locale3.getISO3Language());
//       assertEquals("", locale3.getISO3Country());
//       assertEquals("", locale3.getLanguage());
//       assertEquals("", locale3.getVariant());
//       assertNotSame(string0, string2);
//       assertNotSame(string0, string1);
//       assertNotSame(locale3, locale2);
//       assertNotSame(locale3, locale1);
//       assertNotSame(locale3, locale0);
//       
//       FastDateFormat fastDateFormat4 = FastDateFormat.getDateInstance(int0, locale3);
//       assertNotNull(fastDateFormat4);
//       assertFalse(string0.equals((Object)string2));
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(locale3.equals((Object)locale2));
//       assertFalse(locale3.equals((Object)locale1));
//       assertFalse(locale3.equals((Object)locale0));
//       assertFalse(fastDateFormat4.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat4.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat4.equals((Object)fastDateFormat3));
//       assertFalse(fastDateFormat4.equals((Object)fastDateFormat2));
//       assertEquals("", locale3.toString());
//       assertEquals("", locale3.getCountry());
//       assertEquals("", locale3.getISO3Language());
//       assertEquals("", locale3.getISO3Country());
//       assertEquals("", locale3.getLanguage());
//       assertEquals("", locale3.getVariant());
//       assertEquals(31, fastDateFormat4.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat4.getPattern());
//       assertNotSame(string0, string2);
//       assertNotSame(string0, string1);
//       assertNotSame(locale3, locale2);
//       assertNotSame(locale3, locale1);
//       assertNotSame(locale3, locale0);
//       assertNotSame(fastDateFormat4, fastDateFormat0);
//       assertNotSame(fastDateFormat4, fastDateFormat1);
//       assertNotSame(fastDateFormat4, fastDateFormat3);
//       assertNotSame(fastDateFormat4, fastDateFormat2);
//       
//       ZoneInfo zoneInfo2 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       assertNotNull(zoneInfo2);
//       assertFalse(string0.equals((Object)string2));
//       assertFalse(string0.equals((Object)string1));
//       assertTrue(zoneInfo2.equals((Object)zoneInfo1));
//       assertTrue(zoneInfo2.equals((Object)zoneInfo0));
//       assertEquals("GMT", zoneInfo2.getID());
//       assertNotSame(string0, string2);
//       assertNotSame(string0, string1);
//       assertNotSame(zoneInfo2, zoneInfo0);
//       assertNotSame(zoneInfo2, zoneInfo1);
//       
//       FastDateFormat fastDateFormat5 = FastDateFormat.getTimeInstance(int0);
//       assertNotNull(fastDateFormat5);
//       assertFalse(fastDateFormat5.equals((Object)fastDateFormat4));
//       assertFalse(fastDateFormat5.equals((Object)fastDateFormat2));
//       assertFalse(fastDateFormat5.equals((Object)fastDateFormat3));
//       assertFalse(fastDateFormat5.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat5.equals((Object)fastDateFormat1));
//       assertEquals(17, fastDateFormat5.getMaxLengthEstimate());
//       assertEquals("h:mm:ss a z", fastDateFormat5.getPattern());
//       assertNotSame(fastDateFormat5, fastDateFormat4);
//       assertNotSame(fastDateFormat5, fastDateFormat2);
//       assertNotSame(fastDateFormat5, fastDateFormat3);
//       assertNotSame(fastDateFormat5, fastDateFormat0);
//       assertNotSame(fastDateFormat5, fastDateFormat1);
//       
//       Locale locale4 = fastDateFormat1.getLocale();
//       assertNotNull(locale4);
//       assertFalse(locale4.equals((Object)locale0));
//       assertFalse(locale4.equals((Object)locale2));
//       assertFalse(locale4.equals((Object)locale1));
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat5));
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat2));
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat3));
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat4));
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertEquals("", locale4.getCountry());
//       assertEquals("", locale4.getLanguage());
//       assertEquals("", locale4.getVariant());
//       assertEquals("", locale4.getISO3Language());
//       assertEquals("", locale4.toString());
//       assertEquals("", locale4.getISO3Country());
//       assertEquals(21, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals("M/d/yy h:mm a", fastDateFormat1.getPattern());
//       assertNotSame(locale4, locale0);
//       assertNotSame(locale4, locale2);
//       assertNotSame(locale4, locale1);
//       assertSame(locale4, locale3);
//       assertNotSame(fastDateFormat1, fastDateFormat5);
//       assertNotSame(fastDateFormat1, fastDateFormat2);
//       assertNotSame(fastDateFormat1, fastDateFormat3);
//       assertNotSame(fastDateFormat1, fastDateFormat4);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       
//       FastDateFormat fastDateFormat6 = FastDateFormat.getTimeInstance(int0, (TimeZone) zoneInfo2, locale3);
//       assertNotNull(fastDateFormat6);
//       assertFalse(string0.equals((Object)string2));
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(fastDateFormat6.equals((Object)fastDateFormat3));
//       assertTrue(fastDateFormat6.equals((Object)fastDateFormat5));
//       assertFalse(fastDateFormat6.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat6.equals((Object)fastDateFormat2));
//       assertFalse(fastDateFormat6.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat6.equals((Object)fastDateFormat4));
//       assertFalse(locale3.equals((Object)locale2));
//       assertFalse(locale3.equals((Object)locale1));
//       assertFalse(locale3.equals((Object)locale0));
//       assertTrue(zoneInfo2.equals((Object)zoneInfo1));
//       assertTrue(zoneInfo2.equals((Object)zoneInfo0));
//       assertEquals("h:mm:ss a z", fastDateFormat6.getPattern());
//       assertEquals(17, fastDateFormat6.getMaxLengthEstimate());
//       assertEquals("", locale3.toString());
//       assertEquals("", locale3.getCountry());
//       assertEquals("", locale3.getISO3Language());
//       assertEquals("", locale3.getISO3Country());
//       assertEquals("", locale3.getLanguage());
//       assertEquals("", locale3.getVariant());
//       assertEquals("GMT", zoneInfo2.getID());
//       assertNotSame(string0, string2);
//       assertNotSame(string0, string1);
//       assertNotSame(fastDateFormat6, fastDateFormat3);
//       assertNotSame(fastDateFormat6, fastDateFormat0);
//       assertNotSame(fastDateFormat6, fastDateFormat5);
//       assertNotSame(fastDateFormat6, fastDateFormat2);
//       assertNotSame(fastDateFormat6, fastDateFormat1);
//       assertNotSame(fastDateFormat6, fastDateFormat4);
//       assertNotSame(locale3, locale2);
//       assertSame(locale3, locale4);
//       assertNotSame(locale3, locale1);
//       assertNotSame(locale3, locale0);
//       assertNotSame(zoneInfo2, zoneInfo0);
//       assertNotSame(zoneInfo2, zoneInfo1);
//       
//       String string3 = fastDateFormat1.format((Calendar) mockGregorianCalendar0);
//       assertNotNull(string3);
//       assertFalse(string3.equals((Object)string0));
//       assertFalse(string3.equals((Object)string2));
//       assertFalse(string3.equals((Object)string1));
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat6));
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat5));
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat2));
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat3));
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat4));
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(21, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals("M/d/yy h:mm a", fastDateFormat1.getPattern());
//       assertEquals("12/31/02 12:00 AM", string3);
//       assertNotSame(string3, string0);
//       assertNotSame(string3, string2);
//       assertNotSame(string3, string1);
//       assertNotSame(fastDateFormat1, fastDateFormat6);
//       assertNotSame(fastDateFormat1, fastDateFormat5);
//       assertNotSame(fastDateFormat1, fastDateFormat2);
//       assertNotSame(fastDateFormat1, fastDateFormat3);
//       assertNotSame(fastDateFormat1, fastDateFormat4);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       
//       int int5 = 2745;
//       String string4 = locale3.getDisplayName();
//       assertNotNull(string4);
//       assertFalse(string4.equals((Object)string1));
//       assertFalse(string4.equals((Object)string2));
//       assertFalse(string4.equals((Object)string3));
//       assertFalse(string0.equals((Object)string2));
//       assertFalse(string0.equals((Object)string3));
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(locale3.equals((Object)locale2));
//       assertFalse(locale3.equals((Object)locale1));
//       assertFalse(locale3.equals((Object)locale0));
//       assertEquals("", locale3.toString());
//       assertEquals("", locale3.getCountry());
//       assertEquals("", locale3.getISO3Language());
//       assertEquals("", locale3.getISO3Country());
//       assertEquals("", locale3.getLanguage());
//       assertEquals("", locale3.getVariant());
//       assertEquals("", string4);
//       assertSame(string4, string0);
//       assertNotSame(string4, string1);
//       assertNotSame(string4, string2);
//       assertNotSame(string4, string3);
//       assertNotSame(string0, string2);
//       assertSame(string0, string4);
//       assertNotSame(string0, string3);
//       assertNotSame(string0, string1);
//       assertNotSame(locale3, locale2);
//       assertSame(locale3, locale4);
//       assertNotSame(locale3, locale1);
//       assertNotSame(locale3, locale0);
//       
//       int int6 = (-83);
//       ZoneInfo zoneInfo3 = (ZoneInfo)TimeZone.getTimeZone(string2);
//       assertNotNull(zoneInfo3);
//       assertTrue(zoneInfo3.equals((Object)zoneInfo0));
//       assertTrue(zoneInfo3.equals((Object)zoneInfo1));
//       assertTrue(zoneInfo3.equals((Object)zoneInfo2));
//       assertFalse(string2.equals((Object)string3));
//       assertFalse(string2.equals((Object)string1));
//       assertFalse(string2.equals((Object)string0));
//       assertFalse(string2.equals((Object)string4));
//       assertFalse(int3 == int5);
//       assertFalse(int3 == int6);
//       assertFalse(int4 == int6);
//       assertFalse(int4 == int5);
//       assertFalse(locale2.equals((Object)locale0));
//       assertFalse(locale2.equals((Object)locale3));
//       assertFalse(locale2.equals((Object)locale4));
//       assertFalse(locale2.equals((Object)locale1));
//       assertFalse(int0 == int6);
//       assertFalse(int0 == int5);
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat5));
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat6));
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat4));
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat3));
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("GMT", zoneInfo3.getID());
//       assertEquals("zho", locale2.getISO3Language());
//       assertEquals("CN", locale2.getCountry());
//       assertEquals("zh", locale2.getLanguage());
//       assertEquals("zh_CN", locale2.toString());
//       assertEquals("", locale2.getVariant());
//       assertEquals("CHN", locale2.getISO3Country());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat2.getPattern());
//       assertEquals(33, fastDateFormat2.getMaxLengthEstimate());
//       assertNotSame(zoneInfo3, zoneInfo1);
//       assertNotSame(zoneInfo3, zoneInfo0);
//       assertNotSame(zoneInfo3, zoneInfo2);
//       assertNotSame(string2, string3);
//       assertNotSame(string2, string1);
//       assertNotSame(string2, string0);
//       assertNotSame(string2, string4);
//       assertNotSame(locale2, locale0);
//       assertNotSame(locale2, locale3);
//       assertNotSame(locale2, locale4);
//       assertNotSame(locale2, locale1);
//       assertNotSame(fastDateFormat2, fastDateFormat1);
//       assertNotSame(fastDateFormat2, fastDateFormat5);
//       assertNotSame(fastDateFormat2, fastDateFormat6);
//       assertNotSame(fastDateFormat2, fastDateFormat0);
//       assertNotSame(fastDateFormat2, fastDateFormat4);
//       assertNotSame(fastDateFormat2, fastDateFormat3);
//       
//       ZoneInfo zoneInfo4 = (ZoneInfo)TimeZone.getDefault();
//       assertNotNull(zoneInfo4);
//       assertTrue(zoneInfo4.equals((Object)zoneInfo1));
//       assertTrue(zoneInfo4.equals((Object)zoneInfo0));
//       assertTrue(zoneInfo4.equals((Object)zoneInfo3));
//       assertTrue(zoneInfo4.equals((Object)zoneInfo2));
//       assertEquals("GMT", zoneInfo4.getID());
//       assertNotSame(zoneInfo4, zoneInfo0);
//       assertNotSame(zoneInfo4, zoneInfo2);
//       assertNotSame(zoneInfo4, zoneInfo3);
//       assertNotSame(zoneInfo4, zoneInfo1);
//       
//       FastDateFormat fastDateFormat7 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo4);
//       assertNotNull(fastDateFormat7);
//       assertFalse(fastDateFormat7.equals((Object)fastDateFormat5));
//       assertFalse(fastDateFormat7.equals((Object)fastDateFormat4));
//       assertFalse(fastDateFormat7.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat7.equals((Object)fastDateFormat2));
//       assertFalse(fastDateFormat7.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat7.equals((Object)fastDateFormat3));
//       assertFalse(fastDateFormat7.equals((Object)fastDateFormat6));
//       assertTrue(zoneInfo4.equals((Object)zoneInfo1));
//       assertTrue(zoneInfo4.equals((Object)zoneInfo0));
//       assertTrue(zoneInfo4.equals((Object)zoneInfo3));
//       assertTrue(zoneInfo4.equals((Object)zoneInfo2));
//       assertFalse(string0.equals((Object)string2));
//       assertFalse(string0.equals((Object)string3));
//       assertFalse(string0.equals((Object)string1));
//       assertEquals("", fastDateFormat7.getPattern());
//       assertEquals(0, fastDateFormat7.getMaxLengthEstimate());
//       assertEquals("GMT", zoneInfo4.getID());
//       assertNotSame(fastDateFormat7, fastDateFormat5);
//       assertNotSame(fastDateFormat7, fastDateFormat4);
//       assertNotSame(fastDateFormat7, fastDateFormat0);
//       assertNotSame(fastDateFormat7, fastDateFormat2);
//       assertNotSame(fastDateFormat7, fastDateFormat1);
//       assertNotSame(fastDateFormat7, fastDateFormat3);
//       assertNotSame(fastDateFormat7, fastDateFormat6);
//       assertNotSame(zoneInfo4, zoneInfo0);
//       assertNotSame(zoneInfo4, zoneInfo2);
//       assertNotSame(zoneInfo4, zoneInfo3);
//       assertNotSame(zoneInfo4, zoneInfo1);
//       assertNotSame(string0, string2);
//       assertSame(string0, string4);
//       assertNotSame(string0, string3);
//       assertNotSame(string0, string1);
//       
//       int int7 = 0;
//       MockDate mockDate0 = new MockDate(int5, int7, int7);
//       assertNotNull(mockDate0);
//       assertFalse(int7 == int6);
//       assertFalse(int7 == int5);
//       assertFalse(int5 == int6);
//       assertFalse(int5 == int3);
//       assertFalse(int5 == int2);
//       assertFalse(int5 == int0);
//       assertFalse(int5 == int7);
//       assertFalse(int5 == int4);
//       assertFalse(int5 == int1);
//       assertEquals("Tue Dec 31 00:00:00 GMT 4644", mockDate0.toString());
//       
//       boolean boolean0 = fastDateFormat4.equals((Object) mockDate0);
//       assertFalse(string0.equals((Object)string2));
//       assertFalse(string0.equals((Object)string3));
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(int0 == int6);
//       assertFalse(int0 == int5);
//       assertFalse(locale3.equals((Object)locale2));
//       assertFalse(locale3.equals((Object)locale1));
//       assertFalse(locale3.equals((Object)locale0));
//       assertFalse(int7 == int6);
//       assertFalse(int7 == int5);
//       assertFalse(fastDateFormat4.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat4.equals((Object)fastDateFormat5));
//       assertFalse(fastDateFormat4.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat4.equals((Object)fastDateFormat3));
//       assertFalse(fastDateFormat4.equals((Object)fastDateFormat7));
//       assertFalse(fastDateFormat4.equals((Object)fastDateFormat2));
//       assertFalse(fastDateFormat4.equals((Object)fastDateFormat6));
//       assertFalse(int5 == int6);
//       assertFalse(int5 == int3);
//       assertFalse(int5 == int2);
//       assertFalse(int5 == int0);
//       assertFalse(int5 == int7);
//       assertFalse(int5 == int4);
//       assertFalse(int5 == int1);
//       assertEquals("Tue Dec 31 00:00:00 GMT 4644", mockDate0.toString());
//       assertEquals("", locale3.toString());
//       assertEquals("", locale3.getCountry());
//       assertEquals("", locale3.getISO3Language());
//       assertEquals("", locale3.getISO3Country());
//       assertEquals("", locale3.getLanguage());
//       assertEquals("", locale3.getVariant());
//       assertEquals(31, fastDateFormat4.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat4.getPattern());
//       assertFalse(boolean0);
//       assertNotSame(string0, string2);
//       assertSame(string0, string4);
//       assertNotSame(string0, string3);
//       assertNotSame(string0, string1);
//       assertNotSame(locale3, locale2);
//       assertSame(locale3, locale4);
//       assertNotSame(locale3, locale1);
//       assertNotSame(locale3, locale0);
//       assertNotSame(fastDateFormat4, fastDateFormat0);
//       assertNotSame(fastDateFormat4, fastDateFormat5);
//       assertNotSame(fastDateFormat4, fastDateFormat1);
//       assertNotSame(fastDateFormat4, fastDateFormat3);
//       assertNotSame(fastDateFormat4, fastDateFormat7);
//       assertNotSame(fastDateFormat4, fastDateFormat2);
//       assertNotSame(fastDateFormat4, fastDateFormat6);
//       
//       // Undeclared exception!
//       try {
//         AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat4.formatToCharacterIterator((Object) fastDateFormat7);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Unknown class: org.apache.commons.lang3.time.FastDateFormat
//          //
//       }
//   }
}
