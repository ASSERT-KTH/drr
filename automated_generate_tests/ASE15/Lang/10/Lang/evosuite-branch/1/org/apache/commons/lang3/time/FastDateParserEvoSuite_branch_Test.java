/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:47:48 GMT 2014
 */

package org.apache.commons.lang3.time;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;




import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;


public class FastDateParserEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "Zi=G";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("Zi=G", fastDateParser0.getPattern());
      
      String string1 = "GMTAntarctica/South_Pole";
      assertNotSame(string1, string0);
      
      Date date0 = (Date)fastDateParser0.parseObject(string1);
      assertNotNull(date0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      assertEquals("Zi=G", fastDateParser0.getPattern());
  }

  @Test
  public void test01()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      
      String string0 = "ZibG";
      String string1 = zoneInfo0.getDisplayName(locale0);
      assertEquals("Heure de Greenwich", string1);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("ZibG", fastDateParser0.getPattern());
      
      Date date0 = (Date)fastDateParser0.parseObject(string1);
      assertNotNull(date0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("ZibG", fastDateParser0.getPattern());
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = 481;
      String string0 = "`V+";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals(481, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("`V+", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=`V+,offset=481,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals(481, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("`V+", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=`V+,offset=481,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("`V+", fastDateParser0.getPattern());
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "wP";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      
      String string1 = "s_";
      assertNotSame(string1, string0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string1, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("s_", fastDateParser0.getPattern());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("GMT", zoneInfo0.getID());
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = ":}@bu2;P}Ex@C!p1";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      
      String string1 = "/`K^dM7@";
      assertNotSame(string1, string0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string1, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("/`K^dM7@", fastDateParser0.getPattern());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = 125;
      int int1 = 0;
      String string0 = "0H4";
      int int2 = 0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int1, string0, int0, int1, int1, int1, int0, int2, int1, int0);
      assertNotNull(simpleTimeZone0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("0H4", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=0H4,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=125,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=125,endDay=0,endDayOfWeek=0,endTime=125,endTimeMode=0]", simpleTimeZone0.toString());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      
      String string1 = "\\37.i1R1awX>PZiJ";
      assertNotSame(string1, string0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string1, simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertEquals("\\37.i1R1awX>PZiJ", fastDateParser0.getPattern());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("0H4", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=0H4,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=125,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=125,endDay=0,endDayOfWeek=0,endTime=125,endTimeMode=0]", simpleTimeZone0.toString());
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "$ aa6c;z O";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      
      String string1 = "@D&HBE=vO6";
      assertNotSame(string1, string0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string1, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("@D&HBE=vO6", fastDateParser0.getPattern());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = ";$@";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(";$@", fastDateParser0.getPattern());
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "-=@";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("-=@", fastDateParser0.getPattern());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
  }

  @Test
  public void test09()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      
      String string0 = "G,u;EhLdnU;;\"T@LDxpO";
      int int0 = 9;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals("G,u;EhLdnU;;\"T@LDxpO", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(9, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=G,u;EhLdnU;;\"T@LDxpO,offset=9,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("G,u;EhLdnU;;\"T@LDxpO", fastDateParser0.getPattern());
      assertEquals("G,u;EhLdnU;;\"T@LDxpO", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(9, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=G,u;EhLdnU;;\"T@LDxpO,offset=9,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "wP";
      String string1 = "(\\p{IsNd}{";
      assertNotSame(string1, string0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      
      FastDateParser fastDateParser0 = new FastDateParser(string1, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("(\\p{IsNd}{", fastDateParser0.getPattern());
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "D+|E8|F+|G+|H+|K+|M+|S+|W+Z+|a+|d+|h+|k+|m+|m+|w+|y|z+|''|'[^']++(''[^']*+)*'|[^'A-Za-z]++";
      int int0 = (-75);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("D+|E8|F+|G+|H+|K+|M+|S+|W+Z+|a+|d+|h+|k+|m+|m+|w+|y|z+|''|'[^']++(''[^']*+)*'|[^'A-Za-z]++", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=D+|E8|F+|G+|H+|K+|M+|S+|W+Z+|a+|d+|h+|k+|m+|m+|w+|y|z+|''|'[^']++(''[^']*+)*'|[^'A-Za-z]++,offset=-75,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(-75, simpleTimeZone0.getRawOffset());
      
      Locale locale0 = new Locale(string0, string0, string0);
      assertNotNull(locale0);
      assertEquals("d+|e8|f+|g+|h+|k+|m+|s+|w+z+|a+|d+|h+|k+|m+|m+|w+|y|z+|''|'[^']++(''[^']*+)*'|[^'a-za-z]++", locale0.getLanguage());
      assertEquals("d+|e8|f+|g+|h+|k+|m+|s+|w+z+|a+|d+|h+|k+|m+|m+|w+|y|z+|''|'[^']++(''[^']*+)*'|[^'a-za-z]++_D+|E8|F+|G+|H+|K+|M+|S+|W+Z+|A+|D+|H+|K+|M+|M+|W+|Y|Z+|''|'[^']++(''[^']*+)*'|[^'A-ZA-Z]++_D+|E8|F+|G+|H+|K+|M+|S+|W+Z+|a+|d+|h+|k+|m+|m+|w+|y|z+|''|'[^']++(''[^']*+)*'|[^'A-Za-z]++", locale0.toString());
      assertEquals("D+|E8|F+|G+|H+|K+|M+|S+|W+Z+|A+|D+|H+|K+|M+|M+|W+|Y|Z+|''|'[^']++(''[^']*+)*'|[^'A-ZA-Z]++", locale0.getCountry());
      assertEquals("D+|E8|F+|G+|H+|K+|M+|S+|W+Z+|a+|d+|h+|k+|m+|m+|w+|y|z+|''|'[^']++(''[^']*+)*'|[^'A-Za-z]++", locale0.getVariant());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("D+|E8|F+|G+|H+|K+|M+|S+|W+Z+|a+|d+|h+|k+|m+|m+|w+|y|z+|''|'[^']++(''[^']*+)*'|[^'A-Za-z]++", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=D+|E8|F+|G+|H+|K+|M+|S+|W+Z+|a+|d+|h+|k+|m+|m+|w+|y|z+|''|'[^']++(''[^']*+)*'|[^'A-Za-z]++,offset=-75,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(-75, simpleTimeZone0.getRawOffset());
      assertEquals("d+|e8|f+|g+|h+|k+|m+|s+|w+z+|a+|d+|h+|k+|m+|m+|w+|y|z+|''|'[^']++(''[^']*+)*'|[^'a-za-z]++", locale0.getLanguage());
      assertEquals("d+|e8|f+|g+|h+|k+|m+|s+|w+z+|a+|d+|h+|k+|m+|m+|w+|y|z+|''|'[^']++(''[^']*+)*'|[^'a-za-z]++_D+|E8|F+|G+|H+|K+|M+|S+|W+Z+|A+|D+|H+|K+|M+|M+|W+|Y|Z+|''|'[^']++(''[^']*+)*'|[^'A-ZA-Z]++_D+|E8|F+|G+|H+|K+|M+|S+|W+Z+|a+|d+|h+|k+|m+|m+|w+|y|z+|''|'[^']++(''[^']*+)*'|[^'A-Za-z]++", locale0.toString());
      assertEquals("D+|E8|F+|G+|H+|K+|M+|S+|W+Z+|A+|D+|H+|K+|M+|M+|W+|Y|Z+|''|'[^']++(''[^']*+)*'|[^'A-ZA-Z]++", locale0.getCountry());
      assertEquals("D+|E8|F+|G+|H+|K+|M+|S+|W+Z+|a+|d+|h+|k+|m+|m+|w+|y|z+|''|'[^']++(''[^']*+)*'|[^'A-Za-z]++", locale0.getVariant());
      assertEquals("D+|E8|F+|G+|H+|K+|M+|S+|W+Z+|a+|d+|h+|k+|m+|m+|w+|y|z+|''|'[^']++(''[^']*+)*'|[^'A-Za-z]++", fastDateParser0.getPattern());
      
      int int1 = fastDateParser0.adjustYear(int0);
      assertEquals(1925, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("D+|E8|F+|G+|H+|K+|M+|S+|W+Z+|a+|d+|h+|k+|m+|m+|w+|y|z+|''|'[^']++(''[^']*+)*'|[^'A-Za-z]++", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=D+|E8|F+|G+|H+|K+|M+|S+|W+Z+|a+|d+|h+|k+|m+|m+|w+|y|z+|''|'[^']++(''[^']*+)*'|[^'A-Za-z]++,offset=-75,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(-75, simpleTimeZone0.getRawOffset());
      assertEquals("d+|e8|f+|g+|h+|k+|m+|s+|w+z+|a+|d+|h+|k+|m+|m+|w+|y|z+|''|'[^']++(''[^']*+)*'|[^'a-za-z]++", locale0.getLanguage());
      assertEquals("d+|e8|f+|g+|h+|k+|m+|s+|w+z+|a+|d+|h+|k+|m+|m+|w+|y|z+|''|'[^']++(''[^']*+)*'|[^'a-za-z]++_D+|E8|F+|G+|H+|K+|M+|S+|W+Z+|A+|D+|H+|K+|M+|M+|W+|Y|Z+|''|'[^']++(''[^']*+)*'|[^'A-ZA-Z]++_D+|E8|F+|G+|H+|K+|M+|S+|W+Z+|a+|d+|h+|k+|m+|m+|w+|y|z+|''|'[^']++(''[^']*+)*'|[^'A-Za-z]++", locale0.toString());
      assertEquals("D+|E8|F+|G+|H+|K+|M+|S+|W+Z+|A+|D+|H+|K+|M+|M+|W+|Y|Z+|''|'[^']++(''[^']*+)*'|[^'A-ZA-Z]++", locale0.getCountry());
      assertEquals("D+|E8|F+|G+|H+|K+|M+|S+|W+Z+|a+|d+|h+|k+|m+|m+|w+|y|z+|''|'[^']++(''[^']*+)*'|[^'A-Za-z]++", locale0.getVariant());
      assertEquals("D+|E8|F+|G+|H+|K+|M+|S+|W+Z+|a+|d+|h+|k+|m+|m+|w+|y|z+|''|'[^']++(''[^']*+)*'|[^'A-Za-z]++", fastDateParser0.getPattern());
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 125;
      int int1 = 0;
      String string0 = "0H4";
      int int2 = 0;
      int int3 = 7052;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int1, string0, int0, int1, int1, int1, int0, int2, int1, int3);
      assertNotNull(simpleTimeZone0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertEquals("0H4", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=0H4,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=125,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=125,endDay=0,endDayOfWeek=0,endTime=7052,endTimeMode=0]", simpleTimeZone0.toString());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertEquals("0H4", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=0H4,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=125,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=125,endDay=0,endDayOfWeek=0,endTime=7052,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("0H4", fastDateParser0.getPattern());
      
      int int4 = fastDateParser0.adjustYear(int3);
      assertEquals(8952, int4);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int4);
      assertFalse(int3 == int2);
      assertFalse(int3 == int4);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int4);
      assertFalse(int0 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int4);
      assertEquals("0H4", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=0H4,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=125,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=125,endDay=0,endDayOfWeek=0,endTime=7052,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("0H4", fastDateParser0.getPattern());
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "?a";
      int int0 = 709;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals("?a", simpleTimeZone0.getID());
      assertEquals(709, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=?a,offset=709,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("?a", fastDateParser0.getPattern());
      assertEquals("?a", simpleTimeZone0.getID());
      assertEquals(709, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=?a,offset=709,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = ".j4^^";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals(".j4^^", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = ":}@bu2;P}Ex@C!p1";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      
      String string1 = "5s)KJDo3$J=~R*I||o";
      assertNotSame(string1, string0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string1, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("5s)KJDo3$J=~R*I||o", fastDateParser0.getPattern());
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 125;
      int int1 = 0;
      String string0 = "0H4";
      int int2 = 0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int1, string0, int0, int1, int1, int1, int0, int2, int1, int0);
      assertNotNull(simpleTimeZone0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("0H4", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=0H4,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=125,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=125,endDay=0,endDayOfWeek=0,endTime=125,endTimeMode=0]", simpleTimeZone0.toString());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int0);
      assertEquals("0H4", fastDateParser0.getPattern());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("0H4", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=0H4,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=125,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=125,endDay=0,endDayOfWeek=0,endTime=125,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      
      try {
        Date date0 = fastDateParser0.parse(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"0H4\" does not match 0(\\p{IsNd}{1}+)4
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "F2$J7-?5D}R}";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      assertNotNull(locale0);
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("F2$J7-?5D}R}", fastDateParser0.getPattern());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("GMT", zoneInfo0.getID());
      
      try {
        Date date0 = fastDateParser0.parse(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"F2$J7-?5D}R}\" does not match (\\p{IsNd}{1}+)2\\$
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "9${F$ivjF[0(OX^i'U";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("9${F$ivjF[0(OX^i'U", fastDateParser0.getPattern());
      
      String string1 = "15Y 60 B>2";
      assertNotSame(string1, string0);
      
      FastDateParser fastDateParser1 = new FastDateParser(string1, zoneInfo0, locale0);
      assertNotNull(fastDateParser1);
      assertNotSame(string1, string0);
      assertNotSame(fastDateParser1, fastDateParser0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("15Y 60 B>2", fastDateParser1.getPattern());
      
      boolean boolean0 = fastDateParser0.equals((Object) fastDateParser1);
      assertFalse(boolean0);
      assertNotSame(string1, string0);
      assertNotSame(fastDateParser1, fastDateParser0);
      assertNotSame(fastDateParser0, fastDateParser1);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertFalse(fastDateParser0.equals((Object)fastDateParser1));
      assertFalse(string0.equals((Object)string1));
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("15Y 60 B>2", fastDateParser1.getPattern());
      assertEquals("9${F$ivjF[0(OX^i'U", fastDateParser0.getPattern());
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "SST";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("SST", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      
      String string1 = "9-8x_M-VAg'[0BGo";
      assertNotSame(string1, string0);
      
      Date date0 = (Date)fastDateParser0.parseObject(string1);
      assertNotNull(date0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("SST", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      
      boolean boolean0 = fastDateParser0.equals((Object) date0);
      assertFalse(boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("SST", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "9${F$ivjF[0(OX^i'U";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("9${F$ivjF[0(OX^i'U", fastDateParser0.getPattern());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      
      boolean boolean0 = fastDateParser0.equals((Object) fastDateParser0);
      assertTrue(boolean0);
      assertEquals("9${F$ivjF[0(OX^i'U", fastDateParser0.getPattern());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("GMT", zoneInfo0.getID());
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "o:n!#az}2b5,_";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "Zi=G";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("Zi=G", fastDateParser0.getPattern());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = fastDateParser0.getLocale();
      assertNotNull(locale1);
      assertSame(locale1, locale0);
      assertSame(locale0, locale1);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("Zi=G", fastDateParser0.getPattern());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "=+G*ia(Bxt";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("=+G*ia(Bxt", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      
      String string1 = fastDateParser0.getPattern();
      assertEquals("=+G*ia(Bxt", string1);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("=+G*ia(Bxt", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      
      int int0 = 0;
      ParsePosition parsePosition0 = new ParsePosition(int0);
      assertNotNull(parsePosition0);
      assertEquals(0, parsePosition0.getIndex());
      assertEquals(-1, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      
      Object object0 = fastDateParser0.parseObject(string1, parsePosition0);
      assertNull(object0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("=+G*ia(Bxt", fastDateParser0.getPattern());
      assertEquals(0, parsePosition0.getIndex());
      assertEquals(-1, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertEquals("GMT", zoneInfo0.getID());
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = "<\\'_EC";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("<\\'_EC", fastDateParser0.getPattern());
      
      ZoneInfo zoneInfo1 = (ZoneInfo)fastDateParser0.getTimeZone();
      assertNotNull(zoneInfo1);
      assertSame(zoneInfo0, zoneInfo1);
      assertSame(zoneInfo1, zoneInfo0);
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("GMT", zoneInfo1.getID());
      assertEquals("<\\'_EC", fastDateParser0.getPattern());
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = "MIT";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = new Locale(string0, string0, string0);
      assertNotNull(locale0);
      assertEquals("MIT", locale0.getCountry());
      assertEquals("mit", locale0.getISO3Language());
      assertEquals("mit", locale0.getLanguage());
      assertEquals("MIT", locale0.getVariant());
      assertEquals("mit_MIT_MIT", locale0.toString());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("MIT", locale0.getCountry());
      assertEquals("mit", locale0.getISO3Language());
      assertEquals("mit", locale0.getLanguage());
      assertEquals("MIT", locale0.getVariant());
      assertEquals("mit_MIT_MIT", locale0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("MIT", fastDateParser0.getPattern());
      
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertNotNull(pattern0);
      assertEquals("MIT", locale0.getCountry());
      assertEquals("mit", locale0.getISO3Language());
      assertEquals("mit", locale0.getLanguage());
      assertEquals("MIT", locale0.getVariant());
      assertEquals("mit_MIT_MIT", locale0.toString());
      assertEquals("(\\p{IsNd}++)", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("(\\p{IsNd}++)", pattern0.pattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("MIT", fastDateParser0.getPattern());
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = "D+|E+|F+|G+|H+|K+|M+<S+|W|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^'E++(''9^']*+N*+'|V^'A-Za-z]++";
      int int0 = (-52);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      //  // Unstable assertion: assertNotNull(simpleTimeZone0);
      //  // Unstable assertion: assertEquals("D+|E+|F+|G+|H+|K+|M+<S+|W|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^'E++(''9^']*+N*+'|V^'A-Za-z]++", simpleTimeZone0.getID());
      //  // Unstable assertion: assertEquals(0, simpleTimeZone0.getDSTSavings());
      //  // Unstable assertion: assertEquals("java.util.SimpleTimeZone[id=D+|E+|F+|G+|H+|K+|M+<S+|W|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^'E++(''9^']*+N*+'|V^'A-Za-z]++,offset=-52,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      //  // Unstable assertion: assertEquals(-52, simpleTimeZone0.getRawOffset());
      //  // Unstable assertion: assertEquals(false, simpleTimeZone0.useDaylightTime());
      
      Locale locale0 = new Locale(string0, string0, string0);
      //  // Unstable assertion: assertNotNull(locale0);
      //  // Unstable assertion: assertEquals("d+|e+|f+|g+|h+|k+|m+<s+|w|z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^'e++(''9^']*+n*+'|v^'a-za-z]++_D+|E+|F+|G+|H+|K+|M+<S+|W|Z+|A+|D+|H+|K+|M+|S+|W+|Y+|Z+|''|'[^'E++(''9^']*+N*+'|V^'A-ZA-Z]++_D+|E+|F+|G+|H+|K+|M+<S+|W|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^'E++(''9^']*+N*+'|V^'A-Za-z]++", locale0.toString());
      //  // Unstable assertion: assertEquals("D+|E+|F+|G+|H+|K+|M+<S+|W|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^'E++(''9^']*+N*+'|V^'A-Za-z]++", locale0.getVariant());
      //  // Unstable assertion: assertEquals("D+|E+|F+|G+|H+|K+|M+<S+|W|Z+|A+|D+|H+|K+|M+|S+|W+|Y+|Z+|''|'[^'E++(''9^']*+N*+'|V^'A-ZA-Z]++", locale0.getCountry());
      //  // Unstable assertion: assertEquals("d+|e+|f+|g+|h+|k+|m+<s+|w|z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^'e++(''9^']*+n*+'|v^'a-za-z]++", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, simpleTimeZone0, locale0);
      //  // Unstable assertion: assertNotNull(fastDateParser0);
      //  // Unstable assertion: assertEquals("D+|E+|F+|G+|H+|K+|M+<S+|W|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^'E++(''9^']*+N*+'|V^'A-Za-z]++", fastDateParser0.getPattern());
      //  // Unstable assertion: assertEquals("d+|e+|f+|g+|h+|k+|m+<s+|w|z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^'e++(''9^']*+n*+'|v^'a-za-z]++_D+|E+|F+|G+|H+|K+|M+<S+|W|Z+|A+|D+|H+|K+|M+|S+|W+|Y+|Z+|''|'[^'E++(''9^']*+N*+'|V^'A-ZA-Z]++_D+|E+|F+|G+|H+|K+|M+<S+|W|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^'E++(''9^']*+N*+'|V^'A-Za-z]++", locale0.toString());
      //  // Unstable assertion: assertEquals("D+|E+|F+|G+|H+|K+|M+<S+|W|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^'E++(''9^']*+N*+'|V^'A-Za-z]++", locale0.getVariant());
      //  // Unstable assertion: assertEquals("D+|E+|F+|G+|H+|K+|M+<S+|W|Z+|A+|D+|H+|K+|M+|S+|W+|Y+|Z+|''|'[^'E++(''9^']*+N*+'|V^'A-ZA-Z]++", locale0.getCountry());
      //  // Unstable assertion: assertEquals("d+|e+|f+|g+|h+|k+|m+<s+|w|z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^'e++(''9^']*+n*+'|v^'a-za-z]++", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("D+|E+|F+|G+|H+|K+|M+<S+|W|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^'E++(''9^']*+N*+'|V^'A-Za-z]++", simpleTimeZone0.getID());
      //  // Unstable assertion: assertEquals(0, simpleTimeZone0.getDSTSavings());
      //  // Unstable assertion: assertEquals("java.util.SimpleTimeZone[id=D+|E+|F+|G+|H+|K+|M+<S+|W|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^'E++(''9^']*+N*+'|V^'A-Za-z]++,offset=-52,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      //  // Unstable assertion: assertEquals(-52, simpleTimeZone0.getRawOffset());
      //  // Unstable assertion: assertEquals(false, simpleTimeZone0.useDaylightTime());
      
      int int1 = fastDateParser0.hashCode();
      //  // Unstable assertion: assertEquals((-218375843), int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertEquals("D+|E+|F+|G+|H+|K+|M+<S+|W|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^'E++(''9^']*+N*+'|V^'A-Za-z]++", fastDateParser0.getPattern());
      //  // Unstable assertion: assertEquals("d+|e+|f+|g+|h+|k+|m+<s+|w|z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^'e++(''9^']*+n*+'|v^'a-za-z]++_D+|E+|F+|G+|H+|K+|M+<S+|W|Z+|A+|D+|H+|K+|M+|S+|W+|Y+|Z+|''|'[^'E++(''9^']*+N*+'|V^'A-ZA-Z]++_D+|E+|F+|G+|H+|K+|M+<S+|W|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^'E++(''9^']*+N*+'|V^'A-Za-z]++", locale0.toString());
      //  // Unstable assertion: assertEquals("D+|E+|F+|G+|H+|K+|M+<S+|W|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^'E++(''9^']*+N*+'|V^'A-Za-z]++", locale0.getVariant());
      //  // Unstable assertion: assertEquals("D+|E+|F+|G+|H+|K+|M+<S+|W|Z+|A+|D+|H+|K+|M+|S+|W+|Y+|Z+|''|'[^'E++(''9^']*+N*+'|V^'A-ZA-Z]++", locale0.getCountry());
      //  // Unstable assertion: assertEquals("d+|e+|f+|g+|h+|k+|m+<s+|w|z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^'e++(''9^']*+n*+'|v^'a-za-z]++", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("D+|E+|F+|G+|H+|K+|M+<S+|W|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^'E++(''9^']*+N*+'|V^'A-Za-z]++", simpleTimeZone0.getID());
      //  // Unstable assertion: assertEquals(0, simpleTimeZone0.getDSTSavings());
      //  // Unstable assertion: assertEquals("java.util.SimpleTimeZone[id=D+|E+|F+|G+|H+|K+|M+<S+|W|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^'E++(''9^']*+N*+'|V^'A-Za-z]++,offset=-52,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      //  // Unstable assertion: assertEquals(-52, simpleTimeZone0.getRawOffset());
      //  // Unstable assertion: assertEquals(false, simpleTimeZone0.useDaylightTime());
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = ":}@bu2;P}Ex@C!p1";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(":}@bu2;P}Ex@C!p1", fastDateParser0.getPattern());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      
      String string1 = fastDateParser0.toString();
      assertEquals("FastDateParser[:}@bu2;P}Ex@C!p1,it,GMT]", string1);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(":}@bu2;P}Ex@C!p1", fastDateParser0.getPattern());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      
      FastDateParser fastDateParser1 = new FastDateParser(string1, zoneInfo0, locale0);
      assertNotNull(fastDateParser1);
      assertNotSame(fastDateParser1, fastDateParser0);
      assertNotSame(fastDateParser0, fastDateParser1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertFalse(fastDateParser0.equals((Object)fastDateParser1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("FastDateParser[:}@bu2;P}Ex@C!p1,it,GMT]", fastDateParser1.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(":}@bu2;P}Ex@C!p1", fastDateParser0.getPattern());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = "MIT";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      String string1 = "3o3FZ-[ ";
      assertNotSame(string1, string0);
      
      Locale locale0 = new Locale(string1, string1, string0);
      assertNotNull(locale0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("3O3FZ-[ ", locale0.getCountry());
      assertEquals("3o3fz-[ _3O3FZ-[ _MIT", locale0.toString());
      assertEquals("MIT", locale0.getVariant());
      assertEquals("3o3fz-[ ", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("MIT", fastDateParser0.getPattern());
      assertEquals("3O3FZ-[ ", locale0.getCountry());
      assertEquals("3o3fz-[ _3O3FZ-[ _MIT", locale0.toString());
      assertEquals("MIT", locale0.getVariant());
      assertEquals("3o3fz-[ ", locale0.getLanguage());
      assertEquals("GMT", zoneInfo0.getID());
      
      Date date0 = fastDateParser0.parse(string1);
      assertNotNull(date0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("MIT", fastDateParser0.getPattern());
      assertEquals("Sun Mar 01 00:00:00 GMT 1970", date0.toString());
      assertEquals("3O3FZ-[ ", locale0.getCountry());
      assertEquals("3o3fz-[ _3O3FZ-[ _MIT", locale0.toString());
      assertEquals("MIT", locale0.getVariant());
      assertEquals("3o3fz-[ ", locale0.getLanguage());
      assertEquals("GMT", zoneInfo0.getID());
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = "=4K>s7Wm/dz";
      int int0 = (-47);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals(-47, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id==4K>s7Wm/dz,offset=-47,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("=4K>s7Wm/dz", simpleTimeZone0.getID());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals(-47, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id==4K>s7Wm/dz,offset=-47,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("=4K>s7Wm/dz", simpleTimeZone0.getID());
      assertEquals("=4K>s7Wm/dz", fastDateParser0.getPattern());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = "3{]ZBVREG}0Z;@";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("3{]ZBVREG}0Z;@", fastDateParser0.getPattern());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
  }

  @Test
  public void test31()  throws Throwable  {
      String string0 = "$ aa6c;z O";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("$ aa6c;z O", fastDateParser0.getPattern());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
  }
}
