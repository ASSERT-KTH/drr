/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:58:16 GMT 2014
 */

package org.apache.commons.lang3.time;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;




import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;


public class FastDateParserEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "z'+($";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("z'+($", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(fastDateParser0);
      
      String string1 = zoneInfo0.getID();
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("GMT", string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = 0;
      ParsePosition parsePosition0 = new ParsePosition(int0);
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertEquals(0, parsePosition0.getIndex());
      assertEquals(-1, parsePosition0.getErrorIndex());
      assertNotNull(parsePosition0);
      
      Date date0 = fastDateParser0.parse(string1, parsePosition0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      assertEquals("z'+($", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(3, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=3,errorIndex=-1]", parsePosition0.toString());
      assertEquals(-1, parsePosition0.getErrorIndex());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(date0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test01()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      String string0 = "%z@\"c&T=.";
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("%z@\"c&T=.", fastDateParser0.getPattern());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(fastDateParser0);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = ">H2l_K!f0?E";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals(">H2l_K!f0?E", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertNotNull(fastDateParser0);
  }

  @Test
  public void test03()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      String string0 = "?=,M=}*k:e?H*@%s";
      Locale locale0 = Locale.KOREA;
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("?=,M=}*k:e?H*@%s", fastDateParser0.getPattern());
      assertNotNull(fastDateParser0);
  }

  @Test
  public void test04()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string0 = "9(,@EG/Z P]cI{";
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("9(,@EG/Z P]cI{", fastDateParser0.getPattern());
      assertNotNull(fastDateParser0);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "s8I5Tl45kBFs";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("s8I5Tl45kBFs", fastDateParser0.getPattern());
      assertNotNull(fastDateParser0);
  }

  @Test
  public void test06()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertNotNull(locale0);
      
      String string0 = "7z|0w<Jv)&CVCW8\\IJ4";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("7z|0w<Jv)&CVCW8\\IJ4", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(fastDateParser0);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "5`}d$QB=('/4";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("5`}d$QB=('/4", fastDateParser0.getPattern());
      assertNotNull(fastDateParser0);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "3:CB#G wE0eN@]W-";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("3:CB#G wE0eN@]W-", fastDateParser0.getPattern());
      assertNotNull(fastDateParser0);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "-8G.9m4X}AYo\":,Gv@";
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(locale0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("-8G.9m4X}AYo\":,Gv@", fastDateParser0.getPattern());
      assertNotNull(fastDateParser0);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "D!Gw*B_";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("D!Gw*B_", fastDateParser0.getPattern());
      assertNotNull(fastDateParser0);
  }

  @Test
  public void test11()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      String string0 = ")";
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(")", fastDateParser0.getPattern());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertNotNull(fastDateParser0);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "z'+n()R$";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("z'+n()R$", fastDateParser0.getPattern());
      assertNotNull(fastDateParser0);
      
      int int0 = 0;
      int int1 = fastDateParser0.adjustYear(int0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("z'+n()R$", fastDateParser0.getPattern());
      assertEquals(2000, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "1CU0^S0pb";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("1CU0^S0pb", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(fastDateParser0);
      
      int int0 = 276;
      int int1 = fastDateParser0.adjustYear(int0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("1CU0^S0pb", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(2176, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "a1+4?Z^yaeJ}&d";
      Locale locale0 = Locale.CANADA;
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("a1+4?Z^yaeJ}&d", fastDateParser0.getPattern());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(fastDateParser0);
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "\\lQDZ!=c|k=x-~8i[jf";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("\\lQDZ!=c|k=x-~8i[jf", fastDateParser0.getPattern());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(fastDateParser0);
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "[?z6.%i'k";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("[?z6.%i'k", fastDateParser0.getPattern());
      assertNotNull(fastDateParser0);
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "z/C4|";
      int int0 = 0;
      Locale locale0 = Locale.CHINA;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=z/C4|,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("z/C4|", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      String string1 = "D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++";
      assertNotSame(string1, string0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string1, simpleTimeZone0, locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=z/C4|,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("z/C4|", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(fastDateParser0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "~D_";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("~D_", fastDateParser0.getPattern());
      assertNotNull(fastDateParser0);
      
      try {
        Object object0 = fastDateParser0.parseObject(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"~D_\" does not match ~(\\p{IsNd}++)_
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "1CU0^S0pb";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("1CU0^S0pb", fastDateParser0.getPattern());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(fastDateParser0);
      
      Date date0 = fastDateParser0.parse(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("1CU0^S0pb", fastDateParser0.getPattern());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(date0);
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "GMTPacific/Ponape";
      int int0 = 0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals("java.util.SimpleTimeZone[id=GMTPacific/Ponape,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("GMTPacific/Ponape", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, simpleTimeZone0, locale0);
      assertEquals("java.util.SimpleTimeZone[id=GMTPacific/Ponape,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("GMTPacific/Ponape", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("GMTPacific/Ponape", fastDateParser0.getPattern());
      assertNotNull(fastDateParser0);
      
      String string1 = "Kwa";
      assertNotSame(string1, string0);
      
      FastDateParser fastDateParser1 = new FastDateParser(string1, simpleTimeZone0, locale0);
      assertEquals("Kwa", fastDateParser1.getPattern());
      assertEquals("java.util.SimpleTimeZone[id=GMTPacific/Ponape,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("GMTPacific/Ponape", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertNotSame(string1, string0);
      assertNotSame(fastDateParser1, fastDateParser0);
      assertNotSame(string0, string1);
      assertNotNull(fastDateParser1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertFalse(string0.equals((Object)string1));
      
      boolean boolean0 = fastDateParser0.equals((Object) fastDateParser1);
      assertEquals("Kwa", fastDateParser1.getPattern());
      assertEquals("java.util.SimpleTimeZone[id=GMTPacific/Ponape,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("GMTPacific/Ponape", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("GMTPacific/Ponape", fastDateParser0.getPattern());
      assertFalse(boolean0);
      assertNotSame(string1, string0);
      assertNotSame(fastDateParser1, fastDateParser0);
      assertNotSame(string0, string1);
      assertNotSame(fastDateParser0, fastDateParser1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(fastDateParser0.equals((Object)fastDateParser1));
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "M(/&E[{9]sz}.";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("M(/&E[{9]sz}.", fastDateParser0.getPattern());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertNotNull(fastDateParser0);
      
      boolean boolean0 = fastDateParser0.equals((Object) zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("M(/&E[{9]sz}.", fastDateParser0.getPattern());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertFalse(boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "$";
      int int0 = (-162);
      int int1 = 0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0, int0, int1, int0, int0, int0, int1, int0, int0);
      assertEquals("java.util.SimpleTimeZone[id=$,offset=-162,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=-162,startDay=0,startDayOfWeek=-162,startTime=-162,startTimeMode=0,endMode=0,endMonth=-162,endDay=0,endDayOfWeek=-162,endTime=-162,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("$", simpleTimeZone0.getID());
      assertEquals(-162, simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, simpleTimeZone0, locale0);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("java.util.SimpleTimeZone[id=$,offset=-162,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=-162,startDay=0,startDayOfWeek=-162,startTime=-162,startTimeMode=0,endMode=0,endMonth=-162,endDay=0,endDayOfWeek=-162,endTime=-162,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("$", simpleTimeZone0.getID());
      assertEquals(-162, simpleTimeZone0.getRawOffset());
      assertEquals("$", fastDateParser0.getPattern());
      assertNotNull(fastDateParser0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = fastDateParser0.equals((Object) fastDateParser0);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("java.util.SimpleTimeZone[id=$,offset=-162,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=-162,startDay=0,startDayOfWeek=-162,startTime=-162,startTimeMode=0,endMode=0,endMonth=-162,endDay=0,endDayOfWeek=-162,endTime=-162,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("$", simpleTimeZone0.getID());
      assertEquals(-162, simpleTimeZone0.getRawOffset());
      assertEquals("$", fastDateParser0.getPattern());
      assertTrue(boolean0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "$";
      int int0 = (-162);
      int int1 = 0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0, int0, int1, int0, int0, int0, int1, int0, int0);
      assertEquals(-162, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=$,offset=-162,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=-162,startDay=0,startDayOfWeek=-162,startTime=-162,startTimeMode=0,endMode=0,endMonth=-162,endDay=0,endDayOfWeek=-162,endTime=-162,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("$", simpleTimeZone0.getID());
      assertNotNull(simpleTimeZone0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string1 = "";
      assertNotSame(string1, string0);
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string1, simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = "z/C4|";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("z/C4|", fastDateParser0.getPattern());
      assertNotNull(fastDateParser0);
      
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CN", locale1.getCountry());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("z/C4|", fastDateParser0.getPattern());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = "M(/&E[{9]sz}.";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("M(/&E[{9]sz}.", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(fastDateParser0);
      
      int int0 = 1263;
      ParsePosition parsePosition0 = new ParsePosition(int0);
      assertEquals("java.text.ParsePosition[index=1263,errorIndex=-1]", parsePosition0.toString());
      assertEquals(1263, parsePosition0.getIndex());
      assertEquals(-1, parsePosition0.getErrorIndex());
      assertNotNull(parsePosition0);
      
      // Undeclared exception!
      try {
        Object object0 = fastDateParser0.parseObject(string0, parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1250
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = "1CU0^S0pb";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("1CU0^S0pb", fastDateParser0.getPattern());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(fastDateParser0);
      
      String string1 = fastDateParser0.toString();
      assertEquals("1CU0^S0pb", fastDateParser0.getPattern());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("FastDateParser[1CU0^S0pb,fr_CA,GMT]", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = (-500);
      Integer integer0 = new Integer(int0);
      assertEquals((-500), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      String string0 = "2S`";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((int) integer0, string0);
      assertEquals(-500, simpleTimeZone0.getRawOffset());
      assertEquals("2S`", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=2S`,offset=-500,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotNull(simpleTimeZone0);
      assertTrue(integer0.equals((Object)int0));
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, simpleTimeZone0, locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals(-500, simpleTimeZone0.getRawOffset());
      assertEquals("2S`", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=2S`,offset=-500,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("2S`", fastDateParser0.getPattern());
      assertNotNull(fastDateParser0);
      assertTrue(integer0.equals((Object)int0));
      
      String string1 = fastDateParser0.getPattern();
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals(-500, simpleTimeZone0.getRawOffset());
      assertEquals("2S`", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=2S`,offset=-500,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("2S`", fastDateParser0.getPattern());
      assertEquals("2S`", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertTrue(integer0.equals((Object)int0));
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = "1CU0^S0pb";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("1CU0^S0pb", fastDateParser0.getPattern());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(fastDateParser0);
      
      ZoneInfo zoneInfo1 = (ZoneInfo)fastDateParser0.getTimeZone();
      assertEquals("GMT", zoneInfo1.getID());
      assertEquals("1CU0^S0pb", fastDateParser0.getPattern());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("GMT", zoneInfo0.getID());
      assertSame(zoneInfo1, zoneInfo0);
      assertSame(zoneInfo0, zoneInfo1);
      assertNotNull(zoneInfo1);
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = "z/C4|";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("z/C4|", fastDateParser0.getPattern());
      assertNotNull(fastDateParser0);
      
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals(0, pattern0.flags());
      assertEquals("(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|Acre \u65F6\u95F4|ACT|ADT|AFT|AKDT|AKST|Alma-Ata \u65F6\u95F4|ALMT|AMST|AMT|ANAT|Aqtau \u65F6\u95F4|Aqtobe \u65F6\u95F4|AQTT|ART|AST|AZOST|AZOT|AZST|AZT|BDT|BNT|BOT|BRST|BRT|BST|BTT|CAT|CCT|CDT|CEST|CET|CHADT|Chamorro \u6807\u51C6\u65F6\u95F4|CHAST|Choibalsan \u65F6\u95F4|CHOT|ChST|CHUT|CKT|CLST|CLT|COT|CST|CVT|CWST|CXT|DAVT|DDUT|Dumont-d'Urville \u65F6\u95F4|EASST|EAST|EAT|ECT|EDT|EEST|EET|EGST|EGT|EST|FET|FJST|FJT|FKT|FNT|GALT|GAMT|GET|GFT|GILT|GMT|GMT\\+00:00|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+03:07|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|GST|GYT|HADT|HAST|HKT|HOVT|HST|ICT|IDT|IOT|IRDT|IRKT|IRST|IST|JST|KGT|Kosrae \u65F6\u95F4|KOST|KRAT|KST|LHST|Line \u5C9B\u65F6\u95F4|LINT|Magadan \u65F6\u95F4|MAGT|MART|MAWT|MDT|MeST|MET|MHT|MIST|MMT|Mountain \u590F\u4EE4\u65F6|Mountain \u6807\u51C6\u65F6\u95F4|MSK|MST|MUT|MVT|MYT|NCT|NDT|NFT|Novosibirsk \u65F6\u95F4|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|OMST|Oral \u65F6\u95F4|ORAT|PDT|PET|PETT|PGT|PHOT|PHT|PKT|PMDT|PMST|PONT|PST|PWT|PYST|PYT|QYZT|Qyzylorda \u65F6\u95F4|RET|ROTT|SAKT|SAMT|SAST|SBT|SCT|SGT|SRT|SST|SYOT|Syowa \u65F6\u95F4|TAHT|TFT|TJT|TKT|TLT|TMT|TOT|TVT|ULAT|UTC|UYST|UYT|UZT|VET|VLAT|VOLT|VOST|VUT|WAKT|WAST|WAT|WEST|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WST|YAKT|Yekaterinburg \u65F6\u95F4|YEKT|\u4E0D\u4E39\u65F6\u95F4|\u4E18\u514B\u65F6\u95F4|\u4E1C\u52A0\u65F6\u95F4|\u4E1C\u5370\u5EA6\u5C3C\u897F\u4E9A\u65F6\u95F4|\u4E1C\u5E1D\u6C76\u65F6\u95F4|\u4E1C\u683C\u6797\u5C9B\u590F\u4EE4\u65F6|\u4E1C\u683C\u6797\u5C9B\u65F6\u95F4|\u4E1C\u6B27\u590F\u4EE4\u65F6|\u4E1C\u6B27\u65F6\u95F4|\u4E1C\u90E8\u590F\u4EE4\u65F6|\u4E1C\u90E8\u590F\u4EE4\u65F6 \\(\u5854\u65AF\u9A6C\u5C3C\u4E9A\\)|\u4E1C\u90E8\u590F\u4EE4\u65F6 \\(\u65B0\u5357\u5A01\u5C14\u65AF\\)|\u4E1C\u90E8\u590F\u4EE4\u65F6 \\(\u7EF4\u591A\u5229\u4E9A\\)|\u4E1C\u90E8\u6807\u51C6\u65F6\u95F4|\u4E1C\u90E8\u6807\u51C6\u65F6\u95F4 \\(\u5854\u65AF\u9A6C\u5C3C\u4E9A\\)|\u4E1C\u90E8\u6807\u51C6\u65F6\u95F4 \\(\u65B0\u5357\u5A01\u5C14\u65AF\\)|\u4E1C\u90E8\u6807\u51C6\u65F6\u95F4 \\(\u6606\u58EB\u5170\\)|\u4E1C\u90E8\u6807\u51C6\u65F6\u95F4 \\(\u7EF4\u591A\u5229\u4E9A\\)|\u4E1C\u975E\u65F6\u95F4|\u4E2D\u56FD\u6807\u51C6\u65F6\u95F4|\u4E2D\u592E\u590F\u4EE4\u65F6|\u4E2D\u592E\u590F\u4EE4\u65F6 \\(\u5357\u6FB3\u5927\u5229\u4E9A\\)|\u4E2D\u592E\u590F\u4EE4\u65F6 \\(\u5357\u6FB3\u5927\u5229\u4E9A/\u65B0\u5357\u5A01\u5C14\u65AF\\)|\u4E2D\u592E\u6807\u51C6\u65F6\u95F4|\u4E2D\u592E\u6807\u51C6\u65F6\u95F4 \\(\u5317\u9886\u5730\\)|\u4E2D\u592E\u6807\u51C6\u65F6\u95F4 \\(\u5357\u6FB3\u5927\u5229\u4E9A\\)|\u4E2D\u592E\u6807\u51C6\u65F6\u95F4 \\(\u5357\u6FB3\u5927\u5229\u4E9A/\u65B0\u5357\u5A01\u5C14\u65AF\\)|\u4E2D\u6B27\u590F\u4EE4\u65F6|\u4E2D\u6B27\u65F6\u95F4|\u4E2D\u897F\u90E8\u6807\u51C6\u65F6\u95F4 \\(\u6FB3\u5927\u5229\u4E9A\\)|\u4E2D\u90E8\u5370\u5EA6\u5C3C\u897F\u4E9A\u65F6\u95F4|\u4E2D\u975E\u65F6\u95F4|\u4E4C\u5179\u522B\u514B\u65AF\u5766\u65F6\u95F4|\u4E4C\u62C9\u572D\u590F\u4EE4\u65F6|\u4E4C\u62C9\u572D\u65F6\u95F4|\u4E4C\u65AF\u5B63\u6D85\u62C9\u65F6\u95F4|\u4E54\u6CBB\u4E9A\u65F6\u95F4|\u4E9A\u585E\u62DC\u7136\u590F\u4EE4\u65F6|\u4E9A\u585E\u62DC\u7136\u65F6\u95F4|\u4E9A\u5E93\u6B21\u514B\u65F6\u95F4|\u4E9A\u7F8E\u5C3C\u4E9A\u65F6\u95F4|\u4E9A\u901F\u5C14\u7FA4\u5C9B\u590F\u4EE4\u65F6|\u4E9A\u901F\u5C14\u7FA4\u5C9B\u65F6\u95F4|\u4E9A\u9A6C\u900A\u590F\u4EE4\u65F6|\u4E9A\u9A6C\u900A\u65F6\u95F4|\u4EE5\u8272\u5217\u590F\u4EE4\u65F6|\u4EE5\u8272\u5217\u6807\u51C6\u65F6\u95F4|\u4F0A\u5C14\u5E93\u6B21\u514B\u65F6\u95F4|\u4F0A\u6717\u590F\u4EE4\u65F6|\u4F0A\u6717\u6807\u51C6\u65F6\u95F4|\u4F0F\u5C14\u52A0\u683C\u52D2\u65F6\u95F4|\u4F5B\u5FB7\u89D2\u65F6\u95F4|\u514B\u62C9\u65AF\u8BFA\u4E9A\u5C14\u65AF\u514B\u65F6\u95F4|\u5188\u6BD4\u4E9A\u65F6\u95F4|\u52A0\u62C9\u5DF4\u54E5\u65F6\u95F4|\u52A0\u7EB3\u65F6\u95F4|\u534F\u8C03\u4E16\u754C\u65F6\u95F4|\u5357\u4E54\u6CBB\u4E9A\u6807\u51C6\u65F6\u95F4|\u5357\u975E\u6807\u51C6\u65F6\u95F4|\u5370\u5EA6\u652F\u90A3\u65F6\u95F4|\u5370\u5EA6\u6807\u51C6\u65F6\u95F4|\u5370\u5EA6\u6D0B\u5730\u5E26\u65F6\u95F4|\u5384\u74DC\u591A\u5C14\u65F6\u95F4|\u53E4\u5DF4\u590F\u4EE4\u65F6|\u53E4\u5DF4\u6807\u51C6\u65F6\u95F4|\u53EF\u53EF\u65AF\u7FA4\u5C9B\u65F6\u95F4|\u5409\u4F2F\u7279\u7FA4\u5C9B\u65F6\u95F4|\u5409\u5C14\u5409\u65AF\u65AF\u5766\u65F6\u95F4|\u5410\u9C81\u74E6\u65F6\u95F4|\u54E5\u4F26\u6BD4\u4E9A\u65F6\u95F4|\u571F\u5E93\u66FC\u65F6\u95F4|\u5723\u8BDE\u5C9B\u65F6\u95F4|\u572D\u4E9A\u90A3\u65F6\u95F4|\u5854\u5409\u514B\u65AF\u5766\u65F6\u95F4|\u585E\u5E2D\u5C14\u7FA4\u5C9B\u65F6\u95F4|\u590D\u6D3B\u5C9B\u590F\u4EE4\u65F6|\u590D\u6D3B\u5C9B\u65F6\u95F4|\u590F\u5A01\u5937-\u963F\u7559\u7533\u7FA4\u5C9B\u590F\u4EE4\u65F6|\u590F\u5A01\u5937-\u963F\u7559\u7533\u7FA4\u5C9B\u6807\u51C6\u65F6\u95F4|\u590F\u5A01\u5937\u6807\u51C6\u65F6\u95F4|\u5927\u6EAA\u5730\u5C9B\u65F6\u95F4|\u5927\u897F\u6D0B\u590F\u4EE4\u65F6|\u5927\u897F\u6D0B\u6807\u51C6\u65F6\u95F4|\u592A\u5E73\u6D0B\u590F\u4EE4\u65F6|\u592A\u5E73\u6D0B\u6807\u51C6\u65F6\u95F4|\u59D4\u5185\u745E\u62C9\u65F6\u95F4|\u5A01\u514B\u65F6\u95F4|\u5B5F\u52A0\u62C9\u65F6\u95F4|\u5C3C\u6CCA\u5C14\u65F6\u95F4|\u5DF4\u57FA\u65AF\u5766\u65F6\u95F4|\u5DF4\u5E03\u4E9A\u65B0\u51E0\u5185\u4E9A\u65F6\u95F4|\u5DF4\u62C9\u572D\u590F\u4EE4\u65F6|\u5DF4\u62C9\u572D\u65F6\u95F4|\u5DF4\u897F\u5229\u4E9A\u590F\u4EE4\u65F6|\u5DF4\u897F\u5229\u4E9A\u65F6\u95F4|\u5E1B\u7409\u65F6\u95F4|\u5E93\u4F26\u65F6\u95F4|\u5E93\u514B\u7FA4\u5C9B\u65F6\u95F4|\u5E93\u9875\u5C9B\u65F6\u95F4|\u5F7C\u5F97\u7F57\u5DF4\u752B\u6D1B\u592B\u65AF\u514B\u65F6\u95F4|\u6234\u7EF4\u65AF\u65F6\u95F4|\u6240\u7F57\u95E8\u7FA4\u5C9B\u65F6\u95F4|\u6258\u514B\u52B3\u7FA4\u5C9B\u65F6\u95F4|\u6469\u91CC\u897F\u65AF\u65F6\u95F4|\u6587\u83B1\u65F6\u95F4|\u6590\u6D4E\u590F\u4EE4\u65F6|\u6590\u6D4E\u65F6\u95F4|\u65B0\u52A0\u52D2\u591A\u5C3C\u4E9A\u65F6\u95F4|\u65B0\u52A0\u5761\u65F6\u95F4|\u65B0\u897F\u5170\u590F\u4EE4\u65F6|\u65B0\u897F\u5170\u6807\u51C6\u65F6\u95F4|\u65E5\u672C\u6807\u51C6\u65F6\u95F4|\u667A\u5229\u590F\u4EE4\u65F6|\u667A\u5229\u65F6\u95F4|\u67E5\u8428\u59C6\u590F\u4EE4\u65F6|\u67E5\u8428\u59C6\u6807\u51C6\u65F6\u95F4|\u683C\u6797\u5A01\u6CBB\u65F6\u95F4|\u6885\u7279\u62C9\u5361\u7279\u62C9\u6807\u51C6\u65F6\u95F4|\u6C49\u5FB7\u52A0\u65F6\u95F4|\u6C99\u9A6C\u62C9\u65F6\u95F4|\u6CD5\u5C5E\u5357\u6781\u65F6\u95F4|\u6CD5\u5C5E\u572D\u4E9A\u90A3\u65F6\u95F4|\u6CE2\u65AF\u6E7E\u6807\u51C6\u65F6\u95F4|\u6CE2\u7EB3\u4F69\u65F6\u95F4|\u6D77\u53C2\u5D34\u65F6\u95F4|\u7231\u5C14\u5170\u590F\u4EE4\u65F6|\u73BB\u5229\u7EF4\u4E9A\u65F6\u95F4|\u74E6\u5229\u65AF\u53CA\u798F\u675C\u7EB3\u7FA4\u5C9B\u65F6\u95F4|\u74E6\u5974\u963F\u56FE\u65F6\u95F4|\u7559\u5C3C\u65FA\u5C9B\u65F6\u95F4|\u76AE\u57C3\u5C14\u5C9B\u53CA\u5BC6\u514B\u9686\u5C9B\u590F\u4EE4\u65F6|\u76AE\u57C3\u5C14\u5C9B\u53CA\u5BC6\u514B\u9686\u5C9B\u6807\u51C6\u65F6\u95F4|\u76AE\u7279\u5EB7\u5C9B\u6807\u51C6\u65F6\u95F4|\u798F\u514B\u5170\u7FA4\u5C9B\u65F6\u95F4|\u79D1\u5E03\u591A\u65F6\u95F4|\u79D8\u9C81\u65F6\u95F4|\u7EBD\u5A01\u5C9B\u65F6\u95F4|\u7EBD\u82AC\u5170\u590F\u4EE4\u65F6|\u7EBD\u82AC\u5170\u6807\u51C6\u65F6\u95F4|\u7F05\u7538\u65F6\u95F4|\u7F57\u745F\u62C9\u65F6\u95F4|\u82CF\u5229\u5357\u65F6\u95F4|\u82F1\u56FD\u590F\u4EE4\u65F6|\u83AB\u65AF\u6258\u514B\u65F6\u95F4|\u83AB\u65AF\u79D1\u6807\u51C6\u65F6\u95F4|\u83AB\u68EE\u65F6\u95F4|\u83F2\u5C3C\u514B\u65AF\u7FA4\u5C9B\u65F6\u95F4|\u83F2\u5F8B\u5BBE\u65F6\u95F4|\u8428\u6469\u4E9A\u7FA4\u5C9B\u6807\u51C6\u65F6\u95F4|\u897F\u5370\u5EA6\u5C3C\u897F\u4E9A\u65F6\u95F4|\u897F\u683C\u6797\u5170\u5C9B\u590F\u4EE4\u65F6|\u897F\u683C\u6797\u5170\u5C9B\u65F6\u95F4|\u897F\u6B27\u590F\u4EE4\u65F6|\u897F\u6B27\u65F6\u95F4|\u897F\u8428\u6469\u4E9A\u590F\u4EE4\u65F6|\u897F\u8428\u6469\u4E9A\u65F6\u95F4|\u897F\u90E8\u6807\u51C6\u65F6\u95F4 \\(\u6FB3\u5927\u5229\u4E9A\\)|\u897F\u975E\u590F\u4EE4\u65F6|\u897F\u975E\u65F6\u95F4|\u8BFA\u798F\u514B\u65F6\u95F4|\u8BFA\u9C81\u65F6\u95F4|\u8C6A\u516C\u590F\u4EE4\u65F6|\u8C6A\u516C\u6807\u51C6\u65F6\u95F4|\u8D39\u5C14\u5357\u591A\u5FB7\u8BFA\u7F57\u5C3C\u4E9A\u65F6\u95F4|\u8FDC\u4E1C\u6B27\u65F6\u95F4|\u9102\u6728\u65AF\u514B\u65F6\u95F4|\u963F\u5BCC\u6C57\u65F6\u95F4|\u963F\u62C9\u4F2F\u6807\u51C6\u65F6\u95F4|\u963F\u62C9\u65AF\u52A0\u590F\u4EE4\u65F6|\u963F\u62C9\u65AF\u52A0\u6807\u51C6\u65F6\u95F4|\u963F\u6839\u5EF7\u65F6\u95F4|\u963F\u90A3\u5E95\u6CB3\u65F6\u95F4|\u97E9\u56FD\u6807\u51C6\u65F6\u95F4|\u9999\u6E2F\u65F6\u95F4|\u9A6C\u514B\u8428\u65AF\u65F6\u95F4|\u9A6C\u5C14\u4EE3\u592B\u65F6\u95F4|\u9A6C\u6765\u897F\u4E9A\u65F6\u95F4|\u9A6C\u7ECD\u5C14\u7FA4\u5C9B\u65F6\u95F4|\u9EA6\u5938\u91CC\u5C9B\u65F6\u95F4)/", pattern0.pattern());
      assertEquals("(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|Acre \u65F6\u95F4|ACT|ADT|AFT|AKDT|AKST|Alma-Ata \u65F6\u95F4|ALMT|AMST|AMT|ANAT|Aqtau \u65F6\u95F4|Aqtobe \u65F6\u95F4|AQTT|ART|AST|AZOST|AZOT|AZST|AZT|BDT|BNT|BOT|BRST|BRT|BST|BTT|CAT|CCT|CDT|CEST|CET|CHADT|Chamorro \u6807\u51C6\u65F6\u95F4|CHAST|Choibalsan \u65F6\u95F4|CHOT|ChST|CHUT|CKT|CLST|CLT|COT|CST|CVT|CWST|CXT|DAVT|DDUT|Dumont-d'Urville \u65F6\u95F4|EASST|EAST|EAT|ECT|EDT|EEST|EET|EGST|EGT|EST|FET|FJST|FJT|FKT|FNT|GALT|GAMT|GET|GFT|GILT|GMT|GMT\\+00:00|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+03:07|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|GST|GYT|HADT|HAST|HKT|HOVT|HST|ICT|IDT|IOT|IRDT|IRKT|IRST|IST|JST|KGT|Kosrae \u65F6\u95F4|KOST|KRAT|KST|LHST|Line \u5C9B\u65F6\u95F4|LINT|Magadan \u65F6\u95F4|MAGT|MART|MAWT|MDT|MeST|MET|MHT|MIST|MMT|Mountain \u590F\u4EE4\u65F6|Mountain \u6807\u51C6\u65F6\u95F4|MSK|MST|MUT|MVT|MYT|NCT|NDT|NFT|Novosibirsk \u65F6\u95F4|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|OMST|Oral \u65F6\u95F4|ORAT|PDT|PET|PETT|PGT|PHOT|PHT|PKT|PMDT|PMST|PONT|PST|PWT|PYST|PYT|QYZT|Qyzylorda \u65F6\u95F4|RET|ROTT|SAKT|SAMT|SAST|SBT|SCT|SGT|SRT|SST|SYOT|Syowa \u65F6\u95F4|TAHT|TFT|TJT|TKT|TLT|TMT|TOT|TVT|ULAT|UTC|UYST|UYT|UZT|VET|VLAT|VOLT|VOST|VUT|WAKT|WAST|WAT|WEST|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WST|YAKT|Yekaterinburg \u65F6\u95F4|YEKT|\u4E0D\u4E39\u65F6\u95F4|\u4E18\u514B\u65F6\u95F4|\u4E1C\u52A0\u65F6\u95F4|\u4E1C\u5370\u5EA6\u5C3C\u897F\u4E9A\u65F6\u95F4|\u4E1C\u5E1D\u6C76\u65F6\u95F4|\u4E1C\u683C\u6797\u5C9B\u590F\u4EE4\u65F6|\u4E1C\u683C\u6797\u5C9B\u65F6\u95F4|\u4E1C\u6B27\u590F\u4EE4\u65F6|\u4E1C\u6B27\u65F6\u95F4|\u4E1C\u90E8\u590F\u4EE4\u65F6|\u4E1C\u90E8\u590F\u4EE4\u65F6 \\(\u5854\u65AF\u9A6C\u5C3C\u4E9A\\)|\u4E1C\u90E8\u590F\u4EE4\u65F6 \\(\u65B0\u5357\u5A01\u5C14\u65AF\\)|\u4E1C\u90E8\u590F\u4EE4\u65F6 \\(\u7EF4\u591A\u5229\u4E9A\\)|\u4E1C\u90E8\u6807\u51C6\u65F6\u95F4|\u4E1C\u90E8\u6807\u51C6\u65F6\u95F4 \\(\u5854\u65AF\u9A6C\u5C3C\u4E9A\\)|\u4E1C\u90E8\u6807\u51C6\u65F6\u95F4 \\(\u65B0\u5357\u5A01\u5C14\u65AF\\)|\u4E1C\u90E8\u6807\u51C6\u65F6\u95F4 \\(\u6606\u58EB\u5170\\)|\u4E1C\u90E8\u6807\u51C6\u65F6\u95F4 \\(\u7EF4\u591A\u5229\u4E9A\\)|\u4E1C\u975E\u65F6\u95F4|\u4E2D\u56FD\u6807\u51C6\u65F6\u95F4|\u4E2D\u592E\u590F\u4EE4\u65F6|\u4E2D\u592E\u590F\u4EE4\u65F6 \\(\u5357\u6FB3\u5927\u5229\u4E9A\\)|\u4E2D\u592E\u590F\u4EE4\u65F6 \\(\u5357\u6FB3\u5927\u5229\u4E9A/\u65B0\u5357\u5A01\u5C14\u65AF\\)|\u4E2D\u592E\u6807\u51C6\u65F6\u95F4|\u4E2D\u592E\u6807\u51C6\u65F6\u95F4 \\(\u5317\u9886\u5730\\)|\u4E2D\u592E\u6807\u51C6\u65F6\u95F4 \\(\u5357\u6FB3\u5927\u5229\u4E9A\\)|\u4E2D\u592E\u6807\u51C6\u65F6\u95F4 \\(\u5357\u6FB3\u5927\u5229\u4E9A/\u65B0\u5357\u5A01\u5C14\u65AF\\)|\u4E2D\u6B27\u590F\u4EE4\u65F6|\u4E2D\u6B27\u65F6\u95F4|\u4E2D\u897F\u90E8\u6807\u51C6\u65F6\u95F4 \\(\u6FB3\u5927\u5229\u4E9A\\)|\u4E2D\u90E8\u5370\u5EA6\u5C3C\u897F\u4E9A\u65F6\u95F4|\u4E2D\u975E\u65F6\u95F4|\u4E4C\u5179\u522B\u514B\u65AF\u5766\u65F6\u95F4|\u4E4C\u62C9\u572D\u590F\u4EE4\u65F6|\u4E4C\u62C9\u572D\u65F6\u95F4|\u4E4C\u65AF\u5B63\u6D85\u62C9\u65F6\u95F4|\u4E54\u6CBB\u4E9A\u65F6\u95F4|\u4E9A\u585E\u62DC\u7136\u590F\u4EE4\u65F6|\u4E9A\u585E\u62DC\u7136\u65F6\u95F4|\u4E9A\u5E93\u6B21\u514B\u65F6\u95F4|\u4E9A\u7F8E\u5C3C\u4E9A\u65F6\u95F4|\u4E9A\u901F\u5C14\u7FA4\u5C9B\u590F\u4EE4\u65F6|\u4E9A\u901F\u5C14\u7FA4\u5C9B\u65F6\u95F4|\u4E9A\u9A6C\u900A\u590F\u4EE4\u65F6|\u4E9A\u9A6C\u900A\u65F6\u95F4|\u4EE5\u8272\u5217\u590F\u4EE4\u65F6|\u4EE5\u8272\u5217\u6807\u51C6\u65F6\u95F4|\u4F0A\u5C14\u5E93\u6B21\u514B\u65F6\u95F4|\u4F0A\u6717\u590F\u4EE4\u65F6|\u4F0A\u6717\u6807\u51C6\u65F6\u95F4|\u4F0F\u5C14\u52A0\u683C\u52D2\u65F6\u95F4|\u4F5B\u5FB7\u89D2\u65F6\u95F4|\u514B\u62C9\u65AF\u8BFA\u4E9A\u5C14\u65AF\u514B\u65F6\u95F4|\u5188\u6BD4\u4E9A\u65F6\u95F4|\u52A0\u62C9\u5DF4\u54E5\u65F6\u95F4|\u52A0\u7EB3\u65F6\u95F4|\u534F\u8C03\u4E16\u754C\u65F6\u95F4|\u5357\u4E54\u6CBB\u4E9A\u6807\u51C6\u65F6\u95F4|\u5357\u975E\u6807\u51C6\u65F6\u95F4|\u5370\u5EA6\u652F\u90A3\u65F6\u95F4|\u5370\u5EA6\u6807\u51C6\u65F6\u95F4|\u5370\u5EA6\u6D0B\u5730\u5E26\u65F6\u95F4|\u5384\u74DC\u591A\u5C14\u65F6\u95F4|\u53E4\u5DF4\u590F\u4EE4\u65F6|\u53E4\u5DF4\u6807\u51C6\u65F6\u95F4|\u53EF\u53EF\u65AF\u7FA4\u5C9B\u65F6\u95F4|\u5409\u4F2F\u7279\u7FA4\u5C9B\u65F6\u95F4|\u5409\u5C14\u5409\u65AF\u65AF\u5766\u65F6\u95F4|\u5410\u9C81\u74E6\u65F6\u95F4|\u54E5\u4F26\u6BD4\u4E9A\u65F6\u95F4|\u571F\u5E93\u66FC\u65F6\u95F4|\u5723\u8BDE\u5C9B\u65F6\u95F4|\u572D\u4E9A\u90A3\u65F6\u95F4|\u5854\u5409\u514B\u65AF\u5766\u65F6\u95F4|\u585E\u5E2D\u5C14\u7FA4\u5C9B\u65F6\u95F4|\u590D\u6D3B\u5C9B\u590F\u4EE4\u65F6|\u590D\u6D3B\u5C9B\u65F6\u95F4|\u590F\u5A01\u5937-\u963F\u7559\u7533\u7FA4\u5C9B\u590F\u4EE4\u65F6|\u590F\u5A01\u5937-\u963F\u7559\u7533\u7FA4\u5C9B\u6807\u51C6\u65F6\u95F4|\u590F\u5A01\u5937\u6807\u51C6\u65F6\u95F4|\u5927\u6EAA\u5730\u5C9B\u65F6\u95F4|\u5927\u897F\u6D0B\u590F\u4EE4\u65F6|\u5927\u897F\u6D0B\u6807\u51C6\u65F6\u95F4|\u592A\u5E73\u6D0B\u590F\u4EE4\u65F6|\u592A\u5E73\u6D0B\u6807\u51C6\u65F6\u95F4|\u59D4\u5185\u745E\u62C9\u65F6\u95F4|\u5A01\u514B\u65F6\u95F4|\u5B5F\u52A0\u62C9\u65F6\u95F4|\u5C3C\u6CCA\u5C14\u65F6\u95F4|\u5DF4\u57FA\u65AF\u5766\u65F6\u95F4|\u5DF4\u5E03\u4E9A\u65B0\u51E0\u5185\u4E9A\u65F6\u95F4|\u5DF4\u62C9\u572D\u590F\u4EE4\u65F6|\u5DF4\u62C9\u572D\u65F6\u95F4|\u5DF4\u897F\u5229\u4E9A\u590F\u4EE4\u65F6|\u5DF4\u897F\u5229\u4E9A\u65F6\u95F4|\u5E1B\u7409\u65F6\u95F4|\u5E93\u4F26\u65F6\u95F4|\u5E93\u514B\u7FA4\u5C9B\u65F6\u95F4|\u5E93\u9875\u5C9B\u65F6\u95F4|\u5F7C\u5F97\u7F57\u5DF4\u752B\u6D1B\u592B\u65AF\u514B\u65F6\u95F4|\u6234\u7EF4\u65AF\u65F6\u95F4|\u6240\u7F57\u95E8\u7FA4\u5C9B\u65F6\u95F4|\u6258\u514B\u52B3\u7FA4\u5C9B\u65F6\u95F4|\u6469\u91CC\u897F\u65AF\u65F6\u95F4|\u6587\u83B1\u65F6\u95F4|\u6590\u6D4E\u590F\u4EE4\u65F6|\u6590\u6D4E\u65F6\u95F4|\u65B0\u52A0\u52D2\u591A\u5C3C\u4E9A\u65F6\u95F4|\u65B0\u52A0\u5761\u65F6\u95F4|\u65B0\u897F\u5170\u590F\u4EE4\u65F6|\u65B0\u897F\u5170\u6807\u51C6\u65F6\u95F4|\u65E5\u672C\u6807\u51C6\u65F6\u95F4|\u667A\u5229\u590F\u4EE4\u65F6|\u667A\u5229\u65F6\u95F4|\u67E5\u8428\u59C6\u590F\u4EE4\u65F6|\u67E5\u8428\u59C6\u6807\u51C6\u65F6\u95F4|\u683C\u6797\u5A01\u6CBB\u65F6\u95F4|\u6885\u7279\u62C9\u5361\u7279\u62C9\u6807\u51C6\u65F6\u95F4|\u6C49\u5FB7\u52A0\u65F6\u95F4|\u6C99\u9A6C\u62C9\u65F6\u95F4|\u6CD5\u5C5E\u5357\u6781\u65F6\u95F4|\u6CD5\u5C5E\u572D\u4E9A\u90A3\u65F6\u95F4|\u6CE2\u65AF\u6E7E\u6807\u51C6\u65F6\u95F4|\u6CE2\u7EB3\u4F69\u65F6\u95F4|\u6D77\u53C2\u5D34\u65F6\u95F4|\u7231\u5C14\u5170\u590F\u4EE4\u65F6|\u73BB\u5229\u7EF4\u4E9A\u65F6\u95F4|\u74E6\u5229\u65AF\u53CA\u798F\u675C\u7EB3\u7FA4\u5C9B\u65F6\u95F4|\u74E6\u5974\u963F\u56FE\u65F6\u95F4|\u7559\u5C3C\u65FA\u5C9B\u65F6\u95F4|\u76AE\u57C3\u5C14\u5C9B\u53CA\u5BC6\u514B\u9686\u5C9B\u590F\u4EE4\u65F6|\u76AE\u57C3\u5C14\u5C9B\u53CA\u5BC6\u514B\u9686\u5C9B\u6807\u51C6\u65F6\u95F4|\u76AE\u7279\u5EB7\u5C9B\u6807\u51C6\u65F6\u95F4|\u798F\u514B\u5170\u7FA4\u5C9B\u65F6\u95F4|\u79D1\u5E03\u591A\u65F6\u95F4|\u79D8\u9C81\u65F6\u95F4|\u7EBD\u5A01\u5C9B\u65F6\u95F4|\u7EBD\u82AC\u5170\u590F\u4EE4\u65F6|\u7EBD\u82AC\u5170\u6807\u51C6\u65F6\u95F4|\u7F05\u7538\u65F6\u95F4|\u7F57\u745F\u62C9\u65F6\u95F4|\u82CF\u5229\u5357\u65F6\u95F4|\u82F1\u56FD\u590F\u4EE4\u65F6|\u83AB\u65AF\u6258\u514B\u65F6\u95F4|\u83AB\u65AF\u79D1\u6807\u51C6\u65F6\u95F4|\u83AB\u68EE\u65F6\u95F4|\u83F2\u5C3C\u514B\u65AF\u7FA4\u5C9B\u65F6\u95F4|\u83F2\u5F8B\u5BBE\u65F6\u95F4|\u8428\u6469\u4E9A\u7FA4\u5C9B\u6807\u51C6\u65F6\u95F4|\u897F\u5370\u5EA6\u5C3C\u897F\u4E9A\u65F6\u95F4|\u897F\u683C\u6797\u5170\u5C9B\u590F\u4EE4\u65F6|\u897F\u683C\u6797\u5170\u5C9B\u65F6\u95F4|\u897F\u6B27\u590F\u4EE4\u65F6|\u897F\u6B27\u65F6\u95F4|\u897F\u8428\u6469\u4E9A\u590F\u4EE4\u65F6|\u897F\u8428\u6469\u4E9A\u65F6\u95F4|\u897F\u90E8\u6807\u51C6\u65F6\u95F4 \\(\u6FB3\u5927\u5229\u4E9A\\)|\u897F\u975E\u590F\u4EE4\u65F6|\u897F\u975E\u65F6\u95F4|\u8BFA\u798F\u514B\u65F6\u95F4|\u8BFA\u9C81\u65F6\u95F4|\u8C6A\u516C\u590F\u4EE4\u65F6|\u8C6A\u516C\u6807\u51C6\u65F6\u95F4|\u8D39\u5C14\u5357\u591A\u5FB7\u8BFA\u7F57\u5C3C\u4E9A\u65F6\u95F4|\u8FDC\u4E1C\u6B27\u65F6\u95F4|\u9102\u6728\u65AF\u514B\u65F6\u95F4|\u963F\u5BCC\u6C57\u65F6\u95F4|\u963F\u62C9\u4F2F\u6807\u51C6\u65F6\u95F4|\u963F\u62C9\u65AF\u52A0\u590F\u4EE4\u65F6|\u963F\u62C9\u65AF\u52A0\u6807\u51C6\u65F6\u95F4|\u963F\u6839\u5EF7\u65F6\u95F4|\u963F\u90A3\u5E95\u6CB3\u65F6\u95F4|\u97E9\u56FD\u6807\u51C6\u65F6\u95F4|\u9999\u6E2F\u65F6\u95F4|\u9A6C\u514B\u8428\u65AF\u65F6\u95F4|\u9A6C\u5C14\u4EE3\u592B\u65F6\u95F4|\u9A6C\u6765\u897F\u4E9A\u65F6\u95F4|\u9A6C\u7ECD\u5C14\u7FA4\u5C9B\u65F6\u95F4|\u9EA6\u5938\u91CC\u5C9B\u65F6\u95F4)/", pattern0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("z/C4|", fastDateParser0.getPattern());
      assertNotNull(pattern0);
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = "R@";
      String string1 = ",m;SAKv$";
      assertNotSame(string1, string0);
      
      int int0 = (-12);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("R@", simpleTimeZone0.getID());
      assertEquals(-12, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=R@,offset=-12,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotSame(string0, string1);
      assertNotNull(simpleTimeZone0);
      assertFalse(string0.equals((Object)string1));
      
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string1, simpleTimeZone0, locale0);
      assertEquals(",m;SAKv$", fastDateParser0.getPattern());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("R@", simpleTimeZone0.getID());
      assertEquals(-12, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=R@,offset=-12,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(fastDateParser0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      int int1 = fastDateParser0.hashCode();
      assertEquals(",m;SAKv$", fastDateParser0.getPattern());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("R@", simpleTimeZone0.getID());
      assertEquals(-12, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=R@,offset=-12,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals((-788179410), int1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test31()  throws Throwable  {
      String string0 = "R@";
      String string1 = ",m;SAKv$";
      assertNotSame(string1, string0);
      
      int int0 = (-12);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals(-12, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=R@,offset=-12,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("R@", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotSame(string0, string1);
      assertNotNull(simpleTimeZone0);
      assertFalse(string0.equals((Object)string1));
      
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      assertEquals("JP", locale0.getCountry());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string1, simpleTimeZone0, locale0);
      assertEquals(",m;SAKv$", fastDateParser0.getPattern());
      assertEquals(-12, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=R@,offset=-12,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("R@", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(fastDateParser0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      try {
        Object object0 = fastDateParser0.parseObject(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"R@\" does not match ,(\\p{IsNd}++);(\\p{IsNd}++)
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      int int0 = (-500);
      Integer integer0 = new Integer(int0);
      assertEquals((-500), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      int int1 = 0;
      String string0 = "2S`";
      String string1 = "SST";
      assertNotSame(string1, string0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((int) integer0, string1);
      assertEquals("java.util.SimpleTimeZone[id=SST,offset=-500,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(-500, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("SST", simpleTimeZone0.getID());
      assertNotSame(string1, string0);
      assertNotNull(simpleTimeZone0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string1, simpleTimeZone0, locale0);
      assertEquals("SST", fastDateParser0.getPattern());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("java.util.SimpleTimeZone[id=SST,offset=-500,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(-500, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("SST", simpleTimeZone0.getID());
      assertNotSame(string1, string0);
      assertNotNull(fastDateParser0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      
      ParsePosition parsePosition0 = new ParsePosition(int1);
      assertEquals(0, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertEquals(-1, parsePosition0.getErrorIndex());
      assertNotNull(parsePosition0);
      assertFalse(int1 == int0);
      
      Date date0 = fastDateParser0.parse(string0, parsePosition0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      assertEquals("SST", fastDateParser0.getPattern());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(1, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
      assertEquals(-1, parsePosition0.getErrorIndex());
      assertEquals("java.util.SimpleTimeZone[id=SST,offset=-500,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(-500, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("SST", simpleTimeZone0.getID());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(date0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = "$";
      int int0 = (-162);
      String string1 = "y{%Gz-d0iers%m<7L";
      assertNotSame(string1, string0);
      
      int int1 = 0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0, int0, int1, int0, int0, int0, int1, int0, int0);
      assertEquals("$", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=$,offset=-162,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=-162,startDay=0,startDayOfWeek=-162,startTime=-162,startTimeMode=0,endMode=0,endMonth=-162,endDay=0,endDayOfWeek=-162,endTime=-162,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(-162, simpleTimeZone0.getRawOffset());
      assertNotSame(string0, string1);
      assertNotNull(simpleTimeZone0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string1, simpleTimeZone0, locale0);
      assertEquals("y{%Gz-d0iers%m<7L", fastDateParser0.getPattern());
      assertEquals("$", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=$,offset=-162,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=-162,startDay=0,startDayOfWeek=-162,startTime=-162,startTimeMode=0,endMode=0,endMonth=-162,endDay=0,endDayOfWeek=-162,endTime=-162,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(-162, simpleTimeZone0.getRawOffset());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(fastDateParser0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }
}
