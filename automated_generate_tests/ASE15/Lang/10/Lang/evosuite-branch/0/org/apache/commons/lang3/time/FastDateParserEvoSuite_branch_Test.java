/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:37:20 GMT 2014
 */

package org.apache.commons.lang3.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;


public class FastDateParserEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "zj-$v.rL99|`?oY";
      int int0 = 397;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals("java.util.SimpleTimeZone[id=zj-$v.rL99|`?oY,offset=397,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("zj-$v.rL99|`?oY", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(397, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, simpleTimeZone0, locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("java.util.SimpleTimeZone[id=zj-$v.rL99|`?oY,offset=397,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("zj-$v.rL99|`?oY", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(397, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("zj-$v.rL99|`?oY", fastDateParser0.getPattern());
      assertNotNull(fastDateParser0);
      
      String string1 = "SST";
      assertNotSame(string1, string0);
      
      Date date0 = fastDateParser0.parse(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("Thu Jan 01 11:00:00 GMT 1970", date0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("java.util.SimpleTimeZone[id=zj-$v.rL99|`?oY,offset=397,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("zj-$v.rL99|`?oY", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(397, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("zj-$v.rL99|`?oY", fastDateParser0.getPattern());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(date0);
  }

  @Test
  public void test01()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string0 = "ZN\"iFcIP1M";
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("ZN\"iFcIP1M", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(fastDateParser0);
      
      String string1 = "GMTPacific/Tarawa";
      assertNotSame(string1, string0);
      
      Date date0 = (Date)fastDateParser0.parseObject(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("ZN\"iFcIP1M", fastDateParser0.getPattern());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(date0);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "_\\q{K6S}Jgy";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.UK;
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("_\\q{K6S}Jgy", fastDateParser0.getPattern());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(fastDateParser0);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "^Zxb@3";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(fastDateParser0);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "NZ";
      int int0 = 32;
      String string1 = "`\"E~*EZ!K@&\\c7#";
      assertNotSame(string1, string0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotSame(string0, string1);
      assertEquals("java.util.SimpleTimeZone[id=NZ,offset=32,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(32, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("NZ", simpleTimeZone0.getID());
      assertFalse(string0.equals((Object)string1));
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string1, simpleTimeZone0, locale0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("java.util.SimpleTimeZone[id=NZ,offset=32,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(32, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("NZ", simpleTimeZone0.getID());
      assertEquals("`\"E~*EZ!K@&\\c7#", fastDateParser0.getPattern());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(fastDateParser0);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "3 e,dOuR0";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertNotNull(locale0);
      
      String string1 = ">IFtM\"jb/a,eIzq:";
      assertNotSame(string1, string0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string1, zoneInfo0, locale0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(">IFtM\"jb/a,eIzq:", fastDateParser0.getPattern());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(fastDateParser0);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = ",|1I/0P";
      int int0 = (-1372);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals(",|1I/0P", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,|1I/0P,offset=-1372,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(-1372, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string1 = ":rN@1&T1";
      assertNotSame(string1, string0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string1, simpleTimeZone0, locale0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(",|1I/0P", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,|1I/0P,offset=-1372,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(-1372, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(fastDateParser0);
  }

  @Test
  public void test07()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      String string0 = "7OJAw`@W%[2!jE5.A";
      Locale locale0 = Locale.forLanguageTag(string0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("7OJAw`@W%[2!jE5.A", fastDateParser0.getPattern());
      assertNotNull(fastDateParser0);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "ddVHty?c]bq}.%";
      int int0 = 1;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("ddVHty?c]bq}.%", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=ddVHty?c]bq}.%,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string1 = "z6keU3?vq6h3Q_k#<q";
      assertNotSame(string1, string0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string1, simpleTimeZone0, locale0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("z6keU3?vq6h3Q_k#<q", fastDateParser0.getPattern());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("ddVHty?c]bq}.%", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=ddVHty?c]bq}.%,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(fastDateParser0);
  }

  @Test
  public void test09()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      String string0 = "=._+md/z</";
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("=._+md/z</", fastDateParser0.getPattern());
      assertNotNull(fastDateParser0);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = ",4&MWE-?";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.US;
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals(",4&MWE-?", fastDateParser0.getPattern());
      assertNotNull(fastDateParser0);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "0xlv";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.forLanguageTag(string0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("0xlv", fastDateParser0.getPattern());
      assertNotNull(fastDateParser0);
      
      int int0 = (-494);
      int int1 = fastDateParser0.adjustYear(int0);
      assertEquals(1506, int1);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("0xlv", fastDateParser0.getPattern());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "K{y)o*<8E+@>&Ho";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("K{y)o*<8E+@>&Ho", fastDateParser0.getPattern());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(fastDateParser0);
      
      int int0 = 224;
      int int1 = fastDateParser0.adjustYear(int0);
      assertEquals(2124, int1);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("K{y)o*<8E+@>&Ho", fastDateParser0.getPattern());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test13()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string0 = "\\=05`gV4IAHy@ ||]";
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("\\=05`gV4IAHy@ ||]", fastDateParser0.getPattern());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(fastDateParser0);
  }

  @Test
  public void test14()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      String string0 = "DG?TyXQ'SNSs";
      Locale locale0 = Locale.KOREA;
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("DG?TyXQ'SNSs", fastDateParser0.getPattern());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(fastDateParser0);
  }

  @Test
  public void test15()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.US;
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string0 = "9a$:$]t&/4*ApcQ_:r";
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("9a$:$]t&/4*ApcQ_:r", fastDateParser0.getPattern());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(fastDateParser0);
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = ";'m|xcgRHh";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      String string1 = "DG?TyXQ'SNSs";
      assertNotSame(string1, string0);
      
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotSame(string0, string1);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(";'m|xcgRHh", fastDateParser0.getPattern());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertFalse(string0.equals((Object)string1));
      assertNotNull(fastDateParser0);
      
      try {
        Object object0 = fastDateParser0.parseObject(string1);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"DG?TyXQ'SNSs\" does not match ;
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "3 e,dOuR0";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      assertNotSame(locale1, locale0);
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("3 e,dOuR0", fastDateParser0.getPattern());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(fastDateParser0);
      
      FastDateParser fastDateParser1 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotSame(fastDateParser1, fastDateParser0);
      assertNotSame(locale0, locale1);
      assertEquals("3 e,dOuR0", fastDateParser1.getPattern());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(fastDateParser1);
      
      boolean boolean0 = fastDateParser0.equals((Object) fastDateParser1);
      assertFalse(boolean0);
      assertNotSame(fastDateParser1, fastDateParser0);
      assertNotSame(locale0, locale1);
      assertNotSame(fastDateParser0, fastDateParser1);
      assertNotSame(locale1, locale0);
      assertEquals("3 e,dOuR0", fastDateParser1.getPattern());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("3 e,dOuR0", fastDateParser0.getPattern());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(fastDateParser0.equals((Object)fastDateParser1));
      assertFalse(locale1.equals((Object)locale0));
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = ",|1I/0P";
      int int0 = (-1372);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(",|1I/0P", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,|1I/0P,offset=-1372,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(-1372, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, simpleTimeZone0, locale0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(",|1I/0P", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,|1I/0P,offset=-1372,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(-1372, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals(",|1I/0P", fastDateParser0.getPattern());
      assertNotNull(fastDateParser0);
      
      String string1 = "8[6+sh2S*=VH%j)&BHMv";
      assertNotSame(string1, string0);
      
      FastDateParser fastDateParser1 = new FastDateParser(string1, simpleTimeZone0, locale0);
      assertNotSame(fastDateParser1, fastDateParser0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(",|1I/0P", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,|1I/0P,offset=-1372,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(-1372, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("8[6+sh2S*=VH%j)&BHMv", fastDateParser1.getPattern());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(fastDateParser1);
      
      boolean boolean0 = fastDateParser1.equals((Object) fastDateParser0);
      assertFalse(boolean0);
      assertNotSame(fastDateParser1, fastDateParser0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(fastDateParser0, fastDateParser1);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(",|1I/0P", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,|1I/0P,offset=-1372,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(-1372, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("8[6+sh2S*=VH%j)&BHMv", fastDateParser1.getPattern());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals(",|1I/0P", fastDateParser0.getPattern());
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(fastDateParser0.equals((Object)fastDateParser1));
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "4uA<5g)F+jAs-\\}Zgm";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("4uA<5g)F+jAs-\\}Zgm", fastDateParser0.getPattern());
      assertNotNull(fastDateParser0);
      
      boolean boolean0 = fastDateParser0.equals((Object) string0);
      assertFalse(boolean0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("4uA<5g)F+jAs-\\}Zgm", fastDateParser0.getPattern());
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = ",|1I/0P";
      int int0 = (-1372);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(-1372, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,|1I/0P,offset=-1372,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(",|1I/0P", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, simpleTimeZone0, locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(-1372, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,|1I/0P,offset=-1372,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(",|1I/0P", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(",|1I/0P", fastDateParser0.getPattern());
      assertNotNull(fastDateParser0);
      
      boolean boolean0 = fastDateParser0.equals((Object) fastDateParser0);
      assertTrue(boolean0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(-1372, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,|1I/0P,offset=-1372,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(",|1I/0P", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(",|1I/0P", fastDateParser0.getPattern());
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "0xlv";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.forLanguageTag(string0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string1 = "";
      assertNotSame(string1, string0);
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string1, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "0xlv";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.forLanguageTag(string0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("0xlv", fastDateParser0.getPattern());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(fastDateParser0);
      
      Locale locale1 = fastDateParser0.getLocale();
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("0xlv", fastDateParser0.getPattern());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.toString());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(locale1);
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "&m5,b@Q";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("&m5,b@Q", fastDateParser0.getPattern());
      assertNotNull(fastDateParser0);
      
      int int0 = (-1033);
      ParsePosition parsePosition0 = new ParsePosition(int0);
      assertEquals(-1, parsePosition0.getErrorIndex());
      assertEquals(-1033, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=-1033,errorIndex=-1]", parsePosition0.toString());
      assertNotNull(parsePosition0);
      
      // Undeclared exception!
      try {
        Object object0 = fastDateParser0.parseObject(string0, parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1033
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = "ddVHty?c]bq}.%";
      int int0 = 1;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=ddVHty?c]bq}.%,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("ddVHty?c]bq}.%", simpleTimeZone0.getID());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, simpleTimeZone0, locale0);
      assertEquals("ddVHty?c]bq}.%", fastDateParser0.getPattern());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=ddVHty?c]bq}.%,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("ddVHty?c]bq}.%", simpleTimeZone0.getID());
      assertNotNull(fastDateParser0);
      
      String string1 = fastDateParser0.toString();
      assertEquals("FastDateParser[ddVHty?c]bq}.%,en,ddVHty?c]bq}.%]", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("ddVHty?c]bq}.%", fastDateParser0.getPattern());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=ddVHty?c]bq}.%,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("ddVHty?c]bq}.%", simpleTimeZone0.getID());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = "3 e,dOuR0";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("3 e,dOuR0", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(fastDateParser0);
      
      String string1 = fastDateParser0.getPattern();
      assertEquals("3 e,dOuR0", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("3 e,dOuR0", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(string1);
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = "1@}t ";
      int int0 = 511;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals("1@}t ", simpleTimeZone0.getID());
      assertEquals(511, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=1@}t ,offset=511,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, simpleTimeZone0, locale0);
      assertEquals("1@}t ", simpleTimeZone0.getID());
      assertEquals(511, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=1@}t ,offset=511,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("1@}t ", fastDateParser0.getPattern());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertNotNull(fastDateParser0);
      
      SimpleTimeZone simpleTimeZone1 = (SimpleTimeZone)fastDateParser0.getTimeZone();
      assertSame(simpleTimeZone0, simpleTimeZone1);
      assertSame(simpleTimeZone1, simpleTimeZone0);
      assertEquals("1@}t ", simpleTimeZone0.getID());
      assertEquals(511, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=1@}t ,offset=511,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("1@}t ", fastDateParser0.getPattern());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("1@}t ", simpleTimeZone1.getID());
      assertEquals(511, simpleTimeZone1.getRawOffset());
      assertEquals(0, simpleTimeZone1.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=1@}t ,offset=511,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone1.toString());
      assertEquals(false, simpleTimeZone1.useDaylightTime());
      assertNotNull(simpleTimeZone1);
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = "0xlv";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.forLanguageTag(string0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("0xlv", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(fastDateParser0);
      
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("0", pattern0.pattern());
      assertEquals("0", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("0xlv", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(pattern0);
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = "W|%h.EY";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.US;
      assertEquals("en", locale0.getLanguage());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("W|%h.EY", fastDateParser0.getPattern());
      assertEquals("en", locale0.getLanguage());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertNotNull(fastDateParser0);
      
      int int0 = fastDateParser0.hashCode();
      assertEquals((-1652463387), int0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("W|%h.EY", fastDateParser0.getPattern());
      assertEquals("en", locale0.getLanguage());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = "&m5,b@Q";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("&m5,b@Q", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(fastDateParser0);
      
      try {
        Object object0 = fastDateParser0.parseObject(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"&m5,b@Q\" does not match &(\\p{IsNd}{1}+)5,
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = "ddVHty?c]bq}.%";
      int int0 = 1;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals("java.util.SimpleTimeZone[id=ddVHty?c]bq}.%,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("ddVHty?c]bq}.%", simpleTimeZone0.getID());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, simpleTimeZone0, locale0);
      assertEquals("ddVHty?c]bq}.%", fastDateParser0.getPattern());
      assertEquals("java.util.SimpleTimeZone[id=ddVHty?c]bq}.%,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("ddVHty?c]bq}.%", simpleTimeZone0.getID());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(fastDateParser0);
      
      String string1 = "9|^hcZ2QrRE]%)";
      assertNotSame(string1, string0);
      
      Date date0 = fastDateParser0.parse(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("Thu Jan 08 23:59:59 GMT 1970", date0.toString());
      assertEquals("ddVHty?c]bq}.%", fastDateParser0.getPattern());
      assertEquals("java.util.SimpleTimeZone[id=ddVHty?c]bq}.%,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("ddVHty?c]bq}.%", simpleTimeZone0.getID());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(date0);
  }

  @Test
  public void test31()  throws Throwable  {
      String string0 = "(WzBL|hs%\\Na]y$";
      int int0 = 397;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals("java.util.SimpleTimeZone[id=(WzBL|hs%\\Na]y$,offset=397,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(397, simpleTimeZone0.getRawOffset());
      assertEquals("(WzBL|hs%\\Na]y$", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, simpleTimeZone0, locale0);
      assertEquals("(WzBL|hs%\\Na]y$", fastDateParser0.getPattern());
      assertEquals("java.util.SimpleTimeZone[id=(WzBL|hs%\\Na]y$,offset=397,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(397, simpleTimeZone0.getRawOffset());
      assertEquals("(WzBL|hs%\\Na]y$", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertNotNull(fastDateParser0);
  }

  @Test
  public void test32()  throws Throwable  {
      String string0 = "D+|E+|F+|G+|H+|KE|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("D+|E+|F+|G+|H+|KE|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(fastDateParser0);
  }
}
