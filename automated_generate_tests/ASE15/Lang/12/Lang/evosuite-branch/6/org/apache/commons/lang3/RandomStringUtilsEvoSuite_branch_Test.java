/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:49:52 GMT 2014
 */

package org.apache.commons.lang3;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.util.Random;
import org.apache.commons.lang3.RandomStringUtils;




import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;


public class RandomStringUtilsEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = false;
      char char0 = 'F';
      int int1 = (-534);
      String string0 = RandomStringUtils.random((int) char0, int1, int0, boolean0, boolean0);
      assertEquals("\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA\uFDEA", string0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 0;
      int int1 = 1;
      boolean boolean0 = true;
      char[] charArray0 = new char[4];
      char char0 = 'X';
      charArray0[1] = char0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(int1, int1, int0, boolean0, boolean0, charArray0, (Random) mockRandom0);
      assertEquals("X", string0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertArrayEquals(new char[] {'\u0000', 'X', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 620;
      String string0 = "b75Sv*@";
      String string1 = RandomStringUtils.random(int0, string0);
      assertEquals("bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test3()  throws Throwable  {
      char[] charArray0 = new char[8];
      char char0 = 'J';
      charArray0[2] = char0;
      String string0 = RandomStringUtils.random((int) charArray0[2]);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'J', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 568;
      String string0 = RandomStringUtils.randomAscii(int0);
      assertEqualsstring0);
      assertNotNull(string0);
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = (-1);
      boolean boolean0 = false;
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try {
        String string0 = RandomStringUtils.random(int0, int0, int0, boolean0, boolean0, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomAscii(int0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test
  public void test7()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomNumeric(int0);
      assertEquals("", string0);
      assertNotNull(string0);
  }
}
