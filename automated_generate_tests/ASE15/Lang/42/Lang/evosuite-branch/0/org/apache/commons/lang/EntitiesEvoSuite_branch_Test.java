/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:48:02 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*;
import org.junit.Test;
import java.io.File;
import java.io.OutputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Map;
import org.apache.commons.lang.Entities;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;


public class EntitiesEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      int int0 = 0;
      StringWriter stringWriter0 = new StringWriter(int0);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      String string0 = "m3hkSL&;r";
      entities0.unescape((Writer) stringWriter0, string0);
      assertEquals("m3hkSL&;r", stringWriter0.toString());
  }

  @Test
  public void test01()  throws Throwable  {
      Entities entities0 = Entities.XML;
      assertNotNull(entities0);
      
      String string0 = "A'5t?xaRCOQm";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream((File) mockFile0);
      assertNotNull(mockPrintStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((OutputStream) mockPrintStream0);
      assertNotNull(mockPrintWriter0);
      
      entities0.unescape((Writer) mockPrintWriter0, string0);
  }

  @Test
  public void test02()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      assertNotNull(entities0);
      
      String string0 = "~";
      String string1 = entities0.unescape(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("~", string1);
      assertNotNull(string1);
  }

  @Test
  public void test03()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      assertNotNull(entities0);
      
      String string0 = "fHv[-Ff&Oq";
      String string1 = entities0.unescape(string0);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("fHv[-Ff&Oq", string1);
      assertNotNull(string1);
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = 64;
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(int0);
      assertNotNull(entities_BinaryEntityMap0);
      
      String string0 = "";
      entities_BinaryEntityMap0.add(string0, int0);
      String string1 = entities_BinaryEntityMap0.name(int0);
      assertSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = 64;
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(int0);
      assertNotNull(entities_BinaryEntityMap0);
      
      String string0 = "";
      entities_BinaryEntityMap0.add(string0, int0);
      int int1 = 392;
      entities_BinaryEntityMap0.add(string0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      entities_BinaryEntityMap0.add(string0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test06()  throws Throwable  {
      Entities entities0 = Entities.XML;
      assertNotNull(entities0);
      
      String string0 = "A'5t?xaRCOQm";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream((File) mockFile0);
      assertNotNull(mockPrintStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((OutputStream) mockPrintStream0);
      assertNotNull(mockPrintWriter0);
      
      entities0.escape((Writer) mockPrintWriter0, string0);
  }

  @Test
  public void test07()  throws Throwable  {
      Entities entities0 = Entities.XML;
      //  // Unstable assertion: assertNotNull(entities0);
      
      String string0 = "bdquo";
      int int0 = 0;
      Entities.LookupEntityMap entities_LookupEntityMap0 = new Entities.LookupEntityMap();
      //  // Unstable assertion: assertNotNull(entities_LookupEntityMap0);
      
      int int1 = 1125;
      String string1 = entities_LookupEntityMap0.name(int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertNull(string1);
      
      int int2 = entities0.entityValue(string0);
      //  // Unstable assertion: assertFalse(int2 == int1);
      //  // Unstable assertion: assertFalse(int2 == int0);
      //  // Unstable assertion: assertEquals(8222, int2);
      
      Entities entities1 = Entities.HTML40;
      //  // Unstable assertion: assertFalse(entities1.equals((Object)entities0));
      //  // Unstable assertion: assertNotSame(entities1, entities0);
      //  // Unstable assertion: assertNotNull(entities1);
      
      Entities.fillWithHtml40Entities(entities1);
      //  // Unstable assertion: assertFalse(entities1.equals((Object)entities0));
      //  // Unstable assertion: assertNotSame(entities1, entities0);
      
      Map<Object, String> map0 = null;
      int int3 = (-365);
      //  // Unstable assertion: assertFalse(int3 == int2);
      
      int[] intArray0 = new int[9];
      int int4 = 1566;
      //  // Unstable assertion: assertFalse(int4 == int2);
      
      String string2 = "OhgN`!\"";
      //  // Unstable assertion: assertNotSame(string2, string0);
      
      intArray0[0] = int3;
      intArray0[1] = int1;
      intArray0[2] = int3;
      intArray0[3] = int2;
      intArray0[4] = int1;
      intArray0[5] = int3;
      Entities.HashEntityMap entities_HashEntityMap0 = new Entities.HashEntityMap();
      //  // Unstable assertion: assertNotNull(entities_HashEntityMap0);
      
      Map map1 = entities_HashEntityMap0.mapNameToValue;
      //  // Unstable assertion: assertEquals(true, map1.isEmpty());
      //  // Unstable assertion: assertEquals(0, map1.size());
      //  // Unstable assertion: assertNotNull(map1);
      
      entities_HashEntityMap0.mapValueToName = map1;
      //  // Unstable assertion: assertEquals(true, entities_HashEntityMap0.mapValueToName.isEmpty());
      //  // Unstable assertion: assertEquals(0, entities_HashEntityMap0.mapValueToName.size());
      //  // Unstable assertion: assertEquals(true, map1.isEmpty());
      //  // Unstable assertion: assertEquals(0, map1.size());
      //  // Unstable assertion: assertNotNull(entities_HashEntityMap0.mapValueToName);
      
      intArray0[6] = int1;
      intArray0[7] = int2;
      int int5 = (-1005);
      //  // Unstable assertion: assertFalse(int5 == int2);
      
      intArray0[8] = int5;
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(int1);
      //  // Unstable assertion: assertFalse(int1 == int5);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int1 == int3);
      //  // Unstable assertion: assertFalse(int1 == int2);
      //  // Unstable assertion: assertFalse(int1 == int4);
      //  // Unstable assertion: assertNotNull(entities_BinaryEntityMap0);
      
      String[] stringArray0 = entities_BinaryEntityMap0.names;
      //  // Unstable assertion: assertFalse(int1 == int5);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int1 == int3);
      //  // Unstable assertion: assertFalse(int1 == int2);
      //  // Unstable assertion: assertFalse(int1 == int4);
      //  // Unstable assertion: assertNotNull(stringArray0);
  }

  @Test
  public void test08()  throws Throwable  {
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      int int0 = 0;
      StringWriter stringWriter0 = new StringWriter(int0);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      String string0 = "^&3:o9DvoR;[S#";
      entities0.unescape((Writer) stringWriter0, string0);
      assertEquals("^&3:o9DvoR;[S#", stringWriter0.toString());
  }

  @Test
  public void test09()  throws Throwable  {
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      int int0 = 0;
      StringWriter stringWriter0 = new StringWriter(int0);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      Entities entities1 = Entities.HTML40;
      assertFalse(entities1.equals((Object)entities0));
      assertNotSame(entities1, entities0);
      assertNotNull(entities1);
      
      String string0 = ">\".2xJ\"|r\\^-]K7~";
      String string1 = entities1.escape(string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(entities1.equals((Object)entities0));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(entities1, entities0);
      assertEquals("&gt;&quot;.2xJ&quot;|r\\^-]K7~", string1);
      assertNotNull(string1);
      
      Entities.fillWithHtml40Entities(entities0);
      assertFalse(entities0.equals((Object)entities1));
      assertNotSame(entities0, entities1);
      
      entities0.unescape((Writer) stringWriter0, string1);
      assertEquals(">\".2xJ\"|r\\^-]K7~", stringWriter0.toString());
      assertFalse(string1.equals((Object)string0));
      assertFalse(entities0.equals((Object)entities1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(entities1.equals((Object)entities0));
      assertNotSame(string1, string0);
      assertNotSame(entities0, entities1);
      assertNotSame(string0, string1);
      assertNotSame(entities1, entities0);
  }

  @Test
  public void test10()  throws Throwable  {
      Entities.HashEntityMap entities_HashEntityMap0 = new Entities.HashEntityMap();
      assertNotNull(entities_HashEntityMap0);
      
      String string0 = "piv";
      int int0 = entities_HashEntityMap0.value(string0);
      assertEquals((-1), int0);
      
      String string1 = entities_HashEntityMap0.name(int0);
      assertNull(string1);
  }

  @Test
  public void test11()  throws Throwable  {
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      assertNotNull(entities_TreeEntityMap0);
      
      String string0 = "+ $1/97`~e";
      int int0 = 69;
      entities_TreeEntityMap0.add(string0, int0);
  }

  @Test
  public void test12()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      assertNotNull(entities_BinaryEntityMap0);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "piv";
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      String string1 = entities0.escape(string0);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("piv", string1);
      assertNotNull(string1);
  }
}
