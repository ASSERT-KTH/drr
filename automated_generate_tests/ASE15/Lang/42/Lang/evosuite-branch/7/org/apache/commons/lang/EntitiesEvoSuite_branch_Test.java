/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:00:31 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*;
import org.junit.Test;
import java.io.File;
import java.io.Writer;
import org.apache.commons.lang.Entities;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.junit.runner.RunWith;


public class EntitiesEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      Entities entities0 = Entities.XML;
      assertNotNull(entities0);
      
      String string0 = "|";
      boolean boolean0 = false;
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0, boolean0);
      assertNotNull(mockFileWriter0);
      
      String string1 = "j1a1_&-p&;I&=_Z K\"^";
      assertNotSame(string1, string0);
      
      entities0.unescape((Writer) mockFileWriter0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test01()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      assertNotNull(entities0);
      
      String string0 = "Illegal Load: ";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter((File) mockFile0);
      assertNotNull(mockFileWriter0);
      
      entities0.unescape((Writer) mockFileWriter0, string0);
  }

  @Test
  public void test02()  throws Throwable  {
      Entities entities0 = Entities.XML;
      //  // Unstable assertion: assertNotNull(entities0);
      
      String string0 = "|10'OK)b2#:Y&/]R#1";
      String string1 = entities0.escape(string0);
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertEquals("|10'OK)b2#:Y&amp;/]R#1", string1);
      
      String string2 = entities0.unescape(string1);
      //  // Unstable assertion: assertTrue(string0.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      //  // Unstable assertion: assertTrue(string2.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertNotNull(string2);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertNotSame(string0, string2);
      //  // Unstable assertion: assertNotSame(string2, string0);
      //  // Unstable assertion: assertNotSame(string2, string1);
      //  // Unstable assertion: assertNotSame(string1, string2);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertEquals("|10'OK)b2#:Y&/]R#1", string2);
  }

  @Test
  public void test03()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      String string0 = "acute";
      String string1 = entities0.unescape(string0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("acute", string1);
      
      int int0 = 0;
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap(int0);
      assertNotNull(entities_ArrayEntityMap0);
      
      entities_ArrayEntityMap0.add(string1, int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      int int1 = entities_ArrayEntityMap0.value(string1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals(0, int1);
  }

  @Test
  public void test04()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      String string0 = "acute";
      String string1 = entities0.unescape(string0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("acute", string1);
      
      int int0 = 0;
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap(int0);
      assertNotNull(entities_ArrayEntityMap0);
      
      entities_ArrayEntityMap0.add(string1, int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      String string2 = entities_ArrayEntityMap0.name(int0);
      assertNotNull(string2);
      assertSame(string2, string1);
      assertSame(string2, string0);
      assertEquals("acute", string2);
  }

  @Test
  public void test05()  throws Throwable  {
      Entities.LookupEntityMap entities_LookupEntityMap0 = new Entities.LookupEntityMap();
      assertNotNull(entities_LookupEntityMap0);
      
      int int0 = 1336;
      String string0 = entities_LookupEntityMap0.name(int0);
      assertNull(string0);
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = 18;
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      String string0 = ";BAAy";
      String string1 = entities0.escape(string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(";BAAy", string1);
      
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      assertNotNull(entities_TreeEntityMap0);
      
      entities_TreeEntityMap0.add(string0, int0);
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      
      int int1 = entities_TreeEntityMap0.value(string1);
      assertTrue(int1 == int0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(18, int1);
  }

  @Test
  public void test07()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      String string0 = ";BAAy";
      String string1 = entities0.escape(string0);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(";BAAy", string1);
      
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      assertNotNull(entities_TreeEntityMap0);
      
      Entities.LookupEntityMap entities_LookupEntityMap0 = new Entities.LookupEntityMap();
      assertNotNull(entities_LookupEntityMap0);
      
      int int0 = entities_TreeEntityMap0.value(string0);
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertEquals((-1), int0);
      
      entities_LookupEntityMap0.add(string1, int0);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      int int1 = entities_LookupEntityMap0.value(string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(int1 == int0);
      assertNotSame(string0, string1);
      assertEquals((-1), int1);
  }

  @Test
  public void test08()  throws Throwable  {
      Entities.HashEntityMap entities_HashEntityMap0 = new Entities.HashEntityMap();
      assertNotNull(entities_HashEntityMap0);
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = 1343;
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(int0);
      assertNotNull(entities_BinaryEntityMap0);
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 18;
      Entities.LookupEntityMap entities_LookupEntityMap0 = new Entities.LookupEntityMap();
      assertNotNull(entities_LookupEntityMap0);
      
      String string0 = entities_LookupEntityMap0.name(int0);
      assertNull(string0);
  }

  @Test
  public void test11()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      assertNotNull(entities_BinaryEntityMap0);
  }

  @Test
  public void test12()  throws Throwable  {
      Entities entities0 = new Entities();
      assertNotNull(entities0);
  }

  @Test
  public void test13()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      assertNotNull(entities0);
      
      Entities.fillWithHtml40Entities(entities0);
  }
}
