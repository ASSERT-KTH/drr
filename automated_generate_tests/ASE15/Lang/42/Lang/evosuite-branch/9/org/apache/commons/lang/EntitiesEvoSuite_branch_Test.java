/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:21:13 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*;
import org.junit.Test;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.Writer;
import org.apache.commons.lang.Entities;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class EntitiesEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      String string0 = "Y&&;1(cN&rn+n";
      String string1 = entities0.unescape(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("Y&&;1(cN&rn+n", string1);
      assertNotNull(string1);
  }

  @Test
  public void test01()  throws Throwable  {
      Entities entities0 = Entities.XML;
      assertNotNull(entities0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      String string0 = "!+cOm5dRKMI\"P";
      try {
        entities0.unescape((Writer) pipedWriter0, string0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      Entities entities0 = Entities.XML;
      assertNotNull(entities0);
      
      String string0 = "U*&";
      int int0 = 93;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(int0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      entities0.unescape((Writer) charArrayWriter0, string0);
      assertEquals(3, charArrayWriter0.size());
      assertEquals("U*&", charArrayWriter0.toString());
  }

  @Test
  public void test03()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      String string0 = "8206";
      String string1 = entities0.escape(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("8206", string1);
      assertNotNull(string1);
      
      String string2 = entities0.unescape(string1);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("8206", string2);
      assertNotNull(string2);
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = 5;
      String string0 = "[97y)L Os)O&eB";
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(int0);
      assertNotNull(entities_BinaryEntityMap0);
      
      entities_BinaryEntityMap0.add(string0, int0);
      String string1 = entities0.escape(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("[97y)L Os)O&amp;eB", string1);
      assertNotNull(string1);
      
      int int1 = entities_BinaryEntityMap0.value(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1), int1);
  }

  @Test
  public void test05()  throws Throwable  {
      Entities.LookupEntityMap entities_LookupEntityMap0 = new Entities.LookupEntityMap();
      assertNotNull(entities_LookupEntityMap0);
      
      int int0 = 0;
      String string0 = entities_LookupEntityMap0.name(int0);
      assertNull(string0);
      
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap();
      assertNotNull(entities_ArrayEntityMap0);
      
      entities_ArrayEntityMap0.add(string0, int0);
      String string1 = entities_ArrayEntityMap0.name(int0);
      assertNull(string1);
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = 93;
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(int0);
      assertNotNull(entities_BinaryEntityMap0);
      
      int int1 = 140;
      entities_BinaryEntityMap0.ensureCapacity(int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "Uacute";
      Entities entities0 = Entities.HTML40;
      assertNotNull(entities0);
      
      String string1 = entities0.escape(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertEquals("Uacute", string1);
      assertNotNull(string1);
  }

  @Test
  public void test08()  throws Throwable  {
      Entities.LookupEntityMap entities_LookupEntityMap0 = new Entities.LookupEntityMap();
      assertNotNull(entities_LookupEntityMap0);
      
      int int0 = 1463;
      String string0 = entities_LookupEntityMap0.name(int0);
      assertNull(string0);
  }

  @Test
  public void test09()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      String string0 = "8206";
      String string1 = entities0.escape(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("8206", string1);
      assertNotNull(string1);
      
      int int0 = entities0.entityValue(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertEquals((-1), int0);
  }

  @Test
  public void test10()  throws Throwable  {
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      String string0 = "BN&$}xZBe;#JE|;^";
      String string1 = entities0.unescape(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("BN&$}xZBe;#JE|;^", string1);
      assertNotNull(string1);
  }

  @Test
  public void test11()  throws Throwable  {
      Entities.HashEntityMap entities_HashEntityMap0 = new Entities.HashEntityMap();
      assertNotNull(entities_HashEntityMap0);
  }

  @Test
  public void test12()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      assertNotNull(entities_BinaryEntityMap0);
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 5;
      String string0 = "[97y)L Os)O&eB";
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      String string1 = entities0.escape(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("[97y)L Os)O&amp;eB", string1);
      assertNotNull(string1);
      
      Entities.PrimitiveEntityMap entities_PrimitiveEntityMap0 = new Entities.PrimitiveEntityMap();
      assertNotNull(entities_PrimitiveEntityMap0);
      
      entities_PrimitiveEntityMap0.add(string1, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test14()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      String string0 = "3<-V2\"QW|:/F].v";
      String string1 = entities0.escape(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("3&lt;-V2&quot;QW|:/F].v", string1);
      assertNotNull(string1);
      
      String string2 = entities0.unescape(string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertEquals("3<-V2\"QW|:/F].v", string2);
      assertNotNull(string2);
  }

  @Test
  public void test15()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      Entities.fillWithHtml40Entities(entities0);
  }

  @Test
  public void test16()  throws Throwable  {
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      assertNotNull(entities_TreeEntityMap0);
  }
}
