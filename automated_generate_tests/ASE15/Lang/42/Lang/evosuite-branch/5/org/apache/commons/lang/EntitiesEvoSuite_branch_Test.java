/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:39:51 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*;
import org.junit.Test;
import java.io.File;
import java.io.Writer;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import org.apache.commons.lang.Entities;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.FileSystemHandling;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.junit.runner.RunWith;


public class EntitiesEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      Entities entities0 = Entities.XML;
      assertNotNull(entities0);
      
      String string0 = "&;hu9";
      String string1 = entities0.unescape(string0);
      assertEquals("&;hu9", string1);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
  }

  @Test
  public void test01()  throws Throwable  {
      Entities entities0 = Entities.XML;
      assertNotNull(entities0);
      
      String string0 = "`K2&.U&(.vF ;9";
      String string1 = entities0.unescape(string0);
      assertEquals("`K2&.U&(.vF ;9", string1);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
  }

  @Test
  public void test02()  throws Throwable  {
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      String string0 = "%'G<}z2am7";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean0);
      assertFalse(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter((File) mockFile0, boolean1);
      assertNotNull(mockFileWriter0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      
      entities0.unescape((Writer) mockFileWriter0, string0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test
  public void test03()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      String string0 = "H@S8[v4HG&WYPr";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      boolean boolean0 = true;
      MockFileWriter mockFileWriter0 = new MockFileWriter((File) mockFile0, boolean0);
      assertNotNull(mockFileWriter0);
      
      entities0.unescape((Writer) mockFileWriter0, string0);
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = 0;
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(int0);
      assertNotNull(entities_BinaryEntityMap0);
      
      byte[] byteArray0 = new byte[9];
      String string0 = entities_BinaryEntityMap0.name((int) byteArray0[2]);
      assertNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = 1444;
      String string0 = "";
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(int0);
      assertNotNull(entities_BinaryEntityMap0);
      
      entities_BinaryEntityMap0.add(string0, int0);
      String string1 = entities_BinaryEntityMap0.name(int0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
  }

  @Test
  public void test06()  throws Throwable  {
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      int int0 = 27;
      String string0 = entities0.entityName(int0);
      assertNull(string0);
      
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      assertNotNull(entities_BinaryEntityMap0);
      
      int int1 = 6;
      entities_BinaryEntityMap0.add(string0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      entities_BinaryEntityMap0.add(string0, int0);
      assertFalse(int0 == int1);
      
      entities_BinaryEntityMap0.add(string0, int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = 1444;
      String string0 = "";
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(int0);
      assertNotNull(entities_BinaryEntityMap0);
      
      entities_BinaryEntityMap0.add(string0, int0);
      int int1 = 0;
      entities_BinaryEntityMap0.add(string0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test08()  throws Throwable  {
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      String string0 = "P|8YQ/w?f{k*R;bb";
      boolean boolean0 = false;
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0, boolean0);
      assertNotNull(mockFileWriter0);
      
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-106);
      byteArray0[2] = byte0;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertNotNull(byteBuffer0);
      assertEquals(true, byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.position());
      assertEquals(9, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=9 cap=9]", byteBuffer0.toString());
      assertEquals(false, byteBuffer0.isReadOnly());
      assertEquals(9, byteBuffer0.limit());
      assertEquals(false, byteBuffer0.isDirect());
      assertEquals(9, byteBuffer0.remaining());
      assertEquals(true, byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-106), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      CharBuffer charBuffer0 = byteBuffer0.asCharBuffer();
      assertNotNull(charBuffer0);
      assertEquals(true, byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.position());
      assertEquals(9, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=9 cap=9]", byteBuffer0.toString());
      assertEquals(false, byteBuffer0.isReadOnly());
      assertEquals(9, byteBuffer0.limit());
      assertEquals(false, byteBuffer0.isDirect());
      assertEquals(9, byteBuffer0.remaining());
      assertEquals(true, byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertEquals(false, charBuffer0.isDirect());
      assertEquals(4, charBuffer0.length());
      assertEquals("\u0000\u9600\u0000\u0000", charBuffer0.toString());
      assertEquals(false, charBuffer0.hasArray());
      assertEquals(true, charBuffer0.hasRemaining());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(4, charBuffer0.remaining());
      assertEquals(false, charBuffer0.isReadOnly());
      assertEquals(4, charBuffer0.limit());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-106), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string1 = charBuffer0.toString();
      assertEquals("\u0000\u9600\u0000\u0000", string1);
      assertNotNull(string1);
      assertEquals(true, byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.position());
      assertEquals(9, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=9 cap=9]", byteBuffer0.toString());
      assertEquals(false, byteBuffer0.isReadOnly());
      assertEquals(9, byteBuffer0.limit());
      assertEquals(false, byteBuffer0.isDirect());
      assertEquals(9, byteBuffer0.remaining());
      assertEquals(true, byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertEquals(false, charBuffer0.isDirect());
      assertEquals(4, charBuffer0.length());
      assertEquals("\u0000\u9600\u0000\u0000", charBuffer0.toString());
      assertEquals(false, charBuffer0.hasArray());
      assertEquals(true, charBuffer0.hasRemaining());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(4, charBuffer0.remaining());
      assertEquals(false, charBuffer0.isReadOnly());
      assertEquals(4, charBuffer0.limit());
      assertNotSame(string1, string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-106), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      
      entities0.escape((Writer) mockFileWriter0, string1);
      assertEquals(true, byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.position());
      assertEquals(9, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=9 cap=9]", byteBuffer0.toString());
      assertEquals(false, byteBuffer0.isReadOnly());
      assertEquals(9, byteBuffer0.limit());
      assertEquals(false, byteBuffer0.isDirect());
      assertEquals(9, byteBuffer0.remaining());
      assertEquals(true, byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertEquals(false, charBuffer0.isDirect());
      assertEquals(4, charBuffer0.length());
      assertEquals("\u0000\u9600\u0000\u0000", charBuffer0.toString());
      assertEquals(false, charBuffer0.hasArray());
      assertEquals(true, charBuffer0.hasRemaining());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(4, charBuffer0.remaining());
      assertEquals(false, charBuffer0.isReadOnly());
      assertEquals(4, charBuffer0.limit());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-106), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "P|8YQ/w?f{k*R;bb";
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      assertNotNull(entities_TreeEntityMap0);
      
      int int0 = entities_TreeEntityMap0.value(string0);
      assertEquals((-1), int0);
  }

  @Test
  public void test10()  throws Throwable  {
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      int int0 = 27;
      String string0 = entities0.entityName(int0);
      assertNull(string0);
      
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      assertNotNull(entities_BinaryEntityMap0);
      
      Entities.HashEntityMap entities_HashEntityMap0 = new Entities.HashEntityMap();
      assertNotNull(entities_HashEntityMap0);
      
      entities_HashEntityMap0.add(string0, entities_BinaryEntityMap0.growBy);
      int int1 = entities_HashEntityMap0.value(string0);
      assertEquals(100, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test11()  throws Throwable  {
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      String string0 = "?&@;rYJ1Y Fw";
      String string1 = entities0.unescape(string0);
      assertEquals("?&@;rYJ1Y Fw", string1);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
  }

  @Test
  public void test12()  throws Throwable  {
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      String string0 = "P|8YQ/w?f{k*R;bb";
      String string1 = entities0.unescape(string0);
      assertEquals("P|8YQ/w?f{k*R;bb", string1);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      boolean boolean0 = false;
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0, boolean0);
      assertNotNull(mockFileWriter0);
      assertSame(string0, string1);
      
      entities0.escape((Writer) mockFileWriter0, string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test
  public void test13()  throws Throwable  {
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      String string0 = "%'G<}z2am7";
      int int0 = 10;
      entities0.addEntity(string0, int0);
  }

  @Test
  public void test14()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      String string0 = "237";
      int int0 = entities0.entityValue(string0);
      assertEquals((-1), int0);
  }

  @Test
  public void test15()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      assertNotNull(entities0);
      
      Entities.fillWithHtml40Entities(entities0);
  }

  @Test
  public void test16()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      assertNotNull(entities0);
      
      String string0 = "adtvY$:W{f<b";
      String string1 = entities0.escape(string0);
      assertEquals("adtvY$:W{f&lt;b", string1);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }
}
