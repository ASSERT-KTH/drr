/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:50:10 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*;
import org.junit.Test;
import java.io.StringWriter;
import java.io.Writer;
import org.apache.commons.lang.Entities;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;


public class EntitiesEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      assertNotNull(entities0);
      
      String string0 = "&#;&Fg";
      String string1 = entities0.unescape(string0);
      assertEquals("&#;&Fg", string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "_&&;";
      Entities entities0 = Entities.XML;
      assertNotNull(entities0);
      
      String string1 = entities0.unescape(string0);
      assertEquals("_&&;", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test02()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      assertNotNull(entities0);
      
      String string0 = "&#9;&^&Fg";
      String string1 = entities0.unescape(string0);
      assertEquals("\t&^&Fg", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test03()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      String string0 = "5HN}(n7t.-v*ODv";
      String string1 = entities0.escape(string0);
      assertEquals("5HN}(n7t.-v*ODv", string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap();
      assertNotNull(entities_ArrayEntityMap0);
      
      int int0 = 552;
      entities_ArrayEntityMap0.add(string1, int0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      int int1 = (-2044);
      String string2 = entities_ArrayEntityMap0.name(int1);
      assertFalse(int1 == int0);
      assertNull(string2);
  }

  @Test
  public void test04()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      String string0 = "5HN}(n7t.-v*ODv";
      String string1 = entities0.escape(string0);
      assertEquals("5HN}(n7t.-v*ODv", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap();
      assertNotNull(entities_ArrayEntityMap0);
      
      int int0 = 552;
      entities_ArrayEntityMap0.add(string1, int0);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = entities_ArrayEntityMap0.name(int0);
      assertEquals("5HN}(n7t.-v*ODv", string2);
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
  }

  @Test
  public void test05()  throws Throwable  {
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      String string0 = "un_!Vluhajk";
      String string1 = entities0.escape(string0);
      assertEquals("un_!Vluhajk", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test06()  throws Throwable  {
      Entities.HashEntityMap entities_HashEntityMap0 = new Entities.HashEntityMap();
      assertNotNull(entities_HashEntityMap0);
      
      int int0 = 2111;
      String string0 = entities_HashEntityMap0.name(int0);
      assertNull(string0);
      
      Entities.LookupEntityMap entities_LookupEntityMap0 = new Entities.LookupEntityMap();
      assertNotNull(entities_LookupEntityMap0);
      
      int int1 = entities_LookupEntityMap0.value(string0);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test07()  throws Throwable  {
      Entities.HashEntityMap entities_HashEntityMap0 = new Entities.HashEntityMap();
      assertNotNull(entities_HashEntityMap0);
      
      String string0 = "hU&^;";
      int int0 = 0;
      entities_HashEntityMap0.add(string0, int0);
      int int1 = entities_HashEntityMap0.value(string0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(int1);
      assertTrue(int1 == int0);
      assertNotNull(entities_BinaryEntityMap0);
  }

  @Test
  public void test08()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      assertNotNull(entities_BinaryEntityMap0);
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = 552;
      Entities.LookupEntityMap entities_LookupEntityMap0 = new Entities.LookupEntityMap();
      assertNotNull(entities_LookupEntityMap0);
      
      String string0 = entities_LookupEntityMap0.name(int0);
      assertNull(string0);
  }

  @Test
  public void test10()  throws Throwable  {
      Entities.HashEntityMap entities_HashEntityMap0 = new Entities.HashEntityMap();
      assertNotNull(entities_HashEntityMap0);
      
      String string0 = "hU&^;";
      int int0 = entities_HashEntityMap0.value(string0);
      assertEquals((-1), int0);
      
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = null;
      try {
        entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "hU&^;";
      Entities entities0 = Entities.XML;
      //  // Unstable assertion: assertNotNull(entities0);
      
      StringWriter stringWriter0 = new StringWriter();
      //  // Unstable assertion: assertEquals("", stringWriter0.toString());
      //  // Unstable assertion: assertNotNull(stringWriter0);
      
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((Writer) stringWriter0, boolean0);
      //  // Unstable assertion: assertEquals("", stringWriter0.toString());
      //  // Unstable assertion: assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
      try {
        entities0.unescape((Writer) mockPrintWriter0, string0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      Entities.fillWithHtml40Entities(entities0);
  }

  @Test
  public void test13()  throws Throwable  {
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      assertNotNull(entities_TreeEntityMap0);
  }
}
