/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:01:26 GMT 2014
 */

package org.apache.commons.lang3.time;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.text.ParsePosition;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDateFormat;



import org.evosuite.runtime.System;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;


public class FastDateFormatEvoSuite_branch_Test  {

  @Test
  public void test00() {}
//   @Test
//   public void test00()  throws Throwable  {
//       int int0 = 0;
//       Locale locale0 = Locale.CANADA;
//       assertNotNull(locale0);
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("CAN", locale0.getISO3Country());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, locale0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals(57, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy h:mm:ss 'o''clock' a z", fastDateFormat0.getPattern());
//       
//       MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
//       assertNotNull(mockDate0);
//       assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
//       
//       String string0 = "QOS\")yg\"d";
//       StringBuffer stringBuffer0 = new StringBuffer(string0);
//       assertNotNull(stringBuffer0);
//       assertEquals("QOS\")yg\"d", stringBuffer0.toString());
//       assertEquals(9, stringBuffer0.length());
//       assertEquals(25, stringBuffer0.capacity());
//       
//       StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
//       assertNotNull(stringBuffer1);
//       assertSame(stringBuffer0, stringBuffer1);
//       assertSame(stringBuffer1, stringBuffer0);
//       assertEquals(106, stringBuffer0.capacity());
//       assertEquals(58, stringBuffer0.length());
//       assertEquals("QOS\")yg\"dSunday, December 31, 1899 12:00:00 o'clock AM GMT", stringBuffer0.toString());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
//       assertEquals(57, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy h:mm:ss 'o''clock' a z", fastDateFormat0.getPattern());
//       assertEquals(58, stringBuffer1.length());
//       assertEquals(106, stringBuffer1.capacity());
//       assertEquals("QOS\")yg\"dSunday, December 31, 1899 12:00:00 o'clock AM GMT", stringBuffer1.toString());
//   }

  @Test
  public void test01() {}
//   @Test
//   public void test01()  throws Throwable  {
//       String string0 = "yyyy/M/d a kh:mm";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("yyyy/M/d a kh:mm", fastDateFormat0.getPattern());
//       assertEquals(27, fastDateFormat0.getMaxLengthEstimate());
//       
//       int int0 = 0;
//       int int1 = (-1457);
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int1, int1, int1, int1, int1);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=-1457,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1457,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1457,HOUR_OF_DAY=-1457,MINUTE=-1457,SECOND=-1457,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       
//       String string1 = fastDateFormat0.format((Object) mockGregorianCalendar0);
//       assertNotNull(string1);
//       assertEquals("0127/6/3 AM 66:18", string1);
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-66130364477000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=127,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=3,DAY_OF_YEAR=154,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=18,SECOND=43,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("yyyy/M/d a kh:mm", fastDateFormat0.getPattern());
//       assertEquals(27, fastDateFormat0.getMaxLengthEstimate());
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//   }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "yyyy/M/d a kh:mm";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
      assertNotNull(fastDateFormat0);
      assertEquals(27, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("yyyy/M/d a kh:mm", fastDateFormat0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      
      int int0 = 0;
      int int1 = (-1457);
      MockDate mockDate0 = new MockDate(int1, int0, int0);
      assertNotNull(mockDate0);
      assertEquals("Thu Dec 31 00:00:00 GMT 442", mockDate0.toString());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      String string1 = fastDateFormat0.format((Date) mockDate0);
      assertNotNull(string1);
      assertEquals("0442/12/31 AM 2412:00", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(27, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("yyyy/M/d a kh:mm", fastDateFormat0.getPattern());
      assertEquals("Thu Dec 31 00:00:00 GMT 442", mockDate0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
  }

  @Test
  public void test03() {}
//   @Test
//   public void test03()  throws Throwable  {
//       TimeZone timeZone0 = null;
//       Locale locale0 = Locale.KOREAN;
//       assertNotNull(locale0);
//       assertEquals("kor", locale0.getISO3Language());
//       assertEquals("ko", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getCountry());
//       assertEquals("ko", locale0.getLanguage());
//       assertEquals("", locale0.getISO3Country());
//       
//       long long0 = (-1017L);
//       System.setCurrentTimeMillis(long0);
//       String string0 = "D|$@";
//       FastDateFormat fastDateFormat0 = new FastDateFormat(string0, timeZone0, locale0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("kor", locale0.getISO3Language());
//       assertEquals("ko", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getCountry());
//       assertEquals("ko", locale0.getLanguage());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals(7, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("D|$@", fastDateFormat0.getPattern());
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-1017,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=58,MILLISECOND=983,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       
//       String string1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
//       assertNotNull(string1);
//       assertEquals("365|$@", string1);
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-1017,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=58,MILLISECOND=983,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("kor", locale0.getISO3Language());
//       assertEquals("ko", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getCountry());
//       assertEquals("ko", locale0.getLanguage());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals(7, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("D|$@", fastDateFormat0.getPattern());
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//   }

  @Test
  public void test04()  throws Throwable  {
      int int0 = 3;
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(8, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("yy/MM/dd", fastDateFormat0.getPattern());
      
      String string0 = "";
      TimeZone timeZone0 = null;
      FastDateFormat fastDateFormat1 = new FastDateFormat(string0, timeZone0, locale0);
      assertNotNull(fastDateFormat1);
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", fastDateFormat1.getPattern());
      assertEquals(0, fastDateFormat1.getMaxLengthEstimate());
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      
      boolean boolean0 = fastDateFormat1.equals((Object) fastDateFormat0);
      assertFalse(boolean0);
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertNotSame(fastDateFormat0, fastDateFormat1);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", fastDateFormat1.getPattern());
      assertEquals(0, fastDateFormat1.getMaxLengthEstimate());
      assertEquals(8, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("yy/MM/dd", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
  }

  @Test
  public void test05() {}
//   @Test
//   public void test05()  throws Throwable  {
//       int int0 = 0;
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       String string0 = "dd/MM/yy HH:mm";
//       Locale locale0 = new Locale(string0);
//       assertNotNull(locale0);
//       assertEquals("", locale0.getCountry());
//       assertEquals("dd/mm/yy hh:mm", locale0.toString());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("dd/mm/yy hh:mm", locale0.getLanguage());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, (TimeZone) zoneInfo0, locale0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("", locale0.getCountry());
//       assertEquals("dd/mm/yy hh:mm", locale0.toString());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("dd/mm/yy hh:mm", locale0.getLanguage());
//       assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       
//       boolean boolean0 = fastDateFormat0.equals((Object) mockGregorianCalendar0);
//       assertFalse(boolean0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("", locale0.getCountry());
//       assertEquals("dd/mm/yy hh:mm", locale0.toString());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("dd/mm/yy hh:mm", locale0.getLanguage());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
//   }

  @Test
  public void test06()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertNotNull(fastDateFormat0);
      assertEquals("dd/MM/yy HH:mm", fastDateFormat0.getPattern());
      assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
      
      Object object0 = null;
      // Undeclared exception!
      try {
        String string0 = fastDateFormat0.format(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: <null>
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = 0;
      String string0 = "dd/MM/yy H>:mm";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
      assertNotNull(fastDateFormat0);
      assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("dd/MM/yy H>:mm", fastDateFormat0.getPattern());
      
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
      assertNotNull(mockDate0);
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      
      String string1 = fastDateFormat0.format((Object) mockDate0);
      assertNotNull(string1);
      assertEquals("31/12/99 0>:00", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("dd/MM/yy H>:mm", fastDateFormat0.getPattern());
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "dvFB1Y\"_&x";
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: v
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = (-3407);
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      
      String string0 = "";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(-3407, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-3407,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      
      String string1 = "-7u";
      assertNotSame(string1, string0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string1, (TimeZone) simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "_tn";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "r_E5Cm";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "pjHS";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: p
         //
      }
  }

  @Test
  public void test13() {}
//   @Test
//   public void test13()  throws Throwable  {
//       String string0 = "1 ,";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       String string1 = "org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField";
//       assertNotSame(string1, string0);
//       
//       Locale locale0 = Locale.JAPAN;
//       assertNotNull(locale0);
//       assertEquals("JPN", locale0.getISO3Country());
//       assertEquals("jpn", locale0.getISO3Language());
//       assertEquals("ja", locale0.getLanguage());
//       assertEquals("JP", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       assertEquals("ja_JP", locale0.toString());
//       
//       FastDateFormat fastDateFormat0 = null;
//       try {
//         fastDateFormat0 = new FastDateFormat(string1, zoneInfo0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: o
//          //
//       }
//   }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "i;e9jAZn4=ve$O";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: i
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "%/E!ghQ\\ Bv'zfNiCt";
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: g
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      String string0 = "f/HZ,K32?dYW=yD;8";
      Locale locale0 = new Locale(string0);
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("f/hz,k32?dyw=yd;8", locale0.toString());
      assertEquals("f/hz,k32?dyw=yd;8", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "]/*e";
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: e
         //
      }
  }

  @Test
  public void test18() {}
//   @Test
//   public void test18()  throws Throwable  {
//       String string0 = "{c{1h";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       Locale locale0 = Locale.FRANCE;
//       assertNotNull(locale0);
//       assertEquals("", locale0.getVariant());
//       assertEquals("FR", locale0.getCountry());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("fr_FR", locale0.toString());
//       assertEquals("fr", locale0.getLanguage());
//       assertEquals("FRA", locale0.getISO3Country());
//       
//       FastDateFormat fastDateFormat0 = null;
//       try {
//         fastDateFormat0 = new FastDateFormat(string0, zoneInfo0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: c
//          //
//       }
//   }

  @Test
  public void test19() {}
//   @Test
//   public void test19()  throws Throwable  {
//       String string0 = "b";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       Locale locale0 = Locale.SIMPLIFIED_CHINESE;
//       assertNotNull(locale0);
//       assertEquals("", locale0.getVariant());
//       assertEquals("zh_CN", locale0.toString());
//       assertEquals("CHN", locale0.getISO3Country());
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("zh", locale0.getLanguage());
//       
//       FastDateFormat fastDateFormat0 = null;
//       try {
//         fastDateFormat0 = new FastDateFormat(string0, zoneInfo0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: b
//          //
//       }
//   }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "Ka(x{@|!DhgW";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: x
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "G,zY,oc{7a55";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Y
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      String string0 = "X5";
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: X
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
      assertNotNull(zoneInfo0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("GMT", zoneInfo0.getID());
      
      String string0 = "V;MC[9c:CZ";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: V
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = "Unknown class: ";
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = "The validated object is null";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.forLanguageTag(string0);
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = "R.g6";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: R
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = "#Q;;QbY/FYk";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Q
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = "s,EyP&v";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = ".(O=G";
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: O
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      
      String string0 = "Negative values should not be possible";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      String string0 = "0LRA{+1v^:o";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: L
         //
      }
  }

  @Test
  public void test32() {}
//   @Test
//   public void test32()  throws Throwable  {
//       String string0 = "8Km>lK5";
//       int int0 = (-289);
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-289,MONTH=-289,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-289,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-289,HOUR_OF_DAY=-289,MINUTE=-289,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-289,MONTH=-289,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-289,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-289,HOUR_OF_DAY=-289,MINUTE=-289,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       
//       Locale locale0 = Locale.PRC;
//       assertNotNull(locale0);
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       assertEquals("zh_CN", locale0.toString());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("CHN", locale0.getISO3Country());
//       assertEquals("zh", locale0.getLanguage());
//       
//       FastDateFormat fastDateFormat0 = null;
//       try {
//         fastDateFormat0 = new FastDateFormat(string0, zoneInfo0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: l
//          //
//       }
//   }

  @Test
  public void test33() {}
//   @Test
//   public void test33()  throws Throwable  {
//       String string0 = "0$J_$ff:ynYcbT";
//       Locale locale0 = Locale.GERMAN;
//       assertNotNull(locale0);
//       assertEquals("", locale0.getCountry());
//       assertEquals("de", locale0.toString());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("deu", locale0.getISO3Language());
//       assertEquals("de", locale0.getLanguage());
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: J
//          //
//       }
//   }

  @Test
  public void test34()  throws Throwable  {
      String string0 = "/? _0 Fjw";
      int int0 = 1;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals("/? _0 Fjw", simpleTimeZone0.getID());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=/? _0 Fjw,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: j
         //
      }
  }

  @Test
  public void test35()  throws Throwable  {
      String string0 = "Dq?ojSWe\"||p";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
      }
  }

  @Test
  public void test36()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      String string0 = "C<'3Mxq";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
      }
  }

  @Test
  public void test37()  throws Throwable  {
      String string0 = "m_GAgko}%(H";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      String string0 = "w%,h,IO*u }:x?aA~";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
      }
  }

  @Test
  public void test39()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, (TimeZone) zoneInfo0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat0.getPattern());
      assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
  }

  @Test
  public void test40()  throws Throwable  {
      int int0 = 3;
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals(8, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("yy/MM/dd", fastDateFormat0.getPattern());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)fastDateFormat0.getTimeZone();
      assertNotNull(zoneInfo0);
      assertEquals(8, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("yy/MM/dd", fastDateFormat0.getPattern());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("GMT", zoneInfo0.getID());
  }

  @Test
  public void test41()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.GERMANY;
      //  // Unstable assertion: assertNotNull(locale0);
      //  // Unstable assertion: assertEquals("de", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("de_DE", locale0.toString());
      //  // Unstable assertion: assertEquals("DE", locale0.getCountry());
      //  // Unstable assertion: assertEquals("DEU", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("deu", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, locale0);
      //  // Unstable assertion: assertNotNull(fastDateFormat0);
      //  // Unstable assertion: assertEquals("EEEE, d. MMMM yyyy", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals(32, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("de", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("de_DE", locale0.toString());
      //  // Unstable assertion: assertEquals("DE", locale0.getCountry());
      //  // Unstable assertion: assertEquals("DEU", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("deu", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      
      int int1 = fastDateFormat0.hashCode();
      //  // Unstable assertion: assertEquals((-1292961273), int1);
      //  // Unstable assertion: assertEquals("EEEE, d. MMMM yyyy", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals(32, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("de", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("de_DE", locale0.toString());
      //  // Unstable assertion: assertEquals("DE", locale0.getCountry());
      //  // Unstable assertion: assertEquals("DEU", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("deu", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
  }

  @Test
  public void test42() {}
//   @Test
//   public void test42()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat0);
//       assertEquals("dd/MM/yy HH:mm", fastDateFormat0.getPattern());
//       assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
//       
//       Locale locale0 = fastDateFormat0.getLocale();
//       assertNotNull(locale0);
//       assertEquals("dd/MM/yy HH:mm", fastDateFormat0.getPattern());
//       assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("fr", locale0.toString());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("fr", locale0.getLanguage());
//   }

  @Test
  public void test43() {}
//   @Test
//   public void test43()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(11, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("HH' h 'mm z", fastDateFormat0.getPattern());
//   }

  @Test
  public void test44()  throws Throwable  {
      int int0 = (-1473);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1473
         //
      }
  }

  @Test
  public void test45()  throws Throwable  {
      int int0 = 1430;
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1430
         //
      }
  }

  @Test
  public void test46()  throws Throwable  {
      int int0 = (-1473);
      String string0 = "Z";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
      assertNotNull(fastDateFormat0);
      assertEquals(5, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("Z", fastDateFormat0.getPattern());
      
      Long long0 = new Long((long) int0);
      assertEquals((-1473L), (long)long0);
      
      String string1 = fastDateFormat0.format((Object) long0);
      assertNotNull(string1);
      assertEquals("+0000", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(5, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("Z", fastDateFormat0.getPattern());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test47()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals(32, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("EEEE, d. MMMM yyyy", fastDateFormat0.getPattern());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      
      String string0 = fastDateFormat0.getPattern();
      assertNotNull(string0);
      assertEquals("EEEE, d. MMMM yyyy", string0);
      assertEquals(32, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("EEEE, d. MMMM yyyy", fastDateFormat0.getPattern());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      
      ParsePosition parsePosition0 = new ParsePosition(int0);
      assertNotNull(parsePosition0);
      assertEquals(0, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertEquals(-1, parsePosition0.getErrorIndex());
      
      Object object0 = fastDateFormat0.parseObject(string0, parsePosition0);
      assertNull(object0);
      assertEquals(32, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("EEEE, d. MMMM yyyy", fastDateFormat0.getPattern());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals(0, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=0]", parsePosition0.toString());
      assertEquals(0, parsePosition0.getErrorIndex());
  }

  @Test
  public void test48() {}
//   @Test
//   public void test48()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(28, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("EEEE d MMMM yyyy", fastDateFormat0.getPattern());
//   }

  @Test
  public void test49() {}
//   @Test
//   public void test49()  throws Throwable  {
//       int int0 = 0;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, (TimeZone) zoneInfo0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("EEEE d MMMM yyyy HH' h 'mm z", fastDateFormat0.getPattern());
//       assertEquals(40, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("GMT", zoneInfo0.getID());
//   }

  @Test
  public void test50() {}
//   @Test
//   public void test50()  throws Throwable  {
//       String string0 = "yyyy/M/d a kh:mm";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(27, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy/M/d a kh:mm", fastDateFormat0.getPattern());
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       int int0 = 0;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       String string1 = fastDateFormat0.format((Object) mockGregorianCalendar0);
//       assertNotNull(string1);
//       assertEquals("0002/12/31 AM 2412:00", string1);
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(27, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy/M/d a kh:mm", fastDateFormat0.getPattern());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//   }

  @Test
  public void test51()  throws Throwable  {
      int int0 = 1;
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals("d MMMM yyyy", fastDateFormat0.getPattern());
      assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      
      String string0 = fastDateFormat0.toString();
      assertNotNull(string0);
      assertEquals("FastDateFormat[d MMMM yyyy]", string0);
      assertEquals("d MMMM yyyy", fastDateFormat0.getPattern());
      assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
  }

  @Test
  public void test52()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertNotNull(fastDateFormat0);
      assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("dd/MM/yy HH:mm", fastDateFormat0.getPattern());
      
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      assertEquals(14, int0);
      assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("dd/MM/yy HH:mm", fastDateFormat0.getPattern());
  }

  @Test
  public void test53() {}
//   @Test
//   public void test53()  throws Throwable  {
//       String string0 = "[{ZZ";
//       Locale locale0 = Locale.FRANCE;
//       assertNotNull(locale0);
//       assertEquals("FR", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       assertEquals("fr", locale0.getLanguage());
//       assertEquals("FRA", locale0.getISO3Country());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("fr_FR", locale0.toString());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("FR", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       assertEquals("fr", locale0.getLanguage());
//       assertEquals("FRA", locale0.getISO3Country());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("fr_FR", locale0.toString());
//       assertEquals("[{ZZ", fastDateFormat0.getPattern());
//       assertEquals(7, fastDateFormat0.getMaxLengthEstimate());
//       
//       boolean boolean0 = fastDateFormat0.equals((Object) fastDateFormat0);
//       assertTrue(boolean0);
//       assertEquals("FR", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       assertEquals("fr", locale0.getLanguage());
//       assertEquals("FRA", locale0.getISO3Country());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("fr_FR", locale0.toString());
//       assertEquals("[{ZZ", fastDateFormat0.getPattern());
//       assertEquals(7, fastDateFormat0.getMaxLengthEstimate());
//       
//       int int0 = 0;
//       String string1 = "";
//       assertNotSame(string1, string0);
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string1);
//       assertNotNull(zoneInfo0);
//       assertNotSame(string1, string0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertFalse(string1.equals((Object)string0));
//       
//       int int1 = 2;
//       String string2 = "FastDateFormat[";
//       assertNotSame(string2, string0);
//       assertNotSame(string2, string1);
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) zoneInfo0);
//       assertNotNull(mockGregorianCalendar0);
//       assertNotSame(string1, string0);
//       assertNotSame(string1, string2);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string1.equals((Object)string2));
//       
//       int int2 = 13;
//       long long0 = 1949L;
//       int int3 = 3600000;
//       char char0 = '&';
//       int int4 = 15;
//       FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(int0, int0);
//       assertNotNull(fastDateFormat1);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertEquals(40, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals("EEEE d MMMM yyyy HH' h 'mm z", fastDateFormat1.getPattern());
//       assertFalse(int0 == int3);
//       assertFalse(int0 == int4);
//       assertFalse(int0 == int1);
//       assertFalse(int0 == int2);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       
//       // Undeclared exception!
//       try {
//         String string3 = fastDateFormat0.format((Object) fastDateFormat1);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Unknown class: org.apache.commons.lang3.time.FastDateFormat
//          //
//       }
//   }

  @Test
  public void test54()  throws Throwable  {
      String string0 = "#S}S8kBz";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: B
         //
      }
  }

  @Test
  public void test55()  throws Throwable  {
      int int0 = (-3407);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertNotNull(fastDateFormat0);
      assertEquals("dd/MM/yy HH:mm", fastDateFormat0.getPattern());
      assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
      
      String string0 = fastDateFormat0.format((long) int0);
      assertNotNull(string0);
      assertEquals("31/12/69 23:59", string0);
      assertEquals("dd/MM/yy HH:mm", fastDateFormat0.getPattern());
      assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test
  public void test56() {}
//   @Test
//   public void test56()  throws Throwable  {
//       int int0 = 3;
//       Locale locale0 = Locale.JAPANESE;
//       assertNotNull(locale0);
//       assertEquals("", locale0.getVariant());
//       assertEquals("ja", locale0.getLanguage());
//       assertEquals("", locale0.getCountry());
//       assertEquals("jpn", locale0.getISO3Language());
//       assertEquals("ja", locale0.toString());
//       assertEquals("", locale0.getISO3Country());
//       
//       String string0 = "";
//       TimeZone timeZone0 = null;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, timeZone0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("dd/MM/yy", fastDateFormat0.getPattern());
//       assertEquals(8, fastDateFormat0.getMaxLengthEstimate());
//       
//       String string1 = "Negative values should not be possible";
//       assertNotSame(string1, string0);
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(int0, timeZone0);
//       assertNotNull(fastDateFormat1);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertEquals(8, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals("dd/MM/yy", fastDateFormat1.getPattern());
//       assertTrue(fastDateFormat1.equals((Object)fastDateFormat0));
//       
//       int int1 = 13;
//       int int2 = (-1564);
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int1, int2, int2);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=13,MONTH=-1564,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1564,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertFalse(int2 == int1);
//       assertFalse(int2 == int0);
//       assertFalse(int1 == int0);
//       assertFalse(int1 == int2);
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=13,MONTH=-1564,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1564,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertFalse(int2 == int1);
//       assertFalse(int2 == int0);
//       assertFalse(int1 == int0);
//       assertFalse(int1 == int2);
//       
//       boolean boolean0 = true;
//       int int3 = 1;
//       Locale locale1 = null;
//       // Undeclared exception!
//       try {
//         String string2 = FastDateFormat.getTimeZoneDisplay(zoneInfo0, boolean0, int3, locale1);
//         fail("Expecting exception: NullPointerException");
//       
//       } catch(NullPointerException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test57() {}
//   @Test
//   public void test57()  throws Throwable  {
//       Locale locale0 = Locale.JAPANESE;
//       assertNotNull(locale0);
//       assertEquals("jpn", locale0.getISO3Language());
//       assertEquals("ja", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("ja", locale0.toString());
//       assertEquals("", locale0.getCountry());
//       
//       String string0 = "W_";
//       TimeZone timeZone0 = null;
//       FastDateFormat fastDateFormat0 = new FastDateFormat(string0, timeZone0, locale0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("jpn", locale0.getISO3Language());
//       assertEquals("ja", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("ja", locale0.toString());
//       assertEquals("", locale0.getCountry());
//       assertEquals(5, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("W_", fastDateFormat0.getPattern());
//   }

  @Test
  public void test58()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      String string0 = "<null>";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
      }
  }
}
