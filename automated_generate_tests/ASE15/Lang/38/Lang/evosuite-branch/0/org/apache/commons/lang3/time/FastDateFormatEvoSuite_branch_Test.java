/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:37:19 GMT 2014
 */

package org.apache.commons.lang3.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.text.AttributedCharacterIterator;
import java.text.ParsePosition;
import java.util.Calendar;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;


public class FastDateFormatEvoSuite_branch_Test  {

  @Test
  public void test00() {}
//   @Test
//   public void test00() {}
//   @Test
//   public void test00()  throws Throwable  {
//       String string0 = "]k";
//       long long0 = 6698L;
//       System.setCurrentTimeMillis(long0);
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(5, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("]k", fastDateFormat0.getPattern());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) zoneInfo0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=6698,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=6,MILLISECOND=698,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       String string1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//       assertEquals("]24", string1);
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       assertNotNull(string1);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=6698,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=6,MILLISECOND=698,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(5, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("]k", fastDateFormat0.getPattern());
//   }

  @Test
  public void test01() {}
//   @Test
//   public void test01()  throws Throwable  {
//       int int0 = 0;
//       int int1 = (-1812);
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int1, int0);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1812,HOUR_OF_DAY=-1812,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1812,HOUR_OF_DAY=-1812,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       
//       String string0 = "org.apache.commons.lang3.time.FastDateFormat$TwoDigitYearField";
//       Locale locale0 = new Locale(string0);
//       assertNotNull(locale0);
//       assertEquals("", locale0.getCountry());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("org.apache.commons.lang3.time.fastdateformat$twodigityearfield", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("org.apache.commons.lang3.time.fastdateformat$twodigityearfield", locale0.toString());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, (TimeZone) zoneInfo0, locale0);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertNotNull(fastDateFormat0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("", locale0.getCountry());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("org.apache.commons.lang3.time.fastdateformat$twodigityearfield", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("org.apache.commons.lang3.time.fastdateformat$twodigityearfield", locale0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1812,HOUR_OF_DAY=-1812,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(49, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
//       
//       MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(int0, int1, int1, int0, int1, int1);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
//       assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
//       assertNotNull(mockGregorianCalendar1);
//       assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=-1812,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1812,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=-1812,SECOND=-1812,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
//       assertEquals(true, mockGregorianCalendar1.isLenient());
//       
//       String string1 = fastDateFormat0.format((Object) mockGregorianCalendar1);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
//       assertEquals("Wednesday, January 13, 0157 5:17:48 PM GMT", string1);
//       assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
//       assertNotNull(string1);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-67089278532000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=157,MONTH=0,WEEK_OF_YEAR=3,WEEK_OF_MONTH=3,DAY_OF_MONTH=13,DAY_OF_YEAR=13,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=17,SECOND=48,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
//       assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar1.isLenient());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("", locale0.getCountry());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("org.apache.commons.lang3.time.fastdateformat$twodigityearfield", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("org.apache.commons.lang3.time.fastdateformat$twodigityearfield", locale0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1812,HOUR_OF_DAY=-1812,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(49, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
//   }

  @Test
  public void test02() {}
//   @Test
//   public void test02()  throws Throwable  {
//       int int0 = 0;
//       String string0 = "6%";
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(2, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("6%", fastDateFormat0.getPattern());
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(int0, int0);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertNotNull(fastDateFormat1);
//       assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat1.getPattern());
//       assertEquals(49, fastDateFormat1.getMaxLengthEstimate());
//       
//       boolean boolean0 = fastDateFormat0.equals((Object) fastDateFormat1);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
//       assertFalse(boolean0);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertNotSame(fastDateFormat0, fastDateFormat1);
//       assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat1.getPattern());
//       assertEquals(49, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals(2, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("6%", fastDateFormat0.getPattern());
//   }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
      assertNotNull(fastDateFormat0);
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("", fastDateFormat0.getPattern());
      
      boolean boolean0 = fastDateFormat0.equals((Object) fastDateFormat0);
      assertTrue(boolean0);
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("", fastDateFormat0.getPattern());
      
      boolean boolean1 = fastDateFormat0.equals((Object) boolean0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("", fastDateFormat0.getPattern());
  }

  @Test
  public void test04() {}
//   @Test
//   public void test04()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat0);
//       assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
//       assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
//       
//       boolean boolean0 = fastDateFormat0.equals((Object) fastDateFormat0);
//       assertTrue(boolean0);
//       assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
//       assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
//   }

  @Test
  public void test05() {}
//   @Test
//   public void test05()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
//       assertEquals(49, fastDateFormat0.getMaxLengthEstimate());
//       
//       Object object0 = null;
//       // Undeclared exception!
//       try {
//         String string0 = fastDateFormat0.format(object0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Unknown class: <null>
//          //
//       }
//   }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "6%";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
      assertNotNull(fastDateFormat0);
      assertEquals("6%", fastDateFormat0.getPattern());
      assertEquals(2, fastDateFormat0.getMaxLengthEstimate());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try {
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.lang.Object
         //
      }
  }

  @Test
  public void test07() {}
//   @Test
//   public void test07()  throws Throwable  {
//       int int0 = 0;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       String string0 = "org.apache.commons.lang3.time.FastDateFormat$TwoDigitYearField";
//       Locale locale0 = new Locale(string0);
//       assertNotNull(locale0);
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("org.apache.commons.lang3.time.fastdateformat$twodigityearfield", locale0.toString());
//       assertEquals("org.apache.commons.lang3.time.fastdateformat$twodigityearfield", locale0.getLanguage());
//       assertEquals("", locale0.getCountry());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, (TimeZone) zoneInfo0, locale0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("org.apache.commons.lang3.time.fastdateformat$twodigityearfield", locale0.toString());
//       assertEquals("org.apache.commons.lang3.time.fastdateformat$twodigityearfield", locale0.getLanguage());
//       assertEquals("", locale0.getCountry());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(49, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       String string1 = fastDateFormat0.format((Object) mockGregorianCalendar0);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       assertEquals("Wednesday, December 31, 0002 12:00:00 AM GMT", string1);
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//       assertNotNull(string1);
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("org.apache.commons.lang3.time.fastdateformat$twodigityearfield", locale0.toString());
//       assertEquals("org.apache.commons.lang3.time.fastdateformat$twodigityearfield", locale0.getLanguage());
//       assertEquals("", locale0.getCountry());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(49, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
//       assertEquals("GMT", zoneInfo0.getID());
//   }

  @Test
  public void test08()  throws Throwable  {
      String string0 = ")Z3";
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals(")Z3", fastDateFormat0.getPattern());
      assertEquals(7, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      int[] intArray0 = new int[4];
      Long long0 = Long.getLong(string0, (long) intArray0[1]);
      assertEquals(0L, (long)long0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      String string1 = fastDateFormat0.format((Object) long0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(")+00003", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(")Z3", fastDateFormat0.getPattern());
      assertEquals(7, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
  }

  @Test
  public void test09() {}
//   @Test
//   public void test09()  throws Throwable  {
//       String string0 = "y}W";
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       Locale locale0 = Locale.CANADA_FRENCH;
//       assertNotNull(locale0);
//       assertEquals("fr", locale0.getLanguage());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("fr_CA", locale0.toString());
//       
//       FastDateFormat fastDateFormat0 = new FastDateFormat(string0, zoneInfo0, locale0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(9, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("y}W", fastDateFormat0.getPattern());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("fr", locale0.getLanguage());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("fr_CA", locale0.toString());
//   }

  @Test
  public void test10() {}
//   @Test
//   public void test10()  throws Throwable  {
//       String string0 = "vnlN3[R''U ;azX6";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       Locale locale0 = Locale.JAPANESE;
//       assertNotNull(locale0);
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getCountry());
//       assertEquals("ja", locale0.getLanguage());
//       assertEquals("ja", locale0.toString());
//       assertEquals("jpn", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       
//       FastDateFormat fastDateFormat0 = null;
//       try {
//         fastDateFormat0 = new FastDateFormat(string0, zoneInfo0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: v
//          //
//       }
//   }

  @Test
  public void test11()  throws Throwable  {
      String string0 = " (u762R3\\";
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      
      String string0 = "Zr*lwz]D";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
      }
  }

  @Test
  public void test13() {}
//   @Test
//   public void test13()  throws Throwable  {
//       String string0 = "p Of3^96cfRb";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       Locale locale0 = Locale.JAPAN;
//       assertNotNull(locale0);
//       assertEquals("jpn", locale0.getISO3Language());
//       assertEquals("ja", locale0.getLanguage());
//       assertEquals("ja_JP", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("JPN", locale0.getISO3Country());
//       assertEquals("JP", locale0.getCountry());
//       
//       FastDateFormat fastDateFormat0 = null;
//       try {
//         fastDateFormat0 = new FastDateFormat(string0, zoneInfo0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: p
//          //
//       }
//   }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 0;
      String string0 = "org.apache.commons.lang3.time.FastDateFormat$TwoDigitYearField";
      Locale locale0 = new Locale(string0, string0);
      assertNotNull(locale0);
      assertEquals("ORG.APACHE.COMMONS.LANG3.TIME.FASTDATEFORMAT$TWODIGITYEARFIELD", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("org.apache.commons.lang3.time.fastdateformat$twodigityearfield_ORG.APACHE.COMMONS.LANG3.TIME.FASTDATEFORMAT$TWODIGITYEARFIELD", locale0.toString());
      assertEquals("org.apache.commons.lang3.time.fastdateformat$twodigityearfield", locale0.getLanguage());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("org.apache.commons.lang3.time.FastDateFormat$TwoDigitYearField", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=org.apache.commons.lang3.time.FastDateFormat$TwoDigitYearField,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "+=n|2lraEcNFHIGnQm1";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
      }
  }

  @Test
  public void test16() {}
//   @Test
//   public void test16() {}
//   @Test
//   public void test16()  throws Throwable  {
//       String string0 = "l~QOI6.]S;";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       Locale locale0 = new Locale(string0);
//       assertNotNull(locale0);
//       assertEquals("", locale0.getCountry());
//       assertEquals("l~qoi6.]s;", locale0.toString());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("l~qoi6.]s;", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       
//       FastDateFormat fastDateFormat0 = null;
//       try {
//         fastDateFormat0 = new FastDateFormat(string0, zoneInfo0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: l
//          //
//       }
//   }

  @Test
  public void test17() {}
//   @Test
//   public void test17()  throws Throwable  {
//       String string0 = "i].S<ba\\!m|'HM=SC";
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: i
//          //
//       }
//   }

  @Test
  public void test18() {}
//   @Test
//   public void test18()  throws Throwable  {
//       String string0 = "g`*U\\aS@";
//       int int0 = 3;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(10, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("h:mm a", fastDateFormat0.getPattern());
//       
//       Locale locale0 = fastDateFormat0.getLocale();
//       assertNotNull(locale0);
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("", locale0.getCountry());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("en", locale0.toString());
//       assertEquals(10, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("h:mm a", fastDateFormat0.getPattern());
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: g
//          //
//       }
//   }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "\"f*?i";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "e";
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: e
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "S{%c#1<$1M\\9*";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "`bjn^[]";
      int int0 = (-2885);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=`bjn^[],offset=-2885,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("`bjn^[]", simpleTimeZone0.getID());
      assertEquals(-2885, simpleTimeZone0.getRawOffset());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "YYTN*w(Q,a5HYWHi8`";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: YY
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      String string0 = "X+q@lTQ";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: X
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = ".V.";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: V
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = "%9UVna>YLvj";
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = "The validated collection index is invalid: %d";
      int int0 = (-40);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals("The validated collection index is invalid: %d", simpleTimeZone0.getID());
      assertEquals(-40, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=The validated collection index is invalid: %d,offset=-40,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = "w4}\\Rn, x45r40Ue_";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: R
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = "WOpR=fcRS59`0]-?";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: O
         //
      }
  }

  @Test
  public void test30() {}
//   @Test
//   public void test30()  throws Throwable  {
//       String string0 = "No daye time pattern for locale: ";
//       TimeZone timeZone0 = null;
//       Locale locale0 = Locale.forLanguageTag(string0);
//       assertNotNull(locale0);
//       assertEquals("", locale0.getCountry());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getLanguage());
//       assertEquals("", locale0.toString());
//       
//       FastDateFormat fastDateFormat0 = null;
//       try {
//         fastDateFormat0 = new FastDateFormat(string0, timeZone0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: N
//          //
//       }
//   }

  @Test
  public void test31()  throws Throwable  {
      String string0 = "L{P*\"<=%b";
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: L
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      String string0 = ">:|6KxBSj$Lgmox";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: x
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = "~6=1I&+ls%";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      String string0 = ")k)\\HGWqg#}";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
      }
  }

  @Test
  public void test35()  throws Throwable  {
      String string0 = "dGjSFc$0X4Kb";
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: j
         //
      }
  }

  @Test
  public void test36()  throws Throwable  {
      int int0 = 2;
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("dd-MMM-yyyy HH:mm:ss", fastDateFormat0.getPattern());
      
      String string0 = fastDateFormat0.toString();
      assertEquals("FastDateFormat[dd-MMM-yyyy HH:mm:ss]", string0);
      assertNotNull(string0);
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("dd-MMM-yyyy HH:mm:ss", fastDateFormat0.getPattern());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
      }
  }

  @Test
  public void test37()  throws Throwable  {
      String string0 = "(9/3M]D`Pi";
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      String string0 = "=9ZsC{W6mz";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
      }
  }

  @Test
  public void test39()  throws Throwable  {
      String string0 = "Bu";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: B
         //
      }
  }

  @Test
  public void test40()  throws Throwable  {
      String string0 = "`A%>s";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
      }
  }

  @Test
  public void test41() {}
//   @Test
//   public void test41()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat0);
//       assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)fastDateFormat0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
//       assertEquals("GMT", zoneInfo0.getID());
//   }

  @Test
  public void test42()  throws Throwable  {
      int int0 = 0;
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = null;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, (TimeZone) zoneInfo0, locale0);
      //  // Unstable assertion: assertNotNull(fastDateFormat0);
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
      
      int int1 = fastDateFormat0.hashCode();
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertEquals(1269894678, int1);
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
  }

  @Test
  public void test43() {}
//   @Test
//   public void test43()  throws Throwable  {
//       Locale locale0 = Locale.CANADA;
//       assertNotNull(locale0);
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("en", locale0.getLanguage());
//       
//       String string0 = "]k";
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       FastDateFormat fastDateFormat0 = new FastDateFormat(string0, zoneInfo0, locale0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals(5, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("]k", fastDateFormat0.getPattern());
//       
//       String string1 = fastDateFormat0.getPattern();
//       assertEquals("]k", string1);
//       assertSame(string1, string0);
//       assertSame(string0, string1);
//       assertNotNull(string1);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals(5, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("]k", fastDateFormat0.getPattern());
//   }

  @Test
  public void test44() {}
//   @Test
//   public void test44()  throws Throwable  {
//       int int0 = 2;
//       Locale locale0 = Locale.UK;
//       assertNotNull(locale0);
//       assertEquals("en_GB", locale0.toString());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("GB", locale0.getCountry());
//       assertEquals("GBR", locale0.getISO3Country());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, locale0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("dd-MMM-yyyy HH:mm:ss", fastDateFormat0.getPattern());
//       assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("en_GB", locale0.toString());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("GB", locale0.getCountry());
//       assertEquals("GBR", locale0.getISO3Country());
//       
//       String string0 = fastDateFormat0.toString();
//       assertEquals("FastDateFormat[dd-MMM-yyyy HH:mm:ss]", string0);
//       assertNotNull(string0);
//       assertEquals("dd-MMM-yyyy HH:mm:ss", fastDateFormat0.getPattern());
//       assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("en_GB", locale0.toString());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("GB", locale0.getCountry());
//       assertEquals("GBR", locale0.getISO3Country());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       assertNotNull(zoneInfo0);
//       assertEquals("dd-MMM-yyyy HH:mm:ss", fastDateFormat0.getPattern());
//       assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("en_GB", locale0.toString());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("GB", locale0.getCountry());
//       assertEquals("GBR", locale0.getISO3Country());
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(int0, (TimeZone) zoneInfo0);
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertNotSame(fastDateFormat0, fastDateFormat1);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertNotNull(fastDateFormat1);
//       assertEquals("dd-MMM-yyyy HH:mm:ss", fastDateFormat0.getPattern());
//       assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(13, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals("h:mm:ss a", fastDateFormat1.getPattern());
//       assertEquals("en_GB", locale0.toString());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("GB", locale0.getCountry());
//       assertEquals("GBR", locale0.getISO3Country());
//   }

  @Test
  public void test45() {}
//   @Test
//   public void test45()  throws Throwable  {
//       int int0 = 0;
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, (TimeZone) zoneInfo0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
//       assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
//   }

  @Test
  public void test46()  throws Throwable  {
      String string0 = ")Z3";
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals(7, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(")Z3", fastDateFormat0.getPattern());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      
      int[] intArray0 = new int[4];
      Long long0 = Long.getLong(string0, (long) intArray0[0]);
      assertEquals(0L, (long)long0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      String string1 = fastDateFormat0.format((long) long0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(")+00003", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(7, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(")Z3", fastDateFormat0.getPattern());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
  }

  @Test
  public void test47() {}
//   @Test
//   public void test47()  throws Throwable  {
//       int int0 = 0;
//       String string0 = "org.apache.commons.lang3.time.FastDateFormat$TwoDigitYearField";
//       Locale locale0 = new Locale(string0, string0);
//       assertNotNull(locale0);
//       assertEquals("org.apache.commons.lang3.time.fastdateformat$twodigityearfield_ORG.APACHE.COMMONS.LANG3.TIME.FASTDATEFORMAT$TWODIGITYEARFIELD", locale0.toString());
//       assertEquals("ORG.APACHE.COMMONS.LANG3.TIME.FASTDATEFORMAT$TWODIGITYEARFIELD", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       assertEquals("org.apache.commons.lang3.time.fastdateformat$twodigityearfield", locale0.getLanguage());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, locale0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
//       assertEquals("org.apache.commons.lang3.time.fastdateformat$twodigityearfield_ORG.APACHE.COMMONS.LANG3.TIME.FASTDATEFORMAT$TWODIGITYEARFIELD", locale0.toString());
//       assertEquals("ORG.APACHE.COMMONS.LANG3.TIME.FASTDATEFORMAT$TWODIGITYEARFIELD", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       assertEquals("org.apache.commons.lang3.time.fastdateformat$twodigityearfield", locale0.getLanguage());
//   }

  @Test
  public void test48() {}
//   @Test
//   public void test48()  throws Throwable  {
//       int int0 = 0;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       
//       String string0 = "org.apache.commons.lang3.time.FastDateFormat$TwoDigitYearField";
//       Locale locale0 = new Locale(string0);
//       assertNotNull(locale0);
//       assertEquals("", locale0.getVariant());
//       assertEquals("org.apache.commons.lang3.time.fastdateformat$twodigityearfield", locale0.toString());
//       assertEquals("org.apache.commons.lang3.time.fastdateformat$twodigityearfield", locale0.getLanguage());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getCountry());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, (TimeZone) zoneInfo0, locale0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(49, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
//       assertEquals("", locale0.getVariant());
//       assertEquals("org.apache.commons.lang3.time.fastdateformat$twodigityearfield", locale0.toString());
//       assertEquals("org.apache.commons.lang3.time.fastdateformat$twodigityearfield", locale0.getLanguage());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getCountry());
//       
//       String string1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//       assertEquals("Wednesday, December 31, 0002 12:00:00 AM GMT", string1);
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       assertNotNull(string1);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(49, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
//       assertEquals("", locale0.getVariant());
//       assertEquals("org.apache.commons.lang3.time.fastdateformat$twodigityearfield", locale0.toString());
//       assertEquals("org.apache.commons.lang3.time.fastdateformat$twodigityearfield", locale0.getLanguage());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getCountry());
//       
//       ParsePosition parsePosition0 = new ParsePosition(int0);
//       assertNotNull(parsePosition0);
//       assertEquals(0, parsePosition0.getIndex());
//       assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
//       assertEquals(-1, parsePosition0.getErrorIndex());
//       
//       Object object0 = fastDateFormat0.parseObject(string1, parsePosition0);
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       assertNull(object0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(49, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
//       assertEquals("", locale0.getVariant());
//       assertEquals("org.apache.commons.lang3.time.fastdateformat$twodigityearfield", locale0.toString());
//       assertEquals("org.apache.commons.lang3.time.fastdateformat$twodigityearfield", locale0.getLanguage());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getCountry());
//       assertEquals("java.text.ParsePosition[index=0,errorIndex=0]", parsePosition0.toString());
//       assertEquals(0, parsePosition0.getIndex());
//       assertEquals(0, parsePosition0.getErrorIndex());
//   }

  @Test
  public void test49()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5'", fastDateFormat0.getPattern());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
  }

  @Test
  public void test50() {}
//   @Test
//   public void test50()  throws Throwable  {
//       Locale locale0 = Locale.CANADA;
//       assertNotNull(locale0);
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("CAN", locale0.getISO3Country());
//       
//       String string0 = "]k";
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       
//       FastDateFormat fastDateFormat0 = new FastDateFormat(string0, zoneInfo0, locale0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals(5, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("]k", fastDateFormat0.getPattern());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       
//       String string1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       assertEquals("]20", string1);
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//       assertNotNull(string1);
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals(5, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("]k", fastDateFormat0.getPattern());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//   }

  @Test
  public void test51()  throws Throwable  {
      String string0 = ".EJmL}OA42G;\"";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: J
         //
      }
  }

  @Test
  public void test52()  throws Throwable  {
      int int0 = 0;
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, (TimeZone) zoneInfo0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals("HH:mm' Uhr 'z", fastDateFormat0.getPattern());
      assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("GMT", zoneInfo0.getID());
  }

  @Test
  public void test53()  throws Throwable  {
      String string0 = "6%";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
      assertNotNull(fastDateFormat0);
      assertEquals("6%", fastDateFormat0.getPattern());
      assertEquals(2, fastDateFormat0.getMaxLengthEstimate());
      
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      assertEquals(2, int0);
      assertEquals("6%", fastDateFormat0.getPattern());
      assertEquals(2, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test
  public void test54()  throws Throwable  {
      String string0 = ";zSQlyhdO<&T\\vQ";
      TimeZone timeZone0 = null;
      Locale locale0 = new Locale(string0, string0, string0);
      assertNotNull(locale0);
      assertEquals(";ZSQLYHDO<&T\\VQ", locale0.getCountry());
      assertEquals(";zSQlyhdO<&T\\vQ", locale0.getVariant());
      assertEquals(";zsqlyhdo<&t\\vq", locale0.getLanguage());
      assertEquals(";zsqlyhdo<&t\\vq_;ZSQLYHDO<&T\\VQ_;zSQlyhdO<&T\\vQ", locale0.toString());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Q
         //
      }
  }

  @Test
  public void test55() {}
//   @Test
//   public void test55()  throws Throwable  {
//       int int0 = (-771);
//       String string0 = "";
//       int int1 = 0;
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int1, int1, (TimeZone) zoneInfo0);
//       assertFalse(int1 == int0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(49, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
//       
//       StringBuffer stringBuffer0 = new StringBuffer(string0);
//       assertNotNull(stringBuffer0);
//       assertEquals("", stringBuffer0.toString());
//       assertEquals(0, stringBuffer0.length());
//       assertEquals(16, stringBuffer0.capacity());
//       
//       StringBuffer stringBuffer1 = fastDateFormat0.format((long) int0, stringBuffer0);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertSame(stringBuffer0, stringBuffer1);
//       assertSame(stringBuffer1, stringBuffer0);
//       assertNotNull(stringBuffer1);
//       assertEquals("Wednesday, December 31, 1969 11:59:59 PM GMT", stringBuffer0.toString());
//       assertEquals(70, stringBuffer0.capacity());
//       assertEquals(44, stringBuffer0.length());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(49, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
//       assertEquals("Wednesday, December 31, 1969 11:59:59 PM GMT", stringBuffer1.toString());
//       assertEquals(44, stringBuffer1.length());
//       assertEquals(70, stringBuffer1.capacity());
//   }

  @Test
  public void test56() {}
//   @Test
//   public void test56()  throws Throwable  {
//       String string0 = "S'c0NOY*oT_j";
//       int int0 = 0;
//       int int1 = (-2323);
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int1);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-2323,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-2323,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       Locale locale0 = Locale.CHINESE;
//       assertNotNull(locale0);
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("", locale0.getCountry());
//       assertEquals("zh", locale0.toString());
//       assertEquals("", locale0.getISO3Country());
//       
//       FastDateFormat fastDateFormat0 = new FastDateFormat(string0, zoneInfo0, locale0);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("", locale0.getCountry());
//       assertEquals("zh", locale0.toString());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("S'c0NOY*oT_j", fastDateFormat0.getPattern());
//       assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-2323,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       StringBuffer stringBuffer0 = new StringBuffer((CharSequence) string0);
//       assertNotNull(stringBuffer0);
//       assertEquals("S'c0NOY*oT_j", stringBuffer0.toString());
//       assertEquals(12, stringBuffer0.length());
//       assertEquals(28, stringBuffer0.capacity());
//       
//       StringBuffer stringBuffer1 = fastDateFormat0.format((long) int1, stringBuffer0);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertSame(stringBuffer1, stringBuffer0);
//       assertSame(stringBuffer0, stringBuffer1);
//       assertNotNull(stringBuffer1);
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("", locale0.getCountry());
//       assertEquals("zh", locale0.toString());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("S'c0NOY*oT_j", fastDateFormat0.getPattern());
//       assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-2323,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("S'c0NOY*oT_j677c0NOY*oT_j", stringBuffer1.toString());
//       assertEquals(25, stringBuffer1.length());
//       assertEquals(28, stringBuffer1.capacity());
//       assertEquals(25, stringBuffer0.length());
//       assertEquals(28, stringBuffer0.capacity());
//       assertEquals("S'c0NOY*oT_j677c0NOY*oT_j", stringBuffer0.toString());
//       
//       int int2 = (-1140);
//       Locale locale1 = Locale.JAPANESE;
//       assertFalse(locale1.equals((Object)locale0));
//       assertNotSame(locale1, locale0);
//       assertNotNull(locale1);
//       assertEquals("ja", locale1.getLanguage());
//       assertEquals("", locale1.getVariant());
//       assertEquals("", locale1.getISO3Country());
//       assertEquals("ja", locale1.toString());
//       assertEquals("jpn", locale1.getISO3Language());
//       assertEquals("", locale1.getCountry());
//       
//       int int3 = 0;
//       FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(int3);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertFalse(int3 == int2);
//       assertFalse(int3 == int1);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertNotNull(fastDateFormat1);
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat1.getPattern());
//       assertEquals(31, fastDateFormat1.getMaxLengthEstimate());
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(int2, int2);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal time style -1140
//          //
//       }
//   }

  @Test
  public void test57() {}
//   @Test
//   public void test57()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat0);
//       assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
//       
//       int int0 = (-1403);
//       MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0, int0);
//       assertNotNull(mockDate0);
//       assertEquals("Fri Jan 29 13:13:37 GMT 376", mockDate0.toString());
//       
//       AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator((Object) mockDate0);
//       assertNotNull(attributedCharacterIterator0);
//       assertEquals("Fri Jan 29 13:13:37 GMT 376", mockDate0.toString());
//       assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
//       assertEquals(0, attributedCharacterIterator0.getBeginIndex());
//       assertEquals(15, attributedCharacterIterator0.getRunLimit());
//       assertEquals(0, attributedCharacterIterator0.getRunStart());
//       assertEquals(0, attributedCharacterIterator0.getIndex());
//       assertEquals(15, attributedCharacterIterator0.getEndIndex());
//   }
}
