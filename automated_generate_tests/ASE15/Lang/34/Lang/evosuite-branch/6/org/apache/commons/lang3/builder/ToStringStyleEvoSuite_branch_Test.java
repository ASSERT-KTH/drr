/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:40:44 GMT 2014
 */

package org.apache.commons.lang3.builder;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedList;
import org.apache.commons.lang3.builder.StandardToStringStyle;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class ToStringStyleEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertNotNull(standardToStringStyle0);
      
      String string0 = null;
      standardToStringStyle0.setSummaryObjectEndText(string0);
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
  }

  @Test
  public void test01()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertNotNull(standardToStringStyle0);
      
      String string0 = standardToStringStyle0.getFieldSeparator();
      assertEquals(",", string0);
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertNotNull(string0);
      
      standardToStringStyle0.setSummaryObjectEndText(string0);
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(",", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
  }

  @Test
  public void test02()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertNotNull(standardToStringStyle0);
      
      String string0 = null;
      standardToStringStyle0.setSummaryObjectStartText(string0);
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
  }

  @Test
  public void test03()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertNotNull(standardToStringStyle0);
      
      String string0 = "y3,40P!C";
      standardToStringStyle0.setSummaryObjectStartText(string0);
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("y3,40P!C", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
  }

  @Test
  public void test04()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      assertNotNull(toStringStyle0);
      
      String string0 = null;
      toStringStyle0.setSizeEndText(string0);
  }

  @Test
  public void test05()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertNotNull(standardToStringStyle0);
      
      String string0 = "B[7#dYw6]AV^3Q";
      standardToStringStyle0.setSizeEndText(string0);
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("B[7#dYw6]AV^3Q", standardToStringStyle0.getSizeEndText());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "2(4|^8^";
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertNotNull(standardToStringStyle0);
      
      standardToStringStyle0.setSizeStartText(string0);
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("2(4|^8^", standardToStringStyle0.getSizeStartText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("{", standardToStringStyle0.getArrayStart());
  }

  @Test
  public void test07()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertNotNull(standardToStringStyle0);
      
      String string0 = null;
      standardToStringStyle0.setNullText(string0);
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("", standardToStringStyle0.getNullText());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
  }

  @Test
  public void test08()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertNotNull(standardToStringStyle0);
      
      String string0 = "F";
      standardToStringStyle0.setNullText(string0);
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("F", standardToStringStyle0.getNullText());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
  }

  @Test
  public void test09()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertNotNull(standardToStringStyle0);
      
      String string0 = null;
      standardToStringStyle0.setFieldSeparator(string0);
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("", standardToStringStyle0.getFieldSeparator());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("[", standardToStringStyle0.getContentStart());
  }

  @Test
  public void test10()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertNotNull(standardToStringStyle0);
      
      String string0 = standardToStringStyle0.getArrayStart();
      assertEquals("{", string0);
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertNotNull(string0);
      
      standardToStringStyle0.setFieldSeparator(string0);
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("{", standardToStringStyle0.getFieldSeparator());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
  }

  @Test
  public void test11()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
      assertNotNull(toStringStyle0);
      
      String string0 = null;
      toStringStyle0.setFieldNameValueSeparator(string0);
  }

  @Test
  public void test12()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
      assertNotNull(toStringStyle0);
      
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertNotNull(standardToStringStyle0);
      
      String string0 = standardToStringStyle0.getSizeEndText();
      assertEquals(">", string0);
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertNotNull(string0);
      
      toStringStyle0.setFieldNameValueSeparator(string0);
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
  }

  @Test
  public void test13()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertNotNull(standardToStringStyle0);
      
      String string0 = null;
      standardToStringStyle0.setContentEnd(string0);
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("", standardToStringStyle0.getContentEnd());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
  }

  @Test
  public void test14()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertNotNull(standardToStringStyle0);
      
      String string0 = "F";
      standardToStringStyle0.setContentEnd(string0);
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("F", standardToStringStyle0.getContentEnd());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
  }

  @Test
  public void test15()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
      assertNotNull(toStringStyle0);
      
      String string0 = null;
      toStringStyle0.setContentStart(string0);
  }

  @Test
  public void test16()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertNotNull(standardToStringStyle0);
      
      String string0 = standardToStringStyle0.getSummaryObjectStartText();
      assertEquals("<", string0);
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertNotNull(string0);
      
      standardToStringStyle0.setContentStart(string0);
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("<", standardToStringStyle0.getContentStart());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
  }

  @Test
  public void test17()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      assertNotNull(toStringStyle0);
      
      String string0 = null;
      toStringStyle0.setArraySeparator(string0);
  }

  @Test
  public void test18()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      assertNotNull(toStringStyle0);
      
      String string0 = "Mac OS X";
      toStringStyle0.setArraySeparator(string0);
  }

  @Test
  public void test19()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertNotNull(standardToStringStyle0);
      
      String string0 = null;
      standardToStringStyle0.setArrayEnd(string0);
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("", standardToStringStyle0.getArrayEnd());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
  }

  @Test
  public void test20()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      assertNotNull(toStringStyle0);
      
      String string0 = null;
      toStringStyle0.setArrayStart(string0);
  }

  @Test
  public void test21()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertNotNull(standardToStringStyle0);
      
      String string0 = "i|)Tyg, e";
      standardToStringStyle0.setArrayStart(string0);
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("i|)Tyg, e", standardToStringStyle0.getArrayStart());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
  }

  @Test
  public void test22()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertNotNull(standardToStringStyle0);
      
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(int0);
      assertEquals(0, stringBuffer0.capacity());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      Object object0 = null;
      standardToStringStyle0.appendClassName(stringBuffer0, object0);
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(0, stringBuffer0.capacity());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
  }

  @Test
  public void test23()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertNotNull(standardToStringStyle0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(16, stringBuffer0.capacity());
      assertNotNull(stringBuffer0);
      
      String string0 = "A";
      standardToStringStyle0.appendClassName(stringBuffer0, string0);
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("java.lang.String", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.length());
      assertEquals(16, stringBuffer0.capacity());
  }

  @Test
  public void test24()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertNotNull(standardToStringStyle0);
      
      String string0 = null;
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      boolean boolean0 = true;
      double[] doubleArray0 = new double[4];
      standardToStringStyle0.append(stringBuffer0, string0, doubleArray0, (Boolean) boolean0);
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(34, stringBuffer0.capacity());
      assertEquals(18, stringBuffer0.length());
      assertEquals("{0.0,0.0,0.0,0.0},", stringBuffer0.toString());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test25()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.capacity());
      assertNotNull(stringBuffer0);
      
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertNotNull(standardToStringStyle0);
      
      String string0 = "FI";
      char[] charArray0 = new char[9];
      boolean boolean0 = true;
      Boolean boolean1 = Boolean.valueOf(boolean0);
      assertTrue(boolean1);
      
      standardToStringStyle0.append(stringBuffer0, string0, charArray0, boolean1);
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(34, stringBuffer0.capacity());
      assertEquals(23, stringBuffer0.length());
      assertEquals("FI={\u0000,\u0000,\u0000,\u0000,\u0000,\u0000,\u0000,\u0000,\u0000},", stringBuffer0.toString());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test26()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      //  // Unstable assertion: assertNotNull(toStringStyle0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      //  // Unstable assertion: assertEquals(16, stringBuffer0.capacity());
      //  // Unstable assertion: assertEquals(0, stringBuffer0.length());
      //  // Unstable assertion: assertEquals("", stringBuffer0.toString());
      //  // Unstable assertion: assertNotNull(stringBuffer0);
      
      String string0 = ",";
      boolean boolean0 = true;
      short[] shortArray0 = new short[9];
      toStringStyle0.append(stringBuffer0, string0, shortArray0, (Boolean) boolean0);
      //  // Unstable assertion: assertEquals(95, stringBuffer0.length());
      //  // Unstable assertion: assertEquals(",{9eEXm0Mac OS X0Mac OS X0Mac OS X0Mac OS X0Mac OS X0Mac OS X0Mac OS X0Mac OS X0II|@UehDQh</Grm", stringBuffer0.toString());
      //  // Unstable assertion: assertEquals(142, stringBuffer0.capacity());
      //  // Unstable assertion: assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = 6;
      StringBuffer stringBuffer0 = new StringBuffer(int0);
      assertEquals(6, stringBuffer0.capacity());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      String string0 = "2(4|8^";
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertNotNull(standardToStringStyle0);
      
      int[] intArray0 = new int[8];
      Boolean boolean0 = null;
      standardToStringStyle0.append(stringBuffer0, string0, intArray0, boolean0);
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(30, stringBuffer0.capacity());
      assertEquals("2(4|8^={0,0,0,0,0,0,0,0},", stringBuffer0.toString());
      assertEquals(25, stringBuffer0.length());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test
  public void test28()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertNotNull(standardToStringStyle0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(0, stringBuffer0.length());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      Class<LinkedList> class0 = LinkedList.class;
      String string0 = standardToStringStyle0.getShortClassName(class0);
      assertEquals("LinkedList", string0);
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertNotNull(string0);
      
      boolean boolean0 = true;
      Object[] objectArray0 = new Object[4];
      standardToStringStyle0.append(stringBuffer0, string0, objectArray0, (Boolean) boolean0);
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(41, stringBuffer0.length());
      assertEquals(70, stringBuffer0.capacity());
      assertEquals("LinkedList={<null>,<null>,<null>,<null>},", stringBuffer0.toString());
  }

  @Test
  public void test29()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(16, stringBuffer0.capacity());
      assertNotNull(stringBuffer0);
      
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertNotNull(standardToStringStyle0);
      
      String string0 = "FI";
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      boolean boolean0 = false;
      standardToStringStyle0.appendInternal(stringBuffer0, string0, hashMap0, boolean0);
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("<size=0>", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(8, stringBuffer0.length());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
  }

  @Test
  public void test30()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      //  // Unstable assertion: assertNotNull(toStringStyle0);
      
      String string0 = "pHi?7FsC5G9ssj";
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      //  // Unstable assertion: assertEquals(",", standardToStringStyle0.getFieldSeparator());
      //  // Unstable assertion: assertEquals("[", standardToStringStyle0.getContentStart());
      //  // Unstable assertion: assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      //  // Unstable assertion: assertEquals(">", standardToStringStyle0.getSizeEndText());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseClassName());
      //  // Unstable assertion: assertEquals("{", standardToStringStyle0.getArrayStart());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isUseShortClassName());
      //  // Unstable assertion: assertEquals(",", standardToStringStyle0.getArraySeparator());
      //  // Unstable assertion: assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      //  // Unstable assertion: assertEquals("]", standardToStringStyle0.getContentEnd());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseFieldNames());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      //  // Unstable assertion: assertEquals("<null>", standardToStringStyle0.getNullText());
      //  // Unstable assertion: assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      //  // Unstable assertion: assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      //  // Unstable assertion: assertEquals("}", standardToStringStyle0.getArrayEnd());
      //  // Unstable assertion: assertNotNull(standardToStringStyle0);
      
      String string1 = standardToStringStyle0.getArrayStart();
      //  // Unstable assertion: assertEquals("{", string1);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertEquals(",", standardToStringStyle0.getFieldSeparator());
      //  // Unstable assertion: assertEquals("[", standardToStringStyle0.getContentStart());
      //  // Unstable assertion: assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      //  // Unstable assertion: assertEquals(">", standardToStringStyle0.getSizeEndText());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseClassName());
      //  // Unstable assertion: assertEquals("{", standardToStringStyle0.getArrayStart());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isUseShortClassName());
      //  // Unstable assertion: assertEquals(",", standardToStringStyle0.getArraySeparator());
      //  // Unstable assertion: assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      //  // Unstable assertion: assertEquals("]", standardToStringStyle0.getContentEnd());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseFieldNames());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      //  // Unstable assertion: assertEquals("<null>", standardToStringStyle0.getNullText());
      //  // Unstable assertion: assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      //  // Unstable assertion: assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      //  // Unstable assertion: assertEquals("}", standardToStringStyle0.getArrayEnd());
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      
      String string2 = "aPZ`Pl";
      //  // Unstable assertion: assertNotSame(string2, string1);
      //  // Unstable assertion: assertNotSame(string2, string0);
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      
      StringBuffer stringBuffer0 = new StringBuffer();
      //  // Unstable assertion: assertEquals("", stringBuffer0.toString());
      //  // Unstable assertion: assertEquals(0, stringBuffer0.length());
      //  // Unstable assertion: assertEquals(16, stringBuffer0.capacity());
      //  // Unstable assertion: assertNotNull(stringBuffer0);
      
      int int0 = 0;
      StringBuffer stringBuffer1 = stringBuffer0.insert(int0, (CharSequence) string1);
      //  // Unstable assertion: assertNotSame(string1, string2);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertSame(stringBuffer1, stringBuffer0);
      //  // Unstable assertion: assertSame(stringBuffer0, stringBuffer1);
      //  // Unstable assertion: assertEquals(",", standardToStringStyle0.getFieldSeparator());
      //  // Unstable assertion: assertEquals("[", standardToStringStyle0.getContentStart());
      //  // Unstable assertion: assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      //  // Unstable assertion: assertEquals(">", standardToStringStyle0.getSizeEndText());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseClassName());
      //  // Unstable assertion: assertEquals("{", standardToStringStyle0.getArrayStart());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isUseShortClassName());
      //  // Unstable assertion: assertEquals(",", standardToStringStyle0.getArraySeparator());
      //  // Unstable assertion: assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      //  // Unstable assertion: assertEquals("]", standardToStringStyle0.getContentEnd());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseFieldNames());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      //  // Unstable assertion: assertEquals("<null>", standardToStringStyle0.getNullText());
      //  // Unstable assertion: assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      //  // Unstable assertion: assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      //  // Unstable assertion: assertEquals("}", standardToStringStyle0.getArrayEnd());
      //  // Unstable assertion: assertEquals(16, stringBuffer1.capacity());
      //  // Unstable assertion: assertEquals(1, stringBuffer1.length());
      //  // Unstable assertion: assertEquals("{", stringBuffer1.toString());
      //  // Unstable assertion: assertEquals("{", stringBuffer0.toString());
      //  // Unstable assertion: assertEquals(16, stringBuffer0.capacity());
      //  // Unstable assertion: assertEquals(1, stringBuffer0.length());
      //  // Unstable assertion: assertNotNull(stringBuffer1);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      
      String string3 = standardToStringStyle0.getSizeStartText();
      //  // Unstable assertion: assertEquals("<size=", string3);
      //  // Unstable assertion: assertNotSame(string3, string1);
      //  // Unstable assertion: assertNotSame(string3, string2);
      //  // Unstable assertion: assertNotSame(string3, string0);
      //  // Unstable assertion: assertEquals(",", standardToStringStyle0.getFieldSeparator());
      //  // Unstable assertion: assertEquals("[", standardToStringStyle0.getContentStart());
      //  // Unstable assertion: assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      //  // Unstable assertion: assertEquals(">", standardToStringStyle0.getSizeEndText());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseClassName());
      //  // Unstable assertion: assertEquals("{", standardToStringStyle0.getArrayStart());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isUseShortClassName());
      //  // Unstable assertion: assertEquals(",", standardToStringStyle0.getArraySeparator());
      //  // Unstable assertion: assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      //  // Unstable assertion: assertEquals("]", standardToStringStyle0.getContentEnd());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseFieldNames());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      //  // Unstable assertion: assertEquals("<null>", standardToStringStyle0.getNullText());
      //  // Unstable assertion: assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      //  // Unstable assertion: assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      //  // Unstable assertion: assertEquals("}", standardToStringStyle0.getArrayEnd());
      //  // Unstable assertion: assertNotNull(string3);
      //  // Unstable assertion: assertFalse(string3.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string0));
      
      boolean boolean0 = ToStringStyle.isRegistered(stringBuffer1);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertNotSame(string1, string3);
      //  // Unstable assertion: assertNotSame(string1, string2);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertSame(stringBuffer1, stringBuffer0);
      //  // Unstable assertion: assertSame(stringBuffer0, stringBuffer1);
      //  // Unstable assertion: assertEquals(",", standardToStringStyle0.getFieldSeparator());
      //  // Unstable assertion: assertEquals("[", standardToStringStyle0.getContentStart());
      //  // Unstable assertion: assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      //  // Unstable assertion: assertEquals(">", standardToStringStyle0.getSizeEndText());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseClassName());
      //  // Unstable assertion: assertEquals("{", standardToStringStyle0.getArrayStart());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isUseShortClassName());
      //  // Unstable assertion: assertEquals(",", standardToStringStyle0.getArraySeparator());
      //  // Unstable assertion: assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      //  // Unstable assertion: assertEquals("]", standardToStringStyle0.getContentEnd());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseFieldNames());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      //  // Unstable assertion: assertEquals("<null>", standardToStringStyle0.getNullText());
      //  // Unstable assertion: assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      //  // Unstable assertion: assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      //  // Unstable assertion: assertEquals("}", standardToStringStyle0.getArrayEnd());
      //  // Unstable assertion: assertEquals(16, stringBuffer1.capacity());
      //  // Unstable assertion: assertEquals(1, stringBuffer1.length());
      //  // Unstable assertion: assertEquals("{", stringBuffer1.toString());
      //  // Unstable assertion: assertEquals("{", stringBuffer0.toString());
      //  // Unstable assertion: assertEquals(16, stringBuffer0.capacity());
      //  // Unstable assertion: assertEquals(1, stringBuffer0.length());
      //  // Unstable assertion: assertFalse(string1.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      
      toStringStyle0.setArrayEnd(string2);
      //  // Unstable assertion: assertNotSame(string2, string1);
      //  // Unstable assertion: assertNotSame(string2, string3);
      //  // Unstable assertion: assertNotSame(string2, string0);
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      
      StringBuffer stringBuffer2 = new StringBuffer(string2);
      //  // Unstable assertion: assertNotSame(string2, string1);
      //  // Unstable assertion: assertNotSame(string2, string3);
      //  // Unstable assertion: assertNotSame(string2, string0);
      //  // Unstable assertion: assertNotSame(stringBuffer2, stringBuffer0);
      //  // Unstable assertion: assertNotSame(stringBuffer2, stringBuffer1);
      //  // Unstable assertion: assertEquals(7, stringBuffer2.length());
      //  // Unstable assertion: assertEquals("aPZ`Pl", stringBuffer2.toString());
      //  // Unstable assertion: assertEquals(23, stringBuffer2.capacity());
      //  // Unstable assertion: assertNotNull(stringBuffer2);
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertFalse(stringBuffer2.equals((Object)stringBuffer0));
      //  // Unstable assertion: assertFalse(stringBuffer2.equals((Object)stringBuffer1));
      
      double double0 = (-1.0);
      char[] charArray0 = new char[1];
      char char0 = 'E';
      StringBuffer stringBuffer3 = stringBuffer2.append(charArray0);
      //  // Unstable assertion: assertNotSame(stringBuffer3, stringBuffer0);
      //  // Unstable assertion: assertNotSame(stringBuffer3, stringBuffer1);
      //  // Unstable assertion: assertSame(stringBuffer3, stringBuffer2);
      //  // Unstable assertion: assertNotSame(string2, string1);
      //  // Unstable assertion: assertNotSame(string2, string3);
      //  // Unstable assertion: assertNotSame(string2, string0);
      //  // Unstable assertion: assertNotSame(stringBuffer2, stringBuffer0);
      //  // Unstable assertion: assertNotSame(stringBuffer2, stringBuffer1);
      //  // Unstable assertion: assertSame(stringBuffer2, stringBuffer3);
      //  // Unstable assertion: assertEquals(23, stringBuffer3.capacity());
      //  // Unstable assertion: assertEquals("aPZ`Pl\u0000", stringBuffer3.toString());
      //  // Unstable assertion: assertEquals(8, stringBuffer3.length());
      //  // Unstable assertion: assertEquals(8, stringBuffer2.length());
      //  // Unstable assertion: assertEquals("aPZ`Pl\u0000", stringBuffer2.toString());
      //  // Unstable assertion: assertEquals(23, stringBuffer2.capacity());
      //  // Unstable assertion: assertNotNull(stringBuffer3);
      //  // Unstable assertion: assertArrayEquals(new char[] {'\u0000'}, charArray0);
      //  // Unstable assertion: assertFalse(stringBuffer3.equals((Object)stringBuffer0));
      //  // Unstable assertion: assertFalse(stringBuffer3.equals((Object)stringBuffer1));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertFalse(stringBuffer2.equals((Object)stringBuffer0));
      //  // Unstable assertion: assertFalse(stringBuffer2.equals((Object)stringBuffer1));
      
      String string4 = "";
      //  // Unstable assertion: assertNotSame(string4, string3);
      //  // Unstable assertion: assertNotSame(string4, string0);
      //  // Unstable assertion: assertNotSame(string4, string2);
      //  // Unstable assertion: assertNotSame(string4, string1);
      //  // Unstable assertion: assertFalse(string4.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string1));
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) char0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) char0;
      doubleArray0[3] = double0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) char0;
      doubleArray0[6] = double0;
      doubleArray0[7] = (double) char0;
      standardToStringStyle0.appendDetail(stringBuffer3, string4, doubleArray0);
      //  // Unstable assertion: assertNotSame(stringBuffer3, stringBuffer0);
      //  // Unstable assertion: assertNotSame(stringBuffer3, stringBuffer1);
      //  // Unstable assertion: assertSame(stringBuffer3, stringBuffer2);
      //  // Unstable assertion: assertNotSame(string2, string1);
      //  // Unstable assertion: assertNotSame(string2, string4);
      //  // Unstable assertion: assertNotSame(string2, string3);
      //  // Unstable assertion: assertNotSame(string2, string0);
      //  // Unstable assertion: assertNotSame(stringBuffer2, stringBuffer0);
      //  // Unstable assertion: assertNotSame(stringBuffer2, stringBuffer1);
      //  // Unstable assertion: assertSame(stringBuffer2, stringBuffer3);
      //  // Unstable assertion: assertNotSame(string4, string3);
      //  // Unstable assertion: assertNotSame(string4, string0);
      //  // Unstable assertion: assertNotSame(string4, string2);
      //  // Unstable assertion: assertNotSame(string4, string1);
      //  // Unstable assertion: assertEquals(47, stringBuffer3.length());
      //  // Unstable assertion: assertEquals("aPZ`Pl\u0000{69.0,0.0,69.0,-1.0,0.0,69.0,-1.0,69.0}", stringBuffer3.toString());
      //  // Unstable assertion: assertEquals(48, stringBuffer3.capacity());
      //  // Unstable assertion: assertEquals(",", standardToStringStyle0.getFieldSeparator());
      //  // Unstable assertion: assertEquals("[", standardToStringStyle0.getContentStart());
      //  // Unstable assertion: assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      //  // Unstable assertion: assertEquals(">", standardToStringStyle0.getSizeEndText());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseClassName());
      //  // Unstable assertion: assertEquals("{", standardToStringStyle0.getArrayStart());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isUseShortClassName());
      //  // Unstable assertion: assertEquals(",", standardToStringStyle0.getArraySeparator());
      //  // Unstable assertion: assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      //  // Unstable assertion: assertEquals("]", standardToStringStyle0.getContentEnd());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseFieldNames());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      //  // Unstable assertion: assertEquals("<null>", standardToStringStyle0.getNullText());
      //  // Unstable assertion: assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      //  // Unstable assertion: assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      //  // Unstable assertion: assertEquals("}", standardToStringStyle0.getArrayEnd());
      //  // Unstable assertion: assertEquals(48, stringBuffer2.capacity());
      //  // Unstable assertion: assertEquals("aPZ`Pl\u0000{69.0,0.0,69.0,-1.0,0.0,69.0,-1.0,69.0}", stringBuffer2.toString());
      //  // Unstable assertion: assertEquals(47, stringBuffer2.length());
      //  // Unstable assertion: assertArrayEquals(new char[] {'\u0000'}, charArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {69.0, 0.0, 69.0, (-1.0), 0.0, 69.0, (-1.0), 69.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertFalse(stringBuffer3.equals((Object)stringBuffer0));
      //  // Unstable assertion: assertFalse(stringBuffer3.equals((Object)stringBuffer1));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string4));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertFalse(stringBuffer2.equals((Object)stringBuffer0));
      //  // Unstable assertion: assertFalse(stringBuffer2.equals((Object)stringBuffer1));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string1));
      
      Object[] objectArray0 = new Object[10];
      objectArray0[0] = (Object) char0;
      //  // Unstable assertion: assertNotNull(objectArray0[0]);
      
      objectArray0[1] = (Object) stringBuffer1;
      //  // Unstable assertion: assertEquals(",", standardToStringStyle0.getFieldSeparator());
      //  // Unstable assertion: assertEquals("[", standardToStringStyle0.getContentStart());
      //  // Unstable assertion: assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      //  // Unstable assertion: assertEquals(">", standardToStringStyle0.getSizeEndText());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseClassName());
      //  // Unstable assertion: assertEquals("{", standardToStringStyle0.getArrayStart());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isUseShortClassName());
      //  // Unstable assertion: assertEquals(",", standardToStringStyle0.getArraySeparator());
      //  // Unstable assertion: assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      //  // Unstable assertion: assertEquals("]", standardToStringStyle0.getContentEnd());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseFieldNames());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      //  // Unstable assertion: assertEquals("<null>", standardToStringStyle0.getNullText());
      //  // Unstable assertion: assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      //  // Unstable assertion: assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      //  // Unstable assertion: assertEquals("}", standardToStringStyle0.getArrayEnd());
      //  // Unstable assertion: assertEquals(16, stringBuffer1.capacity());
      //  // Unstable assertion: assertEquals(1, stringBuffer1.length());
      //  // Unstable assertion: assertEquals("{", stringBuffer1.toString());
      //  // Unstable assertion: assertEquals("{", stringBuffer0.toString());
      //  // Unstable assertion: assertEquals(16, stringBuffer0.capacity());
      //  // Unstable assertion: assertEquals(1, stringBuffer0.length());
      //  // Unstable assertion: assertNotNull(objectArray0[1]);
      
      objectArray0[2] = (Object) stringBuffer0;
      //  // Unstable assertion: assertEquals("{", stringBuffer0.toString());
      //  // Unstable assertion: assertEquals(16, stringBuffer0.capacity());
      //  // Unstable assertion: assertEquals(1, stringBuffer0.length());
      //  // Unstable assertion: assertNotNull(objectArray0[2]);
      
      objectArray0[3] = (Object) stringBuffer1;
      //  // Unstable assertion: assertEquals(",", standardToStringStyle0.getFieldSeparator());
      //  // Unstable assertion: assertEquals("[", standardToStringStyle0.getContentStart());
      //  // Unstable assertion: assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      //  // Unstable assertion: assertEquals(">", standardToStringStyle0.getSizeEndText());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseClassName());
      //  // Unstable assertion: assertEquals("{", standardToStringStyle0.getArrayStart());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isUseShortClassName());
      //  // Unstable assertion: assertEquals(",", standardToStringStyle0.getArraySeparator());
      //  // Unstable assertion: assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      //  // Unstable assertion: assertEquals("]", standardToStringStyle0.getContentEnd());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseFieldNames());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      //  // Unstable assertion: assertEquals("<null>", standardToStringStyle0.getNullText());
      //  // Unstable assertion: assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      //  // Unstable assertion: assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      //  // Unstable assertion: assertEquals("}", standardToStringStyle0.getArrayEnd());
      //  // Unstable assertion: assertEquals(16, stringBuffer1.capacity());
      //  // Unstable assertion: assertEquals(1, stringBuffer1.length());
      //  // Unstable assertion: assertEquals("{", stringBuffer1.toString());
      //  // Unstable assertion: assertEquals("{", stringBuffer0.toString());
      //  // Unstable assertion: assertEquals(16, stringBuffer0.capacity());
      //  // Unstable assertion: assertEquals(1, stringBuffer0.length());
      //  // Unstable assertion: assertNotNull(objectArray0[3]);
      
      objectArray0[4] = (Object) stringBuffer2;
      //  // Unstable assertion: assertEquals(48, stringBuffer2.capacity());
      //  // Unstable assertion: assertEquals("aPZ`Pl\u0000{69.0,0.0,69.0,-1.0,0.0,69.0,-1.0,69.0}", stringBuffer2.toString());
      //  // Unstable assertion: assertEquals(47, stringBuffer2.length());
      //  // Unstable assertion: assertNotNull(objectArray0[4]);
      
      objectArray0[5] = (Object) string3;
      //  // Unstable assertion: assertEquals(",", standardToStringStyle0.getFieldSeparator());
      //  // Unstable assertion: assertEquals("[", standardToStringStyle0.getContentStart());
      //  // Unstable assertion: assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      //  // Unstable assertion: assertEquals(">", standardToStringStyle0.getSizeEndText());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseClassName());
      //  // Unstable assertion: assertEquals("{", standardToStringStyle0.getArrayStart());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isUseShortClassName());
      //  // Unstable assertion: assertEquals(",", standardToStringStyle0.getArraySeparator());
      //  // Unstable assertion: assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      //  // Unstable assertion: assertEquals("]", standardToStringStyle0.getContentEnd());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseFieldNames());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      //  // Unstable assertion: assertEquals("<null>", standardToStringStyle0.getNullText());
      //  // Unstable assertion: assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      //  // Unstable assertion: assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      //  // Unstable assertion: assertEquals("}", standardToStringStyle0.getArrayEnd());
      //  // Unstable assertion: assertNotNull(objectArray0[5]);
      
      objectArray0[6] = (Object) stringBuffer3;
      //  // Unstable assertion: assertEquals(47, stringBuffer3.length());
      //  // Unstable assertion: assertEquals("aPZ`Pl\u0000{69.0,0.0,69.0,-1.0,0.0,69.0,-1.0,69.0}", stringBuffer3.toString());
      //  // Unstable assertion: assertEquals(48, stringBuffer3.capacity());
      //  // Unstable assertion: assertEquals(48, stringBuffer2.capacity());
      //  // Unstable assertion: assertEquals("aPZ`Pl\u0000{69.0,0.0,69.0,-1.0,0.0,69.0,-1.0,69.0}", stringBuffer2.toString());
      //  // Unstable assertion: assertEquals(47, stringBuffer2.length());
      //  // Unstable assertion: assertNotNull(objectArray0[6]);
      
      objectArray0[7] = (Object) double0;
      //  // Unstable assertion: assertNotNull(objectArray0[7]);
      
      Object object0 = new Object();
      //  // Unstable assertion: assertNotNull(object0);
      
      objectArray0[8] = object0;
      //  // Unstable assertion: assertNotNull(objectArray0[8]);
      
      objectArray0[9] = (Object) int0;
      //  // Unstable assertion: assertNotNull(objectArray0[9]);
      
      standardToStringStyle0.appendDetail(stringBuffer1, string1, objectArray0);
      //  // Unstable assertion: assertNotSame(string1, string4);
      //  // Unstable assertion: assertNotSame(string1, string3);
      //  // Unstable assertion: assertNotSame(string1, string2);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertNotSame(stringBuffer1, stringBuffer2);
      //  // Unstable assertion: assertNotSame(stringBuffer1, stringBuffer3);
      //  // Unstable assertion: assertSame(stringBuffer1, stringBuffer0);
      //  // Unstable assertion: assertNotSame(stringBuffer0, stringBuffer2);
      //  // Unstable assertion: assertNotSame(stringBuffer0, stringBuffer3);
      //  // Unstable assertion: assertSame(stringBuffer0, stringBuffer1);
      //  // Unstable assertion: assertEquals(",", standardToStringStyle0.getFieldSeparator());
      //  // Unstable assertion: assertEquals("[", standardToStringStyle0.getContentStart());
      //  // Unstable assertion: assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      //  // Unstable assertion: assertEquals(">", standardToStringStyle0.getSizeEndText());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseClassName());
      //  // Unstable assertion: assertEquals("{", standardToStringStyle0.getArrayStart());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isUseShortClassName());
      //  // Unstable assertion: assertEquals(",", standardToStringStyle0.getArraySeparator());
      //  // Unstable assertion: assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      //  // Unstable assertion: assertEquals("]", standardToStringStyle0.getContentEnd());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseFieldNames());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      //  // Unstable assertion: assertEquals("<null>", standardToStringStyle0.getNullText());
      //  // Unstable assertion: assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      //  // Unstable assertion: assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      //  // Unstable assertion: assertEquals("}", standardToStringStyle0.getArrayEnd());
      //  // Unstable assertion: assertEquals(175, stringBuffer1.length());
      //  // Unstable assertion: assertEquals(286, stringBuffer1.capacity());
      //  // Unstable assertion: assertEquals(175, stringBuffer0.length());
      //  // Unstable assertion: assertEquals(286, stringBuffer0.capacity());
      //  // Unstable assertion: assertFalse(string1.equals((Object)string4));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertFalse(stringBuffer1.equals((Object)stringBuffer2));
      //  // Unstable assertion: assertFalse(stringBuffer1.equals((Object)stringBuffer3));
      //  // Unstable assertion: assertFalse(stringBuffer0.equals((Object)stringBuffer2));
      //  // Unstable assertion: assertFalse(stringBuffer0.equals((Object)stringBuffer3));
      
      int int1 = 0;
      StringBuffer stringBuffer4 = stringBuffer3.insert(int1, (long) int1);
      //  // Unstable assertion: assertNotSame(stringBuffer4, stringBuffer1);
      //  // Unstable assertion: assertNotSame(stringBuffer4, stringBuffer0);
      //  // Unstable assertion: assertSame(stringBuffer4, stringBuffer2);
      //  // Unstable assertion: assertSame(stringBuffer4, stringBuffer3);
      //  // Unstable assertion: assertNotSame(stringBuffer3, stringBuffer0);
      //  // Unstable assertion: assertNotSame(stringBuffer3, stringBuffer1);
      //  // Unstable assertion: assertSame(stringBuffer3, stringBuffer2);
      //  // Unstable assertion: assertSame(stringBuffer3, stringBuffer4);
      //  // Unstable assertion: assertNotSame(string2, string1);
      //  // Unstable assertion: assertNotSame(string2, string4);
      //  // Unstable assertion: assertNotSame(string2, string3);
      //  // Unstable assertion: assertNotSame(string2, string0);
      //  // Unstable assertion: assertNotSame(stringBuffer2, stringBuffer0);
      //  // Unstable assertion: assertSame(stringBuffer2, stringBuffer4);
      //  // Unstable assertion: assertNotSame(stringBuffer2, stringBuffer1);
      //  // Unstable assertion: assertSame(stringBuffer2, stringBuffer3);
      //  // Unstable assertion: assertEquals("0aPZ`Pl\u0000{69.0,0.0,69.0,-1.0,0.0,69.0,-1.0,69.0}", stringBuffer4.toString());
      //  // Unstable assertion: assertEquals(48, stringBuffer4.length());
      //  // Unstable assertion: assertEquals(48, stringBuffer4.capacity());
      //  // Unstable assertion: assertEquals(48, stringBuffer3.length());
      //  // Unstable assertion: assertEquals(48, stringBuffer3.capacity());
      //  // Unstable assertion: assertEquals("0aPZ`Pl\u0000{69.0,0.0,69.0,-1.0,0.0,69.0,-1.0,69.0}", stringBuffer3.toString());
      //  // Unstable assertion: assertEquals(48, stringBuffer2.capacity());
      //  // Unstable assertion: assertEquals("0aPZ`Pl\u0000{69.0,0.0,69.0,-1.0,0.0,69.0,-1.0,69.0}", stringBuffer2.toString());
      //  // Unstable assertion: assertEquals(48, stringBuffer2.length());
      //  // Unstable assertion: assertNotNull(stringBuffer4);
      //  // Unstable assertion: assertArrayEquals(new char[] {'\u0000'}, charArray0);
      //  // Unstable assertion: assertFalse(stringBuffer4.equals((Object)stringBuffer1));
      //  // Unstable assertion: assertFalse(stringBuffer4.equals((Object)stringBuffer0));
      //  // Unstable assertion: assertFalse(stringBuffer3.equals((Object)stringBuffer0));
      //  // Unstable assertion: assertFalse(stringBuffer3.equals((Object)stringBuffer1));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string4));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertFalse(stringBuffer2.equals((Object)stringBuffer0));
      //  // Unstable assertion: assertFalse(stringBuffer2.equals((Object)stringBuffer1));
      
      String string5 = "";
      //  // Unstable assertion: assertNotSame(string5, string0);
      //  // Unstable assertion: assertSame(string5, string4);
      //  // Unstable assertion: assertNotSame(string5, string2);
      //  // Unstable assertion: assertNotSame(string5, string3);
      //  // Unstable assertion: assertNotSame(string5, string1);
      //  // Unstable assertion: assertFalse(string5.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string1));
      
      Double double1 = new Double((double) charArray0[0]);
      //  // Unstable assertion: assertEquals(0.0, (double)double1, 0.01D);
      //  // Unstable assertion: assertArrayEquals(new char[] {'\u0000'}, charArray0);
      //  // Unstable assertion: assertFalse(double1.equals((Object)double0));
      
      Boolean boolean1 = Boolean.valueOf(string5);
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertNotSame(string5, string0);
      //  // Unstable assertion: assertSame(string5, string4);
      //  // Unstable assertion: assertNotSame(string5, string2);
      //  // Unstable assertion: assertNotSame(string5, string3);
      //  // Unstable assertion: assertNotSame(string5, string1);
      //  // Unstable assertion: assertTrue(boolean1.equals((Object)boolean0));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string1));
      
      toStringStyle0.append(stringBuffer4, string5, (Object) double1, boolean1);
      //  // Unstable assertion: assertNotSame(stringBuffer4, stringBuffer1);
      //  // Unstable assertion: assertNotSame(stringBuffer4, stringBuffer0);
      //  // Unstable assertion: assertSame(stringBuffer4, stringBuffer2);
      //  // Unstable assertion: assertSame(stringBuffer4, stringBuffer3);
      //  // Unstable assertion: assertNotSame(stringBuffer3, stringBuffer0);
      //  // Unstable assertion: assertNotSame(stringBuffer3, stringBuffer1);
      //  // Unstable assertion: assertSame(stringBuffer3, stringBuffer2);
      //  // Unstable assertion: assertSame(stringBuffer3, stringBuffer4);
      //  // Unstable assertion: assertNotSame(string2, string1);
      //  // Unstable assertion: assertNotSame(string2, string4);
      //  // Unstable assertion: assertNotSame(string2, string3);
      //  // Unstable assertion: assertNotSame(string2, string5);
      //  // Unstable assertion: assertNotSame(string2, string0);
      //  // Unstable assertion: assertNotSame(stringBuffer2, stringBuffer0);
      //  // Unstable assertion: assertSame(stringBuffer2, stringBuffer4);
      //  // Unstable assertion: assertNotSame(stringBuffer2, stringBuffer1);
      //  // Unstable assertion: assertSame(stringBuffer2, stringBuffer3);
      //  // Unstable assertion: assertNotSame(string5, string0);
      //  // Unstable assertion: assertSame(string5, string4);
      //  // Unstable assertion: assertNotSame(string5, string2);
      //  // Unstable assertion: assertNotSame(string5, string3);
      //  // Unstable assertion: assertNotSame(string5, string1);
      //  // Unstable assertion: assertEquals("0aPZ`Pl\u0000{69.0,0.0,69.0,-1.0,0.0,69.0,-1.0,69.0} V<'?rO.#OZDoubleFl$2Hch", stringBuffer4.toString());
      //  // Unstable assertion: assertEquals(72, stringBuffer4.length());
      //  // Unstable assertion: assertEquals(98, stringBuffer4.capacity());
      //  // Unstable assertion: assertEquals("0aPZ`Pl\u0000{69.0,0.0,69.0,-1.0,0.0,69.0,-1.0,69.0} V<'?rO.#OZDoubleFl$2Hch", stringBuffer3.toString());
      //  // Unstable assertion: assertEquals(72, stringBuffer3.length());
      //  // Unstable assertion: assertEquals(98, stringBuffer3.capacity());
      //  // Unstable assertion: assertEquals(98, stringBuffer2.capacity());
      //  // Unstable assertion: assertEquals("0aPZ`Pl\u0000{69.0,0.0,69.0,-1.0,0.0,69.0,-1.0,69.0} V<'?rO.#OZDoubleFl$2Hch", stringBuffer2.toString());
      //  // Unstable assertion: assertEquals(72, stringBuffer2.length());
      //  // Unstable assertion: assertArrayEquals(new char[] {'\u0000'}, charArray0);
      //  // Unstable assertion: assertFalse(stringBuffer4.equals((Object)stringBuffer1));
      //  // Unstable assertion: assertFalse(stringBuffer4.equals((Object)stringBuffer0));
      //  // Unstable assertion: assertFalse(stringBuffer3.equals((Object)stringBuffer0));
      //  // Unstable assertion: assertFalse(stringBuffer3.equals((Object)stringBuffer1));
      //  // Unstable assertion: assertTrue(boolean1.equals((Object)boolean0));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string4));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string5));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertFalse(stringBuffer2.equals((Object)stringBuffer0));
      //  // Unstable assertion: assertFalse(stringBuffer2.equals((Object)stringBuffer1));
      //  // Unstable assertion: assertFalse(double1.equals((Object)double0));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string1));
      
      StringBuffer stringBuffer5 = new StringBuffer(string0);
      //  // Unstable assertion: assertNotSame(stringBuffer5, stringBuffer0);
      //  // Unstable assertion: assertNotSame(stringBuffer5, stringBuffer3);
      //  // Unstable assertion: assertNotSame(stringBuffer5, stringBuffer1);
      //  // Unstable assertion: assertNotSame(stringBuffer5, stringBuffer4);
      //  // Unstable assertion: assertNotSame(stringBuffer5, stringBuffer2);
      //  // Unstable assertion: assertNotSame(string0, string5);
      //  // Unstable assertion: assertNotSame(string0, string2);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertNotSame(string0, string3);
      //  // Unstable assertion: assertNotSame(string0, string4);
      //  // Unstable assertion: assertEquals(30, stringBuffer5.capacity());
      //  // Unstable assertion: assertEquals(14, stringBuffer5.length());
      //  // Unstable assertion: assertEquals("pHi?7FsC5G9ssj", stringBuffer5.toString());
      //  // Unstable assertion: assertNotNull(stringBuffer5);
      //  // Unstable assertion: assertFalse(stringBuffer5.equals((Object)stringBuffer0));
      //  // Unstable assertion: assertFalse(stringBuffer5.equals((Object)stringBuffer3));
      //  // Unstable assertion: assertFalse(stringBuffer5.equals((Object)stringBuffer1));
      //  // Unstable assertion: assertFalse(stringBuffer5.equals((Object)stringBuffer4));
      //  // Unstable assertion: assertFalse(stringBuffer5.equals((Object)stringBuffer2));
      //  // Unstable assertion: assertFalse(string0.equals((Object)string5));
      //  // Unstable assertion: assertFalse(string0.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string0.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string0.equals((Object)string4));
      
      boolean boolean2 = toStringStyle0.isUseClassName();
      //  // Unstable assertion: assertTrue(boolean2);
      //  // Unstable assertion: assertFalse(boolean2 == boolean0);
      
      int int2 = 1123;
      String string6 = "";
      //  // Unstable assertion: assertNotSame(string6, string0);
      //  // Unstable assertion: assertNotSame(string6, string1);
      //  // Unstable assertion: assertNotSame(string6, string3);
      //  // Unstable assertion: assertNotSame(string6, string2);
      //  // Unstable assertion: assertSame(string6, string4);
      //  // Unstable assertion: assertSame(string6, string5);
      //  // Unstable assertion: assertFalse(string6.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string6.equals((Object)string3));
      
      short short0 = (short) (-1291);
      toStringStyle0.append(stringBuffer4, string6, short0);
      //  // Unstable assertion: assertNotSame(stringBuffer4, stringBuffer1);
      //  // Unstable assertion: assertNotSame(stringBuffer4, stringBuffer5);
      //  // Unstable assertion: assertNotSame(stringBuffer4, stringBuffer0);
      //  // Unstable assertion: assertSame(stringBuffer4, stringBuffer2);
      //  // Unstable assertion: assertSame(stringBuffer4, stringBuffer3);
      //  // Unstable assertion: assertNotSame(stringBuffer3, stringBuffer0);
      //  // Unstable assertion: assertNotSame(stringBuffer3, stringBuffer1);
      //  // Unstable assertion: assertSame(stringBuffer3, stringBuffer2);
      //  // Unstable assertion: assertSame(stringBuffer3, stringBuffer4);
      //  // Unstable assertion: assertNotSame(stringBuffer3, stringBuffer5);
      //  // Unstable assertion: assertNotSame(string2, string1);
      //  // Unstable assertion: assertNotSame(string2, string6);
      //  // Unstable assertion: assertNotSame(string2, string4);
      //  // Unstable assertion: assertNotSame(string2, string3);
      //  // Unstable assertion: assertNotSame(string2, string5);
      //  // Unstable assertion: assertNotSame(string2, string0);
      //  // Unstable assertion: assertNotSame(stringBuffer2, stringBuffer5);
      //  // Unstable assertion: assertNotSame(stringBuffer2, stringBuffer0);
      //  // Unstable assertion: assertSame(stringBuffer2, stringBuffer4);
      //  // Unstable assertion: assertNotSame(stringBuffer2, stringBuffer1);
      //  // Unstable assertion: assertSame(stringBuffer2, stringBuffer3);
      //  // Unstable assertion: assertNotSame(string6, string0);
      //  // Unstable assertion: assertNotSame(string6, string1);
      //  // Unstable assertion: assertNotSame(string6, string3);
      //  // Unstable assertion: assertNotSame(string6, string2);
      //  // Unstable assertion: assertSame(string6, string4);
      //  // Unstable assertion: assertSame(string6, string5);
      //  // Unstable assertion: assertEquals("0aPZ`Pl\u0000{69.0,0.0,69.0,-1.0,0.0,69.0,-1.0,69.0} V<'?rO.#OZDoubleFl$2Hch-1291l$2Hch", stringBuffer4.toString());
      //  // Unstable assertion: assertEquals(83, stringBuffer4.length());
      //  // Unstable assertion: assertEquals(98, stringBuffer4.capacity());
      //  // Unstable assertion: assertEquals("0aPZ`Pl\u0000{69.0,0.0,69.0,-1.0,0.0,69.0,-1.0,69.0} V<'?rO.#OZDoubleFl$2Hch-1291l$2Hch", stringBuffer3.toString());
      //  // Unstable assertion: assertEquals(83, stringBuffer3.length());
      //  // Unstable assertion: assertEquals(98, stringBuffer3.capacity());
      //  // Unstable assertion: assertEquals(98, stringBuffer2.capacity());
      //  // Unstable assertion: assertEquals("0aPZ`Pl\u0000{69.0,0.0,69.0,-1.0,0.0,69.0,-1.0,69.0} V<'?rO.#OZDoubleFl$2Hch-1291l$2Hch", stringBuffer2.toString());
      //  // Unstable assertion: assertEquals(83, stringBuffer2.length());
      //  // Unstable assertion: assertArrayEquals(new char[] {'\u0000'}, charArray0);
      //  // Unstable assertion: assertFalse(stringBuffer4.equals((Object)stringBuffer1));
      //  // Unstable assertion: assertFalse(stringBuffer4.equals((Object)stringBuffer5));
      //  // Unstable assertion: assertFalse(stringBuffer4.equals((Object)stringBuffer0));
      //  // Unstable assertion: assertFalse(stringBuffer3.equals((Object)stringBuffer0));
      //  // Unstable assertion: assertFalse(stringBuffer3.equals((Object)stringBuffer1));
      //  // Unstable assertion: assertFalse(stringBuffer3.equals((Object)stringBuffer5));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string6));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string4));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string5));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertFalse(stringBuffer2.equals((Object)stringBuffer5));
      //  // Unstable assertion: assertFalse(stringBuffer2.equals((Object)stringBuffer0));
      //  // Unstable assertion: assertFalse(stringBuffer2.equals((Object)stringBuffer1));
      //  // Unstable assertion: assertFalse(int1 == int2);
      //  // Unstable assertion: assertFalse(string6.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string6.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string6.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string6.equals((Object)string2));
  }

  @Test
  public void test31()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      //  // Unstable assertion: assertNotNull(toStringStyle0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      //  // Unstable assertion: assertEquals(16, stringBuffer0.capacity());
      //  // Unstable assertion: assertEquals("", stringBuffer0.toString());
      //  // Unstable assertion: assertEquals(0, stringBuffer0.length());
      //  // Unstable assertion: assertNotNull(stringBuffer0);
      
      String string0 = "bJ?+qAFH*c,]jK)2";
      Object object0 = null;
      Boolean boolean0 = new Boolean(string0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      toStringStyle0.append(stringBuffer0, string0, object0, boolean0);
      //  // Unstable assertion: assertEquals(34, stringBuffer0.capacity());
      //  // Unstable assertion: assertEquals("bJ?+qAFH*c,]jK)2{>hDQh</Grm", stringBuffer0.toString());
      //  // Unstable assertion: assertEquals(27, stringBuffer0.length());
  }

  @Test
  public void test32()  throws Throwable  {
      String string0 = "<70C[oR";
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertNotNull(standardToStringStyle0);
      
      String string1 = standardToStringStyle0.getSizeEndText();
      assertEquals(">", string1);
      assertNotSame(string1, string0);
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      StringBuffer stringBuffer0 = new StringBuffer(string0);
      assertNotSame(string0, string1);
      assertEquals(7, stringBuffer0.length());
      assertEquals("<70C[oR", stringBuffer0.toString());
      assertEquals(23, stringBuffer0.capacity());
      assertNotNull(stringBuffer0);
      assertFalse(string0.equals((Object)string1));
      
      long[] longArray0 = new long[5];
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      
      standardToStringStyle0.append(stringBuffer0, string1, longArray0, boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("<70C[oR>={0,0,0,0,0},", stringBuffer0.toString());
      assertEquals(23, stringBuffer0.capacity());
      assertEquals(21, stringBuffer0.length());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      standardToStringStyle0.appendEnd(stringBuffer0, (Object) standardToStringStyle0);
      assertNotSame(string0, string1);
      assertEquals("<70C[oR>={0,0,0,0,0}]", stringBuffer0.toString());
      assertEquals(23, stringBuffer0.capacity());
      assertEquals(21, stringBuffer0.length());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = "7R#V#WB%0Z;';";
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      assertNotNull(toStringStyle0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) string0);
      assertEquals(30, stringBuffer0.capacity());
      assertEquals("7R#V#WB%0Z;';", stringBuffer0.toString());
      assertEquals(14, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      toStringStyle0.removeLastFieldSeparator(stringBuffer0);
      assertEquals(30, stringBuffer0.capacity());
      assertEquals("7R#V#WB%0Z;';", stringBuffer0.toString());
      assertEquals(14, stringBuffer0.length());
  }

  @Test
  public void test34()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertNotNull(standardToStringStyle0);
      
      int int0 = 1;
      StringBuffer stringBuffer0 = new StringBuffer(int0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.capacity());
      assertNotNull(stringBuffer0);
      
      char char0 = '}';
      StringBuffer stringBuffer1 = stringBuffer0.append(char0);
      assertSame(stringBuffer1, stringBuffer0);
      assertSame(stringBuffer0, stringBuffer1);
      assertEquals(1, stringBuffer1.length());
      assertEquals("}", stringBuffer1.toString());
      assertEquals(1, stringBuffer1.capacity());
      assertEquals(1, stringBuffer0.length());
      assertEquals(1, stringBuffer0.capacity());
      assertEquals("}", stringBuffer0.toString());
      assertNotNull(stringBuffer1);
      
      standardToStringStyle0.appendEnd(stringBuffer1, (Object) standardToStringStyle0);
      assertSame(stringBuffer1, stringBuffer0);
      assertSame(stringBuffer0, stringBuffer1);
      assertEquals(2, stringBuffer1.length());
      assertEquals(4, stringBuffer1.capacity());
      assertEquals("}]", stringBuffer1.toString());
      assertEquals(2, stringBuffer0.length());
      assertEquals(4, stringBuffer0.capacity());
      assertEquals("}]", stringBuffer0.toString());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
  }

  @Test
  public void test35()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
      //  // Unstable assertion: assertNotNull(toStringStyle0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      //  // Unstable assertion: assertEquals(0, stringBuffer0.length());
      //  // Unstable assertion: assertEquals(16, stringBuffer0.capacity());
      //  // Unstable assertion: assertEquals("", stringBuffer0.toString());
      //  // Unstable assertion: assertNotNull(stringBuffer0);
      
      toStringStyle0.appendEnd(stringBuffer0, (Object) stringBuffer0);
      //  // Unstable assertion: assertEquals("S-Lz<7!h", stringBuffer0.toString());
      //  // Unstable assertion: assertEquals(16, stringBuffer0.capacity());
      //  // Unstable assertion: assertEquals(8, stringBuffer0.length());
  }

  @Test
  public void test36()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertNotNull(standardToStringStyle0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(16, stringBuffer0.capacity());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      String string0 = null;
      standardToStringStyle0.appendStart(stringBuffer0, (Object) string0);
      assertEquals(16, stringBuffer0.capacity());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("]", standardToStringStyle0.getContentEnd());
  }

  @Test
  public void test37()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertNotNull(standardToStringStyle0);
      
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(int0);
      assertEquals(0, stringBuffer0.capacity());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      String string0 = "B[7#dYw6]AV^3Q";
      standardToStringStyle0.appendToString(stringBuffer0, string0);
      assertEquals("7#dYw6,", stringBuffer0.toString());
      assertEquals(7, stringBuffer0.length());
      assertEquals(14, stringBuffer0.capacity());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
  }

  @Test
  public void test38()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertNotNull(standardToStringStyle0);
      
      int int0 = (-1438);
      Integer integer0 = new Integer(int0);
      assertEquals((-1438), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      String string0 = integer0.toString();
      assertEquals("-1438", string0);
      assertNotNull(string0);
      assertTrue(integer0.equals((Object)int0));
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) string0);
      assertEquals(5, stringBuffer0.length());
      assertEquals("-1438", stringBuffer0.toString());
      assertEquals(21, stringBuffer0.capacity());
      assertNotNull(stringBuffer0);
      assertTrue(integer0.equals((Object)int0));
      
      standardToStringStyle0.appendToString(stringBuffer0, string0);
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(5, stringBuffer0.length());
      assertEquals("-1438", stringBuffer0.toString());
      assertEquals(21, stringBuffer0.capacity());
      assertTrue(integer0.equals((Object)int0));
  }

  @Test
  public void test39()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertNotNull(standardToStringStyle0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      String string0 = null;
      standardToStringStyle0.appendToString(stringBuffer0, string0);
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
  }

  @Test
  public void test40()  throws Throwable  {
      Object object0 = null;
      ToStringStyle.unregister(object0);
  }

  @Test
  public void test41()  throws Throwable  {
      Object object0 = null;
      ToStringStyle.register(object0);
  }

  @Test
  public void test42()  throws Throwable  {
      String string0 = " !mR|VLDdTC";
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertNotNull(standardToStringStyle0);
      
      int int0 = 171;
      StringBuffer stringBuffer0 = new StringBuffer(int0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(171, stringBuffer0.capacity());
      assertNotNull(stringBuffer0);
      
      standardToStringStyle0.append(stringBuffer0, string0, int0);
      assertEquals(17, stringBuffer0.length());
      assertEquals(" !mR|VLDdTC=171,", stringBuffer0.toString());
      assertEquals(171, stringBuffer0.capacity());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("{", standardToStringStyle0.getArrayStart());
  }

  @Test
  public void test43()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertNotNull(standardToStringStyle0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      String string0 = "A";
      char char0 = '%';
      standardToStringStyle0.append(stringBuffer0, string0, (float) char0);
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("A=37.0,", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(7, stringBuffer0.length());
  }

  @Test
  public void test44()  throws Throwable  {
      String string0 = "^E7Ow";
      StringBuffer stringBuffer0 = new StringBuffer(string0);
      assertEquals(21, stringBuffer0.capacity());
      assertEquals("^E7Ow", stringBuffer0.toString());
      assertEquals(5, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      boolean boolean0 = false;
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertNotNull(standardToStringStyle0);
      
      byte[] byteArray0 = new byte[4];
      standardToStringStyle0.append(stringBuffer0, string0, byteArray0, (Boolean) boolean0);
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(20, stringBuffer0.length());
      assertEquals(21, stringBuffer0.capacity());
      assertEquals("^E7Ow^E7Ow=<size=4>,", stringBuffer0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test45()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertNotNull(standardToStringStyle0);
      
      boolean boolean0 = true;
      standardToStringStyle0.setFieldSeparatorAtStart(boolean0);
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(true, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
  }

  @Test
  public void test46()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      //  // Unstable assertion: assertNotNull(toStringStyle0);
      
      String string0 = toStringStyle0.getContentEnd();
      //  // Unstable assertion: assertEquals("}", string0);
      //  // Unstable assertion: assertNotNull(string0);
  }

  @Test
  public void test47()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      assertNotNull(toStringStyle0);
      
      boolean boolean0 = false;
      toStringStyle0.setUseIdentityHashCode(boolean0);
  }

  @Test
  public void test48()  throws Throwable  {
      String string0 = "7R#V#WB%0Z;';";
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      //  // Unstable assertion: assertNotNull(toStringStyle0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) string0);
      //  // Unstable assertion: assertEquals(30, stringBuffer0.capacity());
      //  // Unstable assertion: assertEquals(14, stringBuffer0.length());
      //  // Unstable assertion: assertEquals("7R#V#WB%0Z;';", stringBuffer0.toString());
      //  // Unstable assertion: assertNotNull(stringBuffer0);
      
      byte byte0 = (byte)36;
      toStringStyle0.append(stringBuffer0, string0, byte0);
      //  // Unstable assertion: assertEquals(35, stringBuffer0.length());
      //  // Unstable assertion: assertEquals("7R#V#WB%0Z;';36zD~9:d1-@(q]cp;jgo2", stringBuffer0.toString());
      //  // Unstable assertion: assertEquals(62, stringBuffer0.capacity());
  }

  @Test
  public void test49()  throws Throwable  {
      String string0 = "7R#V#WB%0Z;';";
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      //  // Unstable assertion: assertNotNull(toStringStyle0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) string0);
      //  // Unstable assertion: assertEquals(30, stringBuffer0.capacity());
      //  // Unstable assertion: assertEquals("7R#V#WB%0Z;';", stringBuffer0.toString());
      //  // Unstable assertion: assertEquals(14, stringBuffer0.length());
      //  // Unstable assertion: assertNotNull(stringBuffer0);
      
      Object object0 = new Object();
      //  // Unstable assertion: assertNotNull(object0);
      
      toStringStyle0.appendStart(stringBuffer0, object0);
      //  // Unstable assertion: assertEquals(28, stringBuffer0.length());
      //  // Unstable assertion: assertEquals(30, stringBuffer0.capacity());
      //  // Unstable assertion: assertEquals("7R#V#WB%0Z;';7R#V#WB%0Z;';", stringBuffer0.toString());
  }

  @Test
  public void test50()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      //  // Unstable assertion: assertNotNull(toStringStyle0);
      
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      //  // Unstable assertion: assertEquals("{", standardToStringStyle0.getArrayStart());
      //  // Unstable assertion: assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      //  // Unstable assertion: assertEquals(">", standardToStringStyle0.getSizeEndText());
      //  // Unstable assertion: assertEquals("}", standardToStringStyle0.getArrayEnd());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      //  // Unstable assertion: assertEquals("<null>", standardToStringStyle0.getNullText());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isUseShortClassName());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseFieldNames());
      //  // Unstable assertion: assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      //  // Unstable assertion: assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      //  // Unstable assertion: assertEquals(",", standardToStringStyle0.getFieldSeparator());
      //  // Unstable assertion: assertEquals("[", standardToStringStyle0.getContentStart());
      //  // Unstable assertion: assertEquals(",", standardToStringStyle0.getArraySeparator());
      //  // Unstable assertion: assertEquals("]", standardToStringStyle0.getContentEnd());
      //  // Unstable assertion: assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseClassName());
      //  // Unstable assertion: assertNotNull(standardToStringStyle0);
      
      String string0 = standardToStringStyle0.getFieldNameValueSeparator();
      //  // Unstable assertion: assertEquals("=", string0);
      //  // Unstable assertion: assertEquals("{", standardToStringStyle0.getArrayStart());
      //  // Unstable assertion: assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      //  // Unstable assertion: assertEquals(">", standardToStringStyle0.getSizeEndText());
      //  // Unstable assertion: assertEquals("}", standardToStringStyle0.getArrayEnd());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      //  // Unstable assertion: assertEquals("<null>", standardToStringStyle0.getNullText());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isUseShortClassName());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseFieldNames());
      //  // Unstable assertion: assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      //  // Unstable assertion: assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      //  // Unstable assertion: assertEquals(",", standardToStringStyle0.getFieldSeparator());
      //  // Unstable assertion: assertEquals("[", standardToStringStyle0.getContentStart());
      //  // Unstable assertion: assertEquals(",", standardToStringStyle0.getArraySeparator());
      //  // Unstable assertion: assertEquals("]", standardToStringStyle0.getContentEnd());
      //  // Unstable assertion: assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseClassName());
      //  // Unstable assertion: assertNotNull(string0);
      
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(int0);
      //  // Unstable assertion: assertEquals(0, stringBuffer0.capacity());
      //  // Unstable assertion: assertEquals("", stringBuffer0.toString());
      //  // Unstable assertion: assertEquals(0, stringBuffer0.length());
      //  // Unstable assertion: assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      try {
        toStringStyle0.appendSuper(stringBuffer0, string0);
       //  fail("Expecting exception: StringIndexOutOfBoundsException");
       // Unstable assertion
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -12
         //
      }
  }

  @Test
  public void test51()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertNotNull(standardToStringStyle0);
      
      String string0 = standardToStringStyle0.getArrayEnd();
      assertEquals("}", string0);
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertNotNull(string0);
  }

  @Test
  public void test52()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertNotNull(standardToStringStyle0);
      
      boolean boolean0 = true;
      standardToStringStyle0.setUseClassName(boolean0);
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
  }

  @Test
  public void test53()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertNotNull(standardToStringStyle0);
      
      String string0 = standardToStringStyle0.getSummaryObjectEndText();
      assertEquals(">", string0);
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertNotNull(string0);
  }

  @Test
  public void test54()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertNotNull(standardToStringStyle0);
      
      boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtEnd();
      assertFalse(boolean0);
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
  }

  @Test
  public void test55()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertNotNull(standardToStringStyle0);
      
      boolean boolean0 = standardToStringStyle0.isDefaultFullDetail();
      assertTrue(boolean0);
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
  }

  @Test
  public void test56()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertNotNull(standardToStringStyle0);
      
      String string0 = standardToStringStyle0.getFieldSeparator();
      assertEquals(",", string0);
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertNotNull(string0);
      
      StringBuffer stringBuffer0 = new StringBuffer(string0);
      assertEquals(1, stringBuffer0.length());
      assertEquals(17, stringBuffer0.capacity());
      assertEquals(",", stringBuffer0.toString());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertNotNull(stringBuffer0);
      
      boolean boolean0 = true;
      float[] floatArray0 = new float[8];
      standardToStringStyle0.append(stringBuffer0, string0, floatArray0, (Boolean) boolean0);
      assertEquals(37, stringBuffer0.length());
      assertEquals(74, stringBuffer0.capacity());
      assertEquals(",,={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},", stringBuffer0.toString());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test
  public void test57()  throws Throwable  {
      int int0 = 6;
      StringBuffer stringBuffer0 = new StringBuffer(int0);
      //  // Unstable assertion: assertEquals("", stringBuffer0.toString());
      //  // Unstable assertion: assertEquals(6, stringBuffer0.capacity());
      //  // Unstable assertion: assertEquals(0, stringBuffer0.length());
      //  // Unstable assertion: assertNotNull(stringBuffer0);
      
      String string0 = "2(4|^8^";
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      //  // Unstable assertion: assertEquals(",", standardToStringStyle0.getFieldSeparator());
      //  // Unstable assertion: assertEquals("]", standardToStringStyle0.getContentEnd());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseClassName());
      //  // Unstable assertion: assertEquals("[", standardToStringStyle0.getContentStart());
      //  // Unstable assertion: assertEquals(">", standardToStringStyle0.getSizeEndText());
      //  // Unstable assertion: assertEquals("<null>", standardToStringStyle0.getNullText());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isUseShortClassName());
      //  // Unstable assertion: assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseFieldNames());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      //  // Unstable assertion: assertEquals(",", standardToStringStyle0.getArraySeparator());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      //  // Unstable assertion: assertEquals("}", standardToStringStyle0.getArrayEnd());
      //  // Unstable assertion: assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      //  // Unstable assertion: assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      //  // Unstable assertion: assertEquals("{", standardToStringStyle0.getArrayStart());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      //  // Unstable assertion: assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      //  // Unstable assertion: assertNotNull(standardToStringStyle0);
      
      Object[] objectArray0 = new Object[10];
      objectArray0[0] = (Object) string0;
      //  // Unstable assertion: assertNotNull(objectArray0[0]);
      
      standardToStringStyle0.appendDetail(stringBuffer0, string0, objectArray0);
      //  // Unstable assertion: assertEquals(83, stringBuffer0.length());
      //  // Unstable assertion: assertEquals(150, stringBuffer0.capacity());
      //  // Unstable assertion: assertEquals(",", standardToStringStyle0.getFieldSeparator());
      //  // Unstable assertion: assertEquals("]", standardToStringStyle0.getContentEnd());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseClassName());
      //  // Unstable assertion: assertEquals("[", standardToStringStyle0.getContentStart());
      //  // Unstable assertion: assertEquals(">", standardToStringStyle0.getSizeEndText());
      //  // Unstable assertion: assertEquals("<null>", standardToStringStyle0.getNullText());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isUseShortClassName());
      //  // Unstable assertion: assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseFieldNames());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      //  // Unstable assertion: assertEquals(",", standardToStringStyle0.getArraySeparator());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      //  // Unstable assertion: assertEquals("}", standardToStringStyle0.getArrayEnd());
      //  // Unstable assertion: assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      //  // Unstable assertion: assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      //  // Unstable assertion: assertEquals("{", standardToStringStyle0.getArrayStart());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      //  // Unstable assertion: assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isArrayContentDetail());
  }

  @Test
  public void test58()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
      //  // Unstable assertion: assertNotNull(toStringStyle0);
      
      String string0 = "<70C[oR";
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      //  // Unstable assertion: assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      //  // Unstable assertion: assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      //  // Unstable assertion: assertEquals("<null>", standardToStringStyle0.getNullText());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseFieldNames());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isUseShortClassName());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseClassName());
      //  // Unstable assertion: assertEquals("]", standardToStringStyle0.getContentEnd());
      //  // Unstable assertion: assertEquals(">", standardToStringStyle0.getSizeEndText());
      //  // Unstable assertion: assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      //  // Unstable assertion: assertEquals("{", standardToStringStyle0.getArrayStart());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      //  // Unstable assertion: assertEquals("[", standardToStringStyle0.getContentStart());
      //  // Unstable assertion: assertEquals(",", standardToStringStyle0.getFieldSeparator());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      //  // Unstable assertion: assertEquals("}", standardToStringStyle0.getArrayEnd());
      //  // Unstable assertion: assertEquals(",", standardToStringStyle0.getArraySeparator());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      //  // Unstable assertion: assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      //  // Unstable assertion: assertNotNull(standardToStringStyle0);
      
      String string1 = standardToStringStyle0.getSizeEndText();
      //  // Unstable assertion: assertEquals(">", string1);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      //  // Unstable assertion: assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      //  // Unstable assertion: assertEquals("<null>", standardToStringStyle0.getNullText());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseFieldNames());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isUseShortClassName());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseClassName());
      //  // Unstable assertion: assertEquals("]", standardToStringStyle0.getContentEnd());
      //  // Unstable assertion: assertEquals(">", standardToStringStyle0.getSizeEndText());
      //  // Unstable assertion: assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      //  // Unstable assertion: assertEquals("{", standardToStringStyle0.getArrayStart());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      //  // Unstable assertion: assertEquals("[", standardToStringStyle0.getContentStart());
      //  // Unstable assertion: assertEquals(",", standardToStringStyle0.getFieldSeparator());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      //  // Unstable assertion: assertEquals("}", standardToStringStyle0.getArrayEnd());
      //  // Unstable assertion: assertEquals(",", standardToStringStyle0.getArraySeparator());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      //  // Unstable assertion: assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      
      StringBuffer stringBuffer0 = new StringBuffer(string0);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertEquals(23, stringBuffer0.capacity());
      //  // Unstable assertion: assertEquals(7, stringBuffer0.length());
      //  // Unstable assertion: assertEquals("<70C[oR", stringBuffer0.toString());
      //  // Unstable assertion: assertNotNull(stringBuffer0);
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      
      long[] longArray0 = new long[5];
      Boolean boolean0 = Boolean.FALSE;
      //  // Unstable assertion: assertFalse(boolean0);
      
      toStringStyle0.append(stringBuffer0, string1, longArray0, boolean0);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertEquals(48, stringBuffer0.capacity());
      //  // Unstable assertion: assertEquals("<70C[oR>>5<null>%s!9[d|P7qVQGL4Zt", stringBuffer0.toString());
      //  // Unstable assertion: assertEquals(33, stringBuffer0.length());
      //  // Unstable assertion: assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      //  // Unstable assertion: assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      //  // Unstable assertion: assertEquals("<null>", standardToStringStyle0.getNullText());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseFieldNames());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isUseShortClassName());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseClassName());
      //  // Unstable assertion: assertEquals("]", standardToStringStyle0.getContentEnd());
      //  // Unstable assertion: assertEquals(">", standardToStringStyle0.getSizeEndText());
      //  // Unstable assertion: assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      //  // Unstable assertion: assertEquals("{", standardToStringStyle0.getArrayStart());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      //  // Unstable assertion: assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      //  // Unstable assertion: assertEquals("[", standardToStringStyle0.getContentStart());
      //  // Unstable assertion: assertEquals(",", standardToStringStyle0.getFieldSeparator());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      //  // Unstable assertion: assertEquals("}", standardToStringStyle0.getArrayEnd());
      //  // Unstable assertion: assertEquals(",", standardToStringStyle0.getArraySeparator());
      //  // Unstable assertion: assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      //  // Unstable assertion: assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      //  // Unstable assertion: assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test59()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertNotNull(standardToStringStyle0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(0, stringBuffer0.length());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      Class<LinkedList> class0 = LinkedList.class;
      String string0 = standardToStringStyle0.getShortClassName(class0);
      assertEquals("LinkedList", string0);
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[5];
      boolean boolean0 = false;
      standardToStringStyle0.append(stringBuffer0, string0, objectArray0, (Boolean) boolean0);
      assertEquals(34, stringBuffer0.capacity());
      assertEquals("LinkedList=<size=5>,", stringBuffer0.toString());
      assertEquals(20, stringBuffer0.length());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
  }

  @Test
  public void test60()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertNotNull(standardToStringStyle0);
      
      boolean boolean0 = standardToStringStyle0.isUseShortClassName();
      assertFalse(boolean0);
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
  }

  @Test
  public void test61()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      //  // Unstable assertion: assertNotNull(toStringStyle0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      //  // Unstable assertion: assertEquals(16, stringBuffer0.capacity());
      //  // Unstable assertion: assertEquals("", stringBuffer0.toString());
      //  // Unstable assertion: assertEquals(0, stringBuffer0.length());
      //  // Unstable assertion: assertNotNull(stringBuffer0);
      
      String string0 = ",";
      boolean boolean0 = true;
      toStringStyle0.append(stringBuffer0, string0, boolean0);
      //  // Unstable assertion: assertEquals(16, stringBuffer0.capacity());
      //  // Unstable assertion: assertEquals(15, stringBuffer0.length());
      //  // Unstable assertion: assertEquals(",{truehDQh</Grm", stringBuffer0.toString());
  }

  @Test
  public void test62()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertNotNull(standardToStringStyle0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      String string0 = "A";
      char[] charArray0 = new char[8];
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      
      standardToStringStyle0.append(stringBuffer0, string0, charArray0, boolean0);
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(11, stringBuffer0.length());
      assertEquals("A=<size=8>,", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.capacity());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test63()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertNotNull(standardToStringStyle0);
      
      String string0 = standardToStringStyle0.getNullText();
      assertEquals("<null>", string0);
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertNotNull(string0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(16, stringBuffer0.capacity());
      assertNotNull(stringBuffer0);
      
      char[] charArray0 = new char[7];
      standardToStringStyle0.reflectionAppendArrayDetail(stringBuffer0, string0, charArray0);
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(15, stringBuffer0.length());
      assertEquals("{\u0000,\u0000,\u0000,\u0000,\u0000,\u0000,\u0000}", stringBuffer0.toString());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test64()  throws Throwable  {
      String string0 = " !mR|VLDdTC";
      int[] intArray0 = new int[2];
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertNotNull(standardToStringStyle0);
      
      int int0 = 171;
      StringBuffer stringBuffer0 = new StringBuffer(int0);
      assertEquals(171, stringBuffer0.capacity());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      Boolean boolean0 = new Boolean(string0);
      assertFalse(boolean0);
      
      standardToStringStyle0.append(stringBuffer0, string0, intArray0, boolean0);
      assertEquals(171, stringBuffer0.capacity());
      assertEquals(22, stringBuffer0.length());
      assertEquals(" !mR|VLDdTC=<size=2>,", stringBuffer0.toString());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test
  public void test65()  throws Throwable  {
      boolean boolean0 = false;
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertNotNull(standardToStringStyle0);
      
      String string0 = "+<A";
      StringBuffer stringBuffer0 = new StringBuffer(string0);
      assertEquals(3, stringBuffer0.length());
      assertEquals(19, stringBuffer0.capacity());
      assertEquals("+<A", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      double[] doubleArray0 = new double[4];
      standardToStringStyle0.append(stringBuffer0, string0, doubleArray0, (Boolean) boolean0);
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(16, stringBuffer0.length());
      assertEquals(19, stringBuffer0.capacity());
      assertEquals("+<A+<A=<size=4>,", stringBuffer0.toString());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test66()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertNotNull(standardToStringStyle0);
      
      boolean boolean0 = standardToStringStyle0.isArrayContentDetail();
      assertTrue(boolean0);
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      
      standardToStringStyle0.setUseShortClassName(boolean0);
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(true, standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
  }

  @Test
  public void test67()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertNotNull(standardToStringStyle0);
      
      String string0 = standardToStringStyle0.getFieldSeparator();
      assertEquals(",", string0);
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertNotNull(string0);
      
      StringBuffer stringBuffer0 = new StringBuffer(string0);
      assertEquals(1, stringBuffer0.length());
      assertEquals(17, stringBuffer0.capacity());
      assertEquals(",", stringBuffer0.toString());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertNotNull(stringBuffer0);
      
      char char0 = 'i';
      standardToStringStyle0.append(stringBuffer0, string0, char0);
      assertEquals(17, stringBuffer0.capacity());
      assertEquals(5, stringBuffer0.length());
      assertEquals(",,=i,", stringBuffer0.toString());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
  }

  @Test
  public void test68()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertNotNull(standardToStringStyle0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      standardToStringStyle0.appendEnd(stringBuffer0, (Object) stringBuffer0);
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("]", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(1, stringBuffer0.length());
  }

  @Test
  public void test69()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertNotNull(standardToStringStyle0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      Class<LinkedList> class0 = LinkedList.class;
      String string0 = standardToStringStyle0.getShortClassName(class0);
      assertEquals("LinkedList", string0);
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[9];
      boolean boolean0 = true;
      standardToStringStyle0.append(stringBuffer0, string0, booleanArray0, (Boolean) boolean0);
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(67, stringBuffer0.length());
      assertEquals("LinkedList={false,false,false,false,false,false,false,false,false},", stringBuffer0.toString());
      assertEquals(70, stringBuffer0.capacity());
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
  }

  @Test
  public void test70()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertNotNull(standardToStringStyle0);
      
      boolean boolean0 = standardToStringStyle0.isArrayContentDetail();
      assertTrue(boolean0);
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      
      standardToStringStyle0.setDefaultFullDetail(boolean0);
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
  }

  @Test
  public void test71()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertNotNull(standardToStringStyle0);
      
      boolean boolean0 = false;
      standardToStringStyle0.setFieldSeparatorAtEnd(boolean0);
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
  }

  @Test
  public void test72()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertNotNull(standardToStringStyle0);
      
      int int0 = (-1438);
      Integer integer0 = new Integer(int0);
      assertEquals((-1438), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      String string0 = integer0.toString();
      assertEquals("-1438", string0);
      assertNotNull(string0);
      assertTrue(integer0.equals((Object)int0));
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) string0);
      assertEquals(21, stringBuffer0.capacity());
      assertEquals(5, stringBuffer0.length());
      assertEquals("-1438", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      assertTrue(integer0.equals((Object)int0));
      
      boolean boolean0 = false;
      float[] floatArray0 = new float[7];
      standardToStringStyle0.append(stringBuffer0, string0, floatArray0, (Boolean) boolean0);
      assertEquals("-1438-1438=<size=7>,", stringBuffer0.toString());
      assertEquals(21, stringBuffer0.capacity());
      assertEquals(20, stringBuffer0.length());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(integer0.equals((Object)int0));
  }

  @Test
  public void test73()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertNotNull(standardToStringStyle0);
      
      String string0 = "cOo";
      StringBuffer stringBuffer0 = new StringBuffer(string0);
      assertEquals(19, stringBuffer0.capacity());
      assertEquals("cOo", stringBuffer0.toString());
      assertEquals(3, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      char char0 = '^';
      standardToStringStyle0.append(stringBuffer0, string0, (double) char0);
      assertEquals(12, stringBuffer0.length());
      assertEquals("cOocOo=94.0,", stringBuffer0.toString());
      assertEquals(19, stringBuffer0.capacity());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
  }

  @Test
  public void test74()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertNotNull(standardToStringStyle0);
      
      String string0 = standardToStringStyle0.getArraySeparator();
      assertEquals(",", string0);
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertNotNull(string0);
  }

  @Test
  public void test75()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertNotNull(standardToStringStyle0);
      
      String string0 = "y3,40P!C";
      StringBuffer stringBuffer0 = new StringBuffer(string0);
      assertEquals(24, stringBuffer0.capacity());
      assertEquals(8, stringBuffer0.length());
      assertEquals("y3,40P!C", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      String string1 = standardToStringStyle0.getContentStart();
      assertEquals("[", string1);
      assertNotSame(string1, string0);
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      short[] shortArray0 = new short[1];
      Boolean boolean0 = Boolean.valueOf(string1);
      assertFalse(boolean0);
      assertNotSame(string1, string0);
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertFalse(string1.equals((Object)string0));
      
      standardToStringStyle0.append(stringBuffer0, string0, shortArray0, boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(50, stringBuffer0.capacity());
      assertEquals(26, stringBuffer0.length());
      assertEquals("y3,40P!Cy3,40P!C=<size=1>,", stringBuffer0.toString());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test76()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertNotNull(standardToStringStyle0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      Class<LinkedList> class0 = LinkedList.class;
      String string0 = standardToStringStyle0.getShortClassName(class0);
      assertEquals("LinkedList", string0);
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[9];
      standardToStringStyle0.append(stringBuffer0, string0, booleanArray0, (Boolean) booleanArray0[1]);
      assertEquals(34, stringBuffer0.capacity());
      assertEquals(20, stringBuffer0.length());
      assertEquals("LinkedList=<size=9>,", stringBuffer0.toString());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
  }

  @Test
  public void test77()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertNotNull(standardToStringStyle0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.capacity());
      assertNotNull(stringBuffer0);
      
      String string0 = "A";
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      
      standardToStringStyle0.setArrayContentDetail((boolean) boolean0);
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(false, standardToStringStyle0.isArrayContentDetail());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) stringBuffer0;
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.capacity());
      assertNotNull(objectArray0[0]);
      
      standardToStringStyle0.appendDetail(stringBuffer0, string0, objectArray0);
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(false, standardToStringStyle0.isArrayContentDetail());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(16, stringBuffer0.length());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals("{<StringBuffer>}", stringBuffer0.toString());
  }

  @Test
  public void test78()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertNotNull(standardToStringStyle0);
      
      int int0 = 1;
      StringBuffer stringBuffer0 = new StringBuffer(int0);
      assertEquals(0, stringBuffer0.length());
      assertEquals(1, stringBuffer0.capacity());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      String string0 = "h*s;9Vh*[<F+4}X.";
      byte[] byteArray0 = new byte[8];
      Boolean boolean0 = null;
      standardToStringStyle0.append(stringBuffer0, string0, byteArray0, boolean0);
      assertEquals(36, stringBuffer0.capacity());
      assertEquals(36, stringBuffer0.length());
      assertEquals("h*s;9Vh*[<F+4}X.={0,0,0,0,0,0,0,0},", stringBuffer0.toString());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test79()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertNotNull(standardToStringStyle0);
      
      boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtStart();
      assertFalse(boolean0);
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
  }

  @Test
  public void test80()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertNotNull(standardToStringStyle0);
      
      boolean boolean0 = false;
      standardToStringStyle0.setUseFieldNames(boolean0);
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(false, standardToStringStyle0.isUseFieldNames());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
  }

  @Test
  public void test81()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertNotNull(standardToStringStyle0);
      
      boolean boolean0 = standardToStringStyle0.isUseFieldNames();
      assertTrue(boolean0);
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
  }

  @Test
  public void test82()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertNotNull(standardToStringStyle0);
      
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(int0);
      assertEquals(0, stringBuffer0.capacity());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      String string0 = "B[7#dYw6]AV^3Q";
      boolean boolean0 = true;
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertNotNull(hashMap0);
      
      standardToStringStyle0.append(stringBuffer0, string0, (Object) hashMap0, (Boolean) boolean0);
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals(18, stringBuffer0.length());
      assertEquals(30, stringBuffer0.capacity());
      assertEquals("B[7#dYw6]AV^3Q={},", stringBuffer0.toString());
  }

  @Test
  public void test83()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertNotNull(standardToStringStyle0);
      
      String string0 = standardToStringStyle0.getFieldSeparator();
      assertEquals(",", string0);
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertNotNull(string0);
      
      StringBuffer stringBuffer0 = new StringBuffer(string0);
      assertEquals(",", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
      assertEquals(17, stringBuffer0.capacity());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
      assertNotNull(stringBuffer0);
      
      char char0 = 'i';
      standardToStringStyle0.append(stringBuffer0, string0, (long) char0);
      assertEquals(",,=105,", stringBuffer0.toString());
      assertEquals(7, stringBuffer0.length());
      assertEquals(17, stringBuffer0.capacity());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtEnd());
      assertEquals(true, standardToStringStyle0.isDefaultFullDetail());
      assertEquals(true, standardToStringStyle0.isArrayContentDetail());
      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());
      assertEquals(",", standardToStringStyle0.getArraySeparator());
      assertEquals(true, standardToStringStyle0.isUseClassName());
      assertEquals(false, standardToStringStyle0.isUseShortClassName());
      assertEquals(",", standardToStringStyle0.getFieldSeparator());
      assertEquals("<size=", standardToStringStyle0.getSizeStartText());
      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());
      assertEquals("}", standardToStringStyle0.getArrayEnd());
      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());
      assertEquals("{", standardToStringStyle0.getArrayStart());
      assertEquals("<null>", standardToStringStyle0.getNullText());
      assertEquals(true, standardToStringStyle0.isUseIdentityHashCode());
      assertEquals("]", standardToStringStyle0.getContentEnd());
      assertEquals(false, standardToStringStyle0.isFieldSeparatorAtStart());
      assertEquals("[", standardToStringStyle0.getContentStart());
      assertEquals(true, standardToStringStyle0.isUseFieldNames());
      assertEquals(">", standardToStringStyle0.getSizeEndText());
  }
}
