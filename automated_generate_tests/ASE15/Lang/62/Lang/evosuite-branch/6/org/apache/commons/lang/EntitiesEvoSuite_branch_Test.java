/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:43:59 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.io.StringWriter;
import java.io.Writer;
import org.apache.commons.lang.Entities;



import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.junit.runner.RunWith;


public class EntitiesEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      Entities entities0 = Entities.XML;
      assertNotNull(entities0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      String string0 = "|&&;*2]";
      entities0.unescape((Writer) stringWriter0, string0);
      assertEquals("|&&;*2]", stringWriter0.toString());
  }

  @Test
  public void test01()  throws Throwable  {
      Entities entities0 = Entities.XML;
      assertNotNull(entities0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      String string0 = "@>P|`0>";
      String string1 = entities0.escape(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertEquals("@&gt;P|`0&gt;", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      entities0.unescape((Writer) stringWriter0, string1);
      assertEquals("@>P|`0>", stringWriter0.toString());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test02()  throws Throwable  {
      Entities entities0 = Entities.XML;
      assertNotNull(entities0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      String string0 = "";
      entities0.unescape((Writer) stringWriter0, string0);
      assertEquals("", stringWriter0.toString());
  }

  @Test
  public void test03()  throws Throwable  {
      Entities entities0 = Entities.XML;
      assertNotNull(entities0);
      
      String string0 = "!jI;g^7Y +xp";
      boolean boolean0 = false;
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0, boolean0);
      assertNotNull(mockFileWriter0);
      
      String string1 = "PYe(i/& J1ffEA-cl";
      assertNotSame(string1, string0);
      
      entities0.unescape((Writer) mockFileWriter0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test04()  throws Throwable  {
      Entities entities0 = Entities.XML;
      assertNotNull(entities0);
      
      String string0 = "|&;~8&";
      String string1 = entities0.unescape(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertEquals("|&;~8&", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
  }

  @Test
  public void test05()  throws Throwable  {
      Entities entities0 = Entities.XML;
      assertNotNull(entities0);
      
      String string0 = "kp#d[mJo2r%0s$P";
      String string1 = entities0.unescape(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals("kp#d[mJo2r%0s$P", string1);
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = 0;
      int int1 = (-5537);
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(int0);
      assertNotNull(entities_BinaryEntityMap0);
      assertFalse(int0 == int1);
      
      String string0 = ":";
      entities_BinaryEntityMap0.add(string0, int0);
      assertFalse(int0 == int1);
      
      entities_BinaryEntityMap0.add(string0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      entities_BinaryEntityMap0.add(string0, int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test07()  throws Throwable  {
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      int int0 = 1432;
      String string0 = entities0.entityName(int0);
      assertNull(string0);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "";
      Entities.HashEntityMap entities_HashEntityMap0 = new Entities.HashEntityMap();
      assertNotNull(entities_HashEntityMap0);
      
      int int0 = entities_HashEntityMap0.value(string0);
      assertEquals((-1), int0);
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = 0;
      String string0 = ":";
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      assertNotNull(entities_TreeEntityMap0);
      
      entities_TreeEntityMap0.add(string0, int0);
      int int1 = entities_TreeEntityMap0.value(string0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test10()  throws Throwable  {
      Entities.LookupEntityMap entities_LookupEntityMap0 = new Entities.LookupEntityMap();
      assertNotNull(entities_LookupEntityMap0);
      
      int int0 = 527;
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      assertNotNull(entities_TreeEntityMap0);
      
      String string0 = entities_TreeEntityMap0.name(int0);
      assertNull(string0);
      
      int int1 = entities_LookupEntityMap0.value(string0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test11()  throws Throwable  {
      Entities.LookupEntityMap entities_LookupEntityMap0 = new Entities.LookupEntityMap();
      assertNotNull(entities_LookupEntityMap0);
      
      int int0 = 76;
      String string0 = entities_LookupEntityMap0.name(int0);
      assertNull(string0);
  }

  @Test
  public void test12()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      assertNotNull(entities_BinaryEntityMap0);
  }

  @Test
  public void test13()  throws Throwable  {
      Entities.LookupEntityMap entities_LookupEntityMap0 = new Entities.LookupEntityMap();
      assertNotNull(entities_LookupEntityMap0);
      
      String string0 = "FsXFqlv@T9C\\&";
      int int0 = 527;
      entities_LookupEntityMap0.add(string0, int0);
      int int1 = entities_LookupEntityMap0.value(string0);
      assertEquals(527, int1);
      assertTrue(int1 == int0);
      
      Entities entities0 = Entities.HTML40;
      assertNotNull(entities0);
      
      StringWriter stringWriter0 = new StringWriter(int1);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      assertTrue(int1 == int0);
      
      entities0.escape((Writer) stringWriter0, string0);
      assertEquals("FsXFqlv@T9C\\&amp;", stringWriter0.toString());
      assertTrue(int1 == int0);
  }

  @Test
  public void test14()  throws Throwable  {
      Entities entities0 = Entities.XML;
      assertNotNull(entities0);
      
      String string0 = "|;_&)HR&);*2]";
      String string1 = entities0.unescape(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("|;_&)HR&);*2]", string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
  }

  @Test
  public void test15()  throws Throwable  {
      Entities entities0 = Entities.XML;
      assertNotNull(entities0);
      
      Entities.fillWithHtml40Entities(entities0);
  }
}
