/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:56:26 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Writer;
import org.apache.commons.lang.Entities;



import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.junit.runner.RunWith;


public class EntitiesEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      String string0 = ">&;b";
      String string1 = entities0.unescape(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertEquals(">&;b", string1);
      assertNotNull(string1);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      assertEquals(false, pipedReader0.markSupported());
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      assertEquals(false, pipedReader0.ready());
      assertEquals(false, pipedReader0.markSupported());
      
      entities0.unescape((Writer) pipedWriter0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertEquals(true, pipedReader0.ready());
      assertEquals(false, pipedReader0.markSupported());
  }

  @Test
  public void test01()  throws Throwable  {
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      String string0 = "yLT~ihuulB^\"3E";
      String string1 = entities0.unescape(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("yLT~ihuulB^\"3E", string1);
      assertNotNull(string1);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      assertEquals(false, pipedReader0.markSupported());
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      assertEquals(false, pipedReader0.ready());
      assertEquals(false, pipedReader0.markSupported());
      
      entities0.unescape((Writer) pipedWriter0, string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals(false, pipedReader0.markSupported());
      assertEquals(true, pipedReader0.ready());
  }

  @Test
  public void test02()  throws Throwable  {
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      String string0 = "&>^;&ln";
      String string1 = entities0.unescape(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("&>^;&ln", string1);
      assertNotNull(string1);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      assertEquals(false, pipedReader0.markSupported());
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      assertEquals(false, pipedReader0.markSupported());
      assertEquals(false, pipedReader0.ready());
      
      entities0.unescape((Writer) pipedWriter0, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertEquals(false, pipedReader0.markSupported());
      assertEquals(true, pipedReader0.ready());
  }

  @Test
  public void test03()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      String string0 = "<.ww'0HS_|'a*";
      boolean boolean0 = false;
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0, boolean0);
      assertNotNull(mockFileWriter0);
      
      entities0.escape((Writer) mockFileWriter0, string0);
  }

  @Test
  public void test04()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      String string0 = "";
      int int0 = entities0.entityValue(string0);
      assertEquals((-1), int0);
      
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      assertNotNull(entities_BinaryEntityMap0);
      
      entities_BinaryEntityMap0.add(string0, int0);
  }

  @Test
  public void test05()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      assertNotNull(entities_BinaryEntityMap0);
      
      String string0 = "mu:Vb=#/yA<W ";
      int int0 = (-1);
      String string1 = entities0.escape(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("mu:Vb=#/yA&lt;W ", string1);
      assertNotNull(string1);
      
      int int1 = entities_BinaryEntityMap0.value(string0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap();
      assertNotNull(entities_ArrayEntityMap0);
      
      entities_ArrayEntityMap0.add(string1, int1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertTrue(int1 == int0);
      
      String string2 = entities_ArrayEntityMap0.name(int0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertTrue(int0 == int1);
      assertFalse(string2.equals((Object)string0));
      assertEquals("mu:Vb=#/yA&lt;W ", string2);
      assertNotNull(string2);
  }

  @Test
  public void test06()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      assertNotNull(entities0);
      
      String string0 = "sect";
      String string1 = entities0.unescape(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("sect", string1);
      assertNotNull(string1);
      
      String string2 = entities0.escape(string1);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertTrue(string0.equals((Object)string2));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string1.equals((Object)string2));
      assertEquals("sect", string2);
      assertNotNull(string2);
  }

  @Test
  public void test07()  throws Throwable  {
      Entities.LookupEntityMap entities_LookupEntityMap0 = new Entities.LookupEntityMap();
      assertNotNull(entities_LookupEntityMap0);
      
      int int0 = 3156;
      String string0 = entities_LookupEntityMap0.name(int0);
      assertNull(string0);
  }

  @Test
  public void test08()  throws Throwable  {
      Entities.HashEntityMap entities_HashEntityMap0 = new Entities.HashEntityMap();
      assertNotNull(entities_HashEntityMap0);
      
      String string0 = "asymp";
      int int0 = entities_HashEntityMap0.value(string0);
      assertEquals((-1), int0);
  }

  @Test
  public void test09()  throws Throwable  {
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      assertNotNull(entities_TreeEntityMap0);
      
      String string0 = "-|w:0n/[Z 4|yZbnA0";
      int int0 = 394;
      entities_TreeEntityMap0.add(string0, int0);
      int int1 = entities_TreeEntityMap0.value(string0);
      assertTrue(int1 == int0);
      assertEquals(394, int1);
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 3;
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(int0);
      assertNotNull(entities_BinaryEntityMap0);
  }

  @Test
  public void test11()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      String string0 = "";
      int int0 = entities0.entityValue(string0);
      assertEquals((-1), int0);
      
      Entities.LookupEntityMap entities_LookupEntityMap0 = new Entities.LookupEntityMap();
      assertNotNull(entities_LookupEntityMap0);
      
      // Undeclared exception!
      try {
        String string1 = entities_LookupEntityMap0.name(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      String string0 = "";
      int int0 = entities0.entityValue(string0);
      assertEquals((-1), int0);
      
      String string1 = entities0.unescape(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("", string1);
      assertNotNull(string1);
      
      Entities.LookupEntityMap entities_LookupEntityMap0 = new Entities.LookupEntityMap();
      assertNotNull(entities_LookupEntityMap0);
      
      entities_LookupEntityMap0.add(string1, int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test13()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      Entities.fillWithHtml40Entities(entities0);
  }
}
