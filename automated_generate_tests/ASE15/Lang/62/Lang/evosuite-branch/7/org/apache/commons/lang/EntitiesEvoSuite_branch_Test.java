/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:54:34 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.io.CharArrayWriter;
import java.io.StringWriter;
import java.io.Writer;
import org.apache.commons.lang.Entities;



import org.junit.runner.RunWith;


public class EntitiesEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      String string0 = "a!^&;";
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      entities0.unescape((Writer) charArrayWriter0, string0);
      assertEquals("a!^&;", charArrayWriter0.toString());
      assertEquals(5, charArrayWriter0.size());
  }

  @Test
  public void test01()  throws Throwable  {
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      String string0 = "aKP!&&#;";
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      entities0.unescape((Writer) charArrayWriter0, string0);
      assertEquals(8, charArrayWriter0.size());
      assertEquals("aKP!&&#;", charArrayWriter0.toString());
  }

  @Test
  public void test02()  throws Throwable  {
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      String string0 = " KQc^&#755;";
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      entities0.unescape((Writer) charArrayWriter0, string0);
      assertEquals(6, charArrayWriter0.size());
      assertEquals(" KQc^\u02F3", charArrayWriter0.toString());
  }

  @Test
  public void test03()  throws Throwable  {
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      String string0 = "";
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      entities0.unescape((Writer) charArrayWriter0, string0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
  }

  @Test
  public void test04()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      int int0 = 19;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(int0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      String string0 = "/X0{&5;&~#5e";
      entities0.unescape((Writer) charArrayWriter0, string0);
      assertEquals("/X0{&5;&~#5e", charArrayWriter0.toString());
      assertEquals(12, charArrayWriter0.size());
  }

  @Test
  public void test05()  throws Throwable  {
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      String string0 = "a7C0P!^&Z;";
      String string1 = entities0.unescape(string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("a7C0P!^&Z;", string1);
  }

  @Test
  public void test06()  throws Throwable  {
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      String string0 = "a!^&;";
      String string1 = entities0.unescape(string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("a!^&;", string1);
  }

  @Test
  public void test07()  throws Throwable  {
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      String string0 = "aKP!&&#;";
      String string1 = entities0.unescape(string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("aKP!&&#;", string1);
  }

  @Test
  public void test08()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      assertNotNull(entities0);
      
      String string0 = "& oXR[9";
      String string1 = entities0.unescape(string0);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertEquals("& oXR[9", string1);
  }

  @Test
  public void test09()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      assertNotNull(entities0);
      
      String string0 = "XC;vy-oPZn=I";
      String string1 = entities0.unescape(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      assertEquals("XC;vy-oPZn=I", string1);
  }

  @Test
  public void test10()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      String string0 = "spades";
      entities0.escape((Writer) stringWriter0, string0);
      assertEquals("spades", stringWriter0.toString());
  }

  @Test
  public void test11()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      String string0 = "spades";
      int int0 = entities0.entityValue(string0);
      assertEquals((-1), int0);
      
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      assertNotNull(entities_BinaryEntityMap0);
      
      String string1 = entities_BinaryEntityMap0.name(int0);
      assertNull(string1);
  }

  @Test
  public void test12()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      assertNotNull(entities_BinaryEntityMap0);
      
      String string0 = "x?c\\4,";
      int int0 = (-18);
      entities_BinaryEntityMap0.add(string0, int0);
      String string1 = "4k>|Yxx";
      assertNotSame(string1, string0);
      
      int int1 = 129;
      entities_BinaryEntityMap0.add(string1, int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      int int2 = entities_BinaryEntityMap0.value(string1);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertEquals(129, int2);
      
      entities_BinaryEntityMap0.add(string1, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
  }

  @Test
  public void test13()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      assertNotNull(entities_BinaryEntityMap0);
      
      String string0 = "x?c\\4,";
      int int0 = (-18);
      entities_BinaryEntityMap0.add(string0, int0);
      String string1 = "4k>|Yxx";
      assertNotSame(string1, string0);
      
      int int1 = entities_BinaryEntityMap0.value(string1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertEquals((-1), int1);
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 1974;
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap(int0);
      assertNotNull(entities_ArrayEntityMap0);
      
      String string0 = "IllelLad ";
      entities_ArrayEntityMap0.add(string0, int0);
      int int1 = 1098;
      String string1 = entities_ArrayEntityMap0.name(int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNull(string1);
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 1974;
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap(int0);
      assertNotNull(entities_ArrayEntityMap0);
      
      String string0 = "IllelLad ";
      entities_ArrayEntityMap0.add(string0, int0);
      String string1 = entities_ArrayEntityMap0.name(int0);
      assertSame(string1, string0);
      assertNotNull(string1);
      assertEquals("IllelLad ", string1);
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 3111;
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      assertNotNull(entities_BinaryEntityMap0);
      
      entities_BinaryEntityMap0.ensureCapacity(int0);
  }

  @Test
  public void test17()  throws Throwable  {
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      String string0 = " KQc^&#755;";
      String string1 = entities0.unescape(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals(" KQc^\u02F3", string1);
      
      String string2 = entities0.escape(string1);
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotNull(string2);
      assertEquals(" KQc^&#755;", string2);
  }

  @Test
  public void test18()  throws Throwable  {
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      assertNotNull(entities_TreeEntityMap0);
      
      String string0 = "CEh1u28\"";
      int int0 = entities_TreeEntityMap0.value(string0);
      assertEquals((-1), int0);
      
      Entities.LookupEntityMap entities_LookupEntityMap0 = new Entities.LookupEntityMap();
      assertNotNull(entities_LookupEntityMap0);
      
      entities_LookupEntityMap0.add(string0, int0);
      int int1 = entities_LookupEntityMap0.value(string0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test
  public void test19()  throws Throwable  {
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      assertNotNull(entities_TreeEntityMap0);
      
      String string0 = "CEh1u28\"";
      int int0 = entities_TreeEntityMap0.value(string0);
      assertEquals((-1), int0);
      
      entities_TreeEntityMap0.add(string0, int0);
  }

  @Test
  public void test20()  throws Throwable  {
      Entities.HashEntityMap entities_HashEntityMap0 = new Entities.HashEntityMap();
      assertNotNull(entities_HashEntityMap0);
  }

  @Test
  public void test21()  throws Throwable  {
      int int0 = 1;
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(int0);
      assertNotNull(entities_BinaryEntityMap0);
  }

  @Test
  public void test22()  throws Throwable  {
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      Entities.fillWithHtml40Entities(entities0);
  }
}
