/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:12:54 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.lang.LocaleUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;


public class LocaleUtilsEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "th";
      List list0 = LocaleUtils.countriesByLanguage(string0);
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "[~m|7Vr:M!&";
      List list0 = LocaleUtils.languagesByCountry(string0);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test02()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertTrue(boolean0);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = null;
      Locale locale0 = LocaleUtils.toLocale(string0);
      assertNull(locale0);
      
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      assertFalse(boolean0);
  }

  @Test
  public void test04()  throws Throwable  {
      Set set0 = LocaleUtils.availableLocaleSet();
      assertNotNull(set0);
      assertEquals(156, set0.size());
      assertEquals(false, set0.isEmpty());
      
      Set set1 = LocaleUtils.availableLocaleSet();
      assertSame(set1, set0);
      assertNotNull(set1);
      assertEquals(false, set1.isEmpty());
      assertEquals(156, set1.size());
  }

  @Test
  public void test05()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      
      Locale locale1 = Locale.US;
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("en_US", locale1.toString());
      assertEquals("US", locale1.getCountry());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      
      List list0 = LocaleUtils.localeLookupList(locale1, locale0);
      assertNotSame(locale1, locale0);
      assertNotSame(locale0, locale1);
      assertNotNull(list0);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale0.equals((Object)locale1));
      assertEquals("en_US", locale1.toString());
      assertEquals("US", locale1.getCountry());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals(3, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "|?<7l%s~a>Z/2H$vgG";
      Locale locale0 = new Locale(string0, string0, string0);
      assertNotNull(locale0);
      assertEquals("|?<7l%s~a>Z/2H$vgG", locale0.getVariant());
      assertEquals("|?<7l%s~a>z/2h$vgg", locale0.getLanguage());
      assertEquals("|?<7L%S~A>Z/2H$VGG", locale0.getCountry());
      assertEquals("|?<7l%s~a>z/2h$vgg_|?<7L%S~A>Z/2H$VGG_|?<7l%s~a>Z/2H$vgG", locale0.toString());
      
      List list0 = LocaleUtils.localeLookupList(locale0, locale0);
      assertNotNull(list0);
      assertEquals("|?<7l%s~a>Z/2H$vgG", locale0.getVariant());
      assertEquals("|?<7l%s~a>z/2h$vgg", locale0.getLanguage());
      assertEquals("|?<7L%S~A>Z/2H$VGG", locale0.getCountry());
      assertEquals("|?<7l%s~a>z/2h$vgg_|?<7L%S~A>Z/2H$VGG_|?<7l%s~a>Z/2H$vgG", locale0.toString());
      assertEquals(false, list0.isEmpty());
      assertEquals(3, list0.size());
  }

  @Test
  public void test07()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      
      List list0 = LocaleUtils.localeLookupList(locale0, locale0);
      assertNotNull(list0);
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "kc_GA{^a";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: kc_GA{^a
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "ec_GA_5a";
      Locale locale0 = LocaleUtils.toLocale(string0);
      assertNotNull(locale0);
      assertEquals("GAB", locale0.getISO3Country());
      assertEquals("GA", locale0.getCountry());
      assertEquals("ec_GA_5a", locale0.toString());
      assertEquals("ec", locale0.getLanguage());
      assertEquals("5a", locale0.getVariant());
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "yc_G{^a";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: yc_G{^a
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "ec_G5";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: ec_G5
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "kc_]G1^";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: kc_]G1^
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "nc_,)A*^a";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: nc_,)A*^a
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "m{yrTDwE";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: m{yrTDwE
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "sYyA3N/>9LI=";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: sYyA3N/>9LI=
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "|?&<_B+FV";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: |?&<_B+FV
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = ",czm6Cr)K7^X-1>b+r";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: ,czm6Cr)K7^X-1>b+r
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "org.apache.commons.lang.LocaleUtils";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: org.apache.commons.lang.LocaleUtils
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: 
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "ca";
      Locale locale0 = LocaleUtils.toLocale(string0);
      assertNotNull(locale0);
      assertEquals("ca", locale0.getLanguage());
      assertEquals("cat", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ca", locale0.toString());
      assertEquals("", locale0.getCountry());
  }

  @Test
  public void test21()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      
      String string0 = locale0.toString();
      assertNotNull(string0);
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", string0);
      
      Locale locale1 = LocaleUtils.toLocale(string0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(locale1.equals((Object)locale0));
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_CA", locale1.toString());
      assertEquals("CA", locale1.getCountry());
      assertEquals("", locale1.getVariant());
  }

  @Test
  public void test22()  throws Throwable  {
      Locale locale0 = null;
      List list0 = LocaleUtils.localeLookupList(locale0);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test23()  throws Throwable  {
      LocaleUtils localeUtils0 = new LocaleUtils();
      assertNotNull(localeUtils0);
  }
}
