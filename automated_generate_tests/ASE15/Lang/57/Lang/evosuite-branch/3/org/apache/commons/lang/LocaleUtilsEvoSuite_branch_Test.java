/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:52:19 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.lang.LocaleUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;


public class LocaleUtilsEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "? I.=Rbt^{";
      List list0 = LocaleUtils.countriesByLanguage(string0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "NO";
      List list0 = LocaleUtils.languagesByCountry(string0);
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      assertNotNull(list0);
  }

  @Test
  public void test02()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertTrue(boolean0);
  }

  @Test
  public void test03()  throws Throwable  {
      Locale locale0 = null;
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      assertFalse(boolean0);
  }

  @Test
  public void test04()  throws Throwable  {
      Set set0 = LocaleUtils.availableLocaleSet();
      assertEquals(156, set0.size());
      assertEquals(false, set0.isEmpty());
      assertNotNull(set0);
      
      Set set1 = LocaleUtils.availableLocaleSet();
      assertEquals(false, set1.isEmpty());
      assertEquals(156, set1.size());
      assertSame(set1, set0);
      assertNotNull(set1);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "ca";
      Locale locale0 = LocaleUtils.toLocale(string0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ca", locale0.getLanguage());
      assertEquals("ca", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("cat", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.JAPANESE;
      assertEquals("ja", locale1.toString());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ja", locale1.getLanguage());
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      List list0 = LocaleUtils.localeLookupList(locale0, locale1);
      assertEquals(2, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ca", locale0.getLanguage());
      assertEquals("ca", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("cat", locale0.getISO3Language());
      assertEquals("ja", locale1.toString());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ja", locale1.getLanguage());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(list0);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "rg.apach`.comons.lan(.LocaeUtils";
      Locale locale0 = new Locale(string0, string0, string0);
      assertEquals("rg.apach`.comons.lan(.locaeutils", locale0.getLanguage());
      assertEquals("RG.APACH`.COMONS.LAN(.LOCAEUTILS", locale0.getCountry());
      assertEquals("rg.apach`.comons.lan(.LocaeUtils", locale0.getVariant());
      assertEquals("rg.apach`.comons.lan(.locaeutils_RG.APACH`.COMONS.LAN(.LOCAEUTILS_rg.apach`.comons.lan(.LocaeUtils", locale0.toString());
      assertNotNull(locale0);
      
      List list0 = LocaleUtils.localeLookupList(locale0);
      assertEquals(3, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals("rg.apach`.comons.lan(.locaeutils", locale0.getLanguage());
      assertEquals("RG.APACH`.COMONS.LAN(.LOCAEUTILS", locale0.getCountry());
      assertEquals("rg.apach`.comons.lan(.LocaeUtils", locale0.getVariant());
      assertEquals("rg.apach`.comons.lan(.locaeutils_RG.APACH`.COMONS.LAN(.LOCAEUTILS_rg.apach`.comons.lan(.LocaeUtils", locale0.toString());
      assertNotNull(list0);
  }

  @Test
  public void test07()  throws Throwable  {
      Locale locale0 = null;
      List list0 = LocaleUtils.localeLookupList(locale0, locale0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "tq_WCUE7q4";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: tq_WCUE7q4
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "tq_CvNU?rwq 4|f4";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: tq_CvNU?rwq 4|f4
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "yv_C:NUg37l4";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: yv_C:NUg37l4
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "rj_hy`#sEW";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: rj_hy`#sEW
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "tq_&WC:N?E7l4";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: tq_&WC:N?E7l4
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "rg.apach`.comons.lan(.LocaeUtils";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: rg.apach`.comons.lan(.LocaeUtils
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string0 = locale0.toString();
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", string0);
      assertNotNull(string0);
      
      Locale locale1 = LocaleUtils.toLocale(string0);
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale1.toString());
      assertEquals("KOR", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("KR", locale1.getCountry());
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(locale1.equals((Object)locale0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "z}S|tXa&";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: z}S|tXa&
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "z\"6#QM\"oS";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: z\"6#QM\"oS
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "~*J+^jcPNq[Ke_S";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: ~*J+^jcPNq[Ke_S
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "{eS";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: {eS
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "0C*Ol";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: 0C*Ol
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = null;
      Locale locale0 = LocaleUtils.toLocale(string0);
      assertNull(locale0);
  }

  @Test
  public void test21()  throws Throwable  {
      LocaleUtils localeUtils0 = new LocaleUtils();
      assertNotNull(localeUtils0);
  }
}
