/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:15:17 GMT 2014
 */

package org.apache.commons.lang3.text.translate;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.io.StringWriter;
import java.io.Writer;
import java.net.URI;
import org.apache.commons.lang3.text.translate.AggregateTranslator;
import org.apache.commons.lang3.text.translate.CharSequenceTranslator;
import org.apache.commons.lang3.text.translate.NumericEntityUnescaper;
import org.apache.commons.lang3.text.translate.OctalUnescaper;
import org.apache.commons.lang3.text.translate.UnicodeEscaper;
import org.apache.commons.lang3.text.translate.UnicodeUnescaper;




import org.junit.runner.RunWith;


public class CharSequenceTranslatorEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      OctalUnescaper octalUnescaper0 = new OctalUnescaper();
      assertNotNull(octalUnescaper0);
      
      CharSequence charSequence0 = null;
      int int0 = 0;
      StringWriter stringWriter0 = new StringWriter(int0);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      octalUnescaper0.translate(charSequence0, (Writer) stringWriter0);
      assertEquals("", stringWriter0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      UnicodeUnescaper unicodeUnescaper0 = new UnicodeUnescaper();
      assertNotNull(unicodeUnescaper0);
      
      String string0 = "semiColonRequired";
      URI uRI0 = new URI(string0);
      assertEquals(false, uRI0.isAbsolute());
      assertNull(uRI0.getHost());
      assertEquals("semiColonRequired", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertEquals(false, uRI0.isOpaque());
      assertEquals("semiColonRequired", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getScheme());
      assertEquals(-1, uRI0.getPort());
      assertNull(uRI0.getRawAuthority());
      assertNotNull(uRI0);
      
      String string1 = uRI0.getQuery();
      assertEquals(false, uRI0.isAbsolute());
      assertNull(uRI0.getHost());
      assertEquals("semiColonRequired", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertEquals(false, uRI0.isOpaque());
      assertEquals("semiColonRequired", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getScheme());
      assertEquals(-1, uRI0.getPort());
      assertNull(uRI0.getRawAuthority());
      assertNull(string1);
      
      Writer writer0 = null;
      // Undeclared exception!
      try {
        unicodeUnescaper0.translate((CharSequence) string1, writer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      OctalUnescaper octalUnescaper0 = new OctalUnescaper();
      assertNotNull(octalUnescaper0);
      
      CharSequence charSequence0 = null;
      String string0 = octalUnescaper0.translate(charSequence0);
      assertNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      NumericEntityUnescaper.OPTION[] numericEntityUnescaper_OPTIONArray0 = new NumericEntityUnescaper.OPTION[4];
      NumericEntityUnescaper.OPTION numericEntityUnescaper_OPTION0 = NumericEntityUnescaper.OPTION.semiColonOptional;
      numericEntityUnescaper_OPTIONArray0[0] = numericEntityUnescaper_OPTION0;
      assertEquals(1, numericEntityUnescaper_OPTIONArray0[0].ordinal());
      assertEquals("semiColonOptional", numericEntityUnescaper_OPTIONArray0[0].name());
      assertEquals("semiColonOptional", numericEntityUnescaper_OPTIONArray0[0].toString());
      
      numericEntityUnescaper_OPTIONArray0[1] = numericEntityUnescaper_OPTION0;
      assertEquals(1, numericEntityUnescaper_OPTIONArray0[1].ordinal());
      assertEquals("semiColonOptional", numericEntityUnescaper_OPTIONArray0[1].toString());
      assertEquals("semiColonOptional", numericEntityUnescaper_OPTIONArray0[1].name());
      
      numericEntityUnescaper_OPTIONArray0[2] = numericEntityUnescaper_OPTIONArray0[1];
      assertEquals("semiColonOptional", numericEntityUnescaper_OPTIONArray0[2].name());
      assertEquals("semiColonOptional", numericEntityUnescaper_OPTIONArray0[2].toString());
      assertEquals(1, numericEntityUnescaper_OPTIONArray0[2].ordinal());
      
      numericEntityUnescaper_OPTIONArray0[3] = numericEntityUnescaper_OPTIONArray0[0];
      assertEquals("semiColonOptional", numericEntityUnescaper_OPTIONArray0[3].name());
      assertEquals("semiColonOptional", numericEntityUnescaper_OPTIONArray0[3].toString());
      assertEquals(1, numericEntityUnescaper_OPTIONArray0[3].ordinal());
      
      NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper(numericEntityUnescaper_OPTIONArray0);
      assertNotNull(numericEntityUnescaper0);
      
      CharSequenceTranslator[] charSequenceTranslatorArray0 = new CharSequenceTranslator[2];
      AggregateTranslator aggregateTranslator0 = (AggregateTranslator)numericEntityUnescaper0.with(charSequenceTranslatorArray0);
      assertNotNull(aggregateTranslator0);
  }

  @Test
  public void test4()  throws Throwable  {
      String string0 = "!r`^.ZoRuM";
      int int0 = (-1);
      int int1 = 43;
      UnicodeEscaper unicodeEscaper0 = UnicodeEscaper.between(int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(unicodeEscaper0);
      
      String string1 = unicodeEscaper0.translate((CharSequence) string0);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("\\u0021r`^.ZoRuM", string1);
  }
}
