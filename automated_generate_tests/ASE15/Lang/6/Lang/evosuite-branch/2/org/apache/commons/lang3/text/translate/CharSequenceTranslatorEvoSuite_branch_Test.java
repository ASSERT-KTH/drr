/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:13:13 GMT 2014
 */

package org.apache.commons.lang3.text.translate;

import static org.junit.Assert.*;
import org.junit.Test;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Writer;
import java.net.URI;
import org.apache.commons.lang3.text.translate.AggregateTranslator;
import org.apache.commons.lang3.text.translate.CharSequenceTranslator;
import org.apache.commons.lang3.text.translate.NumericEntityUnescaper;
import org.apache.commons.lang3.text.translate.OctalUnescaper;
import org.apache.commons.lang3.text.translate.UnicodeEscaper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;


public class CharSequenceTranslatorEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      UnicodeEscaper unicodeEscaper0 = new UnicodeEscaper();
      assertNotNull(unicodeEscaper0);
      
      int int0 = 1509;
      String string0 = CharSequenceTranslator.hex(int0);
      assertNotNull(string0);
      assertEquals("5E5", string0);
      
      String string1 = unicodeEscaper0.translate((CharSequence) string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertEquals("\\u0035\\u0045\\u0035", string1);
  }

  @Test
  public void test1()  throws Throwable  {
      OctalUnescaper octalUnescaper0 = new OctalUnescaper();
      assertNotNull(octalUnescaper0);
      
      String string0 = "The Writer must not be null";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      URI uRI0 = mockFile0.toURI();
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertEquals(true, uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertEquals(false, uRI0.isOpaque());
      assertEquals("file", uRI0.getScheme());
      assertEquals("/scratch/ac1gf/Lang/6/2/run_evosuite.pl_49510_1418317963/The%20Writer%20must%20not%20be%20null/The%20Writer%20must%20not%20be%20null", uRI0.getRawPath());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawAuthority());
      assertEquals(-1, uRI0.getPort());
      assertEquals("file:/scratch/ac1gf/Lang/6/2/run_evosuite.pl_49510_1418317963/The%20Writer%20must%20not%20be%20null/The%20Writer%20must%20not%20be%20null", uRI0.toString());
      assertNotNull(uRI0);
      
      String string1 = uRI0.getAuthority();
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertEquals(true, uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertEquals(false, uRI0.isOpaque());
      assertEquals("file", uRI0.getScheme());
      assertEquals("/scratch/ac1gf/Lang/6/2/run_evosuite.pl_49510_1418317963/The%20Writer%20must%20not%20be%20null/The%20Writer%20must%20not%20be%20null", uRI0.getRawPath());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawAuthority());
      assertEquals(-1, uRI0.getPort());
      assertEquals("file:/scratch/ac1gf/Lang/6/2/run_evosuite.pl_49510_1418317963/The%20Writer%20must%20not%20be%20null/The%20Writer%20must%20not%20be%20null", uRI0.toString());
      assertNull(string1);
      
      PipedReader pipedReader0 = new PipedReader();
      assertEquals(false, pipedReader0.markSupported());
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertEquals(false, pipedReader0.markSupported());
      assertEquals(false, pipedReader0.ready());
      assertNotNull(pipedWriter0);
      
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((Writer) pipedWriter0, boolean0);
      assertEquals(false, pipedReader0.markSupported());
      assertEquals(false, pipedReader0.ready());
      assertNotNull(mockPrintWriter0);
      
      octalUnescaper0.translate((CharSequence) string1, (Writer) mockPrintWriter0);
      assertEquals(false, pipedReader0.markSupported());
      assertEquals(false, pipedReader0.ready());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertEquals(true, uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertEquals(false, uRI0.isOpaque());
      assertEquals("file", uRI0.getScheme());
      assertEquals("/scratch/ac1gf/Lang/6/2/run_evosuite.pl_49510_1418317963/The%20Writer%20must%20not%20be%20null/The%20Writer%20must%20not%20be%20null", uRI0.getRawPath());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawAuthority());
      assertEquals(-1, uRI0.getPort());
      assertEquals("file:/scratch/ac1gf/Lang/6/2/run_evosuite.pl_49510_1418317963/The%20Writer%20must%20not%20be%20null/The%20Writer%20must%20not%20be%20null", uRI0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      UnicodeEscaper unicodeEscaper0 = new UnicodeEscaper();
      assertNotNull(unicodeEscaper0);
      
      CharSequence charSequence0 = null;
      Writer writer0 = null;
      // Undeclared exception!
      try {
        unicodeEscaper0.translate(charSequence0, writer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      CharSequenceTranslator[] charSequenceTranslatorArray0 = new CharSequenceTranslator[2];
      AggregateTranslator aggregateTranslator0 = new AggregateTranslator(charSequenceTranslatorArray0);
      assertNotNull(aggregateTranslator0);
      
      CharSequence charSequence0 = null;
      String string0 = aggregateTranslator0.translate(charSequence0);
      assertNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      OctalUnescaper octalUnescaper0 = new OctalUnescaper();
      assertNotNull(octalUnescaper0);
      
      int int0 = 97;
      String string0 = CharSequenceTranslator.hex(int0);
      assertNotNull(string0);
      assertEquals("61", string0);
      
      String string1 = octalUnescaper0.translate((CharSequence) string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("61", string1);
  }

  @Test
  public void test5()  throws Throwable  {
      CharSequenceTranslator[] charSequenceTranslatorArray0 = new CharSequenceTranslator[4];
      NumericEntityUnescaper.OPTION[] numericEntityUnescaper_OPTIONArray0 = new NumericEntityUnescaper.OPTION[3];
      NumericEntityUnescaper.OPTION numericEntityUnescaper_OPTION0 = NumericEntityUnescaper.OPTION.semiColonRequired;
      numericEntityUnescaper_OPTIONArray0[0] = numericEntityUnescaper_OPTION0;
      assertEquals(0, numericEntityUnescaper_OPTIONArray0[0].ordinal());
      assertEquals("semiColonRequired", numericEntityUnescaper_OPTIONArray0[0].name());
      assertEquals("semiColonRequired", numericEntityUnescaper_OPTIONArray0[0].toString());
      
      numericEntityUnescaper_OPTIONArray0[1] = numericEntityUnescaper_OPTION0;
      assertEquals("semiColonRequired", numericEntityUnescaper_OPTIONArray0[1].toString());
      assertEquals("semiColonRequired", numericEntityUnescaper_OPTIONArray0[1].name());
      assertEquals(0, numericEntityUnescaper_OPTIONArray0[1].ordinal());
      
      numericEntityUnescaper_OPTIONArray0[2] = numericEntityUnescaper_OPTION0;
      assertEquals(0, numericEntityUnescaper_OPTIONArray0[2].ordinal());
      assertEquals("semiColonRequired", numericEntityUnescaper_OPTIONArray0[2].toString());
      assertEquals("semiColonRequired", numericEntityUnescaper_OPTIONArray0[2].name());
      
      NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper(numericEntityUnescaper_OPTIONArray0);
      assertNotNull(numericEntityUnescaper0);
      
      AggregateTranslator aggregateTranslator0 = (AggregateTranslator)numericEntityUnescaper0.with(charSequenceTranslatorArray0);
      assertNotNull(aggregateTranslator0);
  }
}
