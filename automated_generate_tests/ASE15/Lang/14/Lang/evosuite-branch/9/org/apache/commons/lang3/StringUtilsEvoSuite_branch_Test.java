/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:40:20 GMT 2014
 */

package org.apache.commons.lang3;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.io.UnsupportedEncodingException;
import java.nio.ByteOrder;
import java.nio.CharBuffer;
import java.sql.BatchUpdateException;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import org.apache.commons.lang3.StringUtils;




import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;


public class StringUtilsEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertNotNull(locale0);
      
      String string0 = locale0.getDisplayCountry(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[9];
      try {
        String string1 = StringUtils.toString(byteArray0, string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // 
         //
      }
  }

  @Test
  public void test001()  throws Throwable  {
      String string0 = "#=Kq!O~'ldtz6ubE]";
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) string0;
      assertEquals("#=Kq!O~'ldtz6ubE]", charSequenceArray0[0].toString());
      assertEquals(18, charSequenceArray0[0].length());
      assertNotNull(charSequenceArray0[0]);
      
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) string0, charSequenceArray0);
      assertTrue(boolean0);
  }

  @Test
  public void test002()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      String string0 = sQLFeatureNotSupportedException0.getLocalizedMessage();
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(string0);
      
      String string1 = "i;Z%<e`][P{3uy4x";
      String string2 = StringUtils.strip(string1, string1);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertNotNull(string2);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      
      int int0 = 0;
      String string3 = StringUtils.overlay(string2, string1, int0, int0);
      assertEquals("i;Z%<e`][P{3uy4x", string3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string3));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(string0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) string3, (CharSequence[]) stringArray0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertFalse(boolean0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string3));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
  }

  @Test
  public void test003()  throws Throwable  {
      String string0 = "7axx^[_k;;2,J";
      int int0 = 290;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(string0, string0, int0);
      assertEquals("7axx^[_k;;2,J", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(290, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: 7axx^[_k;;2,J", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("7axx^[_k;;2,J", sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) sQLIntegrityConstraintViolationException0);
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: 7axx^[_k;;2,J", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLIntegrityConstraintViolationException: 7axx^[_k;;2,J", batchUpdateException0.toString());
      assertEquals("7axx^[_k;;2,J", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(290, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: 7axx^[_k;;2,J", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("7axx^[_k;;2,J", sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotNull(batchUpdateException0);
      
      String string1 = batchUpdateException0.getSQLState();
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: 7axx^[_k;;2,J", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLIntegrityConstraintViolationException: 7axx^[_k;;2,J", batchUpdateException0.toString());
      assertEquals("7axx^[_k;;2,J", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(290, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: 7axx^[_k;;2,J", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("7axx^[_k;;2,J", sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[12];
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) string1, charSequenceArray0);
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: 7axx^[_k;;2,J", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLIntegrityConstraintViolationException: 7axx^[_k;;2,J", batchUpdateException0.toString());
      assertEquals("7axx^[_k;;2,J", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(290, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: 7axx^[_k;;2,J", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("7axx^[_k;;2,J", sQLIntegrityConstraintViolationException0.getSQLState());
      assertFalse(boolean0);
  }

  @Test
  public void test004()  throws Throwable  {
      String string0 = "D";
      String string1 = StringUtils.substringBetween(string0, string0, string0);
      assertNull(string1);
      
      String string2 = StringUtils.normalizeSpace(string1);
      assertNull(string2);
  }

  @Test
  public void test005()  throws Throwable  {
      String string0 = "P}7$:2gV@(n}1{<iYB";
      String string1 = "Vb`_Y|j.@!q*#w";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeEndIgnoreCase(string1, string0);
      assertEquals("Vb`_Y|j.@!q*#w", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotNull(string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
  }

  @Test
  public void test006()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      String string0 = sQLFeatureNotSupportedException0.getLocalizedMessage();
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(string0);
      
      boolean boolean0 = StringUtils.endsWith((CharSequence) string0, (CharSequence) string0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertTrue(boolean0);
  }

  @Test
  public void test007()  throws Throwable  {
      CharSequence charSequence0 = null;
      String string0 = "{}";
      String string1 = StringUtils.swapCase(string0);
      assertEquals("{}", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      boolean boolean0 = StringUtils.endsWith(charSequence0, (CharSequence) string1);
      assertFalse(boolean0);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test008()  throws Throwable  {
      String string0 = "L";
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) string0;
      assertEquals(1, charSequenceArray0[0].length());
      assertEquals("L", charSequenceArray0[0].toString());
      assertNotNull(charSequenceArray0[0]);
      
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) string0, charSequenceArray0);
      assertTrue(boolean0);
  }

  @Test
  public void test009()  throws Throwable  {
      String string0 = "2s,Qs]G=#d0ymt#L";
      String string1 = StringUtils.chomp(string0);
      assertEquals("2s,Qs]G=#d0ymt#L", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      String[] stringArray0 = StringUtils.split(string1, string1);
      assertNotNull(stringArray0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) string0, (CharSequence[]) stringArray0);
      assertFalse(boolean0);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test010()  throws Throwable  {
      CharSequence charSequence0 = null;
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.startsWithAny(charSequence0, charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test011()  throws Throwable  {
      String string0 = "B\"cnOZ?-LPQ&+8td\",H#=Kq!O~'ldtz6ubE]";
      String string1 = "W^";
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase((CharSequence) string1, (CharSequence) string0);
      assertFalse(boolean0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test012()  throws Throwable  {
      String string0 = "oZ~De$DVqIzh*kb2";
      String string1 = StringUtils.trim(string0);
      assertEquals("oZ~De$DVqIzh*kb2", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      String string2 = StringUtils.substringBetween(string0, string0, string1);
      assertNull(string2);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase((CharSequence) string2, (CharSequence) string2);
      assertTrue(boolean0);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test013()  throws Throwable  {
      String string0 = "Y fOfuGnSD1Ze";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNotNull(sQLRecoverableException0);
      
      String string1 = sQLRecoverableException0.getMessage();
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(string1);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase((CharSequence) string1, (CharSequence) string0);
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertFalse(boolean0);
  }

  @Test
  public void test014()  throws Throwable  {
      String string0 = " !Oe\\";
      char[] charArray0 = new char[5];
      char char0 = 'u';
      int int0 = 2867;
      String string1 = StringUtils.leftPad(string0, int0, charArray0[1]);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 !Oe\\", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) string0, (CharSequence) string1, (int) char0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test015()  throws Throwable  {
      String string0 = "";
      int int0 = 186;
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Set<Object> set0 = hashMap0.keySet();
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      String string1 = hashMap0.put((Object) set0, string0);
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("{[(this Collection)]=}", hashMap0.toString());
      assertEquals(1, set0.size());
      assertEquals(false, set0.isEmpty());
      assertNull(string1);
      
      String string2 = "normalize";
      assertNotSame(string2, string0);
      
      String string3 = StringUtils.substringAfterLast(string2, string1);
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("{[(this Collection)]=}", hashMap0.toString());
      assertEquals(1, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals("", string3);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertSame(string0, string3);
      assertNotSame(string3, string2);
      assertSame(string3, string0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) string2, (CharSequence) string3, int0);
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("{[(this Collection)]=}", hashMap0.toString());
      assertEquals(1, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals(9, int1);
      assertFalse(int1 == int0);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string2));
      assertFalse(int0 == int1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertSame(string0, string3);
      assertNotSame(string3, string2);
      assertSame(string3, string0);
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = " !Oe\\";
      char[] charArray0 = new char[5];
      String string1 = StringUtils.leftPad(string0, (int) charArray0[0], charArray0[1]);
      assertEquals(" !Oe\\", string1);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) string0, (CharSequence) string1, (int) charArray0[1]);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test
  public void test017()  throws Throwable  {
      CharSequence charSequence0 = null;
      String string0 = "B\"cnOZ?-LPQ&+8td\",H#=Kq!O~'ldtz6ubE]";
      int int0 = 0;
      int int1 = StringUtils.lastIndexOf((CharSequence) string0, int0);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try {
        int int2 = StringUtils.getLevenshteinDistance((CharSequence) string0, charSequence0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
      }
  }

  @Test
  public void test018()  throws Throwable  {
      String string0 = "#fc";
      SQLWarning sQLWarning0 = new SQLWarning(string0);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("#fc", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: #fc", sQLWarning0.toString());
      assertNotNull(sQLWarning0);
      
      String string1 = sQLWarning0.getMessage();
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("#fc", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: #fc", sQLWarning0.toString());
      assertEquals("#fc", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) string1, (CharSequence) string1);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("#fc", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: #fc", sQLWarning0.toString());
      assertEquals(0, int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      CharSequence charSequence0 = null;
      // Undeclared exception!
      try {
        int int1 = StringUtils.getLevenshteinDistance(charSequence0, charSequence0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
      }
  }

  @Test
  public void test019()  throws Throwable  {
      String string0 = "(8/Z`~UOko=^)^<mb";
      int int0 = 3359;
      char char0 = ']';
      String string1 = StringUtils.leftPad(string0, int0, char0);
      assertEquals`~UOko=^)^<mb", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) string1, (CharSequence) string0);
      assertEquals(3342, int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test020()  throws Throwable  {
      String string0 = "L";
      String string1 = StringUtils.swapCase(string0);
      assertEquals("l", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) string0, (CharSequence) string1);
      assertEquals(1, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test021()  throws Throwable  {
      String string0 = "L";
      String string1 = StringUtils.substringAfter(string0, string0);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) string0, (CharSequence) string1);
      assertEquals(1, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test022()  throws Throwable  {
      String string0 = "L";
      String string1 = StringUtils.substringAfter(string0, string0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) string1, (CharSequence) string1);
      assertEquals(0, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test023()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try {
        int int0 = StringUtils.getLevenshteinDistance((CharSequence) string0, (CharSequence) string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
      }
  }

  @Test
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = ")(TArray and element cannot both be null";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      String string1 = "Ja&qm\\X \\V*wQ+c*V";
      assertNotSame(string1, string0);
      
      stringArray0[1] = string1;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string1;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = stringArray0[0];
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = stringArray0[0];
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = string0;
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = string0;
      assertNotNull(stringArray0[6]);
      
      stringArray0[7] = stringArray0[3];
      assertNotNull(stringArray0[7]);
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
  }

  @Test
  public void test025()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = ")(TArray and element cannot both be null";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = stringArray0[0];
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = stringArray0[0];
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = stringArray0[0];
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = stringArray0[3];
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = stringArray0[0];
      assertNotNull(stringArray0[6]);
      
      stringArray0[7] = stringArray0[0];
      assertNotNull(stringArray0[7]);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(")(TArray and element cannot both be null", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
  }

  @Test
  public void test026()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = new String[6];
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
  }

  @Test
  public void test027()  throws Throwable  {
      String string0 = "D";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, string0);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test028()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test
  public void test029()  throws Throwable  {
      String string0 = "\"%)";
      int int0 = 1690;
      String string1 = StringUtils.abbreviate(string0, int0);
      assertEquals("\"%)", string1);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String[] stringArray0 = StringUtils.substringsBetween(string1, string1, string1);
      assertNull(stringArray0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test
  public void test030()  throws Throwable  {
      String string0 = "eOccS_sP>^:/}wc:h";
      String string1 = StringUtils.strip(string0, string0);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.difference(string0, string1);
      assertEquals("", string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
  }

  @Test
  public void test031()  throws Throwable  {
      String string0 = "7axx^[_k;;2,J";
      String[] stringArray0 = new String[8];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      String string1 = StringUtils.replaceEach(string0, stringArray0, stringArray0);
      assertEquals("7axx^[_k;;2,J", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) string1, (CharSequence) stringArray0[0]);
      assertEquals((-1), int0);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test032()  throws Throwable  {
      String string0 = "VrPQS=R.7";
      String string1 = "zl`SM`JPjQ.?ggT.|VZ";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.difference(string0, string1);
      assertEquals("zl`SM`JPjQ.?ggT.|VZ", string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
  }

  @Test
  public void test033()  throws Throwable  {
      String string0 = " EXH<6(fm";
      String string1 = null;
      String string2 = StringUtils.difference(string1, string0);
      assertEquals(" EXH<6(fm", string2);
      assertNotNull(string2);
      assertSame(string2, string0);
      assertSame(string0, string2);
  }

  @Test
  public void test034()  throws Throwable  {
      String string0 = "The Character must not be null";
      int int0 = 0;
      String string1 = StringUtils.abbreviateMiddle(string0, string0, int0);
      assertEquals("The Character must not be null", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      int int1 = 57;
      String string2 = StringUtils.abbreviateMiddle(string0, string1, int1);
      assertEquals("The Character must not be null", string2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(string2);
      assertSame(string2, string1);
      assertSame(string2, string0);
      assertSame(string1, string2);
      assertSame(string1, string0);
      assertSame(string0, string2);
      assertSame(string0, string1);
  }

  @Test
  public void test035()  throws Throwable  {
      String string0 = "";
      String string1 = "null comparator";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.strip(string1, string1);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotNull(string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      
      int int0 = 0;
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) string2, (CharSequence) string2, int0);
      assertEquals(0, int1);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      
      String string3 = StringUtils.abbreviateMiddle(string1, string0, int1);
      assertEquals("null comparator", string3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertFalse(string0.equals((Object)string3));
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(string3, string1);
      assertSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
  }

  @Test
  public void test036()  throws Throwable  {
      String string0 = "Array 9nd elemet cnno both be null";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(string0, string0);
      assertEquals("Array 9nd elemet cnno both be null", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("Array 9nd elemet cnno both be null", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Array 9nd elemet cnno both be null", sQLIntegrityConstraintViolationException0.toString());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      String string1 = sQLIntegrityConstraintViolationException0.getSQLState();
      assertEquals("Array 9nd elemet cnno both be null", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("Array 9nd elemet cnno both be null", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Array 9nd elemet cnno both be null", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("Array 9nd elemet cnno both be null", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      int int0 = 595;
      int int1 = StringUtils.lastIndexOf((CharSequence) string1, (CharSequence) string0, int0);
      assertEquals("Array 9nd elemet cnno both be null", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("Array 9nd elemet cnno both be null", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Array 9nd elemet cnno both be null", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      String string2 = null;
      String string3 = StringUtils.abbreviateMiddle(string2, string1, int1);
      assertEquals("Array 9nd elemet cnno both be null", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("Array 9nd elemet cnno both be null", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Array 9nd elemet cnno both be null", sQLIntegrityConstraintViolationException0.toString());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNull(string3);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test037()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.StringUtils";
      int int0 = 10;
      String string1 = StringUtils.abbreviate(string0, int0, int0);
      assertEquals("....com...", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test038()  throws Throwable  {
      String string0 = "The stripAccents(CharSequence) method requires at least Java6, but got: ";
      int int0 = 65;
      String string1 = StringUtils.abbreviate(string0, int0, int0);
      assertEquals("...ccents(CharSequence) method requires at least Java6, but got: ", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test039()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertNotNull(locale0);
      
      String string0 = locale0.getCountry();
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", string0);
      assertNotNull(string0);
      
      int int0 = 0;
      // Undeclared exception!
      try {
        String string1 = StringUtils.abbreviate(string0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
      }
  }

  @Test
  public void test040()  throws Throwable  {
      String string0 = null;
      int int0 = Integer.MAX_VALUE;
      String string1 = StringUtils.abbreviate(string0, int0);
      assertNull(string1);
  }

  @Test
  public void test041()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.reverse(string0);
      assertNull(string1);
  }

  @Test
  public void test042()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.defaultIfEmpty(string0, string0);
      assertNull(string1);
  }

  @Test
  public void test043()  throws Throwable  {
      String string0 = "";
      String string1 = "null comparator";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.strip(string1, string0);
      assertEquals("null comparator", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotNull(string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      
      String string3 = (String)StringUtils.defaultIfEmpty((CharSequence) string2, (CharSequence) string2);
      assertEquals("null comparator", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertNotNull(string3);
      assertSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(string3, string1);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string2, string3);
      assertNotSame(string1, string0);
      assertSame(string1, string3);
      assertSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
  }

  @Test
  public void test044()  throws Throwable  {
      String string0 = "\"%)";
      int int0 = 1690;
      String string1 = StringUtils.abbreviate(string0, int0);
      assertEquals("\"%)", string1);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String string2 = StringUtils.defaultIfBlank(string1, string0);
      assertEquals("\"%)", string2);
      assertNotNull(string2);
      assertSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertSame(string2, string0);
  }

  @Test
  public void test045()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNotNull(sQLClientInfoException0);
      
      String string0 = sQLClientInfoException0.getMessage();
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(string0);
      
      String string1 = StringUtils.defaultString(string0, string0);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(string1);
  }

  @Test
  public void test046()  throws Throwable  {
      String string0 = "#=Kq!O~'ldtz6ubE]";
      int int0 = (-966);
      String string1 = StringUtils.substring(string0, int0, int0);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.defaultString(string1, string0);
      assertEquals("", string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
  }

  @Test
  public void test047()  throws Throwable  {
      String string0 = "(8/Z`~UOko=^)^<mb";
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test048()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test049()  throws Throwable  {
      String string0 = "decompose";
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test
  public void test050()  throws Throwable  {
      String string0 = "sun.text.Normalizer";
      String string1 = StringUtils.uncapitalize(string0);
      assertEquals("sun.text.Normalizer", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) string1);
      assertFalse(boolean0);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test051()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.stripAccents(string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) string1);
      assertFalse(boolean0);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test052()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertNotNull(sQLClientInfoException0);
      
      String string0 = sQLClientInfoException0.getMessage();
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) string0);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertFalse(boolean0);
  }

  @Test
  public void test053()  throws Throwable  {
      String string0 = " !Oe\\";
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test054()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      String string0 = sQLFeatureNotSupportedException0.getSQLState();
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) string0);
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertFalse(boolean0);
  }

  @Test
  public void test055()  throws Throwable  {
      String string0 = "L";
      String string1 = StringUtils.substringAfter(string0, string0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) string1);
      assertTrue(boolean0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test056()  throws Throwable  {
      String string0 = " is not in the range '0' - '9'";
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test057()  throws Throwable  {
      String string0 = "bkc@;.C^s";
      String string1 = StringUtils.difference(string0, string0);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) string1);
      assertTrue(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test058()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test059()  throws Throwable  {
      String string0 = "wORg`f$!";
      String string1 = StringUtils.remove(string0, string0);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) string1);
      assertFalse(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test060()  throws Throwable  {
      String string0 = "{}";
      boolean boolean0 = StringUtils.isNumeric((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test061()  throws Throwable  {
      CharSequence charSequence0 = null;
      boolean boolean0 = StringUtils.isNumeric(charSequence0);
      assertFalse(boolean0);
  }

  @Test
  public void test062() {}
//   @Test
//   public void test062()  throws Throwable  {
//       Locale locale0 = Locale.US;
//       assertEquals("en_US", locale0.toString());
//       assertEquals("US", locale0.getCountry());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("USA", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertNotNull(locale0);
//       
//       String string0 = locale0.getDisplayCountry();
//       assertEquals("en_US", locale0.toString());
//       assertEquals("US", locale0.getCountry());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("USA", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("\u7F8E\u570B", string0);
//       assertNotNull(string0);
//       
//       boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) string0);
//       assertEquals("en_US", locale0.toString());
//       assertEquals("US", locale0.getCountry());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("USA", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertFalse(boolean0);
//   }

  @Test
  public void test063()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      String string0 = sQLSyntaxErrorException0.getSQLState();
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) string0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertFalse(boolean0);
  }

  @Test
  public void test064()  throws Throwable  {
      String string0 = "(8/Z`~UOko=^)^<mb";
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test
  public void test065()  throws Throwable  {
      String string0 = "The Array must not be null";
      String string1 = StringUtils.chop(string0);
      assertEquals("The Array must not be nul", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) string1);
      assertTrue(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test066()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.trimToNull(string0);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) string1);
      assertFalse(boolean0);
  }

  @Test
  public void test067()  throws Throwable  {
      String string0 = "I4/4}'Ak4Z<$ji)@(,";
      String string1 = StringUtils.chomp(string0);
      assertEquals("I4/4}'Ak4Z<$ji)@(,", string1);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) string1);
      assertFalse(boolean0);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test
  public void test068()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string0 = locale0.getISO3Language();
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) string0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertTrue(boolean0);
  }

  @Test
  public void test069()  throws Throwable  {
      String string0 = "{}";
      String string1 = StringUtils.chomp(string0, string0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) string1);
      assertFalse(boolean0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test070()  throws Throwable  {
      String string0 = "{}";
      String string1 = StringUtils.swapCase(string0);
      assertEquals("{}", string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) string1);
      assertFalse(boolean0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test071()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test072()  throws Throwable  {
      String string0 = " has no clone method";
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test
  public void test073()  throws Throwable  {
      String string0 = "P}7$:2gV@(n}1{<iYB";
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test074()  throws Throwable  {
      CharSequence charSequence0 = null;
      boolean boolean0 = StringUtils.isAlphaSpace(charSequence0);
      assertFalse(boolean0);
  }

  @Test
  public void test075()  throws Throwable  {
      String string0 = "P}7$:2gV@(n}1{<iYB";
      String string1 = StringUtils.removeEndIgnoreCase(string0, string0);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) string1);
      assertTrue(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test076()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.isAlpha((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test077()  throws Throwable  {
      String string0 = "x62ak|GI__\\(x\"m";
      boolean boolean0 = StringUtils.isAlpha((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test078()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAlpha((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test079()  throws Throwable  {
      String string0 = "Minimum abbreviation width is 4>0?uf";
      int[] intArray0 = new int[8];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(string0, intArray0);
      assertEquals("java.sql.BatchUpdateException: Minimum abbreviation width is 4>0?uf", batchUpdateException0.toString());
      assertEquals("Minimum abbreviation width is 4>0?uf", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      String string1 = batchUpdateException0.toString();
      assertEquals("java.sql.BatchUpdateException: Minimum abbreviation width is 4>0?uf", batchUpdateException0.toString());
      assertEquals("Minimum abbreviation width is 4>0?uf", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: Minimum abbreviation width is 4>0?uf", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      int int0 = StringUtils.countMatches((CharSequence) string1, (CharSequence) string0);
      assertEquals("java.sql.BatchUpdateException: Minimum abbreviation width is 4>0?uf", batchUpdateException0.toString());
      assertEquals("Minimum abbreviation width is 4>0?uf", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals(1, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test080()  throws Throwable  {
      String string0 = "7TQ}Ht?$ans";
      String string1 = StringUtils.stripStart(string0, string0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      int int0 = StringUtils.countMatches((CharSequence) string0, (CharSequence) string1);
      assertEquals(0, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test081()  throws Throwable  {
      String string0 = "\\u0";
      String string1 = StringUtils.swapCase(string0);
      assertEquals("\\U0", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test082()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.swapCase(string0);
      assertNull(string1);
  }

  @Test
  public void test083()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.uncapitalize(string0);
      assertNull(string1);
  }

  @Test
  public void test084()  throws Throwable  {
      String string0 = "#=Kq!O~'ldtz6ubE]";
      int int0 = (-958);
      String string1 = StringUtils.mid(string0, int0, int0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = StringUtils.capitalize(string1);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
  }

  @Test
  public void test085()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.lowerCase(string0);
      assertNull(string1);
  }

  @Test
  public void test086()  throws Throwable  {
      String string0 = "Search and Replace array lengths don't match: ";
      String string1 = StringUtils.lowerCase(string0);
      assertEquals("search and replace array lengths don't match: ", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test087()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.trim(string0);
      assertNull(string1);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string2 = StringUtils.upperCase(string1, locale0);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNull(string2);
  }

  @Test
  public void test088()  throws Throwable  {
      String string0 = "SecurityException occurred";
      Locale locale0 = Locale.FRENCH;
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string1 = StringUtils.upperCase(string0, locale0);
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("SECURITYEXCEPTION OCCURRED", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test089()  throws Throwable  {
      String string0 = " !Oe\\";
      char char0 = 'u';
      String string1 = StringUtils.leftPad(string0, (int) char0, char0);
      assertEquals("uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu !Oe\\", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.upperCase(string1);
      assertEquals("UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU !OE\\", string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
  }

  @Test
  public void test090()  throws Throwable  {
      String string0 = "bkc@;.C^s";
      String string1 = StringUtils.difference(string0, string0);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      int int0 = 3;
      String string2 = StringUtils.center(string0, int0, string1);
      assertEquals("bkc@;.C^s", string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotNull(string2);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
  }

  @Test
  public void test091()  throws Throwable  {
      String string0 = "\"%)";
      int int0 = 1690;
      String string1 = null;
      String string2 = StringUtils.center(string0, int0, string1);
      assertEqualsstring2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
  }

  @Test
  public void test092()  throws Throwable  {
      String string0 = "{}";
      String string1 = StringUtils.swapCase(string0);
      assertEquals("{}", string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      int int0 = 0;
      String string2 = StringUtils.center(string1, int0, string1);
      assertEquals("{}", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
  }

  @Test
  public void test093()  throws Throwable  {
      String string0 = "x;V}v)C?k";
      int int0 = 0;
      String string1 = null;
      String string2 = StringUtils.center(string1, int0, string0);
      assertNull(string2);
  }

  @Test
  public void test094()  throws Throwable  {
      String string0 = "#=Kq!O~'ldtz6ubE]";
      int int0 = (-966);
      String string1 = StringUtils.substring(string0, int0, int0);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      char char0 = '4';
      String string2 = StringUtils.center(string1, int0, char0);
      assertEquals("", string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
  }

  @Test
  public void test095()  throws Throwable  {
      CharSequence charSequence0 = null;
      int int0 = StringUtils.indexOfAnyBut(charSequence0, charSequence0);
      assertEquals((-1), int0);
      
      String string0 = null;
      String string1 = StringUtils.center(string0, int0);
      assertNull(string1);
  }

  @Test
  public void test096()  throws Throwable  {
      String string0 = "Array element ";
      String string1 = StringUtils.reverse(string0);
      assertEquals(" tnemele yarrA", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      int int0 = StringUtils.length((CharSequence) string1);
      assertEquals(14, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test097()  throws Throwable  {
      String string0 = "Minimum abbreviation width is 4>0?uf";
      int int0 = 2804;
      String string1 = StringUtils.center(string0, int0, string0);
      assertEquals("Minimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviaMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbreviation width is 4>0?ufMinimum abbrevia", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test098()  throws Throwable  {
      String string0 = "I4/4}'Ak4Z<$ji)@(,";
      String string1 = StringUtils.chomp(string0);
      assertEquals("I4/4}'Ak4Z<$ji)@(,", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      char char0 = 'o';
      String string2 = null;
      String string3 = StringUtils.leftPad(string1, (int) char0, string2);
      assertEquals("                                                                                             I4/4}'Ak4Z<$ji)@(,", string3);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
  }

  @Test
  public void test099()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = "I4/4}'Ak4Z<$ji)@(,";
      String string1 = StringUtils.chomp(string0);
      assertEquals("I4/4}'Ak4Z<$ji)@(,", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      
      String string2 = null;
      String string3 = StringUtils.leftPad(string1, int0, string2);
      assertEquals("I4/4}'Ak4Z<$ji)@(,", string3);
      assertNotNull(string3);
      assertSame(string3, string1);
      assertSame(string3, string0);
      assertSame(string1, string3);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertSame(string0, string3);
  }

  @Test
  public void test100()  throws Throwable  {
      String string0 = "";
      char[] charArray0 = new char[10];
      String string1 = StringUtils.stripToNull(string0);
      assertNull(string1);
      
      String string2 = StringUtils.leftPad(string1, (int) charArray0[1], string0);
      assertNull(string2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test101()  throws Throwable  {
      String string0 = "x;V}v)C?k";
      int int0 = 0;
      String string1 = "null comparator";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.rightPad(string1, int0);
      assertEquals("null comparator", string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      
      int int1 = 32;
      String string3 = StringUtils.center(string2, int1, string0);
      assertEquals("x;V}v)Cnull comparatorx;V}v)C?", string3);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(int0 == int1);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertNotNull(string3);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
  }

  @Test
  public void test102()  throws Throwable  {
      String string0 = "=~+2P }?+=1!M]o+&P";
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) string0, (CharSequence) string0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.abbreviateMiddle(string0, string0, int0);
      assertEquals("=~+2P }?+=1!M]o+&P", string1);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      char char0 = 'i';
      String string2 = StringUtils.rightPad(string1, (int) char0, string1);
      assertEquals("=~+2P }?+=1!M]o+&P=~+2P }?+=1!M]o+&P=~+2P }?+=1!M]o+&P=~+2P }?+=1!M]o+&P=~+2P }?+=1!M]o+&P=~+2P }?+=1!M]o", string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotNull(string2);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
  }

  @Test
  public void test103()  throws Throwable  {
      String string0 = "7TQ}Ht?$ans";
      String string1 = StringUtils.stripStart(string0, string0);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      int int0 = 57;
      String string2 = StringUtils.rightPad(string1, int0, string1);
      assertEquals("                                                         ", string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
  }

  @Test
  public void test104()  throws Throwable  {
      String string0 = "7TQ}Ht?$ans";
      int int0 = (-1210);
      String string1 = null;
      String string2 = StringUtils.right(string0, int0);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertNotNull(string2);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      
      String string3 = StringUtils.rightPad(string2, int0, string1);
      assertEquals("", string3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertNotNull(string3);
      assertNotSame(string2, string0);
      assertSame(string2, string3);
      assertSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
  }

  @Test
  public void test105()  throws Throwable  {
      String[] stringArray0 = new String[2];
      int int0 = StringUtils.countMatches((CharSequence) stringArray0[1], (CharSequence) stringArray0[1]);
      assertEquals(0, int0);
      
      String[] stringArray1 = new String[7];
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      
      String string0 = StringUtils.rightPad(stringArray1[5], int0, stringArray0[1]);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNull(string0);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
  }

  @Test
  public void test106()  throws Throwable  {
      String string0 = null;
      int int0 = 0;
      String string1 = StringUtils.rightPad(string0, int0);
      assertNull(string1);
  }

  @Test
  public void test107()  throws Throwable  {
      String string0 = "D(w&b?z'M";
      String string1 = StringUtils.removeEndIgnoreCase(string0, string0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      char char0 = 'E';
      String string2 = null;
      String string3 = StringUtils.repeat(string1, string2, (int) char0);
      assertEquals("", string3);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string3);
      assertSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string3, string0);
      assertSame(string3, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
  }

  @Test
  public void test108()  throws Throwable  {
      int int0 = 218;
      String string0 = "\"2";
      String string1 = StringUtils.repeat(string0, int0);
      assertEqualsstring1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test109()  throws Throwable  {
      String string0 = "D(w&b?z'M";
      String string1 = StringUtils.removeEndIgnoreCase(string0, string0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = StringUtils.removeStartIgnoreCase(string0, string1);
      assertEquals("D(w&b?z'M", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string2);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      
      int int0 = 65;
      String string3 = StringUtils.repeat(string2, string1, int0);
      assertEquals("D(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'MD(w&b?z'M", string3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string3);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
  }

  @Test
  public void test110()  throws Throwable  {
      int int0 = 16;
      String string0 = "~";
      String string1 = StringUtils.repeat(string0, int0);
      assertEquals("~~~~~~~~~~~~~~~~", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test111()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.deleteWhitespace(string0);
      assertNull(string1);
      
      int int0 = Integer.MAX_VALUE;
      String string2 = StringUtils.repeat(string0, string1, int0);
      assertNull(string2);
  }

  @Test
  public void test112()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = StringUtils.chop(stringArray0[2]);
      assertNull(string0);
  }

  @Test
  public void test113()  throws Throwable  {
      String string0 = "D";
      String string1 = StringUtils.chomp(string0);
      assertEquals("D", string1);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test
  public void test114()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.chomp(string0);
      assertNull(string1);
  }

  @Test
  public void test115()  throws Throwable  {
      String string0 = "Array 9nd elemet cnno both be null";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(string0, string0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Array 9nd elemet cnno both be null", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("Array 9nd elemet cnno both be null", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("Array 9nd elemet cnno both be null", sQLIntegrityConstraintViolationException0.getMessage());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      String string1 = sQLIntegrityConstraintViolationException0.getSQLState();
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Array 9nd elemet cnno both be null", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("Array 9nd elemet cnno both be null", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("Array 9nd elemet cnno both be null", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("Array 9nd elemet cnno both be null", string1);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      int int0 = 595;
      int int1 = StringUtils.lastIndexOf((CharSequence) string1, (CharSequence) string0, int0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Array 9nd elemet cnno both be null", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("Array 9nd elemet cnno both be null", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("Array 9nd elemet cnno both be null", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String string2 = StringUtils.overlay(string0, string0, int0, int1);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Array 9nd elemet cnno both be null", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("Array 9nd elemet cnno both be null", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("Array 9nd elemet cnno both be null", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("Array 9nd elemet cnno both be null", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(int1 == int0);
      assertTrue(string0.equals((Object)string2));
      assertFalse(int0 == int1);
      assertTrue(string1.equals((Object)string2));
      assertNotNull(string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
  }

  @Test
  public void test116()  throws Throwable  {
      String string0 = "2Q6Y^@,O#A-62";
      char char0 = 'q';
      String string1 = StringUtils.overlay(string0, string0, (int) char0, (int) char0);
      assertEquals("2Q6Y^@,O#A-622Q6Y^@,O#A-62", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test117()  throws Throwable  {
      String string0 = "Z!_\"Z@4mmgTU:8*\")";
      int int0 = (-1782);
      String string1 = StringUtils.overlay(string0, string0, int0, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test118()  throws Throwable  {
      String string0 = "/5rgcv#";
      int int0 = 0;
      String string1 = StringUtils.rightPad(string0, int0, string0);
      assertEquals("/5rgcv#", string1);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String string2 = "^md";
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      String string3 = StringUtils.replaceChars(string0, string2, string1);
      assertEquals("/5rgcv#", string3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertNotNull(string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string3, string2);
      assertSame(string3, string1);
      assertSame(string3, string0);
      assertSame(string0, string1);
      assertSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(string1, string3);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
  }

  @Test
  public void test119()  throws Throwable  {
      String string0 = null;
      String string1 = "t:#*Z$^In\"FNtky";
      String string2 = "^W!0x%B]&,\"\"M";
      assertNotSame(string2, string1);
      
      String string3 = StringUtils.replaceChars(string2, string1, string0);
      assertEquals("W!0x%B]&,M", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertNotNull(string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
  }

  @Test
  public void test120()  throws Throwable  {
      String string0 = null;
      String string1 = "t:#*Z$^In\"FNtky";
      int int0 = 0;
      String string2 = StringUtils.leftPad(string1, int0);
      assertEquals("t:#*Z$^In\"FNtky", string2);
      assertNotNull(string2);
      assertSame(string1, string2);
      assertSame(string2, string1);
      
      String string3 = StringUtils.replaceChars(string1, string2, string0);
      assertEquals("", string3);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
  }

  @Test
  public void test121()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.stripAccents(string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String string2 = "CHCooAF,-nQ:Sxa";
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      String string3 = StringUtils.replaceChars(string2, string1, string1);
      assertEquals("CHCooAF,-nQ:Sxa", string3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertNotNull(string3);
      assertSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
  }

  @Test
  public void test122()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.stripAccents(string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      String string2 = "sS6?N2";
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      String string3 = StringUtils.replace(string2, string1, string2);
      assertEquals("sS6?N2", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertNotNull(string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string2, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      
      String string4 = StringUtils.replaceChars(string3, string3, string3);
      assertEquals("sS6?N2", string4);
      assertTrue(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertNotNull(string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
  }

  @Test
  public void test123()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.substringBefore(string0, string0);
      assertNull(string1);
      
      String string2 = StringUtils.replaceChars(string1, string0, string0);
      assertNull(string2);
  }

  @Test
  public void test124()  throws Throwable  {
      String string0 = null;
      char char0 = 'k';
      String string1 = StringUtils.reverseDelimited(string0, char0);
      assertNull(string1);
      
      String string2 = StringUtils.replaceChars(string1, char0, char0);
      assertNull(string2);
  }

  @Test
  public void test125()  throws Throwable  {
      String string0 = "i;Z%<e`][P{3uy4x";
      char char0 = 'C';
      String string1 = StringUtils.replaceChars(string0, char0, char0);
      assertEquals("i;Z%<e`][P{3uy4x", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test126()  throws Throwable  {
      String string0 = "; or a Sun JVM: ";
      String string1 = StringUtils.stripAccents(string0);
      assertEquals("; or a Sun JVM: ", string1);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertNotNull(locale0);
      
      String string2 = locale0.getDisplayVariant();
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = string1;
      assertNotNull(stringArray0[0]);
      
      stringArray0[4] = string2;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertNotNull(stringArray0[4]);
      
      // Undeclared exception!
      try {
        String string3 = StringUtils.replaceEachRepeatedly(string0, stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
      }
  }

  @Test
  public void test127()  throws Throwable  {
      String string0 = "(8/Z`~UOko=^)^<mb";
      String[] stringArray0 = new String[10];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      String string1 = "org.";
      assertNotSame(string1, string0);
      
      stringArray0[9] = string1;
      assertNotNull(stringArray0[9]);
      
      String string2 = StringUtils.replaceEach(string0, stringArray0, stringArray0);
      assertEquals("(8/Z`~UOko=^)^<mb", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertNotNull(string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
  }

  @Test
  public void test128()  throws Throwable  {
      String string0 = "f";
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Set<Object> set0 = hashMap0.keySet();
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertNotNull(set0);
      
      char char0 = 'f';
      String string1 = hashMap0.put((Object) set0, string0);
      assertEquals(1, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals("{[(this Collection)]=f}", hashMap0.toString());
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertNull(string1);
      
      String string2 = "normalize";
      assertNotSame(string2, string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string3 = hashMap0.put(object0, string1);
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      assertEquals(2, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertFalse(string0.equals((Object)string2));
      assertNull(string3);
      assertNotSame(string0, string2);
      
      String[] stringArray0 = StringUtils.split(string2, char0);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(stringArray0);
      assertNotSame(string2, string0);
      
      String string4 = StringUtils.join((Iterable<?>) set0, char0);
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      assertEquals(2, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase(string0);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(stringArray1, stringArray0);
      
      String string5 = StringUtils.replaceEach(string4, stringArray1, stringArray0);
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      assertEquals(2, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertNotNull(string5);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      assertNotSame(string5, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string5);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string5);
  }

  @Test
  public void test129()  throws Throwable  {
      String string0 = "Y fOfuGnSD1Ze";
      String string1 = "O";
      assertNotSame(string1, string0);
      
      String string2 = "";
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      String string3 = StringUtils.strip(string1, string2);
      assertEquals("O", string3);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string1, string3);
      assertNotSame(string3, string2);
      assertSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = string3;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      // Undeclared exception!
      try {
        String string4 = StringUtils.replaceEachRepeatedly(string0, stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
      }
  }

  @Test
  public void test130()  throws Throwable  {
      String string0 = "(8/Z`~UOko=^)^<mb";
      String[] stringArray0 = new String[10];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      String string1 = StringUtils.replaceEach(string0, stringArray0, stringArray0);
      assertEquals("(8/Z`~UOko=^)^<mb", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test131()  throws Throwable  {
      String string0 = "B\"cnOZ?-LPQ&+8td\",H#=Kq!O~'ldtz6ubE]";
      String string1 = "W^";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = new String[20];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      String string2 = StringUtils.replaceEachRepeatedly(string1, stringArray0, stringArray0);
      assertEquals("W^", string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
  }

  @Test
  public void test132()  throws Throwable  {
      String string0 = ">0?uf";
      String string1 = StringUtils.defaultString(string0);
      assertEquals(">0?uf", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = string1;
      assertNotNull(stringArray0[0]);
      
      // Undeclared exception!
      try {
        String string2 = StringUtils.replaceEachRepeatedly(string1, stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
      }
  }

  @Test
  public void test133()  throws Throwable  {
      String string0 = "f";
      int int0 = 186;
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, string0, int0);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.chop(string0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      char char0 = '2';
      String string2 = StringUtils.center(string1, int0, char0);
      assertEquals("222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotNull(string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      
      String[] stringArray1 = StringUtils.split(stringArray0[0], char0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      
      String string3 = StringUtils.replaceEach(string2, stringArray0, stringArray1);
      assertEquals("222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222", string3);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertNotNull(string3);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
  }

  @Test
  public void test134()  throws Throwable  {
      String string0 = "";
      String string1 = "normalize";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[1] = string1;
      assertNotNull(stringArray0[1]);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(string0, string1);
      assertNotSame(stringArray1, stringArray0);
      
      String string2 = StringUtils.replaceEach(stringArray0[1], stringArray1, stringArray0);
      assertEquals("normalize", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test
  public void test135()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = null;
      String string1 = StringUtils.replaceEachRepeatedly(string0, stringArray0, stringArray0);
      assertNull(string1);
  }

  @Test
  public void test136() {}
//   @Test
//   public void test136()  throws Throwable  {
//       Locale locale0 = Locale.CHINA;
//       assertEquals("CHN", locale0.getISO3Country());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("zh_CN", locale0.toString());
//       assertEquals("CN", locale0.getCountry());
//       assertNotNull(locale0);
//       
//       String string0 = locale0.getDisplayCountry();
//       assertEquals("CHN", locale0.getISO3Country());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("zh_CN", locale0.toString());
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("\u4E2D\u570B", string0);
//       assertNotNull(string0);
//       
//       String string1 = StringUtils.replaceOnce(string0, string0, string0);
//       assertEquals("CHN", locale0.getISO3Country());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("zh_CN", locale0.toString());
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("\u4E2D\u570B", string1);
//       assertTrue(string1.equals((Object)string0));
//       assertTrue(string0.equals((Object)string1));
//       assertNotNull(string1);
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//   }

  @Test
  public void test137()  throws Throwable  {
      String string0 = "f";
      int int0 = 186;
      String string1 = StringUtils.replace(string0, string0, string0, int0);
      assertEquals("f", string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test138()  throws Throwable  {
      String string0 = "~";
      String string1 = "Arguments cannot both be null";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.replace(string0, string1, string0);
      assertEquals("~", string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
  }

  @Test
  public void test139()  throws Throwable  {
      String string0 = "`';Hqh{773l";
      int int0 = 0;
      String string1 = StringUtils.replace(string0, string0, string0, int0);
      assertEquals("`';Hqh{773l", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test140()  throws Throwable  {
      String string0 = "#=Kq!O~'ldtz6ubE]";
      String string1 = null;
      String string2 = StringUtils.replace(string0, string0, string1);
      assertEquals("#=Kq!O~'ldtz6ubE]", string2);
      assertNotNull(string2);
      assertSame(string0, string2);
      assertSame(string2, string0);
  }

  @Test
  public void test141()  throws Throwable  {
      String string0 = "~";
      char char0 = '!';
      String string1 = StringUtils.remove(string0, char0);
      assertEquals("~", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test142()  throws Throwable  {
      String string0 = null;
      char char0 = '%';
      String string1 = StringUtils.remove(string0, char0);
      assertNull(string1);
  }

  @Test
  public void test143()  throws Throwable  {
      String string0 = "$[S%W5A[";
      String string1 = StringUtils.removeEnd(string0, string0);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.remove(string0, string1);
      assertEquals("$[S%W5A[", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
  }

  @Test
  public void test144()  throws Throwable  {
      String string0 = "";
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      int int0 = 0;
      String string1 = StringUtils.join((Object[]) charSequenceArray0, string0, int0, int0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String string2 = StringUtils.remove(string1, string0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string1, string0);
      assertSame(string1, string2);
  }

  @Test
  public void test145()  throws Throwable  {
      String string0 = "Index: ";
      String string1 = null;
      String string2 = StringUtils.removeEndIgnoreCase(string0, string1);
      assertEquals("Index: ", string2);
      assertNotNull(string2);
      assertSame(string0, string2);
      assertSame(string2, string0);
  }

  @Test
  public void test146()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.substringBefore(string0, string0);
      assertNull(string1);
      
      String string2 = StringUtils.removeEndIgnoreCase(string0, string1);
      assertNull(string2);
  }

  @Test
  public void test147()  throws Throwable  {
      String string0 = "#=Kq!O~'ldtz6ubE]";
      String string1 = "Cannot get the toString of a null identity";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeEnd(string1, string0);
      assertEquals("Cannot get the toString of a null identity", string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
  }

  @Test
  public void test148()  throws Throwable  {
      String string0 = "Ev<w9ybt\\0;{fHG}I";
      int int0 = 0;
      String string1 = StringUtils.repeat(string0, string0, int0);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test149()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.CharUtils";
      String string1 = "clone";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeStartIgnoreCase(string0, string1);
      assertEquals("org.apache.commons.lang3.CharUtils", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
  }

  @Test
  public void test150()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.CharUtils";
      String string1 = StringUtils.removeStartIgnoreCase(string0, string0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test151()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.removeStartIgnoreCase(string0, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test152()  throws Throwable  {
      String string0 = "{}";
      String string1 = StringUtils.swapCase(string0);
      assertEquals("{}", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = StringUtils.removeStart(string1, string1);
      assertEquals("", string2);
      assertTrue(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
  }

  @Test
  public void test153()  throws Throwable  {
      String string0 = "L";
      String string1 = StringUtils.swapCase(string0);
      assertEquals("l", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeStart(string0, string1);
      assertEquals("L", string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
  }

  @Test
  public void test154()  throws Throwable  {
      String string0 = "L";
      String string1 = StringUtils.substringAfter(string0, string0);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeStart(string0, string1);
      assertEquals("L", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
  }

  @Test
  public void test155()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.trimToNull(string0);
      assertNull(string1);
      
      String string2 = StringUtils.removeStart(string1, string0);
      assertNull(string2);
  }

  @Test
  public void test156()  throws Throwable  {
      String string0 = " is not in the range '0' - '9'";
      String string1 = StringUtils.deleteWhitespace(string0);
      assertEquals("isnotintherange'0'-'9'", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test157()  throws Throwable  {
      String string0 = "P}7$:2gV@(n}1{<iYB";
      String string1 = "E$uvZwV_d!";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeEndIgnoreCase(string0, string1);
      assertEquals("P}7$:2gV@(n}1{<iYB", string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      
      String string3 = StringUtils.deleteWhitespace(string2);
      assertEquals("P}7$:2gV@(n}1{<iYB", string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string3);
      assertNotSame(string0, string1);
      assertSame(string0, string3);
      assertSame(string0, string2);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(string3, string0);
      assertSame(string2, string3);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
  }

  @Test
  public void test158()  throws Throwable  {
      String string0 = null;
      char[] charArray0 = new char[1];
      String string1 = StringUtils.substringBefore(string0, string0);
      assertNull(string1);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(string0, string0, (int) charArray0[0]);
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNotNull(sQLTimeoutException0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      String string2 = StringUtils.join((Iterable<?>) sQLTimeoutException0, string1);
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals("java.sql.SQLTimeoutException", string2);
      assertNotNull(string2);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test
  public void test159()  throws Throwable  {
      String string0 = "Array and element cannot both be null";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(string0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Array and element cannot both be null", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("Array and element cannot both be null", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(string0, (Throwable) sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: Array and element cannot both be null", sQLTransactionRollbackException0.toString());
      assertEquals("Array and element cannot both be null", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Array and element cannot both be null", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("Array and element cannot both be null", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      String string1 = StringUtils.join((Iterable<?>) sQLTransactionRollbackException0, string0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: Array and element cannot both be null", sQLTransactionRollbackException0.toString());
      assertEquals("Array and element cannot both be null", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Array and element cannot both be null", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("Array and element cannot both be null", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: Array and element cannot both be nullArray and element cannot both be nulljava.sql.SQLInvalidAuthorizationSpecException: Array and element cannot both be null", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test160()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string0 = locale0.getDisplayCountry(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", string0);
      assertNotNull(string0);
      
      Iterator<Integer> iterator0 = null;
      String string1 = StringUtils.join(iterator0, string0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertNull(string1);
  }

  @Test
  public void test161()  throws Throwable  {
      String string0 = "";
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Set<Object> set0 = hashMap0.keySet();
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertNotNull(set0);
      
      char char0 = 'f';
      String string1 = hashMap0.put((Object) set0, string0);
      assertEquals(false, set0.isEmpty());
      assertEquals(1, set0.size());
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals("{[(this Collection)]=}", hashMap0.toString());
      assertNull(string1);
      
      String string2 = StringUtils.join((Iterable<?>) set0, char0);
      assertEquals(false, set0.isEmpty());
      assertEquals(1, set0.size());
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals("{[(this Collection)]=}", hashMap0.toString());
      assertEquals("[(this Collection)]", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string2, string0);
  }

  @Test
  public void test162()  throws Throwable  {
      char char0 = 'b';
      Iterator<CharBuffer> iterator0 = null;
      String string0 = StringUtils.join(iterator0, char0);
      assertNull(string0);
  }

  @Test
  public void test163()  throws Throwable  {
      int int0 = 0;
      Stack<Object> stack0 = new Stack<Object>();
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      ListIterator<Object> listIterator0 = stack0.listIterator(int0);
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals(false, listIterator0.hasNext());
      assertEquals(0, listIterator0.nextIndex());
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(listIterator0);
      
      char[] charArray0 = new char[1];
      String string0 = StringUtils.join((Iterator<?>) listIterator0, charArray0[0]);
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals(false, listIterator0.hasNext());
      assertEquals(0, listIterator0.nextIndex());
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test
  public void test164()  throws Throwable  {
      char[] charArray0 = new char[3];
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) charArray0[2];
      assertNotNull(objectArray0[0]);
      
      String string0 = StringUtils.join(objectArray0);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
  }

  @Test
  public void test165()  throws Throwable  {
      char[] charArray0 = new char[1];
      Object[] objectArray0 = new Object[21];
      String string0 = StringUtils.join(objectArray0, charArray0[0]);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test
  public void test166()  throws Throwable  {
      char[] charArray0 = new char[10];
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string0 = locale0.getScript();
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverseDelimited(string0, charArray0[4]);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", string1);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test167()  throws Throwable  {
      String string0 = "STyPLwm?JjZ/5";
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test168()  throws Throwable  {
      String string0 = "iZ?(Bsi-e";
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test169()  throws Throwable  {
      String string0 = "Search and Replace array lengths don't match: ";
      char char0 = 'c';
      String string1 = StringUtils.remove(string0, char0);
      assertEquals("Searh and Replae array lengths don't math: ", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      int int0 = 10;
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string1, string0, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(stringArray0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test170()  throws Throwable  {
      String string0 = "i;Z%<e`][P{3uy4x";
      String string1 = "iZ?(Bsi-e";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.strip(string1, string1);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotNull(string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      
      int int0 = 0;
      String string3 = StringUtils.overlay(string2, string1, int0, int0);
      assertEquals("iZ?(Bsi-e", string3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      
      char char0 = 'C';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string3, string0, (int) char0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(stringArray0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
  }

  @Test
  public void test171()  throws Throwable  {
      String string0 = "i;Z%<e`][P{3uy4x";
      String string1 = StringUtils.strip(string0, string0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      int int0 = 0;
      String string2 = StringUtils.overlay(string1, string0, int0, int0);
      assertEquals("i;Z%<e`][P{3uy4x", string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string2, string1, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(stringArray0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
  }

  @Test
  public void test172()  throws Throwable  {
      String string0 = "#=Kq!O~'ldtz6ubE]";
      String string1 = "~";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(stringArray0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test173()  throws Throwable  {
      String string0 = " ";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test174()  throws Throwable  {
      String string0 = " has no clone method";
      String[] stringArray0 = StringUtils.split(string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test175()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.uncapitalize(string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      int int0 = 5;
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, string1, int0);
      assertNotNull(stringArray0);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test
  public void test176()  throws Throwable  {
      String string0 = "3Y~%UGy";
      char char0 = 'y';
      String string1 = StringUtils.reverseDelimited(string0, char0);
      assertEquals("3Y~%UG", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test177()  throws Throwable  {
      String string0 = "#fc";
      char char0 = 'c';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, char0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test178()  throws Throwable  {
      String string0 = "m8?34n6M,! 0L?S2HB";
      char char0 = 'm';
      String[] stringArray0 = StringUtils.split(string0, char0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test179()  throws Throwable  {
      String string0 = "x62ak|GI__\\(x\"m";
      int int0 = 16;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(string0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("x62ak|GI__\\(x\"m", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: x62ak|GI__\\(x\"m", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((Throwable) sQLTransientConnectionException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("x62ak|GI__\\(x\"m", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: x62ak|GI__\\(x\"m", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLTransientConnectionException: x62ak|GI__\\(x\"m", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: x62ak|GI__\\(x\"m", sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SQLDataException sQLDataException0 = new SQLDataException(string0, string0, int0, (Throwable) sQLFeatureNotSupportedException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("x62ak|GI__\\(x\"m", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: x62ak|GI__\\(x\"m", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("x62ak|GI__\\(x\"m", sQLDataException0.getMessage());
      assertEquals(16, sQLDataException0.getErrorCode());
      assertEquals("x62ak|GI__\\(x\"m", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: x62ak|GI__\\(x\"m", sQLDataException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLTransientConnectionException: x62ak|GI__\\(x\"m", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: x62ak|GI__\\(x\"m", sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(sQLDataException0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) sQLDataException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("x62ak|GI__\\(x\"m", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: x62ak|GI__\\(x\"m", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLDataException: x62ak|GI__\\(x\"m", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("java.sql.SQLDataException: x62ak|GI__\\(x\"m", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("x62ak|GI__\\(x\"m", sQLDataException0.getMessage());
      assertEquals(16, sQLDataException0.getErrorCode());
      assertEquals("x62ak|GI__\\(x\"m", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: x62ak|GI__\\(x\"m", sQLDataException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLTransientConnectionException: x62ak|GI__\\(x\"m", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: x62ak|GI__\\(x\"m", sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      String string1 = sQLIntegrityConstraintViolationException0.getMessage();
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("x62ak|GI__\\(x\"m", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: x62ak|GI__\\(x\"m", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLDataException: x62ak|GI__\\(x\"m", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("java.sql.SQLDataException: x62ak|GI__\\(x\"m", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("x62ak|GI__\\(x\"m", sQLDataException0.getMessage());
      assertEquals(16, sQLDataException0.getErrorCode());
      assertEquals("x62ak|GI__\\(x\"m", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: x62ak|GI__\\(x\"m", sQLDataException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLTransientConnectionException: x62ak|GI__\\(x\"m", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: x62ak|GI__\\(x\"m", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLDataException: x62ak|GI__\\(x\"m", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string1, string0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("x62ak|GI__\\(x\"m", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: x62ak|GI__\\(x\"m", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLDataException: x62ak|GI__\\(x\"m", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("java.sql.SQLDataException: x62ak|GI__\\(x\"m", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("x62ak|GI__\\(x\"m", sQLDataException0.getMessage());
      assertEquals(16, sQLDataException0.getErrorCode());
      assertEquals("x62ak|GI__\\(x\"m", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: x62ak|GI__\\(x\"m", sQLDataException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLTransientConnectionException: x62ak|GI__\\(x\"m", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: x62ak|GI__\\(x\"m", sQLFeatureNotSupportedException0.getMessage());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(stringArray0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test180()  throws Throwable  {
      int int0 = 1;
      String string0 = "O5'!@OO9Iyg\\@v]W4>";
      String string1 = "5";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string0, string1, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(stringArray0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test181()  throws Throwable  {
      String string0 = "$[S%W5A[";
      String string1 = null;
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string0, string1);
      assertNotNull(stringArray0);
  }

  @Test
  public void test182()  throws Throwable  {
      String string0 = "sun.text.Normalizer";
      String string1 = "{}";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.substringsBetween(string0, string1, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNull(stringArray0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test183()  throws Throwable  {
      String string0 = "2Q6Y^@,O#A-62";
      int int0 = 85;
      char char0 = 'q';
      String string1 = StringUtils.leftPad(string0, int0, char0);
      assertEquals("qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq2Q6Y^@,O#A-62", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String[] stringArray0 = StringUtils.substringsBetween(string1, string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNull(stringArray0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test184()  throws Throwable  {
      String string0 = " vs ";
      String string1 = StringUtils.strip(string0, string0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String[] stringArray0 = StringUtils.substringsBetween(string1, string0, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(stringArray0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test185()  throws Throwable  {
      String string0 = "\"%)";
      int int0 = 1690;
      String string1 = StringUtils.abbreviate(string0, int0);
      assertEquals("\"%)", string1);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String string2 = null;
      String[] stringArray0 = StringUtils.substringsBetween(string0, string1, string2);
      assertNull(stringArray0);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test
  public void test186()  throws Throwable  {
      String string0 = "2Q6Y^@,O#A-62";
      int int0 = 0;
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(int0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      String string1 = StringUtils.join((Iterable<?>) linkedHashSet0, string0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String[] stringArray0 = StringUtils.substringsBetween(string1, string1, string1);
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNull(stringArray0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test187()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = StringUtils.substringsBetween(string0, string0, string0);
      assertNull(stringArray0);
  }

  @Test
  public void test188()  throws Throwable  {
      String string0 = "";
      String string1 = "#(FFv{Iqj'E4`/>v(";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringBetween(string0, string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNull(string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test189()  throws Throwable  {
      String string0 = "2s,Qs]G=#d0ymt#L";
      String string1 = StringUtils.chomp(string0);
      assertEquals("2s,Qs]G=#d0ymt#L", string1);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      Iterable<String> iterable0 = null;
      String string2 = StringUtils.join(iterable0, string0);
      assertNull(string2);
      assertSame(string0, string1);
      
      String string3 = StringUtils.substringBetween(string0, string1, string2);
      assertNull(string3);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test
  public void test190()  throws Throwable  {
      String string0 = "Search and Replace array lengths don't match: ";
      String string1 = null;
      String string2 = StringUtils.substringBetween(string0, string1);
      assertNull(string2);
  }

  @Test
  public void test191()  throws Throwable  {
      String string0 = "...";
      String string1 = "=2KQHov&IV~i7N";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringAfterLast(string0, string1);
      assertEquals("", string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
  }

  @Test
  public void test192()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.substringAfterLast(string0, string0);
      assertNull(string1);
  }

  @Test
  public void test193()  throws Throwable  {
      String string0 = "...";
      String string1 = StringUtils.normalizeSpace(string0);
      assertEquals("...", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      String string2 = StringUtils.substringBeforeLast(string1, string1);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertNotNull(string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
  }

  @Test
  public void test194()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string0 = "aA{fr.C ";
      String string1 = locale0.getLanguage();
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringBeforeLast(string0, string1);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("aA{fr.C ", string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
  }

  @Test
  public void test195()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string0 = locale0.getDisplayVariant();
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = "aA{fr.C ";
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringBeforeLast(string1, string0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("aA{fr.C ", string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
  }

  @Test
  public void test196()  throws Throwable  {
      String string0 = "bkc@;.C^s";
      String string1 = StringUtils.difference(string0, string0);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringBeforeLast(string1, string0);
      assertEquals("", string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
  }

  @Test
  public void test197()  throws Throwable  {
      String string0 = "L";
      String string1 = "\\u0";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringAfter(string0, string1);
      assertEquals("", string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
  }

  @Test
  public void test198()  throws Throwable  {
      String string0 = "/5rgcv#";
      int int0 = 0;
      String string1 = StringUtils.rightPad(string0, int0, string0);
      assertEquals("/5rgcv#", string1);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String string2 = "";
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      String string3 = StringUtils.substringAfter(string2, string1);
      assertEquals("", string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
  }

  @Test
  public void test199()  throws Throwable  {
      String string0 = "@qF";
      String string1 = "Minimum abbreviation width with offset is 7";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringBefore(string0, string1);
      assertEquals("@qF", string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
  }

  @Test
  public void test200()  throws Throwable  {
      String string0 = "; or a Sun JVM: ";
      String string1 = StringUtils.remove(string0, string0);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.reverse(string0);
      assertEquals(" :MVJ nuS a ro ;", string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      String string3 = StringUtils.substringBefore(string2, string1);
      assertEquals("", string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
  }

  @Test
  public void test201()  throws Throwable  {
      String string0 = "@qF";
      String string1 = StringUtils.substringBefore(string0, string0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test202()  throws Throwable  {
      String string0 = "i;Z%<e`][P{3uy4x";
      int int0 = 0;
      String string1 = StringUtils.mid(string0, int0, int0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test203()  throws Throwable  {
      String string0 = "";
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      int int0 = 0;
      String string1 = StringUtils.join((Object[]) charSequenceArray0, string0, int0, int0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      int int1 = 122;
      String string2 = StringUtils.mid(string1, int1, int1);
      assertEquals("", string2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(string2);
      assertSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string1, string0);
      assertSame(string1, string2);
  }

  @Test
  public void test204()  throws Throwable  {
      String string0 = "#=Kq!O~'ldtz6ubE]";
      int int0 = (-966);
      char char0 = '4';
      String string1 = StringUtils.mid(string0, int0, (int) char0);
      assertEquals("#=Kq!O~'ldtz6ubE]", string1);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test
  public void test205()  throws Throwable  {
      String string0 = ">lHUJa>Mp";
      SQLDataException sQLDataException0 = new SQLDataException(string0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: >lHUJa>Mp", sQLDataException0.toString());
      assertEquals(">lHUJa>Mp", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertNotNull(sQLDataException0);
      
      String string1 = sQLDataException0.getSQLState();
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: >lHUJa>Mp", sQLDataException0.toString());
      assertEquals(">lHUJa>Mp", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertNull(string1);
      
      int int0 = 0;
      String string2 = StringUtils.mid(string1, int0, int0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: >lHUJa>Mp", sQLDataException0.toString());
      assertEquals(">lHUJa>Mp", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertNull(string2);
  }

  @Test
  public void test206()  throws Throwable  {
      String string0 = "Array element ";
      char[] charArray0 = new char[10];
      char char0 = '\\';
      charArray0[8] = char0;
      String string1 = StringUtils.right(string0, (int) charArray0[8]);
      assertEquals("Array element ", string1);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\\', '\u0000'}, charArray0);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test
  public void test207()  throws Throwable  {
      String string0 = "Array element ";
      char[] charArray0 = new char[10];
      String string1 = StringUtils.right(string0, (int) charArray0[3]);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test208()  throws Throwable  {
      String string0 = " vs ";
      int int0 = 8192;
      String string1 = StringUtils.left(string0, int0);
      assertEquals(" vs ", string1);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test
  public void test209()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de", locale0.toString());
      assertNotNull(locale0);
      
      String string0 = locale0.getDisplayVariant();
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de", locale0.toString());
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = (-778);
      String string1 = StringUtils.left(string0, int0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de", locale0.toString());
      assertEquals("", string1);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test
  public void test210()  throws Throwable  {
      char char0 = '{';
      String string0 = null;
      String string1 = StringUtils.left(string0, (int) char0);
      assertNull(string1);
  }

  @Test
  public void test211()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string0 = locale0.getCountry();
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", string0);
      assertNotNull(string0);
      
      int int0 = 0;
      String string1 = StringUtils.left(string0, int0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test212()  throws Throwable  {
      CharSequence charSequence0 = null;
      String string0 = "P}7$:2gV@(n}1{<iYB";
      int int0 = StringUtils.lastIndexOf((CharSequence) string0, charSequence0);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substring(string0, int0, int0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test213()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      String string0 = "P}7$:2gV@(n}1{<iYB";
      String string1 = StringUtils.substring(string0, int0, int0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test214()  throws Throwable  {
      int int0 = 595;
      String string0 = null;
      String string1 = StringUtils.substring(string0, int0, int0);
      assertNull(string1);
  }

  @Test
  public void test215()  throws Throwable  {
      String string0 = "L";
      int int0 = 3618;
      String string1 = StringUtils.substring(string0, int0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test216()  throws Throwable  {
      String string0 = "/5rgcv#";
      int int0 = 0;
      String string1 = StringUtils.rightPad(string0, int0, string0);
      assertEquals("/5rgcv#", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      int int1 = (-1133);
      String string2 = StringUtils.substring(string1, int1);
      assertEquals("/5rgcv#", string2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(string2);
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string2, string0);
      assertSame(string2, string1);
  }

  @Test
  public void test217()  throws Throwable  {
      String string0 = "$[S%W5A[";
      String string1 = StringUtils.removeEnd(string0, string0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      int int0 = 789;
      int int1 = StringUtils.indexOf((CharSequence) string1, int0, int0);
      assertEquals((-1), int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = null;
      String string3 = StringUtils.substring(string2, int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertNull(string3);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test218()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string0 = locale0.getDisplayVariant();
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = locale0.getLanguage();
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) string1;
      assertEquals(2, charSequenceArray0[0].length());
      assertEquals("de", charSequenceArray0[0].toString());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertNotNull(charSequenceArray0[0]);
      
      int int0 = StringUtils.lastIndexOfAny((CharSequence) string0, charSequenceArray0);
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals((-1), int0);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
  }

  @Test
  public void test219()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string0 = locale0.getDisplayVariant();
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) string0;
      assertEquals(0, charSequenceArray0[0].length());
      assertEquals("", charSequenceArray0[0].toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertNotNull(charSequenceArray0[0]);
      
      int int0 = StringUtils.lastIndexOfAny((CharSequence) string0, charSequenceArray0);
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals(0, int0);
  }

  @Test
  public void test220()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0);
      assertNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny((CharSequence) string0, (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
  }

  @Test
  public void test221()  throws Throwable  {
      String string0 = "y34Tf;FriLg^o\\";
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[2] = (CharSequence) string0;
      assertEquals(15, charSequenceArray0[2].length());
      assertEquals("y34Tf;FriLg^o\\", charSequenceArray0[2].toString());
      assertNotNull(charSequenceArray0[2]);
      
      charSequenceArray0[4] = (CharSequence) string0;
      assertEquals("y34Tf;FriLg^o\\", charSequenceArray0[4].toString());
      assertEquals(15, charSequenceArray0[4].length());
      assertNotNull(charSequenceArray0[4]);
      
      int int0 = StringUtils.indexOfAny((CharSequence) string0, charSequenceArray0);
      assertEquals(0, int0);
  }

  @Test
  public void test222()  throws Throwable  {
      String string0 = "y34Tf;FriLg^o\\";
      String string1 = "9SB)pkx[X;LKF2Tk";
      assertNotSame(string1, string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) string1;
      assertEquals("9SB)pkx[X;LKF2Tk", charSequenceArray0[0].toString());
      assertEquals(16, charSequenceArray0[0].length());
      assertNotNull(charSequenceArray0[0]);
      
      int int0 = StringUtils.indexOfAny((CharSequence) string0, charSequenceArray0);
      assertEquals((-1), int0);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
  }

  @Test
  public void test223()  throws Throwable  {
      CharSequence charSequence0 = null;
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      int int0 = StringUtils.indexOfAny(charSequence0, charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test
  public void test224()  throws Throwable  {
      String string0 = "Search and Replace array lengths don't match: ";
      char char0 = 'c';
      String string1 = StringUtils.remove(string0, char0);
      assertEquals("Searh and Replae array lengths don't math: ", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) string0, string1);
      assertFalse(boolean0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test225()  throws Throwable  {
      String string0 = ")#BAiWL)(;>/B4@D^r&Vt{XMNc d}";
      String string1 = null;
      boolean boolean0 = StringUtils.containsNone((CharSequence) string1, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test226()  throws Throwable  {
      String string0 = " !Oe\\";
      char[] charArray0 = new char[5];
      char char0 = 'e';
      charArray0[3] = char0;
      boolean boolean0 = StringUtils.containsNone((CharSequence) string0, charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'e', '\u0000'}, charArray0);
  }

  @Test
  public void test227()  throws Throwable  {
      String string0 = " !Oe\\";
      char[] charArray0 = new char[5];
      boolean boolean0 = StringUtils.containsNone((CharSequence) string0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test228()  throws Throwable  {
      String string0 = null;
      char[] charArray0 = new char[1];
      boolean boolean0 = StringUtils.containsNone((CharSequence) string0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test
  public void test229()  throws Throwable  {
      String string0 = "#=Kq!O~'ldtz6ubE]";
      String string1 = null;
      boolean boolean0 = StringUtils.containsOnly((CharSequence) string0, string1);
      assertFalse(boolean0);
  }

  @Test
  public void test230()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNotNull(sQLSyntaxErrorException0);
      
      String string0 = sQLSyntaxErrorException0.getSQLState();
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) string0, string0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertFalse(boolean0);
  }

  @Test
  public void test231()  throws Throwable  {
      String string0 = "iZ?(Bsi-e";
      String string1 = StringUtils.strip(string0, string0);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) string1, string1);
      assertTrue(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test232()  throws Throwable  {
      CharSequence charSequence0 = null;
      char[] charArray0 = new char[5];
      boolean boolean0 = StringUtils.containsOnly(charSequence0, charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test233()  throws Throwable  {
      String string0 = "#=Kq!O~'ldtz6ubE]";
      String string1 = "Cannot get the toString of a null identity";
      assertNotSame(string1, string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) string0, (CharSequence) string1);
      assertEquals(0, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test234()  throws Throwable  {
      String string0 = " !Oe\\";
      String string1 = StringUtils.stripStart(string0, string0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) string0, (CharSequence) string1);
      assertEquals((-1), int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test235()  throws Throwable  {
      String string0 = "#=Kq!O~'ldtz6ubE]";
      int int0 = StringUtils.indexOfAnyBut((CharSequence) string0, (CharSequence) string0);
      assertEquals((-1), int0);
  }

  @Test
  public void test236()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      String string0 = byteOrder0.toString();
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("BIG_ENDIAN", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      char char0 = 'B';
      charArray0[3] = char0;
      boolean boolean0 = StringUtils.containsOnly((CharSequence) string0, charArray0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'B'}, charArray0);
  }

  @Test
  public void test237()  throws Throwable  {
      String string0 = "t:#*Z$^In\"FNtky";
      boolean boolean0 = StringUtils.containsOnly((CharSequence) string0, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test238()  throws Throwable  {
      String string0 = "";
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Set<Object> set0 = hashMap0.keySet();
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertNotNull(set0);
      
      String string1 = hashMap0.put((Object) set0, string0);
      assertEquals(1, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals("{[(this Collection)]=}", hashMap0.toString());
      assertEquals(1, hashMap0.size());
      assertNull(string1);
      
      char[] charArray0 = new char[6];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) string1, charArray0);
      assertEquals(1, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals("{[(this Collection)]=}", hashMap0.toString());
      assertEquals(1, hashMap0.size());
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test239()  throws Throwable  {
      String string0 = "\\s+";
      char[] charArray0 = new char[10];
      char char0 = '\\';
      charArray0[0] = char0;
      boolean boolean0 = StringUtils.containsAny((CharSequence) string0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\\', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test240()  throws Throwable  {
      String string0 = "Array element ";
      char[] charArray0 = new char[10];
      boolean boolean0 = StringUtils.containsAny((CharSequence) string0, charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test241()  throws Throwable  {
      String string0 = ">lHUJa>Mp";
      SQLDataException sQLDataException0 = new SQLDataException(string0);
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals(">lHUJa>Mp", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: >lHUJa>Mp", sQLDataException0.toString());
      assertNotNull(sQLDataException0);
      
      String string1 = sQLDataException0.getSQLState();
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals(">lHUJa>Mp", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: >lHUJa>Mp", sQLDataException0.toString());
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) string1, (CharSequence) string0);
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals(">lHUJa>Mp", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: >lHUJa>Mp", sQLDataException0.toString());
      assertFalse(boolean0);
  }

  @Test
  public void test242()  throws Throwable  {
      String string0 = null;
      int int0 = StringUtils.indexOfAny((CharSequence) string0, string0);
      assertEquals((-1), int0);
  }

  @Test
  public void test243()  throws Throwable  {
      String string0 = ":77x4&)t";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(string0);
      assertEquals(":77x4&)t", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: :77x4&)t", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      String string1 = sQLIntegrityConstraintViolationException0.toString();
      assertEquals(":77x4&)t", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: :77x4&)t", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: :77x4&)t", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) string1, string0);
      assertEquals(":77x4&)t", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: :77x4&)t", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(14, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test244()  throws Throwable  {
      String string0 = "";
      String string1 = "null comparator";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.strip(string1, string0);
      assertEquals("null comparator", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) string2, string2);
      assertEquals(0, int0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
  }

  @Test
  public void test245()  throws Throwable  {
      String string0 = " vs ";
      String string1 = "NFD";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.stripEnd(string1, string0);
      assertEquals("NFD", string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotNull(string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      
      char[] charArray0 = new char[1];
      int int0 = StringUtils.indexOfAny((CharSequence) string2, charArray0);
      assertEquals((-1), int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
  }

  @Test
  public void test246()  throws Throwable  {
      CharSequence charSequence0 = null;
      char[] charArray0 = new char[3];
      int int0 = StringUtils.indexOfAny(charSequence0, charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test247()  throws Throwable  {
      String string0 = "Minimum abbreviation width is 4>0?uf";
      int[] intArray0 = new int[8];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(string0, intArray0);
      assertEquals("Minimum abbreviation width is 4>0?uf", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: Minimum abbreviation width is 4>0?uf", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      String string1 = batchUpdateException0.toString();
      assertEquals("Minimum abbreviation width is 4>0?uf", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: Minimum abbreviation width is 4>0?uf", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: Minimum abbreviation width is 4>0?uf", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) string1);
      assertEquals("Minimum abbreviation width is 4>0?uf", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: Minimum abbreviation width is 4>0?uf", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertTrue(boolean0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test248()  throws Throwable  {
      String string0 = "...";
      int int0 = (-305);
      String string1 = StringUtils.replace(string0, string0, string0, int0);
      assertEquals("...", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = StringUtils.substringAfterLast(string0, string1);
      assertEquals("", string2);
      assertTrue(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) string2);
      assertFalse(boolean0);
      assertTrue(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
  }

  @Test
  public void test249()  throws Throwable  {
      String string0 = "L";
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test250()  throws Throwable  {
      String string0 = "Z!_\"Z@4mmgTU:8*\")";
      String string1 = "-3Po]Iqj";
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) string0, (CharSequence) string1);
      assertFalse(boolean0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test251()  throws Throwable  {
      String string0 = "Array and element cannot both be null";
      int int0 = 1092;
      String string1 = StringUtils.abbreviate(string0, int0);
      assertEquals("Array and element cannot both be null", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) string1, (CharSequence) string1);
      assertTrue(boolean0);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test252()  throws Throwable  {
      String string0 = "B\"cnOZ?-LPQ&+8td\",H#=Kq!O~'ldtz6ubE]";
      String string1 = "W^";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.capitalize(string1);
      assertEquals("W^", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) string0, (CharSequence) string2);
      assertFalse(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
  }

  @Test
  public void test253()  throws Throwable  {
      String string0 = "oZ~De$DVqIzh*kb2";
      String string1 = StringUtils.trim(string0);
      assertEquals("oZ~De$DVqIzh*kb2", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      String string2 = StringUtils.substringBetween(string0, string0, string1);
      assertNull(string2);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) string0, (CharSequence) string2);
      assertFalse(boolean0);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test254()  throws Throwable  {
      String string0 = "B\"cnOZ?-LPQ&+8td\",H#=Kq!O~'ldtz6ubE]";
      String string1 = StringUtils.capitalize(string0);
      assertEquals("B\"cnOZ?-LPQ&+8td\",H#=Kq!O~'ldtz6ubE]", string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) string0, (CharSequence) string1);
      assertTrue(boolean0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test255()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNotNull(sQLSyntaxErrorException0);
      
      String string0 = sQLSyntaxErrorException0.getSQLState();
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) string0, (CharSequence) string0);
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertFalse(boolean0);
  }

  @Test
  public void test256()  throws Throwable  {
      CharSequence charSequence0 = null;
      String string0 = "{}";
      String string1 = StringUtils.chomp(string0, string0);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      int int0 = StringUtils.countMatches(charSequence0, charSequence0);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) string1, int0);
      assertFalse(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test257()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = "I4/4}'Ak4Z<$ji)@(,";
      String string1 = StringUtils.chomp(string0);
      assertEquals("I4/4}'Ak4Z<$ji)@(,", string1);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) string1, int0);
      assertFalse(boolean0);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test
  public void test258()  throws Throwable  {
      String string0 = "y34Tf;FriLg^o\\";
      String string1 = "9SB)pkx[X;LKF2Tk";
      assertNotSame(string1, string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string1, (CharSequence) string0);
      assertEquals((-1), int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test259()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string0 = locale0.getDisplayCountry(locale0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = (-1);
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string0, (CharSequence) string0, int0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test260()  throws Throwable  {
      String string0 = "Minimum abbreviation width is 4>0?uf";
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string0, (CharSequence) string0);
      assertEquals(0, int0);
  }

  @Test
  public void test261()  throws Throwable  {
      String string0 = "";
      int int0 = 2236;
      String string1 = StringUtils.trimToNull(string0);
      assertNull(string1);
      
      String string2 = "Cb*Y8\"sYYq@2>}z:=";
      assertNotSame(string2, string0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string2, (CharSequence) string1, int0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
  }

  @Test
  public void test262()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.capitalize(string0);
      assertNull(string1);
      
      int int0 = (-1926);
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string1, (CharSequence) string1, int0);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test263()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.trim(string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      String string2 = sQLFeatureNotSupportedException0.getSQLState();
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string1, (CharSequence) string2);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals((-1), int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test264()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.trim(string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string1, (CharSequence) string1);
      assertEquals(0, int0);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test
  public void test265()  throws Throwable  {
      String string0 = "oZ~De$DVqIzh*kb2";
      String string1 = StringUtils.substringBetween(string0, string0, string0);
      assertNull(string1);
      
      int int0 = (-542);
      int int1 = StringUtils.lastOrdinalIndexOf((CharSequence) string1, (CharSequence) string0, int0);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) string1, (CharSequence) string1, int1);
      assertEquals((-1), int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
  }

  @Test
  public void test266()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNotNull(sQLSyntaxErrorException0);
      
      String string0 = sQLSyntaxErrorException0.getSQLState();
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) string0, (CharSequence) string0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals((-1), int0);
  }

  @Test
  public void test267()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      String string0 = sQLFeatureNotSupportedException0.getLocalizedMessage();
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(string0);
      
      char char0 = 'C';
      int int0 = StringUtils.lastIndexOf((CharSequence) string0, (int) char0, (int) char0);
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals((-1), int0);
  }

  @Test
  public void test268()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertNotNull(locale0);
      
      String string0 = locale0.getCountry();
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DE", string0);
      assertNotNull(string0);
      
      int int0 = 0;
      int int1 = StringUtils.lastIndexOf((CharSequence) string0, int0, int0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test269()  throws Throwable  {
      String string0 = "$[S%W5A[";
      String string1 = StringUtils.removeEnd(string0, string0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      int int0 = 789;
      int int1 = StringUtils.lastIndexOf((CharSequence) string1, int0);
      assertEquals((-1), int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test270()  throws Throwable  {
      String string0 = "Array and element cannot both be null";
      Locale locale0 = Locale.CANADA;
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string1 = StringUtils.lowerCase(string0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("array and element cannot both be null", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = "a=w9!Uy%ZiHs";
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) string1, (CharSequence) string2);
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals((-1), int0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
  }

  @Test
  public void test271()  throws Throwable  {
      String string0 = " !Oe\\";
      char char0 = 'u';
      String string1 = StringUtils.stripStart(string0, string0);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) string1, (CharSequence) string0, (int) char0);
      assertEquals((-1), int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test272()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence charSequence0 = null;
      int int0 = 0;
      int int1 = StringUtils.indexOfIgnoreCase(charSequence0, (CharSequence) string0, int0);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test273()  throws Throwable  {
      int int0 = 2658;
      CharBuffer charBuffer0 = CharBuffer.allocate(int0);
      assertEquals(2658, charBuffer0.capacity());
      assertEquals(false, charBuffer0.isDirect());
      assertEquals(true, charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2658, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(false, charBuffer0.isReadOnly());
      assertEquals(2658, charBuffer0.length());
      assertEquals(true, charBuffer0.hasRemaining());
      assertEquals(2658, charBuffer0.limit());
      assertNotNull(charBuffer0);
      
      int int1 = StringUtils.ordinalIndexOf((CharSequence) charBuffer0, (CharSequence) charBuffer0, int0);
      assertEquals(2658, charBuffer0.capacity());
      assertEquals(false, charBuffer0.isDirect());
      assertEquals(true, charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2658, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(false, charBuffer0.isReadOnly());
      assertEquals(2658, charBuffer0.length());
      assertEquals(true, charBuffer0.hasRemaining());
      assertEquals(2658, charBuffer0.limit());
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test274()  throws Throwable  {
      char[] charArray0 = new char[10];
      char char0 = '%';
      charArray0[1] = char0;
      String string0 = "The Array must not be null";
      String string1 = StringUtils.chop(string0);
      assertEquals("The Array must not be nul", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      charArray0[4] = charArray0[1];
      int int0 = StringUtils.lastOrdinalIndexOf((CharSequence) string1, (CharSequence) string1, (int) charArray0[4]);
      assertEquals((-1), int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertArrayEquals(new char[] {'\u0000', '%', '\u0000', '\u0000', '%', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test275()  throws Throwable  {
      String string0 = " vs ";
      String string1 = StringUtils.stripEnd(string0, string0);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      int int0 = 0;
      int int1 = StringUtils.lastOrdinalIndexOf((CharSequence) string1, (CharSequence) string1, int0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test276()  throws Throwable  {
      String string0 = "I4/4}'Ak4Z<$ji)@(,";
      String string1 = StringUtils.chomp(string0);
      assertEquals("I4/4}'Ak4Z<$ji)@(,", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      char char0 = 'o';
      String string2 = null;
      int int0 = StringUtils.lastOrdinalIndexOf((CharSequence) string1, (CharSequence) string2, (int) char0);
      assertEquals((-1), int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test277()  throws Throwable  {
      String string0 = " EXH<6(fm";
      int int0 = (-975);
      String string1 = null;
      int int1 = StringUtils.indexOf((CharSequence) string0, (CharSequence) string1, int0);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test278()  throws Throwable  {
      String string0 = "2Q6Y^@,O#A-62";
      int int0 = 0;
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(int0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      String string1 = StringUtils.join((Iterable<?>) linkedHashSet0, string0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      char char0 = 'q';
      int int1 = StringUtils.indexOf((CharSequence) string1, (CharSequence) string1, (int) char0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, int1);
      assertFalse(string0.equals((Object)string1));
      assertTrue(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(int1 == int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test279()  throws Throwable  {
      String string0 = "Array and element cannot both be null";
      String string1 = StringUtils.capitalize(string0);
      assertEquals("Array and element cannot both be null", string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      int int0 = StringUtils.lastIndexOfAny((CharSequence) string1, charSequenceArray0);
      assertEquals((-1), int0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = null;
      int int1 = StringUtils.indexOf((CharSequence) string2, (CharSequence) string1, int0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertTrue(int0 == int1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test280()  throws Throwable  {
      String string0 = "P}7$:2gV@(n}1{<iYB";
      int int0 = StringUtils.indexOf((CharSequence) string0, (CharSequence) string0);
      assertEquals(0, int0);
  }

  @Test
  public void test281()  throws Throwable  {
      CharSequence charSequence0 = null;
      int int0 = StringUtils.indexOf(charSequence0, charSequence0);
      assertEquals((-1), int0);
  }

  @Test
  public void test282()  throws Throwable  {
      String string0 = "`';Hqh{773l";
      int int0 = 32;
      int int1 = StringUtils.indexOf((CharSequence) string0, int0, int0);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test283()  throws Throwable  {
      int int0 = (-2942);
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      int int1 = StringUtils.indexOf(charSequenceArray0[3], int0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test284()  throws Throwable  {
      String string0 = null;
      String string1 = "Index: ";
      int int0 = StringUtils.length((CharSequence) string0);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) string1, int0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test285()  throws Throwable  {
      String string0 = "5L+59wa'ZV3F'";
      String string1 = null;
      String string2 = StringUtils.chomp(string0, string1);
      assertEquals("5L+59wa'ZV3F'", string2);
      assertNotNull(string2);
      assertSame(string2, string0);
      assertSame(string0, string2);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) string2, (CharSequence) string1);
      assertFalse(boolean0);
      assertSame(string2, string0);
      assertSame(string0, string2);
  }

  @Test
  public void test286()  throws Throwable  {
      String string0 = "5L+59wa'ZV3F'";
      String string1 = StringUtils.chomp(string0, string0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) string1, (CharSequence) string0);
      assertFalse(boolean0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test287()  throws Throwable  {
      String string0 = " EXH<6(fm";
      String string1 = null;
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) string1, (CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test288()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.equals((CharSequence) string0, (CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test
  public void test289()  throws Throwable  {
      String string0 = "Array 9nd elemet cnno both be null";
      String string1 = null;
      boolean boolean0 = StringUtils.equals((CharSequence) string1, (CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test290()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) string0, (CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test
  public void test291()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string0, string0);
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNull(stringArray1);
  }

  @Test
  public void test292()  throws Throwable  {
      String string0 = "Search and Replace array lengths don't match: ";
      String[] stringArray0 = new String[3];
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test
  public void test293()  throws Throwable  {
      String string0 = "5L+59wa'ZV3F'";
      String string1 = null;
      String string2 = StringUtils.chomp(string0, string1);
      assertEquals("5L+59wa'ZV3F'", string2);
      assertNotNull(string2);
      assertSame(string2, string0);
      assertSame(string0, string2);
      
      String string3 = StringUtils.stripEnd(string1, string2);
      assertNull(string3);
      assertSame(string2, string0);
      assertSame(string0, string2);
  }

  @Test
  public void test294()  throws Throwable  {
      String string0 = "B\"cnOZ?-LPQ&+8td\",H#=Kq!O~'ldtz6ubE]";
      String string1 = "W^";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = new String[20];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, string1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test295()  throws Throwable  {
      String string0 = " ";
      String[] stringArray0 = new String[6];
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
  }

  @Test
  public void test296()  throws Throwable  {
      String string0 = "7TQ}Ht?$ans";
      String string1 = null;
      String string2 = StringUtils.stripStart(string1, string0);
      assertNull(string2);
  }

  @Test
  public void test297()  throws Throwable  {
      String string0 = "D";
      String string1 = StringUtils.substringBetween(string0, string0, string0);
      assertNull(string1);
      
      String string2 = StringUtils.stripToEmpty(string1);
      assertEquals("", string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
  }

  @Test
  public void test298()  throws Throwable  {
      String string0 = "I4/4}'Ak4Z<$ji)@(,";
      String string1 = StringUtils.chomp(string0);
      assertEquals("I4/4}'Ak4Z<$ji)@(,", string1);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String string2 = StringUtils.stripToEmpty(string1);
      assertEquals("I4/4}'Ak4Z<$ji)@(,", string2);
      assertNotNull(string2);
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string1, string0);
      assertSame(string1, string2);
  }

  @Test
  public void test299()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.stripToNull(string0);
      assertNull(string1);
  }

  @Test
  public void test300()  throws Throwable  {
      String string0 = "Array element ";
      String string1 = StringUtils.reverse(string0);
      assertEquals(" tnemele yarrA", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.stripToNull(string1);
      assertEquals("tnemele yarrA", string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
  }

  @Test
  public void test301()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.replace(string0, string0, string0);
      assertNull(string1);
      
      String string2 = StringUtils.trimToEmpty(string1);
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test
  public void test302()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.trimToEmpty(string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test
  public void test303()  throws Throwable  {
      String string0 = " has no clone method";
      String string1 = StringUtils.trimToNull(string0);
      assertEquals("has no clone method", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test304()  throws Throwable  {
      String string0 = "A+;";
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test
  public void test305()  throws Throwable  {
      String string0 = " ";
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test306()  throws Throwable  {
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.allocate(int0);
      assertEquals(0, charBuffer0.position());
      assertEquals(false, charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(false, charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(false, charBuffer0.isDirect());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(true, charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      
      CharBuffer charBuffer1 = StringUtils.defaultIfBlank(charBuffer0, charBuffer0);
      assertEquals(true, charBuffer1.hasArray());
      assertEquals("", charBuffer1.toString());
      assertEquals(false, charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.length());
      assertEquals(0, charBuffer1.limit());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(false, charBuffer1.isReadOnly());
      assertEquals(false, charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertEquals(0, charBuffer1.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(false, charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(false, charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(false, charBuffer0.isDirect());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(true, charBuffer0.hasArray());
      assertNotNull(charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertSame(charBuffer0, charBuffer1);
  }

  @Test
  public void test307()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isBlank((CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test
  public void test308()  throws Throwable  {
      String string0 = " !Oe\\";
      char char0 = 'u';
      String string1 = StringUtils.leftPad(string0, (int) char0, char0);
      assertEquals("uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu !Oe\\", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) string1);
      assertTrue(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test309()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNotNull(sQLClientInfoException0);
      
      String string0 = sQLClientInfoException0.getMessage();
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) string0);
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertFalse(boolean0);
  }

  @Test
  public void test310()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      String string0 = sQLFeatureNotSupportedException0.getLocalizedMessage();
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(string0);
      
      String string1 = StringUtils.substringBetween(string0, string0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(string1);
  }

  @Test
  public void test311()  throws Throwable  {
      String string0 = null;
      int int0 = 0;
      String string1 = StringUtils.leftPad(string0, int0);
      assertNull(string1);
  }

  @Test
  public void test312()  throws Throwable  {
      String string0 = "";
      Locale locale0 = Locale.CANADA;
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      String string1 = StringUtils.lowerCase(string0, locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) string1, (CharSequence) string1);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals(0, int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test313()  throws Throwable  {
      String string0 = "L";
      int int0 = 1;
      String string1 = StringUtils.center(string0, int0);
      assertEquals("L", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test314()  throws Throwable  {
      String string0 = "Array element ";
      String string1 = StringUtils.reverse(string0);
      assertEquals(" tnemele yarrA", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.strip(string1);
      assertEquals("tnemele yarrA", string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotNull(string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
  }

  @Test
  public void test315()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string0 = locale0.getDisplayCountry(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = 10;
      int int1 = StringUtils.ordinalIndexOf((CharSequence) string0, (CharSequence) string0, int0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test316()  throws Throwable  {
      String string0 = ">0?uf";
      String[] stringArray0 = StringUtils.splitByCharacterType(string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test317()  throws Throwable  {
      String string0 = ">0?uf";
      String string1 = StringUtils.defaultString(string0);
      assertEquals(">0?uf", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      int int0 = (-1926);
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string1, string1, int0);
      assertNotNull(stringArray0);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test318()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
  }

  @Test
  public void test319()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertNotNull(locale0);
      
      String string0 = locale0.getCountry();
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DE", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string0, string0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertNotNull(stringArray0);
  }

  @Test
  public void test320()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[1];
      String string1 = StringUtils.replaceEach(string0, stringArray0, stringArray0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test
  public void test321()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      String string0 = sQLFeatureNotSupportedException0.getLocalizedMessage();
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(string0);
      
      char char0 = 'C';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, char0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(stringArray0);
  }

  @Test
  public void test322()  throws Throwable  {
      String string0 = "L";
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) string0, charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test323()  throws Throwable  {
      String string0 = "L";
      int int0 = 1;
      String string1 = StringUtils.substringAfter(string0, string0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string1, string0, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(stringArray0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test324()  throws Throwable  {
      String string0 = "#=Kq!O~'ldtz6ubE]";
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) string0, charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test325()  throws Throwable  {
      String string0 = "P}7$:2gV@(n}1{<iYB";
      String string1 = StringUtils.removeEndIgnoreCase(string0, string0);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(stringArray0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }
}
