/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:41:10 GMT 2014
 */

package org.apache.commons.lang3;

import static org.junit.Assert.*;
import org.junit.Test;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.nio.CharBuffer;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.Stack;
import java.util.TreeSet;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;


public class StringUtilsEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      String string0 = null;
      String string1 = StringUtils.toString(byteArray0, string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string1);
  }

  @Test
  public void test001()  throws Throwable  {
      String string0 = "v/MbL~%qzEs)X";
      byte[] byteArray0 = new byte[5];
      try {
        String string1 = StringUtils.toString(byteArray0, string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // v/MbL~%qzEs)X
         //
      }
  }

  @Test
  public void test002()  throws Throwable  {
      String string0 = "'&cAD_*fqQ5vy-$g";
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[2] = (CharSequence) string0;
      assertEquals(16, charSequenceArray0[2].length());
      assertEquals("'&cAD_*fqQ5vy-$g", charSequenceArray0[2].toString());
      assertNotNull(charSequenceArray0[2]);
      
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) string0, charSequenceArray0);
      assertTrue(boolean0);
  }

  @Test
  public void test003()  throws Throwable  {
      String string0 = "2^";
      CharSequence[] charSequenceArray0 = null;
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) string0, charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test004()  throws Throwable  {
      CharSequence charSequence0 = null;
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      boolean boolean0 = StringUtils.endsWithAny(charSequence0, charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test005()  throws Throwable  {
      String string0 = "?";
      Object[] objectArray0 = new Object[6];
      String string1 = StringUtils.join(objectArray0, string0);
      assertEquals("?????", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) string0, (CharSequence) string1);
      assertFalse(boolean0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test006()  throws Throwable  {
      String string0 = "or";
      String string1 = StringUtils.deleteWhitespace(string0);
      assertEquals("or", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      URI uRI0 = new URI(string0, string1, string0);
      assertEquals("or:or#or", uRI0.toString());
      assertNull(uRI0.getHost());
      assertEquals("or", uRI0.getScheme());
      assertEquals(true, uRI0.isOpaque());
      assertEquals("or", uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertEquals(-1, uRI0.getPort());
      assertEquals(true, uRI0.isAbsolute());
      assertNull(uRI0.getRawPath());
      assertNotNull(uRI0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      String string2 = uRI0.getQuery();
      assertEquals("or:or#or", uRI0.toString());
      assertNull(uRI0.getHost());
      assertEquals("or", uRI0.getScheme());
      assertEquals(true, uRI0.isOpaque());
      assertEquals("or", uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertEquals(-1, uRI0.getPort());
      assertEquals(true, uRI0.isAbsolute());
      assertNull(uRI0.getRawPath());
      assertNull(string2);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) string2, (CharSequence) string0);
      assertFalse(boolean0);
      assertEquals("or:or#or", uRI0.toString());
      assertNull(uRI0.getHost());
      assertEquals("or", uRI0.getScheme());
      assertEquals(true, uRI0.isOpaque());
      assertEquals("or", uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertEquals(-1, uRI0.getPort());
      assertEquals(true, uRI0.isAbsolute());
      assertNull(uRI0.getRawPath());
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test007()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = linkedList0.toString();
      assertEquals("[]", string0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) string0;
      assertEquals(2, charSequenceArray0[0].length());
      assertEquals("[]", charSequenceArray0[0].toString());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(charSequenceArray0[0]);
      
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) string0, charSequenceArray0);
      assertTrue(boolean0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
  }

  @Test
  public void test008()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = linkedList0.toString();
      assertEquals("[]", string0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) string0, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
  }

  @Test
  public void test009()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String string0 = "\\p{InCombiningDiacriticalMarks}+";
      String string1 = StringUtils.join(objectArray0, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[10];
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) string1, charSequenceArray0);
      assertFalse(boolean0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test010()  throws Throwable  {
      String string0 = "...";
      String string1 = "null/empty items";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.stripAccents(string1);
      assertEquals("null/empty items", string2);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      
      boolean boolean0 = StringUtils.startsWith((CharSequence) string0, (CharSequence) string2);
      assertFalse(boolean0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
  }

  @Test
  public void test011()  throws Throwable  {
      String string0 = "x&`Vx&B8Ju8I/FP";
      CharSequence charSequence0 = null;
      boolean boolean0 = StringUtils.startsWithIgnoreCase(charSequence0, (CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test012()  throws Throwable  {
      String string0 = "Cannot get the toString of a null identity";
      int int0 = 1367;
      String string1 = StringUtils.rightPad(string0, int0, string0);
      assertEquals("Cannot get the toString of a null identityCannot get the toString of a null identityCannot get the toString of a null identityCannot get the toString of a null identityCannot get the toString of a null identityCannot get the toString of a null identityCannot get the toString of a null identityCannot get the toString of a null identityCannot get the toString of a null identityCannot get the toString of a null identityCannot get the toString of a null identityCannot get the toString of a null identityCannot get the toString of a null identityCannot get the toString of a null identityCannot get the toString of a null identityCannot get the toString of a null identityCannot get the toString of a null identityCannot get the toString of a null identityCannot get the toString of a null identityCannot get the toString of a null identityCannot get the toString of a null identityCannot get the toString of a null identityCannot get the toString of a null identityCannot get the toString of a null identityCannot get the toString of a null identityCannot get the toString of a null identityCannot get the toString of a null identityCannot get the toString of a null identityCannot get the toString of a null identityCannot get the toString of a null identityCannot get the toString of a null identityCannot get the toString of a null identityCannot get the toString", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = null;
      String string3 = StringUtils.strip(string2);
      assertNull(string3);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase((CharSequence) string1, (CharSequence) string3);
      assertFalse(boolean0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test013()  throws Throwable  {
      int int0 = 0;
      String string0 = "VwW";
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) string0, (CharSequence) string0, int0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test014()  throws Throwable  {
      String string0 = "+(yc_Z)%;bI@";
      int int0 = Integer.MAX_VALUE;
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) string0, (CharSequence) string0, int0);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test015()  throws Throwable  {
      String string0 = "f.=xtj`";
      String string1 = StringUtils.trimToEmpty(string0);
      assertEquals("f.=xtj`", string1);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      int int0 = 489;
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) string1, (CharSequence) string1, int0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = ";?OScW9b= e!-{\\E";
      String string1 = StringUtils.replaceChars(string0, string0, string0);
      assertEquals(";?OScW9b= e!-{\\E", string1);
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = "na0$$48/";
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) string1, string2);
      assertEquals((-1), int0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      
      // Undeclared exception!
      try {
        int int1 = StringUtils.getLevenshteinDistance((CharSequence) string1, (CharSequence) string2, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
      }
  }

  @Test
  public void test017()  throws Throwable  {
      String string0 = "Z_AkGA;1xZO*p2E";
      int int0 = 7;
      String string1 = null;
      String string2 = StringUtils.trimToNull(string1);
      assertNull(string2);
      
      // Undeclared exception!
      try {
        int int1 = StringUtils.getLevenshteinDistance((CharSequence) string2, (CharSequence) string0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
      }
  }

  @Test
  public void test018()  throws Throwable  {
      char char0 = '6';
      String string0 = "/n5L}REYmK{o~eX55n,";
      String string1 = StringUtils.leftPad(string0, (int) char0);
      assertEquals("                                   /n5L}REYmK{o~eX55n,", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) string1, (CharSequence) string0);
      assertEquals(35, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test019()  throws Throwable  {
      String string0 = "+(yc_Z)%;bI@";
      String string1 = StringUtils.difference(string0, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) string0, (CharSequence) string1);
      assertEquals(12, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test020()  throws Throwable  {
      String string0 = "ype ";
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string0, (CharSequence) string0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.replace(string0, string0, string0, int0);
      assertEquals("ype ", string1);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      Iterator<String> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(iterator0);
      
      char char0 = '%';
      String string2 = StringUtils.join(iterator0, char0);
      assertEquals("", string2);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) string2, (CharSequence) string1);
      assertEquals(4, int1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
  }

  @Test
  public void test021()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = "ysjg-%Xh.xlJ";
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      // Undeclared exception!
      try {
        int int0 = StringUtils.getLevenshteinDistance((CharSequence) stringArray0[4], (CharSequence) stringArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
      }
  }

  @Test
  public void test022()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.trimToNull(string0);
      assertNull(string1);
      
      // Undeclared exception!
      try {
        int int0 = StringUtils.getLevenshteinDistance((CharSequence) string1, (CharSequence) string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
      }
  }

  @Test
  public void test023()  throws Throwable  {
      String string0 = "P";
      String[] stringArray0 = new String[3];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("P", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
  }

  @Test
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test
  public void test025()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = StringUtils.split(string0);
      assertNull(stringArray0);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test
  public void test026()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = "V:Rd:!\\EFYJ;+!=eN=4[m{";
      String string1 = "\\p{InCombiningDiacriticalMarks}+";
      assertNotSame(string1, string0);
      
      stringArray0[0] = string1;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = stringArray0[0];
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = stringArray0[0];
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = stringArray0[1];
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string1;
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = string0;
      assertNotNull(stringArray0[5]);
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
  }

  @Test
  public void test027()  throws Throwable  {
      String string0 = "MG$+}MGD-^&Y]?$";
      String string1 = StringUtils.removeEndIgnoreCase(string0, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) string1;
      assertEquals(0, charSequenceArray0[0].length());
      assertEquals("", charSequenceArray0[0].toString());
      assertNotNull(charSequenceArray0[0]);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
  }

  @Test
  public void test028()  throws Throwable  {
      String string0 = "64I!>^(+_q%<RXd64I!>^(+_q%<RXd";
      int int0 = 4706;
      String string1 = StringUtils.repeat(string0, string0, int0);
      String[] stringArray0 = StringUtils.split(string1);
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
  }

  @Test
  public void test029()  throws Throwable  {
      String string0 = "...";
      String string1 = "";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.difference(string0, string1);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
  }

  @Test
  public void test030()  throws Throwable  {
      String string0 = "MG$+}MGD-^&Y]?$";
      String string1 = StringUtils.removeEndIgnoreCase(string0, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = StringUtils.substringBefore(string0, string0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) string1;
      assertEquals(0, charSequenceArray0[0].length());
      assertEquals("", charSequenceArray0[0].toString());
      assertNotNull(charSequenceArray0[0]);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0[0], (CharSequence) string2);
      assertEquals((-1), int0);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
  }

  @Test
  public void test031()  throws Throwable  {
      CharSequence charSequence0 = null;
      String string0 = "e0XZS(S";
      int int0 = StringUtils.indexOfDifference((CharSequence) string0, charSequence0);
      assertEquals(0, int0);
  }

  @Test
  public void test032()  throws Throwable  {
      String string0 = "null/empty items";
      String string1 = null;
      int int0 = StringUtils.indexOfDifference((CharSequence) string1, (CharSequence) string0);
      assertEquals(0, int0);
  }

  @Test
  public void test033()  throws Throwable  {
      String string0 = "'ZP, !'";
      char char0 = 'l';
      String string1 = StringUtils.repeat(char0, (int) char0);
      assertEquals("llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.difference(string1, string0);
      assertEquals("'ZP, !'", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
  }

  @Test
  public void test034()  throws Throwable  {
      String string0 = " b5^G$9BS_~eK6-TvVK";
      String string1 = null;
      String string2 = StringUtils.difference(string0, string1);
      assertEquals(" b5^G$9BS_~eK6-TvVK", string2);
      assertNotNull(string2);
      assertSame(string0, string2);
      assertSame(string2, string0);
  }

  @Test
  public void test035()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.difference(string0, string0);
      assertNull(string1);
  }

  @Test
  public void test036()  throws Throwable  {
      String string0 = "java.text.Normalizer";
      char char0 = '\'';
      Throwable throwable0 = null;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(string0, string0, throwable0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: java.text.Normalizer", sQLTimeoutException0.toString());
      assertEquals("java.text.Normalizer", sQLTimeoutException0.getMessage());
      assertEquals("java.text.Normalizer", sQLTimeoutException0.getSQLState());
      assertNotNull(sQLTimeoutException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(string0, (Throwable) sQLTimeoutException0);
      assertEquals("java.sql.SQLTransientConnectionException: java.text.Normalizer", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.text.Normalizer", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: java.text.Normalizer", sQLTimeoutException0.toString());
      assertEquals("java.text.Normalizer", sQLTimeoutException0.getMessage());
      assertEquals("java.text.Normalizer", sQLTimeoutException0.getSQLState());
      assertNotNull(sQLTransientConnectionException0);
      
      String string1 = sQLTransientConnectionException0.toString();
      assertEquals("java.sql.SQLTransientConnectionException: java.text.Normalizer", string1);
      assertEquals("java.sql.SQLTransientConnectionException: java.text.Normalizer", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.text.Normalizer", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: java.text.Normalizer", sQLTimeoutException0.toString());
      assertEquals("java.text.Normalizer", sQLTimeoutException0.getMessage());
      assertEquals("java.text.Normalizer", sQLTimeoutException0.getSQLState());
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.abbreviateMiddle(string1, string0, (int) char0);
      assertEquals("java.sql.Sjava.text.Normalizerormalizer", string2);
      assertEquals("java.sql.SQLTransientConnectionException: java.text.Normalizer", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.text.Normalizer", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: java.text.Normalizer", sQLTimeoutException0.toString());
      assertEquals("java.text.Normalizer", sQLTimeoutException0.getMessage());
      assertEquals("java.text.Normalizer", sQLTimeoutException0.getSQLState());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
  }

  @Test
  public void test037()  throws Throwable  {
      String string0 = "org.apache.comuons.lang3.CharUtils";
      int int0 = 0;
      char char0 = '1';
      String string1 = StringUtils.rightPad(string0, int0, char0);
      assertEquals("org.apache.comuons.lang3.CharUtils", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      String string2 = StringUtils.abbreviateMiddle(string1, string1, (int) char0);
      assertEquals("org.apache.comuons.lang3.CharUtils", string2);
      assertNotNull(string2);
      assertSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string0, string2);
      assertSame(string0, string1);
  }

  @Test
  public void test038()  throws Throwable  {
      String string0 = "dUp6x!F(=<}7Mm]P*";
      String string1 = StringUtils.substringBetween(string0, string0);
      assertNull(string1);
      
      int int0 = 64;
      String string2 = StringUtils.abbreviateMiddle(string0, string1, int0);
      assertEquals("dUp6x!F(=<}7Mm]P*", string2);
      assertNotNull(string2);
      assertSame(string0, string2);
      assertSame(string2, string0);
  }

  @Test
  public void test039()  throws Throwable  {
      String string0 = "";
      int int0 = 1394;
      String string1 = StringUtils.leftPad(string0, int0, string0);
      assertEqualsstring1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      char char0 = '1';
      String string2 = StringUtils.abbreviateMiddle(string1, string1, (int) char0);
      assertEqualsstring2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
  }

  @Test
  public void test040()  throws Throwable  {
      String string0 = null;
      int int0 = 0;
      String string1 = StringUtils.abbreviateMiddle(string0, string0, int0);
      assertNull(string1);
  }

  @Test
  public void test041()  throws Throwable  {
      String string0 = "E&ceptio cloning Cloneable type {}{}";
      int int0 = 31;
      String string1 = StringUtils.abbreviate(string0, int0, int0);
      assertEquals("... cloning Cloneable type {}{}", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test042()  throws Throwable  {
      String string0 = "x&`Vx&B8Ju8I/FP";
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) string0, (CharSequence) string0);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try {
        String string1 = StringUtils.abbreviate(string0, (int) charArray0[7], int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
      }
  }

  @Test
  public void test043()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.strip(string0);
      assertNull(string1);
      
      String string2 = StringUtils.reverse(string1);
      assertNull(string2);
  }

  @Test
  public void test044()  throws Throwable  {
      CharBuffer charBuffer0 = null;
      CharBuffer charBuffer1 = StringUtils.defaultIfEmpty(charBuffer0, charBuffer0);
      assertNull(charBuffer1);
  }

  @Test
  public void test045()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      String string0 = locale0.getLanguage();
      assertEquals("zh", string0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(string0);
      
      String string1 = null;
      String string2 = StringUtils.defaultString(string1, string0);
      assertEquals("zh", string2);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(string2);
      assertSame(string0, string2);
      assertSame(string2, string0);
  }

  @Test
  public void test046()  throws Throwable  {
      String string0 = "MG$+}MGD-^&Y]?$";
      String string1 = StringUtils.removeEndIgnoreCase(string0, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.defaultString(string1, string1);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
  }

  @Test
  public void test047()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      String string0 = sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(string0);
      
      String string1 = StringUtils.defaultString(string0);
      assertEquals("", string1);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNotNull(string1);
  }

  @Test
  public void test048()  throws Throwable  {
      String string0 = " 5";
      String string1 = StringUtils.substringAfter(string0, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = StringUtils.defaultString(string1);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
  }

  @Test
  public void test049()  throws Throwable  {
      String string0 = "Cannot get the toString of a null identity";
      String string1 = "\\u000";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.strip(string0, string1);
      assertEquals("Cannot get the toString of a null identity", string2);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) string2);
      assertFalse(boolean0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
  }

  @Test
  public void test050()  throws Throwable  {
      String string0 = "null/empty items";
      Locale locale0 = new Locale(string0, string0);
      assertEquals("null/empty items", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("null/empty items_NULL/EMPTY ITEMS", locale0.toString());
      assertEquals("NULL/EMPTY ITEMS", locale0.getCountry());
      assertNotNull(locale0);
      
      String string1 = locale0.getDisplayScript();
      assertEquals("", string1);
      assertEquals("null/empty items", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("null/empty items_NULL/EMPTY ITEMS", locale0.toString());
      assertEquals("NULL/EMPTY ITEMS", locale0.getCountry());
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) string1);
      assertFalse(boolean0);
      assertEquals("null/empty items", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("null/empty items_NULL/EMPTY ITEMS", locale0.toString());
      assertEquals("NULL/EMPTY ITEMS", locale0.getCountry());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test051()  throws Throwable  {
      String string0 = ">)\"e[$0Qt+Dk'";
      String string1 = StringUtils.reverse(string0);
      assertEquals("'kD+tQ0$[e\")>", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) string1);
      assertFalse(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test052()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertNotNull(sQLDataException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((Throwable) sQLDataException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLDataException", sQLTimeoutException0.toString());
      assertEquals("java.sql.SQLDataException", sQLTimeoutException0.getMessage());
      assertNotNull(sQLTimeoutException0);
      
      String string0 = sQLTimeoutException0.getSQLState();
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLDataException", sQLTimeoutException0.toString());
      assertEquals("java.sql.SQLDataException", sQLTimeoutException0.getMessage());
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) string0);
      assertFalse(boolean0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLDataException", sQLTimeoutException0.toString());
      assertEquals("java.sql.SQLDataException", sQLTimeoutException0.getMessage());
  }

  @Test
  public void test053()  throws Throwable  {
      String string0 = "x: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcP!*cVc";
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test054()  throws Throwable  {
      String string0 = "x: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcP!*cVc";
      int int0 = 0;
      String string1 = StringUtils.mid(string0, int0, int0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) string1);
      assertFalse(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test055()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test056()  throws Throwable  {
      String string0 = " ";
      SQLException sQLException0 = new SQLException();
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertNotNull(sQLException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(string0, string0, (Throwable) sQLException0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(" ", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException:  ", sQLSyntaxErrorException0.toString());
      assertEquals(" ", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertNotNull(sQLSyntaxErrorException0);
      
      String string1 = sQLSyntaxErrorException0.getSQLState();
      assertEquals(" ", string1);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(" ", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException:  ", sQLSyntaxErrorException0.toString());
      assertEquals(" ", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) string1);
      assertTrue(boolean0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(" ", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException:  ", sQLSyntaxErrorException0.toString());
      assertEquals(" ", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test
  public void test057()  throws Throwable  {
      String string0 = "x: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcP!*cVc";
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test058()  throws Throwable  {
      CharSequence charSequence0 = null;
      boolean boolean0 = StringUtils.isWhitespace(charSequence0);
      assertFalse(boolean0);
  }

  @Test
  public void test059()  throws Throwable  {
      String string0 = " in an array of ";
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test060()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string0 = locale0.getCountry();
      assertEquals("", string0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) string0);
      assertTrue(boolean0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
  }

  @Test
  public void test061()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test062()  throws Throwable  {
      String string0 = "2^";
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test063()  throws Throwable  {
      String string0 = "";
      char char0 = '6';
      String string1 = StringUtils.remove(string0, char0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) string1);
      assertFalse(boolean0);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test064()  throws Throwable  {
      String string0 = "x: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcP!*cVc";
      boolean boolean0 = StringUtils.isNumeric((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test065()  throws Throwable  {
      Throwable throwable0 = null;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(throwable0);
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
      
      String string0 = sQLTransientConnectionException0.getSQLState();
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) string0);
      assertFalse(boolean0);
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
  }

  @Test
  public void test066()  throws Throwable  {
      CharSequence charSequence0 = null;
      boolean boolean0 = StringUtils.isAsciiPrintable(charSequence0);
      assertFalse(boolean0);
  }

  @Test
  public void test067()  throws Throwable  {
      String string0 = "\\u000";
      String string1 = StringUtils.replaceOnce(string0, string0, string0);
      assertEquals("\\u000", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) string1);
      assertTrue(boolean0);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test068()  throws Throwable  {
      String string0 = "Cannot get the toString of a null identity";
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test
  public void test069()  throws Throwable  {
      String string0 = "52GC|6u&#|9K4O+";
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test070()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test071()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.removeEnd(string0, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) string1);
      assertTrue(boolean0);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test072()  throws Throwable  {
      String string0 = "V";
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test
  public void test073()  throws Throwable  {
      String string0 = "x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2Wc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2yc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|4Q_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_~2vc|HQ_";
      int int0 = 4096;
      char[] charArray0 = new char[1];
      String string1 = StringUtils.substring(string0, int0, (int) charArray0[0]);
      assertEquals("", string1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) string1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(false, charBuffer0.hasArray());
      assertEquals(false, charBuffer0.hasRemaining());
      assertEquals(false, charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(true, charBuffer0.isReadOnly());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.limit());
      assertNotNull(charBuffer0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) charBuffer0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(false, charBuffer0.hasArray());
      assertEquals(false, charBuffer0.hasRemaining());
      assertEquals(false, charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(true, charBuffer0.isReadOnly());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.limit());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test074()  throws Throwable  {
      String string0 = "x: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcP!*cVc";
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test075()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test076()  throws Throwable  {
      String string0 = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test077()  throws Throwable  {
      CharSequence charSequence0 = null;
      boolean boolean0 = StringUtils.isAlphaSpace(charSequence0);
      assertFalse(boolean0);
  }

  @Test
  public void test078()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String string0 = "\\p{InCombiningDiacriticalMarks}+";
      String string1 = StringUtils.join(objectArray0, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) string1);
      assertTrue(boolean0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test079()  throws Throwable  {
      String string0 = "?";
      String string1 = StringUtils.replaceChars(string0, string0, string0);
      assertEquals("?", string1);
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.isAlpha((CharSequence) string1);
      assertFalse(boolean0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test080()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string0 = locale0.getDisplayCountry();
      assertEquals("", string0);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha((CharSequence) string0);
      assertFalse(boolean0);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
  }

  @Test
  public void test081()  throws Throwable  {
      String string0 = "Q";
      boolean boolean0 = StringUtils.isAlpha((CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test
  public void test082()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAlpha((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test083()  throws Throwable  {
      String string0 = "Z_AkGA;1xZO*p2E";
      int int0 = 7;
      String string1 = StringUtils.abbreviate(string0, int0, int0);
      assertEquals("...1...", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = null;
      String string3 = StringUtils.trim(string2);
      assertNull(string3);
      
      int int1 = StringUtils.countMatches((CharSequence) string1, (CharSequence) string3);
      assertEquals(0, int1);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test084()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.removeEnd(string0, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      int int0 = StringUtils.countMatches((CharSequence) string1, (CharSequence) string1);
      assertEquals(0, int0);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test
  public void test085()  throws Throwable  {
      String string0 = "e0XZS(S";
      String string1 = StringUtils.swapCase(string0);
      assertEquals("E0xzs(s", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test086()  throws Throwable  {
      String string0 = "V:Rd:!\\EFYJ;+!=eN=4[m{";
      String string1 = null;
      String string2 = StringUtils.replaceChars(string0, string0, string1);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      
      String string3 = StringUtils.uncapitalize(string2);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
  }

  @Test
  public void test087()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.uncapitalize(string0);
      assertNull(string1);
  }

  @Test
  public void test088()  throws Throwable  {
      String string0 = "";
      char char0 = '6';
      String string1 = StringUtils.remove(string0, char0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String string2 = StringUtils.capitalize(string1);
      assertEquals("", string2);
      assertNotNull(string2);
      assertSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string2, string1);
      assertSame(string2, string0);
      assertSame(string1, string2);
      assertSame(string1, string0);
  }

  @Test
  public void test089()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string0 = locale0.getLanguage();
      assertEquals("zh", string0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(string0);
      
      String string1 = StringUtils.capitalize(string0);
      assertEquals("Zh", string1);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test090()  throws Throwable  {
      String string0 = "'&cAD_*fqQ5vy-$g";
      int int0 = 0;
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(string0, string0, int0);
      assertEquals("'&cAD_*fqQ5vy-$g", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("'&cAD_*fqQ5vy-$g", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: '&cAD_*fqQ5vy-$g", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      String string1 = sQLNonTransientConnectionException0.getSQLState();
      assertEquals("'&cAD_*fqQ5vy-$g", string1);
      assertEquals("'&cAD_*fqQ5vy-$g", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("'&cAD_*fqQ5vy-$g", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: '&cAD_*fqQ5vy-$g", sQLNonTransientConnectionException0.toString());
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      int int1 = StringUtils.lastIndexOfAny((CharSequence) string1, charSequenceArray0);
      assertEquals((-1), int1);
      assertEquals("'&cAD_*fqQ5vy-$g", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("'&cAD_*fqQ5vy-$g", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: '&cAD_*fqQ5vy-$g", sQLNonTransientConnectionException0.toString());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      String string2 = null;
      String string3 = StringUtils.mid(string2, int1, int1);
      assertEquals("'&cAD_*fqQ5vy-$g", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("'&cAD_*fqQ5vy-$g", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: '&cAD_*fqQ5vy-$g", sQLNonTransientConnectionException0.toString());
      assertNull(string3);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      Locale locale0 = Locale.UK;
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string4 = StringUtils.lowerCase(string3, locale0);
      assertEquals("'&cAD_*fqQ5vy-$g", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("'&cAD_*fqQ5vy-$g", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: '&cAD_*fqQ5vy-$g", sQLNonTransientConnectionException0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertNull(string4);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test091()  throws Throwable  {
      String string0 = "Array and element cannot both be null";
      Stack<Object> stack0 = new Stack<Object>();
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.isEmpty());
      assertEquals(true, stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      String string1 = StringUtils.join((Iterable<?>) stack0, string0);
      assertEquals("", string1);
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.isEmpty());
      assertEquals(true, stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale0);
      
      String string2 = StringUtils.lowerCase(string1, locale0);
      assertEquals("", string2);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.isEmpty());
      assertEquals(true, stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
  }

  @Test
  public void test092()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.lowerCase(string0);
      assertNull(string1);
  }

  @Test
  public void test093()  throws Throwable  {
      String string0 = null;
      Locale locale0 = Locale.GERMANY;
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string1 = StringUtils.upperCase(string0, locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNull(string1);
  }

  @Test
  public void test094()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.upperCase(string0);
      assertNull(string1);
  }

  @Test
  public void test095()  throws Throwable  {
      String string0 = "P}heOM#5";
      String string1 = StringUtils.defaultIfBlank(string0, string0);
      assertEquals("P}heOM#5", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      int int0 = 5;
      String string2 = StringUtils.center(string0, int0, string1);
      assertEquals("P}heOM#5", string2);
      assertNotNull(string2);
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string0, string1);
      assertSame(string0, string2);
  }

  @Test
  public void test096()  throws Throwable  {
      String string0 = ">)\"e[$0Qt+Dk'";
      int int0 = 127;
      String string1 = null;
      String string2 = StringUtils.center(string0, int0, string1);
      assertEquals("                                                         >)\"e[$0Qt+Dk'                                                         ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
  }

  @Test
  public void test097()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.trim(string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      byte byte0 = (byte)0;
      String string2 = StringUtils.center(string1, (int) byte0, string0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertSame(string2, string1);
      assertSame(string2, string0);
      assertSame(string1, string2);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertSame(string0, string2);
  }

  @Test
  public void test098()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = "e0XZS(S";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNotNull(sQLRecoverableException0);
      
      String string1 = sQLRecoverableException0.getSQLState();
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(string1);
      
      String string2 = StringUtils.center(string1, (int) charArray0[0], string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(string2);
  }

  @Test
  public void test099()  throws Throwable  {
      String string0 = ">)\"e[$0Qt+Dk'";
      int int0 = 127;
      String string1 = StringUtils.center(string0, int0, string0);
      assertEquals(">)\"e[$0Qt+Dk'>)\"e[$0Qt+Dk'>)\"e[$0Qt+Dk'>)\"e[$0Qt+Dk'>)\"e[>)\"e[$0Qt+Dk'>)\"e[$0Qt+Dk'>)\"e[$0Qt+Dk'>)\"e[$0Qt+Dk'>)\"e[$0Qt+Dk'>)\"e[", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.center(string1, int0);
      assertEquals(">)\"e[$0Qt+Dk'>)\"e[$0Qt+Dk'>)\"e[$0Qt+Dk'>)\"e[$0Qt+Dk'>)\"e[>)\"e[$0Qt+Dk'>)\"e[$0Qt+Dk'>)\"e[$0Qt+Dk'>)\"e[$0Qt+Dk'>)\"e[$0Qt+Dk'>)\"e[", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
  }

  @Test
  public void test100()  throws Throwable  {
      String string0 = "";
      char char0 = '6';
      String string1 = StringUtils.center(string0, (int) char0, char0);
      assertEquals("666666666666666666666666666666666666666666666666666666", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test101()  throws Throwable  {
      char char0 = 'J';
      String string0 = null;
      String string1 = StringUtils.center(string0, (int) char0);
      assertNull(string1);
  }

  @Test
  public void test102()  throws Throwable  {
      String string0 = null;
      int int0 = StringUtils.length((CharSequence) string0);
      assertEquals(0, int0);
  }

  @Test
  public void test103()  throws Throwable  {
      String string0 = "Q";
      int int0 = StringUtils.length((CharSequence) string0);
      assertEquals(1, int0);
  }

  @Test
  public void test104()  throws Throwable  {
      String string0 = "x: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcP!*cVc";
      int int0 = 0;
      String string1 = StringUtils.mid(string0, int0, int0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.leftPad(string1, int0, string1);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
  }

  @Test
  public void test105()  throws Throwable  {
      String string0 = "N7/V:1zXLu||9f";
      int int0 = 31;
      String string1 = StringUtils.center(string0, int0, string0);
      assertEquals("N7/V:1zN7/V:1zXLu||9fN7/V:1z", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test106()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      String string0 = linkedHashSet0.toString();
      assertEquals("[]", string0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      int int0 = StringUtils.indexOfAny((CharSequence) string0, charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      String string1 = StringUtils.rightPad(string0, int0, string0);
      assertEquals("[]", string1);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test
  public void test107()  throws Throwable  {
      String string0 = "";
      char char0 = '6';
      String string1 = StringUtils.remove(string0, char0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      String string2 = StringUtils.rightPad(string1, (int) char0, string1);
      assertEquals("                                                      ", string2);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
  }

  @Test
  public void test108()  throws Throwable  {
      int int0 = 1451;
      String string0 = null;
      String string1 = StringUtils.rightPad(string0, int0, string0);
      assertNull(string1);
  }

  @Test
  public void test109()  throws Throwable  {
      String string0 = "Exception cloning Cloneable type {B}{}8QnB[+mIu$Exception cloning Cloneable type {B}{}8QnB[+mIu$8QnB[+mIu$";
      int int0 = (-1270);
      int int1 = StringUtils.lastIndexOf((CharSequence) string0, int0, int0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      String string1 = null;
      String string2 = StringUtils.rightPad(string1, int1);
      assertNull(string2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test110()  throws Throwable  {
      String string0 = "{}{}";
      int int0 = StringUtils.indexOfDifference((CharSequence) string0, (CharSequence) string0);
      assertEquals((-1), int0);
      
      String string1 = null;
      String string2 = StringUtils.repeat(string0, string1, int0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
  }

  @Test
  public void test111()  throws Throwable  {
      String string0 = "Q";
      String string1 = StringUtils.chomp(string0);
      assertEquals("Q", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      char char0 = 'T';
      String string2 = StringUtils.repeat(string1, string0, (int) char0);
      assertEquals("QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ", string2);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
  }

  @Test
  public void test112()  throws Throwable  {
      String string0 = "";
      int int0 = 1451;
      String string1 = StringUtils.repeat(string0, int0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test113()  throws Throwable  {
      String string0 = " vs ";
      String string1 = StringUtils.reverse(string0);
      assertEquals(" sv ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      int int0 = StringUtils.countMatches((CharSequence) string0, (CharSequence) string0);
      assertEquals(1, int0);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      
      String string2 = StringUtils.repeat(string1, int0);
      assertEquals(" sv ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
  }

  @Test
  public void test114()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.chop(string0);
      assertNull(string1);
      
      char char0 = '+';
      String string2 = StringUtils.repeat(string1, string1, (int) char0);
      assertNull(string2);
  }

  @Test
  public void test115()  throws Throwable  {
      String string0 = "\"";
      String string1 = StringUtils.upperCase(string0);
      assertEquals("\"", string1);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String string2 = StringUtils.chop(string1);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
  }

  @Test
  public void test116()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.chomp(string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test
  public void test117()  throws Throwable  {
      String string0 = " vs ";
      String string1 = StringUtils.reverse(string0);
      assertEquals(" sv ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      int int0 = StringUtils.countMatches((CharSequence) string0, (CharSequence) string0);
      assertEquals(1, int0);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      
      int int1 = 5;
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.overlay(string1, string1, int1, int0);
      assertEquals("  sv ", string2);
      assertNotNull(string2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
  }

  @Test
  public void test118()  throws Throwable  {
      char char0 = 'S';
      String string0 = "'ZP, '";
      String string1 = StringUtils.overlay(string0, string0, (int) char0, (int) char0);
      assertEquals("'ZP, ''ZP, '", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test119()  throws Throwable  {
      String string0 = ")~C;;<1==B+2J+ '";
      int int0 = 0;
      String string1 = null;
      String string2 = StringUtils.overlay(string0, string1, int0, int0);
      assertEquals(")~C;;<1==B+2J+ '", string2);
      assertNotNull(string2);
      assertTrue(string0.equals((Object)string2));
      assertTrue(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
  }

  @Test
  public void test120()  throws Throwable  {
      String string0 = null;
      int int0 = 0;
      String string1 = StringUtils.overlay(string0, string0, int0, int0);
      assertNull(string1);
  }

  @Test
  public void test121()  throws Throwable  {
      String string0 = "x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2Wc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2yc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|4Q_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_~2vc|HQ_";
      String string1 = null;
      String string2 = StringUtils.normalizeSpace(string0);
      assertEquals("x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2Wc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2yc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|4Q_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_~2vc|HQ_", string2);
      assertNotNull(string2);
      assertTrue(string0.equals((Object)string2));
      assertTrue(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      
      String string3 = StringUtils.replaceChars(string1, string0, string0);
      assertNull(string3);
      assertTrue(string0.equals((Object)string2));
      assertNotSame(string0, string2);
      
      String string4 = StringUtils.replaceChars(string2, string3, string3);
      assertEquals("x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2Wc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2yc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|4Q_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_~2vc|HQ_", string4);
      assertNotNull(string4);
      assertTrue(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string4));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string4, string0);
      assertSame(string4, string2);
      assertSame(string2, string4);
      assertNotSame(string2, string0);
  }

  @Test
  public void test122()  throws Throwable  {
      String string0 = null;
      char char0 = '6';
      String string1 = StringUtils.replaceChars(string0, char0, char0);
      assertNull(string1);
  }

  @Test
  public void test123()  throws Throwable  {
      String string0 = "E&ceptio cloning Cloneable type {}{}";
      char char0 = 'J';
      String string1 = StringUtils.replaceChars(string0, char0, char0);
      assertEquals("E&ceptio cloning Cloneable type {}{}", string1);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test
  public void test124()  throws Throwable  {
      String string0 = "\\u000";
      String string1 = StringUtils.replaceOnce(string0, string0, string0);
      assertEquals("\\u000", string1);
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.chop(string1);
      assertEquals("\\u00", string2);
      assertNotNull(string2);
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      int int0 = StringUtils.indexOfAny((CharSequence) string1, charSequenceArray0);
      assertEquals((-1), int0);
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      
      String string3 = "BMinimum abbreviation width is 4";
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      
      String[] stringArray0 = StringUtils.split(string2, string3, int0);
      assertNotNull(stringArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      
      String string4 = StringUtils.replaceEach(string0, stringArray0, stringArray0);
      assertEquals("\\u000", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertTrue(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string4));
      assertTrue(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
  }

  @Test
  public void test125()  throws Throwable  {
      String string0 = "64I!>^(+_q%<RXd64I!>^(+_q%<RXd";
      int int0 = 4706;
      String string1 = StringUtils.repeat(string0, string0, int0);
      String string2 = StringUtils.stripEnd(string1, string1);
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      stringArray0[1] = string2;
      String string3 = StringUtils.replaceEach(string1, stringArray0, stringArray0);
  }

  @Test
  public void test126()  throws Throwable  {
      String string0 = "F\")\"4;;o ncDR";
      String[] stringArray0 = StringUtils.splitByCharacterType(string0);
      assertNotNull(stringArray0);
      
      String string1 = " in an array of ";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.replaceEach(string1, stringArray0, stringArray0);
      assertEquals(" in an array of ", string2);
      assertNotNull(string2);
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
  }

  @Test
  public void test127()  throws Throwable  {
      String string0 = "; R.p7~*=f";
      Locale locale0 = Locale.KOREA;
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string1 = StringUtils.upperCase(string0, locale0);
      assertEquals("; R.P7~*=F", string1);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = string1;
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(stringArray0[0]);
      
      String string2 = StringUtils.replaceEachRepeatedly(string0, stringArray0, stringArray0);
      assertEquals("; R.p7~*=f", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
  }

  @Test
  public void test128()  throws Throwable  {
      String string0 = "; R.p7~*=f";
      char[] charArray0 = new char[2];
      char char0 = 'X';
      charArray0[0] = char0;
      String string1 = StringUtils.abbreviate(string0, (int) charArray0[0], (int) charArray0[0]);
      assertEquals("; R.p7~*=f", string1);
      assertArrayEquals(new char[] {'X', '\u0000'}, charArray0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      // Undeclared exception!
      try {
        String string2 = StringUtils.replaceEachRepeatedly(string1, stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
      }
  }

  @Test
  public void test129()  throws Throwable  {
      String string0 = "j+*p3)Nk8@+c!t,J";
      Map<String, ClientInfoStatus> map0 = null;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(map0);
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNotNull(sQLClientInfoException0);
      
      String string1 = StringUtils.uncapitalize(string0);
      assertEquals("j+*p3)Nk8@+c!t,J", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = sQLClientInfoException0.getMessage();
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(string2);
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(stringArray0);
      
      String string3 = StringUtils.replaceEach(string1, stringArray0, stringArray0);
      assertEquals("j+*p3)Nk8@+c!t,J", string3);
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNotNull(string3);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string3));
      assertTrue(string0.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotSame(string1, string0);
      assertSame(string1, string3);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(string3, string1);
      assertNotSame(string3, string0);
  }

  @Test
  public void test130()  throws Throwable  {
      String string0 = "{}{}";
      String[] stringArray0 = new String[6];
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      String string1 = StringUtils.substringAfterLast(stringArray0[2], stringArray0[3]);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.replaceEachRepeatedly(string1, stringArray0, stringArray0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
  }

  @Test
  public void test131()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = StringUtils.split(string0);
      assertNull(stringArray0);
      
      String string1 = StringUtils.replaceEachRepeatedly(string0, stringArray0, stringArray0);
      assertNull(string1);
  }

  @Test
  public void test132()  throws Throwable  {
      String string0 = "Q";
      int int0 = 297;
      String string1 = StringUtils.replace(string0, string0, string0, int0);
      assertEquals("Q", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test133()  throws Throwable  {
      String string0 = ";?OScW9b= e!-{\\E";
      String string1 = "na0$$48/";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.replace(string1, string0, string0);
      assertEquals("na0$$48/", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
  }

  @Test
  public void test134()  throws Throwable  {
      String string0 = null;
      String string1 = " ";
      String string2 = StringUtils.replaceOnce(string1, string1, string0);
      assertEquals(" ", string2);
      assertNotNull(string2);
      assertSame(string1, string2);
      assertSame(string2, string1);
  }

  @Test
  public void test135()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string0 = locale0.getLanguage();
      assertEquals("zh", string0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(string0);
      
      String string1 = null;
      int int0 = StringUtils.indexOfDifference((CharSequence) string1, (CharSequence) string1);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.replace(string1, string0, string0, int0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNull(string2);
  }

  @Test
  public void test136()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals(0, listIterator0.nextIndex());
      assertEquals(false, listIterator0.hasNext());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(listIterator0);
      
      String string0 = "?";
      String string1 = StringUtils.replaceChars(string0, string0, string0);
      assertEquals("?", string1);
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[4] = (Object) listIterator0;
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals(0, listIterator0.nextIndex());
      assertEquals(false, listIterator0.hasNext());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(objectArray0[4]);
      
      String string2 = StringUtils.join(objectArray0, string1);
      assertNotNull(string2);
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      
      char char0 = 'L';
      String string3 = StringUtils.remove(string2, char0);
      assertNotNull(string3);
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
  }

  @Test
  public void test137()  throws Throwable  {
      String string0 = "?";
      char char0 = 'L';
      String string1 = StringUtils.remove(string0, char0);
      assertEquals("?", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test138()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      String string0 = locale0.getLanguage();
      assertEquals("zh", string0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(string0);
      
      String string1 = locale0.getDisplayVariant(locale0);
      assertEquals("", string1);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.remove(string0, string1);
      assertEquals("zh", string2);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
  }

  @Test
  public void test139()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string0 = locale0.getLanguage();
      assertEquals("zh", string0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(string0);
      
      String string1 = StringUtils.remove(string0, string0);
      assertEquals("", string1);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test140()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.substringAfter(string0, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.remove(string1, string1);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
  }

  @Test
  public void test141()  throws Throwable  {
      String string0 = " ";
      String string1 = "VwW";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeEndIgnoreCase(string1, string0);
      assertEquals("VwW", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
  }

  @Test
  public void test142()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.substringAfter(string0, string0);
      assertNull(string1);
      
      String string2 = StringUtils.removeEndIgnoreCase(string1, string0);
      assertNull(string2);
  }

  @Test
  public void test143()  throws Throwable  {
      String string0 = "";
      String string1 = "52GC|6u&#|9K4O+";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeEnd(string1, string0);
      assertEquals("52GC|6u&#|9K4O+", string2);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
  }

  @Test
  public void test144()  throws Throwable  {
      String string0 = ",EW+25C>`^uCH}";
      String string1 = "}cVyTo";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeStartIgnoreCase(string0, string1);
      assertEquals(",EW+25C>`^uCH}", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
  }

  @Test
  public void test145()  throws Throwable  {
      String string0 = "\"";
      String string1 = StringUtils.removeStartIgnoreCase(string0, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test146()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.removeStartIgnoreCase(string0, string0);
      assertNull(string1);
  }

  @Test
  public void test147()  throws Throwable  {
      String string0 = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      String string1 = "3=";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.defaultIfBlank(string1, string0);
      assertEquals("3=", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      
      String string3 = StringUtils.removeStart(string0, string2);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string3);
      assertNotNull(string3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(string3, string0);
      assertSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
  }

  @Test
  public void test148()  throws Throwable  {
      String string0 = "";
      String string1 = "52GC|6u&#|9K4O+";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeEnd(string0, string0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(string1);
      assertNotNull(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      
      String string3 = StringUtils.join((Object[]) stringArray0);
      assertEquals("52GC|6u&#|9K4O+", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string3));
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      
      String string4 = StringUtils.removeStart(string3, string2);
      assertEquals("52GC|6u&#|9K4O+", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string3));
      assertSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string0, string4);
      assertSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
  }

  @Test
  public void test149()  throws Throwable  {
      String string0 = "Gj+*p3)Nk8@c!t,J";
      String string1 = " in an array of ";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.chomp(string0, string1);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      
      String string3 = StringUtils.removeStart(string2, string2);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(string0, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
  }

  @Test
  public void test150()  throws Throwable  {
      String string0 = " has no clone method";
      String string1 = StringUtils.deleteWhitespace(string0);
      assertEquals("hasnoclonemethod", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test151()  throws Throwable  {
      String string0 = "R*8{F;57hTz1";
      char char0 = '&';
      String string1 = StringUtils.reverseDelimited(string0, char0);
      assertEquals("R*8{F;57hTz1", string1);
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.empty());
      assertNotNull(stack0);
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.empty());
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals(false, listIterator0.hasNext());
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals(0, listIterator0.nextIndex());
      assertNotNull(listIterator0);
      
      String string2 = StringUtils.join((Iterator<?>) listIterator0, string1);
      assertEquals("", string2);
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.empty());
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals(false, listIterator0.hasNext());
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals(0, listIterator0.nextIndex());
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      String string3 = StringUtils.deleteWhitespace(string2);
      assertEquals("", string3);
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.empty());
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals(false, listIterator0.hasNext());
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals(0, listIterator0.nextIndex());
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string2, string3);
  }

  @Test
  public void test152()  throws Throwable  {
      String string0 = "IuZ'\"e5n\\XWN";
      SQLException sQLException0 = new SQLException();
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertNotNull(sQLException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(string0, string0, (Throwable) sQLException0);
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("IuZ'\"e5n\\XWN", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: IuZ'\"e5n\\XWN", sQLSyntaxErrorException0.toString());
      assertEquals("IuZ'\"e5n\\XWN", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      String string1 = StringUtils.join((Iterable<?>) sQLSyntaxErrorException0, string0);
      assertEquals("java.sql.SQLSyntaxErrorException: IuZ'\"e5n\\XWNIuZ'\"e5n\\XWNjava.sql.SQLException", string1);
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("IuZ'\"e5n\\XWN", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: IuZ'\"e5n\\XWN", sQLSyntaxErrorException0.toString());
      assertEquals("IuZ'\"e5n\\XWN", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test153()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      String string0 = sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(string0);
      
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      TreeSet<Locale.Category> treeSet0 = new TreeSet<Locale.Category>((Collection<? extends Locale.Category>) linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      boolean boolean0 = treeSet0.add(locale_Category0);
      assertTrue(boolean0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("[DISPLAY]", treeSet0.toString());
      
      String string1 = StringUtils.join((Iterable<?>) treeSet0, string0);
      assertEquals("DISPLAY", string1);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("[DISPLAY]", treeSet0.toString());
      assertNotNull(string1);
  }

  @Test
  public void test154()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string0 = locale0.getLanguage();
      assertEquals("zh", string0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(string0);
      
      Iterator<Integer> iterator0 = null;
      String string1 = StringUtils.join(iterator0, string0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertNull(string1);
  }

  @Test
  public void test155()  throws Throwable  {
      int int0 = 2665;
      String string0 = ",EW+25C>`^uCH}";
      String string1 = StringUtils.substringBetween(string0, string0);
      assertNull(string1);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(string0, string1, int0);
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(",EW+25C>`^uCH}", sQLRecoverableException0.getMessage());
      assertEquals(2665, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: ,EW+25C>`^uCH}", sQLRecoverableException0.toString());
      assertNotNull(sQLRecoverableException0);
      
      char char0 = 'I';
      String string2 = StringUtils.join((Iterable<?>) sQLRecoverableException0, char0);
      assertEquals("java.sql.SQLRecoverableException: ,EW+25C>`^uCH}", string2);
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(",EW+25C>`^uCH}", sQLRecoverableException0.getMessage());
      assertEquals(2665, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: ,EW+25C>`^uCH}", sQLRecoverableException0.toString());
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
  }

  @Test
  public void test156()  throws Throwable  {
      int int0 = 2811;
      LinkedHashSet<Locale.Category> linkedHashSet0 = new LinkedHashSet<Locale.Category>(int0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      char char0 = 'n';
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      boolean boolean0 = linkedHashSet0.add(locale_Category0);
      assertTrue(boolean0);
      assertEquals("[FORMAT]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      assertNotSame(locale_Category1, locale_Category0);
      
      boolean boolean1 = linkedHashSet0.add(locale_Category1);
      assertTrue(boolean1);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[FORMAT, DISPLAY]", linkedHashSet0.toString());
      assertEquals(2, linkedHashSet0.size());
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(locale_Category1, locale_Category0);
      
      String string0 = StringUtils.join((Iterable<?>) linkedHashSet0, char0);
      assertEquals("FORMATnDISPLAY", string0);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[FORMAT, DISPLAY]", linkedHashSet0.toString());
      assertEquals(2, linkedHashSet0.size());
      assertNotNull(string0);
  }

  @Test
  public void test157()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals(0, listIterator0.nextIndex());
      assertEquals(false, listIterator0.hasNext());
      assertEquals(false, listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      String string0 = "?";
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) string0, (CharSequence) string0);
      assertEquals(0, int0);
      
      char char0 = 'L';
      boolean boolean0 = linkedList0.add((Integer) int0);
      assertTrue(boolean0);
      assertEquals("[0]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      
      // Undeclared exception!
      try {
        String string1 = StringUtils.join((Iterator<?>) listIterator0, char0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test158()  throws Throwable  {
      Iterator<String> iterator0 = null;
      char char0 = 'd';
      String string0 = StringUtils.join(iterator0, char0);
      assertNull(string0);
  }

  @Test
  public void test159()  throws Throwable  {
      String[] stringArray0 = new String[4];
      char[] charArray0 = new char[7];
      String string0 = StringUtils.join((Object[]) stringArray0, stringArray0[3], (int) charArray0[2], (int) charArray0[2]);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
  }

  @Test
  public void test160()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.chop(string0);
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, string1);
      assertNull(stringArray0);
      
      String string2 = StringUtils.join((Object[]) stringArray0);
      assertNull(string2);
  }

  @Test
  public void test161()  throws Throwable  {
      char char0 = 'T';
      Object[] objectArray0 = new Object[2];
      String string0 = StringUtils.join(objectArray0, char0);
      assertEquals("T", string0);
      assertNotNull(string0);
  }

  @Test
  public void test162()  throws Throwable  {
      char char0 = 'V';
      Object[] objectArray0 = new Object[4];
      String string0 = StringUtils.join(objectArray0, char0, (int) char0, (int) char0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test
  public void test163()  throws Throwable  {
      String string0 = "The stripAccents(CharSequence) method requires at least Java6, but got: ";
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test164()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = StringUtils.splitByCharacterType(string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test165()  throws Throwable  {
      String string0 = "Cannot get the toString of a null identity";
      String string1 = "\\u000";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.strip(string0, string1);
      assertEquals("Cannot get the toString of a null identity", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      
      String[] stringArray0 = StringUtils.split(string2, string2);
      assertNotNull(stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
  }

  @Test
  public void test166()  throws Throwable  {
      String string0 = "Q";
      String string1 = "((";
      assertNotSame(string1, string0);
      
      int int0 = 297;
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, string1, int0);
      assertNotNull(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test167()  throws Throwable  {
      int int0 = 215;
      String string0 = "S";
      String[] stringArray0 = StringUtils.split(string0, string0, int0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test168()  throws Throwable  {
      String string0 = "A-JCM5 arCSyb`OrK>";
      int int0 = 0;
      String string1 = "O";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, string1, int0);
      assertNotNull(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test169()  throws Throwable  {
      String string0 = " )C^GfIMN";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test170()  throws Throwable  {
      String string0 = " &bXb?<!XfG$rQi";
      String[] stringArray0 = StringUtils.split(string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test171()  throws Throwable  {
      String string0 = "The character ";
      int int0 = 0;
      String string1 = StringUtils.repeat(string0, string0, int0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.split(string1, string0);
      assertNotNull(stringArray0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test172()  throws Throwable  {
      String string0 = "Gj+*p3)Nk8@c!t,J in an array of";
      char char0 = 'f';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, char0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test173()  throws Throwable  {
      char char0 = '%';
      String string0 = "%epJYQIH+Z8C-@5\"";
      String string1 = StringUtils.reverseDelimited(string0, char0);
      assertEquals("epJYQIH+Z8C-@5\"", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test174()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNotNull(sQLDataException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((Throwable) sQLDataException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLDataException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNotNull(sQLTimeoutException0);
      
      String string0 = sQLTimeoutException0.getSQLState();
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLDataException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(string0);
      
      char char0 = 'b';
      String[] stringArray0 = StringUtils.split(string0, char0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLDataException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(stringArray0);
  }

  @Test
  public void test175()  throws Throwable  {
      String string0 = "MG$+}MGD-^&Y]?$";
      String string1 = StringUtils.removeEndIgnoreCase(string0, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      int int0 = 118;
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) string1, (CharSequence) string2, int0);
      assertEquals(91, int1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string2, string1, int1);
      assertNotNull(stringArray0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
  }

  @Test
  public void test176()  throws Throwable  {
      String string0 = "{}{}";
      String string1 = null;
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string0, string1);
      assertNotNull(stringArray0);
  }

  @Test
  public void test177()  throws Throwable  {
      String string0 = "<[\"";
      int int0 = 0;
      String string1 = StringUtils.swapCase(string0);
      assertEquals("<[\"", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = "";
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string2, string1, int0);
      assertNotNull(stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
  }

  @Test
  public void test178()  throws Throwable  {
      String string0 = "x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2Wc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2yc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|4Q_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_~2vc|HQ_";
      String string1 = "!Y9STtEV";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.substringsBetween(string0, string1, string1);
      assertNull(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test179()  throws Throwable  {
      String string0 = "j.iMN\"&)E-j.iMN\"&)E-";
      int int0 = 2044;
      char char0 = '@';
      String string1 = StringUtils.leftPad(string0, int0, char0);
      assertEqualsj.iMN\"&)E-j.iMN\"&)E-", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.substringsBetween(string1, string1, string0);
      assertNull(stringArray0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test180()  throws Throwable  {
      String string0 = "";
      String string1 = "52GC|6u&#|9K4O+";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.substringsBetween(string0, string1, string1);
      assertNotNull(stringArray0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test181()  throws Throwable  {
      String string0 = "Dzr^VNGg!Y";
      int int0 = (-15);
      String string1 = StringUtils.overlay(string0, string0, int0, int0);
      assertEquals("Dzr^VNGg!YDzr^VNGg!Y", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = "";
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      String[] stringArray0 = StringUtils.substringsBetween(string1, string1, string2);
      assertNull(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
  }

  @Test
  public void test182()  throws Throwable  {
      String string0 = "x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2Wc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2yc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|4Q_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_x: ~2vc|HQ_~2vc|HQ_";
      String string1 = null;
      String[] stringArray0 = StringUtils.substringsBetween(string0, string1, string1);
      assertNull(stringArray0);
  }

  @Test
  public void test183()  throws Throwable  {
      String string0 = "?";
      String string1 = StringUtils.replaceChars(string0, string0, string0);
      assertEquals("?", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String[] stringArray0 = StringUtils.substringsBetween(string0, string0, string1);
      assertNull(stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test184()  throws Throwable  {
      String string0 = "";
      int int0 = 1394;
      String string1 = StringUtils.leftPad(string0, int0, string0);
      assertEqualsstring1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      char char0 = '1';
      String string2 = null;
      String string3 = StringUtils.reverseDelimited(string2, char0);
      assertNull(string3);
      
      String[] stringArray0 = StringUtils.substringsBetween(string3, string2, string1);
      assertNull(stringArray0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test185()  throws Throwable  {
      String string0 = "The Array must not be null";
      String string1 = StringUtils.lowerCase(string0);
      assertEquals("the array must not be null", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = null;
      String string3 = StringUtils.substringBetween(string1, string0, string2);
      assertNull(string3);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test186()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.StringUtils";
      String string1 = null;
      String string2 = StringUtils.substringBetween(string0, string1, string1);
      assertNull(string2);
  }

  @Test
  public void test187()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.substringBetween(string0, string0);
      assertNull(string1);
  }

  @Test
  public void test188()  throws Throwable  {
      String string0 = "x: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcP!*cVc";
      String string1 = ", '";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.chomp(string0, string1);
      assertEquals("x: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcP!*cVc", string2);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      
      String string3 = StringUtils.substringAfterLast(string1, string2);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string2, string3);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string3);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
  }

  @Test
  public void test189()  throws Throwable  {
      String string0 = "x: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcP!*cVc";
      String string1 = StringUtils.substringAfterLast(string0, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test190()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.swapCase(string0);
      assertNull(string1);
      
      String string2 = StringUtils.substringAfterLast(string0, string1);
      assertNull(string2);
  }

  @Test
  public void test191()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      String string0 = linkedHashSet0.toString();
      assertEquals("[]", string0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(string0);
      
      String string1 = "org.apache.commons.lang3.CharUtils";
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.defaultIfEmpty(string1, string1);
      assertEquals("org.apache.commons.lang3.CharUtils", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      
      String string3 = StringUtils.substringBeforeLast(string0, string2);
      assertEquals("[]", string3);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(string3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertSame(string2, string1);
      assertNotSame(string0, string1);
      assertSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(string3, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertSame(string1, string2);
  }

  @Test
  public void test192()  throws Throwable  {
      String string0 = " b5^G$9BS_~eK6-TvVK";
      String string1 = StringUtils.uncapitalize(string0);
      assertEquals(" b5^G$9BS_~eK6-TvVK", string1);
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      int int0 = 7;
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>(int0);
      assertEquals(0, arrayList0.size());
      assertEquals("[]", arrayList0.toString());
      assertEquals(true, arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      char char0 = '#';
      String string2 = StringUtils.join((Iterable<?>) arrayList0, char0);
      assertEquals("", string2);
      assertEquals(0, arrayList0.size());
      assertEquals("[]", arrayList0.toString());
      assertEquals(true, arrayList0.isEmpty());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      String string3 = StringUtils.substringBeforeLast(string1, string2);
      assertEquals(" b5^G$9BS_~eK6-TvVK", string3);
      assertEquals(0, arrayList0.size());
      assertEquals("[]", arrayList0.toString());
      assertEquals(true, arrayList0.isEmpty());
      assertNotNull(string3);
      assertTrue(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertTrue(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string1, string3);
  }

  @Test
  public void test193()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      String string0 = linkedHashSet0.toString();
      assertEquals("[]", string0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBeforeLast(string0, string0);
      assertEquals("", string1);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test194()  throws Throwable  {
      String string0 = "Gj+*p3)Nk8@c!t,J";
      String string1 = "";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringBeforeLast(string1, string0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
  }

  @Test
  public void test195()  throws Throwable  {
      String string0 = "2^";
      String string1 = "7c?j!";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringAfter(string1, string0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
  }

  @Test
  public void test196()  throws Throwable  {
      String string0 = "The stripAccents(CharSequence) method requires at least Java6, but got: ";
      String string1 = StringUtils.chomp(string0);
      assertEquals("The stripAccents(CharSequence) method requires at least Java6, but got: ", string1);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String string2 = "";
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      String string3 = StringUtils.substringBefore(string1, string2);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
  }

  @Test
  public void test197()  throws Throwable  {
      String string0 = null;
      String string1 = ";'1D?U8`/CPzf";
      String string2 = StringUtils.strip(string1, string0);
      assertEquals(";'1D?U8`/CPzf", string2);
      assertNotNull(string2);
      assertSame(string2, string1);
      assertSame(string1, string2);
      
      String string3 = StringUtils.substringBefore(string2, string0);
      assertEquals(";'1D?U8`/CPzf", string3);
      assertNotNull(string3);
      assertSame(string3, string1);
      assertSame(string3, string2);
      assertSame(string2, string3);
      assertSame(string2, string1);
      assertSame(string1, string3);
      assertSame(string1, string2);
  }

  @Test
  public void test198()  throws Throwable  {
      String string0 = "<[\"";
      String string1 = null;
      String string2 = StringUtils.substringBefore(string1, string0);
      assertNull(string2);
  }

  @Test
  public void test199()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.exception.CloneFailedException";
      int int0 = 0;
      int int1 = 736;
      String string1 = StringUtils.mid(string0, int0, int1);
      assertEquals("org.apache.commons.lang3.exception.CloneFailedException", string1);
      assertNotNull(string1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test200()  throws Throwable  {
      String string0 = "x&`Vx&B8Ju8I/FP";
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) string0;
      assertEquals("x&`Vx&B8Ju8I/FP", charSequenceArray0[0].toString());
      assertEquals(16, charSequenceArray0[0].length());
      assertNotNull(charSequenceArray0[0]);
      
      charSequenceArray0[1] = (CharSequence) string0;
      assertEquals("x&`Vx&B8Ju8I/FP", charSequenceArray0[1].toString());
      assertEquals(16, charSequenceArray0[1].length());
      assertNotNull(charSequenceArray0[1]);
      
      charSequenceArray0[2] = (CharSequence) string0;
      assertEquals("x&`Vx&B8Ju8I/FP", charSequenceArray0[2].toString());
      assertEquals(16, charSequenceArray0[2].length());
      assertNotNull(charSequenceArray0[2]);
      
      char[] charArray0 = new char[9];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.mid(string0, int0, (int) charArray0[6]);
      assertEquals("", string1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test201()  throws Throwable  {
      String string0 = "";
      char char0 = '6';
      String string1 = StringUtils.remove(string0, char0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      String string2 = StringUtils.mid(string1, (int) char0, (int) char0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertSame(string2, string1);
      assertSame(string2, string0);
      assertSame(string1, string2);
      assertSame(string1, string0);
      assertSame(string0, string2);
      assertSame(string0, string1);
  }

  @Test
  public void test202()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String string0 = "\\p{InCombiningDiacriticalMarks}+";
      String string1 = StringUtils.join(objectArray0, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      int int0 = (-3679);
      String string2 = StringUtils.mid(string1, int0, int0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
  }

  @Test
  public void test203()  throws Throwable  {
      String string0 = "'&cAD_*fqQ5vy-$g";
      int int0 = 2425;
      String string1 = StringUtils.right(string0, int0);
      assertEquals("'&cAD_*fqQ5vy-$g", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test204()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      String string0 = linkedHashSet0.toString();
      assertEquals("[]", string0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      int int0 = StringUtils.indexOfAny((CharSequence) string0, charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      String string1 = StringUtils.right(string0, int0);
      assertEquals("", string1);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test205()  throws Throwable  {
      int int0 = 0;
      String string0 = null;
      String string1 = StringUtils.right(string0, int0);
      assertNull(string1);
  }

  @Test
  public void test206()  throws Throwable  {
      String string0 = "'&cAD_*fqQ5vy-$g";
      int int0 = 0;
      String string1 = StringUtils.right(string0, int0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test207()  throws Throwable  {
      String string0 = "";
      char char0 = '6';
      String string1 = StringUtils.remove(string0, char0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      String string2 = StringUtils.left(string1, (int) char0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string2, string1);
      assertSame(string2, string0);
  }

  @Test
  public void test208()  throws Throwable  {
      String string0 = "Z_AkGA;1xZO*p2E";
      int int0 = 0;
      String string1 = StringUtils.substring(string0, int0);
      assertEquals("Z_AkGA;1xZO*p2E", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      int int1 = 32;
      String string2 = StringUtils.substring(string1, int1, int1);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
  }

  @Test
  public void test209()  throws Throwable  {
      String string0 = "Z_AkGA;1xZO*p2E";
      int int0 = 0;
      String string1 = StringUtils.substring(string0, int0, int0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test210()  throws Throwable  {
      String string0 = "f.=xtj`";
      String string1 = StringUtils.trimToEmpty(string0);
      assertEquals("f.=xtj`", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      int int0 = (-842);
      int int1 = 489;
      String string2 = StringUtils.substring(string1, int0, int1);
      assertEquals("f.=xtj`", string2);
      assertNotNull(string2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertSame(string1, string2);
      assertSame(string1, string0);
      assertSame(string2, string1);
      assertSame(string2, string0);
      assertSame(string0, string2);
      assertSame(string0, string1);
  }

  @Test
  public void test211()  throws Throwable  {
      String string0 = null;
      char char0 = '+';
      String string1 = StringUtils.substring(string0, (int) char0, (int) char0);
      assertNull(string1);
  }

  @Test
  public void test212()  throws Throwable  {
      String string0 = "f.=xtj`";
      String string1 = StringUtils.trimToEmpty(string0);
      assertEquals("f.=xtj`", string1);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      int int0 = (-842);
      String string2 = StringUtils.substring(string1, int0, int0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
  }

  @Test
  public void test213()  throws Throwable  {
      String string0 = "Cannot get the toString of a null identity";
      int int0 = 1367;
      String string1 = StringUtils.substring(string0, int0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test214()  throws Throwable  {
      String string0 = "E&ceptio cloning Cloneable type {}{}";
      int int0 = (-257);
      String string1 = StringUtils.substring(string0, int0);
      assertEquals("E&ceptio cloning Cloneable type {}{}", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test215()  throws Throwable  {
      String string0 = null;
      int int0 = (-1884);
      String string1 = StringUtils.substring(string0, int0);
      assertNull(string1);
  }

  @Test
  public void test216()  throws Throwable  {
      String string0 = "'&cAD_*fqQ5vy-$g";
      String string1 = "3}!V2";
      assertNotSame(string1, string0);
      
      int int0 = 0;
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[2] = (CharSequence) string0;
      assertEquals(16, charSequenceArray0[2].length());
      assertEquals("'&cAD_*fqQ5vy-$g", charSequenceArray0[2].toString());
      assertNotNull(charSequenceArray0[2]);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(string0, string1, int0);
      assertEquals("3}!V2", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("'&cAD_*fqQ5vy-$g", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: '&cAD_*fqQ5vy-$g", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = sQLNonTransientConnectionException0.getSQLState();
      assertEquals("3}!V2", string2);
      assertEquals("3}!V2", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("'&cAD_*fqQ5vy-$g", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: '&cAD_*fqQ5vy-$g", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      
      int int1 = StringUtils.lastIndexOfAny((CharSequence) string2, charSequenceArray0);
      assertEquals((-1), int1);
      assertEquals("3}!V2", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("'&cAD_*fqQ5vy-$g", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: '&cAD_*fqQ5vy-$g", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
  }

  @Test
  public void test217()  throws Throwable  {
      String string0 = "'&cAD_*fqQ5vy-$g";
      int int0 = 0;
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[1] = (CharSequence) string0;
      assertEquals("'&cAD_*fqQ5vy-$g", charSequenceArray0[1].toString());
      assertEquals(16, charSequenceArray0[1].length());
      assertNotNull(charSequenceArray0[1]);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(string0, string0, int0);
      assertEquals("java.sql.SQLNonTransientConnectionException: '&cAD_*fqQ5vy-$g", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("'&cAD_*fqQ5vy-$g", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("'&cAD_*fqQ5vy-$g", sQLNonTransientConnectionException0.getMessage());
      assertNotNull(sQLNonTransientConnectionException0);
      
      String string1 = sQLNonTransientConnectionException0.getSQLState();
      assertEquals("'&cAD_*fqQ5vy-$g", string1);
      assertEquals("java.sql.SQLNonTransientConnectionException: '&cAD_*fqQ5vy-$g", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("'&cAD_*fqQ5vy-$g", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("'&cAD_*fqQ5vy-$g", sQLNonTransientConnectionException0.getMessage());
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      int int1 = StringUtils.lastIndexOfAny((CharSequence) string1, charSequenceArray0);
      assertEquals(0, int1);
      assertEquals("java.sql.SQLNonTransientConnectionException: '&cAD_*fqQ5vy-$g", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("'&cAD_*fqQ5vy-$g", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("'&cAD_*fqQ5vy-$g", sQLNonTransientConnectionException0.getMessage());
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test
  public void test218()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.chop(string0);
      assertNull(string1);
      
      String string2 = "PnM?ttBcUOlVe4P@8[=";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, string1);
      assertNull(stringArray0);
      
      String string3 = StringUtils.deleteWhitespace(string2);
      assertNotNull(string3);
      assertSame(string3, string2);
      assertSame(string2, string3);
      
      int int0 = StringUtils.lastIndexOfAny((CharSequence) string3, (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertSame(string3, string2);
      assertSame(string2, string3);
  }

  @Test
  public void test219()  throws Throwable  {
      String string0 = null;
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      int int0 = StringUtils.lastIndexOfAny((CharSequence) string0, charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test
  public void test220()  throws Throwable  {
      String string0 = "+(yc_Z)%;bI@";
      String string1 = StringUtils.difference(string0, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string1;
      assertNotNull(stringArray0[1]);
      
      int int0 = StringUtils.indexOfAny((CharSequence) string0, (CharSequence[]) stringArray0);
      assertEquals(0, int0);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
  }

  @Test
  public void test221()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      String string0 = linkedHashSet0.toString();
      assertEquals("[]", string0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(string0);
      
      String string1 = "RBF";
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) string0;
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(2, charSequenceArray0[0].length());
      assertEquals("[]", charSequenceArray0[0].toString());
      assertNotNull(charSequenceArray0[0]);
      
      int int0 = StringUtils.indexOfAny((CharSequence) string1, charSequenceArray0);
      assertEquals((-1), int0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
  }

  @Test
  public void test222()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNotNull(batchUpdateException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((Throwable) batchUpdateException0);
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.BatchUpdateException", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(sQLTransactionRollbackException0);
      
      String string0 = sQLTransactionRollbackException0.getSQLState();
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.BatchUpdateException", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) string0, string0);
      assertTrue(boolean0);
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.BatchUpdateException", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
  }

  @Test
  public void test223()  throws Throwable  {
      String string0 = "'&cAD_*fqQ5vy-$g";
      String string1 = "3}!V2";
      assertNotSame(string1, string0);
      
      int int0 = 0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(string0, string1, int0);
      assertEquals("java.sql.SQLNonTransientConnectionException: '&cAD_*fqQ5vy-$g", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("3}!V2", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("'&cAD_*fqQ5vy-$g", sQLNonTransientConnectionException0.getMessage());
      assertNotNull(sQLNonTransientConnectionException0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = sQLNonTransientConnectionException0.getSQLState();
      assertEquals("3}!V2", string2);
      assertEquals("java.sql.SQLNonTransientConnectionException: '&cAD_*fqQ5vy-$g", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("3}!V2", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("'&cAD_*fqQ5vy-$g", sQLNonTransientConnectionException0.getMessage());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) string2, string0);
      assertTrue(boolean0);
      assertEquals("java.sql.SQLNonTransientConnectionException: '&cAD_*fqQ5vy-$g", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("3}!V2", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("'&cAD_*fqQ5vy-$g", sQLNonTransientConnectionException0.getMessage());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
  }

  @Test
  public void test224()  throws Throwable  {
      String string0 = "'&cAD_*fqQ5vy-$g";
      int int0 = 0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(string0, string0, int0);
      assertEquals("'&cAD_*fqQ5vy-$g", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: '&cAD_*fqQ5vy-$g", sQLNonTransientConnectionException0.toString());
      assertEquals("'&cAD_*fqQ5vy-$g", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException0);
      
      String string1 = sQLNonTransientConnectionException0.getSQLState();
      assertEquals("'&cAD_*fqQ5vy-$g", string1);
      assertEquals("'&cAD_*fqQ5vy-$g", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: '&cAD_*fqQ5vy-$g", sQLNonTransientConnectionException0.toString());
      assertEquals("'&cAD_*fqQ5vy-$g", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) string1, string0);
      assertFalse(boolean0);
      assertEquals("'&cAD_*fqQ5vy-$g", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: '&cAD_*fqQ5vy-$g", sQLNonTransientConnectionException0.toString());
      assertEquals("'&cAD_*fqQ5vy-$g", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test225()  throws Throwable  {
      CharSequence charSequence0 = null;
      String string0 = "'&cAD_*fqQ5vy-$g";
      boolean boolean0 = StringUtils.containsOnly(charSequence0, string0);
      assertFalse(boolean0);
  }

  @Test
  public void test226()  throws Throwable  {
      String string0 = "IuZ'\"e5n\\XWN";
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string1 = linkedList0.toString();
      assertEquals("[]", string1);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      int int0 = 0;
      String string2 = StringUtils.repeat(string0, int0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) string1, string2);
      assertFalse(boolean0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
  }

  @Test
  public void test227()  throws Throwable  {
      String string0 = "MG$+}MGD-^&Y]?$";
      String string1 = StringUtils.removeEndIgnoreCase(string0, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) string1, string0);
      assertTrue(boolean0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test228()  throws Throwable  {
      CharSequence charSequence0 = null;
      char[] charArray0 = new char[2];
      boolean boolean0 = StringUtils.containsOnly(charSequence0, charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test229()  throws Throwable  {
      String string0 = "64I!>^(+_q%<RXd64I!>^(+_q%<RXd";
      int int0 = 4706;
      String string1 = StringUtils.repeat(string0, string0, int0);
      String string2 = "KV)\\'6_._McG-Lc";
      int int1 = StringUtils.indexOfAnyBut((CharSequence) string1, (CharSequence) string2);
  }

  @Test
  public void test230()  throws Throwable  {
      String string0 = "Q";
      String string1 = StringUtils.chomp(string0);
      assertEquals("Q", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      Locale locale0 = new Locale(string0, string1, string0);
      assertEquals("Q", locale0.getCountry());
      assertEquals("q_Q_Q", locale0.toString());
      assertEquals("Q", locale0.getVariant());
      assertEquals("q", locale0.getLanguage());
      assertNotNull(locale0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      String string2 = locale0.getScript();
      assertEquals("", string2);
      assertEquals("Q", locale0.getCountry());
      assertEquals("q_Q_Q", locale0.toString());
      assertEquals("Q", locale0.getVariant());
      assertEquals("q", locale0.getLanguage());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) string1, (CharSequence) string2);
      assertEquals((-1), int0);
      assertEquals("Q", locale0.getCountry());
      assertEquals("q_Q_Q", locale0.toString());
      assertEquals("Q", locale0.getVariant());
      assertEquals("q", locale0.getLanguage());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
  }

  @Test
  public void test231()  throws Throwable  {
      String string0 = "64I!>^(+_q%<RXd64I!>^(+_q%<RXd";
      int int0 = 4706;
      String string1 = StringUtils.repeat(string0, string0, int0);
      int int1 = StringUtils.indexOfAnyBut((CharSequence) string1, (CharSequence) string1);
  }

  @Test
  public void test232()  throws Throwable  {
      CharSequence charSequence0 = null;
      int int0 = StringUtils.indexOfAnyBut(charSequence0, charSequence0);
      assertEquals((-1), int0);
  }

  @Test
  public void test233()  throws Throwable  {
      String string0 = "f.=xtj`";
      String string1 = "4";
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) string0, string1);
      assertFalse(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test234()  throws Throwable  {
      String string0 = "f.=xtj`";
      String string1 = StringUtils.trimToEmpty(string0);
      assertEquals("f.=xtj`", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) string0, string1);
      assertTrue(boolean0);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test235()  throws Throwable  {
      String string0 = null;
      char[] charArray0 = new char[7];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) string0, charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test236()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.containsAny((CharSequence) string0, (CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test237()  throws Throwable  {
      String string0 = "'ZP, !'";
      String string1 = "KHwp:K";
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) string1, (CharSequence) string0);
      assertFalse(boolean0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test238()  throws Throwable  {
      String string0 = "Z_AkGA;1xZO*p2E";
      String string1 = "";
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) string0, (CharSequence) string1);
      assertFalse(boolean0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test239()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      String string0 = linkedHashSet0.toString();
      assertEquals("[]", string0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) string0, (CharSequence) string0);
      assertTrue(boolean0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
  }

  @Test
  public void test240()  throws Throwable  {
      String string0 = "; R.p7~*=f";
      CharSequence charSequence0 = null;
      boolean boolean0 = StringUtils.containsAny(charSequence0, (CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test241()  throws Throwable  {
      String string0 = "P";
      int int0 = StringUtils.indexOfAny((CharSequence) string0, string0);
      assertEquals(0, int0);
  }

  @Test
  public void test242()  throws Throwable  {
      String string0 = "Z_AkGA;1xZO*p2E";
      int int0 = 0;
      String string1 = StringUtils.repeat(string0, int0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      char[] charArray0 = new char[4];
      int int1 = StringUtils.indexOfAny((CharSequence) string1, charArray0);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test243()  throws Throwable  {
      String string0 = "PnM?ttBcUOlVe4P@8[=";
      String string1 = StringUtils.deleteWhitespace(string0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) string1);
      assertFalse(boolean0);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test
  public void test244()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      String string0 = linkedHashSet0.toString();
      assertEquals("[]", string0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(string0);
      
      String string1 = null;
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      int int0 = StringUtils.indexOfAny((CharSequence) string0, charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      String string2 = StringUtils.leftPad(string1, int0, string0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNull(string2);
      
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) string2);
      assertFalse(boolean0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
  }

  @Test
  public void test245()  throws Throwable  {
      String string0 = ")~C;;<1==B+2J+ '";
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test
  public void test246()  throws Throwable  {
      String string0 = "i!Adne'>3FJ";
      String string1 = "3#za\"Pidq";
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) string0, (CharSequence) string1);
      assertFalse(boolean0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test247()  throws Throwable  {
      String string0 = null;
      String string1 = "~*D?\"NfF*Lt$T]F]hM:";
      String string2 = StringUtils.substringAfter(string0, string1);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) string1, (CharSequence) string2);
      assertFalse(boolean0);
  }

  @Test
  public void test248()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) string0, (CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test
  public void test249()  throws Throwable  {
      String string0 = "Q";
      String string1 = "((";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.chomp(string0);
      assertEquals("Q", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      
      String string3 = StringUtils.replaceChars(string1, string2, string0);
      assertEquals("((", string3);
      assertNotNull(string3);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(string3, string1);
      assertNotSame(string1, string2);
      assertSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string0, string3);
      
      boolean boolean0 = StringUtils.contains((CharSequence) string2, (CharSequence) string3);
      assertFalse(boolean0);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(string3, string1);
      assertNotSame(string1, string2);
      assertSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string0, string3);
  }

  @Test
  public void test250()  throws Throwable  {
      String string0 = "Q";
      String string1 = StringUtils.chomp(string0);
      assertEquals("Q", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) string1, (CharSequence) string1);
      assertTrue(boolean0);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test251()  throws Throwable  {
      CharSequence charSequence0 = null;
      String string0 = "x: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcP!*cVc";
      int int0 = 0;
      String string1 = StringUtils.mid(string0, int0, int0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      boolean boolean0 = StringUtils.contains(charSequence0, (CharSequence) string1);
      assertFalse(boolean0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test252()  throws Throwable  {
      String string0 = "P}heOM#5";
      String string1 = StringUtils.defaultIfBlank(string0, string0);
      assertEquals("P}heOM#5", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      int int0 = 0;
      String string2 = StringUtils.repeat(string1, string1, int0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) string2, int0);
      assertFalse(boolean0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
  }

  @Test
  public void test253()  throws Throwable  {
      String string0 = "IllegalAccessException occurred";
      int int0 = (-1);
      boolean boolean0 = StringUtils.contains((CharSequence) string0, int0);
      assertFalse(boolean0);
  }

  @Test
  public void test254()  throws Throwable  {
      String string0 = "The character ";
      String string1 = "NX}";
      assertNotSame(string1, string0);
      
      char char0 = '*';
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string0, (CharSequence) string1, (int) char0);
      assertEquals((-1), int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test255()  throws Throwable  {
      String string0 = "";
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string0, (CharSequence) string0);
      assertEquals(0, int0);
  }

  @Test
  public void test256()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.upperCase(string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      int int0 = 215;
      int int1 = StringUtils.indexOf((CharSequence) string1, int0, int0);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string1, (CharSequence) string1, int1);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test257()  throws Throwable  {
      String string0 = null;
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      int int0 = StringUtils.indexOfAny((CharSequence) string0, charSequenceArray0);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.leftPad(string0, int0);
      assertNull(string1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string1, (CharSequence) string1, int0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test258()  throws Throwable  {
      String string0 = "";
      Locale locale0 = Locale.JAPAN;
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertNotNull(locale0);
      
      String string1 = locale0.getISO3Language();
      assertEquals("jpn", string1);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringBetween(string0, string1, string0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string1, (CharSequence) string2);
      assertEquals((-1), int0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test259()  throws Throwable  {
      String string0 = "Exception cloning Cloneable type {B}{}8QnB[+mIu$Exception cloning Cloneable type {B}{}8QnB[+mIu$8QnB[+mIu$";
      String string1 = StringUtils.substringBetween(string0, string0);
      assertNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string1, (CharSequence) string0);
      assertEquals((-1), int0);
  }

  @Test
  public void test260()  throws Throwable  {
      String string0 = "NFD";
      int int0 = StringUtils.indexOfAny((CharSequence) string0, string0);
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[1] = (CharSequence) string0;
      assertEquals("NFD", charSequenceArray0[1].toString());
      assertEquals(3, charSequenceArray0[1].length());
      assertNotNull(charSequenceArray0[1]);
      
      int int1 = StringUtils.lastIndexOf(charSequenceArray0[1], charSequenceArray0[0], int0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test261()  throws Throwable  {
      String string0 = "NFD";
      int int0 = StringUtils.indexOfAny((CharSequence) string0, string0);
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) string0, (CharSequence) string0, int0);
      assertEquals(0, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test262()  throws Throwable  {
      String string0 = "NFD";
      String string1 = null;
      int int0 = StringUtils.indexOfAny((CharSequence) string0, string1);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) string1, (CharSequence) string1, int0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test263()  throws Throwable  {
      CharSequence charSequence0 = null;
      String string0 = "e0XZS(S";
      int int0 = StringUtils.lastIndexOf((CharSequence) string0, charSequence0);
      assertEquals((-1), int0);
  }

  @Test
  public void test264()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = ',';
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNotNull(sQLRecoverableException0);
      
      String string0 = sQLRecoverableException0.getSQLState();
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) string0, (int) charArray0[0], (int) char0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
  }

  @Test
  public void test265()  throws Throwable  {
      String string0 = " 5";
      String string1 = StringUtils.substringAfter(string0, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      int int0 = (-898);
      int int1 = StringUtils.lastIndexOf((CharSequence) string1, int0);
      assertEquals((-1), int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test266()  throws Throwable  {
      String string0 = "(Q=;W),UySgy";
      char[] charArray0 = new char[2];
      int int0 = StringUtils.lastIndexOf((CharSequence) string0, (int) charArray0[1]);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test267()  throws Throwable  {
      String string0 = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      char char0 = 'S';
      String string1 = "'ZP, '";
      assertNotSame(string1, string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) string0, (CharSequence) string1, (int) char0);
      assertEquals((-1), int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test268()  throws Throwable  {
      String string0 = "";
      int int0 = 215;
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) string0, (CharSequence) string0, int0);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test269()  throws Throwable  {
      String string0 = "";
      int int0 = 1394;
      String string1 = StringUtils.leftPad(string0, int0, string0);
      assertEqualsstring1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      int int1 = (-12);
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) string1, (CharSequence) string1, int1);
      assertEquals(0, int2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test270()  throws Throwable  {
      String string0 = "'ZP, !'";
      String string1 = StringUtils.substringBetween(string0, string0, string0);
      assertNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) string0, (CharSequence) string1);
      assertEquals((-1), int0);
  }

  @Test
  public void test271()  throws Throwable  {
      CharSequence charSequence0 = null;
      String string0 = "'&cAD_*fqQ5vy-$g";
      int int0 = 0;
      int int1 = StringUtils.indexOfIgnoreCase(charSequence0, (CharSequence) string0, int0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test272()  throws Throwable  {
      String string0 = "P}heOM#5";
      String string1 = StringUtils.defaultIfBlank(string0, string0);
      assertEquals("P}heOM#5", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      int int0 = 4096;
      int int1 = StringUtils.ordinalIndexOf((CharSequence) string0, (CharSequence) string1, int0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test273()  throws Throwable  {
      String string0 = "P}heOM#5";
      int int0 = 0;
      String string1 = StringUtils.repeat(string0, string0, int0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      int int1 = 5;
      int int2 = StringUtils.ordinalIndexOf((CharSequence) string1, (CharSequence) string1, int1);
      assertEquals(0, int2);
      assertFalse(string1.equals((Object)string0));
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test274()  throws Throwable  {
      int int0 = 1451;
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string0 = locale0.getDisplayLanguage();
      assertEquals("Chinese", string0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(string0);
      
      int int1 = StringUtils.lastOrdinalIndexOf((CharSequence) string0, (CharSequence) string0, int0);
      assertEquals((-1), int1);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test275()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertNotNull(locale0);
      
      String string0 = locale0.getDisplayCountry();
      assertEquals("", string0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertNotNull(string0);
      
      int int0 = 3;
      int int1 = StringUtils.lastOrdinalIndexOf((CharSequence) string0, (CharSequence) string0, int0);
      assertEquals(0, int1);
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test276()  throws Throwable  {
      String string0 = "dUp6x!F(=<}7Mm]P*";
      String string1 = StringUtils.substringBetween(string0, string0);
      assertNull(string1);
      
      String string2 = StringUtils.reverse(string0);
      assertEquals("*P]mM7}<=(F!x6pUd", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      
      int int0 = 64;
      int int1 = StringUtils.lastOrdinalIndexOf((CharSequence) string2, (CharSequence) string1, int0);
      assertEquals((-1), int1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(int1 == int0);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
  }

  @Test
  public void test277()  throws Throwable  {
      int int0 = (-1270);
      String string0 = null;
      int int1 = StringUtils.lastOrdinalIndexOf((CharSequence) string0, (CharSequence) string0, int0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test278()  throws Throwable  {
      String string0 = "Exception cloning Cloneable type {B}{}8QnB[+mIu$Exception cloning Cloneable type {B}{}8QnB[+mIu$8QnB[+mIu$";
      String string1 = StringUtils.substringBetween(string0, string0);
      assertNull(string1);
      
      char char0 = '/';
      int int0 = StringUtils.indexOf((CharSequence) string0, (CharSequence) string1, (int) char0);
      assertEquals((-1), int0);
  }

  @Test
  public void test279()  throws Throwable  {
      String string0 = "x: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcx: P!*cVcP!*cVc";
      int int0 = 0;
      int int1 = StringUtils.indexOf((CharSequence) string0, (CharSequence) string0, int0);
      assertEquals(0, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test280()  throws Throwable  {
      String string0 = ")~C;;<1==B+2J+ '";
      int int0 = 0;
      String string1 = StringUtils.replace(string0, string0, string0, int0);
      assertEquals(")~C;;<1==B+2J+ '", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      String string2 = null;
      int int1 = StringUtils.indexOf((CharSequence) string2, (CharSequence) string1, int0);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test281()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.removeEnd(string0, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      int int0 = StringUtils.indexOf((CharSequence) string0, (CharSequence) string1);
      assertEquals(0, int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test282()  throws Throwable  {
      CharSequence charSequence0 = null;
      int int0 = StringUtils.indexOf(charSequence0, charSequence0);
      assertEquals((-1), int0);
  }

  @Test
  public void test283()  throws Throwable  {
      String string0 = "Cannot get the toString of a null identity";
      int int0 = 221;
      String string1 = "R*8{F;57hTz1";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.strip(string1, string0);
      assertEquals("R*8{F;57hTz1", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      
      int int1 = StringUtils.indexOf((CharSequence) string2, int0, int0);
      assertEquals((-1), int1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
  }

  @Test
  public void test284()  throws Throwable  {
      String string0 = "Dzr^VNGg!Y";
      int int0 = 1;
      String string1 = StringUtils.overlay(string0, string0, int0, int0);
      assertEquals("DDzr^VNGg!Yzr^VNGg!Y", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeEnd(string1, string1);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      
      int int1 = StringUtils.indexOf((CharSequence) string2, int0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(int0 == int1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
  }

  @Test
  public void test285()  throws Throwable  {
      String string0 = "Q";
      String string1 = StringUtils.chomp(string0);
      assertEquals("Q", string1);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      char char0 = 'T';
      int int0 = StringUtils.indexOf((CharSequence) string1, (int) char0);
      assertEquals((-1), int0);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test
  public void test286()  throws Throwable  {
      String string0 = ",EW+25C>`^uCH}";
      String string1 = StringUtils.substringBetween(string0, string0);
      assertNull(string1);
      
      String string2 = StringUtils.removeStartIgnoreCase(string0, string1);
      assertEquals(",EW+25C>`^uCH}", string2);
      assertNotNull(string2);
      assertSame(string2, string0);
      assertSame(string0, string2);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) string2, (CharSequence) string1);
      assertFalse(boolean0);
      assertSame(string2, string0);
      assertSame(string0, string2);
  }

  @Test
  public void test287()  throws Throwable  {
      String string0 = "x&`Vx&B8Ju8I/FP";
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) string0, (CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test
  public void test288()  throws Throwable  {
      String string0 = "";
      int int0 = 1394;
      String string1 = StringUtils.leftPad(string0, int0, string0);
      assertEqualsstring1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = null;
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) string2, (CharSequence) string1);
      assertFalse(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test289()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.trim(string0);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) string1, (CharSequence) string1);
      assertTrue(boolean0);
  }

  @Test
  public void test290()  throws Throwable  {
      String string0 = "64I!>^(+_q%<RXd64I!>^(+_q%<RXd";
      int int0 = 4706;
      String string1 = StringUtils.repeat(string0, string0, int0);
      boolean boolean0 = StringUtils.equals((CharSequence) string1, (CharSequence) string1);
  }

  @Test
  public void test291()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.trimToNull(string0);
      assertNull(string1);
      
      String string2 = StringUtils.stripAccents(string1);
      assertNull(string2);
  }

  @Test
  public void test292()  throws Throwable  {
      String string0 = null;
      String string1 = "~*D?\"NfF*Lt$T]F]hM:";
      String string2 = StringUtils.substringAfter(string0, string1);
      assertNull(string2);
      
      int int0 = 0;
      String string3 = StringUtils.left(string1, int0);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertNotSame(string3, string1);
      assertNotSame(string1, string3);
      
      char char0 = '~';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string3, char0);
      assertNotNull(stringArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertNotSame(string3, string1);
      assertNotSame(string1, string3);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, string2);
      assertNotNull(stringArray1);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertNotSame(string3, string1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotSame(string1, string3);
  }

  @Test
  public void test293()  throws Throwable  {
      String string0 = "VwW";
      String string1 = "Gj+*p3)Nk8@c!t,J in an array of ";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringBefore(string1, string0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      
      String string3 = StringUtils.stripToEmpty(string2);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
  }

  @Test
  public void test294()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertNotNull(sQLDataException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((Throwable) sQLDataException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLDataException", sQLTimeoutException0.toString());
      assertEquals("java.sql.SQLDataException", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      String string0 = sQLTimeoutException0.getSQLState();
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLDataException", sQLTimeoutException0.toString());
      assertEquals("java.sql.SQLDataException", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(string0);
      
      String string1 = StringUtils.stripEnd(string0, string0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLDataException", sQLTimeoutException0.toString());
      assertEquals("java.sql.SQLDataException", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(string1);
  }

  @Test
  public void test295()  throws Throwable  {
      String string0 = "+(yc_Z)%;bI@";
      String[] stringArray0 = new String[7];
      String string1 = "$~oxT";
      assertNotSame(string1, string0);
      
      stringArray0[2] = string1;
      assertNotNull(stringArray0[2]);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, string0);
      assertNotNull(stringArray1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(string0, string1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test
  public void test296()  throws Throwable  {
      String string0 = "+(yc_Z)%;bI@";
      String[] stringArray0 = new String[7];
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, stringArray0[3]);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
  }

  @Test
  public void test297()  throws Throwable  {
      String string0 = " has no clone method";
      String[] stringArray0 = new String[5];
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test
  public void test298()  throws Throwable  {
      String string0 = "";
      String string1 = "52GC|6u&#|9K4O+";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeEnd(string0, string0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      
      String string3 = StringUtils.strip(string1, string2);
      assertEquals("52GC|6u&#|9K4O+", string3);
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotSame(string0, string3);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertSame(string2, string0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(string3, string1);
      assertSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
  }

  @Test
  public void test299()  throws Throwable  {
      String string0 = "Q";
      String string1 = StringUtils.chomp(string0);
      assertEquals("Q", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      Locale locale0 = new Locale(string1, string0, string0);
      assertEquals("q_Q_Q", locale0.toString());
      assertEquals("q", locale0.getLanguage());
      assertEquals("Q", locale0.getVariant());
      assertEquals("Q", locale0.getCountry());
      assertNotNull(locale0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      String string2 = locale0.getScript();
      assertEquals("", string2);
      assertEquals("q_Q_Q", locale0.toString());
      assertEquals("q", locale0.getLanguage());
      assertEquals("Q", locale0.getVariant());
      assertEquals("Q", locale0.getCountry());
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      String string3 = StringUtils.stripStart(string2, string0);
      assertEquals("", string3);
      assertEquals("q_Q_Q", locale0.toString());
      assertEquals("q", locale0.getLanguage());
      assertEquals("Q", locale0.getVariant());
      assertEquals("Q", locale0.getCountry());
      assertNotNull(string3);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string2, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
  }

  @Test
  public void test300()  throws Throwable  {
      String string0 = "";
      Locale locale0 = Locale.JAPAN;
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string1 = locale0.getISO3Language();
      assertEquals("jpn", string1);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringBetween(string0, string1, string0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string3 = StringUtils.stripStart(string2, string1);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertNull(string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test301()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.stripToEmpty(string0);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test
  public void test302()  throws Throwable  {
      String string0 = "52GC|6u&#|9K4O+";
      String[] stringArray0 = StringUtils.splitByCharacterType(string0);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.join((Object[]) stringArray0);
      assertEquals("52GC|6u&#|9K4O+", string1);
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.stripToNull(string1);
      assertEquals("52GC|6u&#|9K4O+", string2);
      assertNotNull(string2);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
  }

  @Test
  public void test303()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.removeEnd(string0, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      String string2 = StringUtils.stripToNull(string1);
      assertNull(string2);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test304()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.trimToEmpty(string0);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test
  public void test305()  throws Throwable  {
      String string0 = "64I!>^(+_q%<RXd64I!>^(+_q%<RXd";
      int int0 = 4706;
      String string1 = StringUtils.repeat(string0, string0, int0);
      String string2 = StringUtils.trimToNull(string1);
  }

  @Test
  public void test306()  throws Throwable  {
      String string0 = " ";
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test307()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertNotNull(locale0);
      
      String string0 = locale0.getISO3Language();
      assertEquals("jpn", string0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) string0);
      assertTrue(boolean0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
  }

  @Test
  public void test308()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test309()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.substringAfter(string0, string0);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isBlank((CharSequence) string1);
      assertTrue(boolean0);
  }

  @Test
  public void test310()  throws Throwable  {
      String string0 = "The stripAccents(CharSequence) method requires at least Java6, but got: ";
      String string1 = StringUtils.chomp(string0);
      assertEquals("The stripAccents(CharSequence) method requires at least Java6, but got: ", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) string1);
      assertTrue(boolean0);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test311()  throws Throwable  {
      String string0 = "'ZP, !'";
      String string1 = StringUtils.substringBetween(string0, string0, string0);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) string1);
      assertFalse(boolean0);
  }

  @Test
  public void test312()  throws Throwable  {
      String string0 = ";?OScW9b= e!-{\\E";
      String string1 = null;
      String string2 = StringUtils.replaceChars(string0, string0, string1);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) string2, string2);
      assertEquals((-1), int0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
  }

  @Test
  public void test313()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string0 = locale0.getDisplayCountry();
      assertEquals("", string0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) string0, (CharSequence) string0);
      assertEquals(0, int0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      
      int int1 = StringUtils.lastOrdinalIndexOf((CharSequence) string0, (CharSequence) string0, int0);
      assertEquals((-1), int1);
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test314()  throws Throwable  {
      String string0 = "\\p{InCombiningDiacriticalMarks}+";
      int int0 = 3;
      String string1 = StringUtils.leftPad(string0, int0);
      assertEquals("\\p{InCombiningDiacriticalMarks}+", string1);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test
  public void test315()  throws Throwable  {
      String string0 = "Gj+*p3)Nk8@c!t,J";
      int int0 = 0;
      String string1 = StringUtils.center(string0, int0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test316()  throws Throwable  {
      String string0 = "64I!>^(+_q%<RXd64I!>^(+_q%<RXd";
      int int0 = 4706;
      String string1 = StringUtils.repeat(string0, string0, int0);
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string1, string1);
  }

  @Test
  public void test317()  throws Throwable  {
      String string0 = "Q";
      int int0 = 297;
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, string0, int0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test318()  throws Throwable  {
      String string0 = "<[\"";
      int int0 = 0;
      String string1 = StringUtils.swapCase(string0);
      assertEquals("<[\"", string1);
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string0, string1, int0);
      assertNotNull(stringArray0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test319()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
  }

  @Test
  public void test320()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      String string0 = sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string0, string0);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(stringArray0);
  }

  @Test
  public void test321()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      String string0 = sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) string0, (CharSequence) string0);
      assertTrue(boolean0);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
  }

  @Test
  public void test322()  throws Throwable  {
      String string0 = ";?OScW9b= e!-{\\E";
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test323()  throws Throwable  {
      char char0 = ',';
      String string0 = "e0XZS(S";
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string0, string0, (int) char0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test324()  throws Throwable  {
      String string0 = "'&cAD_*fqQ5vy-$g";
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) string0, charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test325()  throws Throwable  {
      String string0 = "'ZP, !'";
      String string1 = StringUtils.substringBetween(string0, string0, string0);
      assertNull(string1);
      
      char char0 = 'l';
      String string2 = StringUtils.abbreviate(string1, (int) char0);
      assertNull(string2);
  }

  @Test
  public void test326()  throws Throwable  {
      CharSequence charSequence0 = null;
      boolean boolean0 = StringUtils.startsWithIgnoreCase(charSequence0, charSequence0);
      assertTrue(boolean0);
  }

  @Test
  public void test327()  throws Throwable  {
      String string0 = "dUp6x!F(=<}7Mm]P*";
      String string1 = StringUtils.substringBetween(string0, string0);
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string1, string1);
      assertNull(stringArray0);
  }
}
