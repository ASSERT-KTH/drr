/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:41:38 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*;
import org.junit.Test;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.OutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.io.Writer;
import org.apache.commons.lang.StringEscapeUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;


public class StringEscapeUtilsEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.escapeSql(string0);
      assertNull(string1);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "k[v.9>uT`Z3\\x/8'";
      String string1 = StringEscapeUtils.escapeSql(string0);
      assertNotNull(string1);
      assertEquals("k[v.9>uT`Z3\\x/8''", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "!\"~e,<O&,Q}.RORm7!s";
      String string1 = StringEscapeUtils.escapeJava(string0);
      assertNotNull(string1);
      assertEquals("!\\\"~e,<O&,Q}.RORm7!s", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = StringEscapeUtils.unescapeXml(string1);
      assertNotNull(string2);
      assertEquals("!\\\"~e,<O&,Q}.RORm7!s", string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = null;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      StringEscapeUtils.unescapeXml((Writer) charArrayWriter0, string0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "Jr0.Q(fT{l>";
      Writer writer0 = null;
      // Undeclared exception!
      try {
        StringEscapeUtils.unescapeXml(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null.
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "y&=Te\\t&OW";
      String string1 = StringEscapeUtils.unescapeJava(string0);
      assertNotNull(string1);
      assertEquals("y&=Te\t&OW", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      StringEscapeUtils.unescapeXml((Writer) charArrayWriter0, string1);
      assertEquals(9, charArrayWriter0.size());
      assertEquals("y&=Te\t&OW", charArrayWriter0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.escapeXml(string0);
      assertNull(string1);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "!\"~e,<O&,Q}.RORm7!s";
      String string1 = StringEscapeUtils.escapeXml(string0);
      assertNotNull(string1);
      assertEquals("!&quot;~e,&lt;O&amp;,Q}.RORm7!s", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test08()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      String string0 = null;
      StringEscapeUtils.escapeXml((Writer) stringWriter0, string0);
      assertEquals("", stringWriter0.toString());
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = null;
      Writer writer0 = null;
      // Undeclared exception!
      try {
        StringEscapeUtils.escapeXml(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null.
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "!\"~e,<O&,Q}.RORm7!s";
      String string1 = StringEscapeUtils.escapeJava(string0);
      assertNotNull(string1);
      assertEquals("!\\\"~e,<O&,Q}.RORm7!s", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string1);
      assertNotNull(mockPrintWriter0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      StringEscapeUtils.escapeXml((Writer) mockPrintWriter0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((OutputStream) byteArrayOutputStream0);
      assertNotNull(mockPrintWriter0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      StringEscapeUtils.unescapeHtml((Writer) mockPrintWriter0, string0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test
  public void test12()  throws Throwable  {
      Writer writer0 = null;
      String string0 = "[+p2UP=*3\\2m@q3n&\\e";
      String string1 = StringEscapeUtils.unescapeJava(string0);
      assertNotNull(string1);
      assertEquals("[+p2UP=*32m@q3n&e", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      // Undeclared exception!
      try {
        StringEscapeUtils.unescapeHtml(writer0, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null.
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.unescapeXml(string0);
      assertNull(string1);
      
      String string2 = StringEscapeUtils.unescapeHtml(string1);
      assertNull(string2);
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "\\b}-u";
      String string1 = StringEscapeUtils.unescapeHtml(string0);
      assertNotNull(string1);
      assertEquals("\\b}-u", string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = null;
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      assertEquals(false, pipedReader0.markSupported());
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      assertEquals(false, pipedReader0.markSupported());
      assertEquals(false, pipedReader0.ready());
      
      BufferedWriter bufferedWriter0 = new BufferedWriter((Writer) pipedWriter0);
      assertNotNull(bufferedWriter0);
      assertEquals(false, pipedReader0.markSupported());
      assertEquals(false, pipedReader0.ready());
      
      StringEscapeUtils.escapeHtml((Writer) bufferedWriter0, string0);
      assertEquals(false, pipedReader0.markSupported());
      assertEquals(false, pipedReader0.ready());
  }

  @Test
  public void test16()  throws Throwable  {
      Writer writer0 = null;
      String string0 = " i%o670)\"jtme";
      // Undeclared exception!
      try {
        StringEscapeUtils.escapeHtml(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null.
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.escapeHtml(string0);
      assertNull(string1);
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "!\"~e,<O&,Q}.RORm7!s";
      String string1 = StringEscapeUtils.escapeHtml(string0);
      assertNotNull(string1);
      assertEquals("!&quot;~e,&lt;O&amp;,Q}.RORm7!s", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "XoE;.UB{cSf\\";
      String string1 = StringEscapeUtils.unescapeJava(string0);
      assertNotNull(string1);
      assertEquals("XoE;.UB{cSf\\", string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "6X6\\r";
      String string1 = StringEscapeUtils.unescapeJava(string0);
      assertNotNull(string1);
      assertEquals("6X6\r", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "'";
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0);
      assertNotNull(mockFileWriter0);
      
      String string1 = "MdtOOv-zTk\\n1>D (W";
      assertNotSame(string1, string0);
      
      StringEscapeUtils.unescapeJavaScript((Writer) mockFileWriter0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "\\b}-u";
      String string1 = StringEscapeUtils.unescapeJavaScript(string0);
      assertNotNull(string1);
      assertEquals("\b}-u", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "\\u0";
      String string1 = StringEscapeUtils.escapeJavaScript(string0);
      assertNotNull(string1);
      assertEquals("\\\\u0", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = StringEscapeUtils.unescapeJava(string1);
      assertNotNull(string2);
      assertEquals("\\u0", string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = "7~%\\',h`AX!4\\hJ";
      String string1 = StringEscapeUtils.unescapeJava(string0);
      assertNotNull(string1);
      assertEquals("7~%',h`AX!4hJ", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = "!\"~e,<O&,Q}.RORm7!s";
      String string1 = StringEscapeUtils.escapeJava(string0);
      assertNotNull(string1);
      assertEquals("!\\\"~e,<O&,Q}.RORm7!s", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string1);
      assertNotNull(mockPrintWriter0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      StringEscapeUtils.unescapeJava((Writer) mockPrintWriter0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = null;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      StringEscapeUtils.unescapeJava((Writer) charArrayWriter0, string0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
  }

  @Test
  public void test27()  throws Throwable  {
      Writer writer0 = null;
      String string0 = "";
      // Undeclared exception!
      try {
        StringEscapeUtils.unescapeJava(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.unescapeJava(string0);
      assertNull(string1);
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.unescapeXml(string0);
      assertNull(string1);
      
      Writer writer0 = null;
      // Undeclared exception!
      try {
        StringEscapeUtils.escapeJava(writer0, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.escapeJavaScript(string0);
      assertNull(string1);
  }

  @Test
  public void test31()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.unescapeXml(string0);
      assertNull(string1);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((OutputStream) byteArrayOutputStream0);
      assertNotNull(mockPrintWriter0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      StringEscapeUtils.escapeJava((Writer) mockPrintWriter0, string1);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
  }

  @Test
  public void test32()  throws Throwable  {
      String string0 = "'";
      String string1 = StringEscapeUtils.escapeJava(string0);
      assertNotNull(string1);
      assertEquals("'", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test33()  throws Throwable  {
      StringEscapeUtils stringEscapeUtils0 = new StringEscapeUtils();
      assertNotNull(stringEscapeUtils0);
  }

  @Test
  public void test34()  throws Throwable  {
      String string0 = "Nq1<w\\ubFF=_)X%";
      // Undeclared exception!
      try {
        String string1 = StringEscapeUtils.unescapeJavaScript(string0);
        fail("Expecting exception: VerifyError");
      
      } catch(VerifyError e) {
         //
         // (class: org/apache/commons/lang/exception/NestableRuntimeException, method: getMessage signature: (I)Ljava/lang/String;) Illegal use of nonvirtual function call
         //
      }
  }

  @Test
  public void test35()  throws Throwable  {
      String string0 = "k[v.9>uT`Z3\\x/8'";
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0);
      assertNotNull(mockFileWriter0);
      
      StringEscapeUtils.escapeJavaScript((Writer) mockFileWriter0, string0);
  }

  @Test
  public void test36()  throws Throwable  {
      String string0 = " \t\r\n\b";
      String string1 = StringEscapeUtils.escapeJavaScript(string0);
      assertNotNull(string1);
      assertEquals(" \\t\\r\\n\\b", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }
}
