/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:23:04 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*;
import org.junit.Test;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Locale;
import org.apache.commons.lang.StringEscapeUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;


public class StringEscapeUtilsEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.unescapeHtml(string0);
      assertNull(string1);
      
      String string2 = StringEscapeUtils.escapeSql(string1);
      assertNull(string2);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "";
      String string1 = StringEscapeUtils.escapeSql(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.unescapeXml(string0);
      assertNull(string1);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "\\u`000";
      String string1 = StringEscapeUtils.unescapeXml(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      assertEquals("\\u`000", string1);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "\\u`000";
      MockFile mockFile0 = (MockFile)MockFile.createTempFile(string0, string0);
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((File) mockFile0);
      assertNotNull(mockPrintWriter0);
      
      StringEscapeUtils.unescapeXml((Writer) mockPrintWriter0, string0);
  }

  @Test
  public void test05()  throws Throwable  {
      Writer writer0 = null;
      String string0 = "uBl}5r;${3A^;j";
      // Undeclared exception!
      try {
        StringEscapeUtils.unescapeXml(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null.
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      String string0 = null;
      StringEscapeUtils.unescapeXml((Writer) charArrayWriter0, string0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.escapeXml(string0);
      assertNull(string1);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "\t\r\n\b";
      String string1 = StringEscapeUtils.escapeXml(string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("\t\r\n\b", string1);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.unescapeHtml(string0);
      assertNull(string1);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringEscapeUtils.escapeXml((Writer) stringWriter0, string1);
      assertEquals("", stringWriter0.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "J\\s*#^_n";
      String string1 = StringEscapeUtils.unescapeJavaScript(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("Js*#^_n", string1);
      
      Writer writer0 = null;
      // Undeclared exception!
      try {
        StringEscapeUtils.escapeXml(writer0, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null.
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "\\u`000";
      MockFile mockFile0 = (MockFile)MockFile.createTempFile(string0, string0);
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((File) mockFile0);
      assertNotNull(mockPrintWriter0);
      
      String string1 = null;
      StringEscapeUtils.unescapeHtml((Writer) mockPrintWriter0, string1);
  }

  @Test
  public void test12()  throws Throwable  {
      Writer writer0 = null;
      String string0 = "The Write:Emust not be null.";
      // Undeclared exception!
      try {
        StringEscapeUtils.unescapeHtml(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null.
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "\t\r\n\b";
      String string1 = StringEscapeUtils.escapeJavaScript(string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertEquals("\\t\\r\\n\\b", string1);
      
      String string2 = StringEscapeUtils.unescapeHtml(string1);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotNull(string2);
      assertEquals("\\t\\r\\n\\b", string2);
  }

  @Test
  public void test14()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      String string0 = null;
      StringEscapeUtils.escapeHtml((Writer) charArrayWriter0, string0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
  }

  @Test
  public void test15()  throws Throwable  {
      Writer writer0 = null;
      String string0 = "The Mriter must 3o= be null.";
      // Undeclared exception!
      try {
        StringEscapeUtils.escapeHtml(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null.
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.escapeHtml(string0);
      assertNull(string1);
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "\\u`000";
      String string1 = StringEscapeUtils.escapeHtml(string0);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertEquals("\\u`000", string1);
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "'}$5NMoum\\";
      String string1 = StringEscapeUtils.unescapeJava(string0);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertEquals("'}$5NMoum\\", string1);
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "\t\r\n\b";
      String string1 = StringEscapeUtils.escapeJavaScript(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("\\t\\r\\n\\b", string1);
      
      String string2 = StringEscapeUtils.unescapeJavaScript(string1);
      assertFalse(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotNull(string2);
      assertEquals("\t\r\n\b", string2);
  }

  @Test
  public void test20()  throws Throwable  {
      int int0 = 4;
      String string0 = "\\\\nk;>L_A+B'8>";
      StringWriter stringWriter0 = new StringWriter(int0);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringEscapeUtils.unescapeJavaScript((Writer) stringWriter0, string0);
      assertEquals("\\nk;>L_A+B'8>", stringWriter0.toString());
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "b\" cZ'EI92sC;X6xuWQd";
      String string1 = StringEscapeUtils.escapeJavaScript(string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertEquals("b\\\" cZ\\'EI92sC;X6xuWQd", string1);
      
      String string2 = StringEscapeUtils.unescapeJava(string1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotNull(string2);
      assertEquals("b\" cZ'EI92sC;X6xuWQd", string2);
  }

  @Test
  public void test22()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      String string0 = "\\uK@";
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) string0);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertNotNull(charArrayWriter1);
      assertEquals("\\uK@", charArrayWriter1.toString());
      assertEquals(4, charArrayWriter1.size());
      assertEquals("\\uK@", charArrayWriter0.toString());
      assertEquals(4, charArrayWriter0.size());
      
      StringEscapeUtils.escapeXml((Writer) charArrayWriter0, string0);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertEquals(8, charArrayWriter0.size());
      assertEquals("\\uK@\\uK@", charArrayWriter0.toString());
      
      String string1 = charArrayWriter0.toString();
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertNotNull(string1);
      assertEquals("\\uK@\\uK@", string1);
      assertEquals(8, charArrayWriter0.size());
      assertEquals("\\uK@\\uK@", charArrayWriter0.toString());
      
      // Undeclared exception!
      try {
        StringEscapeUtils.unescapeJavaScript((Writer) charArrayWriter0, string1);
        fail("Expecting exception: VerifyError");
      
      } catch(VerifyError e) {
         //
         // (class: org/apache/commons/lang/exception/NestableRuntimeException, method: getMessage signature: ()Ljava/lang/String;) Illegal use of nonvirtual function call
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = null;
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringEscapeUtils.unescapeJavaScript((Writer) stringWriter0, string0);
      assertEquals("", stringWriter0.toString());
  }

  @Test
  public void test24()  throws Throwable  {
      Writer writer0 = null;
      String string0 = "";
      // Undeclared exception!
      try {
        StringEscapeUtils.unescapeJavaScript(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = "b\" cZ'EI92sC;X6xuWQd";
      String string1 = StringEscapeUtils.escapeJava(string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertEquals("b\\\" cZ'EI92sC;X6xuWQd", string1);
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = "hhHLI#vH{^k/\\f.rz(*!";
      String string1 = StringEscapeUtils.unescapeJavaScript(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("hhHLI#vH{^k/\f.rz(*!", string1);
      
      String string2 = StringEscapeUtils.escapeJavaScript(string1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotNull(string2);
      assertEquals("hhHLI#vH{^k\\/\\f.rz(*!", string2);
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = null;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      StringEscapeUtils.escapeJava((Writer) charArrayWriter0, string0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
  }

  @Test
  public void test28()  throws Throwable  {
      Writer writer0 = null;
      String string0 = "";
      // Undeclared exception!
      try {
        StringEscapeUtils.escapeJavaScript(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.escapeJava(string0);
      assertNull(string1);
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = "\\u`000";
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      StringEscapeUtils.escapeJava((Writer) charArrayWriter0, string0);
      assertEquals(7, charArrayWriter0.size());
      assertEquals("\\\\u`000", charArrayWriter0.toString());
  }

  @Test
  public void test31()  throws Throwable  {
      StringEscapeUtils stringEscapeUtils0 = new StringEscapeUtils();
      assertNotNull(stringEscapeUtils0);
  }

  @Test
  public void test32()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.unescapeJavaScript(string0);
      assertNull(string1);
  }

  @Test
  public void test33() {}
//   @Test
//   public void test33()  throws Throwable  {
//       Locale locale0 = Locale.KOREA;
//       assertNotNull(locale0);
//       assertEquals("ko", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("kor", locale0.getISO3Language());
//       assertEquals("KR", locale0.getCountry());
//       assertEquals("KOR", locale0.getISO3Country());
//       assertEquals("ko_KR", locale0.toString());
//       
//       String string0 = locale0.getDisplayCountry();
//       assertNotNull(string0);
//       assertEquals("\u5357\u97D3", string0);
//       assertEquals("ko", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("kor", locale0.getISO3Language());
//       assertEquals("KR", locale0.getCountry());
//       assertEquals("KOR", locale0.getISO3Country());
//       assertEquals("ko_KR", locale0.toString());
//       
//       String string1 = StringEscapeUtils.escapeJava(string0);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//       assertNotNull(string1);
//       assertEquals("\\u5357\\u97D3", string1);
//       assertEquals("ko", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("kor", locale0.getISO3Language());
//       assertEquals("KR", locale0.getCountry());
//       assertEquals("KOR", locale0.getISO3Country());
//       assertEquals("ko_KR", locale0.toString());
//   }
}
