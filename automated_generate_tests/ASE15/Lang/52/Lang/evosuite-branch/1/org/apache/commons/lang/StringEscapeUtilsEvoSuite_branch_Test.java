/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:31:15 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Locale;
import org.apache.commons.lang.StringEscapeUtils;



import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;

import org.junit.runner.RunWith;


public class StringEscapeUtilsEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "M XiUy[RK( P.U.q@\"12";
      String string1 = StringEscapeUtils.escapeXml(string0);
      assertEquals("M XiUy[RK( P.U.q@&quot;12", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = StringEscapeUtils.escapeSql(string1);
      assertEquals("M XiUy[RK( P.U.q@&quot;12", string2);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.unescapeXml(string0);
      assertNull(string1);
  }

  @Test
  public void test02()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string0 = locale0.getDisplayLanguage(locale0);
      assertEquals("\u4E2D\u6587", string0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(string0);
      
      String string1 = StringEscapeUtils.unescapeXml(string0);
      assertEquals("\u4E2D\u6587", string1);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test03()  throws Throwable  {
      char char0 = 'E';
      StringWriter stringWriter0 = new StringWriter((int) char0);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      String string0 = null;
      StringEscapeUtils.unescapeXml((Writer) stringWriter0, string0);
      assertEquals("", stringWriter0.toString());
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "ieAjWE";
      Writer writer0 = null;
      // Undeclared exception!
      try {
        StringEscapeUtils.unescapeXml(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null.
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string0 = locale0.getDisplayLanguage(locale0);
      assertEquals("\u4E2D\u6587", string0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(string0);
      
      StringEscapeUtils.unescapeXml((Writer) stringWriter0, string0);
      assertEquals("\u4E2D\u6587", stringWriter0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.escapeSql(string0);
      assertNull(string1);
      
      String string2 = StringEscapeUtils.escapeXml(string1);
      assertNull(string2);
  }

  @Test
  public void test07()  throws Throwable  {
      char char0 = 'E';
      String string0 = null;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter((int) char0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      StringEscapeUtils.escapeXml((Writer) charArrayWriter0, string0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
  }

  @Test
  public void test08()  throws Throwable  {
      Writer writer0 = null;
      String string0 = "OElig";
      // Undeclared exception!
      try {
        StringEscapeUtils.escapeXml(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null.
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "ux00";
      String string1 = StringEscapeUtils.escapeHtml(string0);
      assertEquals("ux00", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringEscapeUtils.escapeXml((Writer) stringWriter0, string1);
      assertEquals("ux00", stringWriter0.toString());
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test10()  throws Throwable  {
      char char0 = 'E';
      String string0 = null;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter((int) char0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      StringEscapeUtils.unescapeHtml((Writer) charArrayWriter0, string0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
  }

  @Test
  public void test11()  throws Throwable  {
      Writer writer0 = null;
      String string0 = "*#oGq";
      // Undeclared exception!
      try {
        StringEscapeUtils.unescapeHtml(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null.
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.unescapeHtml(string0);
      assertNull(string1);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "ux00";
      String string1 = StringEscapeUtils.unescapeHtml(string0);
      assertEquals("ux00", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test14()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      String string0 = null;
      StringEscapeUtils.escapeHtml((Writer) stringWriter0, string0);
      assertEquals("", stringWriter0.toString());
  }

  @Test
  public void test15()  throws Throwable  {
      Writer writer0 = null;
      String string0 = "";
      // Undeclared exception!
      try {
        StringEscapeUtils.escapeHtml(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null.
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.escapeHtml(string0);
      assertNull(string1);
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "ux00";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter((File) mockFile0);
      assertNotNull(mockFileWriter0);
      
      String string1 = ":z/K!dJ>0_\\";
      assertNotSame(string1, string0);
      
      StringEscapeUtils.unescapeJava((Writer) mockFileWriter0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "v{to\\d{ F";
      String string1 = StringEscapeUtils.unescapeJava(string0);
      assertEquals("v{tod{ F", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "UtXA\\f";
      String string1 = StringEscapeUtils.unescapeJava(string0);
      assertEquals("UtXA\f", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = " $\t\r\n\b";
      String string1 = StringEscapeUtils.escapeJava(string0);
      assertEquals(" $\\t\\r\\n\\b", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = StringEscapeUtils.unescapeJava(string1);
      assertEquals(" $\t\r\n\b", string2);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "\"m3pvWV\"+R\\P]E";
      String string1 = StringEscapeUtils.escapeJava(string0);
      assertEquals("\\\"m3pvWV\\\"+R\\\\P]E", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = StringEscapeUtils.unescapeJavaScript(string1);
      assertEquals("\"m3pvWV\"+R\\P]E", string2);
      assertNotNull(string2);
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "33[O_";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter((File) mockFile0);
      assertNotNull(mockFileWriter0);
      
      String string1 = "\\u0070";
      assertNotSame(string1, string0);
      
      StringEscapeUtils.unescapeJavaScript((Writer) mockFileWriter0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test23()  throws Throwable  {
      char char0 = 'E';
      StringWriter stringWriter0 = new StringWriter((int) char0);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      String string0 = null;
      StringEscapeUtils.unescapeJava((Writer) stringWriter0, string0);
      assertEquals("", stringWriter0.toString());
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = "\"k%v< ~\\'+F";
      Writer writer0 = null;
      // Undeclared exception!
      try {
        StringEscapeUtils.unescapeJava(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.unescapeJavaScript(string0);
      assertNull(string1);
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = "ux00";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter((File) mockFile0);
      assertNotNull(mockFileWriter0);
      
      String string1 = ":z/K!dJ>0_\\";
      assertNotSame(string1, string0);
      
      StringEscapeUtils.escapeJavaScript((Writer) mockFileWriter0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = 28;
      StringWriter stringWriter0 = new StringWriter(int0);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      stringWriter0.write(int0);
      assertEquals("\u001C", stringWriter0.toString());
      
      String string0 = stringWriter0.toString();
      assertEquals("\u001C", string0);
      assertEquals("\u001C", stringWriter0.toString());
      assertNotNull(string0);
      
      StringEscapeUtils.escapeJavaScript((Writer) stringWriter0, string0);
      assertEquals("\u001C\\u001C", stringWriter0.toString());
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = 0;
      StringWriter stringWriter0 = new StringWriter(int0);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      stringWriter0.write(int0);
      assertEquals("\u0000", stringWriter0.toString());
      
      String string0 = stringWriter0.toString();
      assertEquals("\u0000", string0);
      assertEquals("\u0000", stringWriter0.toString());
      assertNotNull(string0);
      
      StringEscapeUtils.escapeJavaScript((Writer) stringWriter0, string0);
      assertEquals("\u0000\\u0000", stringWriter0.toString());
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = 1370;
      StringWriter stringWriter0 = new StringWriter(int0);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      stringWriter0.write(int0);
      assertEquals("\u055A", stringWriter0.toString());
      
      String string0 = stringWriter0.toString();
      assertEquals("\u055A", string0);
      assertEquals("\u055A", stringWriter0.toString());
      assertNotNull(string0);
      
      StringEscapeUtils.escapeJavaScript((Writer) stringWriter0, string0);
      assertEquals("\u055A\\u055A", stringWriter0.toString());
  }

  @Test
  public void test30()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      String string0 = locale0.getDisplayLanguage(locale0);
      assertEquals("\u4E2D\u6587", string0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(string0);
      
      String string1 = StringEscapeUtils.escapeJava(string0);
      assertEquals("\\u4E2D\\u6587", string1);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test31()  throws Throwable  {
      Writer writer0 = null;
      String string0 = "s9";
      // Undeclared exception!
      try {
        StringEscapeUtils.escapeJava(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.escapeJavaScript(string0);
      assertNull(string1);
  }

  @Test
  public void test33()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      String string0 = null;
      StringEscapeUtils.escapeJava((Writer) stringWriter0, string0);
      assertEquals("", stringWriter0.toString());
  }

  @Test
  public void test34()  throws Throwable  {
      String string0 = "\"k%v< ~\\'+F";
      String string1 = StringEscapeUtils.unescapeJavaScript(string0);
      assertEquals("\"k%v< ~'+F", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = StringEscapeUtils.escapeJava(string1);
      assertEquals("\\\"k%v< ~'+F", string2);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
  }

  @Test
  public void test35()  throws Throwable  {
      StringEscapeUtils stringEscapeUtils0 = new StringEscapeUtils();
      assertNotNull(stringEscapeUtils0);
  }

  @Test
  public void test36()  throws Throwable  {
      int int0 = 148;
      StringWriter stringWriter0 = new StringWriter(int0);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      stringWriter0.write(int0);
      assertEquals("\u0094", stringWriter0.toString());
      
      String string0 = stringWriter0.toString();
      assertEquals("\u0094", string0);
      assertEquals("\u0094", stringWriter0.toString());
      assertNotNull(string0);
      
      StringEscapeUtils.escapeJavaScript((Writer) stringWriter0, string0);
      assertEquals("\u0094\\u0094", stringWriter0.toString());
  }

  @Test
  public void test37()  throws Throwable  {
      String string0 = "\"k%v< ~\\'+F";
      String string1 = StringEscapeUtils.unescapeJavaScript(string0);
      assertEquals("\"k%v< ~'+F", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = StringEscapeUtils.escapeJavaScript(string1);
      assertEquals("\\\"k%v< ~\\'+F", string2);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
  }
}
