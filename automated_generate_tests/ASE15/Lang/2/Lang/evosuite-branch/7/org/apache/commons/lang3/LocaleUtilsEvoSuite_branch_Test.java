/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:49:37 GMT 2014
 */

package org.apache.commons.lang3;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.lang3.LocaleUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;


public class LocaleUtilsEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      String string0 = null;
      List<Locale> list0 = LocaleUtils.countriesByLanguage(string0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "th";
      List<Locale> list0 = LocaleUtils.countriesByLanguage(string0);
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = null;
      List<Locale> list0 = LocaleUtils.languagesByCountry(string0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "NO";
      List<Locale> list0 = LocaleUtils.languagesByCountry(string0);
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = null;
      Locale locale0 = LocaleUtils.toLocale(string0);
      assertNull(locale0);
      
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      assertFalse(boolean0);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "NO";
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Locale locale1 = new Locale(string0, string0, string0);
      assertNotSame(locale1, locale0);
      assertEquals("NOR", locale1.getISO3Country());
      assertEquals("no", locale1.getLanguage());
      assertEquals("nor", locale1.getISO3Language());
      assertEquals("no_NO_NO", locale1.toString());
      assertEquals("NO", locale1.getVariant());
      assertEquals("NO", locale1.getCountry());
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      
      List<Locale> list0 = LocaleUtils.localeLookupList(locale1, locale0);
      assertNotSame(locale1, locale0);
      assertNotSame(locale0, locale1);
      assertEquals("NOR", locale1.getISO3Country());
      assertEquals("no", locale1.getLanguage());
      assertEquals("nor", locale1.getISO3Language());
      assertEquals("no_NO_NO", locale1.toString());
      assertEquals("NO", locale1.getVariant());
      assertEquals("NO", locale1.getCountry());
      assertEquals(false, list0.isEmpty());
      assertEquals(4, list0.size());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(list0);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale0.equals((Object)locale1));
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = null;
      Locale locale0 = LocaleUtils.toLocale(string0);
      assertNull(locale0);
      
      List<Locale> list0 = LocaleUtils.localeLookupList(locale0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "wa_CZ_5x";
      Locale locale0 = LocaleUtils.toLocale(string0);
      assertEquals("wa", locale0.getLanguage());
      assertEquals("wa_CZ_5x", locale0.toString());
      assertEquals("wln", locale0.getISO3Language());
      assertEquals("CZ", locale0.getCountry());
      assertEquals("CZE", locale0.getISO3Country());
      assertEquals("5x", locale0.getVariant());
      assertNotNull(locale0);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "wa_CZ=hw4";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: wa_CZ=hw4
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "wa_C6bw";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: wa_C6bw
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "bb_cyg1";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: bb_cyg1
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "wa_*CZA6w4";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: wa_*CZA6w4
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "wa__CZ6bw4";
      Locale locale0 = LocaleUtils.toLocale(string0);
      assertEquals("", locale0.getCountry());
      assertEquals("wa", locale0.getLanguage());
      assertEquals("wa__CZ6bw4", locale0.toString());
      assertEquals("wln", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("CZ6bw4", locale0.getVariant());
      assertNotNull(locale0);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "ey'Fa*dg`r,IjOlEAsV0";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: ey'Fa*dg`r,IjOlEAsV0
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "d}U+0++IC[Qw7w";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: d}U+0++IC[Qw7w
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "a`d(MZ'B8|";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: a`d(MZ'B8|
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "~4\"b1Gy$\"0}Tm]R(";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: ~4\"b1Gy$\"0}Tm]R(
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "RO";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: RO
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: 
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "wa_Ct6bw4";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: wa_Ct6bw4
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "th";
      Locale locale0 = LocaleUtils.toLocale(string0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("th", locale0.toString());
      assertEquals("th", locale0.getLanguage());
      assertEquals("tha", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
  }

  @Test
  public void test21()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string0 = locale0.toString();
      assertEquals("fr_CA", string0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(string0);
      
      Locale locale1 = LocaleUtils.toLocale(string0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CA", locale1.getCountry());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertNotNull(locale1);
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(locale1.equals((Object)locale0));
  }

  @Test
  public void test22()  throws Throwable  {
      Set<Locale> set0 = LocaleUtils.availableLocaleSet();
      assertEquals(false, set0.isEmpty());
      assertEquals(156, set0.size());
      assertNotNull(set0);
  }

  @Test
  public void test23()  throws Throwable  {
      LocaleUtils localeUtils0 = new LocaleUtils();
      assertNotNull(localeUtils0);
  }

  @Test
  public void test24()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      assertTrue(boolean0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
  }

  @Test
  public void test25()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertNotNull(locale0);
      
      List<Locale> list0 = LocaleUtils.localeLookupList(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      assertNotNull(list0);
  }

  @Test
  public void test26()  throws Throwable  {
      LocaleUtils.SyncAvoid localeUtils_SyncAvoid0 = new LocaleUtils.SyncAvoid();
      assertNotNull(localeUtils_SyncAvoid0);
  }
}
