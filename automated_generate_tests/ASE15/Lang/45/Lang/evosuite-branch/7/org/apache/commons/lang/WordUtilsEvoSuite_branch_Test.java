/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:32:25 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.lang.WordUtils;



import org.junit.runner.RunWith;


public class WordUtilsEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      int int0 = (-1083);
      String string0 = " ";
      // Undeclared exception!
      try {
        String string1 = WordUtils.abbreviate(string0, int0, int0, string0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1083
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = " ";
      String string1 = WordUtils.swapCase(string0);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals(" ", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      char char0 = 'd';
      int int0 = (-632);
      String string2 = WordUtils.abbreviate(string1, int0, (int) char0, string1);
      assertTrue(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string0));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertNotNull(string2);
      assertEquals(" ", string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "path.sepzraor";
      String string1 = WordUtils.initials(string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("p", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      int int0 = (-982);
      int int1 = 2034;
      String string2 = WordUtils.abbreviate(string1, int1, int0, string1);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(int0 == int1);
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("p", string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "V@`t/";
      int int0 = 10;
      int int1 = (-1);
      String string1 = WordUtils.abbreviate(string0, int0, int1, string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(string1);
      assertEquals("V@`t/", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test04()  throws Throwable  {
      char char0 = 'e';
      String string0 = null;
      String string1 = WordUtils.abbreviate(string0, (int) char0, (int) char0, string0);
      assertNull(string1);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = " ";
      char[] charArray0 = new char[1];
      char char0 = ' ';
      charArray0[0] = char0;
      String string1 = WordUtils.initials(string0, charArray0);
      assertArrayEquals(new char[] {' '}, charArray0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "V@`t/";
      char[] charArray0 = new char[8];
      String string1 = WordUtils.initials(string0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("V", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "";
      int int0 = (-982);
      String string1 = WordUtils.abbreviate(string0, int0, int0, string0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      String string2 = WordUtils.initials(string1);
      assertNotNull(string2);
      assertEquals("", string2);
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string0, string2);
      assertSame(string0, string1);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = null;
      String string1 = WordUtils.initials(string0);
      assertNull(string1);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "o,N\"xb[29i:x";
      int int0 = 0;
      String string1 = WordUtils.abbreviate(string0, int0, int0, string0);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("o,N\"xb[29i:x", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = WordUtils.swapCase(string1);
      assertFalse(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("O,n\"XB[29I:X", string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "";
      String string1 = WordUtils.uncapitalize(string0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      String string2 = WordUtils.swapCase(string1);
      assertNotNull(string2);
      assertEquals("", string2);
      assertSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string0, string2);
      assertSame(string0, string1);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = " ";
      String string1 = WordUtils.uncapitalize(string0);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals(" ", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = null;
      char[] charArray0 = new char[1];
      String string1 = WordUtils.capitalize(string0, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNull(string1);
      
      String string2 = WordUtils.uncapitalize(string1, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNull(string2);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "";
      String string1 = WordUtils.capitalizeFully(string0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = null;
      char[] charArray0 = new char[1];
      String string1 = WordUtils.capitalizeFully(string0, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNull(string1);
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = " ";
      String string1 = WordUtils.swapCase(string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" ", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = WordUtils.capitalizeFully(string1);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertTrue(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(" ", string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "";
      int int0 = (-982);
      String string1 = WordUtils.abbreviate(string0, int0, int0, string0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      String string2 = WordUtils.capitalize(string1);
      assertNotNull(string2);
      assertEquals("", string2);
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string2, string0);
      assertSame(string2, string1);
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "o,N\"xb[29i:x";
      int int0 = 0;
      String string1 = WordUtils.abbreviate(string0, int0, int0, string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("o,N\"xb[29i:x", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = WordUtils.wrap(string1, int0);
      assertTrue(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string0));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("o,N\"xb[29i:x", string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "zAM8Z(*89.`";
      String string1 = "- -Nd 1d?I}";
      assertNotSame(string1, string0);
      
      int int0 = (-79);
      boolean boolean0 = true;
      String string2 = WordUtils.wrap(string1, int0, string0, boolean0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("-zAM8Z(*89.`-zAM8Z(*89.`NzAM8Z(*89.`dzAM8Z(*89.`1zAM8Z(*89.`dzAM8Z(*89.`?zAM8Z(*89.`IzAM8Z(*89.`}", string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = " ]@7)pH#}Pe.,' ";
      int int0 = 10;
      String string1 = WordUtils.wrap(string0, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("]@7)pH#}Pe.,'\n", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = null;
      String string1 = WordUtils.swapCase(string0);
      assertNull(string1);
      
      char char0 = ' ';
      String string2 = WordUtils.wrap(string1, (int) char0);
      assertNull(string2);
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "V@`t/";
      String string1 = WordUtils.uncapitalize(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("v@`t/", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "o,N\"xb[29i:x";
      int int0 = 0;
      String string1 = WordUtils.abbreviate(string0, int0, int0, string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("o,N\"xb[29i:x", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = WordUtils.capitalizeFully(string1);
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("O,n\"xb[29i:x", string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
  }

  @Test
  public void test23()  throws Throwable  {
      WordUtils wordUtils0 = new WordUtils();
      assertNotNull(wordUtils0);
  }
}
