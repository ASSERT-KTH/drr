/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:53:00 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.lang.WordUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class WordUtilsEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      int int0 = 0;
      String string0 = " ";
      String string1 = WordUtils.abbreviate(string0, int0, int0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(" ", string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "2B] &#;!`RX|en>";
      int int0 = (-53);
      // Undeclared exception!
      try {
        String string1 = WordUtils.abbreviate(string0, int0, int0, string0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -53
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "45Z|4ZpyG";
      int int0 = 3147;
      int int1 = (-1809);
      String string1 = WordUtils.abbreviate(string0, int0, int1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("45Z|4ZpyG", string1);
      assertFalse(int1 == int0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertNotNull(string1);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "bjavI.endrsfR/r.Rdrs";
      int int0 = (-1);
      String string1 = WordUtils.abbreviate(string0, int0, int0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("bjavI.endrsfR/r.Rdrs", string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "45Z|4ZpyG";
      int int0 = 3147;
      String string1 = WordUtils.abbreviate(string0, int0, int0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("45Z|4ZpyG", string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "";
      String string1 = "java.vm.specification.vendor";
      assertNotSame(string1, string0);
      
      int int0 = 26;
      String string2 = WordUtils.abbreviate(string1, int0, int0, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals("java.vm.specification.vend", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = null;
      char[] charArray0 = new char[9];
      int int0 = (-13);
      String string1 = WordUtils.abbreviate(string0, int0, (int) charArray0[4], string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(string1);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "";
      int int0 = 26;
      String string1 = WordUtils.abbreviate(string0, int0, int0, string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "0UFe_Y{sy";
      char[] charArray0 = new char[37];
      char char0 = '{';
      charArray0[3] = char0;
      String string1 = WordUtils.initials(string0, charArray0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("0", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = ".";
      String string1 = WordUtils.initials(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(".", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotNull(string1);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "";
      String string1 = WordUtils.swapCase(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "q\"7C#  %5mvjbfMvMmd";
      String string1 = WordUtils.swapCase(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("Q\"7c#  %5MVJBFmVmMD", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = null;
      String string1 = WordUtils.swapCase(string0);
      assertNull(string1);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = null;
      String string1 = WordUtils.initials(string0);
      assertNull(string1);
      
      char[] charArray0 = new char[9];
      String string2 = WordUtils.uncapitalize(string1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(string2);
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "";
      String string1 = WordUtils.capitalizeFully(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[9];
      String string2 = WordUtils.uncapitalize(string1, charArray0);
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string1, string2);
      assertSame(string1, string0);
      assertSame(string2, string0);
      assertSame(string2, string1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = null;
      String string1 = WordUtils.capitalizeFully(string0);
      assertNull(string1);
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "";
      String string1 = WordUtils.capitalizeFully(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = WordUtils.capitalize(string1);
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertSame(string2, string0);
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = null;
      String string1 = WordUtils.capitalize(string0);
      assertNull(string1);
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "eke4o";
      char[] charArray0 = new char[12];
      String string1 = WordUtils.capitalizeFully(string0, charArray0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("Eke4o", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
  }

  @Test
  public void test19()  throws Throwable  {
      char char0 = 'K';
      int int0 = (-4);
      String string0 = "q\"7C#  %5mvjbfMvMmd";
      String string1 = WordUtils.wrap(string0, (int) char0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("q\"7C#  %5mvjbfMvMmd", string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = true;
      String string2 = WordUtils.wrap(string1, int0, string1, boolean0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertEquals("qq\"7C#  %5mvjbfMvMmd\"q\"7C#  %5mvjbfMvMmd7q\"7C#  %5mvjbfMvMmdCq\"7C#  %5mvjbfMvMmd#q\"7C#  %5mvjbfMvMmd%q\"7C#  %5mvjbfMvMmd5q\"7C#  %5mvjbfMvMmdmq\"7C#  %5mvjbfMvMmdvq\"7C#  %5mvjbfMvMmdjq\"7C#  %5mvjbfMvMmdbq\"7C#  %5mvjbfMvMmdfq\"7C#  %5mvjbfMvMmdMq\"7C#  %5mvjbfMvMmdvq\"7C#  %5mvjbfMvMmdMq\"7C#  %5mvjbfMvMmdmq\"7C#  %5mvjbfMvMmdd", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test
  public void test20()  throws Throwable  {
      char char0 = 'K';
      int int0 = (-4);
      String string0 = "q\"7C#  %5mvjbfMvMmd";
      String string1 = WordUtils.wrap(string0, (int) char0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("q\"7C#  %5mvjbfMvMmd", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotNull(string1);
      
      String string2 = WordUtils.wrap(string1, int0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals("q\"7C#\n%5mvjbfMvMmd", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotNull(string2);
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = null;
      int int0 = 32;
      boolean boolean0 = true;
      String string1 = WordUtils.wrap(string0, int0, string0, boolean0);
      assertNull(string1);
  }

  @Test
  public void test22()  throws Throwable  {
      char char0 = 'K';
      String string0 = "q\"7C#  %5mvjbfMvMmd";
      String string1 = WordUtils.wrap(string0, (int) char0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("q\"7C#  %5mvjbfMvMmd", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotNull(string1);
      
      String string2 = WordUtils.uncapitalize(string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals("q\"7C#  %5mvjbfMvMmd", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "";
      String string1 = WordUtils.capitalizeFully(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = WordUtils.initials(string1);
      assertSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string1, string2);
      assertSame(string1, string0);
      assertSame(string2, string0);
      assertSame(string2, string1);
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test
  public void test24()  throws Throwable  {
      WordUtils wordUtils0 = new WordUtils();
      assertNotNull(wordUtils0);
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = "q\"7C#  %5mvjbfMvMmd";
      String string1 = WordUtils.capitalize(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("Q\"7C#  %5mvjbfMvMmd", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
  }
}
