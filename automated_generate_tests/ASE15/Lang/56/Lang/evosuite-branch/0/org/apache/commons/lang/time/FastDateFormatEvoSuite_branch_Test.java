/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:21:37 GMT 2014
 */

package org.apache.commons.lang.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.RoundingMode;
import java.text.AttributedCharacterIterator;
import java.text.DecimalFormat;
import java.text.FieldPosition;
import java.text.Format;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;


public class FastDateFormatEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
      assertEquals(34, fastDateFormat0.getMaxLengthEstimate());
      assertNotNull(fastDateFormat0);
      
      String string0 = fastDateFormat0.format((long) int0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
      assertEquals(34, fastDateFormat0.getMaxLengthEstimate());
      assertNotNull(string0);
      assertEquals("1970\u5E741\u67081\u65E5 \u661F\u671F\u56DB \u4E0A\u534812\u664200\u520600\u79D2 GMT", string0);
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, locale0);
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5'", fastDateFormat0.getPattern());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertNotNull(fastDateFormat0);
      
      int int1 = (-740);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int1, int0, int1, int0, int0, int0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-740,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-740,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(mockGregorianCalendar0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5'", fastDateFormat0.getPattern());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-85584038400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=744,MONTH=11,WEEK_OF_YEAR=51,WEEK_OF_MONTH=3,DAY_OF_MONTH=21,DAY_OF_YEAR=355,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertNotNull(string0);
      assertEquals("0744\u5E7412\u670821\u65E5", string0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test02() {}
//   @Test
//   public void test02()  throws Throwable  {
//       int int0 = 0;
//       Locale locale0 = null;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, locale0);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("EEEE, d. MMMM yyyy HH:mm' Uhr 'z", fastDateFormat0.getPattern());
//       assertEquals(47, fastDateFormat0.getMaxLengthEstimate());
//       assertNotNull(fastDateFormat0);
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertNotNull(mockGregorianCalendar0);
//       
//       String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("EEEE, d. MMMM yyyy HH:mm' Uhr 'z", fastDateFormat0.getPattern());
//       assertEquals(47, fastDateFormat0.getMaxLengthEstimate());
//       assertNotNull(string0);
//       assertEquals("Mittwoch, 31. Dezember 0002 00:00 Uhr GMT", string0);
//   }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "MMMM d, yyyy";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
      assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("MMMM d, yyyy", fastDateFormat0.getPattern());
      assertNotNull(fastDateFormat0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      TimeZone timeZone0 = null;
      FastDateFormat fastDateFormat1 = new FastDateFormat(string0, timeZone0, locale0);
      assertEquals("MMMM d, yyyy", fastDateFormat1.getPattern());
      assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
      assertEquals(0, fastDateFormat1.getMaxLengthEstimate());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertNotNull(fastDateFormat1);
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      
      boolean boolean0 = fastDateFormat0.equals((Object) fastDateFormat1);
      assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("MMMM d, yyyy", fastDateFormat0.getPattern());
      assertEquals("MMMM d, yyyy", fastDateFormat1.getPattern());
      assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
      assertEquals(0, fastDateFormat1.getMaxLengthEstimate());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertNotSame(fastDateFormat0, fastDateFormat1);
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertFalse(boolean0);
      assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
  }

  @Test
  public void test04() {}
//   @Test
//   public void test04()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0);
//       assertEquals(47, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("EEEE, d. MMMM yyyy HH:mm' Uhr 'z", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertNotNull(fastDateFormat0);
//       
//       Locale locale0 = Locale.ITALY;
//       assertEquals("ita", locale0.getISO3Language());
//       assertEquals("ITA", locale0.getISO3Country());
//       assertEquals("it", locale0.getLanguage());
//       assertEquals("IT", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       assertEquals("it_IT", locale0.toString());
//       assertNotNull(locale0);
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(int0, locale0);
//       assertEquals("ita", locale0.getISO3Language());
//       assertEquals("ITA", locale0.getISO3Country());
//       assertEquals("it", locale0.getLanguage());
//       assertEquals("IT", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       assertEquals("it_IT", locale0.toString());
//       assertEquals("EEEE d MMMM yyyy", fastDateFormat1.getPattern());
//       assertEquals(29, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertNotNull(fastDateFormat1);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       
//       boolean boolean0 = fastDateFormat0.equals((Object) fastDateFormat1);
//       assertEquals(47, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("EEEE, d. MMMM yyyy HH:mm' Uhr 'z", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("ita", locale0.getISO3Language());
//       assertEquals("ITA", locale0.getISO3Country());
//       assertEquals("it", locale0.getLanguage());
//       assertEquals("IT", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       assertEquals("it_IT", locale0.toString());
//       assertEquals("EEEE d MMMM yyyy", fastDateFormat1.getPattern());
//       assertEquals(29, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertNotSame(fastDateFormat0, fastDateFormat1);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertFalse(boolean0);
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//   }

  @Test
  public void test05() {}
//   @Test
//   public void test05()  throws Throwable  {
//       String string0 = "EEEE, d MMMM yyyy";
//       Locale locale0 = null;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("EEEE, d MMMM yyyy", fastDateFormat0.getPattern());
//       assertNotNull(fastDateFormat0);
//       
//       // Undeclared exception!
//       try {
//         AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator((Object) locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Unknown class: <null>
//          //
//       }
//   }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "";
      Locale locale0 = Locale.forLanguageTag(string0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
      assertEquals("", fastDateFormat0.getPattern());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertNotNull(fastDateFormat0);
      
      // Undeclared exception!
      try {
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator((Object) string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.lang.String
         //
      }
  }

  @Test
  public void test07() {}
//   @Test
//   public void test07()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0);
//       assertEquals("HH:mm' Uhr 'z", fastDateFormat0.getPattern());
//       assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertNotNull(fastDateFormat0);
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertNotNull(mockGregorianCalendar0);
//       
//       AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator((Object) mockGregorianCalendar0);
//       assertEquals(0, attributedCharacterIterator0.getRunStart());
//       assertEquals(0, attributedCharacterIterator0.getBeginIndex());
//       assertEquals(13, attributedCharacterIterator0.getRunLimit());
//       assertEquals(0, attributedCharacterIterator0.getIndex());
//       assertEquals(13, attributedCharacterIterator0.getEndIndex());
//       assertEquals("HH:mm' Uhr 'z", fastDateFormat0.getPattern());
//       assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertNotNull(attributedCharacterIterator0);
//   }

  @Test
  public void test08()  throws Throwable  {
      SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat();
      //  // Unstable assertion: assertEquals("tt.MM.uu HH:mm", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("dd.MM.yy HH:mm", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertNotNull(simpleDateFormat0);
      
      int int0 = 0;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0);
      //  // Unstable assertion: assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals("EEEE, d. MMMM yyyy", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals(32, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertNotNull(fastDateFormat0);
      
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)simpleDateFormat0.getCalendar();
      //  // Unstable assertion: assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(true, gregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=-1106289512199,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1934,MONTH=11,WEEK_OF_YEAR=50,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=345,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=21,SECOND=27,MILLISECOND=801,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals("tt.MM.uu HH:mm", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("dd.MM.yy HH:mm", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertNotNull(gregorianCalendar0);
      
      Date date0 = gregorianCalendar0.getTime();
      //  // Unstable assertion: assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(true, gregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=-1106289512199,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1934,MONTH=11,WEEK_OF_YEAR=50,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=345,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=21,SECOND=27,MILLISECOND=801,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals("Tue Dec 11 17:21:27 GMT 1934", date0.toString());
      //  // Unstable assertion: assertEquals("tt.MM.uu HH:mm", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("dd.MM.yy HH:mm", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertNotNull(date0);
      
      String string0 = fastDateFormat0.format((Object) date0);
      //  // Unstable assertion: assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(true, gregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=-1106289512199,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1934,MONTH=11,WEEK_OF_YEAR=50,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=345,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=21,SECOND=27,MILLISECOND=801,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals("EEEE, d. MMMM yyyy", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals(32, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("Tue Dec 11 17:21:27 GMT 1934", date0.toString());
      //  // Unstable assertion: assertEquals("tt.MM.uu HH:mm", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("dd.MM.yy HH:mm", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("Dienstag, 11. Dezember 1934", string0);
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.UK;
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, locale0);
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("HH:mm:ss 'o''clock' z", fastDateFormat0.getPattern());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertNotNull(fastDateFormat0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      int int1 = (-1);
      String string0 = "EEEE d MMMM yyyy";
      int int2 = (-955);
      Long long0 = new Long((long) int0);
      assertEquals(0L, (long)long0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      
      AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator((Object) long0);
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals(20, attributedCharacterIterator0.getEndIndex());
      assertEquals(0, attributedCharacterIterator0.getIndex());
      assertEquals(20, attributedCharacterIterator0.getRunLimit());
      assertEquals(0, attributedCharacterIterator0.getBeginIndex());
      assertEquals(0, attributedCharacterIterator0.getRunStart());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("HH:mm:ss 'o''clock' z", fastDateFormat0.getPattern());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertNotNull(attributedCharacterIterator0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      
      Locale locale1 = Locale.GERMAN;
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.toString());
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      
      String string1 = "vBplSHR$UU:tSLf";
      assertNotSame(string1, string0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: v
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "_?]x%)hhwv";
      Locale locale0 = Locale.JAPANESE;
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: x
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "]au#k+k";
      Locale locale0 = Locale.forLanguageTag(string0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "r";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "q";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "H7=+4p+WzZ`|=}5";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: p
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "org.apache.commons.lang.time.FastDateFormat$UnpaddedMonthField";
      Locale locale0 = new Locale(string0);
      assertEquals("org.apache.commons.lang.time.fastdateformat$unpaddedmonthfield", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("org.apache.commons.lang.time.fastdateformat$unpaddedmonthfield", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "|na)hl>2C";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "l.,F!";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: l
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "j_";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: j
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "/!g";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: g
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "f1Y=Zn!Uyp]X4ahPO";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "k0 8cSb+H\"n&E9_";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = new Locale(string0, string0, string0);
      assertEquals("k0 8cSb+H\"n&E9_", locale0.getVariant());
      assertEquals("k0 8csb+h\"n&e9_", locale0.getLanguage());
      assertEquals("k0 8csb+h\"n&e9__K0 8CSB+H\"N&E9__k0 8cSb+H\"n&E9_", locale0.toString());
      assertEquals("K0 8CSB+H\"N&E9_", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
      }
  }

  @Test
  public void test22() {}
//   @Test
//   public void test22()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("dd.MM.yy HH:mm", fastDateFormat0.getPattern());
//       assertNotNull(fastDateFormat0);
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)fastDateFormat0.getTimeZone();
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("dd.MM.yy HH:mm", fastDateFormat0.getPattern());
//       assertNotNull(zoneInfo0);
//       
//       String string0 = "4Yf$WhY2:78";
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: Y
//          //
//       }
//   }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "X 65@{v|Y+<";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: X
         //
      }
  }

  @Test
  public void test24() {}
//   @Test
//   public void test24()  throws Throwable  {
//       String string0 = "\"VG";
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("dd.MM.yy HH:mm", fastDateFormat0.getPattern());
//       assertNotNull(fastDateFormat0);
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)fastDateFormat0.getTimeZone();
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("dd.MM.yy HH:mm", fastDateFormat0.getPattern());
//       assertNotNull(zoneInfo0);
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: V
//          //
//       }
//   }

  @Test
  public void test25()  throws Throwable  {
      String string0 = "Unknown class: ";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = "The validated map is empty";
      Locale locale0 = Locale.KOREA;
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = "@^RE]{mIU7P aoZ($))";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: R
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = "%QFFS`FURJq'&ul-T{]";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Q
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = "^hPlv]yk%8{ ";
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(mockGregorianCalendar0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(zoneInfo0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = "s&~O>j 3C";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: O
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      String string0 = "Negative vaMde4 shtull not be possible";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      String string0 = "L1>J:i3\\";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: L
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = "K/,i\"P*,uKG,i:%@O H";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: i
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      String string0 = "S'2@E-|*x}'&JmA";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: J
         //
      }
  }

  @Test
  public void test35() {}
//   @Test
//   public void test35()  throws Throwable  {
//       String string0 = "I*";
//       SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat();
//       assertEquals("dd.MM.yy HH:mm", simpleDateFormat0.toPattern());
//       assertEquals("tt.MM.uu HH:mm", simpleDateFormat0.toLocalizedPattern());
//       assertEquals(true, simpleDateFormat0.isLenient());
//       assertNotNull(simpleDateFormat0);
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)simpleDateFormat0.getTimeZone();
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("dd.MM.yy HH:mm", simpleDateFormat0.toPattern());
//       assertEquals("tt.MM.uu HH:mm", simpleDateFormat0.toLocalizedPattern());
//       assertEquals(true, simpleDateFormat0.isLenient());
//       assertNotNull(zoneInfo0);
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: I
//          //
//       }
//   }

  @Test
  public void test36()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string0 = "D3w3bc-vt0>aMr)'5qY";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
      }
  }

  @Test
  public void test37()  throws Throwable  {
      String string0 = "GC<@|exXx:e";
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      String string0 = "Bs}I";
      Locale locale0 = Locale.ITALY;
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: B
         //
      }
  }

  @Test
  public void test39()  throws Throwable  {
      String string0 = "";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertNotNull(locale0);
      
      String string1 = null;
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string1, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
      }
  }

  @Test
  public void test40() {}
//   @Test
//   public void test40()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("dd.MM.yy HH:mm", fastDateFormat0.getPattern());
//       assertNotNull(fastDateFormat0);
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
//       assertEquals("dd.MM.yy HH:mm", fastDateFormat1.getPattern());
//       assertEquals(14, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertNotNull(fastDateFormat1);
//       assertTrue(fastDateFormat1.equals((Object)fastDateFormat0));
//   }

  @Test
  public void test41()  throws Throwable  {
      int int0 = (-938);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-938,MONTH=-938,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-938,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(mockGregorianCalendar0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-938,MONTH=-938,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-938,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -938
         //
      }
  }

  @Test
  public void test42() {}
//   @Test
//   public void test42()  throws Throwable  {
//       String string0 = "AYZ5Q";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(zoneInfo0);
//       
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("HH:mm' Uhr 'z", fastDateFormat0.getPattern());
//       assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
//       assertNotNull(fastDateFormat0);
//       
//       long long0 = (-427L);
//       String string1 = fastDateFormat0.format(long0);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("HH:mm' Uhr 'z", fastDateFormat0.getPattern());
//       assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
//       assertNotSame(string1, string0);
//       assertNotNull(string1);
//       assertEquals("23:59 Uhr GMT", string1);
//       assertFalse(string1.equals((Object)string0));
//       
//       boolean boolean0 = zoneInfo0.observesDaylightTime();
//       assertEquals("GMT", zoneInfo0.getID());
//       assertFalse(boolean0);
//       
//       Locale locale0 = new Locale(string0, string0, string0);
//       assertEquals("ayz5q", locale0.getLanguage());
//       assertEquals("AYZ5Q", locale0.getCountry());
//       assertEquals("AYZ5Q", locale0.getVariant());
//       assertEquals("ayz5q_AYZ5Q_AYZ5Q", locale0.toString());
//       assertNotSame(string0, string1);
//       assertNotNull(locale0);
//       assertFalse(string0.equals((Object)string1));
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: A
//          //
//       }
//   }

  @Test
  public void test43()  throws Throwable  {
      int int0 = (-4378);
      String string0 = "Mk\"z";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      //  // Unstable assertion: assertEquals("CN", locale0.getCountry());
      //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("zh_CN", locale0.toString());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("CHN", locale0.getISO3Country());
      //  // Unstable assertion: assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
      //  // Unstable assertion: assertEquals("CN", locale0.getCountry());
      //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("zh_CN", locale0.toString());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("CHN", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals("Mk\"z", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals(10, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(fastDateFormat0);
      
      SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat();
      //  // Unstable assertion: assertEquals("dd.MM.yy HH:mm", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("tt.MM.uu HH:mm", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertNotNull(simpleDateFormat0);
      
      long long0 = 0L;
      String string1 = fastDateFormat0.format(long0);
      //  // Unstable assertion: assertEquals("CN", locale0.getCountry());
      //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("zh_CN", locale0.toString());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("CHN", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals("Mk\"z", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals(10, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertEquals("124\"GMT", string1);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)simpleDateFormat0.getCalendar();
      //  // Unstable assertion: assertEquals("dd.MM.yy HH:mm", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("tt.MM.uu HH:mm", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, gregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=-1106289512396,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1934,MONTH=11,WEEK_OF_YEAR=50,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=345,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=21,SECOND=27,MILLISECOND=604,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      //  // Unstable assertion: assertNotNull(gregorianCalendar0);
      
      String string2 = fastDateFormat0.format((Calendar) gregorianCalendar0);
      //  // Unstable assertion: assertEquals("CN", locale0.getCountry());
      //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("zh_CN", locale0.toString());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("CHN", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("dd.MM.yy HH:mm", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("tt.MM.uu HH:mm", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, gregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=-1106289512396,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1934,MONTH=11,WEEK_OF_YEAR=50,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=345,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=21,SECOND=27,MILLISECOND=604,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals("Mk\"z", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals(10, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertNotSame(string2, string1);
      //  // Unstable assertion: assertNotSame(string2, string0);
      //  // Unstable assertion: assertNotSame(string0, string2);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertNotNull(string2);
      //  // Unstable assertion: assertEquals("1217\"GMT", string2);
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string0.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test44()  throws Throwable  {
      String string0 = ">~&Z+`^:*~=";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
      //  // Unstable assertion: assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals(15, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals(">~&Z+`^:*~=", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertNotNull(fastDateFormat0);
      
      boolean boolean0 = fastDateFormat0.equals((Object) string0);
      //  // Unstable assertion: assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals(15, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals(">~&Z+`^:*~=", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertFalse(boolean0);
      
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0);
      //  // Unstable assertion: assertEquals(15, fastDateFormat1.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals(">~&Z+`^:*~=", fastDateFormat1.getPattern());
      //  // Unstable assertion: assertNotSame(fastDateFormat1, fastDateFormat0);
      //  // Unstable assertion: assertNotNull(fastDateFormat1);
      //  // Unstable assertion: assertTrue(fastDateFormat1.equals((Object)fastDateFormat0));
      
      ZoneInfo zoneInfo0 = (ZoneInfo)fastDateFormat1.getTimeZone();
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(15, fastDateFormat1.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals(">~&Z+`^:*~=", fastDateFormat1.getPattern());
      //  // Unstable assertion: assertNotSame(fastDateFormat1, fastDateFormat0);
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertTrue(fastDateFormat1.equals((Object)fastDateFormat0));
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) zoneInfo0);
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(15, fastDateFormat1.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals(">~&Z+`^:*~=", fastDateFormat1.getPattern());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertNotSame(fastDateFormat1, fastDateFormat0);
      //  // Unstable assertion: assertNotNull(mockGregorianCalendar0);
      //  // Unstable assertion: assertTrue(fastDateFormat1.equals((Object)fastDateFormat0));
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      //  // Unstable assertion: assertEquals("", decimalFormat0.getPositivePrefix());
      //  // Unstable assertion: assertEquals(true, decimalFormat0.isGroupingUsed());
      //  // Unstable assertion: assertEquals("", decimalFormat0.getNegativeSuffix());
      //  // Unstable assertion: assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      //  // Unstable assertion: assertEquals("-", decimalFormat0.getNegativePrefix());
      //  // Unstable assertion: assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      //  // Unstable assertion: assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      //  // Unstable assertion: assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      //  // Unstable assertion: assertEquals(false, decimalFormat0.isParseBigDecimal());
      //  // Unstable assertion: assertEquals("#,##0.###", decimalFormat0.toPattern());
      //  // Unstable assertion: assertEquals("#.##0,###", decimalFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("", decimalFormat0.getPositiveSuffix());
      //  // Unstable assertion: assertEquals(3, decimalFormat0.getGroupingSize());
      //  // Unstable assertion: assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      //  // Unstable assertion: assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      //  // Unstable assertion: assertEquals(1, decimalFormat0.getMultiplier());
      //  // Unstable assertion: assertEquals(false, decimalFormat0.isParseIntegerOnly());
      //  // Unstable assertion: assertNotNull(decimalFormat0);
      
      Locale locale0 = Locale.ITALIAN;
      //  // Unstable assertion: assertEquals("it", locale0.toString());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("it", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getCountry());
      //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("ita", locale0.getISO3Language());
      //  // Unstable assertion: assertNotNull(locale0);
      
      SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat(string0, locale0);
      //  // Unstable assertion: assertEquals(">~&Z+`^:*~=", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals(">~&Z+`^:*~=", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("it", locale0.toString());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("it", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getCountry());
      //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("ita", locale0.getISO3Language());
      //  // Unstable assertion: assertNotNull(simpleDateFormat0);
      
      Date date0 = simpleDateFormat0.get2DigitYearStart();
      //  // Unstable assertion: assertEquals(">~&Z+`^:*~=", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals(">~&Z+`^:*~=", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("it", locale0.toString());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("it", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getCountry());
      //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("ita", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("Tue Dec 11 17:21:27 GMT 1934", date0.toString());
      //  // Unstable assertion: assertNotNull(date0);
      
      String string1 = fastDateFormat0.format(date0);
      //  // Unstable assertion: assertEquals(">~&Z+`^:*~=", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals(">~&Z+`^:*~=", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("it", locale0.toString());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("it", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getCountry());
      //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("ita", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals(15, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals(">~&Z+`^:*~=", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals("Tue Dec 11 17:21:27 GMT 1934", date0.toString());
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertNotSame(fastDateFormat0, fastDateFormat1);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertEquals(">~&+0000+`^:*~=", string1);
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      //  // Unstable assertion: assertTrue(fastDateFormat0.equals((Object)fastDateFormat1));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      
      long long0 = 2697L;
      StringBuffer stringBuffer0 = new StringBuffer(string0);
      //  // Unstable assertion: assertEquals(27, stringBuffer0.capacity());
      //  // Unstable assertion: assertEquals(11, stringBuffer0.length());
      //  // Unstable assertion: assertEquals(">~&Z+`^:*~=", stringBuffer0.toString());
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertNotNull(stringBuffer0);
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      
      Format.Field format_Field0 = null;
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      //  // Unstable assertion: assertEquals(0, fieldPosition0.getEndIndex());
      //  // Unstable assertion: assertEquals(0, fieldPosition0.getBeginIndex());
      //  // Unstable assertion: assertEquals("java.text.FieldPosition[field=-1,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      //  // Unstable assertion: assertEquals(-1, fieldPosition0.getField());
      //  // Unstable assertion: assertNotNull(fieldPosition0);
      
      StringBuffer stringBuffer1 = fastDateFormat1.format((Calendar) mockGregorianCalendar0, stringBuffer0);
      //  // Unstable assertion: assertEquals(27, stringBuffer1.capacity());
      //  // Unstable assertion: assertEquals(26, stringBuffer1.length());
      //  // Unstable assertion: assertEquals(">~&Z+`^:*~=>~&+0000+`^:*~=", stringBuffer1.toString());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(15, fastDateFormat1.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals(">~&Z+`^:*~=", fastDateFormat1.getPattern());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(26, stringBuffer0.length());
      //  // Unstable assertion: assertEquals(27, stringBuffer0.capacity());
      //  // Unstable assertion: assertEquals(">~&Z+`^:*~=>~&+0000+`^:*~=", stringBuffer0.toString());
      //  // Unstable assertion: assertSame(stringBuffer1, stringBuffer0);
      //  // Unstable assertion: assertNotSame(fastDateFormat1, fastDateFormat0);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertSame(stringBuffer0, stringBuffer1);
      //  // Unstable assertion: assertNotNull(stringBuffer1);
      //  // Unstable assertion: assertTrue(fastDateFormat1.equals((Object)fastDateFormat0));
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      
      int int0 = (-1367);
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(int0, int0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1367
         //
      }
  }

  @Test
  public void test45()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, (TimeZone) zoneInfo0, locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
      assertNotNull(fastDateFormat0);
  }

  @Test
  public void test46()  throws Throwable  {
      int int0 = (-938);
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -938
         //
      }
  }

  @Test
  public void test47() {}
//   @Test
//   public void test47()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertEquals("dd.MM.yy HH:mm", fastDateFormat0.getPattern());
//       assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertNotNull(fastDateFormat0);
//       
//       String string0 = "EEEE, d MMMM yyyy";
//       try {
//         Object object0 = fastDateFormat0.parseObject(string0);
//         fail("Expecting exception: ParseException");
//       
//       } catch(ParseException e) {
//          //
//          // Format.parseObject(String) failed
//          //
//       }
//   }

  @Test
  public void test48()  throws Throwable  {
      String string0 = "";
      Locale locale0 = Locale.forLanguageTag(string0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
      assertEquals("", fastDateFormat0.getPattern());
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertNotNull(fastDateFormat0);
      
      String string1 = fastDateFormat0.getPattern();
      assertEquals("", fastDateFormat0.getPattern());
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test
  public void test49() {}
//   @Test
//   public void test49()  throws Throwable  {
//       int int0 = 0;
//       Locale locale0 = null;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, locale0);
//       assertEquals(47, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("EEEE, d. MMMM yyyy HH:mm' Uhr 'z", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertNotNull(fastDateFormat0);
//   }

  @Test
  public void test50() {}
//   @Test
//   public void test50()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("EEEE, d. MMMM yyyy", fastDateFormat0.getPattern());
//       assertEquals(32, fastDateFormat0.getMaxLengthEstimate());
//       assertNotNull(fastDateFormat0);
//       
//       int int1 = fastDateFormat0.getMaxLengthEstimate();
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("EEEE, d. MMMM yyyy", fastDateFormat0.getPattern());
//       assertEquals(32, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(32, int1);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//   }

  @Test
  public void test51()  throws Throwable  {
      int int0 = (-938);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-938,MONTH=-938,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-938,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-938,MONTH=-938,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-938,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -938
         //
      }
  }

  @Test
  public void test52() {}
//   @Test
//   public void test52()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("dd.MM.yy HH:mm", fastDateFormat0.getPattern());
//       assertNotNull(fastDateFormat0);
//       
//       Locale locale0 = fastDateFormat0.getLocale();
//       assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("dd.MM.yy HH:mm", fastDateFormat0.getPattern());
//       assertEquals("DE", locale0.getCountry());
//       assertEquals("deu", locale0.getISO3Language());
//       assertEquals("de_DE", locale0.toString());
//       assertEquals("de", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("DEU", locale0.getISO3Country());
//       assertNotNull(locale0);
//   }

  @Test
  public void test53() {}
//   @Test
//   public void test53()  throws Throwable  {
//       int int0 = 0;
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(zoneInfo0);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, (TimeZone) zoneInfo0);
//       assertEquals("HH:mm' Uhr 'z", fastDateFormat0.getPattern());
//       assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(fastDateFormat0);
//   }

  @Test
  public void test54() {}
//   @Test
//   public void test54()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("dd.MM.yy HH:mm", fastDateFormat0.getPattern());
//       assertNotNull(fastDateFormat0);
//       
//       String string0 = "#E'tPiMFm[4_QWQer[";
//       ZoneInfo zoneInfo0 = (ZoneInfo)fastDateFormat0.getTimeZone();
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("dd.MM.yy HH:mm", fastDateFormat0.getPattern());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(zoneInfo0);
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
//       assertEquals(18, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals("#E'tPiMFm[4_QWQer[", fastDateFormat1.getPattern());
//       assertEquals(true, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("dd.MM.yy HH:mm", fastDateFormat0.getPattern());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertNotSame(fastDateFormat0, fastDateFormat1);
//       assertNotNull(fastDateFormat1);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
//   }

  @Test
  public void test55() {}
//   @Test
//   public void test55()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0);
//       assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("HH:mm' Uhr 'z", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertNotNull(fastDateFormat0);
//       
//       boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
//       assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("HH:mm' Uhr 'z", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertFalse(boolean0);
//   }

  @Test
  public void test56() {}
//   @Test
//   public void test56()  throws Throwable  {
//       int int0 = 0;
//       String string0 = "";
//       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
//       assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals("", simpleTimeZone0.getID());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertNotNull(simpleTimeZone0);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, (TimeZone) simpleTimeZone0);
//       assertEquals(52, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("EEEE, d. MMMM yyyy HH:mm' Uhr 'z", fastDateFormat0.getPattern());
//       assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals("", simpleTimeZone0.getID());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertNotNull(fastDateFormat0);
//   }

  @Test
  public void test57() {}
//   @Test
//   public void test57()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0);
//       assertEquals(47, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("EEEE, d. MMMM yyyy HH:mm' Uhr 'z", fastDateFormat0.getPattern());
//       assertNotNull(fastDateFormat0);
//   }

  @Test
  public void test58() {}
//   @Test
//   public void test58()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertEquals("dd.MM.yy HH:mm", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
//       assertNotNull(fastDateFormat0);
//       
//       String string0 = fastDateFormat0.toString();
//       assertEquals("dd.MM.yy HH:mm", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
//       assertNotNull(string0);
//       assertEquals("FastDateFormat[dd.MM.yy HH:mm]", string0);
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: t
//          //
//       }
//   }

  @Test
  public void test59() {}
//   @Test
//   public void test59()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("dd.MM.yy HH:mm", fastDateFormat0.getPattern());
//       assertNotNull(fastDateFormat0);
//       
//       long long0 = 0L;
//       String string0 = fastDateFormat0.format(long0);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("dd.MM.yy HH:mm", fastDateFormat0.getPattern());
//       assertNotNull(string0);
//       assertEquals("01.01.70 00:00", string0);
//   }
}
