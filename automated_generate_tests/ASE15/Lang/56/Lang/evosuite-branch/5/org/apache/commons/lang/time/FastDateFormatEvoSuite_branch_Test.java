/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:14:33 GMT 2014
 */

package org.apache.commons.lang.time;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.text.AttributedCharacterIterator;
import java.text.DateFormatSymbols;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang.time.FastDateFormat;




import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;


public class FastDateFormatEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      int int0 = 0;
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      String string0 = "Gk3a981dE";
      int int1 = zoneInfo0.getDSTSavings();
      assertTrue(int1 == int0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(0, int1);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
      assertNotNull(fastDateFormat0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("Gk3a981dE", fastDateFormat0.getPattern());
      
      MockDate mockDate0 = new MockDate(int0, int1, int0, int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertNotNull(mockDate0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      
      String string1 = fastDateFormat0.format((Date) mockDate0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("Gk3a981dE", fastDateFormat0.getPattern());
      assertEquals("AD243AM98131Sun", string1);
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = (-7);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      String string0 = "Gk3a981dE";
      int int1 = zoneInfo0.getDSTSavings();
      assertFalse(int1 == int0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(0, int1);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
      assertNotNull(fastDateFormat0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("Gk3a981dE", fastDateFormat0.getPattern());
      assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      
      MockDate mockDate0 = new MockDate(int0, int1, int0, int0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(mockDate0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("Fri Dec 23 16:53:00 GMT 1892", mockDate0.toString());
      
      String string1 = fastDateFormat0.format((Date) mockDate0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("Fri Dec 23 16:53:00 GMT 1892", mockDate0.toString());
      assertEquals("Gk3a981dE", fastDateFormat0.getPattern());
      assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("AD163PM98123Fri", string1);
  }

  @Test
  public void test02() {}
//   @Test
//   public void test02()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
//       assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       
//       int int1 = (-1235);
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int1, int1, int0);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-1235,MONTH=-1235,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       
//       Date date0 = mockGregorianCalendar0.getTime();
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertNotNull(date0);
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-104388825600000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=1339,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=31,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals("Sun Jan 31 00:00:00 GMT 1339", date0.toString());
//       
//       String string0 = fastDateFormat0.format(date0);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertNotNull(string0);
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-104388825600000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=1339,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=31,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals("Sun Jan 31 00:00:00 GMT 1339", date0.toString());
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
//       assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("Sunday, January 31, 1339", string0);
//   }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "MMMM d, yyyy h:mm:ss a z";
      TimeZone timeZone0 = null;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, timeZone0);
      assertNotNull(fastDateFormat0);
      assertEquals("MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(39, fastDateFormat0.getMaxLengthEstimate());
      
      int int0 = 60;
      int int1 = 539;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int1, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(mockGregorianCalendar0);
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=60,MONTH=539,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=60,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      
      String string1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-58851360000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=105,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(39, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("January 29, 0105 12:00:00 AM GMT", string1);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "'2+]F ~xZ=m,>)1QD";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
      assertNotNull(fastDateFormat0);
      assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("'2+]F ~xZ=m,>)1QD", fastDateFormat0.getPattern());
      
      int int0 = 0;
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(int0, locale0);
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      assertNotNull(fastDateFormat1);
      assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
      assertEquals(19, fastDateFormat1.getMaxLengthEstimate());
      assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE", fastDateFormat1.getPattern());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      
      boolean boolean0 = fastDateFormat0.equals((Object) fastDateFormat1);
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertNotSame(fastDateFormat0, fastDateFormat1);
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
      assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
      assertEquals(19, fastDateFormat1.getMaxLengthEstimate());
      assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE", fastDateFormat1.getPattern());
      assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("'2+]F ~xZ=m,>)1QD", fastDateFormat0.getPattern());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertFalse(boolean0);
  }

  @Test
  public void test05() {}
//   @Test
//   public void test05()  throws Throwable  {
//       int int0 = 1;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("MMMM d, yyyy", fastDateFormat0.getPattern());
//       
//       FastDateFormat fastDateFormat1 = null;
//       // Undeclared exception!
//       try {
//         AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator((Object) fastDateFormat1);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Unknown class: <null>
//          //
//       }
//   }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "MMMM d, yyyy h:mm:ss a z";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
      assertNotNull(fastDateFormat0);
      assertEquals("MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
      assertEquals(39, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      
      // Undeclared exception!
      try {
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator((Object) fastDateFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: org.apache.commons.lang.time.FastDateFormat
         //
      }
  }

  @Test
  public void test07() {}
//   @Test
//   public void test07()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat0);
//       assertEquals("dd/MM/yy H.mm", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       
//       Date date0 = mockGregorianCalendar0.getTime();
//       assertNotNull(date0);
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       
//       String string0 = fastDateFormat0.format((Object) date0);
//       assertNotNull(string0);
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
//       assertEquals("dd/MM/yy H.mm", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("14/02/14 20.21", string0);
//   }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "^pa)/]j<mon`Mj&";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) zoneInfo0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      
      int int0 = 2;
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals("dd-MMM-yyyy", fastDateFormat0.getPattern());
      assertEquals(11, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
      assertEquals("dd-MMM-yyyy", fastDateFormat0.getPattern());
      assertEquals(11, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertFalse(boolean0);
      
      Locale locale1 = Locale.JAPAN;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("JP", locale1.getCountry());
      assertEquals("ja_JP", locale1.toString());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      
      String string1 = zoneInfo0.getDisplayName(locale1);
      assertNotSame(string1, string0);
      assertNotSame(locale1, locale0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(string1);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("JP", locale1.getCountry());
      assertEquals("ja_JP", locale1.toString());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("\u30B0\u30EA\u30CB\u30C3\u30B8\u6A19\u6E96\u6642", string1);
      
      ZoneInfo zoneInfo1 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
      assertSame(zoneInfo0, zoneInfo1);
      assertSame(zoneInfo1, zoneInfo0);
      assertNotNull(zoneInfo1);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("GMT", zoneInfo1.getID());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: p
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "# xIW.tV}[w^j";
      Locale locale0 = new Locale(string0);
      assertNotNull(locale0);
      assertEquals("# xiw.tv}[w^j", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("# xiw.tv}[w^j", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: x
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "vM';\\o\\ofK]X]Az=";
      int int0 = 1;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=1,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=1,SECOND=1,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=1,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=1,SECOND=1,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: v
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "-u7#;ib!6`{U3yX";
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "r_z};qJU";
      TimeZone timeZone0 = null;
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "DHSqa<>>dc$ZL_dQLYJ";
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "org.apache.commons.lang.time.FastDateFormat";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "mnX L^";
      TimeZone timeZone0 = null;
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "6lRLc:'2=PW%";
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: l
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = ")4j=@N{dPp_x62`{";
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      
      FastDateFormat fastDateFormat0 = new FastDateFormat(string0, timeZone0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(")4j=@N{dPp_x62`{", fastDateFormat0.getPattern());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      
      // Undeclared exception!
      try {
        List list0 = fastDateFormat0.parsePattern();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: j
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "~>7wi It[";
      String string1 = "";
      assertNotSame(string1, string0);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat(string1, locale0);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(simpleDateFormat0);
      assertEquals("", simpleDateFormat0.toPattern());
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("", simpleDateFormat0.toLocalizedPattern());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)simpleDateFormat0.getTimeZone();
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("", simpleDateFormat0.toPattern());
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("", simpleDateFormat0.toLocalizedPattern());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: i
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = ".g_(xmwC&#C/l";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: g
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "\"fs3h`,>C!";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      
      String string0 = "F-yevd;0I/z<@sJ)`A";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: e
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "cX{CG'FG{oH*'A,'mS";
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "mkb";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = "#YM!%ddux";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Y
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = "956w|X*lnO*o!";
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: X
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = "s>VeAFqPL[";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: V
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = "Unknown class: ";
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      
      String string1 = "MMMM d, yyyy";
      assertNotSame(string1, string0);
      
      SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat(string1, locale0);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(simpleDateFormat0);
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("MMMM d, yyyy", simpleDateFormat0.toPattern());
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("MMMM d, yyyy", simpleDateFormat0.toLocalizedPattern());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)simpleDateFormat0.getTimeZone();
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(zoneInfo0);
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("MMMM d, yyyy", simpleDateFormat0.toPattern());
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("MMMM d, yyyy", simpleDateFormat0.toLocalizedPattern());
      assertEquals("GMT", zoneInfo0.getID());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = "The validated collection is empty";
      int int0 = 0;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      
      Locale locale0 = new Locale(string0, string0);
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("the validated collection is empty_THE VALIDATED COLLECTION IS EMPTY", locale0.toString());
      assertEquals("THE VALIDATED COLLECTION IS EMPTY", locale0.getCountry());
      assertEquals("the validated collection is empty", locale0.getLanguage());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = "Ro2.p. {\\|<Y9'_FmF7";
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
      assertNotNull(zoneInfo0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("GMT", zoneInfo0.getID());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: R
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = "SPc,$|3E0:Dti}";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.forLanguageTag(string0);
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      String string0 = "W>M3OwLvE^)Ax78N";
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: O
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      String string0 = "No date pattern for locale: ";
      String string1 = "d. MMMM yyyy HH:mm:ss z";
      assertNotSame(string1, string0);
      
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      assertNotNull(dateFormatSymbols0);
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      
      SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat(string1, dateFormatSymbols0);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(simpleDateFormat0);
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("d. MMMM yyyy HH:mm:ss z", simpleDateFormat0.toPattern());
      assertEquals("d. MMMM yyyy HH:mm:ss z", simpleDateFormat0.toLocalizedPattern());
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)simpleDateFormat0.getTimeZone();
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(zoneInfo0);
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("d. MMMM yyyy HH:mm:ss z", simpleDateFormat0.toPattern());
      assertEquals("d. MMMM yyyy HH:mm:ss z", simpleDateFormat0.toLocalizedPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = "@,$L6bv'M~7X7+CNk";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: L
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      String string0 = "F/JsC";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: J
         //
      }
  }

  @Test
  public void test35()  throws Throwable  {
      String string0 = "%I3[t{;:";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
      }
  }

  @Test
  public void test36() {}
//   @Test
//   public void test36()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat0);
//       assertEquals("dd/MM/yy H.mm", fastDateFormat0.getPattern());
//       assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       
//       String string0 = fastDateFormat0.toString();
//       assertNotNull(string0);
//       assertEquals("dd/MM/yy H.mm", fastDateFormat0.getPattern());
//       assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("FastDateFormat[dd/MM/yy H.mm]", string0);
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)fastDateFormat0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("dd/MM/yy H.mm", fastDateFormat0.getPattern());
//       assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       
//       Locale locale0 = Locale.GERMANY;
//       assertNotNull(locale0);
//       assertEquals("", locale0.getVariant());
//       assertEquals("de_DE", locale0.toString());
//       assertEquals("DE", locale0.getCountry());
//       assertEquals("deu", locale0.getISO3Language());
//       assertEquals("de", locale0.getLanguage());
//       assertEquals("DEU", locale0.getISO3Country());
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: t
//          //
//       }
//   }

  @Test
  public void test37()  throws Throwable  {
      String string0 = "<Q+$&W;XM";
      int int0 = 0;
      int int1 = 0;
      Locale locale0 = null;
      int int2 = 0;
      String string1 = "s{D";
      assertNotSame(string1, string0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(fastDateFormat0);
      assertEquals("s{D", fastDateFormat0.getPattern());
      assertEquals(9, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertNotSame(fastDateFormat0, fastDateFormat1);
      assertNotSame(string1, string0);
      assertTrue(fastDateFormat1.equals((Object)fastDateFormat0));
      assertTrue(fastDateFormat0.equals((Object)fastDateFormat1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(fastDateFormat1);
      assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
      assertEquals(9, fastDateFormat1.getMaxLengthEstimate());
      assertEquals("s{D", fastDateFormat1.getPattern());
      assertEquals("s{D", fastDateFormat0.getPattern());
      assertEquals(9, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      
      Locale locale1 = Locale.JAPAN;
      assertNotNull(locale1);
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("ja_JP", locale1.toString());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("JP", locale1.getCountry());
      
      Calendar calendar0 = null;
      int int3 = 0;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int3, int3);
      assertNotNull(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      String string2 = fastDateFormat0.format(date0);
      assertNotSame(fastDateFormat0, fastDateFormat1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertTrue(fastDateFormat0.equals((Object)fastDateFormat1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("s{D", fastDateFormat0.getPattern());
      assertEquals(9, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals("0{278", string2);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(16, stringBuffer0.capacity());
      
      Locale locale2 = null;
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance(string0, locale2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Q
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      String string0 = "mCg0cLUZOy`<";
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
      }
  }

  @Test
  public void test39()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      
      String string0 = "BLH7(8|tDllOHhDt|";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: B
         //
      }
  }

  @Test
  public void test40()  throws Throwable  {
      String string0 = "yA]Y.*iAbpFj38I[L";
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
      }
  }

  @Test
  public void test41()  throws Throwable  {
      String string0 = null;
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
      }
  }

  @Test
  public void test42() {}
//   @Test
//   public void test42()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat0);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("dd/MM/yy H.mm", fastDateFormat0.getPattern());
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertTrue(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertNotNull(fastDateFormat1);
//       assertEquals("dd/MM/yy H.mm", fastDateFormat1.getPattern());
//       assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals(16, fastDateFormat1.getMaxLengthEstimate());
//   }

  @Test
  public void test43() {}
//   @Test
//   public void test43()  throws Throwable  {
//       String string0 = "h$7=Z/";
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("h$7=Z/", fastDateFormat0.getPattern());
//       
//       Locale locale0 = Locale.CANADA;
//       assertNotNull(locale0);
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("eng", locale0.getISO3Language());
//       
//       List list0 = fastDateFormat0.parsePattern();
//       assertNotNull(list0);
//       assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("h$7=Z/", fastDateFormat0.getPattern());
//       assertEquals(false, list0.isEmpty());
//       assertEquals(4, list0.size());
//       
//       List list1 = fastDateFormat0.parsePattern();
//       assertNotSame(list1, list0);
//       assertFalse(list1.equals((Object)list0));
//       assertNotNull(list1);
//       assertEquals(false, list1.isEmpty());
//       assertEquals(4, list1.size());
//       assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("h$7=Z/", fastDateFormat0.getPattern());
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("eng", locale0.getISO3Language());
//       
//       String string1 = fastDateFormat0.getPattern();
//       assertSame(string1, string0);
//       assertSame(string0, string1);
//       assertNotNull(string1);
//       assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("h$7=Z/", fastDateFormat0.getPattern());
//       assertEquals("h$7=Z/", string1);
//       
//       String string2 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
//       assertNotSame(string0, string2);
//       assertSame(string0, string1);
//       assertNotSame(string2, string1);
//       assertNotSame(string2, string0);
//       assertFalse(string0.equals((Object)string2));
//       assertFalse(string2.equals((Object)string1));
//       assertFalse(string2.equals((Object)string0));
//       assertNotNull(string2);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("h$7=Z/", fastDateFormat0.getPattern());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("8$7=+0000/", string2);
//       
//       int int0 = 0;
//       FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(int0);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertNotNull(fastDateFormat1);
//       assertEquals("h:mm:ss a z", fastDateFormat1.getPattern());
//       assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals(18, fastDateFormat1.getMaxLengthEstimate());
//       
//       int int1 = 0;
//       Locale locale1 = Locale.KOREAN;
//       assertNotSame(locale1, locale0);
//       assertFalse(locale1.equals((Object)locale0));
//       assertNotNull(locale1);
//       assertEquals("ko", locale1.getLanguage());
//       assertEquals("", locale1.getISO3Country());
//       assertEquals("ko", locale1.toString());
//       assertEquals("", locale1.getCountry());
//       assertEquals("", locale1.getVariant());
//       assertEquals("kor", locale1.getISO3Language());
//       
//       int int2 = (-27);
//       int int3 = (-1357);
//       int int4 = (-1462);
//       int int5 = 0;
//       Locale locale2 = Locale.KOREAN;
//       assertSame(locale2, locale1);
//       assertNotSame(locale2, locale0);
//       assertFalse(locale2.equals((Object)locale0));
//       assertNotNull(locale2);
//       assertEquals("ko", locale2.getLanguage());
//       assertEquals("kor", locale2.getISO3Language());
//       assertEquals("", locale2.getISO3Country());
//       assertEquals("", locale2.getVariant());
//       assertEquals("", locale2.getCountry());
//       assertEquals("ko", locale2.toString());
//       
//       long long0 = 0L;
//       Long long1 = new Long(long0);
//       assertTrue(long1.equals((Object)long0));
//       assertEquals(0L, (long)long1);
//       
//       int int6 = 0;
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(int6, (TimeZone) zoneInfo0, locale2);
//       assertNotSame(fastDateFormat2, fastDateFormat0);
//       assertNotSame(fastDateFormat2, fastDateFormat1);
//       assertSame(locale2, locale1);
//       assertNotSame(locale2, locale0);
//       assertFalse(int6 == int3);
//       assertFalse(int6 == int4);
//       assertFalse(int6 == int2);
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat1));
//       assertFalse(locale2.equals((Object)locale0));
//       assertNotNull(fastDateFormat2);
//       assertEquals(true, fastDateFormat2.getTimeZoneOverridesCalendar());
//       assertEquals("a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", fastDateFormat2.getPattern());
//       assertEquals(20, fastDateFormat2.getMaxLengthEstimate());
//       assertEquals("ko", locale2.getLanguage());
//       assertEquals("kor", locale2.getISO3Language());
//       assertEquals("", locale2.getISO3Country());
//       assertEquals("", locale2.getVariant());
//       assertEquals("", locale2.getCountry());
//       assertEquals("ko", locale2.toString());
//       assertEquals("GMT", zoneInfo0.getID());
//   }

  @Test
  public void test44()  throws Throwable  {
      String string0 = "^2NSK@A%ILg7'";
      int int0 = 0;
      int int1 = 0;
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int1, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
      assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      
      String string1 = fastDateFormat0.format((long) int1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
      assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("12:00:00 AM GMT", string1);
      
      Long long0 = new Long((long) int0);
      assertEquals(0L, (long)long0);
      
      AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator((Object) long0);
      assertNotNull(attributedCharacterIterator0);
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
      assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals(0, attributedCharacterIterator0.getIndex());
      assertEquals(15, attributedCharacterIterator0.getEndIndex());
      assertEquals(0, attributedCharacterIterator0.getBeginIndex());
      assertEquals(15, attributedCharacterIterator0.getRunLimit());
      assertEquals(0, attributedCharacterIterator0.getRunStart());
      
      int int2 = 534;
      int int3 = 1776;
      List list0 = fastDateFormat0.parsePattern();
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertNotNull(list0);
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
      assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals(false, list0.isEmpty());
      assertEquals(9, list0.size());
  }

  @Test
  public void test45() {}
//   @Test
//   public void test45()  throws Throwable  {
//       String string0 = "EwKm.";
//       int int0 = 0;
//       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
//       assertNotNull(simpleTimeZone0);
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals("EwKm.", simpleTimeZone0.getID());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals("java.util.SimpleTimeZone[id=EwKm.,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, (TimeZone) simpleTimeZone0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals("EwKm.", simpleTimeZone0.getID());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals("java.util.SimpleTimeZone[id=EwKm.,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//   }

  @Test
  public void test46() {}
//   @Test
//   public void test46()  throws Throwable  {
//       int int0 = 0;
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       boolean boolean0 = false;
//       int int1 = 0;
//       Locale locale0 = Locale.CANADA_FRENCH;
//       assertNotNull(locale0);
//       assertEquals("fr_CA", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("fr", locale0.getLanguage());
//       assertEquals("CAN", locale0.getISO3Country());
//       
//       int int2 = 1;
//       String string0 = zoneInfo0.getDisplayName(boolean0, int2, locale0);
//       assertFalse(int2 == int1);
//       assertFalse(int2 == int0);
//       assertNotNull(string0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("fr_CA", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("fr", locale0.getLanguage());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("Heure de Greenwich", string0);
//       
//       String string1 = "Gk3a981dE";
//       assertNotSame(string1, string0);
//       assertFalse(string1.equals((Object)string0));
//       
//       long long0 = 1L;
//       StringBuffer stringBuffer0 = new StringBuffer(string1);
//       assertNotSame(string1, string0);
//       assertFalse(string1.equals((Object)string0));
//       assertNotNull(stringBuffer0);
//       assertEquals(9, stringBuffer0.length());
//       assertEquals(25, stringBuffer0.capacity());
//       assertEquals("Gk3a981dE", stringBuffer0.toString());
//       
//       StringBuffer stringBuffer1 = null;
//       StringBuffer stringBuffer2 = stringBuffer0.append(stringBuffer1);
//       assertNotSame(string1, string0);
//       assertSame(stringBuffer2, stringBuffer0);
//       assertSame(stringBuffer0, stringBuffer2);
//       assertFalse(string1.equals((Object)string0));
//       assertNotNull(stringBuffer2);
//       assertEquals(13, stringBuffer2.length());
//       assertEquals(25, stringBuffer2.capacity());
//       assertEquals("Gk3a981dEnull", stringBuffer2.toString());
//       assertEquals("Gk3a981dEnull", stringBuffer0.toString());
//       assertEquals(25, stringBuffer0.capacity());
//       assertEquals(13, stringBuffer0.length());
//       
//       StringBuffer stringBuffer3 = stringBuffer2.insert(int1, (CharSequence) string0);
//       assertNotSame(string1, string0);
//       assertSame(stringBuffer2, stringBuffer0);
//       assertSame(stringBuffer2, stringBuffer3);
//       assertSame(stringBuffer0, stringBuffer3);
//       assertSame(stringBuffer0, stringBuffer2);
//       assertSame(stringBuffer3, stringBuffer0);
//       assertSame(stringBuffer3, stringBuffer2);
//       assertNotSame(string0, string1);
//       assertFalse(int1 == int2);
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(int2 == int1);
//       assertFalse(int2 == int0);
//       assertFalse(string0.equals((Object)string1));
//       assertNotNull(stringBuffer3);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(31, stringBuffer2.length());
//       assertEquals("Heure de GreenwichGk3a981dEnull", stringBuffer2.toString());
//       assertEquals(52, stringBuffer2.capacity());
//       assertEquals("Heure de GreenwichGk3a981dEnull", stringBuffer0.toString());
//       assertEquals(31, stringBuffer0.length());
//       assertEquals(52, stringBuffer0.capacity());
//       assertEquals(52, stringBuffer3.capacity());
//       assertEquals(31, stringBuffer3.length());
//       assertEquals("Heure de GreenwichGk3a981dEnull", stringBuffer3.toString());
//       assertEquals("fr_CA", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("fr", locale0.getLanguage());
//       assertEquals("CAN", locale0.getISO3Country());
//       
//       String string2 = locale0.getDisplayLanguage();
//       assertNotSame(string2, string1);
//       assertNotSame(string2, string0);
//       assertFalse(string2.equals((Object)string1));
//       assertFalse(string2.equals((Object)string0));
//       assertNotNull(string2);
//       assertEquals("fr_CA", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("fr", locale0.getLanguage());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("\u6CD5\u6587", string2);
//       
//       StringBuffer stringBuffer4 = stringBuffer3.insert(int1, (double) int2);
//       assertNotSame(string1, string2);
//       assertNotSame(string1, string0);
//       assertSame(stringBuffer4, stringBuffer0);
//       assertSame(stringBuffer4, stringBuffer2);
//       assertSame(stringBuffer4, stringBuffer3);
//       assertSame(stringBuffer2, stringBuffer0);
//       assertSame(stringBuffer2, stringBuffer3);
//       assertSame(stringBuffer2, stringBuffer4);
//       assertSame(stringBuffer0, stringBuffer3);
//       assertSame(stringBuffer0, stringBuffer2);
//       assertSame(stringBuffer0, stringBuffer4);
//       assertSame(stringBuffer3, stringBuffer0);
//       assertSame(stringBuffer3, stringBuffer4);
//       assertSame(stringBuffer3, stringBuffer2);
//       assertNotSame(string0, string1);
//       assertNotSame(string0, string2);
//       assertFalse(int1 == int2);
//       assertFalse(string1.equals((Object)string2));
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(int2 == int1);
//       assertFalse(int2 == int0);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string0.equals((Object)string2));
//       assertNotNull(stringBuffer4);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(34, stringBuffer4.length());
//       assertEquals("1.0Heure de GreenwichGk3a981dEnull", stringBuffer4.toString());
//       assertEquals(52, stringBuffer4.capacity());
//       assertEquals(34, stringBuffer2.length());
//       assertEquals("1.0Heure de GreenwichGk3a981dEnull", stringBuffer2.toString());
//       assertEquals(52, stringBuffer2.capacity());
//       assertEquals(52, stringBuffer0.capacity());
//       assertEquals(34, stringBuffer0.length());
//       assertEquals("1.0Heure de GreenwichGk3a981dEnull", stringBuffer0.toString());
//       assertEquals("1.0Heure de GreenwichGk3a981dEnull", stringBuffer3.toString());
//       assertEquals(52, stringBuffer3.capacity());
//       assertEquals(34, stringBuffer3.length());
//       assertEquals("fr_CA", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("fr", locale0.getLanguage());
//       assertEquals("CAN", locale0.getISO3Country());
//       
//       Set<String> set0 = locale0.getUnicodeLocaleKeys();
//       assertNotNull(set0);
//       assertEquals(0, set0.size());
//       assertEquals(true, set0.isEmpty());
//       assertEquals("fr_CA", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("fr", locale0.getLanguage());
//       assertEquals("CAN", locale0.getISO3Country());
//       
//       String string3 = locale0.getScript();
//       assertNotSame(string3, string0);
//       assertNotSame(string3, string2);
//       assertNotSame(string3, string1);
//       assertFalse(string3.equals((Object)string0));
//       assertFalse(string3.equals((Object)string2));
//       assertFalse(string3.equals((Object)string1));
//       assertNotNull(string3);
//       assertEquals("fr_CA", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("fr", locale0.getLanguage());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("", string3);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string1, (TimeZone) zoneInfo0);
//       assertNotSame(string1, string2);
//       assertNotSame(string1, string3);
//       assertNotSame(string1, string0);
//       assertFalse(string1.equals((Object)string2));
//       assertFalse(string1.equals((Object)string3));
//       assertFalse(string1.equals((Object)string0));
//       assertNotNull(fastDateFormat0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("Gk3a981dE", fastDateFormat0.getPattern());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       
//       int int3 = 0;
//       String string4 = fastDateFormat0.getPattern();
//       assertNotSame(string4, string0);
//       assertSame(string4, string1);
//       assertNotSame(string4, string2);
//       assertNotSame(string4, string3);
//       assertNotSame(string1, string2);
//       assertNotSame(string1, string3);
//       assertNotSame(string1, string0);
//       assertSame(string1, string4);
//       assertFalse(string4.equals((Object)string0));
//       assertFalse(string4.equals((Object)string2));
//       assertFalse(string4.equals((Object)string3));
//       assertFalse(string1.equals((Object)string2));
//       assertFalse(string1.equals((Object)string3));
//       assertFalse(string1.equals((Object)string0));
//       assertNotNull(string4);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("Gk3a981dE", fastDateFormat0.getPattern());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("Gk3a981dE", string4);
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(int0, int0, (TimeZone) zoneInfo0);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertFalse(int0 == int2);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertNotNull(fastDateFormat1);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(49, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat1.getPattern());
//       assertEquals(true, fastDateFormat1.getTimeZoneOverridesCalendar());
//       
//       String string5 = "";
//       assertNotSame(string5, string4);
//       assertNotSame(string5, string1);
//       assertNotSame(string5, string2);
//       assertNotSame(string5, string0);
//       assertSame(string5, string3);
//       assertFalse(string5.equals((Object)string4));
//       assertFalse(string5.equals((Object)string2));
//       assertFalse(string5.equals((Object)string0));
//       
//       ZoneInfo zoneInfo1 = (ZoneInfo)TimeZone.getTimeZone(string5);
//       assertNotSame(string5, string4);
//       assertNotSame(string5, string1);
//       assertNotSame(string5, string2);
//       assertNotSame(string5, string0);
//       assertSame(string5, string3);
//       assertNotSame(zoneInfo1, zoneInfo0);
//       assertFalse(string5.equals((Object)string4));
//       assertFalse(string5.equals((Object)string1));
//       assertFalse(string5.equals((Object)string2));
//       assertFalse(string5.equals((Object)string0));
//       assertTrue(zoneInfo1.equals((Object)zoneInfo0));
//       assertNotNull(zoneInfo1);
//       assertEquals("GMT", zoneInfo1.getID());
//       
//       String string6 = "No date pattern for locale: ";
//       assertNotSame(string6, string1);
//       assertNotSame(string6, string4);
//       assertNotSame(string6, string3);
//       assertNotSame(string6, string5);
//       assertNotSame(string6, string0);
//       assertNotSame(string6, string2);
//       assertFalse(string6.equals((Object)string4));
//       assertFalse(string6.equals((Object)string3));
//       assertFalse(string6.equals((Object)string0));
//       assertFalse(string6.equals((Object)string2));
//       
//       int int4 = (-1934);
//       int int5 = (-1740);
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(int4, int5, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal time style -1740
//          //
//       }
//   }

  @Test
  public void test47() {}
//   @Test
//   public void test47()  throws Throwable  {
//       int int0 = (-343);
//       int int1 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int1, int1);
//       assertFalse(int1 == int0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       
//       int int2 = fastDateFormat0.getMaxLengthEstimate();
//       assertFalse(int1 == int2);
//       assertFalse(int1 == int0);
//       assertFalse(int2 == int1);
//       assertFalse(int2 == int0);
//       assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(50, int2);
//       
//       int int3 = 0;
//       assertFalse(int3 == int2);
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)fastDateFormat0.getTimeZone();
//       assertFalse(int1 == int2);
//       assertFalse(int1 == int0);
//       assertNotNull(zoneInfo0);
//       assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       Locale locale0 = Locale.KOREA;
//       assertNotNull(locale0);
//       assertEquals("ko", locale0.getLanguage());
//       assertEquals("kor", locale0.getISO3Language());
//       assertEquals("KR", locale0.getCountry());
//       assertEquals("KOR", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("ko_KR", locale0.toString());
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(int3, (TimeZone) zoneInfo0, locale0);
//       assertNotSame(fastDateFormat0, fastDateFormat1);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
//       assertFalse(int3 == int2);
//       assertFalse(int3 == int0);
//       assertFalse(int1 == int2);
//       assertFalse(int1 == int0);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertNotNull(fastDateFormat1);
//       assertEquals("ko", locale0.getLanguage());
//       assertEquals("kor", locale0.getISO3Language());
//       assertEquals("KR", locale0.getCountry());
//       assertEquals("KOR", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("ko_KR", locale0.toString());
//       assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE", fastDateFormat1.getPattern());
//       assertEquals(19, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals(true, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       String string0 = "<null>";
//       int int4 = 61;
//       assertFalse(int4 == int2);
//       
//       Locale locale1 = Locale.KOREAN;
//       assertNotSame(locale1, locale0);
//       assertFalse(locale1.equals((Object)locale0));
//       assertNotNull(locale1);
//       assertEquals("kor", locale1.getISO3Language());
//       assertEquals("", locale1.getISO3Country());
//       assertEquals("", locale1.getCountry());
//       assertEquals("ko", locale1.toString());
//       assertEquals("ko", locale1.getLanguage());
//       assertEquals("", locale1.getVariant());
//       
//       FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
//       assertNotSame(fastDateFormat0, fastDateFormat2);
//       assertNotSame(fastDateFormat0, fastDateFormat1);
//       assertNotSame(fastDateFormat2, fastDateFormat1);
//       assertNotSame(fastDateFormat2, fastDateFormat0);
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
//       assertTrue(fastDateFormat0.equals((Object)fastDateFormat2));
//       assertFalse(int1 == int4);
//       assertFalse(int1 == int2);
//       assertFalse(int1 == int0);
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat1));
//       assertTrue(fastDateFormat2.equals((Object)fastDateFormat0));
//       assertNotNull(fastDateFormat2);
//       assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(false, fastDateFormat2.getTimeZoneOverridesCalendar());
//       assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat2.getPattern());
//       assertEquals(50, fastDateFormat2.getMaxLengthEstimate());
//       
//       Locale locale2 = Locale.FRANCE;
//       assertNotSame(locale2, locale1);
//       assertNotSame(locale2, locale0);
//       assertFalse(locale2.equals((Object)locale1));
//       assertFalse(locale2.equals((Object)locale0));
//       assertNotNull(locale2);
//       assertEquals("FR", locale2.getCountry());
//       assertEquals("fr_FR", locale2.toString());
//       assertEquals("fr", locale2.getLanguage());
//       assertEquals("fra", locale2.getISO3Language());
//       assertEquals("", locale2.getVariant());
//       assertEquals("FRA", locale2.getISO3Country());
//       
//       String string1 = locale2.getDisplayLanguage();
//       assertNotSame(string1, string0);
//       assertNotSame(locale2, locale1);
//       assertNotSame(locale2, locale0);
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(locale2.equals((Object)locale1));
//       assertFalse(locale2.equals((Object)locale0));
//       assertNotNull(string1);
//       assertEquals("FR", locale2.getCountry());
//       assertEquals("fr_FR", locale2.toString());
//       assertEquals("fr", locale2.getLanguage());
//       assertEquals("fra", locale2.getISO3Language());
//       assertEquals("", locale2.getVariant());
//       assertEquals("FRA", locale2.getISO3Country());
//       assertEquals("\u6CD5\u6587", string1);
//       
//       Set<String> set0 = locale2.getUnicodeLocaleKeys();
//       assertNotSame(locale2, locale1);
//       assertNotSame(locale2, locale0);
//       assertFalse(locale2.equals((Object)locale1));
//       assertFalse(locale2.equals((Object)locale0));
//       assertNotNull(set0);
//       assertEquals(0, set0.size());
//       assertEquals(true, set0.isEmpty());
//       assertEquals("FR", locale2.getCountry());
//       assertEquals("fr_FR", locale2.toString());
//       assertEquals("fr", locale2.getLanguage());
//       assertEquals("fra", locale2.getISO3Language());
//       assertEquals("", locale2.getVariant());
//       assertEquals("FRA", locale2.getISO3Country());
//       
//       TimeZone timeZone0 = null;
//       boolean boolean0 = false;
//       int int5 = 117;
//       assertFalse(int5 == int2);
//       
//       // Undeclared exception!
//       try {
//         String string2 = FastDateFormat.getTimeZoneDisplay(timeZone0, boolean0, int5, locale2);
//         fail("Expecting exception: NullPointerException");
//       
//       } catch(NullPointerException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test48() {}
//   @Test
//   public void test48()  throws Throwable  {
//       String string0 = "h$7=Z/";
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("h$7=Z/", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
//       
//       Locale locale0 = Locale.CANADA;
//       assertNotNull(locale0);
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("en_CA", locale0.toString());
//       
//       List list0 = fastDateFormat0.parsePattern();
//       assertNotNull(list0);
//       assertEquals("h$7=Z/", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, list0.isEmpty());
//       assertEquals(4, list0.size());
//       
//       List list1 = fastDateFormat0.parsePattern();
//       assertNotSame(list1, list0);
//       assertFalse(list1.equals((Object)list0));
//       assertNotNull(list1);
//       assertEquals("h$7=Z/", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(4, list1.size());
//       assertEquals(false, list1.isEmpty());
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       
//       String string1 = fastDateFormat0.getPattern();
//       assertSame(string1, string0);
//       assertSame(string0, string1);
//       assertNotNull(string1);
//       assertEquals("h$7=Z/", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("h$7=Z/", string1);
//       
//       String string2 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
//       assertNotSame(string0, string2);
//       assertSame(string0, string1);
//       assertNotSame(string2, string0);
//       assertNotSame(string2, string1);
//       assertFalse(string0.equals((Object)string2));
//       assertFalse(string2.equals((Object)string0));
//       assertFalse(string2.equals((Object)string1));
//       assertNotNull(string2);
//       assertEquals("h$7=Z/", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("8$7=+0000/", string2);
//       
//       int int0 = 0;
//       FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(int0);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertNotNull(fastDateFormat1);
//       assertEquals("h:mm:ss a z", fastDateFormat1.getPattern());
//       assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals(18, fastDateFormat1.getMaxLengthEstimate());
//       
//       int int1 = 0;
//       Locale locale1 = Locale.KOREAN;
//       assertNotSame(locale1, locale0);
//       assertFalse(locale1.equals((Object)locale0));
//       assertNotNull(locale1);
//       assertEquals("", locale1.getISO3Country());
//       assertEquals("kor", locale1.getISO3Language());
//       assertEquals("ko", locale1.toString());
//       assertEquals("ko", locale1.getLanguage());
//       assertEquals("", locale1.getCountry());
//       assertEquals("", locale1.getVariant());
//       
//       int int2 = (-27);
//       int int3 = (-1357);
//       int int4 = (-1462);
//       int int5 = 0;
//       Locale locale2 = Locale.KOREAN;
//       assertSame(locale2, locale1);
//       assertNotSame(locale2, locale0);
//       assertFalse(locale2.equals((Object)locale0));
//       assertNotNull(locale2);
//       assertEquals("", locale2.getISO3Country());
//       assertEquals("", locale2.getVariant());
//       assertEquals("", locale2.getCountry());
//       assertEquals("kor", locale2.getISO3Language());
//       assertEquals("ko", locale2.getLanguage());
//       assertEquals("ko", locale2.toString());
//       
//       long long0 = 0L;
//       Long long1 = new Long(long0);
//       assertTrue(long1.equals((Object)long0));
//       assertEquals(0L, (long)long1);
//       
//       int int6 = 0;
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//   }

  @Test
  public void test49()  throws Throwable  {
      String string0 = "MMMM d, yyyy h:mm:ss a z";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
      assertNotNull(fastDateFormat0);
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
      assertEquals(39, fastDateFormat0.getMaxLengthEstimate());
      
      int int0 = 0;
      boolean boolean0 = fastDateFormat0.equals((Object) string0);
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
      assertEquals(39, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(boolean0);
  }

  @Test
  public void test50() {}
//   @Test
//   public void test50()  throws Throwable  {
//       int int0 = 0;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, (TimeZone) zoneInfo0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
//       
//       String string0 = fastDateFormat0.format((Object) mockGregorianCalendar0);
//       assertNotNull(string0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("8:21:21 PM GMT", string0);
//       
//       try {
//         Object object0 = fastDateFormat0.parseObject(string0);
//         fail("Expecting exception: ParseException");
//       
//       } catch(ParseException e) {
//          //
//          // Format.parseObject(String) failed
//          //
//       }
//   }

  @Test
  public void test51()  throws Throwable  {
      String string0 = "MMMM d, yyyy h:mm:ss a z";
      TimeZone timeZone0 = null;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, timeZone0);
      assertNotNull(fastDateFormat0);
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(39, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
      
      int int0 = 60;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=60,MONTH=60,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=60,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      
      String string1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-60110985600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=65,MONTH=2,WEEK_OF_YEAR=9,WEEK_OF_MONTH=0,DAY_OF_MONTH=1,DAY_OF_YEAR=60,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(39, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
      assertEquals("March 1, 0065 12:00:00 AM GMT", string1);
  }

  @Test
  public void test52() {}
//   @Test
//   public void test52()  throws Throwable  {
//       int int0 = 1;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("MMMM d, yyyy", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
//       
//       Locale locale0 = fastDateFormat0.getLocale();
//       assertNotNull(locale0);
//       assertEquals("MMMM d, yyyy", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("'2+]F xZm,>)1Q", locale0.getVariant());
//       assertEquals("f[uwb!pe=sbn", locale0.getLanguage());
//       assertEquals("f[uwb!pe=sbn_F[UWB!PE=SBN_'2+]F xZm,>)1Q", locale0.toString());
//       assertEquals("F[UWB!PE=SBN", locale0.getCountry());
//   }

  @Test
  public void test53()  throws Throwable  {
      String string0 = "EwKm.";
      int int0 = 0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("EwKm.", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=EwKm.,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) simpleTimeZone0);
      assertNotNull(fastDateFormat0);
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("EwKm.", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=EwKm.,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("EwKm.", fastDateFormat0.getPattern());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test
  public void test54()  throws Throwable  {
      int int0 = (-343);
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -343
         //
      }
  }
}
