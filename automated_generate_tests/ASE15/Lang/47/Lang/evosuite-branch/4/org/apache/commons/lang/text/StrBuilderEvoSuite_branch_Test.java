/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:06:53 GMT 2014
 */

package org.apache.commons.lang.text;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.lang.text.StrBuilder;
import org.apache.commons.lang.text.StrMatcher;
import org.apache.commons.lang.text.StrTokenizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class StrBuilderEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      String string0 = "nZ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(34, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char char0 = 'L';
      int int0 = strBuilder0.indexOf(char0);
      assertEquals((-1), int0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(34, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(34, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      long long0 = strBuilder_StrBuilderReader0.skip((long) int0);
      assertEquals(0L, long0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(34, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
  }

  @Test
  public void test001()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[8];
      char char0 = 'g';
      charArray0[2] = char0;
      charArray0[5] = charArray0[2];
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      long long0 = strBuilder_StrBuilderReader0.skip((long) charArray0[5]);
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'g', '\u0000', '\u0000', 'g', '\u0000', '\u0000'}, charArray0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
  }

  @Test
  public void test002()  throws Throwable  {
      String string0 = "nZ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(34, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.indexOf(string0);
      assertEquals(0, int0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(34, strBuilder0.capacity());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(34, strBuilder0.capacity());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      long long0 = strBuilder_StrBuilderReader0.skip((long) int0);
      assertEquals(0L, long0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(34, strBuilder0.capacity());
  }

  @Test
  public void test003()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[3];
      StrBuilder strBuilder1 = strBuilder0.appendln(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(4, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray1 = new char[11];
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int int0 = strBuilder_StrBuilderReader0.read(charArray1);
      assertEquals(4, int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\n', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(charArray1, charArray0);
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test
  public void test004()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[2];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
  }

  @Test
  public void test005()  throws Throwable  {
      String string0 = "nZ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertEquals(34, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.indexOf(string0);
      assertEquals(0, int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertEquals(34, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.length());
      
      char[] charArray0 = new char[4];
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertEquals(34, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.length());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      int int1 = strBuilder_StrBuilderReader0.read(charArray0, int0, int0);
      assertEquals(0, int1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertEquals(34, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.length());
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test006()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.length();
      assertEquals(0, int0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      
      char char0 = 'B';
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = char0;
      // Undeclared exception!
      try {
        int int1 = strBuilder_StrBuilderReader0.read(charArray0, int0, (int) charArray0[0]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test007()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[1];
      char char0 = 'M';
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      // Undeclared exception!
      try {
        int int0 = strBuilder_StrBuilderReader0.read(charArray0, (int) char0, (int) charArray0[0]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test008()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      int int0 = (-2023);
      char char0 = 'r';
      char[] charArray0 = new char[5];
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      // Undeclared exception!
      try {
        int int1 = strBuilder_StrBuilderReader0.read(charArray0, (int) char0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test009()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[9];
      int int0 = (-1207);
      // Undeclared exception!
      try {
        int int1 = strBuilder_StrBuilderReader0.read(charArray0, int0, (int) charArray0[1]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test010()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertEquals((-1), int0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
  }

  @Test
  public void test011()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char char0 = 't';
      int int0 = (-2516);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.insert(int0, char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2516
         //
      }
  }

  @Test
  public void test012()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      char[] charArray0 = new char[16];
      String string0 = strBuilder0.leftString(int0);
      assertEquals("", string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(string0);
      
      char char0 = 'Y';
      charArray0[0] = char0;
      StrMatcher.NoMatcher strMatcher_NoMatcher0 = (StrMatcher.NoMatcher)StrMatcher.noneMatcher();
      assertNotNull(strMatcher_NoMatcher0);
      
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.replace((StrMatcher) strMatcher_NoMatcher0, string0, (int) charArray0[0], int0, (int) char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
      }
  }

  @Test
  public void test013()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      char[] charArray0 = new char[16];
      String string0 = strBuilder0.leftString(int0);
      assertEquals("", string0);
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(string0);
      
      char char0 = 'Y';
      StrMatcher.NoMatcher strMatcher_NoMatcher0 = (StrMatcher.NoMatcher)StrMatcher.noneMatcher();
      assertNotNull(strMatcher_NoMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.replace((StrMatcher) strMatcher_NoMatcher0, string0, (int) charArray0[0], (int) char0, (int) char0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test014()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      int int0 = (-1);
      // Undeclared exception!
      try {
        int int1 = strBuilder0.validateRange(int0, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
      }
  }

  @Test
  public void test015()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder1);
      
      int int0 = strBuilder1.hashCode();
      assertEquals(10, int0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
  }

  @Test
  public void test016()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.equals((Object) strBuilder0);
      assertTrue(boolean0);
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
  }

  @Test
  public void test017()  throws Throwable  {
      String string0 = "<\\[TE~&$BG?~$6J";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(15, strBuilder0.size());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.equals((Object) string0);
      assertFalse(boolean0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(15, strBuilder0.size());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
  }

  @Test
  public void test018()  throws Throwable  {
      StrBuilder strBuilder0 = null;
      StrBuilder strBuilder1 = new StrBuilder();
      assertNull(strBuilder1.getNullText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNotNull(strBuilder1);
      
      // Undeclared exception!
      try {
        boolean boolean0 = strBuilder1.equals(strBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test019()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertNotSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
      assertTrue(boolean0);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder1.equals((Object)strBuilder0));
  }

  @Test
  public void test020()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = true;
      StrBuilder strBuilder1 = strBuilder0.appendln(boolean0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5, strBuilder1.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = new StrBuilder(string0);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertEquals(true, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      
      boolean boolean1 = strBuilder2.equalsIgnoreCase(strBuilder1);
      assertFalse(boolean1);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertEquals(true, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
  }

  @Test
  public void test021()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      char[] charArray0 = new char[1];
      int int1 = 1;
      StrBuilder strBuilder1 = strBuilder0.insert(int0, charArray0, int0, int1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(strBuilder1);
      
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = (StrMatcher.CharMatcher)StrMatcher.charSetMatcher(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(strMatcher_CharMatcher0);
      
      int int2 = strBuilder0.lastIndexOf((StrMatcher) strMatcher_CharMatcher0);
      assertEquals(0, int2);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test
  public void test022()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = true;
      StrBuilder strBuilder1 = strBuilder0.appendln(boolean0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      
      char[] charArray0 = new char[1];
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = (StrMatcher.CharMatcher)StrMatcher.charSetMatcher(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(strMatcher_CharMatcher0);
      
      int int0 = strBuilder0.lastIndexOf((StrMatcher) strMatcher_CharMatcher0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test
  public void test023()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.length();
      assertEquals(0, int0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.insert(int0, (double) int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      
      StrMatcher strMatcher0 = null;
      int int1 = strBuilder0.lastIndexOf(strMatcher0, int0);
      assertEquals((-1), int1);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test024()  throws Throwable  {
      String string0 = "Be";
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln((long) int0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder1);
      
      char[] charArray0 = new char[2];
      char char0 = '}';
      charArray0[0] = char0;
      int int1 = strBuilder1.lastIndexOf(string0, (int) charArray0[0]);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'}', '\u0000'}, charArray0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test025()  throws Throwable  {
      String string0 = "Be";
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln((long) int0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(2, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(2, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(2, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder1);
      
      char[] charArray0 = new char[2];
      int int1 = strBuilder0.lastIndexOf(string0, (int) charArray0[1]);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(2, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test026()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln((long) int0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(2, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder1);
      
      char[] charArray0 = new char[2];
      String string0 = ".";
      int int1 = strBuilder0.lastIndexOf(string0, (int) charArray0[1]);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test027()  throws Throwable  {
      String string0 = "WLB=F)";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(6, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(38, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      String string1 = "WY`jRI7";
      assertNotSame(string1, string0);
      
      int int1 = strBuilder0.lastIndexOf(string1, int0);
      assertEquals((-1), int1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(6, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(38, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test028()  throws Throwable  {
      int int0 = (-1);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      String string0 = "";
      char char0 = '!';
      StrBuilder strBuilder1 = strBuilder0.append(char0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNotNull(strBuilder1);
      
      int int1 = strBuilder1.lastIndexOf(string0, (int) char0);
      assertEquals(0, int1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test029()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      String string0 = null;
      int int1 = strBuilder0.lastIndexOf(string0, int0);
      assertEquals((-1), int1);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test030()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char char0 = '|';
      String string0 = "Windows";
      int int0 = strBuilder0.lastIndexOf(string0, (int) char0);
      assertEquals((-1), int0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
  }

  @Test
  public void test031()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      char char0 = 'M';
      StrBuilder strBuilder1 = strBuilder0.appendPadding((int) char0, char0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(77, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(77, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(77, strBuilder0.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(77, strBuilder1.size());
      assertEquals(77, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(77, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      
      char char1 = 'f';
      int int0 = strBuilder0.lastIndexOf(char1);
      assertEquals((-1), int0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(77, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(77, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(77, strBuilder0.size());
      assertFalse(char1 == char0);
  }

  @Test
  public void test032()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char char0 = 'M';
      StrBuilder strBuilder1 = strBuilder0.appendPadding((int) char0, char0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertEquals(77, strBuilder1.size());
      assertEquals(77, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(77, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(77, strBuilder0.size());
      assertEquals(77, strBuilder0.capacity());
      assertEquals(77, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder1);
      
      int int0 = strBuilder0.lastIndexOf(char0);
      assertEquals(76, int0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(77, strBuilder0.size());
      assertEquals(77, strBuilder0.capacity());
      assertEquals(77, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test
  public void test033()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char char0 = '(';
      int int1 = strBuilder0.lastIndexOf(char0, (int) char0);
      assertEquals((-1), int1);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test034()  throws Throwable  {
      int int0 = (-3430);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln((double) int0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(8, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(8, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(8, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder1);
      
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = (StrMatcher.CharMatcher)StrMatcher.commaMatcher();
      assertNotNull(strMatcher_CharMatcher0);
      
      boolean boolean0 = strBuilder0.contains((StrMatcher) strMatcher_CharMatcher0);
      assertFalse(boolean0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(8, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
  }

  @Test
  public void test035()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = (-439);
      String string0 = "Windows";
      StrMatcher.StringMatcher strMatcher_StringMatcher0 = (StrMatcher.StringMatcher)StrMatcher.stringMatcher(string0);
      assertNotNull(strMatcher_StringMatcher0);
      
      int int1 = strBuilder0.indexOf((StrMatcher) strMatcher_StringMatcher0, int0);
      assertEquals((-1), int1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test036()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      char char0 = 'M';
      StrBuilder strBuilder1 = strBuilder0.appendPadding((int) char0, char0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(77, strBuilder0.size());
      assertEquals(77, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(77, strBuilder0.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(77, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(77, strBuilder1.capacity());
      assertEquals(77, strBuilder1.length());
      assertNotNull(strBuilder1);
      
      String string0 = "pF<Q.m";
      StrBuilder strBuilder2 = strBuilder1.replaceFirst(string0, string0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(77, strBuilder0.size());
      assertEquals(77, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(77, strBuilder0.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(77, strBuilder2.length());
      assertEquals(77, strBuilder2.capacity());
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(77, strBuilder2.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(77, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(77, strBuilder1.capacity());
      assertEquals(77, strBuilder1.length());
      assertNotNull(strBuilder2);
  }

  @Test
  public void test037()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      long long0 = 0L;
      StrBuilder strBuilder1 = strBuilder0.append(long0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNotNull(strBuilder1);
      
      String string0 = "uz^vDzApe!S~L693ap";
      StrBuilder strBuilder2 = strBuilder0.deleteAll(string0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder2.size());
      assertEquals(1, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(false, strBuilder2.isEmpty());
      assertNotNull(strBuilder2);
  }

  @Test
  public void test038()  throws Throwable  {
      int int0 = (-3430);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.getNewLineText();
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(string0);
      
      boolean boolean0 = strBuilder0.contains(string0);
      assertFalse(boolean0);
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
  }

  @Test
  public void test039()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      String string0 = "";
      int int1 = (-2617);
      int int2 = strBuilder0.indexOf(string0, int1);
      assertEquals((-1), int2);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
  }

  @Test
  public void test040()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char char0 = 'm';
      int int0 = (-1138);
      int int1 = strBuilder0.indexOf(char0, int0);
      assertEquals((-1), int1);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test041()  throws Throwable  {
      String string0 = ".";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(33, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      double double0 = 0.0;
      StrBuilder strBuilder1 = strBuilder0.appendln(double0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertEquals(33, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder1);
      
      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = (StrMatcher.CharSetMatcher)StrMatcher.splitMatcher();
      assertNotNull(strMatcher_CharSetMatcher0);
      
      boolean boolean0 = strBuilder1.contains((StrMatcher) strMatcher_CharSetMatcher0);
      assertTrue(boolean0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertEquals(33, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
  }

  @Test
  public void test042()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrMatcher strMatcher0 = null;
      boolean boolean0 = strBuilder0.contains(strMatcher0);
      assertFalse(boolean0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
  }

  @Test
  public void test043()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      float float0 = 570.198F;
      StrBuilder strBuilder1 = strBuilder0.appendln(float0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(8, strBuilder1.size());
      assertEquals(8, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(8, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(8, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder1);
      
      int int0 = (-3528);
      String string0 = strBuilder0.leftString(int0);
      assertEquals("", string0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(8, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(8, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(string0);
      
      boolean boolean0 = strBuilder1.contains(string0);
      assertTrue(boolean0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(8, strBuilder1.size());
      assertEquals(8, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(8, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(8, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
  }

  @Test
  public void test044()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      char char0 = 'g';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((int) char0, (int) char0, char0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(103, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(103, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(103, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(103, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(103, strBuilder0.capacity());
      assertEquals(103, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNotNull(strBuilder1);
      
      boolean boolean0 = strBuilder0.contains(char0);
      assertTrue(boolean0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(103, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(103, strBuilder0.capacity());
      assertEquals(103, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
  }

  @Test
  public void test045()  throws Throwable  {
      String string0 = "2#)Q]";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(38, strBuilder0.capacity());
      assertEquals(6, strBuilder0.length());
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      char char0 = '~';
      boolean boolean0 = strBuilder0.contains(char0);
      assertFalse(boolean0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(38, strBuilder0.capacity());
      assertEquals(6, strBuilder0.length());
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
  }

  @Test
  public void test046()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char char0 = '?';
      int int1 = 1619;
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((Object) strBuilder0, int1, char0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(1619, strBuilder0.capacity());
      assertEquals(1619, strBuilder0.size());
      assertEquals(1619, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1619, strBuilder1.capacity());
      assertEquals(1619, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1619, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(strBuilder1);
      
      String string0 = strBuilder0.midString((int) char0, (int) char0);
      assertEquals("???????????????????????????????????????????????????????????????", string0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(1619, strBuilder0.capacity());
      assertEquals(1619, strBuilder0.size());
      assertEquals(1619, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertFalse(int0 == int1);
      assertNotNull(string0);
  }

  @Test
  public void test047()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      String string0 = "-DfK@$v/";
      StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher(string0);
      assertNotNull(strMatcher_StringMatcher0);
      
      int int0 = strBuilder0.indexOf((StrMatcher) strMatcher_StringMatcher0);
      assertEquals((-1), int0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.appendln(string0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder1.size());
      assertEquals(10, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      
      char[] charArray0 = new char[8];
      char char0 = 'g';
      charArray0[0] = char0;
      String string1 = strBuilder0.midString(int0, (int) charArray0[0]);
      assertEquals("-DfK@$v/\n", string1);
      assertArrayEquals(new char[] {'g', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(string0, string1);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(string1, string0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(10, strBuilder0.size());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test
  public void test048()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      String string0 = "-DfK@$v/";
      StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher(string0);
      assertNotNull(strMatcher_StringMatcher0);
      
      int int0 = strBuilder0.indexOf((StrMatcher) strMatcher_StringMatcher0);
      assertEquals((-1), int0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      
      char[] charArray0 = new char[8];
      String string1 = strBuilder0.midString(int0, (int) charArray0[0]);
      assertEquals("", string1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test
  public void test049()  throws Throwable  {
      String string0 = null;
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = 5;
      char[] charArray0 = new char[7];
      String string1 = strBuilder0.midString((int) charArray0[5], int0);
      assertEquals("", string1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNotNull(string1);
  }

  @Test
  public void test050()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      int int0 = 661;
      char char0 = 'D';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(int0, int0, char0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(661, strBuilder1.size());
      assertEquals(661, strBuilder1.length());
      assertEquals(661, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(661, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(661, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(661, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.appendln(strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(1323, strBuilder2.length());
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(1323, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(1323, strBuilder2.size());
      assertEquals(1323, strBuilder1.capacity());
      assertEquals(1323, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(1323, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1323, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(1323, strBuilder0.length());
      assertEquals(1323, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNotNull(strBuilder2);
      
      String string0 = strBuilder0.rightString(int0);
      assertEquals("61DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD\n", string0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1323, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(1323, strBuilder0.length());
      assertEquals(1323, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNotNull(string0);
  }

  @Test
  public void test051()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      int int0 = (-3625);
      String string0 = strBuilder0.rightString(int0);
      assertEquals("", string0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(string0);
  }

  @Test
  public void test052()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      String string0 = "<|hh";
      int int0 = 0;
      int int1 = 4;
      StrBuilder strBuilder1 = strBuilder0.appendln(string0, int0, int1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(5, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(5, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(strBuilder1);
      
      String string1 = strBuilder1.leftString(int1);
      assertEquals("<|hh", string1);
      assertNotSame(string0, string1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(string1, string0);
      assertEquals(5, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(5, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(int0 == int1);
      assertTrue(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test
  public void test053()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char char0 = ':';
      String string0 = strBuilder0.leftString((int) char0);
      assertEquals("", string0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(string0);
  }

  @Test
  public void test054()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      String string0 = "-DfK@$v/";
      StrBuilder strBuilder1 = strBuilder0.appendln(string0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(10, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(10, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.length());
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder1);
      
      boolean boolean0 = strBuilder0.endsWith(string0);
      assertFalse(boolean0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.length());
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
  }

  @Test
  public void test055()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      String string0 = "Dh:{3uF;xqF}";
      Object[] objectArray0 = new Object[8];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, string0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(84, strBuilder0.capacity());
      assertEquals(84, strBuilder0.length());
      assertEquals(84, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(84, strBuilder1.capacity());
      assertEquals(84, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(84, strBuilder1.size());
      assertNotNull(strBuilder1);
      
      boolean boolean0 = strBuilder0.endsWith(string0);
      assertTrue(boolean0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(84, strBuilder0.capacity());
      assertEquals(84, strBuilder0.length());
      assertEquals(84, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
  }

  @Test
  public void test056()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      String string0 = "";
      boolean boolean0 = strBuilder0.endsWith(string0);
      assertTrue(boolean0);
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
  }

  @Test
  public void test057()  throws Throwable  {
      String string0 = null;
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.endsWith(string0);
      assertFalse(boolean0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
  }

  @Test
  public void test058()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      String string0 = "&Cte(p@&$,FUw):a";
      boolean boolean0 = strBuilder0.endsWith(string0);
      assertFalse(boolean0);
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
  }

  @Test
  public void test059()  throws Throwable  {
      String string0 = "nZ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertEquals(34, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.startsWith(string0);
      assertTrue(boolean0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertEquals(34, strBuilder0.capacity());
  }

  @Test
  public void test060()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = 32;
      StrBuilder strBuilder1 = strBuilder0.setLength(int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.size());
      assertNotNull(strBuilder1);
      
      String string1 = "\\]PzIHYUi\"";
      assertNotSame(string1, string0);
      
      boolean boolean0 = strBuilder0.startsWith(string1);
      assertFalse(boolean0);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test061()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      String string0 = "";
      boolean boolean0 = strBuilder0.startsWith(string0);
      assertTrue(boolean0);
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
  }

  @Test
  public void test062()  throws Throwable  {
      String string0 = null;
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.startsWith(string0);
      assertFalse(boolean0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
  }

  @Test
  public void test063()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      String string0 = "<|hh";
      boolean boolean0 = strBuilder0.startsWith(string0);
      assertFalse(boolean0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test
  public void test064()  throws Throwable  {
      int int0 = (-3430);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int1 = strBuilder0.capacity();
      assertEquals(32, int1);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      StrBuilder strBuilder1 = strBuilder0.appendln((double) int1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(5, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.trim();
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(4, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(4, strBuilder2.size());
      assertFalse(int0 == int1);
      assertNotNull(strBuilder2);
  }

  @Test
  public void test065()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = false;
      StrBuilder strBuilder1 = strBuilder0.append(boolean0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.trim();
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals(32, strBuilder2.capacity());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(5, strBuilder2.size());
      assertEquals(5, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder2);
  }

  @Test
  public void test066()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test067()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.reverse();
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test068()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln((long) int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(2, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(2, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.reverse();
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(2, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(2, strBuilder2.size());
      assertEquals(2, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(2, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNotNull(strBuilder2);
  }

  @Test
  public void test069()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln((long) int0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertNotNull(strBuilder1);
      
      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = (StrMatcher.CharSetMatcher)StrMatcher.splitMatcher();
      assertNotNull(strMatcher_CharSetMatcher0);
      
      StrBuilder strBuilder2 = strBuilder0.deleteAll((StrMatcher) strMatcher_CharSetMatcher0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder2.length());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(1, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
  }

  @Test
  public void test070()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char char0 = 'M';
      String string0 = null;
      StrMatcher.NoMatcher strMatcher_NoMatcher0 = (StrMatcher.NoMatcher)StrMatcher.stringMatcher(string0);
      assertNotNull(strMatcher_NoMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.appendPadding((int) char0, char0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(77, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(77, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(77, strBuilder0.size());
      assertEquals(77, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(77, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(77, strBuilder1.size());
      assertNotNull(strBuilder1);
      
      String string1 = "pF<Q.m";
      StrBuilder strBuilder2 = strBuilder0.replaceFirst((StrMatcher) strMatcher_NoMatcher0, string1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(77, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(77, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(77, strBuilder0.size());
      assertEquals(77, strBuilder2.capacity());
      assertEquals(77, strBuilder2.size());
      assertEquals(77, strBuilder2.length());
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
  }

  @Test
  public void test071()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrMatcher strMatcher0 = null;
      StrBuilder strBuilder1 = strBuilder0.deleteFirst(strMatcher0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test072()  throws Throwable  {
      String string0 = "5SE4~mK.y`Kb1Q]Ohx";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(18, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.size());
      assertEquals(50, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      String string1 = null;
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(string0, string1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(50, strBuilder1.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(50, strBuilder0.capacity());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test073()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      String string0 = strBuilder_StrBuilderTokenizer0.getContent();
      assertEquals("", string0);
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(string0);
      
      String string1 = null;
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(string1, string0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test074()  throws Throwable  {
      String string0 = "1.5";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(35, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char char0 = '7';
      String string1 = strBuilder0.rightString((int) char0);
      assertEquals("1.5", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(35, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll(string0, string1);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3, strBuilder1.size());
      assertEquals(35, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.length());
      assertEquals(35, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(strBuilder1);
  }

  @Test
  public void test075()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      String string1 = "0";
      assertNotSame(string1, string0);
      
      String string2 = null;
      StrBuilder strBuilder1 = strBuilder0.replaceAll(string1, string2);
      assertNotSame(string0, string1);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(string1, string0);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(strBuilder1);
  }

  @Test
  public void test076()  throws Throwable  {
      int int0 = (-3430);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.getNewLineText();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(string0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll(string0, string0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test077()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char char0 = '3';
      StrBuilder strBuilder1 = strBuilder0.appendln(char0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(2, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(2, strBuilder1.size());
      assertNotNull(strBuilder1);
      
      char[] charArray0 = new char[4];
      StrBuilder strBuilder2 = strBuilder0.replaceFirst(char0, charArray0[0]);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(2, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder2.length());
      assertEquals(2, strBuilder2.size());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertNotNull(strBuilder2);
  }

  @Test
  public void test078()  throws Throwable  {
      String string0 = "1.5";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(35, strBuilder0.capacity());
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char char0 = '7';
      char char1 = 't';
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(char0, char1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertEquals(35, strBuilder1.capacity());
      assertEquals(3, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(35, strBuilder0.capacity());
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      assertFalse(char0 == char1);
      assertFalse(char1 == char0);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test079()  throws Throwable  {
      String string0 = null;
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[7];
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(charArray0[6], charArray0[6]);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test080()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char char0 = '|';
      char char1 = 'f';
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter1 = (StrBuilder.StrBuilderWriter)strBuilder_StrBuilderWriter0.append(char1);
      assertSame(strBuilder_StrBuilderWriter0, strBuilder_StrBuilderWriter1);
      assertSame(strBuilder_StrBuilderWriter1, strBuilder_StrBuilderWriter0);
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(char1 == char0);
      assertNotNull(strBuilder_StrBuilderWriter1);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll(char1, char0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertFalse(char1 == char0);
      assertFalse(char0 == char1);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test081()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = 5;
      char char0 = 'N';
      StrBuilder strBuilder1 = strBuilder0.appendPadding(int0, char0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder1.length());
      assertEquals(5, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      
      char char1 = '\'';
      StrBuilder strBuilder2 = strBuilder0.replaceAll(char1, char0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(5, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(5, strBuilder2.length());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(char1 == char0);
      assertFalse(char0 == char1);
      assertNotNull(strBuilder2);
  }

  @Test
  public void test082()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      char char0 = 'm';
      StrBuilder strBuilder1 = strBuilder0.replaceAll(char0, char0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test083()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[5];
      String string0 = "org.apache.commons.lang.text.StrTokenizer";
      StrBuilder strBuilder1 = strBuilder0.replace(int0, (int) charArray0[1], string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(41, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(41, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(41, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(41, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(41, strBuilder1.size());
      assertEquals(41, strBuilder1.length());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test084()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[1];
      char char0 = 'M';
      String string0 = null;
      charArray0[0] = char0;
      StrBuilder strBuilder1 = strBuilder0.appendPadding((int) char0, char0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(77, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(77, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(77, strBuilder0.length());
      assertEquals(77, strBuilder1.length());
      assertEquals(77, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(77, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = (StrMatcher.CharMatcher)StrMatcher.charSetMatcher(charArray0);
      assertArrayEquals(new char[] {'M'}, charArray0);
      assertNotNull(strMatcher_CharMatcher0);
      
      StrBuilder strBuilder2 = strBuilder0.replaceFirst((StrMatcher) strMatcher_CharMatcher0, string0);
      assertArrayEquals(new char[] {'M'}, charArray0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(76, strBuilder2.length());
      assertEquals(76, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(77, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(77, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(76, strBuilder0.length());
      assertEquals(76, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder2);
  }

  @Test
  public void test085()  throws Throwable  {
      String string0 = ".";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(1, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(string0, string0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.size());
      assertEquals(33, strBuilder1.capacity());
      assertEquals(1, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test086()  throws Throwable  {
      String string0 = "bkF#K>\":o.,Zu'.9rr";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(18, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(50, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst(string0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertEquals(50, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(50, strBuilder0.capacity());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test087()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      String string0 = null;
      StrBuilder strBuilder1 = strBuilder0.deleteFirst(string0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test088()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      String string0 = "Dh:{3uF;xqF}";
      StrBuilder strBuilder1 = strBuilder0.deleteFirst(string0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test089()  throws Throwable  {
      String string0 = "Vf";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(2, strBuilder0.length());
      assertEquals(34, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll(string0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(34, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertEquals(34, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test090()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      String string0 = null;
      StrBuilder strBuilder1 = strBuilder0.deleteAll(string0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test091() {}
//   @Test
//   public void test091()  throws Throwable  {
//       StrBuilder strBuilder0 = new StrBuilder();
//       assertNull(strBuilder0.getNullText());
//       assertEquals(0, strBuilder0.length());
//       assertEquals(0, strBuilder0.size());
//       assertNull(strBuilder0.getNewLineText());
//       assertEquals(32, strBuilder0.capacity());
//       assertEquals(true, strBuilder0.isEmpty());
//       assertNotNull(strBuilder0);
//       
//       Object object0 = new Object();
//       assertNotNull(object0);
//       
//       StrBuilder strBuilder1 = strBuilder0.append(object0);
//       assertSame(strBuilder0, strBuilder1);
//       assertSame(strBuilder1, strBuilder0);
//       assertNull(strBuilder0.getNullText());
//       assertEquals(false, strBuilder0.isEmpty());
//       assertEquals(25, strBuilder0.length());
//       assertNull(strBuilder0.getNewLineText());
//       assertEquals(25, strBuilder0.size());
//       assertEquals(32, strBuilder0.capacity());
//       assertEquals(25, strBuilder1.length());
//       assertNull(strBuilder1.getNullText());
//       assertEquals(32, strBuilder1.capacity());
//       assertNull(strBuilder1.getNewLineText());
//       assertEquals(25, strBuilder1.size());
//       assertEquals(false, strBuilder1.isEmpty());
//       assertNotNull(strBuilder1);
//       
//       char char0 = 't';
//       StrBuilder strBuilder2 = strBuilder1.deleteFirst(char0);
//       assertSame(strBuilder2, strBuilder0);
//       assertSame(strBuilder2, strBuilder1);
//       assertSame(strBuilder0, strBuilder1);
//       assertSame(strBuilder0, strBuilder2);
//       assertSame(strBuilder1, strBuilder2);
//       assertSame(strBuilder1, strBuilder0);
//       assertEquals(false, strBuilder2.isEmpty());
//       assertEquals(24, strBuilder2.size());
//       assertEquals(24, strBuilder2.length());
//       assertEquals(32, strBuilder2.capacity());
//       assertNull(strBuilder2.getNewLineText());
//       assertNull(strBuilder2.getNullText());
//       assertNull(strBuilder0.getNullText());
//       assertEquals(false, strBuilder0.isEmpty());
//       assertEquals(24, strBuilder0.length());
//       assertNull(strBuilder0.getNewLineText());
//       assertEquals(32, strBuilder0.capacity());
//       assertEquals(24, strBuilder0.size());
//       assertNull(strBuilder1.getNullText());
//       assertEquals(24, strBuilder1.length());
//       assertEquals(32, strBuilder1.capacity());
//       assertNull(strBuilder1.getNewLineText());
//       assertEquals(24, strBuilder1.size());
//       assertEquals(false, strBuilder1.isEmpty());
//       assertNotNull(strBuilder2);
//   }

  @Test
  public void test092()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char char0 = 'Z';
      StrBuilder strBuilder1 = strBuilder0.deleteFirst(char0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test093()  throws Throwable  {
      String string0 = "";
      char char0 = 'z';
      char[] charArray0 = new char[18];
      charArray0[0] = char0;
      charArray0[1] = char0;
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(charArray0);
      assertArrayEquals(new char[] {'z', 'z', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(19, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(19, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(19, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(19, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.deleteAll(char0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNull(strBuilder2.getNullText());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(17, strBuilder2.size());
      assertEquals(17, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(17, strBuilder0.length());
      assertEquals(17, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNotNull(strBuilder2);
  }

  @Test
  public void test094()  throws Throwable  {
      String string0 = "2#)Q]";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(38, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char char0 = '~';
      Object[] objectArray0 = new Object[6];
      objectArray0[5] = (Object) char0;
      assertNotNull(objectArray0[5]);
      
      StrBuilder strBuilder1 = strBuilder0.appendAll(objectArray0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(7, strBuilder0.length());
      assertEquals(38, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(7, strBuilder1.size());
      assertEquals(7, strBuilder1.length());
      assertEquals(38, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.deleteAll(char0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(6, strBuilder2.length());
      assertEquals(38, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(6, strBuilder2.size());
      assertEquals(38, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder2);
  }

  @Test
  public void test095()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.delete(int0, int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test096()  throws Throwable  {
      String string0 = null;
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      boolean boolean0 = true;
      StrBuilder strBuilder1 = strBuilder0.insert(int0, boolean0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.size());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test097()  throws Throwable  {
      String string0 = "WLB=F)";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(38, strBuilder0.capacity());
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      boolean boolean0 = false;
      StrBuilder strBuilder1 = strBuilder0.insert(int0, boolean0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(38, strBuilder0.capacity());
      assertEquals(11, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(38, strBuilder1.capacity());
      assertEquals(11, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(11, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test098()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char char0 = 'W';
      char[] charArray0 = new char[8];
      charArray0[4] = char0;
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.insert(int0, charArray0, int0, (int) charArray0[4]);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 87
         //
      }
  }

  @Test
  public void test099()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      char[] charArray0 = new char[1];
      int int1 = (-35);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.insert(int0, charArray0, int0, int1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -35
         //
      }
  }

  @Test
  public void test100()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[5];
      char char0 = 'U';
      charArray0[0] = char0;
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.insert(int0, charArray0, (int) charArray0[0], (int) charArray0[3]);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: 85
         //
      }
  }

  @Test
  public void test101()  throws Throwable  {
      String string0 = "2#)Q]";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(6, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(38, strBuilder0.capacity());
      assertEquals(6, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char char0 = '*';
      char[] charArray0 = new char[4];
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) strBuilder0;
      assertEquals(6, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(38, strBuilder0.capacity());
      assertEquals(6, strBuilder0.size());
      assertNotNull(objectArray0[0]);
      
      objectArray0[1] = (Object) strBuilder0;
      assertEquals(6, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(38, strBuilder0.capacity());
      assertEquals(6, strBuilder0.size());
      assertNotNull(objectArray0[1]);
      
      objectArray0[2] = (Object) strBuilder0;
      assertEquals(6, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(38, strBuilder0.capacity());
      assertEquals(6, strBuilder0.size());
      assertNotNull(objectArray0[2]);
      
      StrBuilder strBuilder1 = strBuilder0.appendAll(objectArray0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(48, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(48, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(48, strBuilder1.length());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(48, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(48, strBuilder0.size());
      assertNotNull(strBuilder1);
      
      int int0 = (-1740);
      // Undeclared exception!
      try {
        StrBuilder strBuilder2 = strBuilder0.insert((int) char0, charArray0, int0, (int) charArray0[0]);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: -1740
         //
      }
  }

  @Test
  public void test102()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      char[] charArray0 = new char[1];
      StrBuilder strBuilder1 = strBuilder0.insert(int0, charArray0, int0, int0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test103()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      char[] charArray0 = new char[3];
      StrBuilder strBuilder1 = strBuilder0.insert(int0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(3, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, strBuilder0.size());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test104()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      char[] charArray0 = null;
      StrBuilder strBuilder1 = strBuilder0.insert(int0, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test105()  throws Throwable  {
      int int0 = 4;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(4, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char char0 = 'L';
      String string0 = null;
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.insert((int) char0, (Object) string0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 76
         //
      }
  }

  @Test
  public void test106()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.insert(int0, (Object) strBuilder0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test107()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      int int0 = 1296;
      char char0 = 't';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) strBuilder0, int0, char0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(1296, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(1296, strBuilder1.length());
      assertEquals(1296, strBuilder1.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1296, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1296, strBuilder0.length());
      assertEquals(1296, strBuilder0.capacity());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadRight((Object) strBuilder1, int0, char0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(2592, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(2592, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(2592, strBuilder1.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(2592, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2592, strBuilder0.capacity());
      assertEquals(2592, strBuilder0.length());
      assertEquals(2592, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(2592, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(2592, strBuilder2.capacity());
      assertNotNull(strBuilder2);
  }

  @Test
  public void test108()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      Collection<Object> collection0 = null;
      char char0 = '8';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((Object) collection0, (int) char0, char0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(56, strBuilder1.size());
      assertEquals(56, strBuilder1.capacity());
      assertEquals(56, strBuilder1.length());
      assertEquals(56, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(56, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(56, strBuilder0.size());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test109()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      int int0 = (-1270);
      char char0 = '\"';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((Object) strBuilder0, int0, char0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test110()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      
      int int0 = 1;
      char char0 = 'D';
      StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft((Object) strBuilder0, int0, char0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(2, strBuilder2.length());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertNotNull(strBuilder2);
  }

  @Test
  public void test111()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      Object object0 = null;
      int int0 = 3343;
      char char0 = 'a';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(object0, int0, char0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(3343, strBuilder1.capacity());
      assertEquals(3343, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3343, strBuilder1.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(3343, strBuilder0.size());
      assertEquals(3343, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(3343, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test112()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = 4;
      int int1 = (-2023);
      char char0 = 'r';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(int0, int1, char0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test113()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      int int0 = (-3528);
      char char0 = ':';
      StrBuilder strBuilder1 = strBuilder0.appendPadding(int0, char0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test114()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char char0 = '1';
      StrBuilder strBuilder1 = strBuilder0.appendSeparator(char0, (int) char0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test115()  throws Throwable  {
      int int0 = 0;
      String string0 = "&1)Mf~Q7S=QTjJQ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(15, strBuilder0.size());
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(47, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char char0 = 'W';
      StrBuilder strBuilder1 = strBuilder0.appendSeparator(char0, int0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertEquals(47, strBuilder1.capacity());
      assertEquals(15, strBuilder1.length());
      assertEquals(15, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(15, strBuilder0.size());
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(47, strBuilder0.capacity());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test116()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      String string0 = " \t\n\r\f";
      int int0 = 3343;
      StrBuilder strBuilder1 = strBuilder0.appendSeparator(string0, int0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(5, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(5, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.size());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test117()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      String string0 = " \t\n\r\f";
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.appendSeparator(string0, int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test118()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      String string0 = null;
      int int0 = 1011;
      StrBuilder strBuilder1 = strBuilder0.appendSeparator(string0, int0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test119()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      float float0 = 570.198F;
      StrBuilder strBuilder1 = strBuilder0.appendln(float0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(8, strBuilder1.length());
      assertEquals(8, strBuilder1.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(8, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(8, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder1);
      
      char char0 = ':';
      StrBuilder strBuilder2 = strBuilder1.appendSeparator(char0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(9, strBuilder1.size());
      assertEquals(9, strBuilder1.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(9, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNotNull(strBuilder2);
  }

  @Test
  public void test120()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char char0 = 't';
      StrBuilder strBuilder1 = strBuilder0.appendSeparator(char0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test121()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      String string0 = " \t\n\r\f";
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      char[] charArray0 = new char[4];
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.reset(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertEquals(true, strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertEquals(-1, strBuilder_StrBuilderTokenizer1.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder_StrBuilderTokenizer1);
      
      StrBuilder strBuilder1 = strBuilder0.appendAll((Iterator) strBuilder_StrBuilderTokenizer1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(1, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertEquals(true, strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.previousIndex());
      assertEquals(1, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(4, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.appendSeparator(string0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(9, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(9, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(9, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.size());
      assertNotNull(strBuilder2);
  }

  @Test
  public void test122()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator(string0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test123()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      String string0 = null;
      StrBuilder strBuilder1 = strBuilder0.appendSeparator(string0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test124()  throws Throwable  {
      String string0 = "<\\[TE~&$BG?~$6J";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(15, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(47, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = 117;
      StrBuilder strBuilder1 = strBuilder0.appendln(int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(19, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(19, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(47, strBuilder0.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(47, strBuilder1.capacity());
      assertEquals(19, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(19, strBuilder1.size());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.append((Object) strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertEquals(38, strBuilder2.size());
      assertEquals(47, strBuilder2.capacity());
      assertEquals(38, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(38, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(47, strBuilder0.capacity());
      assertEquals(38, strBuilder0.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(38, strBuilder1.size());
      assertEquals(47, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(38, strBuilder1.length());
      assertNotNull(strBuilder2);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(38, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(47, strBuilder0.capacity());
      assertEquals(38, strBuilder0.size());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(38, strBuilder1.size());
      assertEquals(47, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(38, strBuilder1.length());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrBuilder strBuilder3 = strBuilder1.appendWithSeparators((Iterator) strBuilder_StrBuilderTokenizer0, string0);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(89, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(89, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(89, strBuilder0.capacity());
      assertEquals(2, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(89, strBuilder1.length());
      assertEquals(89, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(89, strBuilder1.capacity());
      assertEquals(false, strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(89, strBuilder3.length());
      assertEquals(89, strBuilder3.size());
      assertEquals(89, strBuilder3.capacity());
      assertNotNull(strBuilder3);
  }

  @Test
  public void test125()  throws Throwable  {
      int int0 = (-1);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      assertEquals(false, strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(false, strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals(-1, strTokenizer0.previousIndex());
      assertNotNull(strTokenizer0);
      
      String string0 = null;
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) strTokenizer0, string0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(false, strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(false, strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals(-1, strTokenizer0.previousIndex());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test126()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      Iterator<Object> iterator0 = null;
      String string0 = "";
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(iterator0, string0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test127()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(object0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(26, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(26, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(26, strBuilder0.size());
      assertEquals(26, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder1);
      
      int int0 = 1296;
      char char0 = 't';
      StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft((Object) strBuilder1, int0, char0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals(1322, strBuilder1.capacity());
      assertEquals(1322, strBuilder1.length());
      assertEquals(1322, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1322, strBuilder2.length());
      assertEquals(1322, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(1322, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(1322, strBuilder0.size());
      assertEquals(1322, strBuilder0.length());
      assertEquals(1322, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder2);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(1322, strBuilder0.size());
      assertEquals(1322, strBuilder0.length());
      assertEquals(1322, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      List list0 = strBuilder_StrBuilderTokenizer0.getTokenList();
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals(2, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(1322, strBuilder0.size());
      assertEquals(1322, strBuilder0.length());
      assertEquals(1322, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(list0);
      
      String string0 = "&Cte(p@&$,FUw):a";
      StrBuilder strBuilder3 = strBuilder2.appendWithSeparators((Collection) list0, string0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals(2658, strBuilder1.capacity());
      assertEquals(2658, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(2658, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(2, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(2658, strBuilder2.size());
      assertEquals(2658, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(2658, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(false, strBuilder3.isEmpty());
      assertEquals(2658, strBuilder3.capacity());
      assertEquals(2658, strBuilder3.size());
      assertEquals(2658, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(2658, strBuilder0.capacity());
      assertEquals(2658, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2658, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder3);
  }

  @Test
  public void test128()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      List list0 = strBuilder_StrBuilderTokenizer0.getTokenList();
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(list0);
      
      String string0 = "&Cte(p@&$,FUw):a";
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) list0, string0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test129()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.getNullText();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(string0);
      
      Collection<Integer> collection0 = null;
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(collection0, string0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(true, strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test130()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      String string0 = null;
      Object[] objectArray0 = new Object[9];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, string0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test131()  throws Throwable  {
      String string0 = "1.5";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(35, strBuilder0.capacity());
      assertEquals(3, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrTokenizer strTokenizer0 = null;
      StrBuilder strBuilder1 = strBuilder0.appendAll((Iterator) strTokenizer0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(35, strBuilder1.capacity());
      assertEquals(3, strBuilder1.size());
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(35, strBuilder0.capacity());
      assertEquals(3, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test132()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((double) int0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(3, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(3, strBuilder1.size());
      assertEquals(3, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.size());
      assertNotNull(strBuilder1);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(3, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(3, strBuilder1.size());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(3, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.size());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      List list0 = strBuilder_StrBuilderTokenizer0.getTokenList();
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(3, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(3, strBuilder1.size());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(3, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      StrBuilder strBuilder2 = strBuilder1.appendAll((Collection) list0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals(6, strBuilder1.length());
      assertEquals(6, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(6, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(6, strBuilder2.size());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(6, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(strBuilder2);
  }

  @Test
  public void test133()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      StrBuilder strBuilder1 = strBuilder0.appendAll((Collection) linkedList0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test134()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      Collection<Object> collection0 = null;
      StrBuilder strBuilder1 = strBuilder0.appendAll(collection0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test135()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      String[] stringArray0 = strBuilder_StrBuilderTokenizer0.getTokenArray();
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(stringArray0);
      
      StrBuilder strBuilder1 = strBuilder0.appendAll((Object[]) stringArray0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test136()  throws Throwable  {
      String string0 = "nZ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.size());
      assertEquals(34, strBuilder0.capacity());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      Object[] objectArray0 = null;
      StrBuilder strBuilder1 = strBuilder0.appendAll(objectArray0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(34, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(2, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.size());
      assertEquals(34, strBuilder0.capacity());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test137()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      String string0 = "";
      char[] charArray0 = new char[8];
      char char0 = 'H';
      charArray0[1] = char0;
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
      assertArrayEquals(new char[] {'\u0000', 'H', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(false, strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals(false, strTokenizer0.isEmptyTokenAsNull());
      assertEquals(-1, strTokenizer0.previousIndex());
      assertNotNull(strTokenizer0);
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) strTokenizer0, string0);
      assertArrayEquals(new char[] {'\u0000', 'H', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(false, strTokenizer0.isEmptyTokenAsNull());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer0.previousIndex());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.length());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test138()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[5];
      char char0 = 't';
      charArray0[1] = char0;
      charArray0[2] = charArray0[1];
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.appendln(charArray0, int0, (int) charArray0[2]);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 116
         //
      }
  }

  @Test
  public void test139()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      char[] charArray0 = new char[2];
      int int0 = (-1381);
      // Undeclared exception!
      try {
        strBuilder_StrBuilderWriter0.write(charArray0, (int) charArray0[1], int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -1381
         //
      }
  }

  @Test
  public void test140()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[10];
      char char0 = 'C';
      charArray0[1] = char0;
      charArray0[7] = charArray0[1];
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(charArray0, (int) charArray0[7], (int) char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 67
         //
      }
  }

  @Test
  public void test141()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[4];
      int int0 = (-220);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.appendln(charArray0, int0, (int) charArray0[2]);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 0
         //
      }
  }

  @Test
  public void test142()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      char[] charArray0 = strBuilder0.toCharArray(int0, int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(charArray0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      strBuilder_StrBuilderWriter0.write(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
  }

  @Test
  public void test143()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append(strBuilder0, int0, int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test144()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char char0 = '(';
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.appendln(strBuilder0, int0, (int) char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
      }
  }

  @Test
  public void test145()  throws Throwable  {
      String string0 = "5SE4~mK.y`Kb1Q]Ohx";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(18, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(50, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) strBuilder0;
      assertEquals(18, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(50, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(objectArray0[0]);
      
      StrBuilder strBuilder1 = strBuilder0.appendAll(objectArray0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(36, strBuilder0.size());
      assertEquals(36, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(50, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(36, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(50, strBuilder1.capacity());
      assertEquals(36, strBuilder1.length());
      assertNotNull(strBuilder1);
      
      int int0 = 34;
      int int1 = (-1333);
      // Undeclared exception!
      try {
        StrBuilder strBuilder2 = strBuilder0.appendln(strBuilder0, int0, int1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
      }
  }

  @Test
  public void test146()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      int int0 = 6120;
      char char0 = 'N';
      StrBuilder strBuilder1 = strBuilder0.appendPadding(int0, char0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(6120, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(6120, strBuilder0.capacity());
      assertEquals(6120, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(6120, strBuilder1.size());
      assertEquals(6120, strBuilder1.capacity());
      assertEquals(6120, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.appendln(strBuilder0, (int) char0, (int) char0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(6199, strBuilder0.size());
      assertEquals(6199, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(6199, strBuilder0.capacity());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(6199, strBuilder2.length());
      assertEquals(6199, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(6199, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNotNull(strBuilder2);
  }

  @Test
  public void test147()  throws Throwable  {
      String string0 = null;
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      int int0 = (-1281);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.appendln(strBuilder0, int0, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
      }
  }

  @Test
  public void test148()  throws Throwable  {
      String string0 = "nZ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(34, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.indexOf(string0);
      assertEquals(0, int0);
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(34, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = null;
      StrBuilder strBuilder2 = strBuilder0.append(strBuilder1, int0, int0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(34, strBuilder0.capacity());
      assertEquals(2, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(34, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.length());
      assertNotNull(strBuilder2);
  }

  @Test
  public void test149()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = null;
      StrBuilder strBuilder2 = strBuilder0.append(strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder0, strBuilder2);
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(true, strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder2);
  }

  @Test
  public void test150()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) string0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(16, stringBuffer0.capacity());
      assertNotNull(stringBuffer0);
      
      int int0 = 0;
      int int1 = (-352);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, int0, int1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
      }
  }

  @Test
  public void test151()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) string0);
      assertEquals(0, stringBuffer0.length());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      char char0 = '@';
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, (int) char0, (int) char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
      }
  }

  @Test
  public void test152()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) string0);
      assertEquals(0, stringBuffer0.length());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      char[] charArray0 = new char[9];
      int int0 = (-1422);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.appendln(stringBuffer0, int0, (int) charArray0[5]);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
      }
  }

  @Test
  public void test153()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = null;
      int int0 = (-2370);
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, int0, int0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test154()  throws Throwable  {
      String string0 = "nZ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(34, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) string0);
      assertEquals("nZ", stringBuffer0.toString());
      assertEquals(2, stringBuffer0.length());
      assertEquals(18, stringBuffer0.capacity());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(34, strBuilder0.capacity());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(4, strBuilder1.size());
      assertEquals(4, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(34, strBuilder1.capacity());
      assertEquals("nZ", stringBuffer0.toString());
      assertEquals(2, stringBuffer0.length());
      assertEquals(18, stringBuffer0.capacity());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test155()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) string0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.capacity());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(stringBuffer0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test156()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      char char0 = '8';
      String string0 = "D+IVKUD4";
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.appendln(string0, int0, (int) char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
      }
  }

  @Test
  public void test157()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      String string0 = ":S\\V72t`YxsI7";
      int int0 = 0;
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      int int1 = (-1);
      // Undeclared exception!
      try {
        strBuilder_StrBuilderWriter0.write(string0, int0, int1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
      }
  }

  @Test
  public void test158()  throws Throwable  {
      int int0 = (-1);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      String string0 = "tSKu";
      char char0 = '!';
      StrMatcher.NoMatcher strMatcher_NoMatcher0 = (StrMatcher.NoMatcher)StrMatcher.noneMatcher();
      assertNotNull(strMatcher_NoMatcher0);
      
      int int1 = strBuilder0.indexOf((StrMatcher) strMatcher_NoMatcher0, (int) char0);
      assertEquals((-1), int1);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(string0, int1, (int) char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
      }
  }

  @Test
  public void test159()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      String string0 = null;
      int int0 = 5;
      StrBuilder strBuilder1 = strBuilder0.append(string0, int0, int0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test160()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      String string0 = "pF<Q.m";
      StrBuilder strBuilder1 = strBuilder0.setNullText(string0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals("pF<Q.m", strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals("pF<Q.m", strBuilder0.getNullText());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.appendNull();
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals("pF<Q.m", strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(6, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(6, strBuilder2.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(6, strBuilder0.length());
      assertEquals("pF<Q.m", strBuilder0.getNullText());
      assertNotNull(strBuilder2);
  }

  @Test
  public void test161()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setNewLineText(string0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals("", strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals("", strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.appendln((Object) strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals("", strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder2.length());
      assertEquals(true, strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals("", strBuilder2.getNewLineText());
      assertNotNull(strBuilder2);
  }

  @Test
  public void test162()  throws Throwable  {
      String string0 = "WqH~qr?J.9D*1l%fX";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(17, strBuilder0.length());
      assertEquals(17, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      int int0 = 1;
      int int1 = 22;
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try {
        strBuilder0.getChars(int1, int0, charArray0, (int) charArray0[2]);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
      }
  }

  @Test
  public void test163()  throws Throwable  {
      String string0 = null;
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      int int0 = 1667;
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try {
        strBuilder0.getChars(int0, int0, charArray0, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1667
         //
      }
  }

  @Test
  public void test164()  throws Throwable  {
      String string0 = ".Mu%OS7@";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(40, strBuilder0.capacity());
      assertEquals(8, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = 902;
      int int1 = (-729);
      char[] charArray0 = new char[10];
      char char0 = '?';
      // Undeclared exception!
      try {
        strBuilder0.getChars(int0, int1, charArray0, (int) char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -729
         //
      }
  }

  @Test
  public void test165()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[9];
      int int0 = strBuilder0.hashCode();
      assertEquals(0, int0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      
      int int1 = (-57);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try {
        strBuilder0.getChars(int1, int0, charArray0, (int) charArray0[7]);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -57
         //
      }
  }

  @Test
  public void test166() {}
//   @Test
//   public void test166()  throws Throwable  {
//       StrBuilder strBuilder0 = new StrBuilder();
//       assertEquals(0, strBuilder0.length());
//       assertEquals(32, strBuilder0.capacity());
//       assertNull(strBuilder0.getNullText());
//       assertEquals(true, strBuilder0.isEmpty());
//       assertNull(strBuilder0.getNewLineText());
//       assertEquals(0, strBuilder0.size());
//       assertNotNull(strBuilder0);
//       
//       Object object0 = new Object();
//       assertNotNull(object0);
//       
//       StrBuilder strBuilder1 = strBuilder0.append(object0);
//       assertSame(strBuilder1, strBuilder0);
//       assertSame(strBuilder0, strBuilder1);
//       assertEquals(false, strBuilder1.isEmpty());
//       assertEquals(32, strBuilder1.capacity());
//       assertEquals(25, strBuilder1.length());
//       assertNull(strBuilder1.getNewLineText());
//       assertNull(strBuilder1.getNullText());
//       assertEquals(25, strBuilder1.size());
//       assertEquals(25, strBuilder0.length());
//       assertEquals(25, strBuilder0.size());
//       assertEquals(false, strBuilder0.isEmpty());
//       assertEquals(32, strBuilder0.capacity());
//       assertNull(strBuilder0.getNullText());
//       assertNull(strBuilder0.getNewLineText());
//       assertNotNull(strBuilder1);
//       
//       char[] charArray0 = new char[3];
//       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader();
//       assertSame(strBuilder1, strBuilder0);
//       assertSame(strBuilder0, strBuilder1);
//       assertEquals(false, strBuilder1.isEmpty());
//       assertEquals(32, strBuilder1.capacity());
//       assertEquals(25, strBuilder1.length());
//       assertNull(strBuilder1.getNewLineText());
//       assertNull(strBuilder1.getNullText());
//       assertEquals(25, strBuilder1.size());
//       assertEquals(25, strBuilder0.length());
//       assertEquals(25, strBuilder0.size());
//       assertEquals(false, strBuilder0.isEmpty());
//       assertEquals(32, strBuilder0.capacity());
//       assertNull(strBuilder0.getNullText());
//       assertNull(strBuilder0.getNewLineText());
//       assertNotNull(strBuilder_StrBuilderReader0);
//       
//       int int0 = strBuilder_StrBuilderReader0.read(charArray0);
//       assertEquals(3, int0);
//       assertArrayEquals(new char[] {'j', 'a', 'v'}, charArray0);
//       assertSame(strBuilder1, strBuilder0);
//       assertSame(strBuilder0, strBuilder1);
//       assertEquals(false, strBuilder1.isEmpty());
//       assertEquals(32, strBuilder1.capacity());
//       assertEquals(25, strBuilder1.length());
//       assertNull(strBuilder1.getNewLineText());
//       assertNull(strBuilder1.getNullText());
//       assertEquals(25, strBuilder1.size());
//       assertEquals(25, strBuilder0.length());
//       assertEquals(25, strBuilder0.size());
//       assertEquals(false, strBuilder0.isEmpty());
//       assertEquals(32, strBuilder0.capacity());
//       assertNull(strBuilder0.getNullText());
//       assertNull(strBuilder0.getNewLineText());
//   }

  @Test
  public void test167()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[2];
      StrBuilder strBuilder1 = strBuilder0.appendln((float) int0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(4, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder1);
      
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertArrayEquals(new char[] {'0', '.', '0', '\n'}, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(charArray0, charArray1);
      assertEquals(4, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotNull(charArray1);
  }

  @Test
  public void test168()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[2];
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(charArray1);
  }

  @Test
  public void test169()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      int int0 = 32;
      StrBuilder strBuilder1 = strBuilder0.setLength(int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(32, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      
      int int1 = 15;
      char[] charArray0 = strBuilder1.toCharArray(int1, int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(32, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(charArray0);
  }

  @Test
  public void test170()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = strBuilder0.toCharArray();
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(charArray0);
  }

  @Test
  public void test171()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[1];
      StrBuilder strBuilder1 = strBuilder0.appendln(charArray0, int0, int0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertNotNull(strBuilder1);
      
      char[] charArray1 = strBuilder1.toCharArray();
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\n'}, charArray1);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(charArray0, charArray1);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(charArray1, charArray0);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
  }

  @Test
  public void test172()  throws Throwable  {
      int int0 = 4;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char char0 = 'L';
      StrBuilder strBuilder1 = strBuilder0.append(char0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendFixedWidthPadLeft((int) char0, (int) char0, char0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(77, strBuilder0.length());
      assertEquals(77, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(77, strBuilder0.capacity());
      assertEquals(77, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(77, strBuilder2.length());
      assertEquals(77, strBuilder2.size());
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(77, strBuilder1.capacity());
      assertEquals(77, strBuilder1.size());
      assertEquals(77, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder1.deleteCharAt((int) char0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(false, strBuilder3.isEmpty());
      assertEquals(76, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(77, strBuilder3.capacity());
      assertEquals(76, strBuilder3.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(76, strBuilder0.length());
      assertEquals(76, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(77, strBuilder0.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(77, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(76, strBuilder1.size());
      assertEquals(76, strBuilder1.length());
      assertNotNull(strBuilder3);
  }

  @Test
  public void test173()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char char0 = '\'';
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.deleteCharAt((int) char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 39
         //
      }
  }

  @Test
  public void test174()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      int int0 = (-3625);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.deleteCharAt(int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -3625
         //
      }
  }

  @Test
  public void test175()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln((long) int0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNotNull(strBuilder1);
      
      char[] charArray0 = new char[2];
      char char0 = 'x';
      StrBuilder strBuilder2 = strBuilder1.setCharAt((int) charArray0[1], char0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(2, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertNotNull(strBuilder2);
  }

  @Test
  public void test176()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.setCharAt((int) charArray0[1], charArray0[1]);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 0
         //
      }
  }

  @Test
  public void test177()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      char char0 = 'x';
      int int1 = (-2853);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.setCharAt(int1, char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2853
         //
      }
  }

  @Test
  public void test178()  throws Throwable  {
      String string0 = "nZ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(2, strBuilder0.length());
      assertEquals(34, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(2, strBuilder0.length());
      assertEquals(34, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertEquals(110, int0);
      assertEquals(2, strBuilder0.length());
      assertEquals(34, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test
  public void test179()  throws Throwable  {
      String string0 = null;
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      char char0 = 'f';
      // Undeclared exception!
      try {
        char char1 = strBuilder0.charAt((int) char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 102
         //
      }
  }

  @Test
  public void test180()  throws Throwable  {
      String string0 = null;
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.isEmpty();
      assertTrue(boolean0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test
  public void test181()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.appendln(int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(2, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      
      boolean boolean0 = strBuilder0.isEmpty();
      assertFalse(boolean0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test
  public void test182()  throws Throwable  {
      String string0 = "1.5";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(35, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(3, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(3, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.minimizeCapacity();
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(3, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(3, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(3, strBuilder2.capacity());
      assertNotNull(strBuilder2);
  }

  @Test
  public void test183()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.setLength(int0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test184()  throws Throwable  {
      String string0 = "WLB=F)";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(38, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.setLength(int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(38, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(38, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test185()  throws Throwable  {
      String string0 = "%.y*70gkb!NJ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(13, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(45, strBuilder0.capacity());
      assertEquals(13, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = (-1);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.setLength(int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
      }
  }

  @Test
  public void test186()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      String string0 = "";
      StrBuilder strBuilder1 = strBuilder0.setNullText(string0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test187()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      String string0 = null;
      StrBuilder strBuilder1 = strBuilder0.setNullText(string0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test188()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      strBuilder_StrBuilderWriter0.close();
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test
  public void test189()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      String string0 = null;
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      strBuilder_StrBuilderWriter0.write(string0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
  }

  @Test
  public void test190()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      String string0 = ":S\\V72t`YxsI7";
      char char0 = '|';
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      // Undeclared exception!
      try {
        strBuilder_StrBuilderWriter0.write(string0, (int) char0, (int) char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
      }
  }

  @Test
  public void test191()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      strBuilder_StrBuilderWriter0.flush();
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test
  public void test192()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      String string0 = strBuilder_StrBuilderTokenizer0.getContent();
      assertEquals("", string0);
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(string0);
      
      StrMatcher.NoMatcher strMatcher_NoMatcher0 = (StrMatcher.NoMatcher)strBuilder_StrBuilderTokenizer0.getQuoteMatcher();
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strMatcher_NoMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll((StrMatcher) strMatcher_NoMatcher0, string0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test193()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) string0);
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      char[] charArray0 = new char[9];
      StrBuilder strBuilder1 = strBuilder0.appendln(stringBuffer0, (int) charArray0[0], (int) charArray0[5]);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.length());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test194()  throws Throwable  {
      String string0 = null;
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = (StrBuilder.StrBuilderWriter)strBuilder0.asWriter();
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder_StrBuilderWriter0);
  }

  @Test
  public void test195()  throws Throwable  {
      String string0 = null;
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = null;
      StrBuilder strBuilder1 = strBuilder0.appendln(stringBuffer0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.size());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test196()  throws Throwable  {
      String string0 = "WLB=F)";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(6, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(38, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf(string0);
      assertEquals(0, int0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(6, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(38, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.size());
  }

  @Test
  public void test197()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = (StrBuilder.StrBuilderTokenizer)strBuilder0.asTokenizer();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
  }

  @Test
  public void test198()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = (StrBuilder.StrBuilderReader)strBuilder0.asReader();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder_StrBuilderReader0);
  }

  @Test
  public void test199()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      String string0 = "<|hh";
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.appendln(string0, int0, int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test200()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char char0 = 'a';
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.insert((int) char0, (long) char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 97
         //
      }
  }

  @Test
  public void test201()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[2];
      String string0 = strBuilder0.substring((int) charArray0[1]);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(string0);
  }

  @Test
  public void test202()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char char0 = 'N';
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.appendln(strBuilder0, (int) char0, (int) char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
      }
  }

  @Test
  public void test203()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[1];
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = (StrMatcher.CharMatcher)StrMatcher.charSetMatcher(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(strMatcher_CharMatcher0);
      
      int int0 = strBuilder0.lastIndexOf((StrMatcher) strMatcher_CharMatcher0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
  }

  @Test
  public void test204()  throws Throwable  {
      String string0 = "WLB=F)";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(6, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.size());
      assertEquals(38, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.insert(int0, int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(7, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.size());
      assertEquals(38, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(7, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(7, strBuilder1.size());
      assertEquals(38, strBuilder1.capacity());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test205()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
  }

  @Test
  public void test206()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.trim();
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
  }

  @Test
  public void test207()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      int int0 = 5;
      char char0 = 'N';
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.insert((int) char0, (float) int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 78
         //
      }
  }

  @Test
  public void test208()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
      assertEquals(0, stringBuffer0.length());
      assertEquals(0, stringBuffer0.capacity());
      assertEquals("", stringBuffer0.toString());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(stringBuffer0);
  }

  @Test
  public void test209()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      strBuilder_StrBuilderReader0.reset();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test
  public void test210()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[8];
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      strBuilder_StrBuilderReader0.mark((int) charArray0[5]);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test
  public void test211()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      strBuilder_StrBuilderReader0.close();
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
  }

  @Test
  public void test212()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      boolean boolean0 = strBuilder_StrBuilderReader0.markSupported();
      assertTrue(boolean0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
  }
}
