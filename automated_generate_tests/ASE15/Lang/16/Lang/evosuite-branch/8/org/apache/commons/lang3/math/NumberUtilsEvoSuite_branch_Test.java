/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:02:03 GMT 2014
 */

package org.apache.commons.lang3.math;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;


public class NumberUtilsEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      String string0 = "34.L";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test001()  throws Throwable  {
      String string0 = "-L";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test002()  throws Throwable  {
      String string0 = "..";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test003()  throws Throwable  {
      String string0 = "E";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test004()  throws Throwable  {
      String string0 = "6";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test005()  throws Throwable  {
      String string0 = "34.";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test006()  throws Throwable  {
      String string0 = "--qfdI.2f#}:.!++%Jm";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test007()  throws Throwable  {
      String string0 = "+f}C,";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test008()  throws Throwable  {
      String string0 = "e_/";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test009()  throws Throwable  {
      String string0 = "92EtNX+9eKNzF";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test010()  throws Throwable  {
      String string0 = "0e_";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test011()  throws Throwable  {
      String string0 = "0xv@u@'|^c0;L";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test012()  throws Throwable  {
      String string0 = "0x0X";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test013()  throws Throwable  {
      String string0 = "0xA blank string is not a valid number";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test014()  throws Throwable  {
      String string0 = "-0x";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test015()  throws Throwable  {
      String string0 = "0e";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = "...";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test017()  throws Throwable  {
      String string0 = "-";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test018()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test019()  throws Throwable  {
      String string0 = "0xf";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test020()  throws Throwable  {
      String string0 = "03";
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test021()  throws Throwable  {
      byte byte0 = (byte) (-65);
      byte byte1 = (byte)101;
      byte byte2 = NumberUtils.max(byte0, byte0, byte1);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertEquals((byte)101, byte2);
  }

  @Test
  public void test022()  throws Throwable  {
      byte byte0 = (byte) (-14);
      byte byte1 = (byte) (-63);
      byte byte2 = NumberUtils.max(byte1, byte0, byte0);
      assertTrue(byte2 == byte0);
      assertFalse(byte2 == byte1);
      assertFalse(byte1 == byte0);
      assertFalse(byte1 == byte2);
      assertFalse(byte0 == byte1);
      assertTrue(byte0 == byte2);
      assertEquals((byte) (-14), byte2);
  }

  @Test
  public void test023()  throws Throwable  {
      short short0 = (short)0;
      byte byte0 = (byte) (-93);
      short short1 = NumberUtils.max((short) byte0, (short) byte0, short0);
      assertTrue(short1 == short0);
      assertTrue(short0 == short1);
      assertEquals((short)0, short1);
  }

  @Test
  public void test024()  throws Throwable  {
      short short0 = (short) (-1007);
      String string0 = null;
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
      
      short short1 = NumberUtils.max(short0, (short) byte0, (short) byte0);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertEquals((short)0, short1);
  }

  @Test
  public void test025()  throws Throwable  {
      short short0 = (short)57;
      byte byte0 = (byte)89;
      int int0 = 1759;
      int int1 = NumberUtils.max((int) byte0, (int) short0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(1759, int1);
  }

  @Test
  public void test026()  throws Throwable  {
      String string0 = "0X";
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
      
      int int0 = 105;
      int int1 = NumberUtils.max((int) byte0, int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(105, int1);
  }

  @Test
  public void test027()  throws Throwable  {
      String string0 = "66A,C';Ge";
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
      
      long long0 = 213L;
      long long1 = NumberUtils.max((long) short0, (long) short0, long0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals(213L, long1);
  }

  @Test
  public void test028()  throws Throwable  {
      String string0 = "66A,C';Ge";
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
      
      short short1 = (short) (-3035);
      assertFalse(short1 == short0);
      
      long long0 = NumberUtils.max((long) short1, (long) short0, (long) short0);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertEquals(0L, long0);
  }

  @Test
  public void test029()  throws Throwable  {
      int int0 = 208;
      int int1 = NumberUtils.min(int0, int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(208, int1);
      
      long long0 = NumberUtils.max((long) int1, (long) int1, (long) int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(208L, long0);
  }

  @Test
  public void test030()  throws Throwable  {
      byte byte0 = (byte)6;
      byte byte1 = (byte) (-98);
      byte byte2 = NumberUtils.min(byte0, byte0, byte1);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertEquals((byte) (-98), byte2);
  }

  @Test
  public void test031()  throws Throwable  {
      byte byte0 = (byte)120;
      byte byte1 = (byte)0;
      byte byte2 = NumberUtils.min(byte0, byte1, byte1);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertEquals((byte)0, byte2);
  }

  @Test
  public void test032()  throws Throwable  {
      String string0 = "x5";
      byte byte0 = (byte)1;
      short short0 = NumberUtils.toShort(string0, (short) byte0);
      assertEquals((short)1, short0);
      
      short short1 = (short) (-12);
      assertFalse(short1 == short0);
      
      short short2 = NumberUtils.min((short) byte0, short0, short1);
      assertFalse(short1 == short0);
      assertTrue(short1 == short2);
      assertFalse(short2 == short0);
      assertTrue(short2 == short1);
      assertFalse(short0 == short2);
      assertFalse(short0 == short1);
      assertEquals((short) (-12), short2);
  }

  @Test
  public void test033()  throws Throwable  {
      short short0 = (short)0;
      short short1 = (short)10;
      short short2 = NumberUtils.min(short1, short0, short1);
      assertFalse(short1 == short0);
      assertFalse(short1 == short2);
      assertFalse(short2 == short1);
      assertTrue(short2 == short0);
      assertFalse(short0 == short1);
      assertTrue(short0 == short2);
      assertEquals((short)0, short2);
  }

  @Test
  public void test034()  throws Throwable  {
      byte byte0 = (byte)79;
      byte byte1 = NumberUtils.max(byte0, byte0, byte0);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      assertEquals((byte)79, byte1);
      
      int int0 = (-1477);
      int int1 = NumberUtils.min((int) byte1, (int) byte0, int0);
      assertTrue(byte1 == byte0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertTrue(byte0 == byte1);
      assertEquals((-1477), int1);
  }

  @Test
  public void test035()  throws Throwable  {
      int int0 = 208;
      int int1 = 0;
      int int2 = NumberUtils.min(int0, int1, int0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals(0, int2);
      
      long long0 = NumberUtils.min((long) int0, (long) int2, (long) int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals(0L, long0);
  }

  @Test
  public void test036()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = (-491);
      long long0 = NumberUtils.min((long) intArray0[0], (long) intArray0[0], (long) int0);
      assertEquals((-491L), long0);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test
  public void test037()  throws Throwable  {
      float[] floatArray0 = new float[8];
      float float0 = 2929.222F;
      floatArray0[1] = float0;
      float float1 = NumberUtils.max(floatArray0);
      assertTrue(float1 == float0);
      assertEquals(2929.222F, float1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 2929.222F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test
  public void test038()  throws Throwable  {
      float[] floatArray0 = new float[8];
      float float0 = Float.NaN;
      floatArray0[4] = float0;
      float float1 = NumberUtils.max(floatArray0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, Float.NaN, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test
  public void test039()  throws Throwable  {
      float[] floatArray0 = null;
      // Undeclared exception!
      try {
        float float0 = NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 651.288305674;
      doubleArray0[4] = double0;
      double double1 = NumberUtils.max(doubleArray0);
      assertTrue(double1 == double0);
      assertEquals(651.288305674, double1, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 651.288305674, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test041()  throws Throwable  {
      double double0 = Double.NaN;
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = double0;
      double double1 = NumberUtils.max(doubleArray0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)102;
      byteArray0[2] = byte0;
      byte byte1 = NumberUtils.max(byteArray0);
      assertTrue(byte1 == byte0);
      assertEquals((byte)102, byte1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)102, (byte)0}, byteArray0);
  }

  @Test
  public void test043()  throws Throwable  {
      short short0 = (short)2123;
      short[] shortArray0 = new short[6];
      shortArray0[2] = short0;
      short short1 = NumberUtils.max(shortArray0);
      assertTrue(short1 == short0);
      assertEquals((short)2123, short1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)2123, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test
  public void test044()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test045()  throws Throwable  {
      int int0 = (-29);
      int[] intArray0 = new int[3];
      intArray0[0] = int0;
      int int1 = NumberUtils.max(intArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new int[] {(-29), 0, 0}, intArray0);
  }

  @Test
  public void test046()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test047()  throws Throwable  {
      byte byte0 = (byte)79;
      long[] longArray0 = new long[3];
      longArray0[2] = (long) byte0;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(79L, long0);
      assertArrayEquals(new long[] {0L, 0L, 79L}, longArray0);
  }

  @Test
  public void test048()  throws Throwable  {
      int int0 = (-1052);
      float[] floatArray0 = new float[4];
      floatArray0[3] = (float) int0;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-1052.0F), float0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-1052.0F)}, floatArray0, 0.01F);
  }

  @Test
  public void test049()  throws Throwable  {
      float[] floatArray0 = new float[8];
      float float0 = Float.NaN;
      floatArray0[7] = float0;
      float float1 = NumberUtils.min(floatArray0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, Float.NaN}, floatArray0, 0.01F);
  }

  @Test
  public void test050()  throws Throwable  {
      float[] floatArray0 = null;
      // Undeclared exception!
      try {
        float float0 = NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test051()  throws Throwable  {
      double double0 = (-1.0027378441071815);
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = double0;
      double double1 = NumberUtils.min(doubleArray0);
      assertTrue(double1 == double0);
      assertEquals((-1.0027378441071815), double1, 0.01D);
      assertArrayEquals(new double[] {0.0, (-1.0027378441071815), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test052()  throws Throwable  {
      String string0 = "f$82Nv[ZgxA$(Iue7";
      float float0 = Float.NaN;
      float float1 = NumberUtils.toFloat(string0, float0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[5] = (double) float1;
      double double0 = NumberUtils.min(doubleArray0);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test053()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try {
        double double0 = NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-53);
      byteArray0[3] = byte0;
      byte byte1 = NumberUtils.min(byteArray0);
      assertTrue(byte1 == byte0);
      assertEquals((byte) (-53), byte1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-53), (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test055()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try {
        byte byte0 = NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test056()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short short0 = (short) (-2976);
      shortArray0[2] = short0;
      short short1 = NumberUtils.min(shortArray0);
      assertTrue(short1 == short0);
      assertEquals((short) (-2976), short1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-2976), (short)0}, shortArray0);
  }

  @Test
  public void test057()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 5156;
      intArray0[0] = int0;
      int int1 = NumberUtils.min(intArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new int[] {5156, 0, 0}, intArray0);
  }

  @Test
  public void test058()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test059()  throws Throwable  {
      short short0 = (short)2123;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) short0;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
      assertArrayEquals(new long[] {2123L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test
  public void test060()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try {
        long long0 = NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test061()  throws Throwable  {
      String string0 = null;
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
      assertNull(bigDecimal0);
  }

  @Test
  public void test062()  throws Throwable  {
      String string0 = null;
      BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
      assertNull(bigInteger0);
  }

  @Test
  public void test063()  throws Throwable  {
      String string0 = ".2FD";
      // Undeclared exception!
      try {
        BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \".2FD\"
         //
      }
  }

  @Test
  public void test064()  throws Throwable  {
      String string0 = null;
      Long long0 = NumberUtils.createLong(string0);
  }

  @Test
  public void test065()  throws Throwable  {
      String string0 = "0x0X";
      // Undeclared exception!
      try {
        Long long0 = NumberUtils.createLong(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"0X\"
         //
      }
  }

  @Test
  public void test066()  throws Throwable  {
      String string0 = null;
      Integer integer0 = NumberUtils.createInteger(string0);
  }

  @Test
  public void test067()  throws Throwable  {
      String string0 = null;
      Double double0 = NumberUtils.createDouble(string0);
  }

  @Test
  public void test068()  throws Throwable  {
      String string0 = null;
      Float float0 = NumberUtils.createFloat(string0);
  }

  @Test
  public void test069()  throws Throwable  {
      String string0 = "A7c-e6";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test070()  throws Throwable  {
      String string0 = "The Array must not be null";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The Array must not be null is not a valid number.
         //
      }
  }

  @Test
  public void test071()  throws Throwable  {
      String string0 = "34.L";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 34.L is not a valid number.
         //
      }
  }

  @Test
  public void test072()  throws Throwable  {
      String string0 = "@'Q_$ wl";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // @'Q_$ wl is not a valid number.
         //
      }
  }

  @Test
  public void test073()  throws Throwable  {
      String string0 = "f";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // f is not a valid number.
         //
      }
  }

  @Test
  public void test074()  throws Throwable  {
      String string0 = "[#N>-X?7k@CTF";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // [#N>-X?7k@CTF is not a valid number.
         //
      }
  }

  @Test
  public void test075()  throws Throwable  {
      String string0 = "0e`30p<P?1Tr";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0e`30p<P?1Tr is not a valid number.
         //
      }
  }

  @Test
  public void test076()  throws Throwable  {
      String string0 = "0e";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0e is not a valid number.
         //
      }
  }

  @Test
  public void test077()  throws Throwable  {
      String string0 = "3.";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals(3.0F, (float)float0, 0.01F);
  }

  @Test
  public void test078()  throws Throwable  {
      String string0 = "03";
      Integer integer0 = (Integer)NumberUtils.createNumber(string0);
      assertEquals(3, (int)integer0);
  }

  @Test
  public void test079()  throws Throwable  {
      String string0 = "IcvocationTarg%tExcption occurred";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // IcvocationTarg%tExcption occurred is not a valid number.
         //
      }
  }

  @Test
  public void test080()  throws Throwable  {
      String string0 = "I>vocationTargetE$ception occurfed";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // I>vocationTargetE$ception occurfed is not a valid number.
         //
      }
  }

  @Test
  public void test081()  throws Throwable  {
      String string0 = "uu.e%3)P}Opx\"M{;t";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // uu.e%3)P}Opx\"M{;t is not a valid number.
         //
      }
  }

  @Test
  public void test082()  throws Throwable  {
      String string0 = " is not a valid number.";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         //  is not a valid number. is not a valid number.
         //
      }
  }

  @Test
  public void test083()  throws Throwable  {
      String string0 = ".2FD";
      Double double0 = (Double)NumberUtils.createNumber(string0);
      assertEquals(0.2, (double)double0, 0.01D);
  }

  @Test
  public void test084()  throws Throwable  {
      String string0 = "-0X)OpHE5";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-)OpHE5\"
         //
      }
  }

  @Test
  public void test085()  throws Throwable  {
      String string0 = "-L";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -L is not a valid number.
         //
      }
  }

  @Test
  public void test086()  throws Throwable  {
      String string0 = "-0x";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
      }
  }

  @Test
  public void test087()  throws Throwable  {
      String string0 = "0x";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
      }
  }

  @Test
  public void test088()  throws Throwable  {
      String string0 = "--|,.\\";
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test089()  throws Throwable  {
      String string0 = "";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test090()  throws Throwable  {
      String string0 = null;
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test091()  throws Throwable  {
      String string0 = "0X;!4-_7N5v0dw,8wx4<=";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \";!4-_7N5v0dw,8wx4<=\"
         //
      }
  }

  @Test
  public void test092()  throws Throwable  {
      String string0 = null;
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
  }

  @Test
  public void test093()  throws Throwable  {
      String string0 = null;
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test094()  throws Throwable  {
      String string0 = null;
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test095()  throws Throwable  {
      String string0 = null;
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
  }

  @Test
  public void test096()  throws Throwable  {
      String string0 = "...";
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test097()  throws Throwable  {
      float float0 = (-374.21F);
      String string0 = null;
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
      
      float float1 = NumberUtils.max(float0, float0, (float) long0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test
  public void test098()  throws Throwable  {
      String string0 = "0e";
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
  }

  @Test
  public void test099()  throws Throwable  {
      short short0 = (short) (-152);
      float float0 = NumberUtils.min((float) short0, (float) short0, (float) short0);
      assertEquals((-152.0F), float0, 0.01F);
  }

  @Test
  public void test100()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 0;
      double double0 = NumberUtils.min((double) int0, (double) int0, (double) intArray0[1]);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
  }

  @Test
  public void test101()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      assertNotNull(numberUtils0);
  }

  @Test
  public void test102()  throws Throwable  {
      double double0 = (-1278.1022835356728);
      double double1 = NumberUtils.max(double0, double0, double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals((-1278.1022835356728), double1, 0.01D);
  }

  @Test
  public void test103()  throws Throwable  {
      String string0 = "0xf";
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
  }
}
