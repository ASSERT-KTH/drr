/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:19:53 GMT 2014
 */

package org.apache.commons.lang3.math;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;


public class NumberUtilsEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      String string0 = "l";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test001()  throws Throwable  {
      String string0 = "e";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test002()  throws Throwable  {
      String string0 = "6";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test003()  throws Throwable  {
      String string0 = ".";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test004()  throws Throwable  {
      String string0 = " is not a valid number.";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test005()  throws Throwable  {
      String string0 = "+\"gw.};|w>cS";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test006()  throws Throwable  {
      String string0 = "...";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test007()  throws Throwable  {
      String string0 = "-.|";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test008()  throws Throwable  {
      String string0 = "-";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test009()  throws Throwable  {
      String string0 = "-0xAborting to protect against StackOverflowError - output of one loop is the input of another";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test010()  throws Throwable  {
      String string0 = "0x0x=Pu";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test011()  throws Throwable  {
      String string0 = "-0x";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test012()  throws Throwable  {
      String string0 = "0ez";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test013()  throws Throwable  {
      String string0 = "-0x-0x[<e";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test014()  throws Throwable  {
      String string0 = "f";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test015()  throws Throwable  {
      String string0 = "--Minimum abbreviation width with offsZt is 1";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test017()  throws Throwable  {
      String string0 = "EJ";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test018()  throws Throwable  {
      String string0 = "6";
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test019()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test020()  throws Throwable  {
      byte byte0 = (byte)18;
      byte byte1 = (byte)81;
      byte byte2 = NumberUtils.max(byte0, byte0, byte1);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertEquals((byte)81, byte2);
  }

  @Test
  public void test021()  throws Throwable  {
      byte byte0 = (byte) (-81);
      byte byte1 = (byte)0;
      byte byte2 = NumberUtils.max(byte0, byte1, byte1);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertEquals((byte)0, byte2);
  }

  @Test
  public void test022()  throws Throwable  {
      byte byte0 = (byte)18;
      short short0 = (short)0;
      short short1 = NumberUtils.max(short0, short0, (short) byte0);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      assertEquals((short)18, short1);
  }

  @Test
  public void test023()  throws Throwable  {
      short short0 = (short) (-1547);
      short short1 = NumberUtils.max(short0, short0, short0);
      assertTrue(short1 == short0);
      assertTrue(short0 == short1);
      assertEquals((short) (-1547), short1);
      
      short short2 = (short)1273;
      assertFalse(short2 == short1);
      
      short short3 = NumberUtils.max(short1, short2, short2);
      assertFalse(short2 == short1);
      assertFalse(short2 == short0);
      assertTrue(short2 == short3);
      assertFalse(short1 == short2);
      assertTrue(short1 == short0);
      assertFalse(short1 == short3);
      assertFalse(short0 == short3);
      assertFalse(short0 == short2);
      assertTrue(short0 == short1);
      assertTrue(short3 == short2);
      assertFalse(short3 == short1);
      assertFalse(short3 == short0);
      assertEquals((short)1273, short3);
  }

  @Test
  public void test024()  throws Throwable  {
      String string0 = null;
      byte byte0 = (byte)119;
      byte byte1 = NumberUtils.toByte(string0, byte0);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      assertEquals((byte)119, byte1);
      
      int int0 = (-5);
      int int1 = NumberUtils.max(int0, int0, (int) byte1);
      assertFalse(int1 == int0);
      assertTrue(byte0 == byte1);
      assertFalse(int0 == int1);
      assertTrue(byte1 == byte0);
      assertEquals(119, int1);
  }

  @Test
  public void test025()  throws Throwable  {
      short short0 = (short)2066;
      int int0 = (-267);
      int int1 = NumberUtils.max(int0, (int) short0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(2066, int1);
  }

  @Test
  public void test026()  throws Throwable  {
      long long0 = 0L;
      long long1 = (-1171L);
      long long2 = NumberUtils.max(long1, long1, long0);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertTrue(long2 == long0);
      assertFalse(long2 == long1);
      assertTrue(long0 == long2);
      assertFalse(long0 == long1);
      assertEquals(0L, long2);
  }

  @Test
  public void test027()  throws Throwable  {
      long long0 = (-885L);
      long long1 = (-793L);
      long long2 = NumberUtils.max(long0, long1, long0);
      assertTrue(long1 == long2);
      assertFalse(long1 == long0);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertEquals((-793L), long2);
  }

  @Test
  public void test028()  throws Throwable  {
      byte byte0 = (byte)82;
      byte byte1 = (byte)0;
      byte byte2 = NumberUtils.min(byte0, byte0, byte1);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertEquals((byte)0, byte2);
  }

  @Test
  public void test029()  throws Throwable  {
      byte byte0 = (byte)39;
      byte byte1 = (byte) (-61);
      byte byte2 = NumberUtils.min(byte0, byte1, byte0);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
      assertEquals((byte) (-61), byte2);
  }

  @Test
  public void test030()  throws Throwable  {
      byte byte0 = (byte) (-81);
      byte byte1 = (byte)0;
      short short0 = NumberUtils.min((short) byte1, (short) byte1, (short) byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertEquals((short) (-81), short0);
  }

  @Test
  public void test031()  throws Throwable  {
      byte byte0 = (byte) (-81);
      short short0 = (short)70;
      short short1 = NumberUtils.min(short0, (short) byte0, (short) byte0);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertEquals((short) (-81), short1);
  }

  @Test
  public void test032()  throws Throwable  {
      int int0 = 96;
      int int1 = 0;
      int int2 = NumberUtils.min(int0, int0, int1);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals(0, int2);
  }

  @Test
  public void test033()  throws Throwable  {
      int int0 = 329;
      int int1 = 45;
      int int2 = NumberUtils.min(int0, int1, int0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(45, int2);
  }

  @Test
  public void test034()  throws Throwable  {
      short short0 = (short) (-1547);
      long long0 = 806L;
      long long1 = NumberUtils.min(long0, long0, (long) short0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals((-1547L), long1);
  }

  @Test
  public void test035()  throws Throwable  {
      short[] shortArray0 = new short[28];
      short short0 = (short) (-2259);
      long long0 = NumberUtils.min((long) shortArray0[8], (long) short0, (long) short0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals((-2259L), long0);
  }

  @Test
  public void test036()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float float0 = (-1.0F);
      floatArray0[0] = float0;
      float float1 = NumberUtils.max(floatArray0);
      assertFalse(float1 == float0);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test
  public void test037()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float float0 = Float.NaN;
      floatArray0[3] = float0;
      float float1 = NumberUtils.max(floatArray0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, Float.NaN, 0.0F}, floatArray0, 0.01F);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test
  public void test038()  throws Throwable  {
      float[] floatArray0 = null;
      // Undeclared exception!
      try {
        float float0 = NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = (-2771.56308719);
      doubleArray0[0] = double0;
      double double1 = NumberUtils.max(doubleArray0);
      assertFalse(double1 == double0);
      assertArrayEquals(new double[] {(-2771.56308719), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = Double.NaN;
      doubleArray0[2] = double0;
      double double1 = NumberUtils.max(doubleArray0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)45;
      byteArray0[1] = byte0;
      byte byte1 = NumberUtils.max(byteArray0);
      assertTrue(byte1 == byte0);
      assertArrayEquals(new byte[] {(byte)0, (byte)45, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((byte)45, byte1);
  }

  @Test
  public void test042()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try {
        byte byte0 = NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test043()  throws Throwable  {
      byte byte0 = (byte) (-61);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) byte0;
      short short0 = NumberUtils.max(shortArray0);
      assertArrayEquals(new short[] {(short) (-61), (short)0}, shortArray0);
      assertEquals((short)0, short0);
  }

  @Test
  public void test044()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test045()  throws Throwable  {
      short[] shortArray0 = new short[8];
      short short0 = NumberUtils.max(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals((short)0, short0);
  }

  @Test
  public void test046()  throws Throwable  {
      int[] intArray0 = new int[12];
      int int0 = 1;
      intArray0[6] = int0;
      int int1 = NumberUtils.max(intArray0);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(1, int1);
  }

  @Test
  public void test047()  throws Throwable  {
      short short0 = (short) (-2788);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) short0;
      long long0 = NumberUtils.max(longArray0);
      assertArrayEquals(new long[] {(-2788L), 0L, 0L}, longArray0);
      assertEquals(0L, long0);
  }

  @Test
  public void test048()  throws Throwable  {
      float[] floatArray0 = new float[7];
      float float0 = Float.NaN;
      floatArray0[0] = float0;
      float float1 = NumberUtils.min(floatArray0);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertArrayEquals(new float[] {Float.NaN, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      //  // Unstable assertion: assertEquals(0.0F, float1, 0.01F);
  }

  @Test
  public void test049()  throws Throwable  {
      float float0 = Float.NaN;
      float[] floatArray0 = new float[2];
      floatArray0[1] = float0;
      float float1 = NumberUtils.min(floatArray0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, Float.NaN}, floatArray0, 0.01F);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test
  public void test050()  throws Throwable  {
      float[] floatArray0 = null;
      // Undeclared exception!
      try {
        float float0 = NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test051()  throws Throwable  {
      float float0 = (-811.91614F);
      double[] doubleArray0 = new double[6];
      doubleArray0[5] = (double) float0;
      double double0 = NumberUtils.min(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, (-811.9161376953125)}, doubleArray0, 0.01);
      assertEquals((-811.9161376953125), double0, 0.01D);
  }

  @Test
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = Double.NaN;
      doubleArray0[6] = double0;
      double double1 = NumberUtils.min(doubleArray0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-50);
      byteArray0[3] = byte0;
      byte byte1 = NumberUtils.min(byteArray0);
      assertTrue(byte1 == byte0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-50), (byte)0}, byteArray0);
      assertEquals((byte) (-50), byte1);
  }

  @Test
  public void test054()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try {
        byte byte0 = NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test055()  throws Throwable  {
      short[] shortArray0 = new short[28];
      short short0 = (short)2313;
      shortArray0[0] = short0;
      short short1 = NumberUtils.min(shortArray0);
      assertFalse(short1 == short0);
      assertArrayEquals(new short[] {(short)2313, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals((short)0, short1);
  }

  @Test
  public void test056()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test057()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = 46;
      intArray0[1] = int0;
      intArray0[0] = intArray0[1];
      int int1 = NumberUtils.min(intArray0);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {46, 46, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, int1);
  }

  @Test
  public void test058()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test059()  throws Throwable  {
      long[] longArray0 = new long[11];
      long long0 = (-1260L);
      longArray0[1] = long0;
      long long1 = NumberUtils.min(longArray0);
      assertTrue(long1 == long0);
      assertArrayEquals(new long[] {0L, (-1260L), 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals((-1260L), long1);
  }

  @Test
  public void test060()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try {
        long long0 = NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test061()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try {
        BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test062()  throws Throwable  {
      String string0 = null;
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
      assertNull(bigDecimal0);
  }

  @Test
  public void test063()  throws Throwable  {
      String string0 = null;
      BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
      assertNull(bigInteger0);
  }

  @Test
  public void test064()  throws Throwable  {
      String string0 = null;
      Long long0 = NumberUtils.createLong(string0);
  }

  @Test
  public void test065()  throws Throwable  {
      String string0 = null;
      Integer integer0 = NumberUtils.createInteger(string0);
  }

  @Test
  public void test066()  throws Throwable  {
      String string0 = null;
      Double double0 = NumberUtils.createDouble(string0);
  }

  @Test
  public void test067()  throws Throwable  {
      String string0 = null;
      Float float0 = NumberUtils.createFloat(string0);
  }

  @Test
  public void test068()  throws Throwable  {
      String string0 = "Minimum abbreviation width is 4";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test069()  throws Throwable  {
      String string0 = "!t^auL";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // !t^auL is not a valid number.
         //
      }
  }

  @Test
  public void test070()  throws Throwable  {
      String string0 = "iX*~.l";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // iX*~.l is not a valid number.
         //
      }
  }

  @Test
  public void test071()  throws Throwable  {
      String string0 = "The Array must not be null";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The Array must not be null is not a valid number.
         //
      }
  }

  @Test
  public void test072()  throws Throwable  {
      String string0 = "eXg98,5%L";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // eXg98,5%L is not a valid number.
         //
      }
  }

  @Test
  public void test073()  throws Throwable  {
      String string0 = "qMq+\"|QdRU3'F";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // qMq+\"|QdRU3'F is not a valid number.
         //
      }
  }

  @Test
  public void test074()  throws Throwable  {
      String string0 = "ve_*whD";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ve_*whD is not a valid number.
         //
      }
  }

  @Test
  public void test075()  throws Throwable  {
      String string0 = "0ezy]xm_1}dvk=";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0ezy]xm_1}dvk= is not a valid number.
         //
      }
  }

  @Test
  public void test076()  throws Throwable  {
      String string0 = "InvocationTargetExcepti occurre";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // InvocationTargetExcepti occurre is not a valid number.
         //
      }
  }

  @Test
  public void test077()  throws Throwable  {
      String string0 = "0f";
      BigDecimal bigDecimal0 = (BigDecimal)NumberUtils.createNumber(string0);
      assertNotNull(bigDecimal0);
      assertEquals(0, bigDecimal0.shortValue());
      assertEquals(0, bigDecimal0.byteValue());
  }

  @Test
  public void test078()  throws Throwable  {
      String string0 = "']=YtXI6N7";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"'\"
         //
      }
  }

  @Test
  public void test079()  throws Throwable  {
      String string0 = "sn.tex.Normalizer is not available";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // sn.tex.Normalizer is not available is not a valid number.
         //
      }
  }

  @Test
  public void test080()  throws Throwable  {
      String string0 = "Array cannot be empty.";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Array cannot be empty. is not a valid number.
         //
      }
  }

  @Test
  public void test081()  throws Throwable  {
      String string0 = "?%1Xq$CC1P{TnSm|.";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test082()  throws Throwable  {
      String string0 = "='2\"*oB.EeX)";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ='2\"*oB.EeX) is not a valid number.
         //
      }
  }

  @Test
  public void test083()  throws Throwable  {
      String string0 = "-0X";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
      }
  }

  @Test
  public void test084()  throws Throwable  {
      String string0 = "0X=Pu";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"=Pu\"
         //
      }
  }

  @Test
  public void test085()  throws Throwable  {
      String string0 = "-0x[<e";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-[<e\"
         //
      }
  }

  @Test
  public void test086()  throws Throwable  {
      String string0 = "0x=Pu";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"=Pu\"
         //
      }
  }

  @Test
  public void test087()  throws Throwable  {
      String string0 = "--=Pu";
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test088()  throws Throwable  {
      String string0 = "InvocatioZTargetExcepti;n occurred";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // InvocatioZTargetExcepti;n occurred is not a valid number.
         //
      }
  }

  @Test
  public void test089()  throws Throwable  {
      String string0 = null;
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test090()  throws Throwable  {
      String string0 = "";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test091()  throws Throwable  {
      short short0 = (short) (-1547);
      String string0 = null;
      short short1 = NumberUtils.toShort(string0, short0);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
      assertEquals((short) (-1547), short1);
  }

  @Test
  public void test092()  throws Throwable  {
      double double0 = (-2771.56308719);
      String string0 = null;
      double double1 = NumberUtils.toDouble(string0, double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals((-2771.56308719), double1, 0.01D);
  }

  @Test
  public void test093()  throws Throwable  {
      short short0 = (short) (-1547);
      short short1 = NumberUtils.max(short0, short0, short0);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
      assertEquals((short) (-1547), short1);
      
      String string0 = null;
      float float0 = NumberUtils.toFloat(string0, (float) short1);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
      assertEquals((-1547.0F), float0, 0.01F);
  }

  @Test
  public void test094()  throws Throwable  {
      long[] longArray0 = new long[11];
      String string0 = null;
      long long0 = NumberUtils.toLong(string0, longArray0[7]);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(0L, long0);
  }

  @Test
  public void test095()  throws Throwable  {
      String string0 = null;
      short short0 = (short) (-776);
      int int0 = NumberUtils.toInt(string0, (int) short0);
      assertEquals((-776), int0);
  }

  @Test
  public void test096()  throws Throwable  {
      String string0 = " is not a valid number.";
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test097()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = NumberUtils.max(float0, float0, float0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test
  public void test098()  throws Throwable  {
      String string0 = "0Xa}7W=!-y2IGuI%\\L";
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
  }

  @Test
  public void test099()  throws Throwable  {
      byte byte0 = (byte)110;
      String string0 = "A blank string is not a valid number";
      byte byte1 = NumberUtils.toByte(string0, byte0);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      assertEquals((byte)110, byte1);
      
      float float0 = NumberUtils.min((float) byte1, (float) byte0, (float) byte0);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      assertEquals(110.0F, float0, 0.01F);
  }

  @Test
  public void test100()  throws Throwable  {
      double double0 = (-84.40313);
      double double1 = NumberUtils.min(double0, double0, double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals((-84.40313), double1, 0.01D);
  }

  @Test
  public void test101()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      assertNotNull(numberUtils0);
  }

  @Test
  public void test102()  throws Throwable  {
      String string0 = "--Minimum abbreviation width with offsZt is 1";
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
  }

  @Test
  public void test103()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.math.NumberUtils";
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
      
      double double0 = NumberUtils.max((double) long0, (double) long0, (double) long0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test104()  throws Throwable  {
      String string0 = "Uko\\}Qb5zs<^'}";
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test105()  throws Throwable  {
      String string0 = "-0XInvocationTargetException occurred";
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
  }
}
