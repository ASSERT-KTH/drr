/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:09:20 GMT 2014
 */

package org.apache.commons.lang3.math;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;


public class NumberUtilsEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      String string0 = "l";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test001()  throws Throwable  {
      String string0 = "9l";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test002()  throws Throwable  {
      String string0 = "f";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test003()  throws Throwable  {
      String string0 = "..";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test004()  throws Throwable  {
      String string0 = "0E";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test005()  throws Throwable  {
      String string0 = "c";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test006()  throws Throwable  {
      String string0 = "--o7-Lgx";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test007()  throws Throwable  {
      String string0 = "e-Zb#(vpDk-vi\":";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test008()  throws Throwable  {
      String string0 = "...";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test009()  throws Throwable  {
      String string0 = "+CPw:";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test010()  throws Throwable  {
      String string0 = "-";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test011()  throws Throwable  {
      String string0 = "-0xce";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test012()  throws Throwable  {
      String string0 = "0x9j^rN%B!C5:~(uPdm]";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test013()  throws Throwable  {
      String string0 = "0xA";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test014()  throws Throwable  {
      String string0 = "0x";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test015()  throws Throwable  {
      String string0 = "-0x-0X45*}aF";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = "5";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test017()  throws Throwable  {
      String string0 = "oyv";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test018()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test019()  throws Throwable  {
      String string0 = "-0.";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test020()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)74;
      byteArray0[0] = byte0;
      byte byte1 = NumberUtils.max(byteArray0[1], byteArray0[2], byteArray0[0]);
      assertEquals((byte)74, byte1);
      assertArrayEquals(new byte[] {(byte)74, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(byte1 == byte0);
  }

  @Test
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-49);
      byteArray0[1] = byte0;
      byte byte1 = NumberUtils.max(byteArray0[1], byteArray0[2], byteArray0[0]);
      assertEquals((byte)0, byte1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-49), (byte)0, (byte)0}, byteArray0);
      assertFalse(byte1 == byte0);
  }

  @Test
  public void test023()  throws Throwable  {
      byte byte0 = (byte) (-1);
      byte byte1 = (byte)70;
      short short0 = NumberUtils.max((short) byte0, (short) byte0, (short) byte1);
      assertEquals((short)70, short0);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
  }

  @Test
  public void test024()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.math.NumberUtils";
      short[] shortArray0 = new short[1];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      byte byte0 = (byte) (-8);
      byte byte1 = NumberUtils.toByte(string0, byte0);
      assertEquals((byte) (-8), byte1);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      
      short short1 = NumberUtils.max((short) byte1, short0, short0);
      assertEquals((short)0, short1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertTrue(byte0 == byte1);
      assertTrue(short1 == short0);
      assertTrue(byte1 == byte0);
      assertTrue(short0 == short1);
  }

  @Test
  public void test025()  throws Throwable  {
      String string0 = "Y8:Nx";
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
      
      short short1 = NumberUtils.max(short0, short0, short0);
      assertEquals((short)0, short1);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
  }

  @Test
  public void test026()  throws Throwable  {
      byte byte0 = (byte)101;
      int int0 = 5262;
      int int1 = NumberUtils.max((int) byte0, (int) byte0, int0);
      assertEquals(5262, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test027()  throws Throwable  {
      int int0 = 0;
      String string0 = "---0X45*}aF";
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
      
      short short1 = (short)1603;
      assertFalse(short1 == short0);
      
      int int1 = NumberUtils.max(int0, (int) short1, (int) short0);
      assertEquals(1603, int1);
      assertFalse(short0 == short1);
      assertFalse(int1 == int0);
      assertFalse(short1 == short0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test028()  throws Throwable  {
      String string0 = "Y8:Nx";
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
      
      int int0 = 64;
      long long0 = NumberUtils.max((long) short0, (long) short0, (long) int0);
      assertEquals(64L, long0);
  }

  @Test
  public void test029()  throws Throwable  {
      String string0 = " ";
      byte byte0 = (byte)100;
      int int0 = 3178;
      byte byte1 = NumberUtils.toByte(string0, byte0);
      assertEquals((byte)100, byte1);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      
      long long0 = NumberUtils.max((long) byte0, (long) int0, (long) byte1);
      assertEquals(3178L, long0);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
  }

  @Test
  public void test030()  throws Throwable  {
      String string0 = "Y8:Nx";
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
      
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
      
      long long0 = NumberUtils.max((long) int0, (long) int0, (long) short0);
      assertEquals(0L, long0);
  }

  @Test
  public void test031()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = (byte) (-111);
      byte byte2 = NumberUtils.min(byte0, byte0, byte1);
      assertEquals((byte) (-111), byte2);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
  }

  @Test
  public void test032()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = (byte)17;
      byte byte2 = NumberUtils.min(byte1, byte0, byte1);
      assertEquals((byte)0, byte2);
      assertTrue(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertFalse(byte1 == byte2);
      assertTrue(byte2 == byte0);
      assertFalse(byte2 == byte1);
  }

  @Test
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)74;
      byte byte1 = (byte) (-49);
      short short0 = NumberUtils.min((short) byteArray0[0], (short) byte0, (short) byte1);
      assertEquals((short) (-49), short0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
  }

  @Test
  public void test034()  throws Throwable  {
      short short0 = (short)102;
      short short1 = (short)0;
      short short2 = NumberUtils.min(short0, short1, short1);
      assertEquals((short)0, short2);
      assertTrue(short1 == short2);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertFalse(short0 == short2);
      assertTrue(short2 == short1);
      assertFalse(short2 == short0);
  }

  @Test
  public void test035()  throws Throwable  {
      String string0 = null;
      short short0 = (short) (-4657);
      short short1 = NumberUtils.toShort(string0, short0);
      assertEquals((short) (-4657), short1);
      assertTrue(short1 == short0);
      assertTrue(short0 == short1);
      
      short short2 = NumberUtils.min(short1, short1, short1);
      assertEquals((short) (-4657), short2);
      assertTrue(short2 == short1);
      assertTrue(short2 == short0);
      assertTrue(short1 == short0);
      assertTrue(short1 == short2);
      assertTrue(short0 == short2);
      assertTrue(short0 == short1);
  }

  @Test
  public void test036()  throws Throwable  {
      String string0 = "Y8:Nx";
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
      
      int int1 = 1900;
      assertFalse(int1 == int0);
      
      int int2 = NumberUtils.min(int1, int1, int0);
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
  }

  @Test
  public void test037()  throws Throwable  {
      String string0 = "Y8:Nx";
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
      
      int int0 = 1900;
      int int1 = NumberUtils.min(int0, (int) short0, (int) short0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test038()  throws Throwable  {
      long long0 = 1291L;
      long long1 = (-2445L);
      long long2 = NumberUtils.min(long0, long0, long1);
      assertEquals((-2445L), long2);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertFalse(long1 == long0);
      assertTrue(long1 == long2);
  }

  @Test
  public void test039()  throws Throwable  {
      String string0 = "Y8:Nx";
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
      
      long long0 = 503L;
      long long1 = NumberUtils.min(long0, (long) short0, (long) short0);
      assertEquals(0L, long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test
  public void test040()  throws Throwable  {
      float float0 = 2452.486F;
      float[] floatArray0 = new float[18];
      floatArray0[5] = float0;
      float float1 = NumberUtils.max(floatArray0);
      assertEquals(2452.486F, float1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 2452.486F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(float1 == float0);
  }

  @Test
  public void test041()  throws Throwable  {
      float[] floatArray0 = new float[10];
      float float0 = Float.NaN;
      floatArray0[2] = float0;
      float float1 = NumberUtils.max(floatArray0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, Float.NaN, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
  }

  @Test
  public void test042()  throws Throwable  {
      float[] floatArray0 = null;
      // Undeclared exception!
      try {
        float float0 = NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test043()  throws Throwable  {
      byte byte0 = (byte)52;
      double[] doubleArray0 = new double[25];
      doubleArray0[4] = (double) byte0;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(52.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 52.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = Double.NaN;
      doubleArray0[2] = double0;
      double double1 = NumberUtils.max(doubleArray0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, Double.NaN}, doubleArray0, 0.01);
      //  // Unstable assertion: assertTrue(double1 == double0);
  }

  @Test
  public void test045()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try {
        double double0 = NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)108;
      byteArray0[3] = byte0;
      byte byte1 = NumberUtils.max(byteArray0);
      assertEquals((byte)108, byte1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)108, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(byte1 == byte0);
  }

  @Test
  public void test047()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try {
        byte byte0 = NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test048()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short short0 = (short)1004;
      shortArray0[1] = short0;
      short short1 = NumberUtils.max(shortArray0);
      assertEquals((short)1004, short1);
      assertArrayEquals(new short[] {(short)0, (short)1004, (short)0}, shortArray0);
      assertTrue(short1 == short0);
  }

  @Test
  public void test049()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test050()  throws Throwable  {
      short short0 = (short)534;
      int[] intArray0 = new int[6];
      intArray0[3] = (int) short0;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(534, int0);
      assertArrayEquals(new int[] {0, 0, 0, 534, 0, 0}, intArray0);
  }

  @Test
  public void test051()  throws Throwable  {
      long[] longArray0 = new long[9];
      long long0 = 1L;
      longArray0[1] = long0;
      long long1 = NumberUtils.max(longArray0);
      assertEquals(1L, long1);
      assertArrayEquals(new long[] {0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertTrue(long1 == long0);
  }

  @Test
  public void test052()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try {
        long long0 = NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test053()  throws Throwable  {
      float[] floatArray0 = new float[7];
      float float0 = Float.NaN;
      floatArray0[0] = float0;
      float float1 = NumberUtils.min(floatArray0);
      //  // Unstable assertion: assertEquals(0.0F, float1, 0.01F);
      //  // Unstable assertion: assertArrayEquals(new float[] {Float.NaN, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      //  // Unstable assertion: assertFalse(float1 == float0);
  }

  @Test
  public void test054()  throws Throwable  {
      float[] floatArray0 = new float[7];
      float float0 = Float.NaN;
      floatArray0[5] = float0;
      float float1 = NumberUtils.min(floatArray0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, Float.NaN, 0.0F}, floatArray0, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
  }

  @Test
  public void test055()  throws Throwable  {
      float[] floatArray0 = null;
      // Undeclared exception!
      try {
        float float0 = NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = (-675.572637226211);
      doubleArray0[1] = double0;
      double double1 = NumberUtils.min(doubleArray0);
      assertEquals((-675.572637226211), double1, 0.01D);
      assertArrayEquals(new double[] {0.0, (-675.572637226211), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(double1 == double0);
  }

  @Test
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = Double.NaN;
      doubleArray0[7] = double0;
      double double1 = NumberUtils.min(doubleArray0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertTrue(double1 == double0);
  }

  @Test
  public void test058()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try {
        double double0 = NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)51;
      byteArray0[0] = byte0;
      byte byte1 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte1);
      assertArrayEquals(new byte[] {(byte)51, (byte)0, (byte)0}, byteArray0);
      assertFalse(byte1 == byte0);
  }

  @Test
  public void test060()  throws Throwable  {
      short[] shortArray0 = new short[26];
      short short0 = (short)2511;
      shortArray0[0] = short0;
      short short1 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short1);
      assertArrayEquals(new short[] {(short)2511, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(short1 == short0);
  }

  @Test
  public void test061()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test062()  throws Throwable  {
      short short0 = (short) (-645);
      int[] intArray0 = new int[5];
      intArray0[1] = (int) short0;
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-645), int0);
      assertArrayEquals(new int[] {0, (-645), 0, 0, 0}, intArray0);
  }

  @Test
  public void test063()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test064()  throws Throwable  {
      byte byte0 = (byte)52;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) byte0;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
      assertArrayEquals(new long[] {52L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test
  public void test065()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try {
        long long0 = NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test066()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try {
        BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test067()  throws Throwable  {
      String string0 = null;
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
      assertNull(bigDecimal0);
  }

  @Test
  public void test068()  throws Throwable  {
      String string0 = null;
      BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
      assertNull(bigInteger0);
  }

  @Test
  public void test069()  throws Throwable  {
      String string0 = "l/8S1>3?DnMyG%c*";
      // Undeclared exception!
      try {
        BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"l/8S1>3\"
         //
      }
  }

  @Test
  public void test070()  throws Throwable  {
      String string0 = null;
      Long long0 = NumberUtils.createLong(string0);
  }

  @Test
  public void test071()  throws Throwable  {
      String string0 = null;
      Integer integer0 = NumberUtils.createInteger(string0);
  }

  @Test
  public void test072()  throws Throwable  {
      String string0 = null;
      Double double0 = NumberUtils.createDouble(string0);
  }

  @Test
  public void test073()  throws Throwable  {
      String string0 = null;
      Float float0 = NumberUtils.createFloat(string0);
  }

  @Test
  public void test074()  throws Throwable  {
      String string0 = ".K|Fnm";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // .K|Fnm is not a valid number.
         //
      }
  }

  @Test
  public void test075()  throws Throwable  {
      String string0 = "1";
      Integer integer0 = (Integer)NumberUtils.createNumber(string0);
      assertEquals(1, (int)integer0);
  }

  @Test
  public void test076()  throws Throwable  {
      String string0 = "9l";
      Long long0 = (Long)NumberUtils.createNumber(string0);
      assertEquals(9L, (long)long0);
  }

  @Test
  public void test077()  throws Throwable  {
      String string0 = "The Array must not be null";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The Array must not be null is not a valid number.
         //
      }
  }

  @Test
  public void test078()  throws Throwable  {
      String string0 = "-`X>lHl";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -`X>lHl is not a valid number.
         //
      }
  }

  @Test
  public void test079()  throws Throwable  {
      String string0 = "!K4~~f";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // !K4~~f is not a valid number.
         //
      }
  }

  @Test
  public void test080()  throws Throwable  {
      String string0 = "XLMIL";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // XLMIL is not a valid number.
         //
      }
  }

  @Test
  public void test081()  throws Throwable  {
      String string0 = "0E";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0E is not a valid number.
         //
      }
  }

  @Test
  public void test082()  throws Throwable  {
      String string0 = "-0.";
      BigDecimal bigDecimal0 = (BigDecimal)NumberUtils.createNumber(string0);
      assertEquals(0, bigDecimal0.shortValue());
      assertEquals(0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
  }

  @Test
  public void test083()  throws Throwable  {
      String string0 = ",!rtQ&R7(b*V|A/e2";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test084()  throws Throwable  {
      String string0 = ")V3<Vo8}eL:+*IEpQ2";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // )V3<Vo8}eL:+*IEpQ2 is not a valid number.
         //
      }
  }

  @Test
  public void test085()  throws Throwable  {
      String string0 = "llegalArgumentExceptio occxrrd";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // llegalArgumentExceptio occxrrd is not a valid number.
         //
      }
  }

  @Test
  public void test086()  throws Throwable  {
      String string0 = "java.text.N8rmali8r s no ava lllD";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // java.text.N8rmali8r s no ava lllD is not a valid number.
         //
      }
  }

  @Test
  public void test087()  throws Throwable  {
      String string0 = "Array cannotEbe2emptO.";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Array cannotEbe2emptO. is not a valid number.
         //
      }
  }

  @Test
  public void test088()  throws Throwable  {
      String string0 = "Array cannot be empty.";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Array cannot be empty. is not a valid number.
         //
      }
  }

  @Test
  public void test089()  throws Throwable  {
      String string0 = "-0.X45*}aF";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -0.X45*}aF is not a valid number.
         //
      }
  }

  @Test
  public void test090()  throws Throwable  {
      String string0 = "-0X.K|nm";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-.K|nm\"
         //
      }
  }

  @Test
  public void test091()  throws Throwable  {
      String string0 = "0XMinimum abbreviation width is 4";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Minimum abbreviation width is 4\"
         //
      }
  }

  @Test
  public void test092()  throws Throwable  {
      String string0 = "-0x";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
      }
  }

  @Test
  public void test093()  throws Throwable  {
      String string0 = "0x>,nJ";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \">,nJ\"
         //
      }
  }

  @Test
  public void test094()  throws Throwable  {
      String string0 = "--|e}AFHaZ$!vJ 8?s";
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test095()  throws Throwable  {
      String string0 = "";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test096()  throws Throwable  {
      String string0 = null;
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test097()  throws Throwable  {
      String string0 = null;
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
  }

  @Test
  public void test098()  throws Throwable  {
      String string0 = null;
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test099()  throws Throwable  {
      String string0 = "-0.";
      int int0 = 76;
      int int1 = NumberUtils.toInt(string0, int0);
      assertEquals(76, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      String string1 = null;
      float float0 = NumberUtils.toFloat(string1, (float) int1);
      assertEquals(76.0F, float0, 0.01F);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test100()  throws Throwable  {
      byte byte0 = (byte)52;
      String string0 = null;
      long long0 = NumberUtils.toLong(string0, (long) byte0);
      assertEquals(52L, long0);
  }

  @Test
  public void test101()  throws Throwable  {
      String string0 = null;
      byte byte0 = (byte) (-1);
      int int0 = NumberUtils.toInt(string0, (int) byte0);
      assertEquals((-1), int0);
  }

  @Test
  public void test102()  throws Throwable  {
      String string0 = "InvocationTargetException occurred";
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test103()  throws Throwable  {
      float float0 = (-17.184454F);
      byte byte0 = (byte) (-1);
      float float1 = NumberUtils.max(float0, (float) byte0, float0);
      assertEquals((-1.0F), float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test104()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.math.NumberUtils";
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
  }

  @Test
  public void test105()  throws Throwable  {
      String string0 = "Y8:Nx";
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
      
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
      
      float float0 = NumberUtils.min((float) short0, (float) short0, (float) int0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test106()  throws Throwable  {
      int int0 = 725;
      double double0 = NumberUtils.min((double) int0, (double) int0, (double) int0);
      assertEquals(725.0, double0, 0.01D);
  }

  @Test
  public void test107()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      assertNotNull(numberUtils0);
  }

  @Test
  public void test108()  throws Throwable  {
      byte byte0 = (byte) (-31);
      double double0 = NumberUtils.max((double) byte0, (double) byte0, (double) byte0);
      assertEquals((-31.0), double0, 0.01D);
  }

  @Test
  public void test109()  throws Throwable  {
      String string0 = "-0.";
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(-0.0F, float0, 0.01F);
  }
}
