/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:14:35 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.lang.reflect.Array;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.lang.ClassUtils;



import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.junit.runner.RunWith;


public class ClassUtilsEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "[jamva.lang.Object";
      // Undeclared exception!
      try {
        String string1 = ClassUtils.getPackageCanonicalName(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "[L!;|m[][]";
      String string1 = ClassUtils.getPackageCanonicalName(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test02()  throws Throwable  {
      Class<Long> class0 = null;
      String string0 = ClassUtils.getPackageCanonicalName(class0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test03()  throws Throwable  {
      Class<Short> class0 = Short.class;
      String string0 = ClassUtils.getPackageCanonicalName(class0);
      assertNotNull(string0);
      assertEquals("java.lang", string0);
  }

  @Test
  public void test04()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 9);
      String string0 = "";
      List<Class<?>> list0 = ClassUtils.getAllInterfaces(classArray0[1]);
      assertNull(list0);
      
      String string1 = ClassUtils.getPackageCanonicalName((Object) list0, string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "[Ljava.lang.Long;";
      String string1 = ClassUtils.getShortClassName(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertEquals("Long[]", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      long long0 = 0L;
      Long long1 = new Long(long0);
      assertEquals(0L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      
      String string2 = ClassUtils.getPackageCanonicalName((Object) long1, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotNull(string2);
      assertEquals("java.lang", string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertTrue(long1.equals((Object)long0));
  }

  @Test
  public void test06()  throws Throwable  {
      Class<Object> class0 = null;
      String string0 = ClassUtils.getShortCanonicalName(class0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test07()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      String string0 = "java.lang.Long[]";
      Class<?> class0 = ClassUtils.getClass(classLoader0, string0);
      assertNotNull(class0);
      assertEquals(false, class0.isSynthetic());
      assertEquals(false, class0.isInterface());
      assertEquals(true, class0.isArray());
      assertEquals("class [Ljava.lang.Long;", class0.toString());
      assertEquals(false, class0.isAnnotation());
      assertEquals(false, class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertEquals(false, class0.isPrimitive());
      
      String string1 = ClassUtils.getShortCanonicalName(class0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("Long[]", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(false, class0.isSynthetic());
      assertEquals(false, class0.isInterface());
      assertEquals(true, class0.isArray());
      assertEquals("class [Ljava.lang.Long;", class0.toString());
      assertEquals(false, class0.isAnnotation());
      assertEquals(false, class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertEquals(false, class0.isPrimitive());
  }

  @Test
  public void test08()  throws Throwable  {
      Class<Double> class0 = Double.class;
      String string0 = "w[;7-@WV_{J7IzW<[]";
      String string1 = ClassUtils.getShortCanonicalName((Object) class0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("Class", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      List<String> list0 = null;
      String string2 = ClassUtils.getShortCanonicalName((Object) list0, string1);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotNull(string2);
      assertEquals("Class", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test09()  throws Throwable  {
      Class<Short>[] classArray0 = null;
      Class<?>[] classArray1 = ClassUtils.toClass((Object[]) classArray0);
      assertNull(classArray1);
  }

  @Test
  public void test10()  throws Throwable  {
      Class<ClassUtils> class0 = ClassUtils.class;
      boolean boolean0 = ClassUtils.isInnerClass(class0);
      assertFalse(boolean0);
      
      String string0 = null;
      String string1 = ClassUtils.getShortCanonicalName(string0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      try {
        Class<?> class1 = ClassUtils.getClass(classLoader0, string1, boolean0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // 
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 2);
      boolean boolean0 = ClassUtils.isInnerClass(classArray0[0]);
      assertFalse(boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      Class<ClassUtils>[] classArray0 = null;
      Class<?>[] classArray1 = ClassUtils.wrappersToPrimitives(classArray0);
      assertNull(classArray1);
  }

  @Test
  public void test13()  throws Throwable  {
      Class<Short>[] classArray0 = null;
      Class<?>[] classArray1 = ClassUtils.primitivesToWrappers(classArray0);
      assertNull(classArray1);
  }

  @Test
  public void test14()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 14);
      Class<Integer> class0 = Integer.class;
      classArray0[1] = class0;
      assertNotNull(classArray0[1]);
      assertEquals(false, classArray0[1].isPrimitive());
      assertEquals(false, classArray0[1].isSynthetic());
      assertEquals("class java.lang.Integer", classArray0[1].toString());
      assertEquals(false, classArray0[1].isEnum());
      assertEquals(false, classArray0[1].isInterface());
      assertEquals(false, classArray0[1].isAnnotation());
      assertEquals(17, classArray0[1].getModifiers());
      assertEquals(false, classArray0[1].isArray());
      
      Class<?>[] classArray1 = ClassUtils.primitivesToWrappers(classArray0);
      assertNotNull(classArray1);
  }

  @Test
  public void test15()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 1);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      assertNotNull(classArray0[0]);
      assertEquals(17, classArray0[0].getModifiers());
      assertEquals(false, classArray0[0].isArray());
      assertEquals("class java.lang.Integer", classArray0[0].toString());
      assertEquals(false, classArray0[0].isAnnotation());
      assertEquals(false, classArray0[0].isSynthetic());
      assertEquals(false, classArray0[0].isPrimitive());
      assertEquals(false, classArray0[0].isInterface());
      assertEquals(false, classArray0[0].isEnum());
      
      Class<?>[] classArray1 = ClassUtils.wrappersToPrimitives(classArray0);
      assertNotNull(classArray1);
      
      boolean boolean0 = true;
      Class<?>[] classArray2 = ClassUtils.toClass((Object[]) classArray0);
      assertNotSame(classArray2, classArray1);
      assertNotNull(classArray2);
      assertFalse(classArray2.equals((Object)classArray1));
      
      Class<Float> class1 = Float.class;
      classArray2[0] = class1;
      assertNotNull(classArray2[0]);
      assertEquals(false, classArray2[0].isSynthetic());
      assertEquals(false, classArray2[0].isInterface());
      assertEquals(false, classArray2[0].isEnum());
      assertEquals("class java.lang.Float", classArray2[0].toString());
      assertEquals(17, classArray2[0].getModifiers());
      assertEquals(false, classArray2[0].isAnnotation());
      assertEquals(false, classArray2[0].isArray());
      assertEquals(false, classArray2[0].isPrimitive());
      
      boolean boolean1 = ClassUtils.isAssignable(classArray2, classArray1, boolean0);
      assertNotSame(classArray1, classArray2);
      assertNotSame(classArray2, classArray1);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(classArray1.equals((Object)classArray2));
      assertFalse(classArray2.equals((Object)classArray1));
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test16()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 1);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      assertNotNull(classArray0[0]);
      assertEquals(false, classArray0[0].isEnum());
      assertEquals("class java.lang.Integer", classArray0[0].toString());
      assertEquals(false, classArray0[0].isSynthetic());
      assertEquals(false, classArray0[0].isArray());
      assertEquals(false, classArray0[0].isAnnotation());
      assertEquals(17, classArray0[0].getModifiers());
      assertEquals(false, classArray0[0].isPrimitive());
      assertEquals(false, classArray0[0].isInterface());
      
      Class<?>[] classArray1 = ClassUtils.wrappersToPrimitives(classArray0);
      assertNotNull(classArray1);
      
      boolean boolean0 = true;
      Class<?>[] classArray2 = ClassUtils.toClass((Object[]) classArray0);
      assertNotSame(classArray2, classArray1);
      assertNotNull(classArray2);
      assertFalse(classArray2.equals((Object)classArray1));
      
      Class<Boolean> class1 = Boolean.class;
      classArray2[0] = class1;
      assertNotNull(classArray2[0]);
      assertEquals(false, classArray2[0].isAnnotation());
      assertEquals(false, classArray2[0].isSynthetic());
      assertEquals("class java.lang.Boolean", classArray2[0].toString());
      assertEquals(17, classArray2[0].getModifiers());
      assertEquals(false, classArray2[0].isEnum());
      assertEquals(false, classArray2[0].isInterface());
      assertEquals(false, classArray2[0].isPrimitive());
      assertEquals(false, classArray2[0].isArray());
      
      boolean boolean1 = ClassUtils.isAssignable(classArray2, classArray1, boolean0);
      assertNotSame(classArray1, classArray2);
      assertNotSame(classArray2, classArray1);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(classArray1.equals((Object)classArray2));
      assertFalse(boolean0 == boolean1);
      assertFalse(classArray2.equals((Object)classArray1));
  }

  @Test
  public void test17()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<?> class1 = ClassUtils.wrapperToPrimitive(class0);
      assertNotNull(class1);
      assertEquals(false, class1.isAnnotation());
      assertEquals(true, class1.isPrimitive());
      assertEquals("long", class1.toString());
      assertEquals(false, class1.isSynthetic());
      assertEquals(false, class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertEquals(false, class1.isEnum());
      assertEquals(false, class1.isArray());
      
      Class<Integer> class2 = Integer.class;
      boolean boolean0 = true;
      boolean boolean1 = ClassUtils.isAssignable(class2, class1, boolean0);
      assertTrue(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(false, class1.isAnnotation());
      assertEquals(true, class1.isPrimitive());
      assertEquals("long", class1.toString());
      assertEquals(false, class1.isSynthetic());
      assertEquals(false, class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertEquals(false, class1.isEnum());
      assertEquals(false, class1.isArray());
  }

  @Test
  public void test18()  throws Throwable  {
      Class<Short>[] classArray0 = (Class<Short>[]) Array.newInstance(Class.class, 1);
      Class<Short> class0 = Short.class;
      classArray0[0] = class0;
      assertNotNull(classArray0[0]);
      assertEquals(false, classArray0[0].isAnnotation());
      assertEquals(false, classArray0[0].isSynthetic());
      assertEquals(false, classArray0[0].isArray());
      assertEquals(false, classArray0[0].isPrimitive());
      assertEquals(false, classArray0[0].isInterface());
      assertEquals(17, classArray0[0].getModifiers());
      assertEquals(false, classArray0[0].isEnum());
      assertEquals("class java.lang.Short", classArray0[0].toString());
      
      Class<?>[] classArray1 = ClassUtils.wrappersToPrimitives(classArray0);
      assertNotNull(classArray1);
      
      boolean boolean0 = ClassUtils.isAssignable(classArray1, classArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      Class<ClassUtils> class0 = ClassUtils.class;
      Class<String> class1 = String.class;
      boolean boolean0 = ClassUtils.isAssignable(class0, class1);
      assertFalse(boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 1);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      assertNotNull(classArray0[0]);
      assertEquals(17, classArray0[0].getModifiers());
      assertEquals(false, classArray0[0].isInterface());
      assertEquals("class java.lang.Integer", classArray0[0].toString());
      assertEquals(false, classArray0[0].isPrimitive());
      assertEquals(false, classArray0[0].isSynthetic());
      assertEquals(false, classArray0[0].isArray());
      assertEquals(false, classArray0[0].isEnum());
      assertEquals(false, classArray0[0].isAnnotation());
      
      Class<?>[] classArray1 = ClassUtils.wrappersToPrimitives(classArray0);
      assertNotNull(classArray1);
      
      boolean boolean0 = true;
      Class<?>[] classArray2 = ClassUtils.toClass((Object[]) classArray0);
      assertNotSame(classArray2, classArray1);
      assertNotNull(classArray2);
      assertFalse(classArray2.equals((Object)classArray1));
      
      boolean boolean1 = ClassUtils.isAssignable(classArray2, classArray1, boolean0);
      assertNotSame(classArray2, classArray1);
      assertNotSame(classArray1, classArray2);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(classArray2.equals((Object)classArray1));
      assertFalse(classArray1.equals((Object)classArray2));
  }

  @Test
  public void test21()  throws Throwable  {
      boolean boolean0 = true;
      Class<Integer> class0 = Integer.class;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 2);
      classArray0[0] = class0;
      assertNotNull(classArray0[0]);
      assertEquals("class java.lang.Integer", classArray0[0].toString());
      assertEquals(17, classArray0[0].getModifiers());
      assertEquals(false, classArray0[0].isArray());
      assertEquals(false, classArray0[0].isSynthetic());
      assertEquals(false, classArray0[0].isEnum());
      assertEquals(false, classArray0[0].isInterface());
      assertEquals(false, classArray0[0].isPrimitive());
      assertEquals(false, classArray0[0].isAnnotation());
      
      Class<?>[] classArray1 = ClassUtils.wrappersToPrimitives(classArray0);
      assertNotNull(classArray1);
      
      boolean boolean1 = ClassUtils.isAssignable(classArray1, classArray0, boolean0);
      assertFalse(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 9);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      assertNotNull(classArray0[0]);
      assertEquals(false, classArray0[0].isPrimitive());
      assertEquals(false, classArray0[0].isAnnotation());
      assertEquals(17, classArray0[0].getModifiers());
      assertEquals(false, classArray0[0].isArray());
      assertEquals("class java.lang.String", classArray0[0].toString());
      assertEquals(false, classArray0[0].isInterface());
      assertEquals(false, classArray0[0].isEnum());
      assertEquals(false, classArray0[0].isSynthetic());
      
      boolean boolean0 = ClassUtils.isInnerClass(class0);
      assertFalse(boolean0);
      
      Class<?>[] classArray1 = ClassUtils.wrappersToPrimitives(classArray0);
      assertNotNull(classArray1);
      
      boolean boolean1 = ClassUtils.isAssignable(classArray1, classArray0, boolean0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
  }

  @Test
  public void test23()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertEquals(false, class0.isEnum());
      assertEquals(false, class0.isInterface());
      assertEquals(true, class0.isPrimitive());
      assertEquals(false, class0.isSynthetic());
      assertEquals(false, class0.isAnnotation());
      assertEquals(false, class0.isArray());
      assertEquals("float", class0.toString());
      
      Class<Float> class1 = null;
      boolean boolean0 = ClassUtils.isAssignable(class1, class0);
      assertFalse(boolean0);
      assertEquals(1041, class0.getModifiers());
      assertEquals(false, class0.isEnum());
      assertEquals(false, class0.isInterface());
      assertEquals(true, class0.isPrimitive());
      assertEquals(false, class0.isSynthetic());
      assertEquals(false, class0.isAnnotation());
      assertEquals(false, class0.isArray());
      assertEquals("float", class0.toString());
  }

  @Test
  public void test24()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertEquals(false, class0.isInterface());
      assertEquals(false, class0.isAnnotation());
      assertEquals(false, class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertEquals(false, class0.isArray());
      assertEquals(false, class0.isSynthetic());
      assertEquals(true, class0.isPrimitive());
      assertEquals("float", class0.toString());
      
      Class<Float>[] classArray0 = (Class<Float>[]) Array.newInstance(Class.class, 7);
      classArray0[0] = class0;
      assertNotNull(classArray0[0]);
      assertEquals(false, classArray0[0].isInterface());
      assertEquals(false, classArray0[0].isEnum());
      assertEquals(true, classArray0[0].isPrimitive());
      assertEquals(false, classArray0[0].isSynthetic());
      assertEquals("float", classArray0[0].toString());
      assertEquals(false, classArray0[0].isAnnotation());
      assertEquals(false, classArray0[0].isArray());
      assertEquals(1041, classArray0[0].getModifiers());
      assertEquals(false, class0.isInterface());
      assertEquals(false, class0.isAnnotation());
      assertEquals(false, class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertEquals(false, class0.isArray());
      assertEquals(false, class0.isSynthetic());
      assertEquals(true, class0.isPrimitive());
      assertEquals("float", class0.toString());
      
      boolean boolean0 = true;
      boolean boolean1 = ClassUtils.isAssignable(classArray0, classArray0, boolean0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test25()  throws Throwable  {
      Class<Short>[] classArray0 = null;
      boolean boolean0 = ClassUtils.isAssignable(classArray0, classArray0);
      assertTrue(boolean0);
  }

  @Test
  public void test26()  throws Throwable  {
      Class<Float>[] classArray0 = (Class<Float>[]) Array.newInstance(Class.class, 14);
      Class<Byte>[] classArray1 = (Class<Byte>[]) Array.newInstance(Class.class, 4);
      boolean boolean0 = ClassUtils.isAssignable(classArray0, classArray1);
      assertFalse(boolean0);
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = "I";
      String string1 = ClassUtils.getShortClassName(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertEquals("int", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertTrue(boolean0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("[int]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      
      List<Class<?>> list0 = ClassUtils.convertClassNamesToClasses((List<String>) linkedList0);
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals("[int]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      
      List<String> list1 = ClassUtils.convertClassesToClassNames(list0);
      assertNotNull(list1);
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(false, list1.isEmpty());
      assertEquals(1, list1.size());
      assertEquals("[int]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
  }

  @Test
  public void test28()  throws Throwable  {
      List<Class<?>> list0 = null;
      List<String> list1 = ClassUtils.convertClassesToClassNames(list0);
      assertNull(list1);
  }

  @Test
  public void test29()  throws Throwable  {
      Class<Double> class0 = Double.class;
      List<Class<?>> list0 = ClassUtils.getAllSuperclasses(class0);
      assertNotNull(list0);
      assertEquals(false, list0.isEmpty());
      assertEquals(2, list0.size());
      
      List<String> list1 = ClassUtils.convertClassesToClassNames(list0);
      assertNotNull(list1);
      assertEquals(false, list1.isEmpty());
      assertEquals(2, list1.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(2, list0.size());
  }

  @Test
  public void test30()  throws Throwable  {
      List<String> list0 = null;
      List<Class<?>> list1 = ClassUtils.convertClassNamesToClasses(list0);
      assertNull(list1);
  }

  @Test
  public void test31()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      List<Class<?>> list0 = ClassUtils.getAllInterfaces(class0);
      assertNotNull(list0);
      assertEquals(false, list0.isEmpty());
      assertEquals(2, list0.size());
  }

  @Test
  public void test32()  throws Throwable  {
      Class<Short> class0 = null;
      List<Class<?>> list0 = ClassUtils.getAllSuperclasses(class0);
      assertNull(list0);
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = "[Ljava.lang.Long;";
      String string1 = ClassUtils.getShortClassName(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("Long[]", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = ClassUtils.getPackageCanonicalName(string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test34()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      String string0 = "java.lang.Long[]";
      Class<?> class0 = ClassUtils.getClass(classLoader0, string0);
      assertNotNull(class0);
      assertEquals(true, class0.isArray());
      assertEquals(false, class0.isEnum());
      assertEquals(false, class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertEquals("class [Ljava.lang.Long;", class0.toString());
      assertEquals(false, class0.isPrimitive());
      assertEquals(false, class0.isSynthetic());
      assertEquals(false, class0.isInterface());
      
      String string1 = ClassUtils.getPackageName(class0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertEquals("java.lang", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(true, class0.isArray());
      assertEquals(false, class0.isEnum());
      assertEquals(false, class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertEquals("class [Ljava.lang.Long;", class0.toString());
      assertEquals(false, class0.isPrimitive());
      assertEquals(false, class0.isSynthetic());
      assertEquals(false, class0.isInterface());
  }

  @Test
  public void test35()  throws Throwable  {
      Class<ClassUtils> class0 = null;
      String string0 = ClassUtils.getShortClassName(class0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = ClassUtils.getPackageName(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test
  public void test36()  throws Throwable  {
      Class<Float> class0 = null;
      String string0 = ClassUtils.getPackageName(class0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test37()  throws Throwable  {
      String string0 = "[Ljava.lang.Long;";
      ClassLoader classLoader0 = null;
      String string1 = ClassUtils.getPackageName((Object) classLoader0, string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals("[Ljava.lang.Long;", string1);
  }

  @Test
  public void test38()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      String string0 = ClassUtils.getPackageName(class0);
      assertNotNull(string0);
      assertEquals("java.lang", string0);
      
      Class<Short> class1 = Short.TYPE;
      assertNotNull(class1);
      assertEquals("short", class1.toString());
      assertEquals(true, class1.isPrimitive());
      assertEquals(false, class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertEquals(false, class1.isSynthetic());
      assertEquals(false, class1.isInterface());
      assertEquals(false, class1.isEnum());
      assertEquals(false, class1.isAnnotation());
      
      String string1 = ClassUtils.getPackageName((Object) class1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("java.lang", string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("short", class1.toString());
      assertEquals(true, class1.isPrimitive());
      assertEquals(false, class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertEquals(false, class1.isSynthetic());
      assertEquals(false, class1.isInterface());
      assertEquals(false, class1.isEnum());
      assertEquals(false, class1.isAnnotation());
  }

  @Test
  public void test39()  throws Throwable  {
      String string0 = "4H$?d-LF`qy&[]";
      String string1 = ClassUtils.getShortCanonicalName(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("4H.?d-LF`qy&[]", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test40()  throws Throwable  {
      String string0 = "[L!;|m[][]";
      String string1 = ClassUtils.getShortClassName(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("L!;|m[][][]", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test41()  throws Throwable  {
      String string0 = "[";
      String string1 = ClassUtils.getShortCanonicalName(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("][]", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test42()  throws Throwable  {
      String string0 = "";
      String string1 = ClassUtils.getShortCanonicalName(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test
  public void test43()  throws Throwable  {
      Object object0 = null;
      String string0 = "Q\"H#_";
      String string1 = ClassUtils.getShortClassName(object0, string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals("Q\"H#_", string1);
  }

  @Test
  public void test44()  throws Throwable  {
      Class<ClassUtils> class0 = ClassUtils.class;
      String string0 = null;
      String string1 = ClassUtils.getShortClassName((Object) class0, string0);
      assertNotNull(string1);
      assertEquals("Class", string1);
  }

  @Test
  public void test45()  throws Throwable  {
      String string0 = null;
      String string1 = ClassUtils.getPackageCanonicalName(string0);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test
  public void test46()  throws Throwable  {
      String string0 = "float";
      ClassLoader classLoader0 = null;
      Class<?> class0 = ClassUtils.getClass(classLoader0, string0);
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertEquals(true, class0.isPrimitive());
      assertEquals(false, class0.isArray());
      assertEquals("float", class0.toString());
      assertEquals(false, class0.isAnnotation());
      assertEquals(false, class0.isEnum());
      assertEquals(false, class0.isInterface());
      assertEquals(false, class0.isSynthetic());
  }

  @Test
  public void test47()  throws Throwable  {
      ClassUtils classUtils0 = new ClassUtils();
      assertNotNull(classUtils0);
  }

  @Test
  public void test48()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try {
        Class<?> class0 = ClassUtils.getClass(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // className must not be null.
         //
      }
  }

  @Test
  public void test49()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<Byte> class1 = Byte.TYPE;
      assertNotNull(class1);
      assertEquals(1041, class1.getModifiers());
      assertEquals(false, class1.isEnum());
      assertEquals(false, class1.isArray());
      assertEquals(true, class1.isPrimitive());
      assertEquals(false, class1.isInterface());
      assertEquals(false, class1.isSynthetic());
      assertEquals(false, class1.isAnnotation());
      assertEquals("byte", class1.toString());
      
      boolean boolean0 = true;
      boolean boolean1 = ClassUtils.isAssignable(class0, class1, boolean0);
      assertFalse(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1041, class1.getModifiers());
      assertEquals(false, class1.isEnum());
      assertEquals(false, class1.isArray());
      assertEquals(true, class1.isPrimitive());
      assertEquals(false, class1.isInterface());
      assertEquals(false, class1.isSynthetic());
      assertEquals(false, class1.isAnnotation());
      assertEquals("byte", class1.toString());
  }
}
