/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:29:50 GMT 2014
 */

package org.apache.commons.lang3.text.translate;

import static org.junit.Assert.*;
import org.junit.Test;
import java.io.BufferedWriter;
import java.io.OutputStream;
import java.io.Writer;
import java.net.URI;
import java.util.Locale;
import org.apache.commons.lang3.text.translate.AggregateTranslator;
import org.apache.commons.lang3.text.translate.CharSequenceTranslator;
import org.apache.commons.lang3.text.translate.NumericEntityEscaper;
import org.apache.commons.lang3.text.translate.OctalUnescaper;
import org.apache.commons.lang3.text.translate.UnicodeEscaper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;


public class CharSequenceTranslatorEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      int int0 = 0;
      NumericEntityEscaper numericEntityEscaper0 = NumericEntityEscaper.outsideOf(int0, int0);
      assertNotNull(numericEntityEscaper0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      
      String string0 = locale0.getISO3Language();
      assertNotNull(string0);
      assertEquals("zho", string0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      
      String string1 = numericEntityEscaper0.translate((CharSequence) string0);
      assertNotNull(string1);
      assertEquals("&#122;&#104;&#111;", string1);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = (-440);
      UnicodeEscaper unicodeEscaper0 = UnicodeEscaper.outsideOf(int0, int0);
      assertNotNull(unicodeEscaper0);
      
      String string0 = "!t+ECeSrt_(r";
      URI uRI0 = URI.create(string0);
      assertNotNull(uRI0);
      assertEquals("!t+ECeSrt_(r", uRI0.toString());
      assertNull(uRI0.getScheme());
      assertEquals(false, uRI0.isAbsolute());
      assertEquals(false, uRI0.isOpaque());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertEquals(-1, uRI0.getPort());
      assertEquals("!t+ECeSrt_(r", uRI0.getRawPath());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawUserInfo());
      
      String string1 = uRI0.getScheme();
      assertNull(string1);
      assertEquals("!t+ECeSrt_(r", uRI0.toString());
      assertNull(uRI0.getScheme());
      assertEquals(false, uRI0.isAbsolute());
      assertEquals(false, uRI0.isOpaque());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertEquals(-1, uRI0.getPort());
      assertEquals("!t+ECeSrt_(r", uRI0.getRawPath());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawUserInfo());
      
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0, boolean0);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((OutputStream) mockFileOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      BufferedWriter bufferedWriter0 = new BufferedWriter((Writer) mockPrintWriter0);
      assertNotNull(bufferedWriter0);
      
      unicodeEscaper0.translate((CharSequence) string1, (Writer) bufferedWriter0);
      assertEquals("!t+ECeSrt_(r", uRI0.toString());
      assertNull(uRI0.getScheme());
      assertEquals(false, uRI0.isAbsolute());
      assertEquals(false, uRI0.isOpaque());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertEquals(-1, uRI0.getPort());
      assertEquals("!t+ECeSrt_(r", uRI0.getRawPath());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawUserInfo());
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 311;
      UnicodeEscaper unicodeEscaper0 = UnicodeEscaper.below(int0);
      assertNotNull(unicodeEscaper0);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      
      String string0 = locale0.getScript();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      
      Writer writer0 = null;
      // Undeclared exception!
      try {
        unicodeEscaper0.translate((CharSequence) string0, writer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      OctalUnescaper octalUnescaper0 = new OctalUnescaper();
      assertNotNull(octalUnescaper0);
      
      CharSequence charSequence0 = null;
      String string0 = octalUnescaper0.translate(charSequence0);
      assertNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      OctalUnescaper octalUnescaper0 = new OctalUnescaper();
      assertNotNull(octalUnescaper0);
      
      int int0 = 0;
      String string0 = CharSequenceTranslator.hex(int0);
      assertNotNull(string0);
      assertEquals("0", string0);
      
      String string1 = octalUnescaper0.translate((CharSequence) string0);
      assertNotNull(string1);
      assertEquals("0", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test5()  throws Throwable  {
      UnicodeEscaper unicodeEscaper0 = new UnicodeEscaper();
      assertNotNull(unicodeEscaper0);
      
      CharSequenceTranslator[] charSequenceTranslatorArray0 = new CharSequenceTranslator[3];
      AggregateTranslator aggregateTranslator0 = (AggregateTranslator)unicodeEscaper0.with(charSequenceTranslatorArray0);
      assertNotNull(aggregateTranslator0);
  }
}
