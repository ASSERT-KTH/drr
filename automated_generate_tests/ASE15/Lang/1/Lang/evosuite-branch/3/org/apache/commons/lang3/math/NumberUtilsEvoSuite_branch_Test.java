/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:09:12 GMT 2014
 */

package org.apache.commons.lang3.math;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;




import org.junit.runner.RunWith;


public class NumberUtilsEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      String string0 = "--";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test001()  throws Throwable  {
      String string0 = "-2F";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test002()  throws Throwable  {
      String string0 = "7f";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test003()  throws Throwable  {
      String string0 = "D";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test004()  throws Throwable  {
      String string0 = ".";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test005()  throws Throwable  {
      String string0 = "E";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test006()  throws Throwable  {
      String string0 = "5";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test007()  throws Throwable  {
      String string0 = "..";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test008()  throws Throwable  {
      String string0 = "+oo";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test009()  throws Throwable  {
      String string0 = "E<ZJUUCz2$2s[HMt[";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test010()  throws Throwable  {
      String string0 = "efX_u";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test011()  throws Throwable  {
      String string0 = "...";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test012()  throws Throwable  {
      String string0 = "-";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test013()  throws Throwable  {
      String string0 = "-0xArray cannot be empty.";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test014()  throws Throwable  {
      String string0 = "-0x...";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test015()  throws Throwable  {
      String string0 = "0x";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = "0d";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test017()  throws Throwable  {
      String string0 = "-0x0d";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test018()  throws Throwable  {
      String string0 = "l";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test019()  throws Throwable  {
      String string0 = "--O{N\"c0);>bR_lu6oUT!";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test020()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test021()  throws Throwable  {
      String string0 = "Tv6*Xq]Iv";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test022()  throws Throwable  {
      String string0 = "0x";
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test023()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test024()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = (byte)103;
      byte byte2 = NumberUtils.max(byte0, byte0, byte1);
      assertEquals((byte)103, byte2);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
  }

  @Test
  public void test025()  throws Throwable  {
      byte byte0 = (byte) (-14);
      byte byte1 = (byte)60;
      byte byte2 = NumberUtils.max(byte0, byte1, byte1);
      assertEquals((byte)60, byte2);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
  }

  @Test
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-15);
      short short0 = NumberUtils.max((short) byte0, (short) byte0, (short) byteArray0[1]);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((short)0, short0);
  }

  @Test
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      short short0 = (short) (-372);
      short short1 = NumberUtils.max(short0, (short) byteArray0[2], (short) byteArray0[1]);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((short)0, short1);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
  }

  @Test
  public void test028()  throws Throwable  {
      String string0 = null;
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
      
      int int0 = 1804;
      int int1 = NumberUtils.max((int) short0, (int) short0, int0);
      assertEquals(1804, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test029()  throws Throwable  {
      String string0 = null;
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
      
      int int0 = 994;
      int int1 = NumberUtils.max((int) short0, int0, (int) short0);
      assertEquals(994, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test030()  throws Throwable  {
      byte byte0 = (byte)0;
      short short0 = (short)1;
      long long0 = NumberUtils.max((long) byte0, (long) byte0, (long) short0);
      assertEquals(1L, long0);
  }

  @Test
  public void test031()  throws Throwable  {
      byte byte0 = (byte)22;
      byte byte1 = (byte)13;
      byte byte2 = NumberUtils.max(byte0, byte1, byte1);
      assertEquals((byte)22, byte2);
      assertTrue(byte2 == byte0);
      assertFalse(byte2 == byte1);
      assertFalse(byte1 == byte0);
      assertFalse(byte1 == byte2);
      assertFalse(byte0 == byte1);
      assertTrue(byte0 == byte2);
      
      long long0 = NumberUtils.max((long) byte1, (long) byte2, (long) byte0);
      assertEquals(22L, long0);
      assertTrue(byte2 == byte0);
      assertFalse(byte2 == byte1);
      assertFalse(byte1 == byte0);
      assertFalse(byte1 == byte2);
      assertFalse(byte0 == byte1);
      assertTrue(byte0 == byte2);
  }

  @Test
  public void test032()  throws Throwable  {
      String string0 = "m)l%<R5KJ`WPJcpWO2";
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
      
      long long1 = NumberUtils.max(long0, long0, long0);
      assertEquals(0L, long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
  }

  @Test
  public void test033()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = NumberUtils.max(byte0, byte0, byte0);
      assertEquals((byte)0, byte1);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      
      byte byte2 = (byte) (-24);
      assertFalse(byte2 == byte1);
      
      byte byte3 = NumberUtils.min(byte0, byte1, byte2);
      assertEquals((byte) (-24), byte3);
      assertFalse(byte1 == byte3);
      assertTrue(byte1 == byte0);
      assertFalse(byte1 == byte2);
      assertTrue(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte3);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte3);
      assertFalse(byte2 == byte1);
      assertTrue(byte3 == byte2);
      assertFalse(byte3 == byte1);
      assertFalse(byte3 == byte0);
  }

  @Test
  public void test034()  throws Throwable  {
      byte byte0 = (byte)43;
      byte byte1 = (byte)114;
      byte byte2 = NumberUtils.min(byte1, byte0, byte0);
      assertEquals((byte)43, byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte1 == byte2);
      assertFalse(byte2 == byte1);
      assertTrue(byte2 == byte0);
      assertFalse(byte0 == byte1);
      assertTrue(byte0 == byte2);
  }

  @Test
  public void test035()  throws Throwable  {
      short short0 = (short)1072;
      short short1 = (short)120;
      short short2 = NumberUtils.min(short0, short0, short1);
      assertEquals((short)120, short2);
      assertFalse(short0 == short2);
      assertFalse(short0 == short1);
      assertFalse(short2 == short0);
      assertTrue(short2 == short1);
      assertTrue(short1 == short2);
      assertFalse(short1 == short0);
  }

  @Test
  public void test036()  throws Throwable  {
      short short0 = (short)3221;
      short short1 = (short)16;
      short short2 = NumberUtils.min(short0, short1, short0);
      assertEquals((short)16, short2);
      assertTrue(short1 == short2);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertFalse(short0 == short2);
      assertFalse(short2 == short0);
      assertTrue(short2 == short1);
  }

  @Test
  public void test037()  throws Throwable  {
      byte byte0 = (byte) (-117);
      int int0 = 417;
      int int1 = NumberUtils.min(int0, int0, (int) byte0);
      assertEquals((-117), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test038()  throws Throwable  {
      byte byte0 = (byte)0;
      short short0 = (short)1;
      int int0 = NumberUtils.min((int) short0, (int) byte0, (int) byte0);
      assertEquals(0, int0);
  }

  @Test
  public void test039()  throws Throwable  {
      byte byte0 = (byte)0;
      short short0 = (short)1;
      long long0 = 2675L;
      long long1 = NumberUtils.min((long) short0, long0, (long) byte0);
      assertEquals(0L, long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
  }

  @Test
  public void test040()  throws Throwable  {
      long[] longArray0 = new long[2];
      long long0 = 1L;
      longArray0[0] = long0;
      long long1 = 0L;
      long long2 = NumberUtils.min(longArray0[0], long1, longArray0[0]);
      assertArrayEquals(new long[] {1L, 0L}, longArray0);
      assertEquals(0L, long2);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertFalse(long1 == long0);
      assertTrue(long1 == long2);
  }

  @Test
  public void test041()  throws Throwable  {
      byte byte0 = (byte) (-125);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) byte0;
      float float0 = NumberUtils.max(floatArray0);
      assertArrayEquals(new float[] {(-125.0F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test042()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float float0 = Float.NaN;
      floatArray0[1] = float0;
      float float1 = NumberUtils.max(floatArray0);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, Float.NaN, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
  }

  @Test
  public void test043()  throws Throwable  {
      float[] floatArray0 = null;
      // Undeclared exception!
      try {
        float float0 = NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test044()  throws Throwable  {
      int int0 = 2832;
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) int0;
      double double0 = NumberUtils.max(doubleArray0);
      assertArrayEquals(new double[] {0.0, 2832.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2832.0, double0, 0.01D);
  }

  @Test
  public void test045()  throws Throwable  {
      float float0 = Float.NaN;
      double[] doubleArray0 = new double[9];
      doubleArray0[5] = (double) float0;
      double double0 = NumberUtils.max(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test046()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try {
        double double0 = NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)61;
      byteArray0[1] = byte0;
      byte byte1 = NumberUtils.max(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)61, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((byte)61, byte1);
      assertTrue(byte1 == byte0);
  }

  @Test
  public void test048()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try {
        byte byte0 = NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test049()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short short0 = (short)1314;
      shortArray0[2] = short0;
      short short1 = NumberUtils.max(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)1314}, shortArray0);
      assertEquals((short)1314, short1);
      assertTrue(short1 == short0);
  }

  @Test
  public void test050()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test051()  throws Throwable  {
      int[] intArray0 = new int[11];
      int int0 = 16;
      intArray0[3] = int0;
      int int1 = NumberUtils.max(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(16, int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test052()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test053()  throws Throwable  {
      long[] longArray0 = new long[5];
      long long0 = 1591L;
      longArray0[4] = long0;
      long long1 = NumberUtils.max(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 1591L}, longArray0);
      assertEquals(1591L, long1);
      assertTrue(long1 == long0);
  }

  @Test
  public void test054()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try {
        long long0 = NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test055()  throws Throwable  {
      long long0 = 2675L;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) long0;
      float float0 = NumberUtils.min(floatArray0);
      assertArrayEquals(new float[] {2675.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test056()  throws Throwable  {
      float[] floatArray0 = new float[4];
      float float0 = Float.NaN;
      floatArray0[1] = float0;
      float float1 = NumberUtils.min(floatArray0);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, Float.NaN, 0.0F, 0.0F}, floatArray0, 0.01F);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
  }

  @Test
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = (-832.117);
      doubleArray0[1] = double0;
      double double1 = NumberUtils.min(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-832.117), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-832.117), double1, 0.01D);
      assertTrue(double1 == double0);
  }

  @Test
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = Double.NaN;
      doubleArray0[3] = double0;
      double double1 = NumberUtils.min(doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double0);
  }

  @Test
  public void test059()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try {
        double double0 = NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-12);
      byteArray0[4] = byte0;
      byte byte1 = NumberUtils.min(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte) (-12), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((byte) (-12), byte1);
      assertTrue(byte1 == byte0);
  }

  @Test
  public void test061()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try {
        byte byte0 = NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test062()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short short0 = (short) (-53);
      shortArray0[5] = short0;
      short short1 = NumberUtils.min(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short) (-53)}, shortArray0);
      assertEquals((short) (-53), short1);
      assertTrue(short1 == short0);
  }

  @Test
  public void test063()  throws Throwable  {
      short short0 = (short)1;
      int[] intArray0 = new int[5];
      intArray0[0] = (int) short0;
      int int0 = NumberUtils.min(intArray0);
      assertArrayEquals(new int[] {1, 0, 0, 0, 0}, intArray0);
      assertEquals(0, int0);
  }

  @Test
  public void test064()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test065()  throws Throwable  {
      long long0 = (-2344L);
      long[] longArray0 = new long[6];
      longArray0[2] = long0;
      long long1 = NumberUtils.min(longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-2344L), 0L, 0L, 0L}, longArray0);
      assertEquals((-2344L), long1);
      assertTrue(long1 == long0);
  }

  @Test
  public void test066()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try {
        long long0 = NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test067()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try {
        BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test068()  throws Throwable  {
      String string0 = null;
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
      assertNull(bigDecimal0);
  }

  @Test
  public void test069()  throws Throwable  {
      String string0 = null;
      BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
      assertNull(bigInteger0);
  }

  @Test
  public void test070()  throws Throwable  {
      String string0 = null;
      Long long0 = NumberUtils.createLong(string0);
  }

  @Test
  public void test071()  throws Throwable  {
      String string0 = null;
      Integer integer0 = NumberUtils.createInteger(string0);
  }

  @Test
  public void test072()  throws Throwable  {
      String string0 = null;
      Double double0 = NumberUtils.createDouble(string0);
  }

  @Test
  public void test073()  throws Throwable  {
      String string0 = null;
      Float float0 = NumberUtils.createFloat(string0);
  }

  @Test
  public void test074()  throws Throwable  {
      String string0 = "~ ~,B'3E1";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test075()  throws Throwable  {
      String string0 = "-0f";
      BigDecimal bigDecimal0 = (BigDecimal)NumberUtils.createNumber(string0);
      assertEquals(0, bigDecimal0.byteValue());
      assertEquals(0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
  }

  @Test
  public void test076()  throws Throwable  {
      String string0 = "0d";
      BigDecimal bigDecimal0 = (BigDecimal)NumberUtils.createNumber(string0);
      assertEquals(0, bigDecimal0.byteValue());
      assertEquals(0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
  }

  @Test
  public void test077()  throws Throwable  {
      String string0 = "-2F";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals((-2.0F), (float)float0, 0.01F);
  }

  @Test
  public void test078()  throws Throwable  {
      String string0 = "X=\\sdpl>06~*<l~D";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // X=\\sdpl>06~*<l~D is not a valid number.
         //
      }
  }

  @Test
  public void test079()  throws Throwable  {
      String string0 = "g,#7";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"g,#7\"
         //
      }
  }

  @Test
  public void test080()  throws Throwable  {
      String string0 = "~`pE]1e|";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ~`pE]1e| is not a valid number.
         //
      }
  }

  @Test
  public void test081()  throws Throwable  {
      String string0 = "(&8#V-O6\\L";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // (&8#V-O6\\L is not a valid number.
         //
      }
  }

  @Test
  public void test082()  throws Throwable  {
      String string0 = "a2[NC~>-.g\\<g8#,%e";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // a2[NC~>-.g\\<g8#,%e is not a valid number.
         //
      }
  }

  @Test
  public void test083()  throws Throwable  {
      String string0 = "Array cannot be empty.";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Array cannot be empty. is not a valid number.
         //
      }
  }

  @Test
  public void test084()  throws Throwable  {
      String string0 = "...";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test085()  throws Throwable  {
      String string0 = "-0X";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
      }
  }

  @Test
  public void test086()  throws Throwable  {
      String string0 = "0XQoe3&\\K";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Qoe3&\\K\"
         //
      }
  }

  @Test
  public void test087()  throws Throwable  {
      String string0 = "-0x0d";
      Integer integer0 = (Integer)NumberUtils.createNumber(string0);
      assertEquals((-13), (int)integer0);
  }

  @Test
  public void test088()  throws Throwable  {
      String string0 = "0xX=\\sdp>06$~*<l~D";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"X=\\sdp>06$~*<l~D\"
         //
      }
  }

  @Test
  public void test089() {}
//   @Test
//   public void test089()  throws Throwable  {
//       String string0 = "--O{N\"c0);>bR_lu6oUT!";
//       Number number0 = NumberUtils.createNumber(string0);
//       assertNull(number0);
//   }

  @Test
  public void test090()  throws Throwable  {
      String string0 = " ";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test091()  throws Throwable  {
      String string0 = null;
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test092()  throws Throwable  {
      String string0 = "The Array (ust not be null";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The Array (ust not be null is not a valid number.
         //
      }
  }

  @Test
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      String string0 = "-";
      short short0 = NumberUtils.toShort(string0, (short) byteArray0[5]);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((short)0, short0);
  }

  @Test
  public void test094()  throws Throwable  {
      byte byte0 = (byte)0;
      String string0 = null;
      byte byte1 = NumberUtils.toByte(string0, byte0);
      assertEquals((byte)0, byte1);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
  }

  @Test
  public void test095()  throws Throwable  {
      String string0 = null;
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
      
      double double0 = NumberUtils.toDouble(string0, (double) int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test096()  throws Throwable  {
      String string0 = null;
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test097()  throws Throwable  {
      String string0 = null;
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
  }

  @Test
  public void test098()  throws Throwable  {
      String string0 = "; or a Sun JVM: ";
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
  }

  @Test
  public void test099()  throws Throwable  {
      String string0 = "a2[NC~>-.g\\<g8#,%e";
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test100()  throws Throwable  {
      float float0 = (-464.967F);
      float float1 = NumberUtils.max(float0, float0, float0);
      assertEquals((-464.967F), float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
  }

  @Test
  public void test101()  throws Throwable  {
      String string0 = "0d";
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
  }

  @Test
  public void test102()  throws Throwable  {
      byte byte0 = (byte) (-117);
      float float0 = NumberUtils.min((float) byte0, (float) byte0, (float) byte0);
      assertEquals((-117.0F), float0, 0.01F);
  }

  @Test
  public void test103()  throws Throwable  {
      byte byte0 = (byte)22;
      double double0 = NumberUtils.min((double) byte0, (double) byte0, (double) byte0);
      assertEquals(22.0, double0, 0.01D);
  }

  @Test
  public void test104()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      assertNotNull(numberUtils0);
  }

  @Test
  public void test105()  throws Throwable  {
      short short0 = (short)1;
      double double0 = NumberUtils.max((double) short0, (double) short0, (double) short0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test106()  throws Throwable  {
      String string0 = "0d";
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }
}
