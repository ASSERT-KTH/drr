/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:58:40 GMT 2014
 */

package org.apache.commons.lang3.math;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;




import org.junit.runner.RunWith;


public class NumberUtilsEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      String string0 = "L";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test001()  throws Throwable  {
      String string0 = "6.d";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test002()  throws Throwable  {
      String string0 = ".";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test003()  throws Throwable  {
      String string0 = "7";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test004()  throws Throwable  {
      String string0 = "--v.dW&qrwLSmD";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test005()  throws Throwable  {
      String string0 = "+`|dCTg%VhAs";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test006()  throws Throwable  {
      String string0 = ".E~2_07RP+-";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test007()  throws Throwable  {
      String string0 = "...";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test008()  throws Throwable  {
      String string0 = "..";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test009()  throws Throwable  {
      String string0 = "9e>mU$$^(Vl*b\\kT6P";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test010()  throws Throwable  {
      String string0 = "0xa#<+ry f";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test011()  throws Throwable  {
      String string0 = "-0x30hwVH`3>|2ol";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test012()  throws Throwable  {
      String string0 = "-0xB,xw5`";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test013()  throws Throwable  {
      String string0 = "0x";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test014()  throws Throwable  {
      String string0 = "-0h";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test015()  throws Throwable  {
      String string0 = "0x7";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test017()  throws Throwable  {
      String string0 = "-";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test018()  throws Throwable  {
      String string0 = "0";
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test019()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byte byte0 = (byte)7;
      byteArray0[0] = byte0;
      byteArray0[1] = byteArray0[0];
      byte byte1 = NumberUtils.max(byteArray0[6], byteArray0[6], byteArray0[1]);
      assertArrayEquals(new byte[] {(byte)7, (byte)7, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((byte)7, byte1);
      assertTrue(byte1 == byte0);
  }

  @Test
  public void test021()  throws Throwable  {
      byte byte0 = (byte)70;
      byte byte1 = (byte) (-38);
      byte byte2 = NumberUtils.max(byte1, byte0, byte1);
      assertEquals((byte)70, byte2);
      assertFalse(byte0 == byte1);
      assertTrue(byte0 == byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte1 == byte2);
      assertFalse(byte2 == byte1);
      assertTrue(byte2 == byte0);
  }

  @Test
  public void test022()  throws Throwable  {
      byte byte0 = (byte)0;
      short short0 = (short)356;
      short short1 = NumberUtils.max((short) byte0, (short) byte0, short0);
      assertEquals((short)356, short1);
      assertTrue(short1 == short0);
      assertTrue(short0 == short1);
  }

  @Test
  public void test023()  throws Throwable  {
      byte byte0 = (byte)0;
      short short0 = (short)154;
      short short1 = NumberUtils.max((short) byte0, short0, short0);
      assertEquals((short)154, short1);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
  }

  @Test
  public void test024()  throws Throwable  {
      short short0 = (short)398;
      short short1 = NumberUtils.max(short0, short0, short0);
      assertEquals((short)398, short1);
      assertTrue(short1 == short0);
      assertTrue(short0 == short1);
      
      int int0 = Integer.MAX_VALUE;
      int int1 = NumberUtils.max((int) short1, (int) short0, int0);
      assertEquals(Integer.MAX_VALUE, int1);
      assertTrue(int0 == int1);
      assertTrue(short1 == short0);
      assertTrue(int1 == int0);
      assertTrue(short0 == short1);
  }

  @Test
  public void test025()  throws Throwable  {
      int int0 = 172;
      int int1 = 1048;
      int int2 = NumberUtils.max(int0, int1, int1);
      assertEquals(1048, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
  }

  @Test
  public void test026()  throws Throwable  {
      int[] intArray0 = new int[5];
      byte byte0 = (byte)17;
      long long0 = NumberUtils.max((long) intArray0[3], (long) intArray0[2], (long) byte0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(17L, long0);
  }

  @Test
  public void test027()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = (-479);
      intArray0[2] = int0;
      long long0 = NumberUtils.max((long) intArray0[2], (long) intArray0[3], (long) intArray0[2]);
      assertArrayEquals(new int[] {0, 0, (-479), 0, 0}, intArray0);
      assertEquals(0L, long0);
  }

  @Test
  public void test028()  throws Throwable  {
      String string0 = null;
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
      
      long long0 = NumberUtils.max((long) byte0, (long) byte0, (long) byte0);
      assertEquals(0L, long0);
  }

  @Test
  public void test029()  throws Throwable  {
      byte byte0 = (byte)70;
      byte byte1 = (byte) (-95);
      byte byte2 = NumberUtils.min(byte0, byte0, byte1);
      assertEquals((byte) (-95), byte2);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
  }

  @Test
  public void test030()  throws Throwable  {
      byte byte0 = (byte)70;
      byte byte1 = (byte) (-38);
      byte byte2 = NumberUtils.min(byte0, byte1, byte1);
      assertEquals((byte) (-38), byte2);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
  }

  @Test
  public void test031()  throws Throwable  {
      short short0 = (short)3733;
      byte byte0 = (byte) (-85);
      byte byte1 = (byte) (-63);
      short short1 = NumberUtils.min(short0, (short) byte1, (short) byte0);
      assertEquals((short) (-85), short1);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
  }

  @Test
  public void test032()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = (short)747;
      short short1 = NumberUtils.min(short0, shortArray0[0], shortArray0[0]);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals((short)0, short1);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
  }

  @Test
  public void test033()  throws Throwable  {
      short short0 = (short)0;
      short short1 = NumberUtils.min(short0, short0, short0);
      assertEquals((short)0, short1);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
  }

  @Test
  public void test034()  throws Throwable  {
      String string0 = "UXz";
      short short0 = (short)398;
      short short1 = NumberUtils.max(short0, short0, short0);
      assertEquals((short)398, short1);
      assertTrue(short1 == short0);
      assertTrue(short0 == short1);
      
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
      
      int int1 = NumberUtils.min((int) short1, (int) short1, int0);
      assertEquals(0, int1);
      assertTrue(short1 == short0);
      assertTrue(int0 == int1);
      assertTrue(short0 == short1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test035()  throws Throwable  {
      int int0 = 8185;
      int int1 = 1591;
      int int2 = NumberUtils.min(int0, int1, int1);
      assertEquals(1591, int2);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
  }

  @Test
  public void test036()  throws Throwable  {
      String string0 = "UXz";
      short short0 = (short)398;
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
      
      short short1 = NumberUtils.max(short0, short0, short0);
      assertEquals((short)398, short1);
      assertTrue(short1 == short0);
      assertTrue(short0 == short1);
      
      int[] intArray0 = new int[4];
      int int0 = Integer.MAX_VALUE;
      intArray0[0] = int0;
      long long1 = NumberUtils.min((long) intArray0[0], (long) short1, long0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 0, 0, 0}, intArray0);
      assertEquals(0L, long1);
      assertTrue(short1 == short0);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertTrue(short0 == short1);
  }

  @Test
  public void test037()  throws Throwable  {
      long long0 = 0L;
      long long1 = NumberUtils.min(long0, long0, long0);
      assertEquals(0L, long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
  }

  @Test
  public void test038()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float float0 = (-1652.5F);
      floatArray0[0] = float0;
      float float1 = NumberUtils.max(floatArray0);
      assertArrayEquals(new float[] {(-1652.5F), 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(float1 == float0);
  }

  @Test
  public void test039()  throws Throwable  {
      float[] floatArray0 = new float[8];
      float float0 = Float.NaN;
      floatArray0[3] = float0;
      float float1 = NumberUtils.max(floatArray0);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, Float.NaN, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
  }

  @Test
  public void test040()  throws Throwable  {
      float[] floatArray0 = null;
      // Undeclared exception!
      try {
        float float0 = NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test041()  throws Throwable  {
      int int0 = 3402;
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) int0;
      double double0 = NumberUtils.max(doubleArray0);
      assertArrayEquals(new double[] {0.0, 3402.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3402.0, double0, 0.01D);
  }

  @Test
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = Double.NaN;
      doubleArray0[4] = double0;
      double double1 = NumberUtils.max(doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, Double.NaN, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double0);
  }

  @Test
  public void test043()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try {
        double double0 = NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-42);
      byteArray0[0] = byte0;
      byte byte1 = NumberUtils.max(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-42), (byte)0}, byteArray0);
      assertEquals((byte)0, byte1);
      assertFalse(byte1 == byte0);
  }

  @Test
  public void test045()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try {
        byte byte0 = NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = NumberUtils.max(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test
  public void test047()  throws Throwable  {
      short[] shortArray0 = new short[10];
      short short0 = (short)3915;
      shortArray0[3] = short0;
      short short1 = NumberUtils.max(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)3915, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals((short)3915, short1);
      assertTrue(short1 == short0);
  }

  @Test
  public void test048()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test049()  throws Throwable  {
      short short0 = (short)3733;
      int[] intArray0 = new int[2];
      intArray0[1] = (int) short0;
      int int0 = NumberUtils.max(intArray0);
      assertArrayEquals(new int[] {0, 3733}, intArray0);
      assertEquals(3733, int0);
  }

  @Test
  public void test050()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test051()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = NumberUtils.max(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(0, int0);
  }

  @Test
  public void test052()  throws Throwable  {
      long long0 = (-545L);
      long[] longArray0 = new long[10];
      longArray0[0] = long0;
      long long1 = NumberUtils.max(longArray0);
      assertArrayEquals(new long[] {(-545L), 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(0L, long1);
      assertFalse(long1 == long0);
  }

  @Test
  public void test053()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try {
        long long0 = NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test054()  throws Throwable  {
      float[] floatArray0 = new float[9];
      byte[] byteArray0 = new byte[18];
      byte byte0 = (byte) (-22);
      byteArray0[8] = byte0;
      floatArray0[4] = (float) byteArray0[8];
      float float0 = NumberUtils.min(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, (-22.0F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-22.0F), float0, 0.01F);
  }

  @Test
  public void test055()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float float0 = Float.NaN;
      floatArray0[5] = float0;
      float float1 = NumberUtils.min(floatArray0);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, Float.NaN, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
  }

  @Test
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = (-1.0);
      doubleArray0[3] = double0;
      double double1 = NumberUtils.min(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1.0), double1, 0.01D);
      assertTrue(double1 == double0);
  }

  @Test
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = Double.NaN;
      doubleArray0[6] = double0;
      double double1 = NumberUtils.min(doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.NaN}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double0);
  }

  @Test
  public void test058()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try {
        double double0 = NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-37);
      byteArray0[5] = byte0;
      byte byte1 = NumberUtils.min(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-37), (byte)0, (byte)0}, byteArray0);
      assertEquals((byte) (-37), byte1);
      assertTrue(byte1 == byte0);
  }

  @Test
  public void test060()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try {
        byte byte0 = NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test061()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short short0 = (short) (-1023);
      shortArray0[8] = short0;
      short short1 = NumberUtils.min(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short) (-1023)}, shortArray0);
      assertEquals((short) (-1023), short1);
      assertTrue(short1 == short0);
  }

  @Test
  public void test062()  throws Throwable  {
      short short0 = (short)398;
      short short1 = NumberUtils.max(short0, short0, short0);
      assertEquals((short)398, short1);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) short1;
      int int0 = NumberUtils.min(intArray0);
      assertArrayEquals(new int[] {398, 0, 0, 0}, intArray0);
      assertEquals(0, int0);
  }

  @Test
  public void test063()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test064()  throws Throwable  {
      long[] longArray0 = new long[6];
      long long0 = (-27L);
      longArray0[1] = long0;
      long long1 = NumberUtils.min(longArray0);
      assertArrayEquals(new long[] {0L, (-27L), 0L, 0L, 0L, 0L}, longArray0);
      assertEquals((-27L), long1);
      assertTrue(long1 == long0);
  }

  @Test
  public void test065()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try {
        long long0 = NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test066()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try {
        BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test067()  throws Throwable  {
      String string0 = null;
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
      assertNull(bigDecimal0);
  }

  @Test
  public void test068()  throws Throwable  {
      String string0 = null;
      BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
      assertNull(bigInteger0);
  }

  @Test
  public void test069()  throws Throwable  {
      String string0 = "--0X is not a valid number.";
      // Undeclared exception!
      try {
        BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
      }
  }

  @Test
  public void test070()  throws Throwable  {
      String string0 = null;
      Long long0 = NumberUtils.createLong(string0);
  }

  @Test
  public void test071()  throws Throwable  {
      String string0 = "anJ4M~nx'";
      // Undeclared exception!
      try {
        Long long0 = NumberUtils.createLong(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"anJ4M~nx'\"
         //
      }
  }

  @Test
  public void test072()  throws Throwable  {
      String string0 = null;
      Integer integer0 = NumberUtils.createInteger(string0);
  }

  @Test
  public void test073()  throws Throwable  {
      String string0 = null;
      Double double0 = NumberUtils.createDouble(string0);
  }

  @Test
  public void test074()  throws Throwable  {
      String string0 = null;
      Float float0 = NumberUtils.createFloat(string0);
  }

  @Test
  public void test075()  throws Throwable  {
      String string0 = ".]+";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // .]+ is not a valid number.
         //
      }
  }

  @Test
  public void test076()  throws Throwable  {
      String string0 = "6.";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals(6.0F, (float)float0, 0.01F);
  }

  @Test
  public void test077()  throws Throwable  {
      String string0 = "7";
      Integer integer0 = (Integer)NumberUtils.createNumber(string0);
      assertEquals(7, (int)integer0);
  }

  @Test
  public void test078()  throws Throwable  {
      String string0 = "WiB(l?L";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // WiB(l?L is not a valid number.
         //
      }
  }

  @Test
  public void test079()  throws Throwable  {
      String string0 = "The Array must not be null";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The Array must not be null is not a valid number.
         //
      }
  }

  @Test
  public void test080()  throws Throwable  {
      String string0 = "0f";
      BigDecimal bigDecimal0 = (BigDecimal)NumberUtils.createNumber(string0);
      assertNotNull(bigDecimal0);
      assertEquals(0, bigDecimal0.shortValue());
      assertEquals(0, bigDecimal0.byteValue());
  }

  @Test
  public void test081()  throws Throwable  {
      String string0 = "6.d";
      Double double0 = (Double)NumberUtils.createNumber(string0);
      assertEquals(6.0, (double)double0, 0.01D);
  }

  @Test
  public void test082()  throws Throwable  {
      String string0 = "W.B(l?L";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // W.B(l?L is not a valid number.
         //
      }
  }

  @Test
  public void test083()  throws Throwable  {
      String string0 = "qG/0>eaF";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // qG/0>eaF is not a valid number.
         //
      }
  }

  @Test
  public void test084()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.math.NumberUtils";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // org.apache.commons.lang3.math.NumberUtils is not a valid number.
         //
      }
  }

  @Test
  public void test085()  throws Throwable  {
      String string0 = "0.";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test
  public void test086()  throws Throwable  {
      String string0 = "u2qb) EJRR%%xPOYehIZ";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // u2qb) EJRR%%xPOYehIZ is not a valid number.
         //
      }
  }

  @Test
  public void test087()  throws Throwable  {
      String string0 = "Minimum abbreviation;Width is 4";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test088()  throws Throwable  {
      String string0 = "S[h;U(oh d.xUQVW*e";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // S[h;U(oh d.xUQVW*e is not a valid number.
         //
      }
  }

  @Test
  public void test089()  throws Throwable  {
      String string0 = "0.jTf[^.#Gg";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0.jTf[^.#Gg is not a valid number.
         //
      }
  }

  @Test
  public void test090()  throws Throwable  {
      String string0 = "-0hwVH`3>|2ol";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -0hwVH`3>|2ol is not a valid number.
         //
      }
  }

  @Test
  public void test091()  throws Throwable  {
      String string0 = "-0X";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
      }
  }

  @Test
  public void test092()  throws Throwable  {
      String string0 = "0X is not a valid number.";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \" is not a valid number.\"
         //
      }
  }

  @Test
  public void test093()  throws Throwable  {
      String string0 = "-0x?F)Ps8di(0";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-?F)Ps8di(0\"
         //
      }
  }

  @Test
  public void test094()  throws Throwable  {
      String string0 = "0xorg.apache.commons.lang3.math.NumberUtils";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.apache.commons.lang3.math.NumberUtils\"
         //
      }
  }

  @Test
  public void test095() {}
//   @Test
//   public void test095()  throws Throwable  {
//       String string0 = "--";
//       Number number0 = NumberUtils.createNumber(string0);
//       assertNull(number0);
//   }

  @Test
  public void test096()  throws Throwable  {
      String string0 = "";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test097()  throws Throwable  {
      String string0 = null;
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test098()  throws Throwable  {
      String string0 = " is not a valid number.";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         //  is not a valid number. is not a valid number.
         //
      }
  }

  @Test
  public void test099()  throws Throwable  {
      String string0 = null;
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
  }

  @Test
  public void test100()  throws Throwable  {
      short short0 = (short)398;
      String string0 = null;
      double double0 = NumberUtils.toDouble(string0, (double) short0);
      assertEquals(398.0, double0, 0.01D);
  }

  @Test
  public void test101()  throws Throwable  {
      String string0 = "B,xw5`";
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
      
      String string1 = null;
      float float0 = NumberUtils.toFloat(string1, (float) short0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test102()  throws Throwable  {
      String string0 = null;
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
  }

  @Test
  public void test103()  throws Throwable  {
      String string0 = "--";
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test104()  throws Throwable  {
      long long0 = (-2740L);
      float float0 = NumberUtils.max((float) long0, (float) long0, (float) long0);
      assertEquals((-2740.0F), float0, 0.01F);
  }

  @Test
  public void test105()  throws Throwable  {
      String string0 = "-0X";
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
  }

  @Test
  public void test106()  throws Throwable  {
      String string0 = null;
      float[] floatArray0 = new float[2];
      long long0 = 1364L;
      long long1 = NumberUtils.toLong(string0, long0);
      assertEquals(1364L, long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      
      float float0 = NumberUtils.min(floatArray0[0], floatArray0[0], (float) long1);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
  }

  @Test
  public void test107()  throws Throwable  {
      double double0 = (-390.09);
      double double1 = NumberUtils.min(double0, double0, double0);
      assertEquals((-390.09), double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test108()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      assertNotNull(numberUtils0);
  }

  @Test
  public void test109()  throws Throwable  {
      short short0 = (short)398;
      short short1 = NumberUtils.max(short0, short0, short0);
      assertEquals((short)398, short1);
      assertTrue(short1 == short0);
      assertTrue(short0 == short1);
      
      double double0 = NumberUtils.max((double) short1, (double) short1, (double) short1);
      assertEquals(398.0, double0, 0.01D);
      assertTrue(short1 == short0);
      assertTrue(short0 == short1);
  }

  @Test
  public void test110()  throws Throwable  {
      String string0 = " is not a valid number.";
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }
}
