/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:41:35 GMT 2014
 */

package org.apache.commons.lang.builder;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Collection;
import java.util.LinkedList;
import org.apache.commons.lang.builder.EqualsBuilder;



import org.junit.runner.RunWith;


public class EqualsBuilderEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      boolean[] booleanArray0 = new boolean[26];
      boolean[] booleanArray1 = new boolean[8];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((Object) booleanArray1, (Object) booleanArray0);
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test
  public void test01()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = null;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(booleanArray1, booleanArray0);
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotNull(equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder0, equalsBuilder1);
  }

  @Test
  public void test02()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      boolean[] booleanArray0 = new boolean[14];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(booleanArray0, booleanArray0);
      assertEquals(true, equalsBuilder0.isEquals());
      assertEquals(true, equalsBuilder1.isEquals());
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertNotNull(equalsBuilder1);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = 1750;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1750, (int)integer0);
      
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      long[] longArray0 = new long[5];
      longArray0[4] = (long) integer0;
      long[] longArray1 = new long[5];
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(longArray0, longArray1);
      assertEquals(false, equalsBuilder0.isEquals());
      assertEquals(false, equalsBuilder1.isEquals());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 1750L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(equalsBuilder1);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertNotSame(longArray1, longArray0);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertNotSame(longArray0, longArray1);
      
      boolean[] booleanArray0 = new boolean[4];
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(booleanArray0, booleanArray0);
      assertEquals(false, equalsBuilder0.isEquals());
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder2.isEquals());
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 1750L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(equalsBuilder2);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder0, equalsBuilder2);
      assertNotSame(longArray1, longArray0);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder1, equalsBuilder2);
      assertSame(equalsBuilder2, equalsBuilder1);
      assertSame(equalsBuilder2, equalsBuilder0);
      assertNotSame(longArray0, longArray1);
  }

  @Test
  public void test04()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      float[] floatArray0 = new float[2];
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray0, floatArray1);
      assertEquals(true, equalsBuilder0.isEquals());
      assertEquals(true, equalsBuilder1.isEquals());
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotNull(equalsBuilder1);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertNotSame(floatArray1, floatArray0);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test
  public void test05()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      float[] floatArray0 = new float[6];
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray0, floatArray1);
      assertEquals(false, equalsBuilder0.isEquals());
      assertEquals(false, equalsBuilder1.isEquals());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(equalsBuilder1);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test
  public void test06()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      float[] floatArray0 = new float[9];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray0, floatArray0);
      assertEquals(true, equalsBuilder1.isEquals());
      assertEquals(true, equalsBuilder0.isEquals());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder0, equalsBuilder1);
  }

  @Test
  public void test07()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      int int0 = (-2989);
      long long0 = 576L;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(long0, (long) int0);
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder0, equalsBuilder1);
      
      float[] floatArray0 = new float[2];
      EqualsBuilder equalsBuilder2 = equalsBuilder0.append(floatArray0, floatArray0);
      assertEquals(false, equalsBuilder2.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(equalsBuilder2);
      assertSame(equalsBuilder2, equalsBuilder1);
      assertSame(equalsBuilder2, equalsBuilder0);
      assertSame(equalsBuilder0, equalsBuilder2);
      assertSame(equalsBuilder0, equalsBuilder1);
  }

  @Test
  public void test08()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      int int0 = 1;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) int0;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(doubleArray0, doubleArray1);
      assertEquals(false, equalsBuilder0.isEquals());
      assertEquals(false, equalsBuilder1.isEquals());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(equalsBuilder1);
      assertNotSame(doubleArray1, doubleArray0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test
  public void test09()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      double[] doubleArray0 = new double[14];
      double[] doubleArray1 = null;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(doubleArray0, doubleArray1);
      assertEquals(false, equalsBuilder0.isEquals());
      assertEquals(false, equalsBuilder1.isEquals());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(equalsBuilder1);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
  }

  @Test
  public void test10()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      double[] doubleArray0 = new double[2];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(doubleArray0, doubleArray0);
      assertEquals(true, equalsBuilder1.isEquals());
      assertEquals(true, equalsBuilder0.isEquals());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder0, equalsBuilder1);
  }

  @Test
  public void test11()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-95);
      double[] doubleArray0 = new double[8];
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      
      byteArray1[0] = byte0;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(byteArray0, byteArray1);
      assertEquals(false, equalsBuilder0.isEquals());
      assertEquals(false, equalsBuilder1.isEquals());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-95), (byte)0}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(equalsBuilder1);
      assertNotSame(byteArray0, byteArray1);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertNotSame(byteArray1, byteArray0);
      
      EqualsBuilder equalsBuilder2 = equalsBuilder0.append(doubleArray0, doubleArray0);
      assertEquals(false, equalsBuilder0.isEquals());
      assertEquals(false, equalsBuilder2.isEquals());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(equalsBuilder2);
      assertSame(equalsBuilder0, equalsBuilder2);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder2, equalsBuilder0);
      assertSame(equalsBuilder2, equalsBuilder1);
  }

  @Test
  public void test12()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(byteArray0, byteArray1);
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(equalsBuilder1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder0, equalsBuilder1);
  }

  @Test
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      byte[] byteArray1 = null;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(byteArray1, byteArray0);
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder0, equalsBuilder1);
  }

  @Test
  public void test14()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      byte[] byteArray0 = new byte[2];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(byteArray0, byteArray0);
      assertEquals(true, equalsBuilder1.isEquals());
      assertEquals(true, equalsBuilder0.isEquals());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder0, equalsBuilder1);
  }

  @Test
  public void test15()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      byte[] byteArray0 = new byte[2];
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((Object) doubleArray0, (Object) doubleArray1);
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertNotSame(doubleArray1, doubleArray0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertNotSame(doubleArray0, doubleArray1);
      
      EqualsBuilder equalsBuilder2 = equalsBuilder0.append(byteArray0, byteArray0);
      assertEquals(false, equalsBuilder0.isEquals());
      assertEquals(false, equalsBuilder2.isEquals());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(equalsBuilder2);
      assertSame(equalsBuilder0, equalsBuilder2);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder2, equalsBuilder1);
      assertSame(equalsBuilder2, equalsBuilder0);
  }

  @Test
  public void test16()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      char[] charArray0 = new char[3];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(charArray0, charArray0);
      assertEquals(true, equalsBuilder1.isEquals());
      assertEquals(true, equalsBuilder0.isEquals());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder0, equalsBuilder1);
  }

  @Test
  public void test17()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      int int0 = (-2989);
      long long0 = 576L;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(long0, (long) int0);
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder0, equalsBuilder1);
      
      char[] charArray0 = new char[9];
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(charArray0, charArray0);
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder2.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(equalsBuilder2);
      assertSame(equalsBuilder1, equalsBuilder2);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder2, equalsBuilder1);
      assertSame(equalsBuilder2, equalsBuilder0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder0, equalsBuilder2);
  }

  @Test
  public void test18()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      short[] shortArray0 = new short[9];
      short[] shortArray1 = new short[10];
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(shortArray0, shortArray1);
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(equalsBuilder1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder0, equalsBuilder1);
  }

  @Test
  public void test19()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      short[] shortArray0 = new short[4];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(shortArray0, shortArray0);
      assertEquals(true, equalsBuilder0.isEquals());
      assertEquals(true, equalsBuilder1.isEquals());
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotNull(equalsBuilder1);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
  }

  @Test
  public void test20()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      int int0 = (-2989);
      long long0 = 576L;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(long0, (long) int0);
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder0, equalsBuilder1);
      
      short[] shortArray0 = new short[9];
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(shortArray0, shortArray0);
      assertEquals(false, equalsBuilder2.isEquals());
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotNull(equalsBuilder2);
      assertSame(equalsBuilder2, equalsBuilder1);
      assertSame(equalsBuilder2, equalsBuilder0);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder1, equalsBuilder2);
      assertSame(equalsBuilder0, equalsBuilder2);
      assertSame(equalsBuilder0, equalsBuilder1);
  }

  @Test
  public void test21()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      int[] intArray0 = new int[15];
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(intArray0, intArray1);
      assertEquals(false, equalsBuilder0.isEquals());
      assertEquals(false, equalsBuilder1.isEquals());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(equalsBuilder1);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test
  public void test22()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      int[] intArray0 = new int[8];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(intArray0, intArray0);
      assertEquals(true, equalsBuilder1.isEquals());
      assertEquals(true, equalsBuilder0.isEquals());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder0, equalsBuilder1);
  }

  @Test
  public void test23()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      int[] intArray0 = new int[5];
      int int0 = 1291;
      intArray0[3] = int0;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((Object) intArray0, (Object) intArray1);
      assertEquals(false, equalsBuilder0.isEquals());
      assertEquals(false, equalsBuilder1.isEquals());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 1291, 0}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(equalsBuilder1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
      
      EqualsBuilder equalsBuilder2 = equalsBuilder0.append(intArray0, intArray1);
      assertEquals(false, equalsBuilder2.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 1291, 0}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(equalsBuilder2);
      assertNotSame(intArray1, intArray0);
      assertSame(equalsBuilder2, equalsBuilder1);
      assertSame(equalsBuilder2, equalsBuilder0);
      assertNotSame(intArray0, intArray1);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder0, equalsBuilder2);
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = 1750;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1750, (int)integer0);
      
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      long[] longArray0 = new long[5];
      long[] longArray1 = new long[5];
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      
      longArray1[2] = (long) integer0;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(longArray0, longArray1);
      assertEquals(false, equalsBuilder0.isEquals());
      assertEquals(false, equalsBuilder1.isEquals());
      assertArrayEquals(new long[] {0L, 0L, 1750L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(equalsBuilder1);
      assertNotSame(longArray1, longArray0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertNotSame(longArray0, longArray1);
  }

  @Test
  public void test25()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      long[] longArray0 = new long[3];
      long[] longArray1 = null;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(longArray0, longArray1);
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertNotNull(equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder0, equalsBuilder1);
  }

  @Test
  public void test26()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      long[] longArray0 = new long[5];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(longArray0, longArray0);
      assertEquals(true, equalsBuilder1.isEquals());
      assertEquals(true, equalsBuilder0.isEquals());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder0, equalsBuilder1);
  }

  @Test
  public void test27()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      int int0 = (-2989);
      long long0 = 576L;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(long0, (long) int0);
      assertEquals(false, equalsBuilder0.isEquals());
      assertEquals(false, equalsBuilder1.isEquals());
      assertNotNull(equalsBuilder1);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
      
      long[] longArray0 = new long[9];
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(longArray0, longArray0);
      assertEquals(false, equalsBuilder0.isEquals());
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder2.isEquals());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(equalsBuilder2);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder0, equalsBuilder2);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder1, equalsBuilder2);
      assertSame(equalsBuilder2, equalsBuilder1);
      assertSame(equalsBuilder2, equalsBuilder0);
  }

  @Test
  public void test28()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      Object[] objectArray0 = new Object[8];
      Object[] objectArray1 = new Object[8];
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(objectArray0, objectArray1);
      assertEquals(true, equalsBuilder1.isEquals());
      assertEquals(true, equalsBuilder0.isEquals());
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(equalsBuilder1);
      assertNotSame(objectArray0, objectArray1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertNotSame(objectArray1, objectArray0);
      assertSame(equalsBuilder0, equalsBuilder1);
  }

  @Test
  public void test29()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      Object[] objectArray0 = new Object[2];
      Object[] objectArray1 = new Object[17];
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(objectArray0, objectArray1);
      assertEquals(false, equalsBuilder0.isEquals());
      assertEquals(false, equalsBuilder1.isEquals());
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertNotNull(equalsBuilder1);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertSame(equalsBuilder1, equalsBuilder0);
  }

  @Test
  public void test30()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      Object[] objectArray0 = new Object[22];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(objectArray0, objectArray0);
      assertEquals(true, equalsBuilder0.isEquals());
      assertEquals(true, equalsBuilder1.isEquals());
      assertNotNull(equalsBuilder1);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
  }

  @Test
  public void test31()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      int int0 = 77;
      int int1 = 0;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(int0, int1);
      assertEquals(false, equalsBuilder0.isEquals());
      assertEquals(false, equalsBuilder1.isEquals());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(equalsBuilder1);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
      
      Object[] objectArray0 = new Object[3];
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(objectArray0, objectArray0);
      assertEquals(false, equalsBuilder2.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertEquals(false, equalsBuilder1.isEquals());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(equalsBuilder2);
      assertSame(equalsBuilder2, equalsBuilder0);
      assertSame(equalsBuilder2, equalsBuilder1);
      assertSame(equalsBuilder0, equalsBuilder2);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder1, equalsBuilder2);
  }

  @Test
  public void test32()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      boolean boolean0 = true;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = boolean0;
      boolean[] booleanArray1 = new boolean[8];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((Object) booleanArray1, (Object) booleanArray0);
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotNull(equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertNotSame(booleanArray1, booleanArray0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test
  public void test33()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-95);
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      
      byteArray1[0] = byte0;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(byteArray0, byteArray1);
      assertEquals(false, equalsBuilder0.isEquals());
      assertEquals(false, equalsBuilder1.isEquals());
      assertArrayEquals(new byte[] {(byte) (-95), (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(equalsBuilder1);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertSame(equalsBuilder1, equalsBuilder0);
      
      boolean boolean0 = true;
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(boolean0, boolean0);
      assertEquals(false, equalsBuilder0.isEquals());
      assertEquals(false, equalsBuilder2.isEquals());
      assertEquals(false, equalsBuilder1.isEquals());
      assertArrayEquals(new byte[] {(byte) (-95), (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(equalsBuilder2);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder0, equalsBuilder2);
      assertNotSame(byteArray1, byteArray0);
      assertSame(equalsBuilder2, equalsBuilder0);
      assertSame(equalsBuilder2, equalsBuilder1);
      assertNotSame(byteArray0, byteArray1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder1, equalsBuilder2);
  }

  @Test
  public void test34()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      int[] intArray0 = new int[5];
      int int0 = 1291;
      intArray0[3] = int0;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((Object) intArray0, (Object) intArray1);
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 1291, 0}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(equalsBuilder1);
      assertNotSame(intArray1, intArray0);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertNotSame(intArray0, intArray1);
      
      EqualsBuilder equalsBuilder2 = equalsBuilder0.append((float) intArray0[1], (float) intArray1[2]);
      assertEquals(false, equalsBuilder2.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 1291, 0}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(equalsBuilder2);
      assertSame(equalsBuilder2, equalsBuilder1);
      assertSame(equalsBuilder2, equalsBuilder0);
      assertNotSame(intArray1, intArray0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder0, equalsBuilder2);
      assertNotSame(intArray0, intArray1);
  }

  @Test
  public void test35()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      short[] shortArray0 = new short[3];
      short short0 = (short)0;
      short short1 = (short)98;
      shortArray0[2] = short1;
      short[] shortArray1 = new short[3];
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(shortArray0, shortArray1);
      assertEquals(false, equalsBuilder0.isEquals());
      assertEquals(false, equalsBuilder1.isEquals());
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)98}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotNull(equalsBuilder1);
      assertNotSame(shortArray1, shortArray0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertNotSame(shortArray0, shortArray1);
      
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((double) short0, (double) short1);
      assertEquals(false, equalsBuilder0.isEquals());
      assertEquals(false, equalsBuilder2.isEquals());
      assertEquals(false, equalsBuilder1.isEquals());
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)98}, shortArray0);
      assertFalse(short0 == short1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(short1 == short0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotNull(equalsBuilder2);
      assertNotSame(shortArray1, shortArray0);
      assertSame(equalsBuilder0, equalsBuilder2);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder2, equalsBuilder1);
      assertSame(equalsBuilder2, equalsBuilder0);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder1, equalsBuilder2);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test
  public void test36()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(byteArray0, byteArray1);
      assertEquals(true, equalsBuilder0.isEquals());
      assertEquals(true, equalsBuilder1.isEquals());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(equalsBuilder1);
      assertNotSame(byteArray0, byteArray1);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertNotSame(byteArray1, byteArray0);
      assertSame(equalsBuilder1, equalsBuilder0);
  }

  @Test
  public void test37()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      int int0 = 77;
      int int1 = 0;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(int0, int1);
      assertEquals(false, equalsBuilder0.isEquals());
      assertEquals(false, equalsBuilder1.isEquals());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(equalsBuilder1);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
      
      byte byte0 = (byte) (-53);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(byte0, byte0);
      assertEquals(false, equalsBuilder0.isEquals());
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder2.isEquals());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(equalsBuilder2);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder0, equalsBuilder2);
      assertSame(equalsBuilder1, equalsBuilder2);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder2, equalsBuilder1);
      assertSame(equalsBuilder2, equalsBuilder0);
  }

  @Test
  public void test38()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = ", Length: ";
      String string1 = "R(vd0M>HXA";
      assertNotSame(string1, string0);
      
      Class<String> class0 = String.class;
      boolean boolean1 = EqualsBuilder.reflectionEquals((Object) string1, (Object) string0, boolean0, (Class) class0);
      assertFalse(boolean0 == boolean1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(boolean1);
  }

  @Test
  public void test39()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      int int0 = (-2989);
      long long0 = 576L;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(long0, (long) int0);
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder0, equalsBuilder1);
      
      char[] charArray0 = new char[9];
      char char0 = '~';
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(charArray0[5], char0);
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder2.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(equalsBuilder2);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder1, equalsBuilder2);
      assertSame(equalsBuilder2, equalsBuilder1);
      assertSame(equalsBuilder2, equalsBuilder0);
      assertSame(equalsBuilder0, equalsBuilder2);
      assertSame(equalsBuilder0, equalsBuilder1);
  }

  @Test
  public void test40()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      char[] charArray0 = new char[1];
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(charArray0, charArray1);
      assertEquals(true, equalsBuilder1.isEquals());
      assertEquals(true, equalsBuilder0.isEquals());
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotNull(equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertNotSame(charArray1, charArray0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertNotSame(charArray0, charArray1);
  }

  @Test
  public void test41()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      byte byte0 = (byte) (-112);
      short[] shortArray0 = new short[7];
      shortArray0[4] = (short) byte0;
      short[] shortArray1 = new short[7];
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(shortArray0, shortArray1);
      assertEquals(false, equalsBuilder0.isEquals());
      assertEquals(false, equalsBuilder1.isEquals());
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short) (-112), (short)0, (short)0}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotNull(equalsBuilder1);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test
  public void test42()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      int int0 = (-2989);
      long long0 = 576L;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(long0, (long) int0);
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder0, equalsBuilder1);
      
      short short0 = (short)1;
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(short0, short0);
      assertEquals(false, equalsBuilder2.isEquals());
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder2);
      assertSame(equalsBuilder2, equalsBuilder1);
      assertSame(equalsBuilder2, equalsBuilder0);
      assertSame(equalsBuilder1, equalsBuilder2);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder0, equalsBuilder2);
  }

  @Test
  public void test43()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      float[] floatArray0 = new float[5];
      float float0 = (-852.8141F);
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      
      floatArray1[1] = float0;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray0, floatArray1);
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-852.8141F), 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(equalsBuilder1);
      assertNotSame(floatArray0, floatArray1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertNotSame(floatArray1, floatArray0);
      assertSame(equalsBuilder0, equalsBuilder1);
  }

  @Test
  public void test44()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      boolean[] booleanArray0 = new boolean[5];
      boolean[] booleanArray1 = null;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(booleanArray0, booleanArray1);
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertNotNull(equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder0, equalsBuilder1);
      
      short[] shortArray0 = new short[9];
      EqualsBuilder equalsBuilder2 = equalsBuilder0.append((int) shortArray0[6], (int) shortArray0[6]);
      assertEquals(false, equalsBuilder2.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotNull(equalsBuilder2);
      assertSame(equalsBuilder2, equalsBuilder1);
      assertSame(equalsBuilder2, equalsBuilder0);
      assertSame(equalsBuilder0, equalsBuilder2);
      assertSame(equalsBuilder0, equalsBuilder1);
  }

  @Test
  public void test45()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-95);
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      
      byteArray1[0] = byte0;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(byteArray0, byteArray1);
      assertEquals(false, equalsBuilder0.isEquals());
      assertEquals(false, equalsBuilder1.isEquals());
      assertArrayEquals(new byte[] {(byte) (-95), (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(equalsBuilder1);
      assertNotSame(byteArray1, byteArray0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertNotSame(byteArray0, byteArray1);
      assertSame(equalsBuilder1, equalsBuilder0);
      
      EqualsBuilder equalsBuilder2 = equalsBuilder0.append((long) byteArray1[0], (long) byte0);
      assertEquals(false, equalsBuilder0.isEquals());
      assertEquals(false, equalsBuilder2.isEquals());
      assertArrayEquals(new byte[] {(byte) (-95), (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(equalsBuilder2);
      assertNotSame(byteArray1, byteArray0);
      assertSame(equalsBuilder0, equalsBuilder2);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder2, equalsBuilder1);
      assertSame(equalsBuilder2, equalsBuilder0);
  }

  @Test
  public void test46()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((Object) doubleArray0, (Object) doubleArray1);
      assertEquals(true, equalsBuilder0.isEquals());
      assertEquals(true, equalsBuilder1.isEquals());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(equalsBuilder1);
      assertNotSame(doubleArray1, doubleArray0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test
  public void test47()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      boolean[] booleanArray0 = new boolean[8];
      boolean[] booleanArray1 = new boolean[8];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((Object) booleanArray1, (Object) booleanArray0);
      assertEquals(true, equalsBuilder0.isEquals());
      assertEquals(true, equalsBuilder1.isEquals());
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotNull(equalsBuilder1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
  }

  @Test
  public void test48()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      int[] intArray0 = new int[5];
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((Object) intArray0, (Object) intArray1);
      assertEquals(true, equalsBuilder1.isEquals());
      assertEquals(true, equalsBuilder0.isEquals());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(equalsBuilder1);
      assertNotSame(intArray0, intArray1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertNotSame(intArray1, intArray0);
      assertSame(equalsBuilder0, equalsBuilder1);
  }

  @Test
  public void test49()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      boolean[] booleanArray0 = new boolean[14];
      Object[] objectArray0 = new Object[22];
      objectArray0[7] = (Object) booleanArray0;
      assertNotNull(objectArray0[7]);
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(objectArray0[7], (Object) equalsBuilder0);
      assertEquals(false, equalsBuilder0.isEquals());
      assertEquals(false, equalsBuilder1.isEquals());
      assertNotNull(equalsBuilder1);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
  }

  @Test
  public void test50()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      byte byte0 = (byte)12;
      BigDecimal bigDecimal0 = new BigDecimal((int) byte0);
      assertEquals(12, bigDecimal0.byteValue());
      assertEquals(12, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertEquals(1, bigDecimal1.byteValue());
      assertEquals(1, bigDecimal1.shortValue());
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((Object) bigDecimal1, (Object) bigDecimal0);
      assertEquals(false, equalsBuilder0.isEquals());
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(12, bigDecimal0.byteValue());
      assertEquals(12, bigDecimal0.shortValue());
      assertEquals(1, bigDecimal1.byteValue());
      assertEquals(1, bigDecimal1.shortValue());
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(equalsBuilder1);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
  }

  @Test
  public void test51()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      byte byte0 = (byte) (-41);
      BigDecimal bigDecimal0 = new BigDecimal((int) byte0);
      assertEquals(-41, bigDecimal0.shortValue());
      assertEquals(-41, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = bigDecimal0.stripTrailingZeros();
      assertEquals(-41, bigDecimal1.byteValue());
      assertEquals(-41, bigDecimal1.shortValue());
      assertEquals(-41, bigDecimal0.shortValue());
      assertEquals(-41, bigDecimal0.byteValue());
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal0, bigDecimal1);
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((Object) bigDecimal1, (Object) bigDecimal0);
      assertEquals(true, equalsBuilder0.isEquals());
      assertEquals(-41, bigDecimal1.byteValue());
      assertEquals(-41, bigDecimal1.shortValue());
      assertEquals(-41, bigDecimal0.shortValue());
      assertEquals(-41, bigDecimal0.byteValue());
      assertEquals(true, equalsBuilder1.isEquals());
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertNotNull(equalsBuilder1);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(equalsBuilder1, equalsBuilder0);
  }

  @Test
  public void test52()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      Object[] objectArray0 = new Object[7];
      Object[] objectArray1 = new Object[7];
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      
      objectArray0[1] = (Object) equalsBuilder0;
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(objectArray0[1]);
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(objectArray0, objectArray1);
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertNotSame(objectArray0, objectArray1);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertNotSame(objectArray1, objectArray0);
  }

  @Test
  public void test53()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      long[] longArray0 = new long[8];
      long[] longArray1 = new long[7];
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(longArray0, longArray1);
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertNotSame(longArray1, longArray0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertNotSame(longArray0, longArray1);
      
      int int0 = 36;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(36, (int)integer0);
      
      EqualsBuilder equalsBuilder2 = equalsBuilder0.append((Object) integer0, (Object) integer0);
      assertEquals(false, equalsBuilder2.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(equalsBuilder2);
      assertSame(equalsBuilder2, equalsBuilder1);
      assertSame(equalsBuilder2, equalsBuilder0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder0, equalsBuilder2);
  }

  @Test
  public void test54()  throws Throwable  {
      boolean boolean0 = true;
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((Object) doubleArray0, (Object) doubleArray1);
      assertEquals(false, equalsBuilder0.isEquals());
      assertEquals(false, equalsBuilder1.isEquals());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(equalsBuilder1);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertSame(equalsBuilder1, equalsBuilder0);
      
      EqualsBuilder equalsBuilder2 = equalsBuilder0.appendSuper(boolean0);
      assertEquals(false, equalsBuilder0.isEquals());
      assertEquals(false, equalsBuilder2.isEquals());
      assertNotNull(equalsBuilder2);
      assertSame(equalsBuilder0, equalsBuilder2);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder2, equalsBuilder0);
      assertSame(equalsBuilder2, equalsBuilder1);
  }

  @Test
  public void test55()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      boolean boolean0 = true;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.appendSuper(boolean0);
      assertEquals(true, equalsBuilder0.isEquals());
      assertEquals(true, equalsBuilder1.isEquals());
      assertNotNull(equalsBuilder1);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
  }

  @Test
  public void test56()  throws Throwable  {
      int int0 = (-4921);
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-4921), (int)integer0);
      
      Integer integer1 = new Integer(int0);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotSame(integer1, integer0);
      assertEquals((-4921), (int)integer1);
      
      boolean boolean0 = EqualsBuilder.reflectionEquals((Object) integer0, (Object) integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)int0));
      assertNotSame(integer1, integer0);
      assertNotSame(integer0, integer1);
      assertTrue(boolean0);
  }

  @Test
  public void test57()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals(1, bigDecimal0.byteValue());
      assertEquals(1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      int int0 = 1651;
      BigDecimal bigDecimal1 = new BigDecimal(int0);
      assertEquals(115, bigDecimal1.byteValue());
      assertEquals(1651, bigDecimal1.shortValue());
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      
      String[] stringArray0 = new String[6];
      String string0 = "";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = stringArray0[1];
      assertNotNull(stringArray0[2]);
      
      String string1 = "ZERO_SCALED_BY";
      assertNotSame(string1, string0);
      
      stringArray0[3] = string1;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = string1;
      assertNotNull(stringArray0[5]);
      
      boolean boolean0 = EqualsBuilder.reflectionEquals((Object) bigDecimal1, (Object) bigDecimal0, stringArray0);
      assertEquals(115, bigDecimal1.byteValue());
      assertEquals(1651, bigDecimal1.shortValue());
      assertEquals(1, bigDecimal0.byteValue());
      assertEquals(1, bigDecimal0.shortValue());
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertFalse(boolean0);
  }

  @Test
  public void test58()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = ", Length: ";
      String string1 = "g s,0\"=wR?IyFz";
      assertNotSame(string1, string0);
      
      Class<String> class0 = String.class;
      boolean boolean1 = EqualsBuilder.reflectionEquals((Object) string1, (Object) string0, boolean0, (Class) class0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean1 == boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0 == boolean1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(boolean1);
  }

  @Test
  public void test59()  throws Throwable  {
      boolean boolean0 = true;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = EqualsBuilder.reflectionEquals(object0, (Object) linkedList0, boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
  }

  @Test
  public void test60()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = null;
      boolean boolean0 = EqualsBuilder.reflectionEquals(object0, object1);
      assertFalse(boolean0);
  }

  @Test
  public void test61()  throws Throwable  {
      String string0 = null;
      short short0 = (short)0;
      Class<Object> class0 = Object.class;
      Integer integer0 = new Integer((int) short0);
      assertEquals(0, (int)integer0);
      
      boolean boolean0 = false;
      boolean boolean1 = EqualsBuilder.reflectionEquals((Object) string0, (Object) integer0, boolean0, (Class) class0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean1);
  }

  @Test
  public void test62()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      float float0 = 44.08698F;
      boolean boolean0 = true;
      boolean boolean1 = EqualsBuilder.reflectionEquals((Object) equalsBuilder0, (Object) float0, boolean0);
      assertEquals(true, equalsBuilder0.isEquals());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
  }

  @Test
  public void test63()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertEquals(true, equalsBuilder0.isEquals());
      assertNotNull(equalsBuilder0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      boolean boolean0 = EqualsBuilder.reflectionEquals((Object) equalsBuilder0, object0, (Collection) linkedList0);
      assertEquals(true, equalsBuilder0.isEquals());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertFalse(boolean0);
  }
}
