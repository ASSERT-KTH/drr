/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:55:16 GMT 2014
 */

package org.apache.commons.lang.math;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.lang.math.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockArithmeticException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;


public class FractionEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      float float0 = fraction0.floatValue();
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.6F, float0, 0.01F);
      
      Fraction fraction1 = Fraction.getFraction((double) float0);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.6F, fraction1.floatValue(), 0.01F);
      assertEquals(0.6, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getNumerator());
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
      assertTrue(fraction1.equals((Object)fraction0));
      assertTrue(fraction0.equals((Object)fraction1));
      
      String string0 = fraction1.toProperString();
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.6F, fraction1.floatValue(), 0.01F);
      assertEquals(0.6, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getNumerator());
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(string0);
      assertEquals("3/5", string0);
      assertTrue(fraction1.equals((Object)fraction0));
      assertTrue(fraction0.equals((Object)fraction1));
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 294;
      Integer integer0 = new Integer(int0);
      assertEquals(294, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Fraction fraction0 = Fraction.getFraction((double) integer0);
      assertEquals(294, fraction0.getProperWhole());
      assertEquals(294, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(294.0F, fraction0.floatValue(), 0.01F);
      assertEquals(294, fraction0.shortValue());
      assertEquals(294L, fraction0.longValue());
      assertEquals(294.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(38, fraction0.byteValue());
      assertEquals(294, fraction0.intValue());
      assertNotNull(fraction0);
      assertTrue(integer0.equals((Object)int0));
      
      String string0 = fraction0.toProperString();
      assertEquals(294, fraction0.getProperWhole());
      assertEquals(294, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(294.0F, fraction0.floatValue(), 0.01F);
      assertEquals(294, fraction0.shortValue());
      assertEquals(294L, fraction0.longValue());
      assertEquals(294.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(38, fraction0.byteValue());
      assertEquals(294, fraction0.intValue());
      assertNotNull(string0);
      assertEquals("294", string0);
      assertTrue(integer0.equals((Object)int0));
  }

  @Test
  public void test02()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.negate();
      assertEquals(-1, fraction1.intValue());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01D);
      assertEquals((-1L), fraction1.longValue());
      assertEquals(-1, fraction1.shortValue());
      assertEquals(-1, fraction1.byteValue());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(-1, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(-1, fraction1.getProperWhole());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      
      String string0 = fraction1.toProperString();
      assertEquals(-1, fraction1.intValue());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01D);
      assertEquals((-1L), fraction1.longValue());
      assertEquals(-1, fraction1.shortValue());
      assertEquals(-1, fraction1.byteValue());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(-1, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(-1, fraction1.getProperWhole());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(string0);
      assertEquals("-1", string0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = 577;
      Fraction fraction0 = Fraction.getReducedFraction(int0, int0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      String string0 = fraction0.toProperString();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertNotNull(string0);
      assertEquals("1", string0);
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = 0;
      int int1 = 4480;
      Fraction fraction0 = Fraction.getFraction(int0, int1);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(4480, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      String string0 = fraction0.toProperString();
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(4480, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertNotNull(string0);
      assertEquals("0", string0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test05()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      String string0 = fraction0.toString();
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertNotNull(string0);
      assertEquals("3/4", string0);
  }

  @Test
  public void test06()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ZERO;
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      int int0 = fraction0.compareTo((Object) fraction1);
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(1, int0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test
  public void test07()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      float float0 = fraction0.floatValue();
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.6F, float0, 0.01F);
      
      Fraction fraction1 = Fraction.getFraction((double) float0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.6, fraction1.doubleValue(), 0.01D);
      assertEquals(3, fraction1.getNumerator());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.6F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.shortValue());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertTrue(fraction0.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction0));
      
      int int0 = fraction0.compareTo((Object) fraction1);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.6, fraction1.doubleValue(), 0.01D);
      assertEquals(3, fraction1.getNumerator());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.6F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.shortValue());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(0, int0);
      assertTrue(fraction0.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test
  public void test08()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ONE;
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getNumerator());
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      int int0 = fraction0.compareTo((Object) fraction1);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getNumerator());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals((-1), int0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test
  public void test09()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ONE_HALF;
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      int int0 = fraction0.compareTo((Object) fraction1);
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(0, int0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
  }

  @Test
  public void test10()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction0);
      
      float float0 = fraction0.floatValue();
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.6F, float0, 0.01F);
      
      Fraction fraction1 = Fraction.getFraction((double) float0);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.6F, fraction1.floatValue(), 0.01F);
      assertEquals(0.6, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.shortValue());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
      assertTrue(fraction1.equals((Object)fraction0));
      assertTrue(fraction0.equals((Object)fraction1));
      
      boolean boolean0 = fraction1.equals((Object) fraction0);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.6F, fraction1.floatValue(), 0.01F);
      assertEquals(0.6, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.shortValue());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertTrue(boolean0);
      assertTrue(fraction1.equals((Object)fraction0));
      assertTrue(fraction0.equals((Object)fraction1));
  }

  @Test
  public void test11()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ONE_HALF;
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      boolean boolean0 = fraction1.equals((Object) fraction0);
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertFalse(boolean0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
  }

  @Test
  public void test12()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      
      int int0 = 294;
      Integer integer0 = new Integer(int0);
      assertEquals(294, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      boolean boolean0 = fraction0.equals((Object) integer0);
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperNumerator());
      assertFalse(boolean0);
      assertTrue(integer0.equals((Object)int0));
  }

  @Test
  public void test13()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.divideBy(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The fraction to divide by must not be zero
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.divideBy(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      double double0 = (-1.0);
      Fraction fraction0 = Fraction.getFraction(double0);
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.getProperWhole());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1L), fraction0.longValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ZERO;
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.shortValue());
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction0.multiplyBy(fraction1);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0, fraction2.shortValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.byteValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.getProperWhole());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1L), fraction0.longValue());
      assertNotSame(fraction1, fraction0);
      assertSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction0);
      assertSame(fraction2, fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotNull(fraction2);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
  }

  @Test
  public void test16()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(2, fraction1.getNumerator());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction0.divideBy(fraction1);
      assertEquals(0, fraction2.shortValue());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0, fraction2.intValue());
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(2, fraction1.getNumerator());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertNotSame(fraction2, fraction1);
      assertSame(fraction2, fraction0);
      assertNotSame(fraction0, fraction1);
      assertSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction2);
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test
  public void test17()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.multiplyBy(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      double double0 = 2.1474836458316755E9;
      Fraction fraction0 = Fraction.getFraction(double0);
      assertEquals(87, fraction0.getProperNumerator());
      assertEquals(1643061, fraction0.intValue());
      assertEquals(1643061.066564652, fraction0.doubleValue(), 0.01D);
      assertEquals(1643061L, fraction0.longValue());
      assertEquals(4661, fraction0.shortValue());
      assertEquals(2147480814, fraction0.getNumerator());
      assertEquals(1307, fraction0.getDenominator());
      assertEquals(1643061.1F, fraction0.floatValue(), 0.01F);
      assertEquals(53, fraction0.byteValue());
      assertEquals(1643061, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.add(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: numerator too large after multiply
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.intValue());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(0L, fraction1.longValue());
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction1.add(fraction0);
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.intValue());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0, fraction2.shortValue());
      assertEquals(2, fraction2.getProperNumerator());
      assertEquals(4, fraction2.getDenominator());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0.5F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.intValue());
      assertEquals(2, fraction2.getNumerator());
      assertEquals(0.5, fraction2.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      assertSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction2);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
  }

  @Test
  public void test20()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
      assertNotNull(fraction1);
  }

  @Test
  public void test21()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.subtract(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      double double0 = 2.147483647E9;
      Fraction fraction0 = Fraction.getFraction(double0);
      assertEquals(2147483647, fraction0.intValue());
      assertEquals(2147483647, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2147483647, fraction0.getProperWhole());
      assertEquals(2.14748365E9F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(2.147483647E9, fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.byteValue());
      assertEquals(2147483647L, fraction0.longValue());
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.add(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.shortValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      int int0 = 109;
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.pow(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mulPos
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      double double0 = (-1384.2335);
      Fraction fraction0 = Fraction.getFraction(double0);
      assertEquals(-104, fraction0.byteValue());
      assertEquals(467, fraction0.getProperNumerator());
      assertEquals(2000, fraction0.getDenominator());
      assertEquals(-2768467, fraction0.getNumerator());
      assertEquals(-1384, fraction0.getProperWhole());
      assertEquals(-1384, fraction0.shortValue());
      assertEquals((-1384.2335F), fraction0.floatValue(), 0.01F);
      assertEquals((-1384L), fraction0.longValue());
      assertEquals(-1384, fraction0.intValue());
      assertEquals((-1384.2335), fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      int int0 = 691;
      Fraction fraction1 = Fraction.getFraction(int0, int0, int0);
      assertEquals(692.0F, fraction1.floatValue(), 0.01F);
      assertEquals(691, fraction1.getDenominator());
      assertEquals(692.0, fraction1.doubleValue(), 0.01D);
      assertEquals(692, fraction1.intValue());
      assertEquals(-76, fraction1.byteValue());
      assertEquals(692, fraction1.getProperWhole());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(478172, fraction1.getNumerator());
      assertEquals(692L, fraction1.longValue());
      assertEquals(692, fraction1.shortValue());
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.multiplyBy(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.FOUR_FIFTHS;
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(4, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(4, fraction1.getProperNumerator());
      assertEquals(0.8F, fraction1.floatValue(), 0.01F);
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.8, fraction1.doubleValue(), 0.01D);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction0.add(fraction1);
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(1.55, fraction2.doubleValue(), 0.01D);
      assertEquals(1, fraction2.intValue());
      assertEquals(1, fraction2.getProperWhole());
      assertEquals(1, fraction2.byteValue());
      assertEquals(31, fraction2.getNumerator());
      assertEquals(11, fraction2.getProperNumerator());
      assertEquals(1.55F, fraction2.floatValue(), 0.01F);
      assertEquals(1, fraction2.shortValue());
      assertEquals(20, fraction2.getDenominator());
      assertEquals(1L, fraction2.longValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(4, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(4, fraction1.getProperNumerator());
      assertEquals(0.8F, fraction1.floatValue(), 0.01F);
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.8, fraction1.doubleValue(), 0.01D);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotNull(fraction2);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
  }

  @Test
  public void test26()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertNotNull(fraction0);
      
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.pow(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      assertEquals(0, fraction0.intValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      int int0 = fraction0.compareTo((Object) fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0, int0);
      
      Fraction fraction1 = fraction0.pow(int0);
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.shortValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
  }

  @Test
  public void test28()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.abs();
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(2, fraction1.getDenominator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertSame(fraction1, fraction0);
      assertSame(fraction0, fraction1);
      assertNotNull(fraction1);
  }

  @Test
  public void test29()  throws Throwable  {
      double double0 = 835.71916441;
      Fraction fraction0 = Fraction.getFraction(double0);
      assertEquals(835.7192F, fraction0.floatValue(), 0.01F);
      assertEquals(835, fraction0.intValue());
      assertEquals(8521, fraction0.getDenominator());
      assertEquals(835.719164417322, fraction0.doubleValue(), 0.01D);
      assertEquals(835, fraction0.getProperWhole());
      assertEquals(835, fraction0.shortValue());
      assertEquals(67, fraction0.byteValue());
      assertEquals(835L, fraction0.longValue());
      assertEquals(6128, fraction0.getProperNumerator());
      assertEquals(7121163, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.negate();
      assertEquals(-835, fraction1.getProperWhole());
      assertEquals(6128, fraction1.getProperNumerator());
      assertEquals(8521, fraction1.getDenominator());
      assertEquals(-7121163, fraction1.getNumerator());
      assertEquals((-835.719164417322), fraction1.doubleValue(), 0.01D);
      assertEquals((-835L), fraction1.longValue());
      assertEquals((-835.7192F), fraction1.floatValue(), 0.01F);
      assertEquals(-835, fraction1.shortValue());
      assertEquals(-67, fraction1.byteValue());
      assertEquals(-835, fraction1.intValue());
      assertEquals(835.7192F, fraction0.floatValue(), 0.01F);
      assertEquals(835, fraction0.intValue());
      assertEquals(8521, fraction0.getDenominator());
      assertEquals(835.719164417322, fraction0.doubleValue(), 0.01D);
      assertEquals(835, fraction0.getProperWhole());
      assertEquals(835, fraction0.shortValue());
      assertEquals(67, fraction0.byteValue());
      assertEquals(835L, fraction0.longValue());
      assertEquals(6128, fraction0.getProperNumerator());
      assertEquals(7121163, fraction0.getNumerator());
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      
      Fraction fraction2 = fraction1.abs();
      assertEquals(835, fraction2.shortValue());
      assertEquals(6128, fraction2.getProperNumerator());
      assertEquals(835.7192F, fraction2.floatValue(), 0.01F);
      assertEquals(835, fraction2.getProperWhole());
      assertEquals(835.719164417322, fraction2.doubleValue(), 0.01D);
      assertEquals(67, fraction2.byteValue());
      assertEquals(835, fraction2.intValue());
      assertEquals(8521, fraction2.getDenominator());
      assertEquals(7121163, fraction2.getNumerator());
      assertEquals(835L, fraction2.longValue());
      assertEquals(-835, fraction1.getProperWhole());
      assertEquals(6128, fraction1.getProperNumerator());
      assertEquals(8521, fraction1.getDenominator());
      assertEquals(-7121163, fraction1.getNumerator());
      assertEquals((-835.719164417322), fraction1.doubleValue(), 0.01D);
      assertEquals((-835L), fraction1.longValue());
      assertEquals((-835.7192F), fraction1.floatValue(), 0.01F);
      assertEquals(-835, fraction1.shortValue());
      assertEquals(-67, fraction1.byteValue());
      assertEquals(-835, fraction1.intValue());
      assertEquals(835.7192F, fraction0.floatValue(), 0.01F);
      assertEquals(835, fraction0.intValue());
      assertEquals(8521, fraction0.getDenominator());
      assertEquals(835.719164417322, fraction0.doubleValue(), 0.01D);
      assertEquals(835, fraction0.getProperWhole());
      assertEquals(835, fraction0.shortValue());
      assertEquals(67, fraction0.byteValue());
      assertEquals(835L, fraction0.longValue());
      assertEquals(6128, fraction0.getProperNumerator());
      assertEquals(7121163, fraction0.getNumerator());
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotNull(fraction2);
      assertTrue(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertTrue(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
  }

  @Test
  public void test30()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ZERO;
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction1.subtract(fraction0);
      assertEquals(2, fraction2.getProperNumerator());
      assertEquals((-0.5F), fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0, fraction2.intValue());
      assertEquals((-0.5), fraction2.doubleValue(), 0.01D);
      assertEquals(0, fraction2.shortValue());
      assertEquals(4, fraction2.getDenominator());
      assertEquals(-2, fraction2.getNumerator());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotNull(fraction2);
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
  }

  @Test
  public void test31()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction0);
      
      int int0 = (-15);
      Fraction fraction1 = fraction0.pow(int0);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(32768, fraction1.getDenominator());
      assertEquals(437, fraction1.getProperWhole());
      assertEquals(14348907, fraction1.getNumerator());
      assertEquals(437.8938903808594, fraction1.doubleValue(), 0.01D);
      assertEquals(29291, fraction1.getProperNumerator());
      assertEquals(-75, fraction1.byteValue());
      assertEquals(437L, fraction1.longValue());
      assertEquals(437.8939F, fraction1.floatValue(), 0.01F);
      assertEquals(437, fraction1.intValue());
      assertEquals(437, fraction1.shortValue());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test
  public void test32()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      int int0 = fraction0.hashCode();
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(23314, int0);
      
      byte byte0 = fraction0.byteValue();
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals((byte)0, byte0);
      
      Fraction fraction1 = Fraction.getReducedFraction((int) byte0, int0);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction1.invert();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Unable to invert zero.
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      double double0 = (-1.0);
      Fraction fraction0 = Fraction.getFraction(double0);
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      int int0 = (-15);
      Fraction fraction1 = fraction0.pow(int0);
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(-1, fraction1.getNumerator());
      assertEquals((-1L), fraction1.longValue());
      assertEquals(-1, fraction1.intValue());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(-1, fraction1.shortValue());
      assertEquals(-1, fraction1.getProperWhole());
      assertEquals(-1, fraction1.byteValue());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertTrue(fraction0.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test
  public void test34()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.reduce();
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
  }

  @Test
  public void test35()  throws Throwable  {
      int int0 = 0;
      int int1 = 4480;
      Fraction fraction0 = Fraction.getFraction(int0, int1);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(4480, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      Fraction fraction1 = fraction0.reduce();
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(4480, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getNumerator());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(int0 == int1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(int1 == int0);
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test
  public void test36()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      
      short short0 = fraction0.shortValue();
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals((short)0, short0);
      
      int int0 = 409;
      Fraction fraction1 = Fraction.getReducedFraction((int) short0, int0);
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction1.reduce();
      assertEquals(0, fraction2.byteValue());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0, fraction2.shortValue());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.intValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertNotSame(fraction2, fraction0);
      assertSame(fraction2, fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction2);
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test
  public void test37()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.reduce();
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
      assertNotNull(fraction1);
  }

  @Test
  public void test38()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
      }
  }

  @Test
  public void test39()  throws Throwable  {
      double double0 = (-3618.8149);
      Fraction fraction0 = Fraction.getFraction(double0);
      assertEquals((-3618.8149), fraction0.doubleValue(), 0.01D);
      assertEquals(-3618, fraction0.intValue());
      assertEquals(-36188149, fraction0.getNumerator());
      assertEquals(-3618, fraction0.getProperWhole());
      assertEquals((-3618.8147F), fraction0.floatValue(), 0.01F);
      assertEquals((-3618L), fraction0.longValue());
      assertEquals(-34, fraction0.byteValue());
      assertEquals(10000, fraction0.getDenominator());
      assertEquals(8149, fraction0.getProperNumerator());
      assertEquals(-3618, fraction0.shortValue());
      assertNotNull(fraction0);
      
      String string0 = fraction0.toProperString();
      assertEquals((-3618.8149), fraction0.doubleValue(), 0.01D);
      assertEquals(-3618, fraction0.intValue());
      assertEquals(-36188149, fraction0.getNumerator());
      assertEquals(-3618, fraction0.getProperWhole());
      assertEquals((-3618.8147F), fraction0.floatValue(), 0.01F);
      assertEquals((-3618L), fraction0.longValue());
      assertEquals(-34, fraction0.byteValue());
      assertEquals(10000, fraction0.getDenominator());
      assertEquals(8149, fraction0.getProperNumerator());
      assertEquals(-3618, fraction0.shortValue());
      assertNotNull(string0);
      assertEquals("-3618 8149/10000", string0);
      
      Fraction fraction1 = Fraction.getFraction(string0);
      assertEquals((-3618.8147F), fraction1.floatValue(), 0.01F);
      assertEquals(-3618, fraction1.shortValue());
      assertEquals(-3618, fraction1.intValue());
      assertEquals(-3618, fraction1.getProperWhole());
      assertEquals(-34, fraction1.byteValue());
      assertEquals((-3618.8149), fraction1.doubleValue(), 0.01D);
      assertEquals(-36188149, fraction1.getNumerator());
      assertEquals(10000, fraction1.getDenominator());
      assertEquals(8149, fraction1.getProperNumerator());
      assertEquals((-3618L), fraction1.longValue());
      assertEquals((-3618.8149), fraction0.doubleValue(), 0.01D);
      assertEquals(-3618, fraction0.intValue());
      assertEquals(-36188149, fraction0.getNumerator());
      assertEquals(-3618, fraction0.getProperWhole());
      assertEquals((-3618.8147F), fraction0.floatValue(), 0.01F);
      assertEquals((-3618L), fraction0.longValue());
      assertEquals(-34, fraction0.byteValue());
      assertEquals(10000, fraction0.getDenominator());
      assertEquals(8149, fraction0.getProperNumerator());
      assertEquals(-3618, fraction0.shortValue());
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
      assertTrue(fraction1.equals((Object)fraction0));
      assertTrue(fraction0.equals((Object)fraction1));
  }

  @Test
  public void test40()  throws Throwable  {
      String string0 = "h.C'nFg<|*\"Nr8";
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"h.C'nFg<|*\"Nr8\"
         //
      }
  }

  @Test
  public void test41()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The string must not be null
         //
      }
  }

  @Test
  public void test42()  throws Throwable  {
      double double0 = 1.7976931348623157E308;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(double0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The value must not be greater than Integer.MAX_VALUE or NaN
         //
      }
  }

  @Test
  public void test43()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      int int1 = (-1);
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
      }
  }

  @Test
  public void test44()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      int int0 = fraction0.hashCode();
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(23351, int0);
      
      int int1 = Integer.MIN_VALUE;
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = Fraction.getReducedFraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
      }
  }

  @Test
  public void test45()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      int int0 = fraction0.hashCode();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(23274, int0);
      
      int int1 = Integer.MIN_VALUE;
      assertFalse(int1 == int0);
      
      Fraction fraction1 = Fraction.getReducedFraction(int0, int1);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((-1.0837800800800323E-5), fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(1073741824, fraction1.getDenominator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(-11637, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals((-1.0837801E-5F), fraction1.floatValue(), 0.01F);
      assertEquals(11637, fraction1.getProperNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(int1 == int0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(int0 == int1);
  }

  @Test
  public void test46()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
      }
  }

  @Test
  public void test47()  throws Throwable  {
      int int0 = (-17);
      Fraction fraction0 = Fraction.getFraction(int0, int0);
      assertEquals(17, fraction0.getNumerator());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(17, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      int int1 = fraction0.hashCode();
      assertEquals(17, fraction0.getNumerator());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(17, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(23919, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      int int2 = 2147483644;
      assertFalse(int2 == int1);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = Fraction.getFraction(int2, int1, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Numerator too large to represent as an Integer.
         //
      }
  }

  @Test
  public void test48()  throws Throwable  {
      int int0 = 0;
      int int1 = 4480;
      int int2 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(int2, int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Numerator too large to represent as an Integer.
         //
      }
  }

  @Test
  public void test49()  throws Throwable  {
      int int0 = (-5);
      int int1 = 3;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(int0, int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The numerator must not be negative
         //
      }
  }

  @Test
  public void test50()  throws Throwable  {
      int int0 = (-1446);
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(int0, int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be negative
         //
      }
  }

  @Test
  public void test51()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      int int0 = fraction0.compareTo((Object) fraction0);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, int0);
      
      byte byte0 = fraction0.byteValue();
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)0, byte0);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = Fraction.getFraction(int0, (int) byte0, (int) byte0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
      }
  }

  @Test
  public void test52()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertNotNull(fraction0);
      
      int int0 = fraction0.getProperWhole();
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, int0);
      
      int int1 = Integer.MIN_VALUE;
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = Fraction.getFraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
      }
  }

  @Test
  public void test53()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
      }
  }

  @Test
  public void test54()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(4, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      
      int int0 = fraction0.getNumerator();
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(4, int0);
      
      int int1 = fraction0.compareTo((Object) fraction0);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = Fraction.getFraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
      }
  }

  @Test
  public void test55()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      String string0 = fraction0.toProperString();
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertNotNull(string0);
      assertEquals("4/5", string0);
      
      Fraction fraction1 = Fraction.getFraction(string0);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(4, fraction1.getNumerator());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(4, fraction1.getProperNumerator());
      assertEquals(0.8F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.8, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertTrue(fraction0.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test
  public void test56()  throws Throwable  {
      double double0 = (-1.0);
      Fraction fraction0 = Fraction.getFraction(double0);
      assertEquals(-1, fraction0.getProperWhole());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1L), fraction0.longValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.TWO_THIRDS;
      assertEquals(0L, fraction1.longValue());
      assertEquals(3, fraction1.getDenominator());
      assertEquals(0.6666667F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(0.6666666666666666, fraction1.doubleValue(), 0.01D);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertEquals(-1, fraction0.getProperWhole());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction2.intValue());
      assertEquals(-1, fraction2.getProperWhole());
      assertEquals(3, fraction2.getDenominator());
      assertEquals((-1.6666666F), fraction2.floatValue(), 0.01F);
      assertEquals((-1L), fraction2.longValue());
      assertEquals(-1, fraction2.byteValue());
      assertEquals(-1, fraction2.shortValue());
      assertEquals((-1.6666666666666667), fraction2.doubleValue(), 0.01D);
      assertEquals(2, fraction2.getProperNumerator());
      assertEquals(-5, fraction2.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(3, fraction1.getDenominator());
      assertEquals(0.6666667F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(0.6666666666666666, fraction1.doubleValue(), 0.01D);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotNull(fraction2);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      
      String string0 = fraction2.toProperString();
      assertEquals(-1, fraction0.getProperWhole());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction2.intValue());
      assertEquals(-1, fraction2.getProperWhole());
      assertEquals(3, fraction2.getDenominator());
      assertEquals((-1.6666666F), fraction2.floatValue(), 0.01F);
      assertEquals((-1L), fraction2.longValue());
      assertEquals(-1, fraction2.byteValue());
      assertEquals(-1, fraction2.shortValue());
      assertEquals((-1.6666666666666667), fraction2.doubleValue(), 0.01D);
      assertEquals(2, fraction2.getProperNumerator());
      assertEquals(-5, fraction2.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(3, fraction1.getDenominator());
      assertEquals(0.6666667F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(0.6666666666666666, fraction1.doubleValue(), 0.01D);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotNull(string0);
      assertEquals("-1 2/3", string0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
  }

  @Test
  public void test57()  throws Throwable  {
      int int0 = 577;
      Fraction fraction0 = Fraction.getReducedFraction(int0, int0);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertNotNull(fraction0);
      
      String string0 = fraction0.toString();
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertNotNull(string0);
      assertEquals("1/1", string0);
  }

  @Test
  public void test58()  throws Throwable  {
      double double0 = 835.71916441;
      Fraction fraction0 = Fraction.getFraction(double0);
      assertEquals(835, fraction0.intValue());
      assertEquals(8521, fraction0.getDenominator());
      assertEquals(835.7192F, fraction0.floatValue(), 0.01F);
      assertEquals(7121163, fraction0.getNumerator());
      assertEquals(67, fraction0.byteValue());
      assertEquals(835, fraction0.getProperWhole());
      assertEquals(835L, fraction0.longValue());
      assertEquals(6128, fraction0.getProperNumerator());
      assertEquals(835.719164417322, fraction0.doubleValue(), 0.01D);
      assertEquals(835, fraction0.shortValue());
      assertNotNull(fraction0);
      
      double double1 = fraction0.doubleValue();
      assertEquals(835, fraction0.intValue());
      assertEquals(8521, fraction0.getDenominator());
      assertEquals(835.7192F, fraction0.floatValue(), 0.01F);
      assertEquals(7121163, fraction0.getNumerator());
      assertEquals(67, fraction0.byteValue());
      assertEquals(835, fraction0.getProperWhole());
      assertEquals(835L, fraction0.longValue());
      assertEquals(6128, fraction0.getProperNumerator());
      assertEquals(835.719164417322, fraction0.doubleValue(), 0.01D);
      assertEquals(835, fraction0.shortValue());
      assertEquals(835.719164417322, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test59()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      long long0 = fraction0.longValue();
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, long0);
  }
}
