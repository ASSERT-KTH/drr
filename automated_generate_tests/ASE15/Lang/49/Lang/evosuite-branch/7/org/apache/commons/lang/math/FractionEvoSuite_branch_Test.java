/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:34:12 GMT 2014
 */

package org.apache.commons.lang.math;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.lang.math.Fraction;



import org.evosuite.runtime.mock.java.lang.MockArithmeticException;

import org.junit.runner.RunWith;


public class FractionEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.negate();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals((-0.4), fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(-2, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals((-0.4F), fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertNotNull(fraction1);
      
      String string0 = fraction1.toProperString();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals("-2/5", string0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals((-0.4), fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(-2, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals((-0.4F), fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertNotNull(string0);
  }

  @Test
  public void test01()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.negate();
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(-1, fraction1.getProperWhole());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-1L), fraction1.longValue());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01D);
      assertEquals(-1, fraction1.intValue());
      assertEquals(-1, fraction1.shortValue());
      assertEquals(-1, fraction1.byteValue());
      assertEquals(-1, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(fraction1);
      
      String string0 = fraction1.toProperString();
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals("-1", string0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(-1, fraction1.getProperWhole());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-1L), fraction1.longValue());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01D);
      assertEquals(-1, fraction1.intValue());
      assertEquals(-1, fraction1.shortValue());
      assertEquals(-1, fraction1.byteValue());
      assertEquals(-1, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(string0);
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = 32;
      Fraction fraction0 = Fraction.getReducedFraction(int0, int0);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      
      String string0 = fraction0.toProperString();
      assertEquals("1", string0);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertNotNull(string0);
  }

  @Test
  public void test03()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertNotNull(fraction1);
      
      String string0 = fraction1.toProperString();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals("0", string0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertNotNull(string0);
  }

  @Test
  public void test04()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      String string0 = fraction0.toString();
      assertEquals("1/2", string0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertNotNull(string0);
  }

  @Test
  public void test05()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ONE_QUARTER;
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0.25F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.25, fraction1.doubleValue(), 0.01D);
      assertNotNull(fraction1);
      
      int int0 = fraction1.compareTo((Object) fraction0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals((-1), int0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0.25F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.25, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
  }

  @Test
  public void test06()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(2, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.reduce();
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(2, fraction1.getDenominator());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(2, fraction0.getNumerator());
      assertNotNull(fraction1);
      
      int int0 = fraction1.compareTo((Object) fraction0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(0, int0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(2, fraction1.getDenominator());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(2, fraction0.getNumerator());
  }

  @Test
  public void test07()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ONE;
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertNotNull(fraction1);
      
      Fraction fraction2 = fraction0.multiplyBy(fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertTrue(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertTrue(fraction0.equals((Object)fraction2));
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0, fraction2.shortValue());
      assertEquals(3, fraction2.getNumerator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(4, fraction2.getDenominator());
      assertEquals(0.75F, fraction2.floatValue(), 0.01F);
      assertEquals(0.75, fraction2.doubleValue(), 0.01D);
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction2.byteValue());
      assertEquals(3, fraction2.getProperNumerator());
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction2);
      
      int int0 = fraction0.compareTo((Object) fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertEquals(0, int0);
      assertTrue(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertTrue(fraction0.equals((Object)fraction2));
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0, fraction2.shortValue());
      assertEquals(3, fraction2.getNumerator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(4, fraction2.getDenominator());
      assertEquals(0.75F, fraction2.floatValue(), 0.01F);
      assertEquals(0.75, fraction2.doubleValue(), 0.01D);
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction2.byteValue());
      assertEquals(3, fraction2.getProperNumerator());
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
  }

  @Test
  public void test08()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.THREE_FIFTHS;
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction1.shortValue());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.6, fraction1.doubleValue(), 0.01D);
      assertEquals(3, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0L, fraction1.longValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.6F, fraction1.floatValue(), 0.01F);
      assertNotNull(fraction1);
      
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertEquals(3, fraction2.getNumerator());
      assertEquals(0, fraction2.shortValue());
      assertEquals(20, fraction2.getDenominator());
      assertEquals(0.15F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(3, fraction2.getProperNumerator());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(0.15, fraction2.doubleValue(), 0.01D);
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.6, fraction1.doubleValue(), 0.01D);
      assertEquals(3, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0L, fraction1.longValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.6F, fraction1.floatValue(), 0.01F);
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperWhole());
      assertNotNull(fraction2);
      
      int int0 = fraction0.compareTo((Object) fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertEquals(1, int0);
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertEquals(3, fraction2.getNumerator());
      assertEquals(0, fraction2.shortValue());
      assertEquals(20, fraction2.getDenominator());
      assertEquals(0.15F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(3, fraction2.getProperNumerator());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(0.15, fraction2.doubleValue(), 0.01D);
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.6, fraction1.doubleValue(), 0.01D);
      assertEquals(3, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0L, fraction1.longValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.6F, fraction1.floatValue(), 0.01F);
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperWhole());
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = 4409;
      Fraction fraction0 = Fraction.getReducedFraction(int0, int0);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      int int1 = fraction0.hashCode();
      assertEquals(23311, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.TWO_FIFTHS;
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction1.intValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.4, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0.4F, fraction1.floatValue(), 0.01F);
      assertNotNull(fraction1);
      
      boolean boolean0 = fraction0.equals((Object) fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(boolean0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.4, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0.4F, fraction1.floatValue(), 0.01F);
  }

  @Test
  public void test11()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction0);
      
      String string0 = "The fraction to divide by must not be zero";
      boolean boolean0 = fraction0.equals((Object) string0);
      assertFalse(boolean0);
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
  }

  @Test
  public void test12()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertNotNull(fraction1);
      
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.divideBy(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The fraction to divide by must not be zero
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.divideBy(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction1);
      
      Fraction fraction2 = fraction1.multiplyBy(fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertTrue(fraction1.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction0));
      assertTrue(fraction2.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0, fraction2.shortValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(0, fraction2.intValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction2);
  }

  @Test
  public void test15()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.multiplyBy(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1L, fraction0.longValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ZERO;
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertNotNull(fraction1);
      
      Fraction fraction2 = fraction0.add(fraction1);
      assertNotSame(fraction0, fraction1);
      assertSame(fraction0, fraction2);
      assertNotSame(fraction2, fraction1);
      assertSame(fraction2, fraction0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(1, fraction2.intValue());
      assertEquals(1L, fraction2.longValue());
      assertEquals(1, fraction2.getProperWhole());
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
      assertEquals(1, fraction2.shortValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(1, fraction2.getNumerator());
      assertEquals(1.0, fraction2.doubleValue(), 0.01D);
      assertEquals(1, fraction2.byteValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertNotNull(fraction2);
  }

  @Test
  public void test17()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.add(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.byteValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.invert();
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(3, fraction1.shortValue());
      assertEquals(3, fraction1.intValue());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(3.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(3, fraction1.byteValue());
      assertEquals(3L, fraction1.longValue());
      assertEquals(3, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(3.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.byteValue());
      assertNotNull(fraction1);
      
      Fraction fraction2 = fraction1.subtract(fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(2, fraction2.byteValue());
      assertEquals(2, fraction2.intValue());
      assertEquals(2.6666667F, fraction2.floatValue(), 0.01F);
      assertEquals(2, fraction2.shortValue());
      assertEquals(2, fraction2.getProperNumerator());
      assertEquals(2.6666666666666665, fraction2.doubleValue(), 0.01D);
      assertEquals(2, fraction2.getProperWhole());
      assertEquals(3, fraction2.getDenominator());
      assertEquals(8, fraction2.getNumerator());
      assertEquals(2L, fraction2.longValue());
      assertEquals(3, fraction1.shortValue());
      assertEquals(3, fraction1.intValue());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(3.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(3, fraction1.byteValue());
      assertEquals(3L, fraction1.longValue());
      assertEquals(3, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(3.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.byteValue());
      assertNotNull(fraction2);
  }

  @Test
  public void test19()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      double double0 = (-3353.5160716418063);
      Fraction fraction1 = Fraction.getFraction(double0);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(-3353, fraction1.intValue());
      assertEquals(8431, fraction1.getDenominator());
      assertEquals(-28273494, fraction1.getNumerator());
      assertEquals((-3353.516F), fraction1.floatValue(), 0.01F);
      assertEquals((-3353.516071640375), fraction1.doubleValue(), 0.01D);
      assertEquals(-25, fraction1.byteValue());
      assertEquals(4351, fraction1.getProperNumerator());
      assertEquals((-3353L), fraction1.longValue());
      assertEquals(-3353, fraction1.shortValue());
      assertEquals(-3353, fraction1.getProperWhole());
      assertNotNull(fraction1);
      
      Fraction fraction2 = fraction1.add(fraction0);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((-3352L), fraction2.longValue());
      assertEquals(-3352, fraction2.intValue());
      assertEquals((-3352.916071640375), fraction2.doubleValue(), 0.01D);
      assertEquals(38617, fraction2.getProperNumerator());
      assertEquals(-141342177, fraction2.getNumerator());
      assertEquals(-3352, fraction2.getProperWhole());
      assertEquals((-3352.916F), fraction2.floatValue(), 0.01F);
      assertEquals(-3352, fraction2.shortValue());
      assertEquals(42155, fraction2.getDenominator());
      assertEquals(-24, fraction2.byteValue());
      assertEquals(-3353, fraction1.intValue());
      assertEquals(8431, fraction1.getDenominator());
      assertEquals(-28273494, fraction1.getNumerator());
      assertEquals((-3353.516F), fraction1.floatValue(), 0.01F);
      assertEquals((-3353.516071640375), fraction1.doubleValue(), 0.01D);
      assertEquals(-25, fraction1.byteValue());
      assertEquals(4351, fraction1.getProperNumerator());
      assertEquals((-3353L), fraction1.longValue());
      assertEquals(-3353, fraction1.shortValue());
      assertEquals(-3353, fraction1.getProperWhole());
      assertNotNull(fraction2);
  }

  @Test
  public void test20()  throws Throwable  {
      int int0 = 4409;
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.pow(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mulPos
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      assertEquals(0L, fraction0.longValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      double double0 = (-2353.942623448115);
      Fraction fraction1 = Fraction.getFraction(double0);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(122, fraction1.getDenominator());
      assertEquals(-287181, fraction1.getNumerator());
      assertEquals((-2353.94262295082), fraction1.doubleValue(), 0.01D);
      assertEquals(-2353, fraction1.shortValue());
      assertEquals((-2353L), fraction1.longValue());
      assertEquals(-49, fraction1.byteValue());
      assertEquals((-2353.9426F), fraction1.floatValue(), 0.01F);
      assertEquals(-2353, fraction1.intValue());
      assertEquals(-2353, fraction1.getProperWhole());
      assertEquals(115, fraction1.getProperNumerator());
      assertNotNull(fraction1);
      
      double double1 = (-642.037940088);
      Fraction fraction2 = Fraction.getFraction(double1);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(double1 == double0);
      assertEquals(126, fraction2.byteValue());
      assertEquals((-642.03796F), fraction2.floatValue(), 0.01F);
      assertEquals((-642.0379400830965), fraction2.doubleValue(), 0.01D);
      assertEquals(347, fraction2.getProperNumerator());
      assertEquals(-5872079, fraction2.getNumerator());
      assertEquals(-642, fraction2.intValue());
      assertEquals(-642, fraction2.shortValue());
      assertEquals((-642L), fraction2.longValue());
      assertEquals(-642, fraction2.getProperWhole());
      assertEquals(9146, fraction2.getDenominator());
      assertNotNull(fraction2);
      
      Fraction fraction3 = fraction1.add(fraction2);
      assertNotSame(fraction1, fraction3);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction3, fraction0);
      assertNotSame(fraction3, fraction2);
      assertNotSame(fraction3, fraction1);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction3);
      assertFalse(fraction1.equals((Object)fraction3));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction2));
      assertFalse(fraction3.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction3));
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(122, fraction1.getDenominator());
      assertEquals(-287181, fraction1.getNumerator());
      assertEquals((-2353.94262295082), fraction1.doubleValue(), 0.01D);
      assertEquals(-2353, fraction1.shortValue());
      assertEquals((-2353L), fraction1.longValue());
      assertEquals(-49, fraction1.byteValue());
      assertEquals((-2353.9426F), fraction1.floatValue(), 0.01F);
      assertEquals(-2353, fraction1.intValue());
      assertEquals(-2353, fraction1.getProperWhole());
      assertEquals(115, fraction1.getProperNumerator());
      assertEquals(-835737766, fraction3.getNumerator());
      assertEquals(273531, fraction3.getProperNumerator());
      assertEquals(-2995, fraction3.shortValue());
      assertEquals((-2995.980563033916), fraction3.doubleValue(), 0.01D);
      assertEquals((-2995.9807F), fraction3.floatValue(), 0.01F);
      assertEquals(278953, fraction3.getDenominator());
      assertEquals(77, fraction3.byteValue());
      assertEquals(-2995, fraction3.getProperWhole());
      assertEquals(-2995, fraction3.intValue());
      assertEquals((-2995L), fraction3.longValue());
      assertEquals(126, fraction2.byteValue());
      assertEquals((-642.03796F), fraction2.floatValue(), 0.01F);
      assertEquals((-642.0379400830965), fraction2.doubleValue(), 0.01D);
      assertEquals(347, fraction2.getProperNumerator());
      assertEquals(-5872079, fraction2.getNumerator());
      assertEquals(-642, fraction2.intValue());
      assertEquals(-642, fraction2.shortValue());
      assertEquals((-642L), fraction2.longValue());
      assertEquals(-642, fraction2.getProperWhole());
      assertEquals(9146, fraction2.getDenominator());
      assertNotNull(fraction3);
      
      // Undeclared exception!
      try {
        Fraction fraction4 = fraction3.multiplyBy(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction0);
      
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.pow(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      double double0 = 0.0;
      Fraction fraction0 = Fraction.getFraction(double0);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      int int0 = 0;
      Fraction fraction1 = fraction0.pow(int0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.intValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertNotNull(fraction1);
  }

  @Test
  public void test24()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.divideBy(fraction0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction1);
      
      int int0 = (-1526);
      Fraction fraction2 = fraction1.pow(int0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertTrue(fraction1.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction0));
      assertTrue(fraction2.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction2.intValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(1, fraction2.getProperWhole());
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
      assertEquals(1L, fraction2.longValue());
      assertEquals(1, fraction2.byteValue());
      assertEquals(1, fraction2.getNumerator());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(1.0, fraction2.doubleValue(), 0.01D);
      assertEquals(1, fraction2.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction2);
  }

  @Test
  public void test25()  throws Throwable  {
      double double0 = 0.0;
      Fraction fraction0 = Fraction.getFraction(double0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.abs();
      assertSame(fraction1, fraction0);
      assertSame(fraction0, fraction1);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertNotNull(fraction1);
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = (-813);
      Fraction fraction0 = Fraction.getFraction((double) int0);
      assertEquals(-813, fraction0.getProperWhole());
      assertEquals(-813, fraction0.intValue());
      assertEquals((-813L), fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-813.0F), fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-813, fraction0.getNumerator());
      assertEquals(-813, fraction0.shortValue());
      assertEquals((-813.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-45, fraction0.byteValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.abs();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(-813, fraction0.getProperWhole());
      assertEquals(-813, fraction0.intValue());
      assertEquals((-813L), fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-813.0F), fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-813, fraction0.getNumerator());
      assertEquals(-813, fraction0.shortValue());
      assertEquals((-813.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-45, fraction0.byteValue());
      assertEquals(45, fraction1.byteValue());
      assertEquals(813.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(813, fraction1.getProperWhole());
      assertEquals(813, fraction1.intValue());
      assertEquals(813L, fraction1.longValue());
      assertEquals(813.0, fraction1.doubleValue(), 0.01D);
      assertEquals(813, fraction1.getNumerator());
      assertEquals(813, fraction1.shortValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertNotNull(fraction1);
  }

  @Test
  public void test27()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      assertEquals(0, fraction0.intValue());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      byte byte0 = fraction0.byteValue();
      assertEquals((byte)0, byte0);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      
      Fraction fraction1 = Fraction.getFraction((double) byte0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction0.intValue());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertNotNull(fraction1);
      
      Fraction fraction2 = fraction1.subtract(fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertEquals(0, fraction0.intValue());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals((-0.33333334F), fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.intValue());
      assertEquals(-1, fraction2.getNumerator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0, fraction2.shortValue());
      assertEquals((-0.3333333333333333), fraction2.doubleValue(), 0.01D);
      assertEquals(1, fraction2.getProperNumerator());
      assertEquals(3, fraction2.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertNotNull(fraction2);
  }

  @Test
  public void test28()  throws Throwable  {
      double double0 = (-2353.942623448115);
      Fraction fraction0 = Fraction.getFraction(double0);
      assertEquals(-2353, fraction0.shortValue());
      assertEquals((-2353L), fraction0.longValue());
      assertEquals((-2353.9426F), fraction0.floatValue(), 0.01F);
      assertEquals(-2353, fraction0.intValue());
      assertEquals(-2353, fraction0.getProperWhole());
      assertEquals(115, fraction0.getProperNumerator());
      assertEquals(-49, fraction0.byteValue());
      assertEquals(122, fraction0.getDenominator());
      assertEquals(-287181, fraction0.getNumerator());
      assertEquals((-2353.94262295082), fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.invert();
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals((-4.248191906846205E-4), fraction1.doubleValue(), 0.01D);
      assertEquals(122, fraction1.getProperNumerator());
      assertEquals(287181, fraction1.getDenominator());
      assertEquals(-122, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((-4.2481918E-4F), fraction1.floatValue(), 0.01F);
      assertEquals(-2353, fraction0.shortValue());
      assertEquals((-2353L), fraction0.longValue());
      assertEquals((-2353.9426F), fraction0.floatValue(), 0.01F);
      assertEquals(-2353, fraction0.intValue());
      assertEquals(-2353, fraction0.getProperWhole());
      assertEquals(115, fraction0.getProperNumerator());
      assertEquals(-49, fraction0.byteValue());
      assertEquals(122, fraction0.getDenominator());
      assertEquals(-287181, fraction0.getNumerator());
      assertEquals((-2353.94262295082), fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction1);
  }

  @Test
  public void test29()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertNotNull(fraction1);
      
      Fraction fraction2 = fraction0.multiplyBy(fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertTrue(fraction1.equals((Object)fraction2));
      assertTrue(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertEquals(0, fraction2.shortValue());
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0, fraction2.intValue());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals(1, fraction2.getDenominator());
      assertNotNull(fraction2);
      
      // Undeclared exception!
      try {
        Fraction fraction3 = fraction2.invert();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Unable to invert zero.
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1833);
      Fraction fraction0 = Fraction.getFraction(int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(1833, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.reduce();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(1833, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertNotNull(fraction1);
  }

  @Test
  public void test31()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertNotNull(fraction1);
      
      Fraction fraction2 = fraction1.reduce();
      assertSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction2, fraction0);
      assertSame(fraction2, fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0, fraction2.getNumerator());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertEquals(0, fraction2.byteValue());
      assertEquals(0, fraction2.shortValue());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertNotNull(fraction2);
  }

  @Test
  public void test32()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.TWO_FIFTHS;
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.4, fraction1.doubleValue(), 0.01D);
      assertEquals(0.4F, fraction1.floatValue(), 0.01F);
      assertEquals(2, fraction1.getProperNumerator());
      assertNotNull(fraction1);
      
      Fraction fraction2 = fraction0.add(fraction1);
      assertSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction0);
      assertSame(fraction2, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.4, fraction1.doubleValue(), 0.01D);
      assertEquals(0.4F, fraction1.floatValue(), 0.01F);
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0, fraction2.byteValue());
      assertEquals(2, fraction2.getProperNumerator());
      assertEquals(0, fraction2.shortValue());
      assertEquals(0.4, fraction2.doubleValue(), 0.01D);
      assertEquals(0.4F, fraction2.floatValue(), 0.01F);
      assertEquals(5, fraction2.getDenominator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(2, fraction2.getNumerator());
      assertEquals(0, fraction2.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction2);
      
      Fraction fraction3 = fraction2.reduce();
      assertSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertSame(fraction1, fraction3);
      assertNotSame(fraction2, fraction0);
      assertSame(fraction2, fraction3);
      assertSame(fraction2, fraction1);
      assertSame(fraction3, fraction2);
      assertSame(fraction3, fraction1);
      assertNotSame(fraction3, fraction0);
      assertNotSame(fraction0, fraction3);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction3));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.4, fraction1.doubleValue(), 0.01D);
      assertEquals(0.4F, fraction1.floatValue(), 0.01F);
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0, fraction2.byteValue());
      assertEquals(2, fraction2.getProperNumerator());
      assertEquals(0, fraction2.shortValue());
      assertEquals(0.4, fraction2.doubleValue(), 0.01D);
      assertEquals(0.4F, fraction2.floatValue(), 0.01F);
      assertEquals(5, fraction2.getDenominator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(2, fraction2.getNumerator());
      assertEquals(0, fraction2.intValue());
      assertEquals(0.4, fraction3.doubleValue(), 0.01D);
      assertEquals(0, fraction3.intValue());
      assertEquals(2, fraction3.getNumerator());
      assertEquals(0.4F, fraction3.floatValue(), 0.01F);
      assertEquals(0L, fraction3.longValue());
      assertEquals(5, fraction3.getDenominator());
      assertEquals(0, fraction3.byteValue());
      assertEquals(0, fraction3.shortValue());
      assertEquals(0, fraction3.getProperWhole());
      assertEquals(2, fraction3.getProperNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction3);
  }

  @Test
  public void test33()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      String string0 = fraction0.toProperString();
      assertEquals("3/5", string0);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertNotNull(string0);
      
      Fraction fraction1 = Fraction.getFraction(string0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertTrue(fraction0.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction0));
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.6F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.shortValue());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(0.6, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.byteValue());
      assertNotNull(fraction1);
  }

  @Test
  public void test34()  throws Throwable  {
      int int0 = 4409;
      int int1 = 421;
      Fraction fraction0 = Fraction.getReducedFraction(int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(10, fraction0.shortValue());
      assertEquals(10L, fraction0.longValue());
      assertEquals(199, fraction0.getProperNumerator());
      assertEquals(10, fraction0.getProperWhole());
      assertEquals(10, fraction0.byteValue());
      assertEquals(421, fraction0.getDenominator());
      assertEquals(10.47268408551069, fraction0.doubleValue(), 0.01D);
      assertEquals(10.472684F, fraction0.floatValue(), 0.01F);
      assertEquals(10, fraction0.intValue());
      assertEquals(4409, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      String string0 = fraction0.toProperString();
      assertEquals("10 199/421", string0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(10, fraction0.shortValue());
      assertEquals(10L, fraction0.longValue());
      assertEquals(199, fraction0.getProperNumerator());
      assertEquals(10, fraction0.getProperWhole());
      assertEquals(10, fraction0.byteValue());
      assertEquals(421, fraction0.getDenominator());
      assertEquals(10.47268408551069, fraction0.doubleValue(), 0.01D);
      assertEquals(10.472684F, fraction0.floatValue(), 0.01F);
      assertEquals(10, fraction0.intValue());
      assertEquals(4409, fraction0.getNumerator());
      assertNotNull(string0);
      
      Fraction fraction1 = Fraction.getFraction(string0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertTrue(fraction0.equals((Object)fraction1));
      assertFalse(int1 == int0);
      assertTrue(fraction1.equals((Object)fraction0));
      assertFalse(int0 == int1);
      assertEquals(10, fraction0.shortValue());
      assertEquals(10L, fraction0.longValue());
      assertEquals(199, fraction0.getProperNumerator());
      assertEquals(10, fraction0.getProperWhole());
      assertEquals(10, fraction0.byteValue());
      assertEquals(421, fraction0.getDenominator());
      assertEquals(10.47268408551069, fraction0.doubleValue(), 0.01D);
      assertEquals(10.472684F, fraction0.floatValue(), 0.01F);
      assertEquals(10, fraction0.intValue());
      assertEquals(4409, fraction0.getNumerator());
      assertEquals(10.47268408551069, fraction1.doubleValue(), 0.01D);
      assertEquals(10.472684F, fraction1.floatValue(), 0.01F);
      assertEquals(199, fraction1.getProperNumerator());
      assertEquals(10, fraction1.getProperWhole());
      assertEquals(421, fraction1.getDenominator());
      assertEquals(10L, fraction1.longValue());
      assertEquals(10, fraction1.shortValue());
      assertEquals(10, fraction1.byteValue());
      assertEquals(4409, fraction1.getNumerator());
      assertEquals(10, fraction1.intValue());
      assertNotNull(fraction1);
  }

  @Test
  public void test35()  throws Throwable  {
      String string0 = "6 R-";
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The fraction could not be parsed as the format X Y/Z
         //
      }
  }

  @Test
  public void test36()  throws Throwable  {
      String string0 = "onFuce:.k1o$xx7L";
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"onFuce:.k1o$xx7L\"
         //
      }
  }

  @Test
  public void test37()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The string must not be null
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      double double0 = 1.7976931348623157E308;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(double0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The value must not be greater than Integer.MAX_VALUE or NaN
         //
      }
  }

  @Test
  public void test39()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      int int1 = (-701);
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
      }
  }

  @Test
  public void test40()  throws Throwable  {
      int int0 = 1734;
      int int1 = Integer.MIN_VALUE;
      Fraction fraction0 = Fraction.getReducedFraction(int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-8.074566721916199E-7), fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(867, fraction0.getProperNumerator());
      assertEquals((-8.074567E-7F), fraction0.floatValue(), 0.01F);
      assertEquals(1073741824, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(-867, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertNotNull(fraction0);
  }

  @Test
  public void test41()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      
      int int0 = fraction0.getProperWhole();
      assertEquals(1, int0);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      
      int int1 = Integer.MIN_VALUE;
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = Fraction.getReducedFraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
      }
  }

  @Test
  public void test42()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertNotNull(fraction0);
      
      int int0 = fraction0.compareTo((Object) fraction0);
      assertEquals(0, int0);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      
      // Undeclared exception!
      try {
        Fraction fraction1 = Fraction.getReducedFraction(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
      }
  }

  @Test
  public void test43()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      int int0 = fraction0.getProperWhole();
      assertEquals(1, int0);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      
      int int1 = Integer.MIN_VALUE;
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = Fraction.getFraction(int1, int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Numerator too large to represent as an Integer.
         //
      }
  }

  @Test
  public void test44()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      byte byte0 = fraction0.byteValue();
      assertEquals((byte)0, byte0);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      
      int int0 = fraction0.hashCode();
      assertEquals(23315, int0);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      
      int int1 = Integer.MIN_VALUE;
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = Fraction.getFraction((int) byte0, int1, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The numerator must not be negative
         //
      }
  }

  @Test
  public void test45()  throws Throwable  {
      int int0 = (-106);
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(int0, int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be negative
         //
      }
  }

  @Test
  public void test46()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.byteValue());
      assertNotNull(fraction0);
      
      byte byte0 = fraction0.byteValue();
      assertEquals((byte)0, byte0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.byteValue());
      
      // Undeclared exception!
      try {
        Fraction fraction1 = Fraction.getFraction((int) byte0, (int) byte0, (int) byte0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
      }
  }

  @Test
  public void test47()  throws Throwable  {
      int int0 = (-313);
      int int1 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
      }
  }

  @Test
  public void test48()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
      }
  }

  @Test
  public void test49()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertNotNull(fraction0);
      
      int int0 = fraction0.compareTo((Object) fraction0);
      assertEquals(0, int0);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      
      // Undeclared exception!
      try {
        Fraction fraction1 = Fraction.getFraction(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
      }
  }

  @Test
  public void test50()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.invert();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(3, fraction1.getProperWhole());
      assertEquals(3.0F, fraction1.floatValue(), 0.01F);
      assertEquals(3, fraction1.getNumerator());
      assertEquals(3L, fraction1.longValue());
      assertEquals(3, fraction1.intValue());
      assertEquals(3, fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(3.0, fraction1.doubleValue(), 0.01D);
      assertEquals(3, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertNotNull(fraction1);
      
      String string0 = fraction1.toProperString();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals("3", string0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(3, fraction1.getProperWhole());
      assertEquals(3.0F, fraction1.floatValue(), 0.01F);
      assertEquals(3, fraction1.getNumerator());
      assertEquals(3L, fraction1.longValue());
      assertEquals(3, fraction1.intValue());
      assertEquals(3, fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(3.0, fraction1.doubleValue(), 0.01D);
      assertEquals(3, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertNotNull(string0);
  }

  @Test
  public void test51()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      assertEquals(5, fraction0.getDenominator());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(1.6F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(8, fraction1.getNumerator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.byteValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1.6, fraction1.doubleValue(), 0.01D);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction1);
  }

  @Test
  public void test52()  throws Throwable  {
      String string0 = "0";
      Fraction fraction0 = Fraction.getFraction(string0);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      float float0 = fraction0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getNumerator());
  }

  @Test
  public void test53()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction1);
      
      String string0 = fraction1.toString();
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals("0/1", string0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertNotNull(string0);
  }

  @Test
  public void test54()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertNotNull(fraction0);
      
      double double0 = fraction0.doubleValue();
      assertEquals(0.5, double0, 0.01D);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
  }

  @Test
  public void test55()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(4, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      long long0 = fraction0.longValue();
      assertEquals(0L, long0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(4, fraction0.getNumerator());
  }
}
