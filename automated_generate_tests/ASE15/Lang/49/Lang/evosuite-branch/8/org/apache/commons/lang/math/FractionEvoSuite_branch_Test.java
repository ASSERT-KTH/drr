/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:44:45 GMT 2014
 */

package org.apache.commons.lang.math;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.lang.math.Fraction;



import org.evosuite.runtime.mock.java.lang.MockArithmeticException;

import org.junit.runner.RunWith;


public class FractionEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(4, fraction0.getDenominator());
      
      Fraction fraction1 = fraction0.negate();
      assertNotNull(fraction1);
      assertEquals(-2, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals((-0.5F), fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals((-0.5), fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      
      String string0 = fraction1.toProperString();
      assertNotNull(string0);
      assertEquals(-2, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals((-0.5F), fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals((-0.5), fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals("-2/4", string0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
  }

  @Test
  public void test01()  throws Throwable  {
      double double0 = (-1.0);
      Fraction fraction0 = Fraction.getFraction(double0);
      assertNotNull(fraction0);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.getProperWhole());
      assertEquals(-1, fraction0.byteValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      
      String string0 = fraction0.toProperString();
      assertNotNull(string0);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.getProperWhole());
      assertEquals(-1, fraction0.byteValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals("-1", string0);
  }

  @Test
  public void test02()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      
      Fraction fraction1 = fraction0.invert();
      assertNotNull(fraction1);
      assertEquals(1, fraction1.intValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertTrue(fraction1.equals((Object)fraction0));
      assertTrue(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      
      String string0 = fraction1.toProperString();
      assertNotNull(string0);
      assertEquals(1, fraction1.intValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals("1", string0);
      assertTrue(fraction1.equals((Object)fraction0));
      assertTrue(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = 0;
      int int1 = 1022;
      Fraction fraction0 = Fraction.getFraction(int0, int1);
      assertNotNull(fraction0);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1022, fraction0.getDenominator());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      String string0 = fraction0.toProperString();
      assertNotNull(string0);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1022, fraction0.getDenominator());
      assertEquals("0", string0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test04()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = fraction0.negate();
      assertNotNull(fraction1);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(-2, fraction1.getNumerator());
      assertEquals((-0.6666666666666666), fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(3, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals((-0.6666667F), fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      
      String string0 = fraction1.toString();
      assertNotNull(string0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(-2, fraction1.getNumerator());
      assertEquals((-0.6666666666666666), fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(3, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals((-0.6666667F), fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals("-2/3", string0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test
  public void test05()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      
      Fraction fraction1 = Fraction.ONE_FIFTH;
      assertNotNull(fraction1);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.2F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.2, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(5, fraction1.getDenominator());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      
      int int0 = fraction0.compareTo((Object) fraction1);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.2F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.2, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1), int0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
  }

  @Test
  public void test06()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      assertNotNull(fraction0);
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.shortValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(4, fraction0.getDenominator());
      
      Fraction fraction1 = Fraction.ONE_HALF;
      assertNotNull(fraction1);
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      
      int int0 = fraction0.compareTo((Object) fraction1);
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.shortValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, int0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test
  public void test07()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.shortValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01D);
      
      Fraction fraction1 = fraction0.invert();
      assertNotNull(fraction1);
      assertEquals(0, fraction0.shortValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01D);
      assertEquals(3L, fraction1.longValue());
      assertEquals(3, fraction1.intValue());
      assertEquals(3, fraction1.getProperWhole());
      assertEquals(3, fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(3, fraction1.shortValue());
      assertEquals(3.0F, fraction1.floatValue(), 0.01F);
      assertEquals(3, fraction1.getNumerator());
      assertEquals(3.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = Fraction.THREE_QUARTERS;
      assertNotNull(fraction2);
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction2.shortValue());
      assertEquals(0, fraction2.byteValue());
      assertEquals(4, fraction2.getDenominator());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(3, fraction2.getNumerator());
      assertEquals(0.75F, fraction2.floatValue(), 0.01F);
      assertEquals(3, fraction2.getProperNumerator());
      assertEquals(0.75, fraction2.doubleValue(), 0.01D);
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      
      int int0 = fraction1.compareTo((Object) fraction2);
      assertEquals(0, fraction0.shortValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01D);
      assertEquals(3L, fraction1.longValue());
      assertEquals(3, fraction1.intValue());
      assertEquals(3, fraction1.getProperWhole());
      assertEquals(3, fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(3, fraction1.shortValue());
      assertEquals(3.0F, fraction1.floatValue(), 0.01F);
      assertEquals(3, fraction1.getNumerator());
      assertEquals(3.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction2.shortValue());
      assertEquals(0, fraction2.byteValue());
      assertEquals(4, fraction2.getDenominator());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(3, fraction2.getNumerator());
      assertEquals(0.75F, fraction2.floatValue(), 0.01F);
      assertEquals(3, fraction2.getProperNumerator());
      assertEquals(0.75, fraction2.doubleValue(), 0.01D);
      assertEquals(1, int0);
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
  }

  @Test
  public void test08()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getProperWhole());
      
      Fraction fraction1 = fraction0.invert();
      assertNotNull(fraction1);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.shortValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getProperWhole());
      assertTrue(fraction1.equals((Object)fraction0));
      assertTrue(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      
      int int0 = fraction0.compareTo((Object) fraction1);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.shortValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, int0);
      assertTrue(fraction1.equals((Object)fraction0));
      assertTrue(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
  }

  @Test
  public void test09()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      
      int int0 = fraction0.hashCode();
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(23312, int0);
  }

  @Test
  public void test10()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertNotNull(fraction0);
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      
      String string0 = fraction0.toProperString();
      assertNotNull(string0);
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals("1/2", string0);
      
      boolean boolean0 = fraction0.equals((Object) string0);
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertFalse(boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.divideBy(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The fraction to divide by must not be zero
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.divideBy(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 2344;
      Fraction fraction0 = Fraction.getReducedFraction(int0, int0);
      assertNotNull(fraction0);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      
      Fraction fraction1 = fraction0.divideBy(fraction0);
      assertNotNull(fraction1);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertTrue(fraction0.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test
  public void test14()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      
      Fraction fraction1 = Fraction.THREE_QUARTERS;
      assertNotNull(fraction1);
      assertEquals(0, fraction1.intValue());
      assertEquals(0.75, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.75F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.byteValue());
      assertEquals(3, fraction1.getProperNumerator());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = fraction1.multiplyBy(fraction0);
      assertNotNull(fraction2);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0, fraction2.shortValue());
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals(0.75, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.75F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.byteValue());
      assertEquals(3, fraction1.getProperNumerator());
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertNotSame(fraction0, fraction1);
      assertSame(fraction0, fraction2);
      assertSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
  }

  @Test
  public void test15()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperNumerator());
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.multiplyBy(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertNotNull(fraction0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(5, fraction0.getDenominator());
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertNotNull(fraction1);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.shortValue());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0.4, fraction1.doubleValue(), 0.01D);
      assertEquals(5, fraction1.getDenominator());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.4F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(5, fraction0.getDenominator());
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
  }

  @Test
  public void test17()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getDenominator());
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertNotNull(fraction1);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.shortValue());
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertNotNull(fraction2);
      assertEquals(0, fraction2.byteValue());
      assertEquals(2, fraction2.getDenominator());
      assertEquals(0.5F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction2.shortValue());
      assertEquals(0.5, fraction2.doubleValue(), 0.01D);
      assertEquals(1, fraction2.getNumerator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(1, fraction2.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.shortValue());
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
  }

  @Test
  public void test18()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertNotNull(fraction1);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertTrue(fraction0.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test
  public void test19()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertNotNull(fraction1);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
  }

  @Test
  public void test20()  throws Throwable  {
      int int0 = 2344;
      Fraction fraction0 = Fraction.getReducedFraction(int0, int0);
      assertNotNull(fraction0);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.add(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      double double0 = (-3318.812371337401);
      Fraction fraction0 = Fraction.getFraction(double0);
      assertNotNull(fraction0);
      assertEquals((-3318.8123F), fraction0.floatValue(), 0.01F);
      assertEquals(7893, fraction0.getProperNumerator());
      assertEquals((-3318L), fraction0.longValue());
      assertEquals((-3318.812371346233), fraction0.doubleValue(), 0.01D);
      assertEquals(-32245581, fraction0.getNumerator());
      assertEquals(9716, fraction0.getDenominator());
      assertEquals(-3318, fraction0.getProperWhole());
      assertEquals(-3318, fraction0.intValue());
      assertEquals(-3318, fraction0.shortValue());
      assertEquals(10, fraction0.byteValue());
      
      int int0 = (-1199);
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.pow(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mulPos
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      double double0 = (-517.31);
      Fraction fraction0 = Fraction.getFraction(double0);
      assertNotNull(fraction0);
      assertEquals(-51731, fraction0.getNumerator());
      assertEquals((-517.31), fraction0.doubleValue(), 0.01D);
      assertEquals(100, fraction0.getDenominator());
      assertEquals(31, fraction0.getProperNumerator());
      assertEquals(-517, fraction0.shortValue());
      assertEquals(-5, fraction0.byteValue());
      assertEquals((-517L), fraction0.longValue());
      assertEquals(-517, fraction0.intValue());
      assertEquals((-517.31F), fraction0.floatValue(), 0.01F);
      assertEquals(-517, fraction0.getProperWhole());
      
      Fraction fraction1 = fraction0.abs();
      assertNotNull(fraction1);
      assertEquals(517, fraction1.shortValue());
      assertEquals(5, fraction1.byteValue());
      assertEquals(31, fraction1.getProperNumerator());
      assertEquals(517, fraction1.intValue());
      assertEquals(517.31, fraction1.doubleValue(), 0.01D);
      assertEquals(517L, fraction1.longValue());
      assertEquals(51731, fraction1.getNumerator());
      assertEquals(517, fraction1.getProperWhole());
      assertEquals(517.31F, fraction1.floatValue(), 0.01F);
      assertEquals(100, fraction1.getDenominator());
      assertEquals(-51731, fraction0.getNumerator());
      assertEquals((-517.31), fraction0.doubleValue(), 0.01D);
      assertEquals(100, fraction0.getDenominator());
      assertEquals(31, fraction0.getProperNumerator());
      assertEquals(-517, fraction0.shortValue());
      assertEquals(-5, fraction0.byteValue());
      assertEquals((-517L), fraction0.longValue());
      assertEquals(-517, fraction0.intValue());
      assertEquals((-517.31F), fraction0.floatValue(), 0.01F);
      assertEquals(-517, fraction0.getProperWhole());
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.multiplyBy(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      
      int int0 = 485;
      Fraction fraction1 = fraction0.pow(int0);
      assertNotNull(fraction1);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertSame(fraction1, fraction0);
      assertSame(fraction0, fraction1);
  }

  @Test
  public void test24()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      
      int int0 = (-1199);
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.pow(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Unable to invert zero.
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      assertNotNull(fraction0);
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01D);
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getDenominator());
      
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.pow(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertNotNull(fraction0);
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperNumerator());
      
      int int0 = fraction0.intValue();
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, int0);
      
      Fraction fraction1 = fraction0.pow(int0);
      assertNotNull(fraction1);
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test
  public void test27()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      
      Fraction fraction1 = fraction0.abs();
      assertNotNull(fraction1);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getProperWhole());
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
  }

  @Test
  public void test28()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(4, fraction0.getDenominator());
      
      Fraction fraction1 = fraction0.reduce();
      assertNotNull(fraction1);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = 0;
      int int1 = 1022;
      Fraction fraction0 = Fraction.getFraction(int0, int1);
      assertNotNull(fraction0);
      assertEquals(1022, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      Fraction fraction1 = fraction0.reduce();
      assertNotNull(fraction1);
      assertEquals(1022, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getProperWhole());
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(int1 == int0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(int0 == int1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test
  public void test30()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      
      Fraction fraction1 = fraction0.reduce();
      assertNotNull(fraction1);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertSame(fraction1, fraction0);
      assertSame(fraction0, fraction1);
  }

  @Test
  public void test31()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      
      Fraction fraction1 = fraction0.reduce();
      assertNotNull(fraction1);
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertSame(fraction1, fraction0);
      assertSame(fraction0, fraction1);
  }

  @Test
  public void test32()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertNotNull(fraction0);
      assertEquals(2, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      
      String string0 = fraction0.toString();
      assertNotNull(string0);
      assertEquals(2, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals("1/2", string0);
      
      Fraction fraction1 = Fraction.getFraction(string0);
      assertNotNull(fraction1);
      assertEquals(2, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertTrue(fraction0.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = "0 }[";
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The fraction could not be parsed as the format X Y/Z
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      String string0 = "Unalnto inv[r( zero.";
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Unalnto inv[r( zero.\"
         //
      }
  }

  @Test
  public void test35()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The string must not be null
         //
      }
  }

  @Test
  public void test36()  throws Throwable  {
      double double0 = 1.7976931348623157E308;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(double0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The value must not be greater than Integer.MAX_VALUE or NaN
         //
      }
  }

  @Test
  public void test37()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      int int1 = (-2147483621);
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      int int0 = 1775;
      int int1 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
      }
  }

  @Test
  public void test39()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Fraction fraction0 = Fraction.getReducedFraction(int0, int0);
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.byteValue());
  }

  @Test
  public void test40()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(5, fraction0.getDenominator());
      
      int int0 = fraction0.intValue();
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, int0);
      
      Fraction fraction1 = Fraction.getFraction((double) int0);
      assertNotNull(fraction1);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
  }

  @Test
  public void test41()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
      }
  }

  @Test
  public void test42()  throws Throwable  {
      double double0 = (-4116.1479988154);
      Fraction fraction0 = Fraction.getFraction(double0);
      assertNotNull(fraction0);
      assertEquals(-4116, fraction0.intValue());
      assertEquals(6696, fraction0.getDenominator());
      assertEquals(-20, fraction0.byteValue());
      assertEquals((-4116L), fraction0.longValue());
      assertEquals((-4116.147998805257), fraction0.doubleValue(), 0.01D);
      assertEquals(991, fraction0.getProperNumerator());
      assertEquals(-4116, fraction0.getProperWhole());
      assertEquals(-4116, fraction0.shortValue());
      assertEquals((-4116.148F), fraction0.floatValue(), 0.01F);
      assertEquals(-27561727, fraction0.getNumerator());
      
      int int0 = fraction0.hashCode();
      assertEquals(-4116, fraction0.intValue());
      assertEquals(6696, fraction0.getDenominator());
      assertEquals(-20, fraction0.byteValue());
      assertEquals((-4116L), fraction0.longValue());
      assertEquals((-4116.147998805257), fraction0.doubleValue(), 0.01D);
      assertEquals(991, fraction0.getProperNumerator());
      assertEquals(-4116, fraction0.getProperWhole());
      assertEquals(-4116, fraction0.shortValue());
      assertEquals((-4116.148F), fraction0.floatValue(), 0.01F);
      assertEquals(-27561727, fraction0.getNumerator());
      assertEquals((-1019753930), int0);
      
      int int1 = 5;
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = Fraction.getFraction(int0, int1, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Numerator too large to represent as an Integer.
         //
      }
  }

  @Test
  public void test43()  throws Throwable  {
      double double0 = (-4116.1479988154);
      Fraction fraction0 = Fraction.getFraction(double0);
      assertNotNull(fraction0);
      assertEquals((-4116.147998805257), fraction0.doubleValue(), 0.01D);
      assertEquals(-27561727, fraction0.getNumerator());
      assertEquals(-4116, fraction0.getProperWhole());
      assertEquals(-4116, fraction0.shortValue());
      assertEquals((-4116.148F), fraction0.floatValue(), 0.01F);
      assertEquals(-4116, fraction0.intValue());
      assertEquals(6696, fraction0.getDenominator());
      assertEquals((-4116L), fraction0.longValue());
      assertEquals(991, fraction0.getProperNumerator());
      assertEquals(-20, fraction0.byteValue());
      
      String string0 = fraction0.toProperString();
      assertNotNull(string0);
      assertEquals((-4116.147998805257), fraction0.doubleValue(), 0.01D);
      assertEquals(-27561727, fraction0.getNumerator());
      assertEquals(-4116, fraction0.getProperWhole());
      assertEquals(-4116, fraction0.shortValue());
      assertEquals((-4116.148F), fraction0.floatValue(), 0.01F);
      assertEquals(-4116, fraction0.intValue());
      assertEquals(6696, fraction0.getDenominator());
      assertEquals((-4116L), fraction0.longValue());
      assertEquals(991, fraction0.getProperNumerator());
      assertEquals(-20, fraction0.byteValue());
      assertEquals("-4116 991/6696", string0);
      
      Fraction fraction1 = Fraction.getFraction(string0);
      assertNotNull(fraction1);
      assertEquals((-4116.147998805257), fraction0.doubleValue(), 0.01D);
      assertEquals(-27561727, fraction0.getNumerator());
      assertEquals(-4116, fraction0.getProperWhole());
      assertEquals(-4116, fraction0.shortValue());
      assertEquals((-4116.148F), fraction0.floatValue(), 0.01F);
      assertEquals(-4116, fraction0.intValue());
      assertEquals(6696, fraction0.getDenominator());
      assertEquals((-4116L), fraction0.longValue());
      assertEquals(991, fraction0.getProperNumerator());
      assertEquals(-20, fraction0.byteValue());
      assertEquals(-4116, fraction1.getProperWhole());
      assertEquals(991, fraction1.getProperNumerator());
      assertEquals(6696, fraction1.getDenominator());
      assertEquals(-20, fraction1.byteValue());
      assertEquals((-4116.148F), fraction1.floatValue(), 0.01F);
      assertEquals(-4116, fraction1.shortValue());
      assertEquals(-27561727, fraction1.getNumerator());
      assertEquals((-4116L), fraction1.longValue());
      assertEquals(-4116, fraction1.intValue());
      assertEquals((-4116.147998805257), fraction1.doubleValue(), 0.01D);
      assertTrue(fraction0.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test
  public void test44()  throws Throwable  {
      int int0 = (-1957);
      int int1 = 1;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(int0, int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The numerator must not be negative
         //
      }
  }

  @Test
  public void test45()  throws Throwable  {
      int int0 = (-24);
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(int0, int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be negative
         //
      }
  }

  @Test
  public void test46()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperNumerator());
      
      int int0 = fraction0.getProperWhole();
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = Fraction.getFraction(int0, int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
      }
  }

  @Test
  public void test47()  throws Throwable  {
      int int0 = 243;
      Fraction fraction0 = Fraction.getFraction(int0, int0, int0);
      assertNotNull(fraction0);
      assertEquals(244.0F, fraction0.floatValue(), 0.01F);
      assertEquals(59292, fraction0.getNumerator());
      assertEquals(244, fraction0.intValue());
      assertEquals(244, fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(244.0, fraction0.doubleValue(), 0.01D);
      assertEquals(-12, fraction0.byteValue());
      assertEquals(243, fraction0.getDenominator());
      assertEquals(244, fraction0.getProperWhole());
      assertEquals(244L, fraction0.longValue());
  }

  @Test
  public void test48()  throws Throwable  {
      int int0 = (-1957);
      Fraction fraction0 = Fraction.getFraction(int0, int0);
      assertNotNull(fraction0);
      assertEquals(1, fraction0.intValue());
      assertEquals(1957, fraction0.getDenominator());
      assertEquals(1957, fraction0.getNumerator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
  }

  @Test
  public void test49()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertNotNull(fraction0);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.byteValue());
      
      byte byte0 = fraction0.byteValue();
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals((byte)0, byte0);
      
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        Fraction fraction1 = Fraction.getFraction((int) byte0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
      }
  }

  @Test
  public void test50()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
      }
  }

  @Test
  public void test51()  throws Throwable  {
      int int0 = 18;
      int int1 = 0;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
      }
  }

  @Test
  public void test52()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      
      String string0 = fraction0.toProperString();
      assertNotNull(string0);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals("1", string0);
      
      Fraction fraction1 = Fraction.getFraction(string0);
      assertNotNull(fraction1);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      assertTrue(fraction1.equals((Object)fraction0));
      assertTrue(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
  }

  @Test
  public void test53()  throws Throwable  {
      int int0 = 2344;
      Fraction fraction0 = Fraction.getReducedFraction(int0, int0);
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      
      Fraction fraction1 = Fraction.ONE;
      assertNotNull(fraction1);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getNumerator());
      assertTrue(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      
      boolean boolean0 = fraction0.equals((Object) fraction1);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getNumerator());
      assertTrue(boolean0);
      assertTrue(fraction0.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test
  public void test54()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertNotNull(fraction0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      
      Fraction fraction1 = fraction0.invert();
      assertNotNull(fraction1);
      assertEquals(2.0F, fraction1.floatValue(), 0.01F);
      assertEquals(2, fraction1.getNumerator());
      assertEquals(2L, fraction1.longValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2, fraction1.shortValue());
      assertEquals(2.0, fraction1.doubleValue(), 0.01D);
      assertEquals(2, fraction1.byteValue());
      assertEquals(2, fraction1.intValue());
      assertEquals(2, fraction1.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      
      String string0 = fraction1.toProperString();
      assertNotNull(string0);
      assertEquals(2.0F, fraction1.floatValue(), 0.01F);
      assertEquals(2, fraction1.getNumerator());
      assertEquals(2L, fraction1.longValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2, fraction1.shortValue());
      assertEquals(2.0, fraction1.doubleValue(), 0.01D);
      assertEquals(2, fraction1.byteValue());
      assertEquals(2, fraction1.intValue());
      assertEquals(2, fraction1.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals("2", string0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
  }

  @Test
  public void test55()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.shortValue());
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertNotNull(fraction1);
      assertEquals(2.0, fraction1.doubleValue(), 0.01D);
      assertEquals(2, fraction1.byteValue());
      assertEquals(2L, fraction1.longValue());
      assertEquals(2, fraction1.getProperWhole());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(2, fraction1.intValue());
      assertEquals(2, fraction1.shortValue());
      assertEquals(2.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.shortValue());
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
  }

  @Test
  public void test56()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      
      float float0 = fraction0.floatValue();
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test57()  throws Throwable  {
      int int0 = 2344;
      Fraction fraction0 = Fraction.getReducedFraction(int0, int0);
      assertNotNull(fraction0);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      
      Fraction fraction1 = Fraction.FOUR_FIFTHS;
      assertNotNull(fraction1);
      assertEquals(0, fraction1.byteValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0.8, fraction1.doubleValue(), 0.01D);
      assertEquals(4, fraction1.getProperNumerator());
      assertEquals(4, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.8F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getProperWhole());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      
      boolean boolean0 = fraction0.equals((Object) fraction1);
      assertEquals(0, fraction1.byteValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0.8, fraction1.doubleValue(), 0.01D);
      assertEquals(4, fraction1.getProperNumerator());
      assertEquals(4, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.8F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertFalse(boolean0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
  }

  @Test
  public void test58()  throws Throwable  {
      int int0 = 2344;
      Fraction fraction0 = Fraction.getReducedFraction(int0, int0);
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      
      double double0 = fraction0.doubleValue();
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test59()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.byteValue());
      
      long long0 = fraction0.longValue();
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1L, long0);
  }

  @Test
  public void test60()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertNotNull(fraction1);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.byteValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
  }
}
