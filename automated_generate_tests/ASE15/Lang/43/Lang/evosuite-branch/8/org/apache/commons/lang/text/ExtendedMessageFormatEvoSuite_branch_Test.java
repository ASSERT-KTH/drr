/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 07:14:24 GMT 2014
 */

package org.apache.commons.lang.text;

import static org.junit.Assert.*;
import org.junit.Test;
import java.text.Format;
import java.text.MessageFormat;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import org.apache.commons.lang.text.ExtendedMessageFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;


public class ExtendedMessageFormatEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      String string0 = "DKjuD/vMRN'_8_";
      Locale locale0 = new Locale(string0, string0, string0);
      assertEquals("DKJUD/VMRN'_8_", locale0.getCountry());
      assertEquals("DKjuD/vMRN'_8_", locale0.getVariant());
      assertEquals("dkjud/vmrn'_8__DKJUD/VMRN'_8__DKjuD/vMRN'_8_", locale0.toString());
      assertEquals("dkjud/vmrn'_8_", locale0.getLanguage());
      assertNotNull(locale0);
      
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0, locale0, (Map) hashMap0);
      assertEquals("DKJUD/VMRN'_8_", locale0.getCountry());
      assertEquals("DKjuD/vMRN'_8_", locale0.getVariant());
      assertEquals("dkjud/vmrn'_8__DKJUD/VMRN'_8__DKjuD/vMRN'_8_", locale0.toString());
      assertEquals("dkjud/vmrn'_8_", locale0.getLanguage());
      assertEquals("DKjuD/vMRN_8_", extendedMessageFormat0.toPattern());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertNotNull(extendedMessageFormat0);
      
      String string1 = "w)tmq?H92g!{2,-&z:%";
      assertNotSame(string1, string0);
      
      // Undeclared exception!
      try {
        extendedMessageFormat0.applyPattern(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unterminated format element at position 14
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      String string0 = "61k#2<~{}b";
      Locale locale0 = Locale.forLanguageTag(string0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertNotNull(hashMap0);
      
      ExtendedMessageFormat extendedMessageFormat0 = null;
      try {
        extendedMessageFormat0 = new ExtendedMessageFormat(string0, locale0, (Map) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format argument index at position 8: }
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      String string0 = "D(-~q{ ";
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      ExtendedMessageFormat extendedMessageFormat0 = null;
      try {
        extendedMessageFormat0 = new ExtendedMessageFormat(string0, (Map) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unterminated format element at position 6
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertNotNull(locale0);
      
      String string0 = "B_z$?Z{5 +%vUf1VZ.";
      HashMap<MessageFormat, Integer> hashMap0 = new HashMap<MessageFormat, Integer>();
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      ExtendedMessageFormat extendedMessageFormat0 = null;
      try {
        extendedMessageFormat0 = new ExtendedMessageFormat(string0, locale0, (Map) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format argument index at position 7: 5 +
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      String string0 = "DKjuD/vMRN'_8[_";
      Locale locale0 = new Locale(string0, string0, string0);
      assertEquals("dkjud/vmrn'_8[__DKJUD/VMRN'_8[__DKjuD/vMRN'_8[_", locale0.toString());
      assertEquals("dkjud/vmrn'_8[_", locale0.getLanguage());
      assertEquals("DKJUD/VMRN'_8[_", locale0.getCountry());
      assertEquals("DKjuD/vMRN'_8[_", locale0.getVariant());
      assertNotNull(locale0);
      
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertNotNull(hashMap0);
      
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0, locale0, (Map) hashMap0);
      assertEquals("DKjuD/vMRN_8[_", extendedMessageFormat0.toPattern());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals("dkjud/vmrn'_8[__DKJUD/VMRN'_8[__DKjuD/vMRN'_8[_", locale0.toString());
      assertEquals("dkjud/vmrn'_8[_", locale0.getLanguage());
      assertEquals("DKJUD/VMRN'_8[_", locale0.getCountry());
      assertEquals("DKjuD/vMRN'_8[_", locale0.getVariant());
      assertNotNull(extendedMessageFormat0);
      
      String string1 = "wtmq?H92g!{2,U0}%";
      assertNotSame(string1, string0);
      
      // Undeclared exception!
      try {
        extendedMessageFormat0.applyPattern(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unknown format type: U0
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      String string0 = "0Grr2xk&f=H'~w";
      Locale locale0 = new Locale(string0);
      assertEquals("0grr2xk&f=h'~w", locale0.toString());
      assertEquals("0grr2xk&f=h'~w", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0, locale0);
      assertEquals("0Grr2xk&f=H~w", extendedMessageFormat0.toPattern());
      assertEquals("0grr2xk&f=h'~w", locale0.toString());
      assertEquals("0grr2xk&f=h'~w", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(extendedMessageFormat0);
      
      Format[] formatArray0 = new Format[20];
      // Undeclared exception!
      try {
        extendedMessageFormat0.setFormatsByArgumentIndex(formatArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      String string0 = "m>R_t-z";
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0);
      assertEquals("m>R_t-z", extendedMessageFormat0.toPattern());
      assertNotNull(extendedMessageFormat0);
      
      int int0 = (-3);
      // Undeclared exception!
      try {
        extendedMessageFormat0.setFormat(int0, (Format) extendedMessageFormat0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      String string0 = "#ugq1MjUWG}e},5T&B4";
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0);
      assertEquals("#ugq1MjUWG}e},5T&B4", extendedMessageFormat0.toPattern());
      assertNotNull(extendedMessageFormat0);
      
      String string1 = extendedMessageFormat0.toPattern();
      assertEquals("#ugq1MjUWG}e},5T&B4", extendedMessageFormat0.toPattern());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertEquals("#ugq1MjUWG}e},5T&B4", string1);
      assertNotNull(string1);
  }

  @Test
  public void test8()  throws Throwable  {
      String string0 = "!kGPU9[{2}p!";
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0, (Map) hashMap0);
      assertEquals("!kGPU9[{2}p!", extendedMessageFormat0.toPattern());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertNotNull(extendedMessageFormat0);
      
      int int0 = 93;
      // Undeclared exception!
      try {
        extendedMessageFormat0.setFormatByArgumentIndex(int0, (Format) extendedMessageFormat0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      String string0 = "J9)Rg.El";
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0);
      assertEquals("J9)Rg.El", extendedMessageFormat0.toPattern());
      assertNotNull(extendedMessageFormat0);
      
      Format[] formatArray0 = new Format[7];
      // Undeclared exception!
      try {
        extendedMessageFormat0.setFormats(formatArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
