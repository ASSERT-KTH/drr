/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:34:07 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.lang.StringUtils;




import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;


public class StringUtilsEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      String string0 = "`Z Vw;LkM?6dP^fZ'n";
      String string1 = "oryxy0r`'tia&0ybf@ang.charutils";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeEndIgnoreCase(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertEquals("`Z Vw;LkM?6dP^fZ'n", string2);
  }

  @Test
  public void test001()  throws Throwable  {
      String string0 = "Minimum abbreviation width with offset is 7";
      String string1 = null;
      boolean boolean0 = StringUtils.endsWith(string1, string0);
      assertFalse(boolean0);
  }

  @Test
  public void test002()  throws Throwable  {
      String string0 = null;
      String string1 = "_eGf#{s:\"/:\\S[ J";
      boolean boolean0 = StringUtils.endsWith(string1, string0);
      assertFalse(boolean0);
  }

  @Test
  public void test003()  throws Throwable  {
      String string0 = "O26vJzC&}0b[Mx<(yme";
      int int0 = StringUtils.countMatches(string0, string0);
      assertEquals(1, int0);
      
      String string1 = "x5P{6J3B 0 V";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string0, string1, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      boolean boolean0 = StringUtils.startsWithAny(string1, stringArray0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
  }

  @Test
  public void test004()  throws Throwable  {
      String string0 = "...";
      String string1 = StringUtils.substringAfter(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      
      char char0 = ']';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string1, char0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      boolean boolean0 = StringUtils.startsWithAny(string0, stringArray0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
  }

  @Test
  public void test005()  throws Throwable  {
      String string0 = "nD-8'X@V#v";
      String string1 = StringUtils.replaceChars(string0, string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("nD-8'X@V#v", string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string1, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(stringArray0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.startsWithAny(string0, stringArray0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertTrue(boolean0);
  }

  @Test
  public void test006()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = new String[6];
      boolean boolean0 = StringUtils.startsWithAny(string0, stringArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test007()  throws Throwable  {
      String string0 = "6COk ZNa&qwbi<!sED";
      int int0 = StringUtils.lastIndexOf(string0, string0);
      assertEquals(0, int0);
      
      String string1 = null;
      char char0 = '.';
      String string2 = StringUtils.rightPad(string1, int0, char0);
      assertNull(string2);
      
      Object[] objectArray0 = new Object[4];
      String string3 = StringUtils.join(objectArray0, string2);
      assertNotSame(string3, string0);
      assertNotSame(string0, string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string0.equals((Object)string3));
      assertEquals("", string3);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase(string2, string3);
      assertNotSame(string3, string0);
      assertNotSame(string0, string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string0.equals((Object)string3));
      assertFalse(boolean0);
  }

  @Test
  public void test008()  throws Throwable  {
      String string0 = "org.apache.commons.lang.Strin)UtJls";
      String string1 = null;
      boolean boolean0 = StringUtils.startsWith(string0, string1);
      assertFalse(boolean0);
  }

  @Test
  public void test009()  throws Throwable  {
      String string0 = "6COk ZNa&qwbi<!sED";
      int int0 = StringUtils.lastIndexOf(string0, string0);
      assertEquals(0, int0);
      
      String string1 = null;
      char char0 = '.';
      String string2 = StringUtils.rightPad(string1, int0, char0);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase(string1, string2);
      assertTrue(boolean0);
  }

  @Test
  public void test010()  throws Throwable  {
      String string0 = " ";
      String string1 = "ort+.qgfiauf,|1t`h";
      assertNotSame(string1, string0);
      
      int int0 = StringUtils.getLevenshteinDistance(string1, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(18, int0);
  }

  @Test
  public void test011()  throws Throwable  {
      String string0 = "PrZ^5";
      int int0 = (-1522);
      String string1 = StringUtils.right(string0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      int int1 = StringUtils.getLevenshteinDistance(stringArray0[0], string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(6, int1);
  }

  @Test
  public void test012()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.defaultString(string0, string0);
      assertNull(string1);
      
      String string2 = "ort+.qgf1tuf,|56`h";
      // Undeclared exception!
      try {
        int int0 = StringUtils.getLevenshteinDistance(string2, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
      }
  }

  @Test
  public void test013()  throws Throwable  {
      String string0 = "{`$8hs_";
      String string1 = null;
      // Undeclared exception!
      try {
        int int0 = StringUtils.getLevenshteinDistance(string1, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
      }
  }

  @Test
  public void test014()  throws Throwable  {
      String string0 = "Minimum abbreviation width with offset is 7";
      String string1 = "Array element ";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.chop(string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is ", string2);
      
      String[] stringArray0 = new String[10];
      stringArray0[0] = string2;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string1;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string2;
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = string0;
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = string1;
      assertNotNull(stringArray0[6]);
      
      stringArray0[7] = string0;
      assertNotNull(stringArray0[7]);
      
      stringArray0[8] = string0;
      assertNotNull(stringArray0[8]);
      
      stringArray0[9] = string1;
      assertNotNull(stringArray0[9]);
      
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals(0, int0);
  }

  @Test
  public void test015()  throws Throwable  {
      String string0 = " ";
      String[] stringArray0 = new String[4];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertSame(string1, string0);
      assertNotNull(string1);
      assertEquals(" ", string1);
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = new String[10];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[1] = stringArray0[0];
      assertNotNull(stringArray0[1]);
      
      stringArray0[3] = stringArray0[2];
      assertNotNull(stringArray0[3]);
      
      stringArray0[5] = stringArray0[2];
      assertNotNull(stringArray0[5]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      stringArray0[6] = string0;
      assertNotNull(stringArray0[6]);
      
      stringArray0[7] = string0;
      assertNotNull(stringArray0[7]);
      
      stringArray0[8] = string0;
      assertNotNull(stringArray0[8]);
      
      stringArray0[9] = string0;
      assertNotNull(stringArray0[9]);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertSame(string1, string0);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test
  public void test017()  throws Throwable  {
      String string0 = "";
      char char0 = '$';
      String string1 = StringUtils.replaceChars(string0, char0, char0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = string1;
      assertNotNull(stringArray0[0]);
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertSame(string2, string1);
      assertSame(string2, string0);
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test
  public void test018()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test019()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test020()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.replace(string0, string0, string0);
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string0, string1);
      assertNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals((-1), int0);
  }

  @Test
  public void test021()  throws Throwable  {
      String string0 = "";
      Object[] objectArray0 = new Object[4];
      char char0 = '1';
      String string1 = StringUtils.join(objectArray0, char0);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("111", string1);
      
      String string2 = StringUtils.swapCase(string0);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.difference(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(string0, string3);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(string3, string0);
      assertSame(string2, string3);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(string3);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string3);
  }

  @Test
  public void test022()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      assertNotNull(objectArray0[1]);
      
      char char0 = '1';
      String string0 = StringUtils.join(objectArray0, char0);
      assertNotNull(string0);
      
      String string1 = StringUtils.swapCase(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.difference(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
  }

  @Test
  public void test023()  throws Throwable  {
      String string0 = ", Length: 0";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      String string1 = StringUtils.join((Collection<?>) linkedList0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      
      String string2 = null;
      String string3 = StringUtils.difference(string1, string2);
      assertSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string1, string0);
      assertSame(string1, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotNull(string3);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertEquals("", string3);
  }

  @Test
  public void test024()  throws Throwable  {
      String string0 = " vs ";
      String string1 = "}%8G8Lo'b";
      assertNotSame(string1, string0);
      
      int int0 = StringUtils.length(string0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertEquals(4, int0);
      
      String string2 = StringUtils.replace(string1, string1, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(string2);
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("}%8G8Lo'b", string2);
      
      String string3 = StringUtils.abbreviate(string2, int0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(string3);
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertEquals("}...", string3);
  }

  @Test
  public void test025()  throws Throwable  {
      String string0 = "minimum a{breviation width is 4";
      int int0 = Integer.MAX_VALUE;
      int int1 = 10;
      String string1 = StringUtils.abbreviate(string0, int0, int1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertEquals("...th is 4", string1);
  }

  @Test
  public void test026()  throws Throwable  {
      String string0 = "*c9CE^%T=p\"z77U',";
      String string1 = StringUtils.lowerCase(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("*c9ce^%t=p\"z77u',", string1);
      
      int int0 = 0;
      // Undeclared exception!
      try {
        String string2 = StringUtils.abbreviate(string1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
      }
  }

  @Test
  public void test027()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      int int1 = StringUtils.indexOf(string0, string0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = null;
      String string2 = StringUtils.replace(string1, string1, string1, int1);
      assertNull(string2);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      String string3 = StringUtils.abbreviate(string2, int0, int0);
      assertNull(string3);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test028()  throws Throwable  {
      String string0 = null;
      char char0 = '3';
      String string1 = StringUtils.reverseDelimited(string0, char0);
      assertNull(string1);
  }

  @Test
  public void test029()  throws Throwable  {
      String string0 = "j4E0W}HXO";
      String string1 = StringUtils.substringBetween(string0, string0);
      assertNull(string1);
      
      String string2 = StringUtils.reverse(string1);
      assertNull(string2);
  }

  @Test
  public void test030()  throws Throwable  {
      String string0 = ", Length: 0";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      String string1 = StringUtils.join((Collection<?>) linkedList0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.reverse(string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotNull(string2);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)string2));
      assertEquals("", string2);
  }

  @Test
  public void test031()  throws Throwable  {
      String string0 = ".q";
      String string1 = "";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.defaultIfEmpty(string1, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertEquals(".q", string2);
  }

  @Test
  public void test032()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.defaultString(string0);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test
  public void test033()  throws Throwable  {
      String string0 = "R";
      boolean boolean0 = StringUtils.isAllUpperCase(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test034()  throws Throwable  {
      String string0 = " Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Ind";
      String string1 = StringUtils.stripEnd(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
  }

  @Test
  public void test035()  throws Throwable  {
      String string0 = " ";
      boolean boolean0 = StringUtils.isAllUpperCase(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test036()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAllUpperCase(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test037()  throws Throwable  {
      String string0 = "rrayu";
      boolean boolean0 = StringUtils.isAllLowerCase(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test038()  throws Throwable  {
      String string0 = ",qpu]";
      String string1 = StringUtils.uncapitalize(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertEquals(",qpu]", string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertFalse(boolean0);
  }

  @Test
  public void test039()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.isAllLowerCase(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test040()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAllLowerCase(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test041()  throws Throwable  {
      String string0 = " Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Ind";
      boolean boolean0 = StringUtils.isWhitespace(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test042()  throws Throwable  {
      String string0 = "minimum a{breviation width is 4";
      String string1 = StringUtils.substringAfter(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isWhitespace(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean0);
  }

  @Test
  public void test043()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isWhitespace(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test044()  throws Throwable  {
      String string0 = " ";
      boolean boolean0 = StringUtils.isNumericSpace(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test045()  throws Throwable  {
      String string0 = "org.ayxy0r`'tia&0ybf@.charutils";
      String string1 = StringUtils.difference(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isNumericSpace(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean0);
  }

  @Test
  public void test046()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isNumericSpace(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test047()  throws Throwable  {
      String string0 = "m";
      boolean boolean0 = StringUtils.isNumericSpace(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test048()  throws Throwable  {
      String string0 = "\\u000";
      String string1 = "2(0M";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeEndIgnoreCase(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals("2(0M", string2);
      
      boolean boolean0 = StringUtils.isNumeric(string2);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
  }

  @Test
  public void test049()  throws Throwable  {
      String string0 = "...";
      char char0 = ']';
      String string1 = StringUtils.repeat(string0, string0, (int) char0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEqualsstring1);
      
      boolean boolean0 = StringUtils.isNumeric(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
  }

  @Test
  public void test050()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isNumeric(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test051()  throws Throwable  {
      String string0 = "...";
      String string1 = StringUtils.substringAfter(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isNumeric(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean0);
  }

  @Test
  public void test052()  throws Throwable  {
      String string0 = "!!B/ewo";
      boolean boolean0 = StringUtils.isAsciiPrintable(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test053()  throws Throwable  {
      String string0 = "_eGf#{s:\"/:\\S[ J";
      boolean boolean0 = StringUtils.isAsciiPrintable(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test054()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      
      String string0 = locale0.getDisplayName(locale0);
      assertNotNull(string0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("Deutsch (Deutschland)", string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(string0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertFalse(boolean0);
  }

  @Test
  public void test055()  throws Throwable  {
      String string0 = "j4E0W}HXO";
      String string1 = StringUtils.substringBetween(string0, string0);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(string1);
      assertFalse(boolean0);
  }

  @Test
  public void test056()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.isAlphanumericSpace(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test057()  throws Throwable  {
      String string0 = "F";
      boolean boolean0 = StringUtils.isAlphanumeric(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test058()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAlphanumeric(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test059()  throws Throwable  {
      String string0 = " Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Ind";
      boolean boolean0 = StringUtils.isAlphanumeric(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test060()  throws Throwable  {
      String string0 = "The String must not be empty";
      boolean boolean0 = StringUtils.isAlphaSpace(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test061()  throws Throwable  {
      String string0 = "org.apache.commons.lang.CharUtils";
      char char0 = 'C';
      String string1 = StringUtils.replaceChars(string0, char0, char0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals("org.apache.commons.lang.CharUtils", string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertFalse(boolean0);
  }

  @Test
  public void test062()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAlphaSpace(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test063()  throws Throwable  {
      String string0 = "Minimum abbreviation width with offset is 7";
      boolean boolean0 = StringUtils.isAlpha(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test064()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAlpha(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test065()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.isAlpha(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test066()  throws Throwable  {
      String string0 = "Minimum abbreviation width with offset is 7";
      String string1 = StringUtils.removeStartIgnoreCase(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.countMatches(string0, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, int0);
  }

  @Test
  public void test067()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.swapCase(string0);
      assertNull(string1);
  }

  @Test
  public void test068()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.uncapitalize(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test
  public void test069()  throws Throwable  {
      String string0 = "j4E0W}HXO";
      String string1 = StringUtils.substringBetween(string0, string0);
      assertNull(string1);
      
      String string2 = StringUtils.uncapitalize(string1);
      assertNull(string2);
  }

  @Test
  public void test070()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      String string1 = StringUtils.rightPad(string0, int0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.capitalize(string1);
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertSame(string2, string0);
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test
  public void test071()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.capitalize(string0);
      assertNull(string1);
  }

  @Test
  public void test072()  throws Throwable  {
      String string0 = null;
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      
      String string1 = StringUtils.lowerCase(string0, locale0);
      assertNull(string1);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
  }

  @Test
  public void test073()  throws Throwable  {
      String string0 = "";
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      
      String string1 = StringUtils.lowerCase(string0, locale0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", string1);
  }

  @Test
  public void test074()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.lowerCase(string0);
      assertNull(string1);
  }

  @Test
  public void test075()  throws Throwable  {
      String string0 = null;
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      String string1 = StringUtils.upperCase(string0, locale0);
      assertNull(string1);
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
  }

  @Test
  public void test076()  throws Throwable  {
      String string0 = "minimum a{breviation width is 4";
      String string1 = StringUtils.substringAfter(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      
      Locale locale0 = Locale.forLanguageTag(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      String string2 = StringUtils.upperCase(string1, locale0);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(string2);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test
  public void test077()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.upperCase(string0);
      assertNull(string1);
  }

  @Test
  public void test078()  throws Throwable  {
      String string0 = "";
      int int0 = (-2662);
      String string1 = StringUtils.center(string0, int0, string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test
  public void test079()  throws Throwable  {
      int int0 = 64;
      String string0 = null;
      String string1 = StringUtils.center(string0, int0, string0);
      assertNull(string1);
  }

  @Test
  public void test080()  throws Throwable  {
      String string0 = " ";
      String string1 = "@~4o0";
      assertNotSame(string1, string0);
      
      int int0 = StringUtils.getLevenshteinDistance(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(5, int0);
      
      char char0 = 'o';
      String string2 = StringUtils.center(string1, int0, char0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals("@~4o0", string2);
  }

  @Test
  public void test081()  throws Throwable  {
      String string0 = ">9Ba}+r";
      char char0 = '5';
      String string1 = StringUtils.reverseDelimited(string0, char0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertEquals(">9Ba}+r", string1);
      
      int int0 = (-893);
      String string2 = StringUtils.center(string1, int0);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotNull(string2);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(">9Ba}+r", string2);
  }

  @Test
  public void test082()  throws Throwable  {
      String string0 = null;
      int int0 = StringUtils.length(string0);
      assertEquals(0, int0);
  }

  @Test
  public void test083()  throws Throwable  {
      String string0 = "org.apache.commons.lang.StringUtils";
      char char0 = 't';
      String string1 = StringUtils.substring(string0, (int) char0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      
      String string2 = StringUtils.leftPad(string0, (int) char0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals("                                                                                 org.apache.commons.lang.StringUtils", string2);
  }

  @Test
  public void test084()  throws Throwable  {
      String string0 = "Minimum abbreviation width with offset is 7";
      String string1 = null;
      int int0 = (-1089);
      String string2 = StringUtils.leftPad(string1, int0, string0);
      assertNull(string2);
  }

  @Test
  public void test085()  throws Throwable  {
      int int0 = 228;
      String string0 = null;
      char char0 = 'R';
      String string1 = StringUtils.leftPad(string0, int0, char0);
      assertNull(string1);
  }

  @Test
  public void test086()  throws Throwable  {
      String string0 = "";
      int int0 = 1934;
      String string1 = StringUtils.rightPad(string0, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEqualsstring1);
      
      String string2 = StringUtils.center(string0, int0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEqualsstring2);
  }

  @Test
  public void test087()  throws Throwable  {
      String string0 = ")*Ph_";
      int int0 = 1934;
      String string1 = StringUtils.center(string0, int0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(")*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_)*Ph_", string1);
  }

  @Test
  public void test088()  throws Throwable  {
      String string0 = "Minimum abbreviation width with offset is 7";
      String string1 = StringUtils.removeStartIgnoreCase(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = (-1089);
      String string2 = StringUtils.rightPad(string0, int0, string1);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Minimum abbreviation width with offset is 7", string2);
  }

  @Test
  public void test089()  throws Throwable  {
      String string0 = "^48";
      int int0 = (-4064);
      String string1 = StringUtils.replace(string0, string0, string0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertEquals("^48", string1);
      
      int int1 = StringUtils.getLevenshteinDistance(string1, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertTrue(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertTrue(string0.equals((Object)string1));
      assertEquals(0, int1);
      
      String string2 = null;
      String string3 = StringUtils.rightPad(string2, int1, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNull(string3);
      assertTrue(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertTrue(string0.equals((Object)string1));
  }

  @Test
  public void test090()  throws Throwable  {
      String string0 = "";
      int int0 = 1934;
      String string1 = StringUtils.strip(string0, string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.center(string1, int0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertEqualsstring2);
  }

  @Test
  public void test091()  throws Throwable  {
      String string0 = "org.ayxy0r`'tia&0ybf@.charutils";
      String string1 = StringUtils.difference(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      
      String string2 = "\\u";
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringBetween(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNull(string3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      
      int int0 = 0;
      String string4 = StringUtils.repeat(string0, string3, int0);
      assertNotSame(string4, string0);
      assertSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string1, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertEquals("", string4);
  }

  @Test
  public void test092()  throws Throwable  {
      String string0 = null;
      int int0 = 851;
      String string1 = StringUtils.repeat(string0, string0, int0);
      assertNull(string1);
  }

  @Test
  public void test093()  throws Throwable  {
      String string0 = "f,";
      int int0 = 64;
      String string1 = StringUtils.repeat(string0, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,", string1);
  }

  @Test
  public void test094()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = '\'';
      charArray0[0] = char0;
      String string0 = " ";
      String string1 = "";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.repeat(string0, string1, (int) charArray0[0]);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotNull(string2);
      assertArrayEquals(new char[] {'\''}, charArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals("                                       ", string2);
  }

  @Test
  public void test095()  throws Throwable  {
      String string0 = "";
      int int0 = 1;
      String string1 = StringUtils.repeat(string0, string0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertEquals("", string1);
  }

  @Test
  public void test096()  throws Throwable  {
      String string0 = "H bD";
      String string1 = StringUtils.stripToNull(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      assertEquals("H bD", string1);
      
      int int0 = (-642);
      String string2 = StringUtils.repeat(string1, int0);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertEquals("", string2);
  }

  @Test
  public void test097()  throws Throwable  {
      String string0 = "bb/EVwvT)(}=1";
      String[] stringArray0 = new String[2];
      int int0 = StringUtils.lastIndexOfAny(string0, stringArray0);
      assertEquals((-1), int0);
      
      String string1 = null;
      String string2 = StringUtils.repeat(string1, int0);
      assertNull(string2);
  }

  @Test
  public void test098()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.chop(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test
  public void test099()  throws Throwable  {
      String string0 = " vs ";
      String string1 = "Yt9$-:UTtyc \"'_9(t";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.chomp(string0, string1);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals(" vs ", string2);
  }

  @Test
  public void test100()  throws Throwable  {
      String string0 = ",x";
      String string1 = null;
      String string2 = StringUtils.chomp(string0, string1);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertNotNull(string2);
      assertEquals(",x", string2);
  }

  @Test
  public void test101()  throws Throwable  {
      String string0 = " ";
      String string1 = StringUtils.chomp(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals(" ", string1);
  }

  @Test
  public void test102()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.chomp(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test
  public void test103()  throws Throwable  {
      String string0 = "eV_nHqxo?ylNJKEV9";
      int int0 = StringUtils.indexOf(string0, string0);
      assertEquals(0, int0);
      
      int int1 = 122;
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.overlay(string0, string0, int1, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertEquals("eV_nHqxo?ylNJKEV9", string1);
  }

  @Test
  public void test104()  throws Throwable  {
      String string0 = "Minimum abbreviation width with offset is 7";
      int int0 = (-1089);
      String string1 = StringUtils.substringAfter(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.overlay(string1, string0, int0, int0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is 7", string2);
  }

  @Test
  public void test105()  throws Throwable  {
      String string0 = "Minimum abbreviation width with offset is 7";
      String string1 = null;
      String string2 = StringUtils.removeStartIgnoreCase(string0, string1);
      assertSame(string2, string0);
      assertSame(string0, string2);
      assertNotNull(string2);
      assertEquals("Minimum abbreviation width with offset is 7", string2);
      
      int int0 = StringUtils.countMatches(string1, string2);
      assertSame(string2, string0);
      assertSame(string0, string2);
      assertEquals(0, int0);
      
      String string3 = StringUtils.overlay(string0, string1, int0, int0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string2, string3);
      assertSame(string2, string0);
      assertNotSame(string0, string3);
      assertSame(string0, string2);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string2.equals((Object)string3));
      assertTrue(string0.equals((Object)string3));
      assertEquals("Minimum abbreviation width with offset is 7", string3);
  }

  @Test
  public void test106()  throws Throwable  {
      String string0 = "or";
      String string1 = StringUtils.stripToNull(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals("or", string1);
      
      String string2 = null;
      int int0 = 2949;
      String string3 = StringUtils.overlay(string2, string1, int0, int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNull(string3);
  }

  @Test
  public void test107()  throws Throwable  {
      String string0 = "wEeP(_WTMT";
      String string1 = "`c=zgK<\"";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.defaultString(string0);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertEquals("wEeP(_WTMT", string2);
      
      String string3 = StringUtils.replaceChars(string2, string1, string1);
      assertNotSame(string2, string1);
      assertSame(string2, string3);
      assertSame(string2, string0);
      assertSame(string3, string2);
      assertSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string0, string3);
      assertNotNull(string3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertEquals("wEeP(_WTMT", string3);
  }

  @Test
  public void test108()  throws Throwable  {
      String string0 = "wEeP(_WTMT";
      String string1 = "cc_<)gu\"'It,w";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.remove(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("cc_<)gu\"'It,w", string2);
      
      String string3 = StringUtils.replaceChars(string2, string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("ccg<)gu\"'It,c", string3);
  }

  @Test
  public void test109()  throws Throwable  {
      String string0 = "Strings must not be null";
      String string1 = StringUtils.defaultString(string0, string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      assertEquals("Strings must not be null", string1);
      
      String string2 = StringUtils.substringBetween(string0, string1, string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNull(string2);
      
      String string3 = StringUtils.replaceChars(string1, string0, string2);
      assertSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertEquals("", string3);
  }

  @Test
  public void test110()  throws Throwable  {
      String string0 = " ";
      String string1 = StringUtils.capitalize(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertEquals(" ", string1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = string1;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string1;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string1;
      assertNotNull(stringArray0[4]);
      
      String string2 = StringUtils.replaceEach(string1, stringArray0, stringArray0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(string2);
      assertTrue(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(" ", string2);
  }

  @Test
  public void test111()  throws Throwable  {
      String string0 = " ";
      char[] charArray0 = new char[8];
      char char0 = '%';
      charArray0[4] = char0;
      String string1 = StringUtils.substringBefore(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = ", Length: 0";
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.leftPad(string2, (int) charArray0[4], string0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotNull(string3);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '%', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertEquals("                          , Length: 0", string3);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = string1;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string1;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = string1;
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = string3;
      assertNotNull(stringArray0[6]);
      
      stringArray0[7] = string3;
      assertNotNull(stringArray0[7]);
      
      stringArray0[8] = string0;
      assertNotNull(stringArray0[8]);
      
      // Undeclared exception!
      try {
        String string4 = StringUtils.replaceEachRepeatedly(string3, stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0:                           , Length: 0
         //
      }
  }

  @Test
  public void test112()  throws Throwable  {
      String string0 = " ";
      String string1 = StringUtils.capitalize(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertEquals(" ", string1);
      
      String string2 = "@~4o0";
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = new String[5];
      stringArray0[3] = string1;
      assertNotNull(stringArray0[3]);
      
      String string3 = StringUtils.replaceEach(string2, stringArray0, stringArray0);
      assertSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("@~4o0", string3);
  }

  @Test
  public void test113()  throws Throwable  {
      String string0 = null;
      int int0 = 0;
      int int1 = StringUtils.ordinalIndexOf(string0, string0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
      
      String string1 = "\\u00";
      String string2 = StringUtils.replaceChars(string1, string0, string1);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertNotNull(string2);
      assertEquals("\\u00", string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string1, string2, int1);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertNotNull(stringArray0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      String[] stringArray1 = StringUtils.splitByCharacterType(string2);
      assertNotSame(stringArray1, stringArray0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      // Undeclared exception!
      try {
        String string3 = StringUtils.replaceEach(string2, stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 2 vs 3
         //
      }
  }

  @Test
  public void test114()  throws Throwable  {
      String string0 = " ";
      char[] charArray0 = new char[8];
      String string1 = StringUtils.substringBefore(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.leftPad(string0, (int) charArray0[4], string0);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotNull(string2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertEquals(" ", string2);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = string1;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string1;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = string1;
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = string0;
      assertNotNull(stringArray0[6]);
      
      stringArray0[7] = string1;
      assertNotNull(stringArray0[7]);
      
      stringArray0[8] = string0;
      assertNotNull(stringArray0[8]);
      
      // Undeclared exception!
      try {
        String string3 = StringUtils.replaceEachRepeatedly(string2, stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0:  
         //
      }
  }

  @Test
  public void test115()  throws Throwable  {
      String string0 = "rB%&Dt";
      String string1 = null;
      String[] stringArray0 = StringUtils.split(string1, string1);
      assertNull(stringArray0);
      
      String string2 = StringUtils.replaceEachRepeatedly(string0, stringArray0, stringArray0);
      assertSame(string2, string0);
      assertSame(string0, string2);
      assertNotNull(string2);
      assertEquals("rB%&Dt", string2);
  }

  @Test
  public void test116()  throws Throwable  {
      String string0 = "@'#R";
      String string1 = StringUtils.substringBetween(string0, string0, string0);
      assertNull(string1);
      
      String[] stringArray0 = new String[7];
      String string2 = StringUtils.replaceEachRepeatedly(string1, stringArray0, stringArray0);
      assertNull(string2);
  }

  @Test
  public void test117()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.substringBefore(string0, string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = null;
      String[] stringArray0 = StringUtils.split(string2, string2);
      assertNull(stringArray0);
      
      String string3 = StringUtils.replaceEachRepeatedly(string1, stringArray0, stringArray0);
      assertSame(string3, string1);
      assertSame(string3, string0);
      assertSame(string1, string0);
      assertSame(string1, string3);
      assertSame(string0, string1);
      assertSame(string0, string3);
      assertNotNull(string3);
      assertEquals("", string3);
  }

  @Test
  public void test118()  throws Throwable  {
      String string0 = "the character must not be null";
      int int0 = (-458);
      String string1 = StringUtils.rightPad(string0, int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals("the character must not be null", string1);
      
      char char0 = 'g';
      String string2 = StringUtils.replace(string0, string0, string1, (int) char0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string1.equals((Object)string2));
      assertTrue(string0.equals((Object)string2));
      assertEquals("the character must not be null", string2);
  }

  @Test
  public void test119()  throws Throwable  {
      String string0 = "";
      String string1 = "o~t+.qgfiauf$|1t`h";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.replaceOnce(string1, string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
  }

  @Test
  public void test120()  throws Throwable  {
      String string0 = "{}";
      int int0 = 0;
      String string1 = StringUtils.replace(string0, string0, string0, int0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      assertEquals("{}", string1);
  }

  @Test
  public void test121()  throws Throwable  {
      String string0 = "";
      String string1 = "`Z Vw;LkM?6dP^fZ'n";
      assertNotSame(string1, string0);
      
      char char0 = 'z';
      String string2 = StringUtils.removeEndIgnoreCase(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("`Z Vw;LkM?6dP^fZ'n", string2);
      
      String string3 = null;
      String string4 = StringUtils.replace(string2, string1, string3, (int) char0);
      assertSame(string4, string1);
      assertNotSame(string4, string0);
      assertSame(string4, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string2, string4);
      assertNotSame(string1, string0);
      assertSame(string1, string4);
      assertSame(string1, string2);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("`Z Vw;LkM?6dP^fZ'n", string4);
  }

  @Test
  public void test122()  throws Throwable  {
      String string0 = "06OA>FrK?JlgFoly%q3E";
      char char0 = '0';
      String string1 = StringUtils.remove(string0, char0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("6OA>FrK?JlgFoly%q3E", string1);
  }

  @Test
  public void test123()  throws Throwable  {
      String string0 = "org.apache.'n`okf1.lang.arrayutils";
      char char0 = '>';
      String string1 = StringUtils.remove(string0, char0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      assertEquals("org.apache.'n`okf1.lang.arrayutils", string1);
  }

  @Test
  public void test124()  throws Throwable  {
      String string0 = "";
      char char0 = 'N';
      String string1 = StringUtils.remove(string0, char0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test
  public void test125()  throws Throwable  {
      String string0 = "}jPSR";
      String string1 = StringUtils.difference(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      
      String string2 = StringUtils.remove(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertEquals("}jPSR", string2);
  }

  @Test
  public void test126()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.remove(string0, string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test
  public void test127()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.trimToNull(string0);
      assertNull(string1);
      
      String string2 = StringUtils.removeEndIgnoreCase(string1, string1);
      assertNull(string2);
  }

  @Test
  public void test128()  throws Throwable  {
      String string0 = "The character must not be null";
      String string1 = "minimum abbreviation width is 4";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeEnd(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("minimum abbreviation width is 4", string2);
  }

  @Test
  public void test129()  throws Throwable  {
      String string0 = "";
      char char0 = 'g';
      String string1 = StringUtils.repeat(string0, string0, (int) char0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test
  public void test130()  throws Throwable  {
      String string0 = " Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Ind";
      String string1 = "cannot pad a nebyc$8e amount: ";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeStartIgnoreCase(string0, string1);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals(" Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Ind", string2);
  }

  @Test
  public void test131()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.removeStartIgnoreCase(string0, string0);
      assertNull(string1);
  }

  @Test
  public void test132()  throws Throwable  {
      String string0 = "\\u000";
      String string1 = "2(0M";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeEndIgnoreCase(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("2(0M", string2);
      
      String string3 = "(apK\"v0fagMii|\">";
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.removeStart(string3, string2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(string3, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string1, string4);
      assertSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string2, string4);
      assertSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotNull(string4);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertEquals("(apK\"v0fagMii|\">", string4);
  }

  @Test
  public void test133()  throws Throwable  {
      String string0 = "";
      String string1 = "da0.4n\\bp%4le";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeStart(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("da0.4n\\bp%4le", string2);
  }

  @Test
  public void test134()  throws Throwable  {
      String string0 = "*c9CE^%T=p\"z77U',";
      String string1 = StringUtils.removeStart(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
  }

  @Test
  public void test135()  throws Throwable  {
      String string0 = null;
      int int0 = 2032;
      char char0 = '3';
      String string1 = StringUtils.center(string0, int0, char0);
      assertNull(string1);
      
      String string2 = StringUtils.removeStart(string1, string1);
      assertNull(string2);
  }

  @Test
  public void test136()  throws Throwable  {
      String string0 = "Strings must not be null";
      String string1 = StringUtils.deleteWhitespace(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("Stringsmustnotbenull", string1);
  }

  @Test
  public void test137()  throws Throwable  {
      String string0 = "org.apache.commons.lang.Strin)UtJls";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      String string1 = StringUtils.join((Collection<?>) linkedList0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      
      String string2 = StringUtils.deleteWhitespace(string1);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotNull(string2);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals("", string2);
  }

  @Test
  public void test138()  throws Throwable  {
      String string0 = "m";
      String string1 = StringUtils.deleteWhitespace(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      assertEquals("m", string1);
  }

  @Test
  public void test139()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      char char0 = 'W';
      String string0 = StringUtils.join(objectArray0, char0);
      assertNotNull(string0);
      assertEquals("WWW", string0);
      
      Collection<Object> collection0 = null;
      String string1 = StringUtils.join(collection0, string0);
      assertNull(string1);
  }

  @Test
  public void test140()  throws Throwable  {
      char char0 = '=';
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      String string0 = StringUtils.join((Collection<?>) set0, char0);
      assertNotNull(string0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("", string0);
  }

  @Test
  public void test141()  throws Throwable  {
      String string0 = "gKhPW](";
      String string1 = StringUtils.chomp(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      assertEquals("gKhPW](", string1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedList0.add(object0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      int int0 = 2821;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(2821, (int)integer0);
      
      boolean boolean1 = linkedList0.add((Object) integer0);
      assertEquals(2, linkedList0.size());
      assertTrue(integer0.equals((Object)int0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.join((Collection<?>) linkedList0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotNull(string2);
      assertEquals(2, linkedList0.size());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
  }

  @Test
  public void test142()  throws Throwable  {
      String string0 = "Minimum abbreviation width with offset is 7";
      char char0 = '/';
      int int0 = StringUtils.lastIndexOf(string0, char0, (int) char0);
      assertEquals((-1), int0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      boolean boolean0 = linkedList0.add((Integer) int0);
      assertEquals(1, linkedList0.size());
      assertEquals("[-1]", linkedList0.toString());
      assertTrue(boolean0);
      
      String string1 = StringUtils.join((Collection<?>) linkedList0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertEquals(1, linkedList0.size());
      assertEquals("[-1]", linkedList0.toString());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("-1", string1);
  }

  @Test
  public void test143()  throws Throwable  {
      String string0 = "ort+.qgfiauf,|51th";
      String string1 = StringUtils.upperCase(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("ORT+.QGFIAUF,|51TH", string1);
      
      Iterator<Object> iterator0 = null;
      String string2 = StringUtils.join(iterator0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test144()  throws Throwable  {
      String string0 = "qAbA&";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      int int0 = 0;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      boolean boolean0 = linkedList0.add((Object) integer0);
      assertEquals("[0]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      assertTrue(integer0.equals((Object)int0));
      assertTrue(boolean0);
      
      boolean boolean1 = linkedList0.add((Object) string0);
      assertEquals(2, linkedList0.size());
      assertEquals("[0, qAbA&]", linkedList0.toString());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(2, linkedList0.size());
      assertEquals("[0, qAbA&]", linkedList0.toString());
      
      char char0 = 'T';
      String string1 = StringUtils.join(iterator0, char0);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals(2, linkedList0.size());
      assertEquals("[0, qAbA&]", linkedList0.toString());
      assertFalse(string1.equals((Object)string0));
      assertEquals("0TqAbA&", string1);
  }

  @Test
  public void test145()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      int int0 = 0;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      boolean boolean0 = linkedList0.add((Object) integer0);
      assertEquals("[0]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      assertTrue(integer0.equals((Object)int0));
      assertTrue(boolean0);
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals("[0]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      
      char char0 = 'T';
      String string0 = StringUtils.join(iterator0, char0);
      assertNotNull(string0);
      assertEquals("[0]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      assertEquals("0", string0);
  }

  @Test
  public void test146()  throws Throwable  {
      Iterator<Integer> iterator0 = null;
      char char0 = 'g';
      String string0 = StringUtils.join(iterator0, char0);
      assertNull(string0);
  }

  @Test
  public void test147()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      assertNotNull(objectArray0[0]);
      
      String string0 = "";
      String string1 = StringUtils.join(objectArray0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test148()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      char char0 = '1';
      String string0 = StringUtils.join(objectArray0, char0);
      assertNotNull(string0);
      assertEquals("111", string0);
      
      String string1 = StringUtils.join(objectArray0, string0, (int) char0, (int) char0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
  }

  @Test
  public void test149()  throws Throwable  {
      String string0 = null;
      char char0 = 'Y';
      String[] stringArray0 = StringUtils.substringsBetween(string0, string0, string0);
      assertNull(stringArray0);
      
      String string1 = StringUtils.trim(string0);
      assertNull(string1);
      
      String string2 = StringUtils.join((Object[]) stringArray0, string1, (int) char0, (int) char0);
      assertNull(string2);
  }

  @Test
  public void test150()  throws Throwable  {
      char char0 = '3';
      String[] stringArray0 = new String[3];
      String string0 = StringUtils.join((Object[]) stringArray0, char0, (int) char0, (int) char0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test151()  throws Throwable  {
      String string0 = null;
      int int0 = 0;
      char char0 = 'T';
      String[] stringArray0 = StringUtils.split(string0, char0);
      assertNull(stringArray0);
      
      String string1 = StringUtils.join((Object[]) stringArray0, char0, int0, int0);
      assertNull(string1);
  }

  @Test
  public void test152()  throws Throwable  {
      String string0 = null;
      char char0 = 'f';
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(string0);
      assertNull(stringArray0);
      
      String string1 = StringUtils.join((Object[]) stringArray0, char0);
      assertNull(string1);
  }

  @Test
  public void test153()  throws Throwable  {
      String string0 = "PLlmwQ";
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test154()  throws Throwable  {
      String string0 = "_eGf#{s:\"/:\\S[ J";
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test155()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test156()  throws Throwable  {
      String string0 = "TimeToLive of ";
      int int0 = 1;
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, string0, int0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test157()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      assertNotNull(objectArray0[1]);
      
      char char0 = '1';
      String string0 = StringUtils.join(objectArray0, char0);
      assertNotNull(string0);
      
      String string1 = "Cannot get the toString of a null identity";
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(stringArray0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test158()  throws Throwable  {
      String string0 = "=";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test159()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      char char0 = '1';
      String string0 = StringUtils.join(objectArray0, char0);
      assertNotNull(string0);
      assertEquals("111", string0);
      
      String string1 = ":";
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.split(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test160()  throws Throwable  {
      String string0 = ":";
      String[] stringArray0 = StringUtils.split(string0, string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test161()  throws Throwable  {
      String string0 = "The character must not be null";
      String[] stringArray0 = StringUtils.substringsBetween(string0, string0, string0);
      assertNull(stringArray0);
      
      String string1 = StringUtils.join((Object[]) stringArray0, string0);
      assertNull(string1);
      
      int int0 = 2;
      String[] stringArray1 = StringUtils.split(string0, string1, int0);
      assertNotNull(stringArray1);
  }

  @Test
  public void test162()  throws Throwable  {
      String string0 = null;
      char char0 = 'C';
      String string1 = StringUtils.chomp(string0, string0);
      assertNull(string1);
      
      String string2 = " :w";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string2, string1, (int) char0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test163()  throws Throwable  {
      String string0 = "nD-8'X@V#v";
      String string1 = null;
      int int0 = 0;
      String string2 = StringUtils.replaceChars(string1, string0, string1);
      assertNull(string2);
      
      String string3 = " ";
      assertNotSame(string3, string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string3, string2, int0);
      assertNotSame(string3, string0);
      assertNotSame(string0, string3);
      assertNotNull(stringArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string0.equals((Object)string3));
  }

  @Test
  public void test164()  throws Throwable  {
      String string0 = "AWho1.8]*";
      char char0 = '*';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, char0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test165()  throws Throwable  {
      String string0 = "Search and Replace array lengths don't match: ";
      char char0 = 'S';
      String[] stringArray0 = StringUtils.split(string0, char0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test166()  throws Throwable  {
      String string0 = "fk774 G5sa46V";
      char char0 = 'f';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, char0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test167()  throws Throwable  {
      String string0 = "ort+.qgfiau1t|56`h";
      String string1 = "fi";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string0, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(stringArray0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test168()  throws Throwable  {
      String string0 = "\\u000";
      char char0 = 'H';
      String string1 = "";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string0, string1, (int) char0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test169()  throws Throwable  {
      String string0 = "m";
      int int0 = 1206;
      String string1 = StringUtils.center(string0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEqualsmstring1);
      
      String string2 = "Search and Replace array lengths don't match: ";
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.substringsBetween(string1, string2, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNull(stringArray0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test
  public void test170()  throws Throwable  {
      String string0 = "m";
      int int0 = 1206;
      String string1 = StringUtils.center(string0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEqualsmstring1);
      
      String[] stringArray0 = StringUtils.substringsBetween(string1, string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNull(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test171()  throws Throwable  {
      String string0 = null;
      String string1 = " vs ";
      String[] stringArray0 = StringUtils.substringsBetween(string1, string1, string0);
      assertNull(stringArray0);
  }

  @Test
  public void test172()  throws Throwable  {
      String string0 = ">9Ba}+r";
      String string1 = null;
      String[] stringArray0 = StringUtils.substringsBetween(string0, string1, string0);
      assertNull(stringArray0);
  }

  @Test
  public void test173()  throws Throwable  {
      String string0 = "The character must not be null";
      String string1 = StringUtils.defaultIfEmpty(string0, string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals("The character must not be null", string1);
      
      String string2 = StringUtils.substringBetween(string1, string1, string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.substringsBetween(string2, string0, string2);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNull(stringArray0);
  }

  @Test
  public void test174()  throws Throwable  {
      String string0 = "mZy\\$(~^Be\\?7Yi35";
      String string1 = null;
      String string2 = StringUtils.substringBetween(string0, string0, string1);
      assertNull(string2);
  }

  @Test
  public void test175()  throws Throwable  {
      String string0 = " vs ";
      String string1 = null;
      String string2 = StringUtils.substringBetween(string1, string0, string1);
      assertNull(string2);
  }

  @Test
  public void test176()  throws Throwable  {
      String string0 = "O26vJzC&}0b[Mx<(yme";
      String string1 = "F";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringAfterLast(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string2);
  }

  @Test
  public void test177()  throws Throwable  {
      String string0 = "*c9CE^%T=p\"z77U',";
      String string1 = StringUtils.substringAfterLast(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
  }

  @Test
  public void test178()  throws Throwable  {
      String string0 = "O26vJzC&}0b[Mx<(yme";
      int int0 = StringUtils.countMatches(string0, string0);
      assertEquals(1, int0);
      
      String string1 = "F";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.mid(string1, int0, int0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals("", string2);
      
      String string3 = StringUtils.substringAfterLast(string2, string0);
      assertSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotNull(string3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertEquals("", string3);
  }

  @Test
  public void test179()  throws Throwable  {
      String string0 = "";
      String string1 = "1tt+.qgfiauf,|56`h";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringAfterLast(string1, string0);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test
  public void test180()  throws Throwable  {
      String string0 = ">S&pA\\s+|iw^YRE";
      String string1 = "qAbA&";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringBeforeLast(string1, string0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals("qAbA&", string2);
  }

  @Test
  public void test181()  throws Throwable  {
      String string0 = ">S&pA\\s+|iw^YRE";
      String string1 = StringUtils.substringBeforeLast(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
  }

  @Test
  public void test182()  throws Throwable  {
      String string0 = "m";
      String string1 = StringUtils.stripEnd(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.substringBeforeLast(string1, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test
  public void test183()  throws Throwable  {
      String string0 = "minimum a{breviation width is 4";
      String string1 = "da0.4n\\bp%4le";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringAfter(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
  }

  @Test
  public void test184()  throws Throwable  {
      String string0 = "\\u000";
      String string1 = null;
      String string2 = StringUtils.substringAfter(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertEquals("", string2);
  }

  @Test
  public void test185()  throws Throwable  {
      String string0 = "}jPSR";
      String string1 = StringUtils.difference(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      
      String string2 = StringUtils.substringAfter(string1, string0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals("", string2);
  }

  @Test
  public void test186()  throws Throwable  {
      String string0 = " ";
      String string1 = "@~4o0";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringBefore(string1, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals("@~4o0", string2);
  }

  @Test
  public void test187()  throws Throwable  {
      String string0 = " ";
      String string1 = "";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringBefore(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test
  public void test188()  throws Throwable  {
      String string0 = null;
      String string1 = "_eGf#{s:\"/:\\S[ J";
      char char0 = 'C';
      String string2 = StringUtils.replaceChars(string0, char0, char0);
      assertNull(string2);
      
      String string3 = StringUtils.substringBefore(string1, string2);
      assertSame(string3, string1);
      assertSame(string1, string3);
      assertNotNull(string3);
      assertEquals("_eGf#{s:\"/:\\S[ J", string3);
  }

  @Test
  public void test189()  throws Throwable  {
      String string0 = "o1t+.qgfiauf,|56`h";
      int int0 = 64;
      int int1 = (-532);
      String string1 = StringUtils.mid(string0, int1, int0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals("o1t+.qgfiauf,|56`h", string1);
  }

  @Test
  public void test190()  throws Throwable  {
      String string0 = "O26vJzC&}0b[Mx<(yme";
      int int0 = StringUtils.countMatches(string0, string0);
      assertEquals(1, int0);
      
      String string1 = StringUtils.mid(string0, int0, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("2", string1);
  }

  @Test
  public void test191()  throws Throwable  {
      String string0 = "{}";
      int int0 = (-1492);
      String string1 = StringUtils.mid(string0, int0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
  }

  @Test
  public void test192()  throws Throwable  {
      String string0 = ",qpu]";
      String string1 = StringUtils.removeEnd(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = 1858;
      String string2 = StringUtils.mid(string1, int0, int0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test
  public void test193()  throws Throwable  {
      String string0 = "cannot pad a nebyc$8e amount: ";
      char char0 = '!';
      String string1 = StringUtils.right(string0, (int) char0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals("cannot pad a nebyc$8e amount: ", string1);
  }

  @Test
  public void test194()  throws Throwable  {
      String string0 = " Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Ind";
      char char0 = '!';
      String string1 = StringUtils.right(string0, (int) char0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(": Index: Index: Index: Index: Ind", string1);
  }

  @Test
  public void test195()  throws Throwable  {
      String string0 = "gKhPW](";
      int int0 = 0;
      String string1 = StringUtils.left(string0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
  }

  @Test
  public void test196()  throws Throwable  {
      String string0 = "6COk ZNa&qwbi<!sED";
      String string1 = "W";
      assertNotSame(string1, string0);
      
      int int0 = StringUtils.lastIndexOf(string0, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1), int0);
      
      String string2 = StringUtils.left(string1, int0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
  }

  @Test
  public void test197()  throws Throwable  {
      String string0 = "";
      int int0 = StringUtils.countMatches(string0, string0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.substring(string0, int0, int0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test
  public void test198()  throws Throwable  {
      String string0 = "Minimum abbreviation width with offset is 7";
      String string1 = StringUtils.chop(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is ", string1);
      
      int int0 = (-1841);
      String string2 = StringUtils.substring(string1, int0, int0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
  }

  @Test
  public void test199()  throws Throwable  {
      String string0 = "PrZ^5";
      int int0 = (-1522);
      char char0 = ']';
      String string1 = StringUtils.right(string0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      
      String string2 = StringUtils.substring(string1, (int) char0, int0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string2);
  }

  @Test
  public void test200()  throws Throwable  {
      String string0 = null;
      int int0 = 0;
      String[] stringArray0 = new String[5];
      int int1 = StringUtils.lastIndexOfAny(string0, stringArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.substring(string0, int0, int1);
      assertNull(string1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test201()  throws Throwable  {
      String string0 = "";
      char char0 = 'g';
      String string1 = StringUtils.substring(string0, (int) char0, (int) char0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test
  public void test202()  throws Throwable  {
      String string0 = "Search and Replace array lengths don't match: ";
      int int0 = (-4316);
      String string1 = StringUtils.substring(string0, int0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      assertEquals("Search and Replace array lengths don't match: ", string1);
  }

  @Test
  public void test203()  throws Throwable  {
      String string0 = " vs ";
      String string1 = StringUtils.chomp(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = 0;
      int int1 = StringUtils.lastIndexOf(string0, string0, int0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0, int1);
      
      String string2 = StringUtils.substring(string1, int1);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test
  public void test204()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = new String[9];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      int int0 = StringUtils.lastIndexOfAny(string0, stringArray0);
      assertEquals(0, int0);
  }

  @Test
  public void test205()  throws Throwable  {
      String string0 = "*/'3";
      String[] stringArray0 = new String[2];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      int int0 = StringUtils.indexOfAny(string0, stringArray0);
      assertEquals(0, int0);
  }

  @Test
  public void test206()  throws Throwable  {
      String string0 = "PrZ^5";
      int int0 = (-1522);
      String string1 = StringUtils.right(string0, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      int int1 = StringUtils.indexOfAny(string1, stringArray0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
  }

  @Test
  public void test207()  throws Throwable  {
      String string0 = ">9Ba}+r";
      char char0 = '5';
      String string1 = StringUtils.reverseDelimited(string0, char0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertEquals(">9Ba}+r", string1);
      
      String[] stringArray0 = StringUtils.substringsBetween(string0, string0, string0);
      assertNotSame(string0, string1);
      assertNull(stringArray0);
      assertTrue(string0.equals((Object)string1));
      
      int int0 = StringUtils.indexOfAny(string1, stringArray0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertEquals((-1), int0);
  }

  @Test
  public void test208()  throws Throwable  {
      String string0 = "The character must not be null";
      String[] stringArray0 = StringUtils.substringsBetween(string0, string0, string0);
      assertNull(stringArray0);
      
      String string1 = StringUtils.join((Object[]) stringArray0, string0);
      assertNull(string1);
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.containsNone(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertTrue(boolean0);
  }

  @Test
  public void test209()  throws Throwable  {
      int int0 = 1934;
      String string0 = null;
      String string1 = StringUtils.right(string0, int0);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsNone(string1, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test210()  throws Throwable  {
      String string0 = ">9Ba}+r";
      char char0 = '5';
      String string1 = StringUtils.reverseDelimited(string0, char0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertEquals(">9Ba}+r", string1);
      
      boolean boolean0 = StringUtils.containsNone(string1, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertFalse(boolean0);
  }

  @Test
  public void test211()  throws Throwable  {
      String string0 = "nD-8'X@V#v";
      char[] charArray0 = new char[1];
      boolean boolean0 = StringUtils.containsNone(string0, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertTrue(boolean0);
  }

  @Test
  public void test212()  throws Throwable  {
      String string0 = null;
      char[] charArray0 = new char[1];
      boolean boolean0 = StringUtils.containsNone(string0, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertTrue(boolean0);
  }

  @Test
  public void test213()  throws Throwable  {
      String string0 = null;
      int int0 = (-4139);
      String string1 = StringUtils.mid(string0, int0, int0);
      assertNull(string1);
      
      String string2 = "#iMFaO=5,`^e";
      boolean boolean0 = StringUtils.containsOnly(string2, string1);
      assertFalse(boolean0);
  }

  @Test
  public void test214()  throws Throwable  {
      String string0 = "eV_nHqxo?ylNJKEV9";
      String string1 = null;
      boolean boolean0 = StringUtils.containsOnly(string1, string0);
      assertFalse(boolean0);
  }

  @Test
  public void test215()  throws Throwable  {
      String string0 = "The character must not be null";
      String[] stringArray0 = StringUtils.substringsBetween(string0, string0, string0);
      assertNull(stringArray0);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.containsOnly(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
  }

  @Test
  public void test216()  throws Throwable  {
      String string0 = " vs ";
      String string1 = StringUtils.chomp(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.containsOnly(string1, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean0);
  }

  @Test
  public void test217()  throws Throwable  {
      String string0 = null;
      char[] charArray0 = new char[1];
      boolean boolean0 = StringUtils.containsOnly(string0, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test218()  throws Throwable  {
      String string0 = ", Length: 0";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      String string1 = StringUtils.join((Collection<?>) linkedList0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      
      char[] charArray0 = null;
      boolean boolean0 = StringUtils.containsOnly(string1, charArray0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
  }

  @Test
  public void test219()  throws Throwable  {
      String string0 = ",x";
      String string1 = "[V(6n/-e0;jRP|v(X";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      int int0 = StringUtils.indexOfAnyBut(string1, stringArray0[2]);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, int0);
  }

  @Test
  public void test220()  throws Throwable  {
      String string0 = ">9Ba}+r";
      String string1 = null;
      String string2 = StringUtils.chop(string1);
      assertNull(string2);
      
      int int0 = StringUtils.indexOfAnyBut(string0, string2);
      assertEquals((-1), int0);
  }

  @Test
  public void test221()  throws Throwable  {
      String string0 = ",x";
      int int0 = StringUtils.indexOfAnyBut(string0, string0);
      assertEquals((-1), int0);
  }

  @Test
  public void test222()  throws Throwable  {
      String string0 = " ";
      String string1 = StringUtils.capitalize(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertEquals(" ", string1);
      
      String string2 = "";
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOfAnyBut(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals((-1), int0);
  }

  @Test
  public void test223()  throws Throwable  {
      String string0 = "1tt+.qgfiauf,|56`h";
      boolean boolean0 = StringUtils.containsOnly(string0, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test224()  throws Throwable  {
      String string0 = "rB%&Dt";
      char[] charArray0 = new char[4];
      boolean boolean0 = StringUtils.containsOnly(string0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test225()  throws Throwable  {
      String string0 = null;
      char[] charArray0 = new char[7];
      int int0 = StringUtils.indexOfAnyBut(string0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
  }

  @Test
  public void test226()  throws Throwable  {
      String string0 = "mZy\\$(~^Be\\?7Yi35";
      String string1 = null;
      boolean boolean0 = StringUtils.containsAny(string0, string1);
      assertFalse(boolean0);
  }

  @Test
  public void test227()  throws Throwable  {
      String string0 = ",x";
      boolean boolean0 = StringUtils.containsAny(string0, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test228()  throws Throwable  {
      String string0 = "";
      String string1 = "\\u";
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.containsAny(string1, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
  }

  @Test
  public void test229()  throws Throwable  {
      String string0 = ",qpu]";
      String string1 = StringUtils.removeEnd(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      
      char[] charArray0 = new char[9];
      boolean boolean0 = StringUtils.containsAny(string1, charArray0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
  }

  @Test
  public void test230()  throws Throwable  {
      String string0 = " ";
      char[] charArray0 = new char[10];
      boolean boolean0 = StringUtils.containsAny(string0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test231()  throws Throwable  {
      String string0 = null;
      String string1 = "Cr%";
      boolean boolean0 = StringUtils.containsAny(string0, string1);
      assertFalse(boolean0);
  }

  @Test
  public void test232()  throws Throwable  {
      String string0 = null;
      String string1 = "The String must not be empty";
      int int0 = StringUtils.indexOfAny(string1, string0);
      assertEquals((-1), int0);
  }

  @Test
  public void test233()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.trim(string0);
      assertNull(string1);
      
      int int0 = StringUtils.indexOfAny(string1, string0);
      assertEquals((-1), int0);
  }

  @Test
  public void test234()  throws Throwable  {
      String string0 = "_eGf#{s:\"/:\\S[ J";
      int int0 = StringUtils.indexOfAny(string0, string0);
      assertEquals(0, int0);
  }

  @Test
  public void test235()  throws Throwable  {
      String string0 = "nD-8'X@V#v";
      char[] charArray0 = new char[1];
      int int0 = StringUtils.indexOfAny(string0, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals((-1), int0);
  }

  @Test
  public void test236()  throws Throwable  {
      String string0 = "";
      char[] charArray0 = new char[8];
      int int0 = StringUtils.indexOfAny(string0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
  }

  @Test
  public void test237()  throws Throwable  {
      String string0 = "_eGf#{s:\"/:\\S[ J";
      String string1 = "org.apache.commons.lang.CharUtils";
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0);
  }

  @Test
  public void test238()  throws Throwable  {
      String string0 = "_eGf#{s:\"/:\\S[ J";
      boolean boolean0 = StringUtils.containsIgnoreCase(string0, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test239()  throws Throwable  {
      String string0 = "}jPSR";
      String string1 = null;
      boolean boolean0 = StringUtils.containsIgnoreCase(string0, string1);
      assertFalse(boolean0);
  }

  @Test
  public void test240()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.containsIgnoreCase(string0, string0);
      assertFalse(boolean0);
  }

  @Test
  public void test241()  throws Throwable  {
      String string0 = "PLlmwQ";
      String string1 = "org.apache.commons.lang.StringUtils";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.trimToEmpty(string0);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertEquals("PLlmwQ", string2);
      
      boolean boolean0 = StringUtils.contains(string2, string1);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(boolean0);
  }

  @Test
  public void test242()  throws Throwable  {
      String string0 = null;
      String string1 = "\\u00";
      boolean boolean0 = StringUtils.contains(string1, string0);
      assertFalse(boolean0);
  }

  @Test
  public void test243()  throws Throwable  {
      String string0 = " vs ";
      String string1 = StringUtils.chomp(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.contains(string1, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean0);
  }

  @Test
  public void test244()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.contains(string0, string0);
      assertFalse(boolean0);
  }

  @Test
  public void test245()  throws Throwable  {
      String string0 = "N9,&?q'h9Q(";
      char char0 = '';
      boolean boolean0 = StringUtils.contains(string0, char0);
      assertTrue(boolean0);
  }

  @Test
  public void test246()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.trimToNull(string0);
      assertNull(string1);
      
      char char0 = 'g';
      boolean boolean0 = StringUtils.contains(string1, char0);
      assertFalse(boolean0);
  }

  @Test
  public void test247()  throws Throwable  {
      String string0 = " ";
      char char0 = 'o';
      boolean boolean0 = StringUtils.contains(string0, char0);
      assertFalse(boolean0);
  }

  @Test
  public void test248()  throws Throwable  {
      String string0 = "/=[b";
      int int0 = 1242;
      String string1 = StringUtils.left(string0, int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals("/=[b", string1);
      
      String string2 = StringUtils.substringBetween(string0, string0, string0);
      assertSame(string0, string1);
      assertNull(string2);
      
      int int1 = StringUtils.lastIndexOf(string1, string2, int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
  }

  @Test
  public void test249()  throws Throwable  {
      String string0 = "nD-8'X@V#v";
      String string1 = null;
      int int0 = 0;
      int int1 = StringUtils.lastIndexOf(string1, string0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
  }

  @Test
  public void test250()  throws Throwable  {
      String string0 = "6COk ZNa&qwbi<!sED";
      int int0 = StringUtils.lastIndexOf(string0, string0);
      assertEquals(0, int0);
      
      String string1 = null;
      char char0 = '.';
      String string2 = StringUtils.rightPad(string1, int0, char0);
      assertNull(string2);
      
      Object[] objectArray0 = new Object[4];
      String string3 = StringUtils.join(objectArray0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string3, string0);
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      int int1 = StringUtils.lastIndexOf(string3, string2);
      assertNotSame(string0, string3);
      assertNotSame(string3, string0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(string3.equals((Object)string0));
      assertEquals((-1), int1);
  }

  @Test
  public void test251()  throws Throwable  {
      String string0 = null;
      int int0 = StringUtils.lastIndexOf(string0, string0);
      assertEquals((-1), int0);
  }

  @Test
  public void test252()  throws Throwable  {
      String string0 = "";
      char char0 = 'j';
      int int0 = StringUtils.lastIndexOf(string0, char0, (int) char0);
      assertEquals((-1), int0);
  }

  @Test
  public void test253()  throws Throwable  {
      String string0 = "...";
      int int0 = 0;
      int int1 = StringUtils.ordinalIndexOf(string0, string0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
      
      char char0 = ']';
      int int2 = StringUtils.lastIndexOf(string0, char0, int1);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals((-1), int2);
  }

  @Test
  public void test254()  throws Throwable  {
      String string0 = null;
      char char0 = 'Y';
      int int0 = StringUtils.lastIndexOf(string0, char0);
      assertEquals((-1), int0);
  }

  @Test
  public void test255()  throws Throwable  {
      String string0 = "org.apache.'n`okf1.lang.arrayutils";
      char char0 = '>';
      int int0 = StringUtils.lastIndexOf(string0, char0);
      assertEquals((-1), int0);
  }

  @Test
  public void test256()  throws Throwable  {
      String string0 = null;
      String string1 = ", Length: ";
      String string2 = StringUtils.chop(string1);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertEquals(", Length:", string2);
      
      int int0 = (-1066);
      int int1 = StringUtils.indexOf(string2, string0, int0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertEquals((-1), int1);
  }

  @Test
  public void test257()  throws Throwable  {
      String string0 = "org.apache.'n`okf1.lang.arrayutils";
      char char0 = '>';
      int int0 = StringUtils.indexOf(string0, string0, (int) char0);
      assertEquals((-1), int0);
  }

  @Test
  public void test258()  throws Throwable  {
      String string0 = null;
      char char0 = 'C';
      String string1 = StringUtils.replaceChars(string0, char0, char0);
      assertNull(string1);
      
      int int0 = StringUtils.indexOf(string0, string1, (int) char0);
      assertEquals((-1), int0);
  }

  @Test
  public void test259()  throws Throwable  {
      String string0 = "`Z Vw;LkM?6dP^fZ'n";
      char char0 = 'z';
      int int0 = StringUtils.ordinalIndexOf(string0, string0, (int) char0);
      assertEquals((-1), int0);
  }

  @Test
  public void test260()  throws Throwable  {
      String string0 = ".q";
      int int0 = 0;
      String string1 = null;
      int int1 = StringUtils.ordinalIndexOf(string0, string1, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test
  public void test261()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.substringBefore(string0, string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals("", string1);
      
      char char0 = 'z';
      int int0 = StringUtils.ordinalIndexOf(string1, string1, (int) char0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals(0, int0);
  }

  @Test
  public void test262()  throws Throwable  {
      String string0 = "";
      String string1 = null;
      int int0 = StringUtils.indexOf(string0, string1);
      assertEquals((-1), int0);
  }

  @Test
  public void test263()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.defaultString(string0, string0);
      assertNull(string1);
      
      int int0 = StringUtils.indexOf(string1, string1);
      assertEquals((-1), int0);
  }

  @Test
  public void test264()  throws Throwable  {
      String string0 = "";
      char char0 = 'g';
      int int0 = StringUtils.indexOf(string0, char0, (int) char0);
      assertEquals((-1), int0);
  }

  @Test
  public void test265()  throws Throwable  {
      String string0 = "`Z Vw;LkM?6dP^fZ'n";
      char char0 = 'z';
      int int0 = StringUtils.indexOf(string0, char0, (int) char0);
      assertEquals((-1), int0);
  }

  @Test
  public void test266()  throws Throwable  {
      String string0 = "";
      char char0 = '1';
      int int0 = StringUtils.indexOf(string0, char0);
      assertEquals((-1), int0);
  }

  @Test
  public void test267()  throws Throwable  {
      String string0 = "`Z Vw;LkM?6dP^fZ'n";
      char char0 = 'z';
      int int0 = StringUtils.indexOf(string0, char0);
      assertEquals((-1), int0);
  }

  @Test
  public void test268()  throws Throwable  {
      String string0 = "@'#R";
      String string1 = StringUtils.substringBetween(string0, string0, string0);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase(string1, string1);
      assertTrue(boolean0);
  }

  @Test
  public void test269()  throws Throwable  {
      String string0 = "@'#R";
      String string1 = StringUtils.substringBetween(string0, string0, string0);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase(string1, string0);
      assertFalse(boolean0);
  }

  @Test
  public void test270()  throws Throwable  {
      String string0 = "";
      Object[] objectArray0 = new Object[4];
      char char0 = '1';
      String string1 = StringUtils.join(objectArray0, char0);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("111", string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase(string0, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0);
  }

  @Test
  public void test271()  throws Throwable  {
      String string0 = null;
      String string1 = "{e!jX|1kfZEI:3g";
      boolean boolean0 = StringUtils.equals(string0, string1);
      assertFalse(boolean0);
  }

  @Test
  public void test272()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.equals(string0, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test273()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.equals(string0, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test274()  throws Throwable  {
      String string0 = "org.apache.'n`okf1.lang.arrayutils";
      String[] stringArray0 = new String[5];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      String string1 = "Dv)vQY'TQKDe";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.trim(string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Dv)vQY'TQKDe", string2);
      
      stringArray0[4] = string2;
      assertNotNull(stringArray0[4]);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, stringArray0[4]);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test
  public void test275()  throws Throwable  {
      String string0 = "}jPSR";
      int int0 = 13;
      String string1 = StringUtils.rightPad(string0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("}jPSR        ", string1);
      
      String[] stringArray0 = new String[6];
      stringArray0[3] = string1;
      assertNotNull(stringArray0[3]);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test
  public void test276()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.defaultString(string0, string0);
      assertNull(string1);
      
      String string2 = StringUtils.stripEnd(string1, string0);
      assertNull(string2);
  }

  @Test
  public void test277()  throws Throwable  {
      String string0 = "";
      String string1 = ")*Ph_";
      assertNotSame(string1, string0);
      
      int int0 = 1934;
      String string2 = StringUtils.overlay(string0, string1, int0, int0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals(")*Ph_", string2);
      
      String string3 = StringUtils.strip(string2, string0);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotNull(string3);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string3));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertEquals(")*Ph_", string3);
  }

  @Test
  public void test278()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.stripStart(string0, string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test
  public void test279()  throws Throwable  {
      String string0 = "m";
      String string1 = StringUtils.stripEnd(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = null;
      String string3 = StringUtils.stripStart(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNull(string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test280()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.stripToEmpty(string0);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test
  public void test281()  throws Throwable  {
      String string0 = ", Length: 0";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      String string1 = StringUtils.join((Collection<?>) linkedList0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      
      String string2 = StringUtils.stripToEmpty(string1);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotNull(string2);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals("", string2);
  }

  @Test
  public void test282()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.stripToNull(string0);
      assertNull(string1);
  }

  @Test
  public void test283()  throws Throwable  {
      String string0 = " ";
      String string1 = StringUtils.stripToNull(string0);
      assertNull(string1);
  }

  @Test
  public void test284()  throws Throwable  {
      String string0 = "j4E0W}HXO";
      String string1 = StringUtils.substringBetween(string0, string0);
      assertNull(string1);
      
      String string2 = StringUtils.trimToEmpty(string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertEquals("", string2);
  }

  @Test
  public void test285()  throws Throwable  {
      String string0 = "*/'3";
      String string1 = StringUtils.trimToNull(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals("*/'3", string1);
  }

  @Test
  public void test286()  throws Throwable  {
      String string0 = "Minimum abbreviation width with offset is 7";
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test
  public void test287()  throws Throwable  {
      String string0 = " Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Index: Ind";
      boolean boolean0 = StringUtils.isBlank((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test288()  throws Throwable  {
      String string0 = " ";
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test289()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.isBlank((CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test
  public void test290()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isBlank((CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test
  public void test291()  throws Throwable  {
      String string0 = "}jPSR";
      int int0 = 13;
      String string1 = StringUtils.leftPad(string0, int0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("}jPSR}jP}jPSR", string1);
      
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean0);
  }

  @Test
  public void test292()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.chomp(string0, string0);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) string1);
      assertFalse(boolean0);
  }

  @Test
  public void test293()  throws Throwable  {
      String string0 = "`Z Vw;LkM?6dP^fZ'n";
      String string1 = null;
      String string2 = StringUtils.replaceOnce(string0, string1, string1);
      assertSame(string2, string0);
      assertSame(string0, string2);
      assertNotNull(string2);
      assertEquals("`Z Vw;LkM?6dP^fZ'n", string2);
  }

  @Test
  public void test294()  throws Throwable  {
      String string0 = "}jPSR";
      String string1 = StringUtils.difference(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.split(string1, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(string1, string0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotSame(string0, string1);
      assertNotNull(stringArray1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test295()  throws Throwable  {
      String string0 = "nD-8'X@V#v";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test296()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string0, string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test297()  throws Throwable  {
      String string0 = "m";
      String string1 = StringUtils.stripEnd(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.substringBetween(string1, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test
  public void test298()  throws Throwable  {
      String string0 = "nD-8'X@V#v";
      String[] stringArray0 = StringUtils.split(string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test299()  throws Throwable  {
      String string0 = "`Z Vw;LkM?6dP^fZ'n";
      String string1 = StringUtils.removeEndIgnoreCase(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
  }

  @Test
  public void test300()  throws Throwable  {
      String string0 = " ";
      String string1 = StringUtils.capitalize(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertEquals(" ", string1);
      
      int int0 = StringUtils.indexOfDifference(string1, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string0, string1, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
  }

  @Test
  public void test301()  throws Throwable  {
      String string0 = "";
      int int0 = (-2654);
      String string1 = StringUtils.leftPad(string0, int0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test
  public void test302()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      char char0 = '1';
      String string0 = StringUtils.join(objectArray0, char0);
      assertNotNull(string0);
      assertEquals("111", string0);
      
      String string1 = StringUtils.strip(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals("111", string1);
  }

  @Test
  public void test303()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.endsWith(string0, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test304()  throws Throwable  {
      String string0 = "*c9CE^%T=p\"z77U',";
      String string1 = StringUtils.lowerCase(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("*c9ce^%t=p\"z77u',", string1);
      
      int int0 = StringUtils.length(string0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertEquals(17, int0);
      
      String string2 = StringUtils.abbreviate(string1, int0);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("*c9ce^%t=p\"z77u',", string2);
  }

  @Test
  public void test305()  throws Throwable  {
      String string0 = "nD-8'X@V#v";
      char[] charArray0 = new char[1];
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string0, string0, (int) charArray0[0]);
      assertNotNull(stringArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test
  public void test306()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.join((Object[]) stringArray0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test307()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      char char0 = '1';
      String string0 = StringUtils.join(objectArray0, char0);
      assertNotNull(string0);
      assertEquals("111", string0);
      
      String[] stringArray0 = StringUtils.split(string0, string0, (int) char0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test308()  throws Throwable  {
      String string0 = ">S&pA\\s+|iw^YRE";
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string0, string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test309()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
  }
}
