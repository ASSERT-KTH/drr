/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:07:48 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.lang.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;


public class StringUtilsEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      String string0 = "\\SWZ";
      String string1 = null;
      String string2 = StringUtils.reverse(string0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertEquals("ZWS\\", string2);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase(string1, string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertFalse(boolean0);
  }

  @Test
  public void test001()  throws Throwable  {
      String string0 = null;
      String string1 = "Strings must not be null";
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      
      String string2 = StringUtils.lowerCase(string0, locale0);
      assertNull(string2);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase(string1, string2);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(boolean0);
  }

  @Test
  public void test002()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.reverse(string0);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase(string0, string1);
      assertTrue(boolean0);
  }

  @Test
  public void test003()  throws Throwable  {
      String string0 = "oc?sb`r`,v(g";
      String[] stringArray0 = new String[5];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      boolean boolean0 = StringUtils.startsWithAny(string0, stringArray0);
      assertTrue(boolean0);
  }

  @Test
  public void test004()  throws Throwable  {
      String string0 = "6Jdi$4}l}";
      String string1 = StringUtils.stripToEmpty(string0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("6Jdi$4}l}", string1);
      
      String[] stringArray0 = StringUtils.substringsBetween(string0, string0, string0);
      assertNull(stringArray0);
      assertSame(string0, string1);
      
      boolean boolean0 = StringUtils.startsWithAny(string1, stringArray0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertFalse(boolean0);
  }

  @Test
  public void test005()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = new String[8];
      boolean boolean0 = StringUtils.startsWithAny(string0, stringArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test006()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.stripEnd(string0, string0);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.startsWith(string1, string1);
      assertTrue(boolean0);
  }

  @Test
  public void test007()  throws Throwable  {
      String string0 = "&h\\aKm9<";
      String string1 = null;
      boolean boolean0 = StringUtils.startsWithIgnoreCase(string1, string0);
      assertFalse(boolean0);
  }

  @Test
  public void test008()  throws Throwable  {
      String string0 = "indr<6kb6fh";
      String string1 = "TimeToLive of TimeToLive of ";
      assertNotSame(string1, string0);
      
      int int0 = StringUtils.getLevenshteinDistance(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(26, int0);
  }

  @Test
  public void test009()  throws Throwable  {
      String string0 = "=Z";
      String string1 = StringUtils.stripStart(string0, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.getLevenshteinDistance(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(2, int0);
  }

  @Test
  public void test010()  throws Throwable  {
      String string0 = "Wb/Z&%U8\\W/ C]+_2";
      int int0 = StringUtils.indexOf(string0, string0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.center(string0, int0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("Wb/Z&%U8\\W/ C]+_2", string1);
      
      String string2 = StringUtils.substringBeforeLast(string0, string0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals("", string2);
      
      int int1 = StringUtils.getLevenshteinDistance(string2, string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(int1 == int0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertEquals(17, int1);
  }

  @Test
  public void test011()  throws Throwable  {
      String string0 = "=Z";
      String string1 = StringUtils.deleteWhitespace(string0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("=Z", string1);
      
      int int0 = StringUtils.getLevenshteinDistance(string0, string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(0, int0);
  }

  @Test
  public void test012()  throws Throwable  {
      String string0 = "6Jdi$4}l}";
      String string1 = StringUtils.removeStartIgnoreCase(string0, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      
      String string2 = null;
      // Undeclared exception!
      try {
        int int0 = StringUtils.getLevenshteinDistance(string2, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
      }
  }

  @Test
  public void test013()  throws Throwable  {
      String string0 = "1E|q%^Kb%";
      String[] stringArray0 = new String[4];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertEquals("", string1);
  }

  @Test
  public void test014()  throws Throwable  {
      String[] stringArray0 = null;
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test015()  throws Throwable  {
      String string0 = "/,|n}rfp|=-b!s?x}`";
      String[] stringArray0 = new String[5];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertEquals("/,|n}rfp|=-b!s?x}`", string1);
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = "Pk60ajiTQLW>:N|";
      int int0 = 1551;
      String string1 = StringUtils.repeat(string0, string0, int0);
      String string2 = "oc*5c?sb`r`g";
      String[] stringArray0 = new String[5];
      stringArray0[0] = string1;
      stringArray0[1] = string1;
      stringArray0[2] = string1;
      stringArray0[3] = string2;
      stringArray0[4] = string0;
      int int1 = StringUtils.indexOfDifference(stringArray0);
  }

  @Test
  public void test017()  throws Throwable  {
      String string0 = "Pk60ajiTQLW>:N|";
      int int0 = 1551;
      String string1 = StringUtils.repeat(string0, string0, int0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = string1;
      stringArray0[1] = string1;
      stringArray0[2] = string1;
      stringArray0[3] = string1;
      stringArray0[4] = string0;
      int int1 = StringUtils.indexOfDifference(stringArray0);
  }

  @Test
  public void test018()  throws Throwable  {
      String string0 = "Index: ";
      String[] stringArray0 = new String[3];
      String string1 = StringUtils.substringAfter(string0, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      
      stringArray0[0] = string1;
      assertNotNull(stringArray0[0]);
      
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals(0, int0);
  }

  @Test
  public void test019()  throws Throwable  {
      String string0 = " vs ";
      int int0 = 0;
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string0, string0, int0);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
  }

  @Test
  public void test020()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test021()  throws Throwable  {
      String[] stringArray0 = new String[5];
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals((-1), int0);
  }

  @Test
  public void test022()  throws Throwable  {
      String string0 = "A9'}~&_@h=/";
      String string1 = "dfeCHC08RW";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.difference(string0, string1);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals("dfeCHC08RW", string2);
  }

  @Test
  public void test023()  throws Throwable  {
      String string0 = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
      String string1 = StringUtils.capitalize(string0);
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~", string1);
      
      String string2 = StringUtils.replace(string0, string0, string0);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~", string2);
      
      int int0 = StringUtils.indexOfDifference(string2, string1);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertEquals((-1), int0);
  }

  @Test
  public void test024()  throws Throwable  {
      String string0 = null;
      String string1 = "n";
      int int0 = StringUtils.indexOfDifference(string1, string0);
      assertEquals(0, int0);
  }

  @Test
  public void test025()  throws Throwable  {
      String string0 = "The String must not be empty";
      String string1 = null;
      int int0 = StringUtils.indexOfDifference(string1, string0);
      assertEquals(0, int0);
  }

  @Test
  public void test026()  throws Throwable  {
      String string0 = "A9'}~&_@h=/";
      String string1 = StringUtils.difference(string0, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      
      String string2 = StringUtils.difference(string0, string1);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertEquals("", string2);
  }

  @Test
  public void test027()  throws Throwable  {
      String string0 = "The Array must not";
      String string1 = null;
      String string2 = StringUtils.substringBeforeLast(string1, string1);
      assertNull(string2);
      
      char char0 = '}';
      String string3 = StringUtils.center(string0, (int) char0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string0.equals((Object)string3));
      assertNotSame(string3, string0);
      assertNotSame(string0, string3);
      assertEquals("                                                     The Array must not                                                      ", string3);
      
      String string4 = StringUtils.difference(string3, string2);
      assertNotNull(string4);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertNotSame(string3, string0);
      assertSame(string3, string4);
      assertNotSame(string4, string0);
      assertSame(string4, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertEquals("                                                     The Array must not                                                      ", string4);
  }

  @Test
  public void test028()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.upperCase(string0);
      assertNull(string1);
      
      String string2 = StringUtils.difference(string1, string1);
      assertNull(string2);
  }

  @Test
  public void test029()  throws Throwable  {
      String string0 = " is less than 0: ";
      String string1 = "`9Qf!DQM7D*>P$F;?r";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.replaceOnce(string0, string0, string1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals("`9Qf!DQM7D*>P$F;?r", string2);
      
      char char0 = 'h';
      int int0 = 16;
      String string3 = StringUtils.abbreviate(string2, (int) char0, int0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals("...DQM7D*>P$F;?r", string3);
  }

  @Test
  public void test030()  throws Throwable  {
      String string0 = "\\u";
      int int0 = 127;
      char char0 = 'h';
      int int1 = 1251;
      String string1 = StringUtils.center(string0, int1, char0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh\\uhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh", string1);
      
      String string2 = StringUtils.abbreviate(string1, int0, int0);
  }

  @Test
  public void test031()  throws Throwable  {
      String string0 = " is less than 0: ";
      String string1 = StringUtils.lowerCase(string0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(" is less than 0: ", string1);
      
      int int0 = 858;
      int int1 = 16;
      String string2 = StringUtils.abbreviate(string1, int0, int1);
      assertNotNull(string2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertEquals(" is less than...", string2);
  }

  @Test
  public void test032()  throws Throwable  {
      String string0 = "Pk60ajiTQLW>:N|";
      int int0 = 1551;
      String string1 = StringUtils.repeat(string0, string0, int0);
      int int1 = StringUtils.indexOfAny(string1, string1);
      // Undeclared exception!
      try {
        String string2 = StringUtils.abbreviate(string0, int1, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
      }
  }

  @Test
  public void test033()  throws Throwable  {
      int int0 = 0;
      String string0 = null;
      String string1 = StringUtils.abbreviate(string0, int0);
      assertNull(string1);
  }

  @Test
  public void test034()  throws Throwable  {
      String string0 = null;
      char char0 = '#';
      String string1 = StringUtils.reverseDelimited(string0, char0);
      assertNull(string1);
  }

  @Test
  public void test035()  throws Throwable  {
      String string0 = "=Z";
      String string1 = StringUtils.stripStart(string0, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.defaultIfEmpty(string1, string0);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals("=Z", string2);
  }

  @Test
  public void test036()  throws Throwable  {
      String string0 = "5)p6s,v";
      String string1 = StringUtils.defaultIfEmpty(string0, string0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("5)p6s,v", string1);
  }

  @Test
  public void test037()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.substringBeforeLast(string0, string0);
      assertNull(string1);
      
      String string2 = StringUtils.defaultString(string1);
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test
  public void test038()  throws Throwable  {
      String string0 = "The Array must not";
      boolean boolean0 = StringUtils.isAllUpperCase(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test039()  throws Throwable  {
      String string0 = ",#y=iFA|$CySU6VyF";
      String string1 = "...";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeEnd(string1, string0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertEquals("...", string2);
      
      boolean boolean0 = StringUtils.isAllUpperCase(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertFalse(boolean0);
  }

  @Test
  public void test040()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.isAllUpperCase(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test041()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAllUpperCase(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test042()  throws Throwable  {
      String string0 = "l";
      boolean boolean0 = StringUtils.isAllLowerCase(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test043()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.isAllLowerCase(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test044()  throws Throwable  {
      String string0 = "ncG]";
      String string1 = StringUtils.trim(string0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("ncG]", string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertFalse(boolean0);
  }

  @Test
  public void test045()  throws Throwable  {
      String string0 = " lengths don't matc";
      boolean boolean0 = StringUtils.isWhitespace(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test046()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isWhitespace(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test047()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.isWhitespace(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test048()  throws Throwable  {
      String string0 = " YQ7^";
      boolean boolean0 = StringUtils.isNumericSpace(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test049()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      assertNotNull(objectArray0[0]);
      
      String string0 = StringUtils.join(objectArray0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test050()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isNumericSpace(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test051()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      String string0 = StringUtils.join(objectArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test052()  throws Throwable  {
      String string0 = "2JtHSU";
      boolean boolean0 = StringUtils.isNumeric(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test053()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.isNumeric(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test054()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isNumeric(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test055()  throws Throwable  {
      String string0 = "^?P4gb9|}{=I)N'WThe String must not be empty";
      boolean boolean0 = StringUtils.isAsciiPrintable(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test056()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.replace(string0, string0, string0);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAsciiPrintable(string1);
      assertFalse(boolean0);
  }

  @Test
  public void test057()  throws Throwable  {
      String string0 = "5)p6s,v";
      boolean boolean0 = StringUtils.isAsciiPrintable(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test058()  throws Throwable  {
      String string0 = "Strings must not be null";
      boolean boolean0 = StringUtils.isAlphanumericSpace(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test059()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      assertNotNull(objectArray0[0]);
      
      String string0 = StringUtils.join(objectArray0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test060()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAlphanumericSpace(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test061()  throws Throwable  {
      String string0 = "5)p6s,v";
      boolean boolean0 = StringUtils.isAlphanumeric(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test062()  throws Throwable  {
      String string0 = null;
      int int0 = 57;
      String string1 = StringUtils.substring(string0, int0, int0);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric(string1);
      assertFalse(boolean0);
  }

  @Test
  public void test063()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.isAlphanumeric(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test064()  throws Throwable  {
      String string0 = "TimeToLive of ";
      boolean boolean0 = StringUtils.isAlphaSpace(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test065()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAlphaSpace(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test066()  throws Throwable  {
      String string0 = "oc?sb`r`,v(g";
      String string1 = StringUtils.trim(string0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("oc?sb`r`,v(g", string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertFalse(boolean0);
  }

  @Test
  public void test067()  throws Throwable  {
      String string0 = "Minimum abbreviation width is 4";
      boolean boolean0 = StringUtils.isAlpha(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test068()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.isAlpha(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test069()  throws Throwable  {
      String string0 = "VO\"I2J9O\\sc)ziBvuq";
      int int0 = 64;
      String string1 = StringUtils.mid(string0, int0, int0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      
      int int1 = StringUtils.countMatches(string0, string1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(0, int1);
  }

  @Test
  public void test070()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.swapCase(string0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", string1);
  }

  @Test
  public void test071()  throws Throwable  {
      String string0 = "The Array must not";
      String string1 = StringUtils.swapCase(string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("tHE aRRAY MUST NOT", string1);
  }

  @Test
  public void test072()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.uncapitalize(string0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", string1);
  }

  @Test
  public void test073()  throws Throwable  {
      String string0 = null;
      int int0 = 1711;
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string0, string0, int0);
      assertNull(stringArray0);
      
      String string1 = StringUtils.join((Object[]) stringArray0);
      assertNull(string1);
      
      String string2 = StringUtils.uncapitalize(string1);
      assertNull(string2);
  }

  @Test
  public void test074()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.capitalize(string0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", string1);
  }

  @Test
  public void test075()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.capitalize(string0);
      assertNull(string1);
  }

  @Test
  public void test076()  throws Throwable  {
      String string0 = ",)yCuWg>HJ_7aPM";
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      String string1 = StringUtils.lowerCase(string0, locale0);
      assertNotNull(string1);
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(",)ycuwg>hj_7apm", string1);
  }

  @Test
  public void test077()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.lowerCase(string0);
      assertNull(string1);
  }

  @Test
  public void test078()  throws Throwable  {
      String string0 = null;
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      
      String string1 = StringUtils.upperCase(string0, locale0);
      assertNull(string1);
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
  }

  @Test
  public void test079()  throws Throwable  {
      String string0 = "oc?sb`r`,v(g";
      String string1 = StringUtils.trim(string0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("oc?sb`r`,v(g", string1);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      String string2 = StringUtils.upperCase(string1, locale0);
      assertNotNull(string2);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("OC?SB`R`,V(G", string2);
  }

  @Test
  public void test080()  throws Throwable  {
      String string0 = "4RO)XSR";
      int int0 = 1;
      String string1 = null;
      String string2 = StringUtils.center(string0, int0, string1);
      assertNotNull(string2);
      assertSame(string2, string0);
      assertSame(string0, string2);
      assertEquals("4RO)XSR", string2);
  }

  @Test
  public void test081()  throws Throwable  {
      String string0 = "Minimum abbreviation width is 4";
      char char0 = '%';
      int int0 = StringUtils.lastIndexOf(string0, char0, (int) char0);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.center(string0, int0, string0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("Minimum abbreviation width is 4", string1);
  }

  @Test
  public void test082()  throws Throwable  {
      String string0 = "d`+5;D";
      String string1 = null;
      int int0 = 10;
      char char0 = '!';
      String string2 = StringUtils.center(string1, int0, char0);
      assertNull(string2);
      
      String string3 = StringUtils.center(string2, int0, string0);
      assertNull(string3);
  }

  @Test
  public void test083()  throws Throwable  {
      String string0 = " is not in the range '0' - '9'";
      int int0 = 4;
      char char0 = ',';
      String string1 = StringUtils.center(string0, int0, char0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(" is not in the range '0' - '9'", string1);
  }

  @Test
  public void test084()  throws Throwable  {
      String string0 = ", Length: ";
      String string1 = null;
      int int0 = 1711;
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string1, string0, int0);
      assertNull(stringArray0);
      
      String string2 = StringUtils.join((Object[]) stringArray0);
      assertNull(string2);
      
      int int1 = StringUtils.length(string2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test
  public void test085()  throws Throwable  {
      char char0 = '\u008F';
      String string0 = "<k`[N.DjSjhStv+E";
      String string1 = StringUtils.center(string0, (int) char0, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("<k`[N.DjSjhStv+E<k`[N.DjSjhStv+E<k`[N.DjSjhStv+E<k`[N.DjSjh<k`[N.DjSjhStv+E<k`[N.DjSjhStv+E<k`[N.DjSjhStv+E<k`[N.DjSjhStv+E<k`[N.DjSjh", string1);
  }

  @Test
  public void test086()  throws Throwable  {
      String string0 = "CC";
      int int0 = 4;
      String string1 = StringUtils.leftPad(string0, int0, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("CCCC", string1);
  }

  @Test
  public void test087()  throws Throwable  {
      int int0 = 2592;
      String string0 = null;
      String string1 = StringUtils.replaceOnce(string0, string0, string0);
      assertNull(string1);
      
      char char0 = 'O';
      String string2 = StringUtils.leftPad(string1, int0, char0);
      assertNull(string2);
  }

  @Test
  public void test088()  throws Throwable  {
      String string0 = "Pk60ajiTQLW>:N|";
      int int0 = 1551;
      String string1 = StringUtils.repeat(string0, string0, int0);
      String string2 = "ni&";
      int int1 = StringUtils.indexOfAny(string1, string2);
      String string3 = StringUtils.rightPad(string2, int1, string1);
  }

  @Test
  public void test089()  throws Throwable  {
      String string0 = "Cannot get the toString of a null identity";
      String string1 = StringUtils.substringAfterLast(string0, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      
      int int0 = 0;
      String string2 = StringUtils.rightPad(string1, int0, string1);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("", string2);
  }

  @Test
  public void test090()  throws Throwable  {
      String string0 = "The Array must not";
      String string1 = null;
      String string2 = StringUtils.substringBeforeLast(string1, string1);
      assertNull(string2);
      
      int int0 = StringUtils.length(string0);
      assertEquals(18, int0);
      
      String string3 = StringUtils.rightPad(string2, int0, string2);
      assertNull(string3);
  }

  @Test
  public void test091()  throws Throwable  {
      String string0 = null;
      int int0 = 2278;
      String string1 = StringUtils.rightPad(string0, int0);
      assertNull(string1);
  }

  @Test
  public void test092()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.substringBeforeLast(string0, string0);
      assertNull(string1);
      
      String string2 = "[~wzC<e";
      int int0 = (-1458);
      String string3 = StringUtils.repeat(string2, string1, int0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertNotSame(string3, string2);
      assertNotSame(string2, string3);
      assertEquals("", string3);
  }

  @Test
  public void test093()  throws Throwable  {
      String string0 = "\\u";
      char char0 = 'h';
      String string1 = StringUtils.repeat(string0, (int) char0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u", string1);
  }

  @Test
  public void test094()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.stripToEmpty(string0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", string1);
      
      char char0 = '<';
      String string2 = StringUtils.repeat(string1, (int) char0);
      assertNotNull(string2);
      assertSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string1, string2);
      assertSame(string1, string0);
      assertEquals("", string2);
  }

  @Test
  public void test095()  throws Throwable  {
      String string0 = "The Array must not be null";
      int int0 = 1;
      String string1 = StringUtils.repeat(string0, int0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("The Array must not be null", string1);
  }

  @Test
  public void test096()  throws Throwable  {
      String string0 = ",#y=iFA|$CySU6VyF";
      String string1 = StringUtils.removeEnd(string0, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      
      String string2 = null;
      int int0 = StringUtils.indexOfAny(string2, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.repeat(string2, string1, int0);
      assertNull(string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test097()  throws Throwable  {
      String string0 = "\"";
      String string1 = StringUtils.chop(string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
  }

  @Test
  public void test098()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.chop(string0);
      assertNull(string1);
  }

  @Test
  public void test099()  throws Throwable  {
      String string0 = "d*Uf_";
      String string1 = "Z_^4m7;/[UARoLx";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.chomp(string0, string1);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertEquals("d*Uf_", string2);
  }

  @Test
  public void test100()  throws Throwable  {
      String string0 = ", Length: ";
      String string1 = null;
      int int0 = 1711;
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string1, string1, int0);
      assertNull(stringArray0);
      
      String string2 = StringUtils.uncapitalize(string0);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string0.equals((Object)string2));
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertEquals(", Length: ", string2);
      
      String string3 = StringUtils.join((Object[]) stringArray0);
      assertNull(string3);
      
      String string4 = StringUtils.chomp(string2, string3);
      assertNotNull(string4);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string4));
      assertTrue(string4.equals((Object)string0));
      assertSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string4, string0);
      assertSame(string4, string2);
      assertEquals(", Length: ", string4);
  }

  @Test
  public void test101()  throws Throwable  {
      String string0 = "The Array must not be null";
      String string1 = null;
      String string2 = StringUtils.chomp(string1, string0);
      assertNull(string2);
  }

  @Test
  public void test102()  throws Throwable  {
      String string0 = " ";
      String string1 = StringUtils.chomp(string0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(" ", string1);
  }

  @Test
  public void test103()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.chomp(string0);
      assertNull(string1);
  }

  @Test
  public void test104()  throws Throwable  {
      String string0 = "H:uo]]R'fDP";
      int int0 = 2592;
      int int1 = (-1917);
      String string1 = StringUtils.overlay(string0, string0, int0, int1);
      assertNotNull(string1);
      assertFalse(int1 == int0);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("H:uo]]R'fDP", string1);
  }

  @Test
  public void test105()  throws Throwable  {
      String string0 = "Minimum abbreviation width is 4";
      char char0 = '%';
      int int0 = StringUtils.lastIndexOf(string0, char0, (int) char0);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.overlay(string0, string0, int0, (int) char0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("Minimum abbreviation width is 4", string1);
  }

  @Test
  public void test106()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = new String[2];
      int int0 = StringUtils.lastIndexOfAny(string0, stringArray0);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.overlay(string0, string0, int0, int0);
      assertNull(string1);
  }

  @Test
  public void test107()  throws Throwable  {
      String string0 = "9lV7Al0<G.Cd$lWiLz";
      String string1 = "/|E)3bM/O_";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.replaceChars(string1, string0, string0);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals("/|E)3bM/O_", string2);
  }

  @Test
  public void test108()  throws Throwable  {
      String string0 = "]\\ttNY%O{p\"u5[=";
      String string1 = "search and replace array len9lv7al0<g.cd$lwilzndex: ";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.replaceChars(string1, string0, string1);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("search and re lace array len9lv7al0<g.cd$rlwilzndex: ", string2);
  }

  @Test
  public void test109()  throws Throwable  {
      String string0 = null;
      String string1 = " ";
      String string2 = " is not in the range '0' - '9'";
      assertNotSame(string2, string1);
      
      String string3 = StringUtils.replaceChars(string1, string2, string0);
      assertNotNull(string3);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertEquals("", string3);
  }

  @Test
  public void test110()  throws Throwable  {
      String string0 = "~@FHO]!.t";
      String string1 = StringUtils.replaceChars(string0, string0, string0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("~@FHO]!.t", string1);
      
      String string2 = null;
      String string3 = StringUtils.replaceChars(string1, string2, string1);
      assertNotNull(string3);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string0.equals((Object)string3));
      assertTrue(string0.equals((Object)string1));
      assertSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string3, string0);
      assertSame(string3, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertEquals("~@FHO]!.t", string3);
  }

  @Test
  public void test111()  throws Throwable  {
      String string0 = "]\\ttNY%O{p\"u5[=";
      String string1 = StringUtils.upperCase(string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("]\\TTNY%O{P\"U5[=", string1);
      
      String string2 = StringUtils.replaceChars(string0, string0, string1);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)string2));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertEquals("]\\TTNY%O{P\"U5[=", string2);
  }

  @Test
  public void test112()  throws Throwable  {
      String string0 = " vs ";
      String string1 = StringUtils.trimToNull(string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("vs", string1);
      
      int int0 = 0;
      String string2 = StringUtils.mid(string0, int0, int0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.replaceChars(string2, string0, string1);
      assertNotNull(string3);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals("", string3);
  }

  @Test
  public void test113()  throws Throwable  {
      char char0 = '@';
      String string0 = null;
      String string1 = StringUtils.replaceChars(string0, char0, char0);
      assertNull(string1);
  }

  @Test
  public void test114()  throws Throwable  {
      String string0 = "W|By_`v,*OwMx^@P6";
      int int0 = 0;
      String string1 = StringUtils.repeat(string0, string0, int0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      
      char char0 = '8';
      String string2 = StringUtils.replaceChars(string1, char0, char0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertEquals("", string2);
  }

  @Test
  public void test115()  throws Throwable  {
      String string0 = "-";
      int int0 = 1440;
      String string1 = StringUtils.repeat(string0, int0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEqualsstring1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      String string2 = StringUtils.replaceEach(string1, stringArray0, stringArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEqualsstring2);
  }

  @Test
  public void test116()  throws Throwable  {
      String string0 = "\\SWZ";
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(string0);
      assertNotNull(stringArray0);
      
      String string1 = "Strings must not be null";
      assertNotSame(string1, string0);
      
      String string2 = " is less than 0: ";
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      char char0 = 'i';
      String[] stringArray1 = StringUtils.split(string2, char0);
      assertNotNull(stringArray1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(stringArray1, stringArray0);
      
      String string3 = StringUtils.replaceEachRepeatedly(string1, stringArray1, stringArray0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals("Strings\\must\\not\\be\\null", string3);
  }

  @Test
  public void test117()  throws Throwable  {
      String string0 = ",#y=iFA|$CySU6VyF";
      String string1 = StringUtils.removeEnd(string0, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      
      String string2 = "%gLE[WK";
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string2, string1);
      assertNotNull(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      String string3 = StringUtils.replaceEachRepeatedly(string0, stringArray0, stringArray0);
      assertNotNull(string3);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string0, string3);
      assertSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals(",#y=iFA|$CySU6VyF", string3);
  }

  @Test
  public void test118()  throws Throwable  {
      String string0 = "W|By_`v,*OwMx^@P6";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, string0);
      assertNotNull(stringArray0);
      
      int int0 = 0;
      String string1 = StringUtils.repeat(string0, string0, int0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      
      String[] stringArray1 = StringUtils.split(string0, string1);
      assertNotNull(stringArray1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(string0, string1);
      
      // Undeclared exception!
      try {
        String string2 = StringUtils.replaceEachRepeatedly(string0, stringArray1, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 1 vs 18
         //
      }
  }

  @Test
  public void test119()  throws Throwable  {
      String string0 = "Zc_";
      String string1 = StringUtils.chomp(string0, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = string1;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string1;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string1;
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = string1;
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = string0;
      assertNotNull(stringArray0[6]);
      
      stringArray0[7] = string0;
      assertNotNull(stringArray0[7]);
      
      // Undeclared exception!
      try {
        String string2 = StringUtils.replaceEachRepeatedly(string0, stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: Zc_
         //
      }
  }

  @Test
  public void test120()  throws Throwable  {
      String string0 = "";
      String string1 = " vs ";
      assertNotSame(string1, string0);
      
      char char0 = '{';
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string1, string1);
      assertNotNull(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator(string0, string0, (int) char0);
      assertNotNull(stringArray1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(string0, string1);
      assertNotSame(stringArray1, stringArray0);
      
      String string2 = StringUtils.replaceEachRepeatedly(string1, stringArray0, stringArray1);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(" vs ", string2);
  }

  @Test
  public void test121()  throws Throwable  {
      String string0 = "Minimum abbreviation width is 4";
      String[] stringArray0 = StringUtils.substringsBetween(string0, string0, string0);
      assertNull(stringArray0);
      
      String string1 = StringUtils.replaceEach(string0, stringArray0, stringArray0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("Minimum abbreviation width is 4", string1);
  }

  @Test
  public void test122()  throws Throwable  {
      String string0 = "\"";
      int int0 = (-1398);
      String string1 = StringUtils.substring(string0, int0, int0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      
      String[] stringArray0 = new String[7];
      String string2 = StringUtils.replaceEach(string1, stringArray0, stringArray0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("", string2);
  }

  @Test
  public void test123()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = new String[2];
      String string1 = StringUtils.replaceEach(string0, stringArray0, stringArray0);
      assertNull(string1);
  }

  @Test
  public void test124()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      assertNotNull(objectArray0[0]);
      
      String string0 = StringUtils.join(objectArray0);
      assertNotNull(string0);
      
      int int0 = 170;
      String string1 = StringUtils.replace(string0, string0, string0, int0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test125()  throws Throwable  {
      String string0 = "', is neither of type Map.Entry nor an Array";
      String string1 = StringUtils.defaultString(string0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("', is neither of type Map.Entry nor an Array", string1);
      
      String string2 = "H=HHo%@NTM@P";
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      String string3 = StringUtils.replace(string2, string1, string0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string2, string1);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertEquals("H=HHo%@NTM@P", string3);
  }

  @Test
  public void test126()  throws Throwable  {
      String string0 = "VO\"I2J9O\\sc)ziBvuq";
      int int0 = 64;
      String string1 = StringUtils.mid(string0, int0, int0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      
      int int1 = StringUtils.countMatches(string1, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(0, int1);
      
      String string2 = StringUtils.replace(string0, string0, string0, int1);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertEquals("VO\"I2J9O\\sc)ziBvuq", string2);
  }

  @Test
  public void test127()  throws Throwable  {
      String string0 = "A9'}~&_@h=/";
      String string1 = null;
      int int0 = 0;
      String string2 = StringUtils.replace(string0, string0, string1, int0);
      assertNotNull(string2);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertEquals("A9'}~&_@h=/", string2);
  }

  @Test
  public void test128()  throws Throwable  {
      String string0 = "DR12R]gk";
      char char0 = '1';
      String string1 = StringUtils.remove(string0, char0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("DR2R]gk", string1);
  }

  @Test
  public void test129()  throws Throwable  {
      String string0 = "!zM";
      char char0 = '@';
      String string1 = StringUtils.remove(string0, char0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("!zM", string1);
  }

  @Test
  public void test130()  throws Throwable  {
      String string0 = "\\u";
      int int0 = StringUtils.indexOfAny(string0, string0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.substring(string0, int0, int0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      
      char char0 = 'h';
      String string2 = StringUtils.remove(string1, char0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals("", string2);
  }

  @Test
  public void test131()  throws Throwable  {
      String string0 = "Z_^4m7;/[UARoLx";
      char char0 = 'q';
      String string1 = StringUtils.chomp(string0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("Z_^4m7;/[UARoLx", string1);
      
      Object[] objectArray0 = new Object[6];
      String string2 = StringUtils.join(objectArray0, char0, (int) char0, (int) char0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("", string2);
      
      String string3 = StringUtils.remove(string1, string2);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(string3, string1);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string0, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertSame(string1, string3);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertEquals("Z_^4m7;/[UARoLx", string3);
  }

  @Test
  public void test132()  throws Throwable  {
      String string0 = "The String must not be empty";
      String string1 = StringUtils.remove(string0, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
  }

  @Test
  public void test133()  throws Throwable  {
      String string0 = "W|By_`v,*OwMx^@P6";
      int int0 = 0;
      String string1 = StringUtils.repeat(string0, string0, int0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.remove(string1, string1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals("", string2);
  }

  @Test
  public void test134()  throws Throwable  {
      String string0 = "Minimum abbreviation width is 4";
      String string1 = "vBhDqk[D06";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeEndIgnoreCase(string1, string0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals("vBhDqk[D06", string2);
  }

  @Test
  public void test135()  throws Throwable  {
      String string0 = "Cannot get the toString of a null identity";
      String string1 = StringUtils.substringAfterLast(string0, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.removeEndIgnoreCase(string0, string1);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("Cannot get the toString of a null identity", string2);
  }

  @Test
  public void test136()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.removeEndIgnoreCase(string0, string0);
      assertNull(string1);
  }

  @Test
  public void test137()  throws Throwable  {
      String string0 = "";
      String string1 = " vs ";
      assertNotSame(string1, string0);
      
      String string2 = "[|nN8gM%#MEse*Q5tB%";
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string0, string0);
      assertNotNull(stringArray0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      
      String string3 = StringUtils.replaceEachRepeatedly(string1, stringArray0, stringArray0);
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string1, string3);
      assertSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertEquals(" vs ", string3);
      
      String string4 = StringUtils.removeStartIgnoreCase(string3, string2);
      assertNotNull(string4);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string1, string3);
      assertSame(string1, string4);
      assertSame(string3, string4);
      assertSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string2, string4);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertSame(string4, string3);
      assertSame(string4, string1);
      assertEquals(" vs ", string4);
  }

  @Test
  public void test138()  throws Throwable  {
      String string0 = ", Length: ";
      int int0 = 1711;
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string0, string0, int0);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.uncapitalize(string0);
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(", Length: ", string1);
      
      String string2 = StringUtils.join((Object[]) stringArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.removeStartIgnoreCase(string1, string2);
      assertNotNull(string3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertTrue(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertEquals(", Length: ", string3);
  }

  @Test
  public void test139()  throws Throwable  {
      String string0 = "H:uo]]R'fDP";
      int int0 = 2592;
      String string1 = "5)p6s,v";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.overlay(string1, string0, int0, int0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertEquals("5)p6s,vH:uo]]R'fDP", string2);
      
      String string3 = StringUtils.removeStart(string2, string0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string2, string3);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertEquals("5)p6s,vH:uo]]R'fDP", string3);
  }

  @Test
  public void test140()  throws Throwable  {
      String string0 = "6Jdi$4}l}";
      String string1 = StringUtils.removeStartIgnoreCase(string0, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      
      String string2 = StringUtils.removeStart(string0, string1);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertEquals("6Jdi$4}l}", string2);
  }

  @Test
  public void test141()  throws Throwable  {
      String string0 = ",#y=iFA|$CySU6VyF";
      String string1 = "...";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeEnd(string1, string0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertEquals("...", string2);
      
      String string3 = StringUtils.removeStart(string2, string2);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertEquals("", string3);
  }

  @Test
  public void test142()  throws Throwable  {
      String string0 = "W|By_`v,*OwMx^@P6";
      int int0 = 0;
      String string1 = StringUtils.repeat(string0, string0, int0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.removeStart(string1, string0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals("", string2);
  }

  @Test
  public void test143()  throws Throwable  {
      char char0 = 'O';
      String string0 = "Minimum abbreviation width is 4";
      String string1 = StringUtils.repeat(string0, (int) char0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4", string1);
      
      String string2 = StringUtils.deleteWhitespace(string1);
  }

  @Test
  public void test144()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.deleteWhitespace(string0);
      assertNull(string1);
  }

  @Test
  public void test145()  throws Throwable  {
      String string0 = "d`+5;D";
      int int0 = 10;
      char char0 = '!';
      String string1 = StringUtils.center(string0, int0, char0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("!!d`+5;D!!", string1);
      
      LinkedList<Integer> linkedList0 = null;
      String string2 = StringUtils.join((Collection<?>) linkedList0, string1);
      assertNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test146()  throws Throwable  {
      Collection<Integer> collection0 = null;
      char char0 = 'p';
      String string0 = StringUtils.join(collection0, char0);
      assertNull(string0);
  }

  @Test
  public void test147()  throws Throwable  {
      String string0 = ", Length: 0";
      int int0 = 213;
      String string1 = StringUtils.mid(string0, int0, int0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      boolean boolean0 = linkedList0.add((Object) linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals("[(this Collection)]", linkedList0.toString());
      assertTrue(boolean0);
      
      boolean boolean1 = linkedList0.add((Object) string0);
      assertEquals(2, linkedList0.size());
      assertEquals("[(this Collection), , Length: 0]", linkedList0.toString());
      assertTrue(boolean1 == boolean0);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertTrue(boolean1);
      
      String string2 = StringUtils.join((Collection<?>) linkedList0, string1);
      assertNotNull(string2);
      assertEquals(2, linkedList0.size());
      assertEquals("[(this Collection), , Length: 0]", linkedList0.toString());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals("[(this Collection), , Length: 0], Length: 0", string2);
  }

  @Test
  public void test148()  throws Throwable  {
      String string0 = ", Length: 0";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((Object) linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals("[(this Collection)]", linkedList0.toString());
      assertTrue(boolean0);
      
      String string1 = StringUtils.join((Collection<?>) linkedList0, string0);
      assertNotNull(string1);
      assertEquals(1, linkedList0.size());
      assertEquals("[(this Collection)]", linkedList0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("[(this Collection)]", string1);
  }

  @Test
  public void test149()  throws Throwable  {
      String string0 = null;
      String string1 = "Minimum abbreviation width with offset is 7";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      int int0 = 0;
      linkedList0.add(int0, string1);
      assertEquals(1, linkedList0.size());
      assertEquals("[Minimum abbreviation width with offset is 7]", linkedList0.toString());
      
      boolean boolean0 = linkedList0.add(string0);
      assertEquals(2, linkedList0.size());
      assertEquals("[Minimum abbreviation width with offset is 7, null]", linkedList0.toString());
      assertTrue(boolean0);
      
      char char0 = '=';
      String string2 = StringUtils.join((Collection<?>) linkedList0, char0);
      assertNotNull(string2);
      assertEquals(2, linkedList0.size());
      assertEquals("[Minimum abbreviation width with offset is 7, null]", linkedList0.toString());
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string1);
      assertEquals("Minimum abbreviation width with offset is 7=", string2);
  }

  @Test
  public void test150()  throws Throwable  {
      String string0 = null;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      int int0 = 0;
      linkedList0.add(int0, string0);
      assertEquals(1, linkedList0.size());
      assertEquals("[null]", linkedList0.toString());
      
      boolean boolean0 = linkedList0.add(string0);
      assertEquals("[null, null]", linkedList0.toString());
      assertEquals(2, linkedList0.size());
      assertTrue(boolean0);
      
      char char0 = '=';
      String string1 = StringUtils.join((Collection<?>) linkedList0, char0);
      assertNotNull(string1);
      assertEquals("[null, null]", linkedList0.toString());
      assertEquals(2, linkedList0.size());
      assertEquals("=", string1);
  }

  @Test
  public void test151()  throws Throwable  {
      char char0 = 'C';
      int int0 = (-1944);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      boolean boolean0 = linkedList0.add((Integer) int0);
      assertEquals(1, linkedList0.size());
      assertEquals("[-1944]", linkedList0.toString());
      assertTrue(boolean0);
      
      Iterator<Integer> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(1, linkedList0.size());
      assertEquals("[-1944]", linkedList0.toString());
      
      String string0 = StringUtils.join(iterator0, char0);
      assertNotNull(string0);
      assertEquals(1, linkedList0.size());
      assertEquals("[-1944]", linkedList0.toString());
      assertEquals("-1944", string0);
  }

  @Test
  public void test152()  throws Throwable  {
      Iterator<Integer> iterator0 = null;
      char char0 = '8';
      String string0 = StringUtils.join(iterator0, char0);
      assertNull(string0);
  }

  @Test
  public void test153()  throws Throwable  {
      String string0 = null;
      char char0 = '|';
      int int0 = StringUtils.lastIndexOf(string0, char0);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split(string0, char0);
      assertNull(stringArray0);
      
      String string1 = StringUtils.join((Object[]) stringArray0, char0, (int) char0, int0);
      assertNull(string1);
  }

  @Test
  public void test154()  throws Throwable  {
      String string0 = "";
      char char0 = 'v';
      String[] stringArray0 = StringUtils.substringsBetween(string0, string0, string0);
      assertNull(stringArray0);
      
      String string1 = StringUtils.join((Object[]) stringArray0, char0);
      assertNull(string1);
  }

  @Test
  public void test155()  throws Throwable  {
      String string0 = "Z_^4m7;/[UARoLx";
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) string0;
      assertNotNull(objectArray0[0]);
      
      char char0 = 'r';
      String string1 = StringUtils.join(objectArray0, char0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertEquals("Z_^4m7;/[UARoLxrrrr", string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(string1);
      assertNotNull(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
  }

  @Test
  public void test156()  throws Throwable  {
      String string0 = "R66u)>;AakIpvp3H(W";
      int int0 = 2;
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, string0, int0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test157()  throws Throwable  {
      String string0 = ",]FG?w!_)xZEHj";
      String string1 = "RvTFj}fm,:Rvt2LE";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.split(string0, string1);
      assertNotNull(stringArray0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test158()  throws Throwable  {
      String string0 = "l";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test159()  throws Throwable  {
      String string0 = "n";
      String string1 = StringUtils.lowerCase(string0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("n", string1);
      
      String string2 = "dy7nUNs`q+L`Nr-A";
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      char char0 = 'r';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string2, string1, (int) char0);
      assertNotNull(stringArray0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
  }

  @Test
  public void test160()  throws Throwable  {
      String string0 = "h";
      String[] stringArray0 = StringUtils.split(string0, string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test161()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = "Search ";
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      char char0 = ' ';
      String[] stringArray1 = StringUtils.splitPreserveAllTokens(stringArray0[2], char0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
  }

  @Test
  public void test162()  throws Throwable  {
      String string0 = "vrzcof:-j's";
      char char0 = 's';
      String string1 = StringUtils.reverseDelimited(string0, char0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("vrzcof:-j'", string1);
  }

  @Test
  public void test163()  throws Throwable  {
      String string0 = "";
      char char0 = '{';
      String string1 = StringUtils.reverseDelimited(string0, char0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("", string1);
  }

  @Test
  public void test164()  throws Throwable  {
      String string0 = "l";
      String string1 = "The Character must not be null";
      assertNotSame(string1, string0);
      
      int int0 = StringUtils.countMatches(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(2, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string1, string0, int0);
      assertNotNull(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test165()  throws Throwable  {
      String string0 = "l";
      String string1 = "The Character must not be null";
      assertNotSame(string1, string0);
      
      int int0 = StringUtils.countMatches(string1, string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertEquals(1, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string1, string0, int0);
      assertNotNull(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test166()  throws Throwable  {
      String string0 = "Index: ";
      String string1 = StringUtils.substringAfter(string0, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string0, string1);
      assertNotNull(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test167()  throws Throwable  {
      String string0 = ",#y=iFA|$CySU6VyF";
      String string1 = null;
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string0, string1);
      assertNotNull(stringArray0);
  }

  @Test
  public void test168()  throws Throwable  {
      String string0 = "MQ)3SD&<";
      String string1 = "\\u0";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.substringsBetween(string0, string0, string1);
      assertNull(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test169()  throws Throwable  {
      String string0 = "Pk60ajiTQLW>:N|";
      String string1 = "rGkFc";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.substringsBetween(string0, string1, string1);
      assertNull(stringArray0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test170()  throws Throwable  {
      String string0 = "Tq2Zr3 ?y";
      String string1 = StringUtils.defaultString(string0, string0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("Tq2Zr3 ?y", string1);
      
      int int0 = 0;
      String string2 = StringUtils.repeat(string0, int0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals("", string2);
      
      String[] stringArray0 = StringUtils.substringsBetween(string2, string1, string1);
      assertNotNull(stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
  }

  @Test
  public void test171()  throws Throwable  {
      String string0 = ">%|33LANdIYn67Ni^ ";
      int int0 = 7;
      String string1 = "";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.right(string1, int0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertEquals("", string2);
      
      String[] stringArray0 = StringUtils.substringsBetween(string0, string2, string0);
      assertNull(stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
  }

  @Test
  public void test172()  throws Throwable  {
      String string0 = ">%|33LANdIYn67Ni^ ";
      int int0 = 7;
      String string1 = StringUtils.right(string0, int0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("n67Ni^ ", string1);
      
      String[] stringArray0 = StringUtils.substringsBetween(string0, string1, string0);
      assertNull(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test173()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.substringBeforeLast(string0, string0);
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.substringsBetween(string0, string1, string0);
      assertNull(stringArray0);
  }

  @Test
  public void test174()  throws Throwable  {
      String string0 = "fcm~?*cw6azg\"5'0";
      String string1 = StringUtils.chop(string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("fcm~?*cw6azg\"5'", string1);
      
      String string2 = StringUtils.substringBetween(string1, string0, string1);
      assertNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test175()  throws Throwable  {
      String string0 = "Tq2Zr3 ?y";
      String string1 = null;
      String string2 = StringUtils.defaultString(string1, string0);
      assertNotNull(string2);
      assertSame(string2, string0);
      assertSame(string0, string2);
      assertEquals("Tq2Zr3 ?y", string2);
      
      String string3 = StringUtils.substringBetween(string0, string2, string1);
      assertNull(string3);
      assertSame(string2, string0);
      assertSame(string0, string2);
  }

  @Test
  public void test176()  throws Throwable  {
      String string0 = "nyk]7V9Z_vEP]E";
      String string1 = null;
      String string2 = StringUtils.defaultString(string1, string0);
      assertNotNull(string2);
      assertSame(string2, string0);
      assertSame(string0, string2);
      assertEquals("nyk]7V9Z_vEP]E", string2);
      
      String string3 = StringUtils.substringBetween(string2, string1, string1);
      assertNull(string3);
      assertSame(string2, string0);
      assertSame(string0, string2);
  }

  @Test
  public void test177()  throws Throwable  {
      String string0 = "i.-_TGqPsunf?U";
      int int0 = (-3687);
      String string1 = null;
      String string2 = StringUtils.right(string1, int0);
      assertNull(string2);
      
      String string3 = StringUtils.substringBetween(string2, string0, string0);
      assertNull(string3);
  }

  @Test
  public void test178()  throws Throwable  {
      String string0 = " ";
      String string1 = " is not in the range '0' - '9'";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringAfterLast(string1, string0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("'9'", string2);
  }

  @Test
  public void test179()  throws Throwable  {
      String string0 = "oc?sb`r`,v(g";
      String string1 = "c*5)p6s";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.trim(string1);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertEquals("c*5)p6s", string2);
      
      String string3 = StringUtils.substringAfterLast(string0, string2);
      assertNotNull(string3);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string3);
      assertEquals("", string3);
  }

  @Test
  public void test180()  throws Throwable  {
      String string0 = "org.apache.commons.lang.StringUtils";
      String string1 = "";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringAfterLast(string0, string1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertEquals("", string2);
  }

  @Test
  public void test181()  throws Throwable  {
      String string0 = "The Array must not be null";
      String string1 = StringUtils.chomp(string0, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.substringAfterLast(string1, string0);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals("", string2);
  }

  @Test
  public void test182()  throws Throwable  {
      String string0 = "1E|q%^Kb%";
      String string1 = "l";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringBeforeLast(string0, string1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertEquals("1E|q%^Kb%", string2);
  }

  @Test
  public void test183()  throws Throwable  {
      String string0 = "1E|q%^Kb%";
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      Iterator<Integer> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      char char0 = '3';
      String string1 = StringUtils.join(iterator0, char0);
      assertNotNull(string1);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertEquals("", string1);
      
      String string2 = StringUtils.substringBeforeLast(string0, string1);
      assertNotNull(string2);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertEquals("1E|q%^Kb%", string2);
  }

  @Test
  public void test184()  throws Throwable  {
      String string0 = "ncG]";
      String string1 = "oc*5)c?sb`r`";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringAfter(string0, string1);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertEquals("", string2);
  }

  @Test
  public void test185()  throws Throwable  {
      String string0 = "A9'}~&_@h=/";
      String string1 = null;
      String string2 = StringUtils.substringAfter(string0, string1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertEquals("", string2);
  }

  @Test
  public void test186()  throws Throwable  {
      String string0 = "g/eXFw";
      int int0 = 10;
      String string1 = StringUtils.leftPad(string0, int0, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("g/eXg/eXFw", string1);
      
      char char0 = '|';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, char0);
      assertNotNull(stringArray0);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      
      String string2 = StringUtils.join((Object[]) stringArray0, string1, (int) char0, (int) char0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.substringAfter(string2, string1);
      assertNotNull(string3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertEquals("", string3);
  }

  @Test
  public void test187()  throws Throwable  {
      String string0 = "', is neither of type Map.Entry nor an Array";
      String string1 = "C";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringBefore(string0, string1);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals("', is neither of type Map.Entry nor an Array", string2);
  }

  @Test
  public void test188()  throws Throwable  {
      String string0 = " vs ";
      String string1 = StringUtils.trimToNull(string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("vs", string1);
      
      int int0 = 0;
      String string2 = StringUtils.mid(string0, int0, int0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("", string2);
      
      String string3 = StringUtils.substringBefore(string1, string2);
      assertNotNull(string3);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertEquals("", string3);
  }

  @Test
  public void test189()  throws Throwable  {
      String string0 = "&h\\aKm9<";
      String string1 = null;
      String string2 = StringUtils.swapCase(string1);
      assertNull(string2);
      
      String string3 = StringUtils.substringBefore(string0, string2);
      assertNotNull(string3);
      assertSame(string0, string3);
      assertSame(string3, string0);
      assertEquals("&h\\aKm9<", string3);
  }

  @Test
  public void test190()  throws Throwable  {
      String string0 = "', is neither of type Map.Entry nor an Array";
      String string1 = StringUtils.capitalize(string0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("', is neither of type Map.Entry nor an Array", string1);
      
      String string2 = StringUtils.substringBefore(string0, string1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals("", string2);
  }

  @Test
  public void test191()  throws Throwable  {
      String string0 = ",#y=iFA|$CySU6VyF";
      String string1 = StringUtils.removeEnd(string0, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.substringBefore(string1, string1);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals("", string2);
  }

  @Test
  public void test192()  throws Throwable  {
      String string0 = ">%|33LANdIYn67Ni^ ";
      int int0 = 7;
      char char0 = ']';
      String string1 = StringUtils.mid(string0, int0, (int) char0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("NdIYn67Ni^ ", string1);
  }

  @Test
  public void test193()  throws Throwable  {
      String string0 = "+}f\"OLXq}5";
      int int0 = (-2406);
      int int1 = 0;
      String string1 = StringUtils.mid(string0, int0, int1);
      assertNotNull(string1);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
  }

  @Test
  public void test194()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = new String[2];
      int int0 = StringUtils.indexOfAny(string0, stringArray0);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.mid(string0, int0, int0);
      assertNull(string1);
  }

  @Test
  public void test195()  throws Throwable  {
      String string0 = " is less than 0: ";
      String string1 = StringUtils.lowerCase(string0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(" is less than 0: ", string1);
      
      int int0 = 0;
      String string2 = StringUtils.left(string1, int0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertEquals("", string2);
  }

  @Test
  public void test196()  throws Throwable  {
      String string0 = "/,|n}rfp|=-b!s?x}`";
      int int0 = (-1806);
      String string1 = StringUtils.leftPad(string0, int0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("/,|n}rfp|=-b!s?x}`", string1);
      
      String string2 = StringUtils.left(string1, int0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertEquals("", string2);
  }

  @Test
  public void test197()  throws Throwable  {
      String string0 = ", Length: 0";
      int int0 = 213;
      char[] charArray0 = new char[3];
      String string1 = StringUtils.mid(string0, int0, int0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      
      String string2 = null;
      String string3 = StringUtils.removeStartIgnoreCase(string2, string1);
      assertNull(string3);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string4 = StringUtils.left(string3, (int) charArray0[0]);
      assertNull(string4);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test198()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      String string0 = StringUtils.join(objectArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.length(string0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.left(string0, int0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("", string1);
  }

  @Test
  public void test199()  throws Throwable  {
      String string0 = "\\u";
      int int0 = 127;
      String string1 = StringUtils.substring(string0, int0, int0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
  }

  @Test
  public void test200()  throws Throwable  {
      String string0 = "zcofb";
      int int0 = (-114);
      String string1 = StringUtils.substring(string0, int0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("zcofb", string1);
  }

  @Test
  public void test201()  throws Throwable  {
      char char0 = 'O';
      String string0 = null;
      String string1 = StringUtils.substring(string0, (int) char0);
      assertNull(string1);
  }

  @Test
  public void test202()  throws Throwable  {
      String string0 = "c*5)p6s";
      char char0 = 'G';
      String string1 = StringUtils.substring(string0, (int) char0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
  }

  @Test
  public void test203()  throws Throwable  {
      String string0 = "S0Jbetu+AZ08#,H";
      String string1 = "vrzc:-j'si_";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[1] = string1;
      assertNotNull(stringArray0[1]);
      
      int int0 = StringUtils.lastIndexOfAny(string0, stringArray0);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertEquals((-1), int0);
  }

  @Test
  public void test204()  throws Throwable  {
      String string0 = "S0Jbetu+AZ08#,H";
      String[] stringArray0 = new String[5];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      int int0 = StringUtils.lastIndexOfAny(string0, stringArray0);
      assertEquals(0, int0);
  }

  @Test
  public void test205()  throws Throwable  {
      String string0 = "+}f\"OLXq}5";
      int int0 = (-2406);
      String string1 = StringUtils.mid(string0, int0, int0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = string1;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string1;
      assertNotNull(stringArray0[1]);
      
      int int1 = StringUtils.indexOfAny(string1, stringArray0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(0, int1);
  }

  @Test
  public void test206()  throws Throwable  {
      String string0 = "+}f\"OLXq}5";
      int int0 = (-2406);
      String string1 = StringUtils.rightPad(string0, int0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("+}f\"OLXq}5", string1);
      
      String string2 = "The character ";
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      String[] stringArray0 = new String[7];
      stringArray0[5] = string1;
      assertNotNull(stringArray0[5]);
      
      int int1 = StringUtils.indexOfAny(string2, stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(int1 == int0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals((-1), int1);
  }

  @Test
  public void test207()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = StringUtils.splitByCharacterType(string0);
      assertNull(stringArray0);
      
      String string1 = "[ILg\"^KdO*@dw:24\\";
      int int0 = StringUtils.indexOfAny(string1, stringArray0);
      assertEquals((-1), int0);
  }

  @Test
  public void test208()  throws Throwable  {
      String string0 = "d`+5;D";
      String string1 = null;
      int int0 = 10;
      char char0 = '!';
      String string2 = StringUtils.center(string1, int0, char0);
      assertNull(string2);
      
      String string3 = StringUtils.leftPad(string0, int0, string1);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string0.equals((Object)string3));
      assertNotSame(string3, string0);
      assertNotSame(string0, string3);
      assertEquals("    d`+5;D", string3);
      
      boolean boolean0 = StringUtils.containsNone(string3, string2);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string0.equals((Object)string3));
      assertNotSame(string3, string0);
      assertNotSame(string0, string3);
      assertTrue(boolean0);
  }

  @Test
  public void test209()  throws Throwable  {
      String string0 = " vs ";
      boolean boolean0 = StringUtils.containsNone(string0, string0);
      assertFalse(boolean0);
  }

  @Test
  public void test210()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.swapCase(string0);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsNone(string1, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test211()  throws Throwable  {
      String string0 = ",]FG?w!_)xZEHj";
      char[] charArray0 = new char[8];
      char char0 = 'j';
      charArray0[7] = char0;
      boolean boolean0 = StringUtils.containsNone(string0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'j'}, charArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test212()  throws Throwable  {
      String string0 = ",]FG?w!_)xZEHj";
      char[] charArray0 = new char[8];
      boolean boolean0 = StringUtils.containsNone(string0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
  }

  @Test
  public void test213()  throws Throwable  {
      String string0 = null;
      char[] charArray0 = new char[9];
      boolean boolean0 = StringUtils.containsNone(string0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
  }

  @Test
  public void test214()  throws Throwable  {
      String string0 = ",#y=iFA|$CySU6VyF";
      String string1 = null;
      boolean boolean0 = StringUtils.containsOnly(string0, string1);
      assertFalse(boolean0);
  }

  @Test
  public void test215()  throws Throwable  {
      String string0 = "\\SWZ";
      String string1 = null;
      boolean boolean0 = StringUtils.containsOnly(string1, string0);
      assertFalse(boolean0);
  }

  @Test
  public void test216()  throws Throwable  {
      String string0 = "\"";
      int int0 = (-1398);
      String string1 = StringUtils.substring(string0, int0, int0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.containsOnly(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(boolean0);
  }

  @Test
  public void test217()  throws Throwable  {
      String string0 = "";
      char[] charArray0 = new char[10];
      boolean boolean0 = StringUtils.containsOnly(string0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
  }

  @Test
  public void test218()  throws Throwable  {
      String string0 = null;
      char[] charArray0 = new char[9];
      boolean boolean0 = StringUtils.containsOnly(string0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test219()  throws Throwable  {
      Object[] objectArray0 = new Object[10];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      assertNotNull(objectArray0[0]);
      
      String string0 = StringUtils.join(objectArray0);
      assertNotNull(string0);
      
      String string1 = "org.apache.commons.lang.ObjectUtils";
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      char char0 = 'm';
      String string2 = StringUtils.reverseDelimited(string1, char0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertEquals("ons.lang.ObjectUtilsmorg.apache.co", string2);
      
      int int0 = StringUtils.indexOfAnyBut(string0, string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals(2, int0);
  }

  @Test
  public void test220()  throws Throwable  {
      String string0 = ",]FG?w!_)xZEHj";
      String string1 = null;
      int int0 = StringUtils.indexOfAnyBut(string0, string1);
      assertEquals((-1), int0);
  }

  @Test
  public void test221()  throws Throwable  {
      String string0 = ",]FG?w!_)xZEHj";
      int int0 = StringUtils.indexOfAnyBut(string0, string0);
      assertEquals((-1), int0);
  }

  @Test
  public void test222()  throws Throwable  {
      String string0 = " vs ";
      int int0 = 0;
      String string1 = StringUtils.mid(string0, int0, int0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      
      int int1 = StringUtils.indexOfAnyBut(string1, string1);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals((-1), int1);
  }

  @Test
  public void test223()  throws Throwable  {
      String string0 = "!zM";
      int int0 = 0;
      char char0 = '@';
      String string1 = "3)UiCM;.WVv/W\"RV6";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.center(string0, int0, char0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("!zM", string2);
      
      boolean boolean0 = StringUtils.containsOnly(string2, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(boolean0);
  }

  @Test
  public void test224()  throws Throwable  {
      String string0 = ", Length: 0";
      char[] charArray0 = null;
      int int0 = StringUtils.indexOfAnyBut(string0, charArray0);
      assertEquals((-1), int0);
  }

  @Test
  public void test225()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      assertNotNull(objectArray0[0]);
      
      String string0 = StringUtils.join(objectArray0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly(string0, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test226()  throws Throwable  {
      String string0 = null;
      char[] charArray0 = new char[7];
      int int0 = StringUtils.indexOfAnyBut(string0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
  }

  @Test
  public void test227()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.containsAny(string0, string0);
      assertFalse(boolean0);
  }

  @Test
  public void test228()  throws Throwable  {
      String string0 = "ncG]";
      String string1 = StringUtils.trim(string0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("ncG]", string1);
      
      String string2 = "\\u00";
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      String string3 = StringUtils.stripStart(string2, string1);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertNotSame(string1, string3);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string2, string3);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertEquals("\\u00", string3);
      
      boolean boolean0 = StringUtils.containsAny(string1, string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertNotSame(string1, string3);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string2, string3);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertFalse(boolean0);
  }

  @Test
  public void test229()  throws Throwable  {
      String string0 = "g/eXFw";
      int int0 = 10;
      String string1 = StringUtils.leftPad(string0, int0, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("g/eXg/eXFw", string1);
      
      char char0 = '|';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, char0);
      assertNotNull(stringArray0);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      
      String string2 = StringUtils.join((Object[]) stringArray0, string1, int0, int0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.containsAny(string1, string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(boolean0);
  }

  @Test
  public void test230()  throws Throwable  {
      String string0 = "\"";
      String string1 = "";
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.containsAny(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(boolean0);
  }

  @Test
  public void test231()  throws Throwable  {
      String string0 = "ncG]";
      String string1 = StringUtils.trim(string0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("ncG]", string1);
      
      boolean boolean0 = StringUtils.containsAny(string1, string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test232()  throws Throwable  {
      String string0 = null;
      String string1 = "Minimum abbreviation width with offset is 7";
      boolean boolean0 = StringUtils.containsAny(string0, string1);
      assertFalse(boolean0);
  }

  @Test
  public void test233()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      String string0 = "S0Jbetu+AZ08#,H";
      String string1 = StringUtils.join((Collection<?>) set0, string0);
      assertNotNull(string1);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOfAny(string0, string1);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals((-1), int0);
  }

  @Test
  public void test234()  throws Throwable  {
      String string0 = ">%|33LANdIYn67Ni^ ";
      String string1 = "\\u00";
      assertNotSame(string1, string0);
      
      int int0 = StringUtils.indexOfAny(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals((-1), int0);
  }

  @Test
  public void test235()  throws Throwable  {
      String string0 = "";
      char[] charArray0 = new char[6];
      int int0 = StringUtils.indexOfAny(string0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
  }

  @Test
  public void test236()  throws Throwable  {
      String string0 = "search and replace array len9lv7al0<g.cd$lwilzndex: ";
      String string1 = StringUtils.upperCase(string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("SEARCH AND REPLACE ARRAY LEN9LV7AL0<G.CD$LWILZNDEX: ", string1);
      
      String string2 = "9lV7Al0<G.Cd$lWiLz";
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase(string1, string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertTrue(boolean0);
  }

  @Test
  public void test237()  throws Throwable  {
      String string0 = ",]FG?w!_)xZEHj";
      String string1 = "RvTFj}fm,:Rvt2LE";
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(boolean0);
  }

  @Test
  public void test238()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      String string0 = StringUtils.join(objectArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = null;
      boolean boolean0 = StringUtils.containsIgnoreCase(string1, string0);
      assertFalse(boolean0);
  }

  @Test
  public void test239()  throws Throwable  {
      String string0 = "S0Jbetu+AZ08#,H";
      String string1 = "vrzc:-j'si_";
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.contains(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(boolean0);
  }

  @Test
  public void test240()  throws Throwable  {
      String string0 = " % Odzt.|=sqVS:mCs'";
      String string1 = null;
      boolean boolean0 = StringUtils.contains(string0, string1);
      assertFalse(boolean0);
  }

  @Test
  public void test241()  throws Throwable  {
      String string0 = "S0Jbetu+AZ08#,H";
      boolean boolean0 = StringUtils.contains(string0, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test242()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.contains(string0, string0);
      assertFalse(boolean0);
  }

  @Test
  public void test243()  throws Throwable  {
      String string0 = "-";
      char char0 = '&';
      boolean boolean0 = StringUtils.contains(string0, char0);
      assertFalse(boolean0);
  }

  @Test
  public void test244()  throws Throwable  {
      String string0 = null;
      char char0 = '!';
      boolean boolean0 = StringUtils.contains(string0, char0);
      assertFalse(boolean0);
  }

  @Test
  public void test245()  throws Throwable  {
      String string0 = "]\\ttNY%O{p\"u5[=";
      char char0 = '';
      boolean boolean0 = StringUtils.contains(string0, char0);
      assertTrue(boolean0);
  }

  @Test
  public void test246()  throws Throwable  {
      String string0 = "=Z";
      char char0 = 'J';
      int int0 = StringUtils.lastIndexOf(string0, string0, (int) char0);
      assertEquals(0, int0);
  }

  @Test
  public void test247()  throws Throwable  {
      String string0 = null;
      char char0 = '';
      int int0 = StringUtils.lastIndexOf(string0, string0, (int) char0);
      assertEquals((-1), int0);
  }

  @Test
  public void test248()  throws Throwable  {
      String string0 = "S0Jbetu+AZ08#,H";
      String string1 = null;
      int int0 = StringUtils.lastIndexOf(string0, string1);
      assertEquals((-1), int0);
  }

  @Test
  public void test249()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      String string0 = "S0Jbetu+AZ08#,H";
      String string1 = StringUtils.join((Collection<?>) set0, string0);
      assertNotNull(string1);
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.lastIndexOf(string0, string1);
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(15, int0);
  }

  @Test
  public void test250()  throws Throwable  {
      String string0 = "Wb/Z&%U8\\W/ C]+_2";
      String string1 = null;
      int int0 = StringUtils.lastIndexOf(string1, string0);
      assertEquals((-1), int0);
  }

  @Test
  public void test251()  throws Throwable  {
      String string0 = "i";
      int int0 = 90;
      String string1 = StringUtils.rightPad(string0, int0, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii", string1);
      
      char char0 = 'p';
      int int1 = StringUtils.lastIndexOf(string1, char0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals((-1), int1);
  }

  @Test
  public void test252()  throws Throwable  {
      String string0 = "i.-_TGqPsunf?U";
      int int0 = (-3687);
      String string1 = "";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.leftPad(string0, int0, string0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals("i.-_TGqPsunf?U", string2);
      
      char char0 = '4';
      int int1 = StringUtils.indexOf(string2, string1, (int) char0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertEquals(14, int1);
  }

  @Test
  public void test253()  throws Throwable  {
      String string0 = "The String must not be empty";
      int int0 = (-2714);
      String string1 = StringUtils.right(string0, int0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      
      int int1 = StringUtils.indexOf(string1, string1, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(0, int1);
  }

  @Test
  public void test254()  throws Throwable  {
      String string0 = "Tq2Zr3 ?y";
      char char0 = '%';
      String string1 = StringUtils.substringBetween(string0, string0, string0);
      assertNull(string1);
      
      int int0 = StringUtils.indexOf(string0, string1, (int) char0);
      assertEquals((-1), int0);
  }

  @Test
  public void test255()  throws Throwable  {
      String string0 = "Strings must not be null";
      int int0 = (-768);
      int int1 = StringUtils.indexOf(string0, string0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test
  public void test256()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      assertNotNull(objectArray0[0]);
      
      String string0 = StringUtils.join(objectArray0);
      assertNotNull(string0);
      
      int int0 = 170;
      int int1 = StringUtils.ordinalIndexOf(string0, string0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test
  public void test257()  throws Throwable  {
      String string0 = "Wb/Z&%U8\\W/ C]+_2";
      int int0 = 0;
      int int1 = StringUtils.ordinalIndexOf(string0, string0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
  }

  @Test
  public void test258()  throws Throwable  {
      String string0 = null;
      char char0 = '|';
      String string1 = "\\.s_Mk";
      int int0 = StringUtils.ordinalIndexOf(string1, string0, (int) char0);
      assertEquals((-1), int0);
  }

  @Test
  public void test259()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      String string0 = StringUtils.join(objectArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = 170;
      int int1 = StringUtils.ordinalIndexOf(string0, string0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test
  public void test260()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      String string0 = StringUtils.join(objectArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = 4;
      String string1 = null;
      int int1 = StringUtils.ordinalIndexOf(string1, string0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
  }

  @Test
  public void test261()  throws Throwable  {
      String string0 = " % Odzt.|=sqVS:mCs'";
      String[] stringArray0 = new String[2];
      int int0 = StringUtils.indexOf(string0, stringArray0[1]);
      assertEquals((-1), int0);
  }

  @Test
  public void test262()  throws Throwable  {
      String string0 = null;
      int int0 = StringUtils.indexOf(string0, string0);
      assertEquals((-1), int0);
  }

  @Test
  public void test263()  throws Throwable  {
      String string0 = null;
      char char0 = 'i';
      int int0 = StringUtils.indexOf(string0, char0, (int) char0);
      assertEquals((-1), int0);
  }

  @Test
  public void test264()  throws Throwable  {
      String string0 = "l";
      char char0 = '\u008F';
      int int0 = StringUtils.indexOf(string0, char0, (int) char0);
      assertEquals((-1), int0);
  }

  @Test
  public void test265()  throws Throwable  {
      String string0 = "";
      char char0 = 'v';
      int int0 = StringUtils.indexOf(string0, char0);
      assertEquals((-1), int0);
  }

  @Test
  public void test266()  throws Throwable  {
      String string0 = "', is neither of type Map.Entry nor an Array";
      char char0 = 's';
      int int0 = StringUtils.indexOf(string0, char0);
      assertEquals(4, int0);
  }

  @Test
  public void test267()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.equalsIgnoreCase(string0, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test268()  throws Throwable  {
      String string0 = ",]FG?w!_)xZEHj";
      boolean boolean0 = StringUtils.equalsIgnoreCase(string0, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test269()  throws Throwable  {
      String string0 = "]\\ttNY%O{p\"u5[=";
      String string1 = StringUtils.upperCase(string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("]\\TTNY%O{P\"U5[=", string1);
      
      String string2 = null;
      boolean boolean0 = StringUtils.equals(string2, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(boolean0);
  }

  @Test
  public void test270()  throws Throwable  {
      String string0 = ">%|33LANdIYn67Ni^ ";
      boolean boolean0 = StringUtils.equals(string0, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test271()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.stripToEmpty(string0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.split(string1);
      assertNotNull(stringArray0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test272()  throws Throwable  {
      String string0 = "&h\\aKm9<";
      String string1 = StringUtils.stripEnd(string0, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
  }

  @Test
  public void test273()  throws Throwable  {
      String string0 = "i";
      int int0 = 90;
      String string1 = StringUtils.rightPad(string0, int0, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii", string1);
      
      String string2 = "IaH*t3?\"6fyA.\"";
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      String[] stringArray0 = new String[2];
      stringArray0[1] = string2;
      assertNotNull(stringArray0[1]);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, string1);
      assertNotNull(stringArray1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
  }

  @Test
  public void test274()  throws Throwable  {
      String string0 = "TimeToLive of TimeToLive of ";
      String string1 = StringUtils.stripToEmpty(string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("TimeToLive of TimeToLive of", string1);
  }

  @Test
  public void test275()  throws Throwable  {
      String string0 = "ncG]";
      String string1 = "oc*5)c?sb`r`";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.trimToEmpty(string0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("ncG]", string2);
      
      String string3 = StringUtils.stripStart(string1, string2);
      assertNotNull(string3);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertNotSame(string1, string2);
      assertSame(string1, string3);
      assertNotSame(string1, string0);
      assertSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(string3, string1);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertEquals("oc*5)c?sb`r`", string3);
  }

  @Test
  public void test276()  throws Throwable  {
      String string0 = "Minimum abbreviation width with offset is 7";
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      String string1 = "";
      assertNotSame(string1, string0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, string1);
      assertNotNull(stringArray1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotSame(string1, string0);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
  }

  @Test
  public void test277()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.stripStart(string0, string0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("", string1);
  }

  @Test
  public void test278()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.stripStart(string0, string0);
      assertNull(string1);
  }

  @Test
  public void test279()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.stripToEmpty(string0);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test
  public void test280()  throws Throwable  {
      String string0 = " ";
      String string1 = StringUtils.stripToNull(string0);
      assertNull(string1);
  }

  @Test
  public void test281()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.stripToNull(string0);
      assertNull(string1);
  }

  @Test
  public void test282()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.trimToEmpty(string0);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test
  public void test283()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.trimToNull(string0);
      assertNull(string1);
  }

  @Test
  public void test284()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.trim(string0);
      assertNull(string1);
  }

  @Test
  public void test285()  throws Throwable  {
      String string0 = " ";
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test286()  throws Throwable  {
      String string0 = "Cannot get the toString of a null identity";
      String string1 = StringUtils.substringAfterLast(string0, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(boolean0);
  }

  @Test
  public void test287()  throws Throwable  {
      String string0 = ",]FG?w!_)xZEHj";
      String string1 = StringUtils.stripToNull(string0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(",]FG?w!_)xZEHj", string1);
      
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test288()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test289()  throws Throwable  {
      String string0 = ",)yCuWg>HJ_7aPM";
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test
  public void test290()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      
      String string0 = "S0Jbetu+AZ08#,H";
      String string1 = StringUtils.join((Collection<?>) set0, string0);
      assertNotNull(string1);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) string1);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(boolean0);
  }

  @Test
  public void test291()  throws Throwable  {
      String string0 = "";
      String string1 = " vs ";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.replace(string1, string0, string0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertEquals(" vs ", string2);
      
      String string3 = StringUtils.removeStartIgnoreCase(string1, string2);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string1, string3);
      assertEquals("", string3);
  }

  @Test
  public void test292()  throws Throwable  {
      String string0 = " is less than 0: ";
      String string1 = StringUtils.lowerCase(string0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals(" is less than 0: ", string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string1);
      assertNotNull(stringArray0);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test293()  throws Throwable  {
      String string0 = "W|By_`v,*OwMx^@P6";
      String string1 = StringUtils.substringBetween(string0, string0);
      assertNull(string1);
  }

  @Test
  public void test294()  throws Throwable  {
      String string0 = "', is neither of type Map.Entry nor an Array";
      String string1 = StringUtils.defaultString(string0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("', is neither of type Map.Entry nor an Array", string1);
      
      String string2 = StringUtils.removeEndIgnoreCase(string1, string1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertEquals("", string2);
  }

  @Test
  public void test295()  throws Throwable  {
      String string0 = ",]FG?w!_)xZEHj";
      String[] stringArray0 = StringUtils.splitByCharacterType(string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test296()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.strip(string0);
      assertNull(string1);
  }

  @Test
  public void test297()  throws Throwable  {
      String string0 = "]\\ttNY%O{p\"u5[=";
      boolean boolean0 = StringUtils.endsWith(string0, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test298()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      String string0 = StringUtils.join(objectArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = 170;
      String string1 = StringUtils.abbreviate(string0, int0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", string1);
  }

  @Test
  public void test299()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.upperCase(string0);
      assertNull(string1);
      
      char char0 = 'G';
      int int0 = StringUtils.lastIndexOf(string1, char0, (int) char0);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string1, string1, int0);
      assertNull(stringArray0);
  }

  @Test
  public void test300()  throws Throwable  {
      String string0 = "oc?sb`r`,v(g";
      String[] stringArray0 = new String[5];
      boolean boolean0 = StringUtils.startsWithAny(string0, stringArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test301()  throws Throwable  {
      String string0 = "]\\ttNY%O{p\"u5[=";
      String[] stringArray0 = new String[2];
      String string1 = StringUtils.replaceEach(string0, stringArray0, stringArray0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("]\\ttNY%O{p\"u5[=", string1);
  }

  @Test
  public void test302()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test303()  throws Throwable  {
      String string0 = ",]FG?w!_)xZEHj";
      int int0 = 2278;
      String string1 = StringUtils.rightPad(string0, int0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(",]FG?w!_)xZEHj                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ", string1);
      
      String[] stringArray0 = StringUtils.split(string1);
      assertNotNull(stringArray0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test304()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
  }
}
