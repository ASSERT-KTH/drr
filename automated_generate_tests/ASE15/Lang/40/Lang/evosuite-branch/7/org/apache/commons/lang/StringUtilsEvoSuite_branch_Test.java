/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:11:59 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Locale;
import org.apache.commons.lang.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;


public class StringUtilsEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      String string0 = "+vxfX{% 8%v";
      String string1 = "Cannot pad a negative amount: ";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeEndIgnoreCase(string0, string1);
      assertEquals("+vxfX{% 8%v", string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotNull(string2);
  }

  @Test
  public void test001()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.swapCase(string0);
      assertNull(string1);
      
      String string2 = "wVzHu'{E7k(ia5~";
      boolean boolean0 = StringUtils.endsWithIgnoreCase(string1, string2);
      assertFalse(boolean0);
  }

  @Test
  public void test002()  throws Throwable  {
      String string0 = "Y93,~Ldu";
      String string1 = null;
      boolean boolean0 = StringUtils.endsWith(string0, string1);
      assertFalse(boolean0);
  }

  @Test
  public void test003()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.endsWithIgnoreCase(string0, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test004()  throws Throwable  {
      String string0 = "wZ\"W<\"3%a";
      String[] stringArray0 = new String[9];
      stringArray0[8] = string0;
      assertNotNull(stringArray0[8]);
      
      boolean boolean0 = StringUtils.startsWithAny(string0, stringArray0);
      assertTrue(boolean0);
  }

  @Test
  public void test005()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.capitalize(string0);
      assertNull(string1);
      
      String string2 = "vL9Ljh15";
      String string3 = StringUtils.reverse(string2);
      assertEquals("51hjL9Lv", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertNotSame(string3, string2);
      assertNotSame(string2, string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string1);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.startsWithAny(string3, stringArray0);
      assertFalse(boolean0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertNotSame(string3, string2);
      assertNotSame(string2, string3);
  }

  @Test
  public void test006()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = new String[3];
      boolean boolean0 = StringUtils.startsWithAny(string0, stringArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test007()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.startsWithIgnoreCase(string0, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test008()  throws Throwable  {
      String string0 = "wZ\"W<\"3%a";
      String[] stringArray0 = new String[9];
      boolean boolean0 = StringUtils.startsWithAny(string0, stringArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test009()  throws Throwable  {
      String string0 = "mm]hI\\r]r`xCq3";
      String string1 = StringUtils.chomp(string0, string0);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      
      String string2 = null;
      boolean boolean0 = StringUtils.startsWith(string2, string1);
      assertFalse(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test010()  throws Throwable  {
      String string0 = "iwsHK\\}";
      String string1 = "iK>;,&jGDc=";
      assertNotSame(string1, string0);
      
      int int0 = StringUtils.getLevenshteinDistance(string1, string0);
      assertEquals(10, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test011()  throws Throwable  {
      String string0 = "mm]hI\\rxCq3";
      String string1 = StringUtils.chomp(string0, string0);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance(string1, string0);
      assertEquals(11, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test012()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      String string0 = StringUtils.join(objectArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = null;
      // Undeclared exception!
      try {
        int int0 = StringUtils.getLevenshteinDistance(string0, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
      }
  }

  @Test
  public void test013()  throws Throwable  {
      String string0 = "GR&'Ybkz:m";
      int int0 = StringUtils.getLevenshteinDistance(string0, string0);
      assertEquals(0, int0);
  }

  @Test
  public void test014()  throws Throwable  {
      String string0 = "Y93,~Ldu";
      String[] stringArray0 = StringUtils.substringsBetween(string0, string0, string0);
      assertNull(stringArray0);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test015()  throws Throwable  {
      String string0 = "7;@;";
      String[] stringArray0 = new String[8];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      String string1 = "org.apache.commons.lang.ObjectUtils";
      assertNotSame(string1, string0);
      
      stringArray0[3] = string1;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = string0;
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = string0;
      assertNotNull(stringArray0[6]);
      
      stringArray0[7] = stringArray0[0];
      assertNotNull(stringArray0[7]);
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(string2);
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = "7;@;";
      String[] stringArray0 = new String[8];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = stringArray0[0];
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = string0;
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = string0;
      assertNotNull(stringArray0[6]);
      
      stringArray0[7] = stringArray0[5];
      assertNotNull(stringArray0[7]);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("7;@;", string1);
      assertSame(string1, string0);
      assertNotNull(string1);
  }

  @Test
  public void test017()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = "";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string1);
      assertSame(string1, string0);
      assertNotNull(string1);
  }

  @Test
  public void test018()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = new String[16];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string1);
      assertSame(string1, string0);
      assertNotNull(string1);
  }

  @Test
  public void test019()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test
  public void test020()  throws Throwable  {
      String string0 = "PKfOvv[t";
      int int0 = 1632;
      char char0 = 'c';
      String string1 = StringUtils.center(string0, int0, char0);
      String string2 = ")EX";
      String string3 = StringUtils.stripToEmpty(string2);
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string3, string1, (int) char0);
      String string4 = StringUtils.getCommonPrefix(stringArray0);
  }

  @Test
  public void test021()  throws Throwable  {
      String string0 = "]<a,b?\\...,'6'a$m\\";
      char char0 = 'P';
      String string1 = StringUtils.rightPad(string0, (int) char0, string0);
      assertEquals("]<a,b?\\...,'6'a$m\\]<a,b?\\...,'6'a$m\\]<a,b?\\...,'6'a$m\\]<a,b?\\...,'6'a$m\\]<a,b?\\.", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.substringsBetween(string1, string1, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals((-1), int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test022()  throws Throwable  {
      String string0 = ")9Gw}%";
      String string1 = "";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.difference(string0, string1);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotNull(string2);
  }

  @Test
  public void test023()  throws Throwable  {
      String string0 = ")9Gw}%";
      String string1 = "";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.difference(string1, string0);
      assertEquals(")9Gw}%", string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotNull(string2);
  }

  @Test
  public void test024()  throws Throwable  {
      String string0 = "~B,/g!)NeDa#mx)Ex";
      String string1 = null;
      char char0 = 's';
      String string2 = StringUtils.rightPad(string1, (int) char0, string1);
      assertNull(string2);
      
      int int0 = StringUtils.indexOfDifference(string0, string2);
      assertEquals(0, int0);
  }

  @Test
  public void test025()  throws Throwable  {
      String string0 = null;
      String string1 = "The character must not be null";
      int int0 = StringUtils.indexOfDifference(string0, string1);
      assertEquals(0, int0);
  }

  @Test
  public void test026()  throws Throwable  {
      String string0 = "The Chara";
      String string1 = null;
      String string2 = StringUtils.difference(string0, string1);
      assertEquals("The Chara", string2);
      assertSame(string2, string0);
      assertSame(string0, string2);
      assertNotNull(string2);
  }

  @Test
  public void test027()  throws Throwable  {
      String string0 = "mm]hI\\r]r`xCq3";
      String string1 = StringUtils.chomp(string0, string0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      
      String string2 = null;
      String string3 = StringUtils.difference(string2, string1);
      assertEquals("", string3);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertSame(string1, string3);
      assertNotSame(string1, string0);
      assertSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotNull(string3);
  }

  @Test
  public void test028()  throws Throwable  {
      String string0 = "%";
      int int0 = 256;
      char char0 = 'N';
      String string1 = StringUtils.repeat(string0, int0);
      assertEquals("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      
      int int1 = 735;
      String string2 = StringUtils.abbreviate(string1, int1, (int) char0);
      assertEquals("...%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%", string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotNull(string2);
  }

  @Test
  public void test029()  throws Throwable  {
      String string0 = "N#rg>V(?o+KU";
      int int0 = (-154);
      int int1 = 10;
      String string1 = StringUtils.abbreviate(string0, int0, int1);
      assertEquals("N#rg>V(...", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test030()  throws Throwable  {
      String string0 = null;
      char char0 = 'U';
      String string1 = StringUtils.abbreviate(string0, (int) char0);
      assertNull(string1);
  }

  @Test
  public void test031()  throws Throwable  {
      String string0 = null;
      char char0 = '*';
      String string1 = StringUtils.reverseDelimited(string0, char0);
      assertNull(string1);
  }

  @Test
  public void test032()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.defaultIfEmpty(string0, string0);
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
  }

  @Test
  public void test033()  throws Throwable  {
      String string0 = "%";
      String string1 = StringUtils.substringAfterLast(string0, string0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultIfEmpty(string0, string1);
      assertEquals("%", string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotNull(string2);
  }

  @Test
  public void test034()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.defaultString(string0, string0);
      assertNull(string1);
  }

  @Test
  public void test035()  throws Throwable  {
      String string0 = "7;@;";
      String string1 = StringUtils.defaultString(string0, string0);
      assertEquals("7;@;", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test036()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.defaultString(string0);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test
  public void test037()  throws Throwable  {
      String string0 = "vL9Ljh15";
      String string1 = StringUtils.defaultString(string0);
      assertEquals("vL9Ljh15", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
  }

  @Test
  public void test038()  throws Throwable  {
      String string0 = "H";
      boolean boolean0 = StringUtils.isAllUpperCase(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test039()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.substringBetween(string0, string0, string0);
      assertEquals("", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase(string1);
      assertFalse(boolean0);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test040()  throws Throwable  {
      String string0 = "cannot pad a timetolive of t: ";
      boolean boolean0 = StringUtils.isAllUpperCase(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test041()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAllUpperCase(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test042()  throws Throwable  {
      String string0 = "z";
      boolean boolean0 = StringUtils.isAllLowerCase(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test043()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.isAllLowerCase(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test044()  throws Throwable  {
      String string0 = " vs ";
      int int0 = 57;
      String string1 = StringUtils.center(string0, int0);
      assertEquals("                           vs                            ", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase(string1);
      assertFalse(boolean0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test045()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAllLowerCase(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test046()  throws Throwable  {
      String string0 = " is less than ";
      boolean boolean0 = StringUtils.isWhitespace(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test047()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.isWhitespace(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test048()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isWhitespace(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test049()  throws Throwable  {
      String string0 = "58[bq<~\\+Ww1";
      boolean boolean0 = StringUtils.isNumericSpace(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test050()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.chomp(string0, string0);
      assertEquals("", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumericSpace(string1);
      assertTrue(boolean0);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test051()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isNumericSpace(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test052()  throws Throwable  {
      String string0 = " is not in the range '0' - '9'";
      boolean boolean0 = StringUtils.isNumericSpace(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test053()  throws Throwable  {
      String string0 = "3";
      boolean boolean0 = StringUtils.isNumeric(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test054()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      char char0 = ':';
      String string0 = StringUtils.join((Collection<?>) linkedList0, char0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric(string0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertTrue(boolean0);
  }

  @Test
  public void test055()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isNumeric(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test056()  throws Throwable  {
      String string0 = "cannot pad a timetolive of t: ";
      boolean boolean0 = StringUtils.isNumeric(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test057()  throws Throwable  {
      String string0 = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
      boolean boolean0 = StringUtils.isAsciiPrintable(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test058()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAsciiPrintable(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test059()  throws Throwable  {
      String string0 = "M.:G|>N3]r'8cLw ";
      boolean boolean0 = StringUtils.isAsciiPrintable(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test060()  throws Throwable  {
      String string0 = "Search and Replace array lengths don't match: ";
      boolean boolean0 = StringUtils.isAlphanumericSpace(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test061()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.isAlphanumericSpace(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test062()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.isAlphanumeric(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test063()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAlphanumeric(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test064()  throws Throwable  {
      String string0 = "GR&'Ybkz:m";
      boolean boolean0 = StringUtils.isAlphanumeric(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test065()  throws Throwable  {
      String string0 = "Array element ";
      boolean boolean0 = StringUtils.isAlphaSpace(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test066()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.chomp(string0);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace(string1);
      assertFalse(boolean0);
  }

  @Test
  public void test067()  throws Throwable  {
      String string0 = "wZ\"W<\"3%a";
      boolean boolean0 = StringUtils.isAlphaSpace(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test068()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.isAlpha(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test069()  throws Throwable  {
      String string0 = "cannot pad a timetolive of t: ";
      boolean boolean0 = StringUtils.isAlpha(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test070()  throws Throwable  {
      String string0 = "vx";
      String string1 = "";
      assertNotSame(string1, string0);
      
      int int0 = StringUtils.countMatches(string0, string1);
      assertEquals(0, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test071()  throws Throwable  {
      String string0 = "WQ%4I5@VzG.";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      String string1 = StringUtils.join((Collection<?>) linkedList0, string0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.countMatches(string1, string1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test072()  throws Throwable  {
      String string0 = "org.apache.commons.lang.ObjectUtils";
      String string1 = StringUtils.swapCase(string0);
      assertEquals("ORG.APACHE.COMMONS.LANG.oBJECTuTILS", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test073()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertEquals(0, listIterator0.nextIndex());
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals(false, listIterator0.hasNext());
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(listIterator0);
      
      String string0 = "org.apache.commons.lang.ObjectUtils";
      String string1 = StringUtils.join((Iterator<?>) listIterator0, string0);
      assertEquals(0, listIterator0.nextIndex());
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals(false, listIterator0.hasNext());
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.swapCase(string1);
      assertEquals(0, listIterator0.nextIndex());
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals(false, listIterator0.hasNext());
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotNull(string2);
  }

  @Test
  public void test074()  throws Throwable  {
      String string0 = "Array element ";
      String string1 = StringUtils.uncapitalize(string0);
      assertEquals("array element ", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
  }

  @Test
  public void test075()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.capitalize(string0);
      assertEquals("", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test076()  throws Throwable  {
      String string0 = "7;@;";
      String string1 = StringUtils.capitalize(string0);
      assertEquals("7;@;", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test077()  throws Throwable  {
      String string0 = null;
      Locale locale0 = Locale.US;
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string1 = StringUtils.lowerCase(string0, locale0);
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNull(string1);
  }

  @Test
  public void test078()  throws Throwable  {
      String string0 = "+bakja";
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale0);
      
      String string1 = StringUtils.lowerCase(string0, locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("+bakja", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test079()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.lowerCase(string0);
      assertNull(string1);
  }

  @Test
  public void test080()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      char char0 = ':';
      String string0 = StringUtils.join((Collection<?>) linkedList0, char0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.lowerCase(string0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
  }

  @Test
  public void test081()  throws Throwable  {
      String string0 = "DO`wPV!el";
      Locale locale0 = Locale.JAPAN;
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string1 = StringUtils.upperCase(string0, locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DO`WPV!EL", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test082()  throws Throwable  {
      int int0 = 65;
      String string0 = null;
      String string1 = StringUtils.substring(string0, int0);
      assertNull(string1);
      
      String string2 = StringUtils.upperCase(string1);
      assertNull(string2);
  }

  @Test
  public void test083()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      assertNotNull(objectArray0[0]);
      
      char char0 = 'o';
      String string0 = StringUtils.join(objectArray0, char0);
      assertNotNull(string0);
      
      int int0 = 10;
      String string1 = StringUtils.center(string0, int0, string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test084()  throws Throwable  {
      String string0 = " a negative am";
      int int0 = 0;
      String string1 = StringUtils.center(string0, int0, string0);
      assertEquals(" a negative am", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
  }

  @Test
  public void test085()  throws Throwable  {
      String string0 = null;
      int int0 = 0;
      String string1 = StringUtils.center(string0, int0, string0);
      assertNull(string1);
  }

  @Test
  public void test086()  throws Throwable  {
      String string0 = "cannot pad timetolive of unt: ";
      int int0 = 5;
      char char0 = '-';
      String string1 = StringUtils.center(string0, int0, char0);
      assertEquals("cannot pad timetolive of unt: ", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test087()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      char char0 = 'o';
      String string0 = StringUtils.join(objectArray0, char0);
      assertEquals("ooo", string0);
      assertNotNull(string0);
      
      int int0 = (-2049);
      String string1 = StringUtils.center(string0, int0);
      assertEquals("ooo", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
  }

  @Test
  public void test088()  throws Throwable  {
      String string0 = null;
      char char0 = '\u008C';
      String string1 = StringUtils.center(string0, (int) char0, char0);
      assertNull(string1);
  }

  @Test
  public void test089()  throws Throwable  {
      String string0 = null;
      int int0 = StringUtils.length(string0);
      assertEquals(0, int0);
  }

  @Test
  public void test090()  throws Throwable  {
      String string0 = "GR&'Ybkz:m";
      int int0 = StringUtils.indexOf(string0, string0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.leftPad(string0, int0, string0);
      assertEquals("GR&'Ybkz:m", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test091()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = "";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      int int0 = 10;
      String string1 = StringUtils.leftPad(stringArray0[0], int0, string0);
      assertEquals("          ", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
  }

  @Test
  public void test092()  throws Throwable  {
      String string0 = "WOL5~AmHM}yaRvU`";
      String string1 = null;
      String string2 = StringUtils.removeStart(string1, string0);
      assertNull(string2);
      
      int int0 = StringUtils.indexOfAny(string0, string0);
      assertEquals(0, int0);
      
      String string3 = StringUtils.leftPad(string2, int0, string2);
      assertNull(string3);
  }

  @Test
  public void test093()  throws Throwable  {
      String string0 = "', has a length less than 2";
      int int0 = 10;
      String string1 = StringUtils.repeat(string0, int0);
      assertEquals("', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      
      String string2 = "a{;\\7";
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      String string3 = StringUtils.center(string2, int0, string1);
      assertEquals("',a{;\\7', ", string3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotNull(string3);
  }

  @Test
  public void test094()  throws Throwable  {
      String string0 = "58[bq<~\\+Ww1";
      String string1 = null;
      char char0 = '`';
      String string2 = StringUtils.center(string0, (int) char0, string1);
      assertEquals("                                          58[bq<~\\+Ww1                                          ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotNull(string2);
  }

  @Test
  public void test095()  throws Throwable  {
      String string0 = "', is neither of type Map.Entry nor an Array";
      int int0 = 0;
      String string1 = StringUtils.rightPad(string0, int0, string0);
      assertEquals("', is neither of type Map.Entry nor an Array", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
  }

  @Test
  public void test096()  throws Throwable  {
      String string0 = "M.:G|>N3]r'8cLw ";
      int int0 = (-267);
      char char0 = 'g';
      String string1 = StringUtils.rightPad(string0, int0, char0);
      assertEquals("M.:G|>N3]r'8cLw ", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test097()  throws Throwable  {
      String string0 = "wZ\"W<\"3%a";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals(0, listIterator0.nextIndex());
      assertEquals(false, listIterator0.hasNext());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(listIterator0);
      
      char char0 = '+';
      String string1 = StringUtils.join((Iterator<?>) listIterator0, char0);
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals(0, listIterator0.nextIndex());
      assertEquals(false, listIterator0.hasNext());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf(string0, string1, (int) char0);
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals(0, listIterator0.nextIndex());
      assertEquals(false, listIterator0.hasNext());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(9, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = null;
      String string3 = StringUtils.rightPad(string2, int0);
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals(0, listIterator0.nextIndex());
      assertEquals(false, listIterator0.hasNext());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNull(string3);
  }

  @Test
  public void test098()  throws Throwable  {
      String string0 = ", Length: 0";
      int int0 = (-1);
      String string1 = null;
      String string2 = StringUtils.repeat(string0, string1, int0);
      assertEquals("", string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotNull(string2);
  }

  @Test
  public void test099()  throws Throwable  {
      char char0 = '2';
      String string0 = "q";
      String string1 = StringUtils.repeat(string0, string0, (int) char0);
      assertEquals("qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test100()  throws Throwable  {
      String string0 = null;
      String string1 = "";
      String string2 = StringUtils.stripStart(string1, string0);
      assertEquals("", string2);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertNotNull(string2);
      
      int int0 = 1;
      String string3 = StringUtils.repeat(string2, int0);
      assertEquals("", string3);
      assertSame(string2, string1);
      assertSame(string2, string3);
      assertSame(string1, string2);
      assertSame(string1, string3);
      assertSame(string3, string1);
      assertSame(string3, string2);
      assertNotNull(string3);
  }

  @Test
  public void test101()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.swapCase(string0);
      assertNull(string1);
      
      int int0 = 97;
      String string2 = StringUtils.repeat(string1, string1, int0);
      assertNull(string2);
  }

  @Test
  public void test102()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      char char0 = ':';
      String string0 = StringUtils.join((Collection<?>) linkedList0, char0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chop(string0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
  }

  @Test
  public void test103()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.chop(string0);
      assertNull(string1);
  }

  @Test
  public void test104()  throws Throwable  {
      String string0 = null;
      String string1 = "DO`wPV!el";
      String string2 = StringUtils.chomp(string1, string0);
      assertEquals("DO`wPV!el", string2);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertNotNull(string2);
  }

  @Test
  public void test105()  throws Throwable  {
      String string0 = "q";
      String string1 = StringUtils.chomp(string0);
      assertEquals("q", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
  }

  @Test
  public void test106()  throws Throwable  {
      String string0 = "wZ\"W<\"3%a";
      String string1 = StringUtils.chomp(string0);
      assertEquals("wZ\"W<\"3%a", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
  }

  @Test
  public void test107()  throws Throwable  {
      String string0 = "\\u";
      int int0 = 8192;
      String string1 = StringUtils.leftPad(string0, int0, string0);
      assertEquals("\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      
      int int1 = (-2329);
      String string2 = StringUtils.overlay(string1, string1, int0, int1);
      assertEquals("\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u", string2);
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(string2);
  }

  @Test
  public void test108()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = "+fX{% 8%v";
      int int0 = linkedList0.indexOf((Object) string0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals((-1), int0);
      
      String string1 = StringUtils.overlay(string0, string0, int0, int0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("+fX{% 8%v+fX{% 8%v", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test109()  throws Throwable  {
      String string0 = "Minimum abbreviation width with offset is 7";
      String string1 = StringUtils.substringBetween(string0, string0, string0);
      assertNull(string1);
      
      char[] charArray0 = new char[1];
      String string2 = StringUtils.substringBefore(string0, string0);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.overlay(string2, string1, (int) charArray0[0], (int) charArray0[0]);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals("", string3);
      assertTrue(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotNull(string3);
  }

  @Test
  public void test110()  throws Throwable  {
      String string0 = "";
      String string1 = "org.apache.commons.lang.ObjectUtils$Null";
      assertNotSame(string1, string0);
      
      String string2 = "}]DG{G~D-7kmW";
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      int int0 = 64;
      String string3 = StringUtils.overlay(string0, string2, int0, int0);
      assertEquals("}]DG{G~D-7kmW", string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotNull(string3);
      
      int int1 = 2;
      String string4 = StringUtils.mid(string1, int1, int1);
      assertEquals("g.", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceChars(string3, string4, string2);
      assertEquals("}]DG{G~D-7kmW", string5);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertTrue(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string2, string5);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string5, string3);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertSame(string3, string5);
      assertNotSame(string3, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string5);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string1, string3);
      assertNotSame(string1, string5);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertNotNull(string5);
  }

  @Test
  public void test111()  throws Throwable  {
      String string0 = "M.:G|>N3]r'8cLw ";
      String string1 = null;
      String string2 = StringUtils.replaceChars(string0, string0, string1);
      assertEquals("", string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotNull(string2);
  }

  @Test
  public void test112()  throws Throwable  {
      String string0 = "";
      String string1 = "org.apache.commons.lang.ObjectUtils$Null";
      assertNotSame(string1, string0);
      
      int int0 = 64;
      String string2 = StringUtils.overlay(string0, string1, int0, int0);
      assertEquals("org.apache.commons.lang.ObjectUtils$Null", string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceChars(string2, string2, string1);
      assertEquals("org.apache.commons.lang.ObjectUtils$Null", string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotNull(string3);
  }

  @Test
  public void test113()  throws Throwable  {
      String string0 = "";
      String string1 = "}]DG{G~D-7kmW";
      assertNotSame(string1, string0);
      
      int int0 = 64;
      String string2 = StringUtils.overlay(string0, string1, int0, int0);
      assertEquals("}]DG{G~D-7kmW", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceChars(string2, string0, string0);
      assertEquals("}]DG{G~D-7kmW", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotNull(string3);
  }

  @Test
  public void test114()  throws Throwable  {
      String string0 = "mm]hI\\r]r`xCq3";
      String string1 = StringUtils.chomp(string0, string0);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars(string1, string1, string1);
      assertEquals("", string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotNull(string2);
  }

  @Test
  public void test115()  throws Throwable  {
      String string0 = null;
      char char0 = 'Y';
      String string1 = StringUtils.replaceChars(string0, char0, char0);
      assertNull(string1);
  }

  @Test
  public void test116()  throws Throwable  {
      String string0 = "%";
      char char0 = '&';
      String string1 = StringUtils.replaceChars(string0, char0, char0);
      assertEquals("%", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test117()  throws Throwable  {
      String string0 = " a negative am";
      String string1 = StringUtils.stripEnd(string0, string0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string1;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = stringArray0[2];
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = string1;
      assertNotNull(stringArray0[5]);
      
      String string2 = StringUtils.replaceEach(string0, stringArray0, stringArray0);
      assertEquals(" a negative am", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotNull(string2);
  }

  @Test
  public void test118()  throws Throwable  {
      String string0 = "The Character must not be null";
      String[] stringArray0 = StringUtils.splitByCharacterType(string0);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try {
        String string1 = StringUtils.replaceEachRepeatedly(string0, stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: The Character must not be null
         //
      }
  }

  @Test
  public void test119()  throws Throwable  {
      String string0 = " is less than 0: ";
      String string1 = ".fw$^0hccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccpkfovv[tcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string1;
      assertNotNull(stringArray0[1]);
      
      stringArray0[5] = string1;
      assertNotNull(stringArray0[5]);
      
      String[] stringArray1 = new String[8];
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      
      stringArray1[0] = stringArray0[5];
      assertNotNull(stringArray1[0]);
      
      stringArray1[1] = string0;
      assertNotNull(stringArray1[1]);
      
      // Undeclared exception!
      try {
        String string2 = StringUtils.replaceEachRepeatedly(string1, stringArray0, stringArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test120()  throws Throwable  {
      String string0 = " a negative am";
      String string1 = "w,[5YPY]$`zF'8";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.stripEnd(string1, string0);
      assertEquals("w,[5YPY]$`zF'8", string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = string2;
      assertNotNull(stringArray0[0]);
      
      String string3 = StringUtils.replaceEach(string0, stringArray0, stringArray0);
      assertEquals(" a negative am", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string0, string1);
      assertSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotNull(string3);
  }

  @Test
  public void test121()  throws Throwable  {
      String string0 = "Minimum abbreviation width with offset is 7";
      String[] stringArray0 = new String[5];
      String[] stringArray1 = new String[10];
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      
      // Undeclared exception!
      try {
        String string1 = StringUtils.replaceEachRepeatedly(string0, stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 5 vs 10
         //
      }
  }

  @Test
  public void test122()  throws Throwable  {
      String string0 = "A,a#v)c= 5C";
      String string1 = StringUtils.substringAfterLast(string0, string0);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.substringsBetween(string1, string0, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = new String[6];
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      
      String string2 = StringUtils.replaceEach(string0, stringArray1, stringArray0);
      assertEquals("A,a#v)c= 5C", string2);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(stringArray0, stringArray1);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(stringArray1, stringArray0);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotNull(string2);
  }

  @Test
  public void test123()  throws Throwable  {
      String string0 = "', is neither of type Map.Entry nor an Array";
      String[] stringArray0 = StringUtils.split(string0, string0);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.replaceEach(string0, stringArray0, stringArray0);
      assertEquals("', is neither of type Map.Entry nor an Array", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test124()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = new String[3];
      String string1 = StringUtils.replaceEachRepeatedly(string0, stringArray0, stringArray0);
      assertEquals("", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test125()  throws Throwable  {
      String string0 = "1RNXVY9;,p*;";
      String[] stringArray0 = StringUtils.substringsBetween(string0, string0, string0);
      assertNull(stringArray0);
      
      String string1 = StringUtils.replaceEachRepeatedly(string0, stringArray0, stringArray0);
      assertEquals("1RNXVY9;,p*;", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test126()  throws Throwable  {
      String string0 = "7;@;";
      int int0 = 925;
      String string1 = StringUtils.replace(string0, string0, string0, int0);
      assertEquals("7;@;", string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
  }

  @Test
  public void test127()  throws Throwable  {
      String string0 = "7;@;";
      String[] stringArray0 = new String[8];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      String string1 = "org.apache.commons.lang.ObjectUtils";
      assertNotSame(string1, string0);
      
      stringArray0[3] = string1;
      assertNotNull(stringArray0[3]);
      
      stringArray0[7] = stringArray0[0];
      assertNotNull(stringArray0[7]);
      
      String string2 = StringUtils.replaceOnce(stringArray0[7], stringArray0[3], stringArray0[3]);
      assertEquals("7;@;", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotNull(string2);
  }

  @Test
  public void test128()  throws Throwable  {
      String string0 = "Minimum abbreviation width is 4";
      int int0 = 0;
      String string1 = StringUtils.replace(string0, string0, string0, int0);
      assertEquals("Minimum abbreviation width is 4", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
  }

  @Test
  public void test129()  throws Throwable  {
      String string0 = null;
      int int0 = 0;
      String string1 = StringUtils.mid(string0, int0, int0);
      assertNull(string1);
      
      String string2 = "\\u0";
      char char0 = 'E';
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) char0;
      assertNotNull(objectArray0[0]);
      
      String string3 = StringUtils.join(objectArray0);
      assertEquals("E", string3);
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string3, string2);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceOnce(string3, string2, string1);
      assertEquals("E", string4);
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string2, string4);
      assertNotSame(string2, string3);
      assertSame(string4, string3);
      assertNotSame(string4, string2);
      assertSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotNull(string4);
  }

  @Test
  public void test130()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.swapCase(string0);
      assertNull(string1);
      
      String string2 = "wVzHu'{E7k(ia5~";
      String string3 = StringUtils.substringBefore(string2, string1);
      assertEquals("wVzHu'{E7k(ia5~", string3);
      assertSame(string2, string3);
      assertSame(string3, string2);
      assertNotNull(string3);
      
      String string4 = StringUtils.replace(string3, string1, string1);
      assertEquals("wVzHu'{E7k(ia5~", string4);
      assertSame(string2, string4);
      assertSame(string2, string3);
      assertSame(string4, string2);
      assertSame(string4, string3);
      assertSame(string3, string4);
      assertSame(string3, string2);
      assertNotNull(string4);
  }

  @Test
  public void test131()  throws Throwable  {
      String string0 = " vs ";
      int int0 = 57;
      String string1 = StringUtils.center(string0, int0);
      assertEquals("                           vs                            ", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      
      String string2 = null;
      int int1 = StringUtils.indexOfDifference(string1, string0);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string3 = StringUtils.replace(string2, string2, string2, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNull(string3);
  }

  @Test
  public void test132()  throws Throwable  {
      String string0 = "PKfOvv[t";
      int int0 = 1632;
      char char0 = 'c';
      String string1 = StringUtils.center(string0, int0, char0);
      String string2 = StringUtils.remove(string1, char0);
  }

  @Test
  public void test133()  throws Throwable  {
      String string0 = "!ON58uB@c";
      char char0 = 'M';
      String string1 = StringUtils.remove(string0, char0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
  }

  @Test
  public void test134()  throws Throwable  {
      String string0 = null;
      char char0 = 'Y';
      String string1 = StringUtils.remove(string0, char0);
      assertNull(string1);
  }

  @Test
  public void test135()  throws Throwable  {
      String string0 = " is not in the range '0' - '9'";
      String string1 = StringUtils.stripEnd(string0, string0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.remove(string0, string1);
      assertEquals(" is not in the range '0' - '9'", string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotNull(string2);
  }

  @Test
  public void test136()  throws Throwable  {
      String string0 = " vs ";
      String string1 = null;
      String string2 = StringUtils.remove(string1, string0);
      assertNull(string2);
  }

  @Test
  public void test137()  throws Throwable  {
      String string0 = "%";
      String string1 = "";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeEndIgnoreCase(string0, string1);
      assertEquals("%", string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotNull(string2);
  }

  @Test
  public void test138()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.removeEndIgnoreCase(string0, string0);
      assertEquals("", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test139()  throws Throwable  {
      String string0 = "";
      char char0 = 'z';
      int int0 = StringUtils.indexOf(string0, char0);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) int0;
      assertNotNull(objectArray0[0]);
      
      String string1 = StringUtils.join(objectArray0);
      assertEquals("-1", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertNotNull(string1);
      
      String string2 = "\\<yn3`2_ A\"";
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      String string3 = StringUtils.removeEnd(string1, string2);
      assertEquals("-1", string3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(string3, string1);
      assertNotNull(string3);
  }

  @Test
  public void test140()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      String string0 = " is less than 0: ";
      int int0 = 0;
      String string1 = StringUtils.join(objectArray0, string0, int0, int0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEnd(string0, string1);
      assertEquals(" is less than 0: ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotNull(string2);
  }

  @Test
  public void test141()  throws Throwable  {
      String string0 = "%";
      String string1 = StringUtils.substringAfterLast(string0, string0);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      
      int int0 = (-278);
      String string2 = StringUtils.repeat(string1, string0, int0);
      assertEquals("", string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotNull(string2);
  }

  @Test
  public void test142()  throws Throwable  {
      String string0 = "\\u000";
      String string1 = " is less than 0: ";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeStartIgnoreCase(string0, string1);
      assertEquals("\\u000", string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotNull(string2);
  }

  @Test
  public void test143()  throws Throwable  {
      String string0 = "wZ\"W<\"3%a";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals(false, listIterator0.hasNext());
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals(0, listIterator0.nextIndex());
      assertNotNull(listIterator0);
      
      char char0 = '+';
      String string1 = StringUtils.join((Iterator<?>) listIterator0, char0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals(false, listIterator0.hasNext());
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals(0, listIterator0.nextIndex());
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStartIgnoreCase(string0, string1);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals(false, listIterator0.hasNext());
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals(0, listIterator0.nextIndex());
      assertEquals("wZ\"W<\"3%a", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotNull(string2);
  }

  @Test
  public void test144()  throws Throwable  {
      String string0 = "cannot pad a timetolive of t: ";
      String string1 = "The Chara";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeStart(string0, string1);
      assertEquals("cannot pad a timetolive of t: ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotNull(string2);
  }

  @Test
  public void test145()  throws Throwable  {
      String string0 = ", Length: 0";
      int int0 = (-1);
      String string1 = StringUtils.mid(string0, int0, int0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      
      String string2 = "Minimum abbreviation width is 4";
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      String string3 = StringUtils.removeStart(string2, string1);
      assertEquals("Minimum abbreviation width is 4", string3);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertNotSame(string2, string1);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotNull(string3);
  }

  @Test
  public void test146()  throws Throwable  {
      String string0 = "The Character must not be null";
      String string1 = StringUtils.deleteWhitespace(string0);
      assertEquals("TheCharactermustnotbenull", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test147()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.deleteWhitespace(string0);
      assertNull(string1);
  }

  @Test
  public void test148()  throws Throwable  {
      String string0 = "wZ\"W<\"3%a";
      String string1 = StringUtils.deleteWhitespace(string0);
      assertEquals("wZ\"W<\"3%a", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test149()  throws Throwable  {
      String string0 = "IWdP@p9I<q";
      Collection<Object> collection0 = null;
      String string1 = StringUtils.join(collection0, string0);
      assertNull(string1);
  }

  @Test
  public void test150()  throws Throwable  {
      Collection<String> collection0 = null;
      char char0 = ';';
      String string0 = StringUtils.join(collection0, char0);
      assertNull(string0);
  }

  @Test
  public void test151()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      String string0 = null;
      boolean boolean0 = linkedList0.add((Object) string0);
      assertEquals(1, linkedList0.size());
      assertEquals("[null]", linkedList0.toString());
      assertTrue(boolean0);
      
      boolean boolean1 = linkedList0.add((Object) linkedList0);
      assertEquals(2, linkedList0.size());
      assertEquals("[null, (this Collection)]", linkedList0.toString());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.join((Collection<?>) linkedList0, string0);
      assertEquals(2, linkedList0.size());
      assertEquals("[null, (this Collection)]", linkedList0.toString());
      assertEquals("[null, (this Collection)]", string1);
      assertNotNull(string1);
  }

  @Test
  public void test152()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      String string0 = "+fX{% 8%v";
      boolean boolean0 = linkedList0.add((Object) linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals("[(this Collection)]", linkedList0.toString());
      assertTrue(boolean0);
      
      boolean boolean1 = linkedList0.add((Object) linkedList0);
      assertEquals("[(this Collection), (this Collection)]", linkedList0.toString());
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.join((Collection<?>) linkedList0, string0);
      assertEquals("[(this Collection), (this Collection)]", linkedList0.toString());
      assertEquals(2, linkedList0.size());
      assertEquals("[(this Collection), (this Collection)]+fX{% 8%v[(this Collection), (this Collection)]", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test153()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      String string0 = "+fX{% 8%v";
      boolean boolean0 = linkedList0.add((Object) linkedList0);
      assertEquals("[(this Collection)]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      String string1 = StringUtils.join((Collection<?>) linkedList0, string0);
      assertEquals("[(this Collection)]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      assertEquals("[(this Collection)]", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test154()  throws Throwable  {
      String string0 = "cannot pad a timetolive of t: ";
      String string1 = StringUtils.removeStart(string0, string0);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      
      Iterator<String> iterator0 = null;
      String string2 = StringUtils.join(iterator0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNull(string2);
  }

  @Test
  public void test155()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      String string0 = null;
      boolean boolean0 = linkedList0.add((Object) string0);
      assertEquals("[null]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = linkedList0.add((Object) linkedList0);
      assertEquals(2, linkedList0.size());
      assertEquals("[null, (this Collection)]", linkedList0.toString());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char char0 = 'B';
      String string1 = StringUtils.join((Collection<?>) linkedList0, char0);
      assertEquals(2, linkedList0.size());
      assertEquals("[null, (this Collection)]", linkedList0.toString());
      assertEquals("B[null, (this Collection)]", string1);
      assertNotNull(string1);
  }

  @Test
  public void test156()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((Object) linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals("[(this Collection)]", linkedList0.toString());
      assertTrue(boolean0);
      
      boolean boolean1 = linkedList0.add((Object) linkedList0);
      assertEquals("[(this Collection), (this Collection)]", linkedList0.toString());
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char char0 = 'B';
      String string0 = StringUtils.join((Collection<?>) linkedList0, char0);
      assertEquals("[(this Collection), (this Collection)]", linkedList0.toString());
      assertEquals(2, linkedList0.size());
      assertEquals("[(this Collection), (this Collection)]B[(this Collection), (this Collection)]", string0);
      assertNotNull(string0);
  }

  @Test
  public void test157()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      String string0 = "Array element ";
      char char0 = '0';
      boolean boolean0 = linkedList0.add((Object) string0);
      assertEquals("[Array element ]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      String string1 = StringUtils.join((Collection<?>) linkedList0, char0);
      assertEquals("[Array element ]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      assertEquals("Array element ", string1);
      assertSame(string1, string0);
      assertNotNull(string1);
  }

  @Test
  public void test158()  throws Throwable  {
      Iterator<Object> iterator0 = null;
      char char0 = '2';
      String string0 = StringUtils.join(iterator0, char0);
      assertNull(string0);
  }

  @Test
  public void test159()  throws Throwable  {
      String string0 = "org.apache.commons.lang.ObjectUtils";
      String string1 = null;
      int int0 = 1031;
      char char0 = '\'';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string1, char0);
      assertNull(stringArray0);
      
      String string2 = StringUtils.join((Object[]) stringArray0, string0, int0, (int) char0);
      assertNull(string2);
  }

  @Test
  public void test160()  throws Throwable  {
      String string0 = "U";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals(0, listIterator0.nextIndex());
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals(false, listIterator0.hasNext());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(listIterator0);
      
      String string1 = StringUtils.join((Iterator<?>) listIterator0, string0);
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals(0, listIterator0.nextIndex());
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals(false, listIterator0.hasNext());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      
      char char0 = '-';
      int int0 = StringUtils.indexOfAnyBut(string0, string1);
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals(0, listIterator0.nextIndex());
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals(false, listIterator0.hasNext());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals((-1), int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String[] stringArray0 = StringUtils.split(string0, string0, int0);
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals(0, listIterator0.nextIndex());
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals(false, listIterator0.hasNext());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.join((Object[]) stringArray0, char0);
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals(0, listIterator0.nextIndex());
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals(false, listIterator0.hasNext());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals("", string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotNull(string2);
  }

  @Test
  public void test161()  throws Throwable  {
      String string0 = "1RNXVY9;,p*;";
      String[] stringArray0 = StringUtils.substringsBetween(string0, string0, string0);
      assertNull(stringArray0);
      
      int int0 = 1830;
      char char0 = 'z';
      String string1 = StringUtils.join((Object[]) stringArray0, char0, int0, int0);
      assertNull(string1);
  }

  @Test
  public void test162()  throws Throwable  {
      char char0 = '~';
      Object[] objectArray0 = null;
      String string0 = StringUtils.join(objectArray0, char0);
      assertNull(string0);
  }

  @Test
  public void test163()  throws Throwable  {
      String string0 = "A\"PTMEg9EGX<`T";
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test164()  throws Throwable  {
      String string0 = "The Character must not be null";
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test165()  throws Throwable  {
      String string0 = "7;@;";
      String string1 = "CkC'7_-qZI&#SsQ\"";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.split(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(stringArray0);
  }

  @Test
  public void test166()  throws Throwable  {
      String string0 = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
      String string1 = "%";
      assertNotSame(string1, string0);
      
      int int0 = 0;
      String string2 = StringUtils.substring(string0, int0, int0);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfAny(string2, string1);
      assertEquals((-1), int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string1, string1, int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotNull(stringArray0);
  }

  @Test
  public void test167()  throws Throwable  {
      String string0 = "7;@;";
      String string1 = "1";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test168()  throws Throwable  {
      String string0 = " is not in the range '0' - '9'";
      String[] stringArray0 = StringUtils.split(string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test169()  throws Throwable  {
      String string0 = null;
      String string1 = " pad a negativ";
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string1, string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test170()  throws Throwable  {
      char char0 = 'y';
      String string0 = ")qFk|yRPU~L|aEZfSvy";
      String string1 = StringUtils.reverseDelimited(string0, char0);
      assertEquals("RPU~L|aEZfSvy)qFk|", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test171()  throws Throwable  {
      String string0 = "Cannot pad a negative amount: ";
      char char0 = 'n';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, char0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test172()  throws Throwable  {
      String string0 = "['KT4+I0IW>OTL1q\\au";
      char char0 = '[';
      String[] stringArray0 = StringUtils.split(string0, char0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test173()  throws Throwable  {
      String string0 = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
      String string1 = "%";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(stringArray0);
  }

  @Test
  public void test174()  throws Throwable  {
      String string0 = "WQ%4I5@VzG.";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string1 = StringUtils.join((Collection<?>) linkedList0, string0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string0, string1);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(stringArray0);
  }

  @Test
  public void test175()  throws Throwable  {
      String string0 = "cannot pad a timetolive of t: ";
      String string1 = StringUtils.removeStart(string0, string0);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      
      int int0 = (-2448);
      int int1 = StringUtils.ordinalIndexOf(string0, string1, int0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string1, string1, int1);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test176()  throws Throwable  {
      String string0 = "mm]hI\\rxCq3";
      String string1 = "t\\u0...";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.substringsBetween(string0, string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNull(stringArray0);
  }

  @Test
  public void test177()  throws Throwable  {
      String string0 = "!ON58uB@c";
      String string1 = "}";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.substringsBetween(string0, string1, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNull(stringArray0);
  }

  @Test
  public void test178()  throws Throwable  {
      String string0 = "%";
      String string1 = StringUtils.substringAfterLast(string0, string0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.substringsBetween(string1, string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNull(stringArray0);
  }

  @Test
  public void test179()  throws Throwable  {
      String string0 = "['KT4+I0IW>OTL1q\\au";
      String string1 = StringUtils.chop(string0);
      assertEquals("['KT4+I0IW>OTL1q\\a", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      
      String string2 = null;
      String[] stringArray0 = StringUtils.substringsBetween(string1, string2, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNull(stringArray0);
  }

  @Test
  public void test180()  throws Throwable  {
      String string0 = "M.:G|>N3]r'8cLw ";
      String string1 = StringUtils.remove(string0, string0);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      
      String string2 = null;
      String[] stringArray0 = StringUtils.substringsBetween(string2, string1, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNull(stringArray0);
  }

  @Test
  public void test181()  throws Throwable  {
      String string0 = "7;@;";
      String[] stringArray0 = new String[8];
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween(stringArray0[1], string1);
      assertEquals("", string2);
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(string2);
  }

  @Test
  public void test182()  throws Throwable  {
      String string0 = "M.:G|>N3]r'8cLw ";
      String string1 = "nE_wbq6w&&A{QBP";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringBetween(string0, string1, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNull(string2);
  }

  @Test
  public void test183()  throws Throwable  {
      String string0 = ", Length: 0";
      int int0 = (-1);
      String string1 = StringUtils.mid(string0, int0, int0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      
      String string2 = null;
      String string3 = StringUtils.removeStartIgnoreCase(string2, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNull(string3);
      
      String string4 = StringUtils.substringBetween(string3, string0, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNull(string4);
  }

  @Test
  public void test184()  throws Throwable  {
      String string0 = " is less than 0: ";
      String string1 = ".fw$^0hccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccpkfovv[tcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringAfterLast(string1, string0);
      assertEquals("", string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(string2);
  }

  @Test
  public void test185()  throws Throwable  {
      String string0 = "Dn";
      String string1 = "";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringAfterLast(string0, string1);
      assertEquals("", string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotNull(string2);
  }

  @Test
  public void test186()  throws Throwable  {
      String string0 = "1RNXVY9;,p*;";
      String string1 = StringUtils.removeStartIgnoreCase(string0, string0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfterLast(string1, string1);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotNull(string2);
  }

  @Test
  public void test187()  throws Throwable  {
      String string0 = "DO`wPV!el";
      String string1 = "F(1a#f(fB+";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringBeforeLast(string0, string1);
      assertEquals("DO`wPV!el", string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotNull(string2);
  }

  @Test
  public void test188()  throws Throwable  {
      String string0 = "DO`wPV!el";
      String string1 = StringUtils.substringBeforeLast(string0, string0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test189()  throws Throwable  {
      String string0 = null;
      String string1 = "DO`wPV!el";
      String string2 = StringUtils.substringBeforeLast(string1, string0);
      assertEquals("DO`wPV!el", string2);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertNotNull(string2);
  }

  @Test
  public void test190()  throws Throwable  {
      String string0 = "..";
      String string1 = null;
      String string2 = StringUtils.substringBeforeLast(string1, string0);
      assertNull(string2);
  }

  @Test
  public void test191()  throws Throwable  {
      String string0 = ")9Gw}%";
      String string1 = "The Character must not be null";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.difference(string0, string1);
      assertEquals("The Character must not be null", string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfter(string2, string0);
      assertEquals("", string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotNull(string3);
  }

  @Test
  public void test192()  throws Throwable  {
      String string0 = "!ON58uB@c";
      String string1 = null;
      String string2 = StringUtils.substringAfter(string0, string1);
      assertEquals("", string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotNull(string2);
  }

  @Test
  public void test193()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = StringUtils.substringAfter(stringArray0[4], stringArray0[8]);
      assertNull(string0);
  }

  @Test
  public void test194()  throws Throwable  {
      String string0 = "!ON58uB@c";
      String string1 = StringUtils.substringAfter(string0, string0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test195()  throws Throwable  {
      String string0 = "', is neither of type Map.Entry nor an Array";
      String string1 = "[+2},$&0XL?zdv|;(";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringBefore(string0, string1);
      assertEquals("', is neither of type Map.Entry nor an Array", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotNull(string2);
  }

  @Test
  public void test196()  throws Throwable  {
      String string0 = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
      String string1 = "";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringBefore(string0, string1);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotNull(string2);
  }

  @Test
  public void test197()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.difference(string0, string0);
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBefore(string0, string1);
      assertEquals("", string2);
      assertSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertNotNull(string2);
  }

  @Test
  public void test198()  throws Throwable  {
      String string0 = "%";
      int int0 = (-278);
      char char0 = '&';
      String string1 = StringUtils.mid(string0, int0, (int) char0);
      assertEquals("%", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
  }

  @Test
  public void test199()  throws Throwable  {
      String string0 = "org.apache.commons.lang.ObjectUtils";
      char char0 = '\'';
      String string1 = StringUtils.mid(string0, (int) char0, (int) char0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test200()  throws Throwable  {
      String string0 = "', has a length less than 2";
      int int0 = 10;
      String string1 = StringUtils.right(string0, int0);
      assertEquals("ess than 2", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test201()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      char char0 = ':';
      String string0 = StringUtils.join((Collection<?>) linkedList0, char0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = (-1351);
      String string1 = StringUtils.right(string0, int0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
  }

  @Test
  public void test202()  throws Throwable  {
      int int0 = 925;
      String string0 = null;
      String string1 = StringUtils.right(string0, int0);
      assertNull(string1);
  }

  @Test
  public void test203()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      char char0 = ':';
      String string0 = StringUtils.join((Collection<?>) linkedList0, char0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right(string0, (int) char0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test204()  throws Throwable  {
      String string0 = "IWdP@p9I<q";
      int int0 = StringUtils.countMatches(string0, string0);
      assertEquals(1, int0);
      
      String string1 = StringUtils.left(string0, int0);
      assertEquals("I", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test205()  throws Throwable  {
      String string0 = ", Length: 0";
      int int0 = 1745;
      String string1 = StringUtils.left(string0, int0);
      assertEquals(", Length: 0", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
  }

  @Test
  public void test206()  throws Throwable  {
      char char0 = '0';
      String string0 = null;
      String string1 = StringUtils.left(string0, (int) char0);
      assertNull(string1);
  }

  @Test
  public void test207()  throws Throwable  {
      String string0 = ", Length: 0";
      int int0 = (-4485);
      String string1 = StringUtils.substring(string0, int0, int0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test208()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.chomp(string0, string0);
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      
      char char0 = 'R';
      int int0 = (-1457);
      String string2 = StringUtils.substring(string1, (int) char0, int0);
      assertEquals("", string2);
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertSame(string1, string0);
      assertNotNull(string2);
  }

  @Test
  public void test209()  throws Throwable  {
      String string0 = null;
      int int0 = (-3339);
      String string1 = StringUtils.substring(string0, int0, int0);
      assertNull(string1);
  }

  @Test
  public void test210()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.chomp(string0, string0);
      assertEquals("", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      
      char char0 = 'R';
      String string2 = StringUtils.substring(string1, (int) char0, (int) char0);
      assertEquals("", string2);
      assertSame(string1, string2);
      assertSame(string1, string0);
      assertSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string2, string0);
      assertSame(string2, string1);
      assertNotNull(string2);
  }

  @Test
  public void test211()  throws Throwable  {
      String string0 = "Ybq\\5W`{|rq6";
      int int0 = (-819);
      String string1 = StringUtils.substring(string0, int0);
      assertEquals("Ybq\\5W`{|rq6", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
  }

  @Test
  public void test212()  throws Throwable  {
      String string0 = "vL9Ljh15";
      char char0 = 'k';
      String string1 = StringUtils.substring(string0, (int) char0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test213()  throws Throwable  {
      String string0 = "mm]hI\\r]r`xCq3";
      String[] stringArray0 = new String[4];
      int int0 = StringUtils.lastIndexOfAny(string0, stringArray0);
      assertEquals((-1), int0);
  }

  @Test
  public void test214()  throws Throwable  {
      String string0 = "Strings must not be null";
      int int0 = (-1725);
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string0, string0, int0);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.lastIndexOfAny(string0, stringArray0);
      assertEquals(24, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test215()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = new String[4];
      int int0 = StringUtils.lastIndexOfAny(string0, stringArray0);
      assertEquals((-1), int0);
  }

  @Test
  public void test216()  throws Throwable  {
      String string0 = "'";
      String[] stringArray0 = new String[5];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = stringArray0[0];
      assertNotNull(stringArray0[1]);
      
      int int0 = StringUtils.indexOfAny(string0, stringArray0);
      assertEquals(0, int0);
  }

  @Test
  public void test217()  throws Throwable  {
      String string0 = "'";
      String[] stringArray0 = new String[5];
      String string1 = "&/+U0";
      assertNotSame(string1, string0);
      
      stringArray0[2] = string1;
      assertNotNull(stringArray0[2]);
      
      int int0 = StringUtils.indexOfAny(string0, stringArray0);
      assertEquals((-1), int0);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
  }

  @Test
  public void test218()  throws Throwable  {
      String string0 = "mm]hI\\rxCq3";
      String[] stringArray0 = StringUtils.substringsBetween(string0, string0, string0);
      assertNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny(string0, stringArray0);
      assertEquals((-1), int0);
  }

  @Test
  public void test219()  throws Throwable  {
      String string0 = "1RNXVY9;,p*;";
      String string1 = null;
      String[] stringArray0 = StringUtils.substringsBetween(string0, string0, string0);
      assertNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny(string1, stringArray0);
      assertEquals((-1), int0);
  }

  @Test
  public void test220()  throws Throwable  {
      String string0 = "Array element ";
      String string1 = null;
      boolean boolean0 = StringUtils.containsNone(string0, string1);
      assertTrue(boolean0);
  }

  @Test
  public void test221()  throws Throwable  {
      String[] stringArray0 = new String[6];
      boolean boolean0 = StringUtils.containsNone(stringArray0[2], stringArray0[4]);
      assertTrue(boolean0);
  }

  @Test
  public void test222()  throws Throwable  {
      String string0 = "The character must not be null";
      boolean boolean0 = StringUtils.containsNone(string0, string0);
      assertFalse(boolean0);
  }

  @Test
  public void test223()  throws Throwable  {
      String string0 = "Array element ";
      char[] charArray0 = new char[10];
      boolean boolean0 = StringUtils.containsNone(string0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
  }

  @Test
  public void test224()  throws Throwable  {
      String string0 = null;
      char[] charArray0 = new char[4];
      boolean boolean0 = StringUtils.containsNone(string0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
  }

  @Test
  public void test225()  throws Throwable  {
      String string0 = "WOL5~AmHM}yaRvU`";
      String string1 = null;
      String string2 = StringUtils.removeStart(string1, string0);
      assertNull(string2);
      
      int int0 = StringUtils.indexOfAny(string0, string0);
      assertEquals(0, int0);
      
      String string3 = "...";
      assertNotSame(string3, string0);
      
      char char0 = 'N';
      String string4 = StringUtils.leftPad(string3, int0, char0);
      assertEquals("...", string4);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string0));
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertSame(string3, string4);
      assertNotSame(string3, string0);
      assertSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.containsOnly(string4, string2);
      assertFalse(boolean0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string0));
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertSame(string3, string4);
      assertNotSame(string3, string0);
      assertSame(string4, string3);
      assertNotSame(string4, string0);
  }

  @Test
  public void test226()  throws Throwable  {
      String[] stringArray0 = new String[9];
      boolean boolean0 = StringUtils.containsOnly(stringArray0[0], stringArray0[1]);
      assertFalse(boolean0);
  }

  @Test
  public void test227()  throws Throwable  {
      String string0 = "H0^-J%'Au!i";
      String string1 = "";
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.containsOnly(string0, string1);
      assertFalse(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test228()  throws Throwable  {
      String string0 = ")9Gw}%";
      String string1 = StringUtils.removeEnd(string0, string0);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly(string1, string0);
      assertTrue(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test229()  throws Throwable  {
      String string0 = "WOL5~AmHM}yaRvU`";
      String string1 = null;
      String string2 = StringUtils.removeStart(string1, string0);
      assertNull(string2);
      
      char[] charArray0 = new char[8];
      boolean boolean0 = StringUtils.containsOnly(string2, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test230()  throws Throwable  {
      String string0 = "5](-TO|Z%0v|C~+ZO";
      String string1 = ", '";
      assertNotSame(string1, string0);
      
      int int0 = StringUtils.indexOfAnyBut(string1, string0);
      assertEquals(0, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test231()  throws Throwable  {
      String string0 = "";
      char char0 = 'z';
      int int0 = StringUtils.indexOf(string0, char0);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) int0;
      assertNotNull(objectArray0[0]);
      
      String string1 = StringUtils.join(objectArray0);
      assertEquals("-1", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfAnyBut(string1, string1);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
  }

  @Test
  public void test232()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      char char0 = ':';
      String string0 = StringUtils.join((Collection<?>) linkedList0, char0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut(string0, string0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals((-1), int0);
  }

  @Test
  public void test233()  throws Throwable  {
      String string0 = "Array element ";
      boolean boolean0 = StringUtils.containsOnly(string0, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test234()  throws Throwable  {
      String string0 = "%";
      char[] charArray0 = new char[1];
      boolean boolean0 = StringUtils.containsOnly(string0, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test235()  throws Throwable  {
      String string0 = "Minimum abbreviation width is ";
      int int0 = (-1879);
      String string1 = StringUtils.left(string0, int0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[8];
      int int1 = StringUtils.indexOfAnyBut(string1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test236()  throws Throwable  {
      String string0 = "The Chara";
      String string1 = StringUtils.removeStartIgnoreCase(string0, string0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      
      String string2 = null;
      boolean boolean0 = StringUtils.containsAny(string1, string2);
      assertFalse(boolean0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test237()  throws Throwable  {
      String string0 = "%";
      char[] charArray0 = new char[1];
      boolean boolean0 = StringUtils.containsAny(string0, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test238()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.containsAny(string0, string0);
      assertFalse(boolean0);
  }

  @Test
  public void test239()  throws Throwable  {
      String string0 = "GR&'Ybkz:m";
      boolean boolean0 = StringUtils.containsAny(string0, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test240()  throws Throwable  {
      String string0 = "mm]hI\\rxCq3";
      String string1 = null;
      boolean boolean0 = StringUtils.containsAny(string1, string0);
      assertFalse(boolean0);
  }

  @Test
  public void test241()  throws Throwable  {
      String string0 = "]<a,b?\\...,'6'a$m\\";
      String string1 = null;
      int int0 = StringUtils.indexOfAny(string0, string1);
      assertEquals((-1), int0);
  }

  @Test
  public void test242()  throws Throwable  {
      String string0 = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
      int int0 = 736;
      String string1 = "";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.abbreviate(string1, int0);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfAny(string2, string0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
  }

  @Test
  public void test243()  throws Throwable  {
      String string0 = " is not in the range '0' - '9'";
      char[] charArray0 = new char[1];
      int int0 = StringUtils.indexOfAny(string0, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals((-1), int0);
  }

  @Test
  public void test244()  throws Throwable  {
      String string0 = null;
      char[] charArray0 = new char[1];
      int int0 = StringUtils.indexOfAny(string0, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals((-1), int0);
  }

  @Test
  public void test245()  throws Throwable  {
      String string0 = "+fX{% 8%v";
      String string1 = "\\u";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeEndIgnoreCase(string0, string1);
      assertEquals("+fX{% 8%v", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotNull(string2);
      
      String string3 = "Cannot pad a negative amount: ";
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase(string3, string2);
      assertFalse(boolean0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string0, string3);
  }

  @Test
  public void test246()  throws Throwable  {
      String string0 = null;
      String string1 = "Strings must not be null";
      String string2 = StringUtils.reverse(string1);
      assertEquals("llun eb ton tsum sgnirtS", string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsIgnoreCase(string2, string0);
      assertFalse(boolean0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
  }

  @Test
  public void test247()  throws Throwable  {
      String string0 = "+fX{% 8%v";
      String string1 = StringUtils.removeEndIgnoreCase(string0, string0);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase(string1, string1);
      assertTrue(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test248()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.containsIgnoreCase(string0, string0);
      assertFalse(boolean0);
  }

  @Test
  public void test249()  throws Throwable  {
      String string0 = "\\u0";
      String string1 = "xIwxP{NF>70";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.chomp(string1, string0);
      assertEquals("xIwxP{NF>70", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.contains(string0, string2);
      assertFalse(boolean0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
  }

  @Test
  public void test250()  throws Throwable  {
      String string0 = "!ON58uB@c";
      String string1 = StringUtils.substringBefore(string0, string0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.contains(string1, string1);
      assertTrue(boolean0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test251()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.contains(string0, string0);
      assertFalse(boolean0);
  }

  @Test
  public void test252()  throws Throwable  {
      String string0 = "WUs1!{Cv|#";
      char char0 = '1';
      boolean boolean0 = StringUtils.contains(string0, char0);
      assertTrue(boolean0);
  }

  @Test
  public void test253()  throws Throwable  {
      String string0 = null;
      char char0 = ';';
      boolean boolean0 = StringUtils.contains(string0, char0);
      assertFalse(boolean0);
  }

  @Test
  public void test254()  throws Throwable  {
      String string0 = "', is neither of type Map.Entry nor an Array";
      char char0 = ';';
      boolean boolean0 = StringUtils.contains(string0, char0);
      assertFalse(boolean0);
  }

  @Test
  public void test255()  throws Throwable  {
      String string0 = "M.:G|>N3]r'8cLw ";
      String string1 = StringUtils.remove(string0, string0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      
      String string2 = null;
      int int0 = StringUtils.indexOfDifference(string1, string1);
      assertEquals((-1), int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      int int1 = StringUtils.lastIndexOf(string1, string2, int0);
      assertEquals((-1), int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test256()  throws Throwable  {
      String string0 = " is less than 0: ";
      char char0 = ';';
      int int0 = StringUtils.lastIndexOf(string0, char0);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf(string0, string0, int0);
      assertEquals((-1), int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test257()  throws Throwable  {
      String string0 = "";
      int int0 = 64;
      String string1 = null;
      int int1 = StringUtils.lastIndexOf(string1, string0, int0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test258()  throws Throwable  {
      String string0 = "1RNXVY9;,p*;";
      String string1 = StringUtils.removeStartIgnoreCase(string0, string0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      
      String string2 = null;
      int int0 = StringUtils.lastIndexOf(string1, string2);
      assertEquals((-1), int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test259()  throws Throwable  {
      String string0 = "";
      Object[] objectArray0 = new Object[6];
      String string1 = StringUtils.join(objectArray0);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf(string1, string0);
      assertEquals(0, int0);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test260()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.uncapitalize(string0);
      assertEquals("", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      
      String string2 = null;
      int int0 = StringUtils.lastIndexOf(string2, string1);
      assertEquals((-1), int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test261()  throws Throwable  {
      String string0 = null;
      char char0 = 'M';
      int int0 = StringUtils.lastIndexOf(string0, char0, (int) char0);
      assertEquals((-1), int0);
  }

  @Test
  public void test262()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertEquals(0, listIterator0.nextIndex());
      assertEquals(false, listIterator0.hasNext());
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(listIterator0);
      
      String string0 = "org.apache.commons.lang.ObjectUtils";
      String string1 = StringUtils.join((Iterator<?>) listIterator0, string0);
      assertEquals(0, listIterator0.nextIndex());
      assertEquals(false, listIterator0.hasNext());
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      
      int int0 = StringUtils.length(string1);
      assertEquals(0, listIterator0.nextIndex());
      assertEquals(false, listIterator0.hasNext());
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      char char0 = '\'';
      int int1 = StringUtils.lastIndexOf(string0, char0, int0);
      assertEquals(0, listIterator0.nextIndex());
      assertEquals(false, listIterator0.hasNext());
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals((-1), int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test263()  throws Throwable  {
      String[] stringArray0 = new String[8];
      char char0 = ';';
      int int0 = StringUtils.lastIndexOf(stringArray0[4], char0);
      assertEquals((-1), int0);
  }

  @Test
  public void test264()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      String string0 = " is less than 0: ";
      int int0 = 0;
      String string1 = StringUtils.join(objectArray0, string0, int0, int0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOf(string0, string1, int0);
      assertEquals(0, int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test265()  throws Throwable  {
      String string0 = "wZ\"W<\"3%a";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals(false, listIterator0.hasNext());
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals(0, listIterator0.nextIndex());
      assertNotNull(listIterator0);
      
      char char0 = '+';
      String string1 = StringUtils.join((Iterator<?>) listIterator0, char0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals(false, listIterator0.hasNext());
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals(0, listIterator0.nextIndex());
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf(string1, string0, (int) char0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals(false, listIterator0.hasNext());
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals(0, listIterator0.nextIndex());
      assertEquals((-1), int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test266()  throws Throwable  {
      String string0 = null;
      char[] charArray0 = new char[4];
      String string1 = StringUtils.reverse(string0);
      assertNull(string1);
      
      int int0 = StringUtils.indexOf(string1, string0, (int) charArray0[2]);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
  }

  @Test
  public void test267()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = "";
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      int int0 = 10;
      int int1 = StringUtils.ordinalIndexOf(stringArray0[1], stringArray0[1], int0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test268()  throws Throwable  {
      String string0 = "?/";
      char char0 = '/';
      int int0 = StringUtils.ordinalIndexOf(string0, string0, (int) char0);
      assertEquals((-1), int0);
  }

  @Test
  public void test269()  throws Throwable  {
      String string0 = "";
      char char0 = 'z';
      int int0 = StringUtils.indexOf(string0, char0);
      assertEquals((-1), int0);
      
      String string1 = null;
      int int1 = StringUtils.ordinalIndexOf(string0, string1, int0);
      assertEquals((-1), int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test270()  throws Throwable  {
      String string0 = "..";
      String string1 = null;
      int int0 = 0;
      int int1 = StringUtils.ordinalIndexOf(string1, string0, int0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test271()  throws Throwable  {
      String string0 = "A\"PTMEg9EGX<`T";
      String string1 = null;
      int int0 = StringUtils.indexOf(string0, string1);
      assertEquals((-1), int0);
  }

  @Test
  public void test272()  throws Throwable  {
      String string0 = "Minimum abbreviation width is ";
      String string1 = StringUtils.upperCase(string0);
      assertEquals("MINIMUM ABBREVIATION WIDTH IS ", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      
      String string2 = null;
      Locale locale0 = Locale.UK;
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertNotNull(locale0);
      
      String string3 = StringUtils.upperCase(string2, locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertNull(string3);
      
      int int0 = StringUtils.indexOf(string3, string1);
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals((-1), int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test273()  throws Throwable  {
      String string0 = "";
      char char0 = '.';
      int int0 = StringUtils.indexOf(string0, char0, (int) char0);
      assertEquals((-1), int0);
  }

  @Test
  public void test274()  throws Throwable  {
      String string0 = "Array element ";
      int int0 = 173;
      char char0 = '0';
      String string1 = StringUtils.leftPad(string0, int0, char0);
      assertEquals("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Array element ", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOf(string1, char0, (int) char0);
      assertEquals(48, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test275()  throws Throwable  {
      String string0 = "+bakja";
      char char0 = '$';
      int int0 = StringUtils.indexOf(string0, char0);
      assertEquals((-1), int0);
  }

  @Test
  public void test276()  throws Throwable  {
      String string0 = "M.:G|>N3]r'8cLw ";
      String string1 = StringUtils.remove(string0, string0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      
      String string2 = null;
      boolean boolean0 = StringUtils.equalsIgnoreCase(string2, string1);
      assertFalse(boolean0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test277()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.equalsIgnoreCase(string0, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test278()  throws Throwable  {
      String string0 = "..";
      boolean boolean0 = StringUtils.equalsIgnoreCase(string0, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test279()  throws Throwable  {
      String string0 = null;
      String string1 = "]|c8S&X|xn:`\\q?:H ";
      boolean boolean0 = StringUtils.equals(string0, string1);
      assertFalse(boolean0);
  }

  @Test
  public void test280()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.equals(string0, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test281()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.equals(string0, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test282()  throws Throwable  {
      String string0 = "', is neither of type Map.Entry nor an Array";
      String[] stringArray0 = StringUtils.split(string0, string0);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
  }

  @Test
  public void test283()  throws Throwable  {
      String string0 = "^";
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      String string1 = "u;C~;\"4 d&";
      assertNotSame(string1, string0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotSame(string1, string0);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
  }

  @Test
  public void test284()  throws Throwable  {
      String string0 = " is not in the range '0' - '9'";
      String string1 = null;
      String string2 = StringUtils.stripEnd(string1, string0);
      assertNull(string2);
  }

  @Test
  public void test285()  throws Throwable  {
      String string0 = ", Length: 0";
      int int0 = (-1);
      String string1 = StringUtils.mid(string0, int0, int0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      
      String string2 = "Minimum abbreviation width is 4";
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      String string3 = StringUtils.strip(string2, string1);
      assertEquals("Minimum abbreviation width is 4", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(string3);
  }

  @Test
  public void test286()  throws Throwable  {
      String string0 = "Dn";
      String string1 = StringUtils.substringAfterLast(string0, string0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      
      char char0 = 'u';
      String string2 = StringUtils.rightPad(string1, (int) char0);
      assertEquals("                                                                                                                     ", string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotNull(string2);
      
      String string3 = StringUtils.strip(string2);
      assertEquals("", string3);
      assertTrue(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotNull(string3);
  }

  @Test
  public void test287()  throws Throwable  {
      String string0 = "cannot pad a timetolive of t: ";
      String string1 = StringUtils.stripStart(string0, string0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test288()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.stripStart(string0, string0);
      assertNull(string1);
  }

  @Test
  public void test289()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = StringUtils.stripToEmpty(stringArray0[0]);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test
  public void test290()  throws Throwable  {
      String string0 = " is less than 0: ";
      String string1 = StringUtils.stripToEmpty(string0);
      assertEquals("is less than 0:", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test291()  throws Throwable  {
      int int0 = 736;
      String string0 = "";
      String string1 = StringUtils.abbreviate(string0, int0);
      assertEquals("", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripToNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNull(string2);
  }

  @Test
  public void test292()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.stripToNull(string0);
      assertNull(string1);
  }

  @Test
  public void test293()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.uncapitalize(string0);
      assertNull(string1);
      
      String string2 = "[+2},$&0XL?zdv|;(";
      int int0 = 0;
      String string3 = StringUtils.rightPad(string2, int0, string1);
      assertEquals("[+2},$&0XL?zdv|;(", string3);
      assertSame(string3, string2);
      assertSame(string2, string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripToNull(string3);
      assertEquals("[+2},$&0XL?zdv|;(", string4);
      assertSame(string3, string4);
      assertSame(string3, string2);
      assertSame(string4, string2);
      assertSame(string4, string3);
      assertSame(string2, string3);
      assertSame(string2, string4);
      assertNotNull(string4);
  }

  @Test
  public void test294()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.trimToEmpty(string0);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test
  public void test295()  throws Throwable  {
      String string0 = "cannot pad a timetolive of t: ";
      String string1 = StringUtils.trimToEmpty(string0);
      assertEquals("cannot pad a timetolive of t:", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
  }

  @Test
  public void test296()  throws Throwable  {
      String string0 = "^";
      String string1 = StringUtils.trimToNull(string0);
      assertEquals("^", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test297()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.trimToNull(string0);
      assertNull(string1);
  }

  @Test
  public void test298()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      char char0 = 'I';
      String string0 = StringUtils.join(objectArray0, char0);
      assertEquals("III", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test
  public void test299()  throws Throwable  {
      String string0 = " vs ";
      boolean boolean0 = StringUtils.isBlank((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test300()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test301()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test302()  throws Throwable  {
      String string0 = "'";
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test
  public void test303()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test304()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.uncapitalize(string0);
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.split(string1, string1);
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNull(stringArray1);
  }

  @Test
  public void test305()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.capitalize(string0);
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string1, string1);
      assertNull(stringArray0);
  }

  @Test
  public void test306()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = StringUtils.splitByCharacterType(string0);
      assertNull(stringArray0);
  }

  @Test
  public void test307()  throws Throwable  {
      String string0 = null;
      char char0 = 'k';
      String string1 = StringUtils.leftPad(string0, (int) char0);
      assertNull(string1);
  }

  @Test
  public void test308()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0, listIterator0.nextIndex());
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals(false, listIterator0.hasNext());
      assertEquals(-1, listIterator0.previousIndex());
      assertNotNull(listIterator0);
      
      String string0 = "org.apache.commons.lang.ObjectUtils";
      String string1 = StringUtils.join((Iterator<?>) listIterator0, string0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0, listIterator0.nextIndex());
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals(false, listIterator0.hasNext());
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      
      char char0 = '\'';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string1, char0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0, listIterator0.nextIndex());
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals(false, listIterator0.hasNext());
      assertEquals(-1, listIterator0.previousIndex());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(stringArray0);
  }

  @Test
  public void test309()  throws Throwable  {
      String string0 = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
      int int0 = 0;
      // Undeclared exception!
      try {
        String string1 = StringUtils.abbreviate(string0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
      }
  }

  @Test
  public void test310()  throws Throwable  {
      String string0 = "7;@;";
      String string1 = StringUtils.replaceOnce(string0, string0, string0);
      assertEquals("7;@;", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test311()  throws Throwable  {
      String string0 = "cannot pad a timetolive of t: ";
      String string1 = StringUtils.removeStart(string0, string0);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      
      int int0 = (-2448);
      int int1 = StringUtils.ordinalIndexOf(string0, string1, int0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string0, string0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test312()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.uncapitalize(string0);
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.split(string0, string0);
      assertNull(stringArray0);
      
      String string2 = StringUtils.replaceEach(string1, stringArray0, stringArray0);
      assertNull(string2);
  }

  @Test
  public void test313()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals(false, listIterator0.hasNext());
      assertEquals(0, listIterator0.nextIndex());
      assertEquals(-1, listIterator0.previousIndex());
      assertNotNull(listIterator0);
      
      char char0 = '+';
      String string0 = StringUtils.join((Iterator<?>) listIterator0, char0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals(false, listIterator0.hasNext());
      assertEquals(0, listIterator0.nextIndex());
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(string0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals(false, listIterator0.hasNext());
      assertEquals(0, listIterator0.nextIndex());
      assertEquals(-1, listIterator0.previousIndex());
      assertNotNull(stringArray0);
  }

  @Test
  public void test314()  throws Throwable  {
      String string0 = "7;@;";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test315()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0, listIterator0.nextIndex());
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals(false, listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      String string0 = "org.apache.commons.lang.ObjectUtils";
      String string1 = StringUtils.join((Iterator<?>) listIterator0, string0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0, listIterator0.nextIndex());
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals(false, listIterator0.hasNext());
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split(string1);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0, listIterator0.nextIndex());
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals(false, listIterator0.hasNext());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(stringArray0);
  }

  @Test
  public void test316()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
  }
}
