/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:20:50 GMT 2014
 */

package org.apache.commons.lang3.text.translate;

import static org.junit.Assert.*;
import org.junit.Test;
import java.io.File;
import java.io.Writer;
import org.apache.commons.lang3.text.translate.CharSequenceTranslator;
import org.apache.commons.lang3.text.translate.LookupTranslator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.junit.runner.RunWith;


public class LookupTranslatorEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      int int0 = 2489;
      String string0 = CharSequenceTranslator.hex(int0);
      assertNotNull(string0);
      assertEquals("9B9", string0);
      
      CharSequence[][] charSequenceArray0 = new CharSequence[1][1];
      CharSequence[] charSequenceArray1 = new CharSequence[7];
      charSequenceArray1[0] = (CharSequence) string0;
      assertNotNull(charSequenceArray1[0]);
      assertEquals("9B9", charSequenceArray1[0].toString());
      assertEquals(3, charSequenceArray1[0].length());
      
      charSequenceArray0[0] = charSequenceArray1;
      assertNotNull(charSequenceArray0[0]);
      
      LookupTranslator lookupTranslator0 = new LookupTranslator(charSequenceArray0);
      assertNotNull(lookupTranslator0);
      
      String string1 = lookupTranslator0.translate((CharSequence) string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("9B9", string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = (-2613);
      String string0 = CharSequenceTranslator.hex(int0);
      assertNotNull(string0);
      assertEquals("FFFFF5CB", string0);
      
      CharSequence[][] charSequenceArray0 = new CharSequence[1][7];
      CharSequence[] charSequenceArray1 = new CharSequence[2];
      charSequenceArray1[0] = (CharSequence) string0;
      assertNotNull(charSequenceArray1[0]);
      assertEquals("FFFFF5CB", charSequenceArray1[0].toString());
      assertEquals(8, charSequenceArray1[0].length());
      
      charSequenceArray1[1] = (CharSequence) string0;
      assertNotNull(charSequenceArray1[1]);
      assertEquals(8, charSequenceArray1[1].length());
      assertEquals("FFFFF5CB", charSequenceArray1[1].toString());
      
      charSequenceArray0[0] = charSequenceArray1;
      assertNotNull(charSequenceArray0[0]);
      
      LookupTranslator lookupTranslator0 = new LookupTranslator(charSequenceArray0);
      assertNotNull(lookupTranslator0);
      
      MockFile mockFile0 = (MockFile)MockFile.createTempFile(string0, string0);
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter((File) mockFile0);
      assertNotNull(mockFileWriter0);
      
      lookupTranslator0.translate(charSequenceArray1[1], (Writer) mockFileWriter0);
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 3249;
      String string0 = CharSequenceTranslator.hex(int0);
      assertNotNull(string0);
      assertEquals("CB1", string0);
      
      CharSequence[][] charSequenceArray0 = new CharSequence[2][1];
      CharSequence[] charSequenceArray1 = new CharSequence[9];
      charSequenceArray1[0] = (CharSequence) string0;
      assertNotNull(charSequenceArray1[0]);
      assertEquals(3, charSequenceArray1[0].length());
      assertEquals("CB1", charSequenceArray1[0].toString());
      
      charSequenceArray0[0] = charSequenceArray1;
      assertNotNull(charSequenceArray0[0]);
      
      charSequenceArray0[1] = charSequenceArray1;
      assertNotNull(charSequenceArray0[1]);
      
      LookupTranslator lookupTranslator0 = new LookupTranslator(charSequenceArray0);
      assertNotNull(lookupTranslator0);
  }

  @Test
  public void test3()  throws Throwable  {
      CharSequence[][] charSequenceArrayArray0 = null;
      LookupTranslator lookupTranslator0 = new LookupTranslator(charSequenceArrayArray0);
      assertNotNull(lookupTranslator0);
  }
}
