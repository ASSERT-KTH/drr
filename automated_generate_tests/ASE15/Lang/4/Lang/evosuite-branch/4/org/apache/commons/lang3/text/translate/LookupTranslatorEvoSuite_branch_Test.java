/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:15:47 GMT 2014
 */

package org.apache.commons.lang3.text.translate;

import static org.junit.Assert.*;
import org.junit.Test;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Locale;
import org.apache.commons.lang3.text.translate.CharSequenceTranslator;
import org.apache.commons.lang3.text.translate.LookupTranslator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class LookupTranslatorEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      int int0 = 1293;
      String string0 = CharSequenceTranslator.hex(int0);
      assertEquals("50D", string0);
      assertNotNull(string0);
      
      CharSequence[][] charSequenceArray0 = new CharSequence[1][8];
      CharSequence[] charSequenceArray1 = new CharSequence[3];
      charSequenceArray1[0] = (CharSequence) string0;
      assertEquals("50D", charSequenceArray1[0].toString());
      assertEquals(3, charSequenceArray1[0].length());
      assertNotNull(charSequenceArray1[0]);
      
      charSequenceArray1[1] = (CharSequence) string0;
      assertEquals(3, charSequenceArray1[1].length());
      assertEquals("50D", charSequenceArray1[1].toString());
      assertNotNull(charSequenceArray1[1]);
      
      charSequenceArray1[2] = (CharSequence) string0;
      assertEquals(3, charSequenceArray1[2].length());
      assertEquals("50D", charSequenceArray1[2].toString());
      assertNotNull(charSequenceArray1[2]);
      
      charSequenceArray0[0] = charSequenceArray1;
      assertNotNull(charSequenceArray0[0]);
      
      LookupTranslator lookupTranslator0 = new LookupTranslator(charSequenceArray0);
      assertNotNull(lookupTranslator0);
      
      String string1 = lookupTranslator0.translate(charSequenceArray1[2]);
      assertNotSame(string1, string0);
      assertEquals("50D", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 1293;
      String string0 = CharSequenceTranslator.hex(int0);
      assertEquals("50D", string0);
      assertNotNull(string0);
      
      CharSequence[][] charSequenceArray0 = new CharSequence[1][8];
      CharSequence[] charSequenceArray1 = new CharSequence[3];
      charSequenceArray1[0] = (CharSequence) string0;
      assertEquals("50D", charSequenceArray1[0].toString());
      assertEquals(3, charSequenceArray1[0].length());
      assertNotNull(charSequenceArray1[0]);
      
      charSequenceArray1[2] = (CharSequence) string0;
      assertEquals("50D", charSequenceArray1[2].toString());
      assertEquals(3, charSequenceArray1[2].length());
      assertNotNull(charSequenceArray1[2]);
      
      charSequenceArray0[0] = charSequenceArray1;
      assertNotNull(charSequenceArray0[0]);
      
      LookupTranslator lookupTranslator0 = new LookupTranslator(charSequenceArray0);
      assertNotNull(lookupTranslator0);
      
      String string1 = lookupTranslator0.translate(charSequenceArray1[2]);
      assertNotSame(string1, string0);
      assertEquals("50D", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 1293;
      String string0 = CharSequenceTranslator.hex(int0);
      assertEquals("50D", string0);
      assertNotNull(string0);
      
      CharSequence[][] charSequenceArrayArray0 = null;
      LookupTranslator lookupTranslator0 = new LookupTranslator(charSequenceArrayArray0);
      assertNotNull(lookupTranslator0);
      
      StringWriter stringWriter0 = new StringWriter(int0);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      int int1 = lookupTranslator0.translate((CharSequence) string0, int0, (Writer) stringWriter0);
      assertEquals(0, int1);
      assertEquals("", stringWriter0.toString());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test3()  throws Throwable  {
      CharSequence[][] charSequenceArray0 = new CharSequence[2][8];
      CharSequence[] charSequenceArray1 = new CharSequence[23];
      String string0 = "j]";
      Locale locale0 = new Locale(string0);
      assertEquals("j]", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("j]", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string1 = locale0.toLanguageTag();
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("und", string1);
      assertEquals("j]", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("j]", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      charSequenceArray1[0] = (CharSequence) string1;
      assertEquals("und", charSequenceArray1[0].toString());
      assertEquals(3, charSequenceArray1[0].length());
      assertEquals("j]", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("j]", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(charSequenceArray1[0]);
      
      charSequenceArray0[0] = charSequenceArray1;
      assertNotNull(charSequenceArray0[0]);
      
      charSequenceArray0[1] = charSequenceArray1;
      assertNotNull(charSequenceArray0[1]);
      
      LookupTranslator lookupTranslator0 = new LookupTranslator(charSequenceArray0);
      assertNotNull(lookupTranslator0);
  }
}
