/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:16:44 GMT 2014
 */

package org.apache.commons.lang3.text.translate;

import static org.junit.Assert.*;
import org.junit.Test;
import java.io.File;
import java.io.StringWriter;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.util.Locale;
import org.apache.commons.lang3.text.translate.LookupTranslator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class LookupTranslatorEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      CharSequence[][] charSequenceArray0 = new CharSequence[8][7];
      CharSequence[] charSequenceArray1 = new CharSequence[3];
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      String string0 = locale0.getCountry();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      charSequenceArray1[0] = (CharSequence) string0;
      assertNotNull(charSequenceArray1[0]);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", charSequenceArray1[0].toString());
      assertEquals(0, charSequenceArray1[0].length());
      
      String string1 = File.separator;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertEquals("/", string1);
      
      charSequenceArray1[1] = (CharSequence) string1;
      assertNotNull(charSequenceArray1[1]);
      assertEquals(1, charSequenceArray1[1].length());
      assertEquals("/", charSequenceArray1[1].toString());
      
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.allocate(int0);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.limit());
      assertEquals(false, charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals("", charBuffer0.toString());
      assertEquals(true, charBuffer0.hasArray());
      assertEquals(false, charBuffer0.isDirect());
      assertEquals(false, charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      
      charSequenceArray0[0] = charSequenceArray1;
      assertNotNull(charSequenceArray0[0]);
      
      CharSequence[] charSequenceArray2 = new CharSequence[10];
      assertFalse(charSequenceArray2.equals((Object)charSequenceArray1));
      assertNotSame(charSequenceArray2, charSequenceArray1);
      
      charSequenceArray2[0] = (CharSequence) charBuffer0;
      assertNotNull(charSequenceArray2[0]);
      assertEquals("", charSequenceArray2[0].toString());
      assertEquals(0, charSequenceArray2[0].length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.limit());
      assertEquals(false, charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals("", charBuffer0.toString());
      assertEquals(true, charBuffer0.hasArray());
      assertEquals(false, charBuffer0.isDirect());
      assertEquals(false, charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      
      charSequenceArray2[5] = (CharSequence) string1;
      assertNotNull(charSequenceArray2[5]);
      assertEquals(1, charSequenceArray2[5].length());
      assertEquals("/", charSequenceArray2[5].toString());
      
      charSequenceArray0[1] = charSequenceArray2;
      assertNotNull(charSequenceArray0[1]);
      
      charSequenceArray0[2] = charSequenceArray2;
      assertNotNull(charSequenceArray0[2]);
      
      charSequenceArray0[3] = charSequenceArray2;
      assertNotNull(charSequenceArray0[3]);
      
      charSequenceArray0[4] = charSequenceArray0[2];
      assertNotNull(charSequenceArray0[4]);
      
      charSequenceArray0[5] = charSequenceArray0[3];
      assertNotNull(charSequenceArray0[5]);
      
      charSequenceArray0[6] = charSequenceArray0[4];
      assertNotNull(charSequenceArray0[6]);
      
      charSequenceArray0[7] = charSequenceArray0[0];
      assertNotNull(charSequenceArray0[7]);
      
      LookupTranslator lookupTranslator0 = new LookupTranslator(charSequenceArray0);
      assertNotNull(lookupTranslator0);
      
      String string2 = lookupTranslator0.translate(charSequenceArray2[5]);
      assertNotNull(string2);
      assertFalse(charSequenceArray2.equals((Object)charSequenceArray1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(charSequenceArray2, charSequenceArray1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("//", string2);
  }

  @Test
  public void test1()  throws Throwable  {
      CharSequence[][] charSequenceArray0 = new CharSequence[1][2];
      CharSequence[] charSequenceArray1 = new CharSequence[10];
      byte[] byteArray0 = new byte[7];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteBuffer0);
      assertEquals(7, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(false, byteBuffer0.isReadOnly());
      assertEquals(7, byteBuffer0.remaining());
      assertEquals(false, byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertEquals(7, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=7 cap=7]", byteBuffer0.toString());
      assertEquals(true, byteBuffer0.hasArray());
      assertEquals(true, byteBuffer0.hasRemaining());
      
      CharBuffer charBuffer0 = byteBuffer0.asCharBuffer();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(charBuffer0);
      assertEquals(3, charBuffer0.limit());
      assertEquals(false, charBuffer0.hasArray());
      assertEquals(3, charBuffer0.remaining());
      assertEquals(true, charBuffer0.hasRemaining());
      assertEquals(false, charBuffer0.isReadOnly());
      assertEquals(3, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals("\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(false, charBuffer0.isDirect());
      assertEquals(7, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(false, byteBuffer0.isReadOnly());
      assertEquals(7, byteBuffer0.remaining());
      assertEquals(false, byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertEquals(7, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=7 cap=7]", byteBuffer0.toString());
      assertEquals(true, byteBuffer0.hasArray());
      assertEquals(true, byteBuffer0.hasRemaining());
      
      charSequenceArray1[0] = (CharSequence) charBuffer0;
      assertNotNull(charSequenceArray1[0]);
      assertEquals(3, charBuffer0.limit());
      assertEquals(false, charBuffer0.hasArray());
      assertEquals(3, charBuffer0.remaining());
      assertEquals(true, charBuffer0.hasRemaining());
      assertEquals(false, charBuffer0.isReadOnly());
      assertEquals(3, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals("\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(false, charBuffer0.isDirect());
      assertEquals(3, charSequenceArray1[0].length());
      assertEquals("\u0000\u0000\u0000", charSequenceArray1[0].toString());
      assertEquals(7, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(false, byteBuffer0.isReadOnly());
      assertEquals(7, byteBuffer0.remaining());
      assertEquals(false, byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertEquals(7, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=7 cap=7]", byteBuffer0.toString());
      assertEquals(true, byteBuffer0.hasArray());
      assertEquals(true, byteBuffer0.hasRemaining());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append(charSequenceArray1[0]);
      assertNotNull(stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter0, stringWriter1);
      assertEquals("\u0000\u0000\u0000", stringWriter1.toString());
      assertEquals("\u0000\u0000\u0000", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      assertNotNull(stringBuffer0);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter0, stringWriter1);
      assertEquals(3, stringBuffer0.length());
      assertEquals("\u0000\u0000\u0000", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000", stringWriter1.toString());
      assertEquals("\u0000\u0000\u0000", stringWriter0.toString());
      
      charSequenceArray0[0] = charSequenceArray1;
      assertNotNull(charSequenceArray0[0]);
      
      LookupTranslator lookupTranslator0 = new LookupTranslator(charSequenceArray0);
      assertNotNull(lookupTranslator0);
      
      String string0 = lookupTranslator0.translate((CharSequence) stringBuffer0);
      assertNotNull(string0);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter0, stringWriter1);
      assertEquals("\u0000\u0000\u0000", string0);
      assertEquals(3, stringBuffer0.length());
      assertEquals("\u0000\u0000\u0000", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000", stringWriter1.toString());
      assertEquals("\u0000\u0000\u0000", stringWriter0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      CharSequence[][] charSequenceArrayArray0 = null;
      LookupTranslator lookupTranslator0 = new LookupTranslator(charSequenceArrayArray0);
      assertNotNull(lookupTranslator0);
  }
}
