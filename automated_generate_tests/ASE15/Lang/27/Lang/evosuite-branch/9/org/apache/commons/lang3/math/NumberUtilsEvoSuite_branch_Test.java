/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:13:17 GMT 2014
 */

package org.apache.commons.lang3.math;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;


public class NumberUtilsEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      String string0 = "0L";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test001()  throws Throwable  {
      String string0 = "l";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test002()  throws Throwable  {
      String string0 = "f";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test003()  throws Throwable  {
      String string0 = "-9.";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test004()  throws Throwable  {
      String string0 = "0";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test005()  throws Throwable  {
      String string0 = "--Strings must not be null";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test006()  throws Throwable  {
      String string0 = "E$!GR,SZ6";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test007()  throws Throwable  {
      String string0 = "eq6";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test008()  throws Throwable  {
      String string0 = "...";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test009()  throws Throwable  {
      String string0 = "..";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test010()  throws Throwable  {
      String string0 = "`PC/IE";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test011()  throws Throwable  {
      String string0 = "-";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test012()  throws Throwable  {
      String string0 = "-0xeq6k_m~7C0Ad/JAf";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test013()  throws Throwable  {
      String string0 = "-0x'N.!5Gx,^72z";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test014()  throws Throwable  {
      String string0 = "0x";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test015()  throws Throwable  {
      String string0 = "0X";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = "-0x0";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test017()  throws Throwable  {
      String string0 = "9+w";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test018()  throws Throwable  {
      String string0 = "D";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test019()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test020()  throws Throwable  {
      String string0 = "-F";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test021()  throws Throwable  {
      byte byte0 = (byte) (-47);
      byte byte1 = (byte)13;
      byte byte2 = NumberUtils.max(byte0, byte0, byte1);
      assertEquals((byte)13, byte2);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
  }

  @Test
  public void test022()  throws Throwable  {
      byte byte0 = (byte)64;
      byte byte1 = (byte)76;
      byte byte2 = NumberUtils.max(byte0, byte1, byte1);
      assertEquals((byte)76, byte2);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
  }

  @Test
  public void test023()  throws Throwable  {
      short short0 = (short) (-4192);
      short short1 = (short)0;
      short short2 = NumberUtils.max(short0, short0, short1);
      assertEquals((short)0, short2);
      assertFalse(short1 == short0);
      assertTrue(short1 == short2);
      assertFalse(short0 == short2);
      assertFalse(short0 == short1);
      assertTrue(short2 == short1);
      assertFalse(short2 == short0);
  }

  @Test
  public void test024()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = (byte) (-8);
      short short0 = NumberUtils.max((short) byte1, (short) byte0, (short) byte0);
      assertEquals((short)0, short0);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
  }

  @Test
  public void test025()  throws Throwable  {
      String string0 = null;
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
      
      short[] shortArray0 = new short[6];
      short short0 = (short)45;
      shortArray0[1] = short0;
      int int1 = NumberUtils.max((int) shortArray0[2], int0, (int) shortArray0[1]);
      assertEquals(45, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertArrayEquals(new short[] {(short)0, (short)45, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test
  public void test026()  throws Throwable  {
      String string0 = null;
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
      
      short[] shortArray0 = new short[6];
      short short0 = (short) (-3411);
      shortArray0[2] = short0;
      int int1 = NumberUtils.max((int) shortArray0[2], int0, (int) shortArray0[3]);
      assertEquals(0, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-3411), (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test
  public void test027()  throws Throwable  {
      short[] shortArray0 = new short[8];
      short short0 = (short)464;
      long long0 = NumberUtils.max((long) shortArray0[0], (long) shortArray0[0], (long) short0);
      assertEquals(464L, long0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test
  public void test028()  throws Throwable  {
      byte byte0 = (byte)87;
      long long0 = (-400L);
      long long1 = NumberUtils.max(long0, (long) byte0, (long) byte0);
      assertEquals(87L, long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test
  public void test029()  throws Throwable  {
      byte byte0 = (byte) (-116);
      byte byte1 = (byte)68;
      byte byte2 = NumberUtils.min(byte1, byte1, byte0);
      assertEquals((byte) (-116), byte2);
      assertTrue(byte2 == byte0);
      assertFalse(byte2 == byte1);
      assertFalse(byte0 == byte1);
      assertTrue(byte0 == byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte1 == byte2);
  }

  @Test
  public void test030()  throws Throwable  {
      byte byte0 = (byte) (-116);
      byte byte1 = (byte)0;
      byte byte2 = NumberUtils.min(byte1, byte0, byte1);
      assertEquals((byte) (-116), byte2);
      assertTrue(byte2 == byte0);
      assertFalse(byte2 == byte1);
      assertFalse(byte0 == byte1);
      assertTrue(byte0 == byte2);
      assertFalse(byte1 == byte2);
      assertFalse(byte1 == byte0);
  }

  @Test
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[28];
      byte byte0 = (byte) (-29);
      short short0 = NumberUtils.min((short) byteArray0[0], (short) byteArray0[0], (short) byte0);
      assertEquals((short) (-29), short0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test032()  throws Throwable  {
      short short0 = (short)2;
      short short1 = (short) (-1135);
      short short2 = NumberUtils.min(short0, short1, short0);
      assertEquals((short) (-1135), short2);
      assertFalse(short2 == short0);
      assertTrue(short2 == short1);
      assertFalse(short1 == short0);
      assertTrue(short1 == short2);
      assertFalse(short0 == short2);
      assertFalse(short0 == short1);
  }

  @Test
  public void test033()  throws Throwable  {
      int int0 = 0;
      int int1 = (-700);
      int int2 = NumberUtils.min(int0, int0, int1);
      assertEquals((-700), int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test
  public void test034()  throws Throwable  {
      byte byte0 = (byte) (-116);
      int int0 = 97;
      int int1 = NumberUtils.min(int0, (int) byte0, int0);
      assertEquals((-116), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test035()  throws Throwable  {
      int[] intArray0 = new int[1];
      byte byte0 = (byte)46;
      long long0 = NumberUtils.min((long) byte0, (long) byte0, (long) intArray0[0]);
      assertEquals(0L, long0);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test
  public void test036()  throws Throwable  {
      String string0 = null;
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
      
      long long0 = (-1L);
      short[] shortArray0 = new short[6];
      long long1 = NumberUtils.min((long) int0, long0, (long) shortArray0[3]);
      assertEquals((-1L), long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test
  public void test037()  throws Throwable  {
      short short0 = (short)1267;
      float[] floatArray0 = new float[9];
      floatArray0[1] = (float) short0;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(1267.0F, float0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1267.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test
  public void test038()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float float0 = Float.NaN;
      floatArray0[5] = float0;
      float float1 = NumberUtils.max(floatArray0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, Float.NaN, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test
  public void test039()  throws Throwable  {
      float[] floatArray0 = null;
      // Undeclared exception!
      try {
        float float0 = NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = (-1596.220780645811);
      doubleArray0[0] = double0;
      double double1 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertArrayEquals(new double[] {(-1596.220780645811), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = Double.NaN;
      doubleArray0[2] = double0;
      double double1 = NumberUtils.max(doubleArray0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test042()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try {
        double double0 = NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[28];
      byte byte0 = (byte)46;
      byteArray0[3] = byte0;
      byte byte1 = NumberUtils.max(byteArray0);
      assertEquals((byte)46, byte1);
      assertTrue(byte1 == byte0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)46, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test044()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short short0 = (short)1267;
      shortArray0[1] = short0;
      short short1 = NumberUtils.max(shortArray0);
      assertEquals((short)1267, short1);
      assertTrue(short1 == short0);
      assertArrayEquals(new short[] {(short)0, (short)1267}, shortArray0);
  }

  @Test
  public void test045()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test046()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
  }

  @Test
  public void test047()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short short0 = (short) (-3411);
      shortArray0[2] = short0;
      shortArray0[5] = shortArray0[2];
      int[] intArray0 = new int[9];
      intArray0[0] = (int) shortArray0[5];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-3411), 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test
  public void test048()  throws Throwable  {
      long[] longArray0 = new long[8];
      long long0 = 2811L;
      longArray0[3] = long0;
      long long1 = NumberUtils.max(longArray0);
      assertEquals(2811L, long1);
      assertTrue(long1 == long0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 2811L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test
  public void test049()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try {
        long long0 = NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test050()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float float0 = 1678.2F;
      floatArray0[0] = float0;
      float float1 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertArrayEquals(new float[] {1678.2F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test
  public void test051()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float float0 = Float.NaN;
      floatArray0[1] = float0;
      float float1 = NumberUtils.min(floatArray0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, Float.NaN, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test
  public void test052()  throws Throwable  {
      float[] floatArray0 = null;
      // Undeclared exception!
      try {
        float float0 = NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      byte byte0 = (byte) (-47);
      doubleArray0[5] = (double) byte0;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-47.0), double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, (-47.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = Double.NaN;
      doubleArray0[3] = double0;
      double double1 = NumberUtils.min(doubleArray0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test055()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try {
        double double0 = NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[28];
      byte byte0 = (byte) (-29);
      byteArray0[6] = byte0;
      byte byte1 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-29), byte1);
      assertTrue(byte1 == byte0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-29), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test057()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = (short)10;
      shortArray0[0] = short0;
      short short1 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short1);
      assertFalse(short1 == short0);
      assertArrayEquals(new short[] {(short)10, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test
  public void test058()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test059()  throws Throwable  {
      int[] intArray0 = new int[10];
      int int0 = 3;
      intArray0[0] = int0;
      int int1 = NumberUtils.min(intArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {3, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test
  public void test060()  throws Throwable  {
      long[] longArray0 = new long[8];
      long long0 = (-975L);
      longArray0[2] = long0;
      long long1 = NumberUtils.min(longArray0);
      assertEquals((-975L), long1);
      assertTrue(long1 == long0);
      assertArrayEquals(new long[] {0L, 0L, (-975L), 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test
  public void test061()  throws Throwable  {
      String string0 = null;
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
      assertNull(bigDecimal0);
  }

  @Test
  public void test062()  throws Throwable  {
      String string0 = null;
      BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
      assertNull(bigInteger0);
  }

  @Test
  public void test063()  throws Throwable  {
      String string0 = null;
      Long long0 = NumberUtils.createLong(string0);
  }

  @Test
  public void test064()  throws Throwable  {
      String string0 = null;
      Integer integer0 = NumberUtils.createInteger(string0);
  }

  @Test
  public void test065()  throws Throwable  {
      String string0 = null;
      Double double0 = NumberUtils.createDouble(string0);
  }

  @Test
  public void test066()  throws Throwable  {
      String string0 = null;
      Float float0 = NumberUtils.createFloat(string0);
  }

  @Test
  public void test067()  throws Throwable  {
      String string0 = "-F76Pm7 ?,8";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"F\"
         //
      }
  }

  @Test
  public void test068()  throws Throwable  {
      String string0 = "0L";
      Long long0 = (Long)NumberUtils.createNumber(string0);
      assertEquals(0L, (long)long0);
  }

  @Test
  public void test069()  throws Throwable  {
      String string0 = "The Array must not be null";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The Array must not be null is not a valid number.
         //
      }
  }

  @Test
  public void test070()  throws Throwable  {
      String string0 = "eq6k_m~7C0Ad/JAf";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // eq6k_m~7C0Ad/JAf is not a valid number.
         //
      }
  }

  @Test
  public void test071()  throws Throwable  {
      String string0 = "InvocCtionTargetException ccurred";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // InvocCtionTargetException ccurred is not a valid number.
         //
      }
  }

  @Test
  public void test072()  throws Throwable  {
      String string0 = "-L";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -L is not a valid number.
         //
      }
  }

  @Test
  public void test073()  throws Throwable  {
      String string0 = "b-F";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // b-F is not a valid number.
         //
      }
  }

  @Test
  public void test074()  throws Throwable  {
      String string0 = "yu#UdlqM`/E";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // yu#UdlqM`/E is not a valid number.
         //
      }
  }

  @Test
  public void test075()  throws Throwable  {
      String string0 = "<A+6/GXak`ELeA_";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // <A+6/GXak`ELeA_ is not a valid number.
         //
      }
  }

  @Test
  public void test076()  throws Throwable  {
      String string0 = "<DerHXtR5";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test077()  throws Throwable  {
      String string0 = "]kxX.`}M!E2NbA:";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ]kxX.`}M!E2NbA: is not a valid number.
         //
      }
  }

  @Test
  public void test078()  throws Throwable  {
      String string0 = "...";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test079()  throws Throwable  {
      String string0 = " is not a valid number.";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         //  is not a valid number. is not a valid number.
         //
      }
  }

  @Test
  public void test080()  throws Throwable  {
      String string0 = "-0X";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
      }
  }

  @Test
  public void test081()  throws Throwable  {
      String string0 = "0XStrings must not be null";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Strings must not be null\"
         //
      }
  }

  @Test
  public void test082()  throws Throwable  {
      String string0 = "-0x0";
      Integer integer0 = (Integer)NumberUtils.createNumber(string0);
      assertEquals(0, (int)integer0);
  }

  @Test
  public void test083()  throws Throwable  {
      String string0 = "0x";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
      }
  }

  @Test
  public void test084()  throws Throwable  {
      String string0 = "--";
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test085()  throws Throwable  {
      String string0 = "";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test086()  throws Throwable  {
      String string0 = null;
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test087()  throws Throwable  {
      String string0 = "D";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // D is not a valid number.
         //
      }
  }

  @Test
  public void test088()  throws Throwable  {
      String string0 = null;
      short short0 = (short)1254;
      short short1 = NumberUtils.toShort(string0, short0);
      assertEquals((short)1254, short1);
      assertTrue(short1 == short0);
      assertTrue(short0 == short1);
  }

  @Test
  public void test089()  throws Throwable  {
      String string0 = null;
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
  }

  @Test
  public void test090()  throws Throwable  {
      String string0 = "";
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test091()  throws Throwable  {
      String string0 = null;
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test092()  throws Throwable  {
      String string0 = "D";
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
      
      long long0 = NumberUtils.toLong(string0, (long) int0);
      assertEquals(0L, long0);
  }

  @Test
  public void test093()  throws Throwable  {
      String string0 = null;
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test094()  throws Throwable  {
      short short0 = (short)0;
      float float0 = NumberUtils.max((float) short0, (float) short0, (float) short0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test095()  throws Throwable  {
      String string0 = null;
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
  }

  @Test
  public void test096()  throws Throwable  {
      String string0 = "-0x0";
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
  }

  @Test
  public void test097()  throws Throwable  {
      byte byte0 = (byte)101;
      float float0 = NumberUtils.min((float) byte0, (float) byte0, (float) byte0);
      assertEquals(101.0F, float0, 0.01F);
  }

  @Test
  public void test098()  throws Throwable  {
      double double0 = 4768.7873;
      short[] shortArray0 = new short[2];
      double double1 = NumberUtils.min(double0, double0, (double) shortArray0[1]);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
  }

  @Test
  public void test099()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      assertNotNull(numberUtils0);
  }

  @Test
  public void test100()  throws Throwable  {
      String string0 = "i?V";
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
  }

  @Test
  public void test101()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short short0 = (short)0;
      double double0 = NumberUtils.max((double) shortArray0[0], (double) short0, (double) short0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
  }

  @Test
  public void test102()  throws Throwable  {
      String string0 = "-F";
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }
}
