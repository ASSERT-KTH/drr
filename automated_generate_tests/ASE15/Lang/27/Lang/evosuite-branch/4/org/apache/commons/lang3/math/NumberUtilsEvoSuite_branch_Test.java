/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:20:03 GMT 2014
 */

package org.apache.commons.lang3.math;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;


public class NumberUtilsEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "H";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "3D";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "-0";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "..";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "--{!?l?t&X}Ck{_|";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "3+LDR";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "4E<)\"I?.n]%PxhP4_>";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "e&6\\;)";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "d";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "-0xdo";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "-0x-0XMinimum abbreviation width with offset is 7";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "-0x";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "0XMinimum abbreiaon width with set is 7";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "0x4E<)\"I?.n]%PxhP4_>";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "-";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "...";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "0xIllegalArgumentException occurred";
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "9<BoDRGkU1djD";
      byte byte0 = (byte) (-120);
      byte byte1 = NumberUtils.toByte(string0, byte0);
      assertEquals((byte) (-120), byte1);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      
      byte byte2 = (byte)2;
      assertFalse(byte2 == byte1);
      
      byte byte3 = NumberUtils.max(byte1, byte1, byte2);
      assertEquals((byte)2, byte3);
      assertTrue(byte1 == byte0);
      assertFalse(byte1 == byte3);
      assertFalse(byte1 == byte2);
      assertTrue(byte3 == byte2);
      assertFalse(byte3 == byte1);
      assertFalse(byte3 == byte0);
      assertFalse(byte0 == byte3);
      assertTrue(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertTrue(byte2 == byte3);
      assertFalse(byte2 == byte1);
      assertFalse(byte2 == byte0);
  }

  @Test
  public void test20()  throws Throwable  {
      byte byte0 = (byte) (-83);
      byte byte1 = (byte) (-61);
      byte byte2 = NumberUtils.max(byte0, byte1, byte0);
      assertEquals((byte) (-61), byte2);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
  }

  @Test
  public void test21()  throws Throwable  {
      short short0 = (short)0;
      short short1 = (short)1358;
      short short2 = NumberUtils.max(short0, short0, short1);
      assertEquals((short)1358, short2);
      assertFalse(short1 == short0);
      assertTrue(short1 == short2);
      assertTrue(short2 == short1);
      assertFalse(short2 == short0);
      assertFalse(short0 == short2);
      assertFalse(short0 == short1);
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "H";
      byte byte0 = (byte) (-83);
      short short0 = NumberUtils.toShort(string0, (short) byte0);
      assertEquals((short) (-83), short0);
      
      short short1 = (short) (-505);
      assertFalse(short1 == short0);
      
      short short2 = NumberUtils.max(short1, short0, short0);
      assertEquals((short) (-83), short2);
      assertFalse(short2 == short1);
      assertTrue(short2 == short0);
      assertFalse(short1 == short0);
      assertFalse(short1 == short2);
      assertTrue(short0 == short2);
      assertFalse(short0 == short1);
  }

  @Test
  public void test23()  throws Throwable  {
      byte byte0 = (byte) (-89);
      short short0 = (short)48;
      int int0 = NumberUtils.max((int) byte0, (int) byte0, (int) short0);
      assertEquals(48, int0);
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = 12;
      int int1 = 2647;
      int int2 = NumberUtils.max(int0, int1, int1);
      assertEquals(2647, int2);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-49);
      byteArray0[0] = byte0;
      int int0 = 0;
      long long0 = NumberUtils.max((long) byte0, (long) byteArray0[0], (long) int0);
      assertEquals(0L, long0);
      assertArrayEquals(new byte[] {(byte) (-49)}, byteArray0);
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = "c.+NO;^#ahc%";
      int int0 = (-1713);
      int int1 = NumberUtils.toInt(string0, int0);
      assertEquals((-1713), int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      long long0 = 0L;
      long long1 = NumberUtils.max((long) int1, long0, long0);
      assertEquals(0L, long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test27()  throws Throwable  {
      byte byte0 = (byte)17;
      byte byte1 = (byte) (-119);
      byte byte2 = NumberUtils.min(byte0, byte0, byte1);
      assertEquals((byte) (-119), byte2);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
  }

  @Test
  public void test28()  throws Throwable  {
      byte byte0 = (byte)1;
      byte byte1 = (byte) (-57);
      byte byte2 = NumberUtils.min(byte0, byte1, byte0);
      assertEquals((byte) (-57), byte2);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
  }

  @Test
  public void test29()  throws Throwable  {
      short short0 = (short)0;
      short short1 = (short) (-2861);
      short short2 = NumberUtils.min(short0, short0, short1);
      assertEquals((short) (-2861), short2);
      assertTrue(short1 == short2);
      assertFalse(short1 == short0);
      assertFalse(short0 == short2);
      assertFalse(short0 == short1);
      assertTrue(short2 == short1);
      assertFalse(short2 == short0);
  }

  @Test
  public void test30()  throws Throwable  {
      short short0 = (short)0;
      short short1 = (short)70;
      short short2 = NumberUtils.min(short1, short0, short1);
      assertEquals((short)0, short2);
      assertTrue(short0 == short2);
      assertFalse(short0 == short1);
      assertFalse(short1 == short2);
      assertFalse(short1 == short0);
      assertFalse(short2 == short1);
      assertTrue(short2 == short0);
  }

  @Test
  public void test31()  throws Throwable  {
      byte byte0 = (byte) (-49);
      int int0 = (-443);
      int int1 = NumberUtils.min((int) byte0, (int) byte0, int0);
      assertEquals((-443), int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test32()  throws Throwable  {
      short short0 = (short)0;
      short short1 = NumberUtils.max(short0, short0, short0);
      assertEquals((short)0, short1);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
      
      byte byte0 = (byte) (-120);
      int int0 = NumberUtils.min((int) short1, (int) byte0, (int) short1);
      assertEquals((-120), int0);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
  }

  @Test
  public void test33()  throws Throwable  {
      long long0 = 213L;
      byte byte0 = (byte) (-47);
      long long1 = NumberUtils.min(long0, (long) byte0, (long) byte0);
      assertEquals((-47L), long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      
      long long2 = NumberUtils.min(long0, long0, long1);
      assertEquals((-47L), long2);
      assertTrue(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
  }

  @Test
  public void test34()  throws Throwable  {
      String string0 = "_<usB)Db%.?.$";
      byte byte0 = (byte)0;
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
      
      byte byte1 = NumberUtils.min(byte0, byte0, byte0);
      assertEquals((byte)0, byte1);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      
      long long0 = NumberUtils.min((long) byte1, (long) short0, (long) byte0);
      assertEquals(0L, long0);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
  }

  @Test
  public void test35()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float float0 = 1.0F;
      floatArray0[3] = float0;
      float float1 = NumberUtils.max(floatArray0);
      assertEquals(1.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test
  public void test36()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float float0 = Float.NaN;
      floatArray0[5] = float0;
      float float1 = NumberUtils.max(floatArray0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, Float.NaN, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test
  public void test37()  throws Throwable  {
      byte byte0 = (byte)18;
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = (double) byte0;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(18.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 18.0}, doubleArray0, 0.01);
  }

  @Test
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = Double.NaN;
      doubleArray0[2] = double0;
      double double1 = NumberUtils.max(doubleArray0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte)52;
      byteArray0[1] = byte0;
      byte byte1 = NumberUtils.max(byteArray0);
      assertEquals((byte)52, byte1);
      assertTrue(byte1 == byte0);
      assertArrayEquals(new byte[] {(byte)0, (byte)52, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test40()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short short0 = (short)1657;
      shortArray0[3] = short0;
      short short1 = NumberUtils.max(shortArray0);
      assertEquals((short)1657, short1);
      assertTrue(short1 == short0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)1657, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test
  public void test41()  throws Throwable  {
      byte byte0 = (byte) (-83);
      int[] intArray0 = new int[6];
      intArray0[0] = (int) byte0;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-83), 0, 0, 0, 0, 0}, intArray0);
  }

  @Test
  public void test42()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test43()  throws Throwable  {
      short short0 = (short)123;
      long[] longArray0 = new long[3];
      longArray0[2] = (long) short0;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(123L, long0);
      assertArrayEquals(new long[] {0L, 0L, 123L}, longArray0);
  }

  @Test
  public void test44()  throws Throwable  {
      float[] floatArray0 = new float[10];
      float float0 = (-2922.9731F);
      floatArray0[3] = float0;
      float float1 = NumberUtils.min(floatArray0);
      assertEquals((-2922.9731F), float1, 0.01F);
      assertTrue(float1 == float0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-2922.9731F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test
  public void test45()  throws Throwable  {
      float[] floatArray0 = new float[10];
      float float0 = Float.NaN;
      floatArray0[9] = float0;
      float float1 = NumberUtils.min(floatArray0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, Float.NaN}, floatArray0, 0.01F);
  }

  @Test
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = (-43.60990027);
      doubleArray0[3] = double0;
      double double1 = NumberUtils.min(doubleArray0);
      assertEquals((-43.60990027), double1, 0.01D);
      assertTrue(double1 == double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-43.60990027), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = Double.NaN;
      doubleArray0[4] = double0;
      double double1 = NumberUtils.min(doubleArray0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-5);
      byteArray0[3] = byte0;
      byte byte1 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-5), byte1);
      assertTrue(byte1 == byte0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-5)}, byteArray0);
  }

  @Test
  public void test49()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short short0 = (short) (-86);
      shortArray0[1] = short0;
      short short1 = NumberUtils.min(shortArray0);
      assertEquals((short) (-86), short1);
      assertTrue(short1 == short0);
      assertArrayEquals(new short[] {(short)0, (short) (-86)}, shortArray0);
  }

  @Test
  public void test50()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test51()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
  }

  @Test
  public void test52()  throws Throwable  {
      byte byte0 = (byte)40;
      byte byte1 = NumberUtils.min(byte0, byte0, byte0);
      assertEquals((byte)40, byte1);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) byte1;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {40, 0, 0, 0, 0}, intArray0);
  }

  @Test
  public void test53()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test54()  throws Throwable  {
      long[] longArray0 = new long[9];
      long long0 = (-2998L);
      longArray0[3] = long0;
      long long1 = NumberUtils.min(longArray0);
      assertEquals((-2998L), long1);
      assertTrue(long1 == long0);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-2998L), 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test
  public void test55()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try {
        BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test56()  throws Throwable  {
      String string0 = null;
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
      assertNull(bigDecimal0);
  }

  @Test
  public void test57()  throws Throwable  {
      String string0 = null;
      BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
      assertNull(bigInteger0);
  }

  @Test
  public void test58()  throws Throwable  {
      String string0 = null;
      Long long0 = NumberUtils.createLong(string0);
  }

  @Test
  public void test59()  throws Throwable  {
      String string0 = null;
      Integer integer0 = NumberUtils.createInteger(string0);
  }

  @Test
  public void test60()  throws Throwable  {
      String string0 = null;
      Double double0 = NumberUtils.createDouble(string0);
  }

  @Test
  public void test61()  throws Throwable  {
      String string0 = null;
      Float float0 = NumberUtils.createFloat(string0);
  }

  @Test
  public void test62()  throws Throwable  {
      String string0 = "K#)7(Iapdk_V3d;5U1";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"K#)7(Iapd\"
         //
      }
  }

  @Test
  public void test63()  throws Throwable  {
      String string0 = "java.text.Normalizer is not availabl";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // java.text.Normalizer is not availabl is not a valid number.
         //
      }
  }

  @Test
  public void test64()  throws Throwable  {
      String string0 = "Strings must not be null";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Strings must not be null is not a valid number.
         //
      }
  }

  @Test
  public void test65()  throws Throwable  {
      String string0 = "IllegalArgumentException occurred";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // IllegalArgumentException occurred is not a valid number.
         //
      }
  }

  @Test
  public void test66()  throws Throwable  {
      String string0 = "AJqQ6cO8jRXxMm}L";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // AJqQ6cO8jRXxMm}L is not a valid number.
         //
      }
  }

  @Test
  public void test67()  throws Throwable  {
      String string0 = "PF";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // PF is not a valid number.
         //
      }
  }

  @Test
  public void test68()  throws Throwable  {
      String string0 = "9<BoDRGkU1djD";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 9<BoDRGkU1djD is not a valid number.
         //
      }
  }

  @Test
  public void test69()  throws Throwable  {
      String string0 = "fj[}i{-0cWiE";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // fj[}i{-0cWiE is not a valid number.
         //
      }
  }

  @Test
  public void test70()  throws Throwable  {
      String string0 = ">PeA}KBs h (5FmE";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // >PeA}KBs h (5FmE is not a valid number.
         //
      }
  }

  @Test
  public void test71()  throws Throwable  {
      String string0 = "Minimum abbreiaon width with set is 7";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test72()  throws Throwable  {
      String string0 = "4E<)\"I?.n]%PxhP4_>";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 4E<)\"I?.n]%PxhP4_> is not a valid number.
         //
      }
  }

  @Test
  public void test73()  throws Throwable  {
      String string0 = "...";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test74()  throws Throwable  {
      String string0 = "-0XMinimum abbreviation width with offset is 7";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-Minimum abbreviation width with offset is 7\"
         //
      }
  }

  @Test
  public void test75()  throws Throwable  {
      String string0 = "-0xdo";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-do\"
         //
      }
  }

  @Test
  public void test76()  throws Throwable  {
      String string0 = "0xIllegalArgumentException occurred";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"IllegalArgumentException occurred\"
         //
      }
  }

  @Test
  public void test77()  throws Throwable  {
      String string0 = "--lF3lGf?a{m^3FP";
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test78()  throws Throwable  {
      String string0 = "";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test79()  throws Throwable  {
      String string0 = null;
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test80()  throws Throwable  {
      String string0 = "0X";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
      }
  }

  @Test
  public void test81()  throws Throwable  {
      String string0 = null;
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
  }

  @Test
  public void test82()  throws Throwable  {
      String string0 = null;
      byte byte0 = (byte)40;
      byte byte1 = NumberUtils.min(byte0, byte0, byte0);
      assertEquals((byte)40, byte1);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      
      byte byte2 = NumberUtils.toByte(string0, byte1);
      assertEquals((byte)40, byte2);
      assertTrue(byte0 == byte1);
      assertTrue(byte0 == byte2);
      assertTrue(byte2 == byte1);
      assertTrue(byte2 == byte0);
      assertTrue(byte1 == byte0);
      assertTrue(byte1 == byte2);
  }

  @Test
  public void test83()  throws Throwable  {
      String string0 = null;
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test84()  throws Throwable  {
      String string0 = null;
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test85()  throws Throwable  {
      String string0 = null;
      byte byte0 = (byte) (-83);
      long long0 = NumberUtils.toLong(string0, (long) byte0);
      assertEquals((-83L), long0);
  }

  @Test
  public void test86()  throws Throwable  {
      String string0 = "--lFf?a(m^3FP";
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
  }

  @Test
  public void test87()  throws Throwable  {
      String string0 = "";
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test88()  throws Throwable  {
      String string0 = "_<usB)Db%.?.$";
      byte byte0 = (byte)0;
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
      
      float float0 = NumberUtils.max((float) short0, (float) byte0, (float) short0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test89()  throws Throwable  {
      String string0 = "?";
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
  }

  @Test
  public void test90()  throws Throwable  {
      String string0 = "3D";
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
  }

  @Test
  public void test91()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = NumberUtils.min(float0, float0, float0);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test
  public void test92()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 1171.843;
      double double1 = NumberUtils.min(double0, double0, doubleArray0[2]);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test93()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      assertNotNull(numberUtils0);
  }

  @Test
  public void test94()  throws Throwable  {
      byte byte0 = (byte)40;
      byte byte1 = NumberUtils.min(byte0, byte0, byte0);
      assertEquals((byte)40, byte1);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      
      double double0 = NumberUtils.max((double) byte1, (double) byte1, (double) byte0);
      assertEquals(40.0, double0, 0.01D);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
  }

  @Test
  public void test95()  throws Throwable  {
      String string0 = "H";
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test96()  throws Throwable  {
      String string0 = null;
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
  }
}
