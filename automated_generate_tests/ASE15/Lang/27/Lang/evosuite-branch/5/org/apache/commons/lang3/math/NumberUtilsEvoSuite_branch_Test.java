/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:30:36 GMT 2014
 */

package org.apache.commons.lang3.math;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;


public class NumberUtilsEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "d";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = ".";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "0Xjava.txt.NormVlizer is not available";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "EXU{pu<S6=[t9";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "...";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "..";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "e @+/q[@rj\\8.Kh";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "-";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "0x{d>QM+Sf|\\_=Awgmh[";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "0x0[92Tf;hB/!XA3/t|3";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "0xA blank string is not a valid number";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "0xd>QM+Sf|\\_=Awgmh[";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "0x";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "-0b";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "-0";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "--u|#O";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "+'V8j2f!blt6";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "4";
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      byte byte0 = (byte) (-9);
      byte byte1 = (byte)32;
      byte byte2 = NumberUtils.max(byte0, byte1, byte1);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertEquals((byte)32, byte2);
  }

  @Test
  public void test21()  throws Throwable  {
      short short0 = (short)847;
      short short1 = (short)1502;
      short short2 = NumberUtils.max(short0, short0, short1);
      assertFalse(short0 == short1);
      assertFalse(short0 == short2);
      assertTrue(short1 == short2);
      assertFalse(short1 == short0);
      assertTrue(short2 == short1);
      assertFalse(short2 == short0);
      assertEquals((short)1502, short2);
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = ",T(i3Eh+yz.SK";
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
      
      short short0 = (short)193;
      short short1 = NumberUtils.max((short) byte0, short0, (short) byte0);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
      assertEquals((short)193, short1);
  }

  @Test
  public void test23()  throws Throwable  {
      int int0 = (-1188);
      byte byte0 = (byte)27;
      int int1 = NumberUtils.max(int0, int0, (int) byte0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(27, int1);
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = (-73);
      int int1 = 69;
      int int2 = NumberUtils.max(int0, int1, int1);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(69, int2);
  }

  @Test
  public void test25()  throws Throwable  {
      long[] longArray0 = new long[9];
      long long0 = (-1L);
      longArray0[3] = long0;
      String string0 = "";
      int int0 = 0;
      int int1 = NumberUtils.toInt(string0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0, int1);
      
      long long1 = NumberUtils.max(longArray0[3], longArray0[3], (long) int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-1L), 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test
  public void test26()  throws Throwable  {
      byte byte0 = (byte)27;
      byte byte1 = (byte)0;
      long long0 = NumberUtils.max((long) byte1, (long) byte0, (long) byte0);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals(27L, long0);
  }

  @Test
  public void test27()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = (byte) (-34);
      byte byte2 = NumberUtils.min(byte0, byte0, byte1);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertEquals((byte) (-34), byte2);
  }

  @Test
  public void test28()  throws Throwable  {
      short short0 = (short)0;
      short short1 = (short) (-1302);
      short short2 = NumberUtils.min(short0, short0, short1);
      assertFalse(short1 == short0);
      assertTrue(short1 == short2);
      assertFalse(short2 == short0);
      assertTrue(short2 == short1);
      assertFalse(short0 == short2);
      assertFalse(short0 == short1);
      assertEquals((short) (-1302), short2);
  }

  @Test
  public void test29()  throws Throwable  {
      short short0 = (short)2;
      short short1 = (short) (-1);
      short short2 = NumberUtils.min(short0, short1, short1);
      assertFalse(short0 == short1);
      assertFalse(short0 == short2);
      assertFalse(short1 == short0);
      assertTrue(short1 == short2);
      assertFalse(short2 == short0);
      assertTrue(short2 == short1);
      assertEquals((short) (-1), short2);
  }

  @Test
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)120;
      int int0 = (-911);
      int int1 = NumberUtils.min((int) byteArray0[0], (int) byte0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals((-911), int1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)120;
      int int0 = NumberUtils.min((int) byte0, (int) byteArray0[0], (int) byteArray0[0]);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test32()  throws Throwable  {
      short short0 = (short)108;
      short short1 = (short)102;
      short short2 = NumberUtils.max(short0, short0, short1);
      assertFalse(short2 == short1);
      assertTrue(short2 == short0);
      assertFalse(short1 == short0);
      assertFalse(short1 == short2);
      assertFalse(short0 == short1);
      assertTrue(short0 == short2);
      assertEquals((short)108, short2);
      
      long long0 = NumberUtils.min((long) short2, (long) short0, (long) short1);
      assertFalse(short2 == short1);
      assertTrue(short2 == short0);
      assertFalse(short1 == short0);
      assertFalse(short1 == short2);
      assertFalse(short0 == short1);
      assertTrue(short0 == short2);
      assertEquals(102L, long0);
  }

  @Test
  public void test33()  throws Throwable  {
      short short0 = (short)108;
      short short1 = (short)3349;
      short short2 = NumberUtils.max(short1, short1, short1);
      assertFalse(short1 == short0);
      assertTrue(short1 == short2);
      assertTrue(short2 == short1);
      assertFalse(short2 == short0);
      assertEquals((short)3349, short2);
      
      long long0 = NumberUtils.min((long) short2, (long) short0, (long) short0);
      assertFalse(short1 == short0);
      assertTrue(short1 == short2);
      assertTrue(short2 == short1);
      assertFalse(short2 == short0);
      assertFalse(short0 == short1);
      assertFalse(short0 == short2);
      assertEquals(108L, long0);
  }

  @Test
  public void test34()  throws Throwable  {
      float[] floatArray0 = new float[7];
      float float0 = (-33.030113F);
      floatArray0[0] = float0;
      float float1 = NumberUtils.max(floatArray0);
      assertFalse(float1 == float0);
      assertEquals(0.0F, float1, 0.01F);
      assertArrayEquals(new float[] {(-33.030113F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test
  public void test35()  throws Throwable  {
      float[] floatArray0 = new float[7];
      float float0 = Float.NaN;
      floatArray0[5] = float0;
      float float1 = NumberUtils.max(floatArray0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, Float.NaN, 0.0F}, floatArray0, 0.01F);
  }

  @Test
  public void test36()  throws Throwable  {
      byte byte0 = (byte)120;
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) byte0;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(120.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 120.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = Double.NaN;
      doubleArray0[5] = double0;
      double double1 = NumberUtils.max(doubleArray0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test38()  throws Throwable  {
      byte byte0 = (byte)108;
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = byte0;
      byte byte1 = NumberUtils.max(byteArray0);
      assertTrue(byte1 == byte0);
      assertEquals((byte)108, byte1);
      assertArrayEquals(new byte[] {(byte)0, (byte)108, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test39()  throws Throwable  {
      byte byte0 = (byte)45;
      byte byte1 = (byte) (-106);
      byte byte2 = NumberUtils.min(byte0, byte1, byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertEquals((byte) (-106), byte2);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) byte2;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
      assertArrayEquals(new short[] {(short) (-106), (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test
  public void test40()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test41()  throws Throwable  {
      int int0 = 2813;
      int[] intArray0 = new int[6];
      intArray0[5] = int0;
      int int1 = NumberUtils.max(intArray0);
      assertTrue(int1 == int0);
      assertEquals(2813, int1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 2813}, intArray0);
  }

  @Test
  public void test42()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short short0 = (short)5;
      shortArray0[3] = short0;
      long[] longArray0 = new long[3];
      longArray0[1] = (long) shortArray0[3];
      long long0 = NumberUtils.max(longArray0);
      assertEquals(5L, long0);
      assertArrayEquals(new long[] {0L, 5L, 0L}, longArray0);
  }

  @Test
  public void test43()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try {
        long long0 = NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test44()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float float0 = (-1.0F);
      floatArray0[2] = float0;
      float float1 = NumberUtils.min(floatArray0);
      assertTrue(float1 == float0);
      assertEquals((-1.0F), float1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test
  public void test45()  throws Throwable  {
      float[] floatArray0 = new float[7];
      float float0 = Float.NaN;
      floatArray0[5] = float0;
      float float1 = NumberUtils.min(floatArray0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, Float.NaN, 0.0F}, floatArray0, 0.01F);
  }

  @Test
  public void test46()  throws Throwable  {
      float[] floatArray0 = null;
      // Undeclared exception!
      try {
        float float0 = NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test47()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = (byte)69;
      byte byte2 = NumberUtils.max(byte0, byte0, byte1);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertEquals((byte)69, byte2);
      
      double[] doubleArray0 = new double[29];
      doubleArray0[0] = (double) byte2;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {69.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test48()  throws Throwable  {
      float float0 = 0.0F;
      String string0 = ",T(i3Eh+yz.SK";
      byte byte0 = NumberUtils.toByte(string0);
      //  // Unstable assertion: assertEquals((byte)0, byte0);
      
      float float1 = Float.NaN;
      float float2 = NumberUtils.min(float0, (float) byte0, float1);
      //  // Unstable assertion: assertFalse(float2 == float0);
      //  // Unstable assertion: assertTrue(float2 == float1);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertTrue(float1 == float2);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertFalse(float0 == float2);
      //  // Unstable assertion: assertEquals(Float.NaN, float2, 0.01F);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) float2;
      double double0 = NumberUtils.min(doubleArray0);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test49()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try {
        double double0 = NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)120;
      byteArray0[0] = byte0;
      byte byte1 = NumberUtils.min(byteArray0);
      assertFalse(byte1 == byte0);
      assertEquals((byte)0, byte1);
      assertArrayEquals(new byte[] {(byte)120, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test51()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short short0 = (short) (-8);
      shortArray0[2] = short0;
      short short1 = NumberUtils.min(shortArray0);
      assertTrue(short1 == short0);
      assertEquals((short) (-8), short1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-8), (short)0}, shortArray0);
  }

  @Test
  public void test52()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test53()  throws Throwable  {
      short short0 = (short) (-1290);
      int[] intArray0 = new int[9];
      intArray0[3] = (int) short0;
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-1290), int0);
      assertArrayEquals(new int[] {0, 0, 0, (-1290), 0, 0, 0, 0, 0}, intArray0);
  }

  @Test
  public void test54()  throws Throwable  {
      long[] longArray0 = new long[9];
      long long0 = (-1L);
      longArray0[3] = long0;
      long long1 = NumberUtils.min(longArray0);
      assertTrue(long1 == long0);
      assertEquals((-1L), long1);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-1L), 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test
  public void test55()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try {
        long long0 = NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test56()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try {
        BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test57()  throws Throwable  {
      String string0 = null;
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
      assertNull(bigDecimal0);
  }

  @Test
  public void test58()  throws Throwable  {
      String string0 = null;
      BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
      assertNull(bigInteger0);
  }

  @Test
  public void test59()  throws Throwable  {
      String string0 = null;
      Long long0 = NumberUtils.createLong(string0);
  }

  @Test
  public void test60()  throws Throwable  {
      String string0 = "0[92;hB/!XA3/t|3";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"[92;hB\"
         //
      }
  }

  @Test
  public void test61()  throws Throwable  {
      String string0 = null;
      Integer integer0 = NumberUtils.createInteger(string0);
  }

  @Test
  public void test62()  throws Throwable  {
      String string0 = null;
      Double double0 = NumberUtils.createDouble(string0);
  }

  @Test
  public void test63()  throws Throwable  {
      String string0 = null;
      Float float0 = NumberUtils.createFloat(string0);
  }

  @Test
  public void test64()  throws Throwable  {
      String string0 = "0.";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test
  public void test65()  throws Throwable  {
      String string0 = "[? ,Eg`0";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test66()  throws Throwable  {
      String string0 = "vtr1ngs must not be null";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // vtr1ngs must not be null is not a valid number.
         //
      }
  }

  @Test
  public void test67()  throws Throwable  {
      String string0 = "CBv&yFkL$y&cnL";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // CBv&yFkL$y&cnL is not a valid number.
         //
      }
  }

  @Test
  public void test68()  throws Throwable  {
      String string0 = "0D";
      BigDecimal bigDecimal0 = (BigDecimal)NumberUtils.createNumber(string0);
      assertNotNull(bigDecimal0);
      assertEquals(0, bigDecimal0.byteValue());
      assertEquals(0, bigDecimal0.shortValue());
  }

  @Test
  public void test69()  throws Throwable  {
      String string0 = "0.#!";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0.#! is not a valid number.
         //
      }
  }

  @Test
  public void test70()  throws Throwable  {
      String string0 = "8y1>D&e";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 8y1>D&e is not a valid number.
         //
      }
  }

  @Test
  public void test71()  throws Throwable  {
      String string0 = "JtcDUc6iE2A@eyGOX";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // JtcDUc6iE2A@eyGOX is not a valid number.
         //
      }
  }

  @Test
  public void test72()  throws Throwable  {
      String string0 = "IllegalArgumentException occurred";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // IllegalArgumentException occurred is not a valid number.
         //
      }
  }

  @Test
  public void test73()  throws Throwable  {
      String string0 = "java.txt.NormVlizer is not available";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // java.txt.NormVlizer is not available is not a valid number.
         //
      }
  }

  @Test
  public void test74()  throws Throwable  {
      String string0 = ",T(i3Eh+yz.SK";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ,T(i3Eh+yz.SK is not a valid number.
         //
      }
  }

  @Test
  public void test75()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.math.NumberUtEls";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // org.apache.commons.lang3.math.NumberUtEls is not a valid number.
         //
      }
  }

  @Test
  public void test76()  throws Throwable  {
      String string0 = "...";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test77()  throws Throwable  {
      String string0 = "-0X";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
      }
  }

  @Test
  public void test78()  throws Throwable  {
      String string0 = "-0xMinimum abbreviation width is 4";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-Minimum abbreviation width is 4\"
         //
      }
  }

  @Test
  public void test79()  throws Throwable  {
      String string0 = "0xN";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"N\"
         //
      }
  }

  @Test
  public void test80()  throws Throwable  {
      String string0 = "--0Xorg.apache.commons.lang3.math.NumberUtil";
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test81()  throws Throwable  {
      String string0 = " ";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test82()  throws Throwable  {
      String string0 = null;
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test83()  throws Throwable  {
      String string0 = "0Xorg.apache.commons.lang3.math.NumberUtil";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.apache.commons.lang3.math.NumberUtil\"
         //
      }
  }

  @Test
  public void test84()  throws Throwable  {
      String string0 = "0Xorg.apache.commons.lang3.math.NumberUtil";
      short short0 = (short) (-3005);
      short short1 = NumberUtils.toShort(string0, short0);
      assertTrue(short1 == short0);
      assertTrue(short0 == short1);
      assertEquals((short) (-3005), short1);
  }

  @Test
  public void test85()  throws Throwable  {
      String string0 = null;
      byte byte0 = (byte) (-9);
      byte byte1 = NumberUtils.toByte(string0, byte0);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      assertEquals((byte) (-9), byte1);
  }

  @Test
  public void test86()  throws Throwable  {
      byte byte0 = (byte)120;
      String string0 = null;
      double double0 = NumberUtils.toDouble(string0, (double) byte0);
      assertEquals(120.0, double0, 0.01D);
  }

  @Test
  public void test87()  throws Throwable  {
      String string0 = null;
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test88()  throws Throwable  {
      String string0 = null;
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
  }

  @Test
  public void test89()  throws Throwable  {
      String string0 = null;
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
  }

  @Test
  public void test90()  throws Throwable  {
      String string0 = "bek&W0;nP5z|= 2{";
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test91()  throws Throwable  {
      int int0 = (-1188);
      float float0 = NumberUtils.max((float) int0, (float) int0, (float) int0);
      assertEquals((-1188.0F), float0, 0.01F);
  }

  @Test
  public void test92()  throws Throwable  {
      String string0 = "bek&W0;nP5z|= 2{";
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
  }

  @Test
  public void test93()  throws Throwable  {
      byte byte0 = (byte)45;
      byte byte1 = NumberUtils.min(byte0, byte0, byte0);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      assertEquals((byte)45, byte1);
      
      double double0 = NumberUtils.min((double) byte0, (double) byte0, (double) byte1);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      assertEquals(45.0, double0, 0.01D);
  }

  @Test
  public void test94()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      assertNotNull(numberUtils0);
  }

  @Test
  public void test95()  throws Throwable  {
      String string0 = null;
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
  }

  @Test
  public void test96()  throws Throwable  {
      long long0 = 0L;
      double double0 = NumberUtils.max((double) long0, (double) long0, (double) long0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test97()  throws Throwable  {
      String string0 = "..";
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }
}
