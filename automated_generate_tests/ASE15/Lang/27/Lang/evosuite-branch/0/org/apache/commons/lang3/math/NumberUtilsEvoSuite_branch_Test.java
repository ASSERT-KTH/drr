/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:37:28 GMT 2014
 */

package org.apache.commons.lang3.math;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;




import org.junit.runner.RunWith;


public class NumberUtilsEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      String string0 = "L";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test001()  throws Throwable  {
      String string0 = "l";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test002()  throws Throwable  {
      String string0 = "F";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test003()  throws Throwable  {
      String string0 = "f";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test004()  throws Throwable  {
      String string0 = "D";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test005()  throws Throwable  {
      String string0 = "-E";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test006()  throws Throwable  {
      String string0 = "0";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test007()  throws Throwable  {
      String string0 = "----";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test008()  throws Throwable  {
      String string0 = "4+<aIDGD@p%K";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test009()  throws Throwable  {
      String string0 = "E9?9bUfe.'w$&BB>";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test010()  throws Throwable  {
      String string0 = "ez^[=W";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test011()  throws Throwable  {
      String string0 = ".\\MrF";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test012()  throws Throwable  {
      String string0 = "...";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test013()  throws Throwable  {
      String string0 = "-";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test014()  throws Throwable  {
      String string0 = "0x0xThe Array must not be null";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test015()  throws Throwable  {
      String string0 = "-0x0";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = "0x";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test017()  throws Throwable  {
      String string0 = "0x8a.text.Nomaizeris nt avaible";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test018()  throws Throwable  {
      String string0 = "t";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test019()  throws Throwable  {
      String string0 = "-0X";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test020()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test021()  throws Throwable  {
      String string0 = "2.";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test022()  throws Throwable  {
      String string0 = "0";
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test023()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test024()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = (byte)22;
      byte byte2 = NumberUtils.max(byte0, byte0, byte1);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertEquals((byte)22, byte2);
  }

  @Test
  public void test025()  throws Throwable  {
      byte byte0 = (byte) (-9);
      byte byte1 = (byte)0;
      byte byte2 = NumberUtils.max(byte0, byte1, byte0);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertEquals((byte)0, byte2);
  }

  @Test
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte) (-56);
      byteArray0[8] = byte0;
      short short0 = NumberUtils.max((short) byteArray0[8], (short) byteArray0[8], (short) byteArray0[1]);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-56), (byte)0}, byteArray0);
      assertEquals((short)0, short0);
  }

  @Test
  public void test027()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = NumberUtils.max(byte0, byte0, byte0);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      assertEquals((byte)0, byte1);
      
      short short0 = (short)1409;
      short short1 = NumberUtils.max((short) byte1, short0, (short) byte1);
      assertTrue(short1 == short0);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      assertTrue(short0 == short1);
      assertEquals((short)1409, short1);
  }

  @Test
  public void test028()  throws Throwable  {
      String string0 = "-0x";
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
      
      int int0 = 443;
      int int1 = NumberUtils.max((int) byte0, (int) byte0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(443, int1);
  }

  @Test
  public void test029()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short short0 = (short)0;
      short short1 = (short)1;
      shortArray0[2] = short1;
      int int0 = NumberUtils.max((int) short0, (int) shortArray0[2], (int) shortArray0[2]);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)1}, shortArray0);
      assertFalse(short0 == short1);
      assertEquals(1, int0);
  }

  @Test
  public void test030()  throws Throwable  {
      int int0 = 1462;
      long long0 = 0L;
      long long1 = NumberUtils.max(long0, long0, (long) int0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(1462L, long1);
  }

  @Test
  public void test031()  throws Throwable  {
      int int0 = 1462;
      long long0 = 0L;
      long long1 = NumberUtils.max(long0, (long) int0, (long) int0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(1462L, long1);
  }

  @Test
  public void test032()  throws Throwable  {
      byte byte0 = (byte)77;
      byte byte1 = (byte)0;
      byte byte2 = NumberUtils.min(byte0, byte0, byte1);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertEquals((byte)0, byte2);
  }

  @Test
  public void test033()  throws Throwable  {
      byte byte0 = (byte)77;
      byte byte1 = (byte)46;
      byte byte2 = NumberUtils.min(byte0, byte1, byte0);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertEquals((byte)46, byte2);
  }

  @Test
  public void test034()  throws Throwable  {
      byte byte0 = (byte)97;
      short short0 = (short) (-7);
      short short1 = NumberUtils.min((short) byte0, (short) byte0, short0);
      assertTrue(short1 == short0);
      assertTrue(short0 == short1);
      assertEquals((short) (-7), short1);
  }

  @Test
  public void test035()  throws Throwable  {
      short short0 = (short)1151;
      short short1 = (short)0;
      short short2 = NumberUtils.min(short0, short1, short1);
      assertFalse(short2 == short0);
      assertTrue(short2 == short1);
      assertFalse(short0 == short1);
      assertFalse(short0 == short2);
      assertTrue(short1 == short2);
      assertFalse(short1 == short0);
      assertEquals((short)0, short2);
  }

  @Test
  public void test036()  throws Throwable  {
      byte byte0 = (byte)108;
      byte byte1 = NumberUtils.max(byte0, byte0, byte0);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      assertEquals((byte)108, byte1);
      
      int int0 = 0;
      int int1 = NumberUtils.min((int) byte1, (int) byte1, int0);
      assertTrue(byte1 == byte0);
      assertTrue(int0 == int1);
      assertTrue(byte0 == byte1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test
  public void test037()  throws Throwable  {
      int int0 = 1371;
      int int1 = (-2159);
      int int2 = NumberUtils.min(int0, int1, int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-2159), int2);
  }

  @Test
  public void test038()  throws Throwable  {
      byte byte0 = (byte) (-47);
      byte byte1 = (byte)56;
      long long0 = NumberUtils.min((long) byte1, (long) byte1, (long) byte0);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals((-47L), long0);
  }

  @Test
  public void test039()  throws Throwable  {
      int int0 = 10;
      int int1 = NumberUtils.min(int0, int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(10, int1);
      
      byte byte0 = (byte) (-9);
      byte byte1 = NumberUtils.max(byte0, byte0, byte0);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      assertEquals((byte) (-9), byte1);
      
      long long0 = NumberUtils.min((long) int1, (long) byte1, (long) int0);
      assertTrue(byte1 == byte0);
      assertTrue(int0 == int1);
      assertTrue(byte0 == byte1);
      assertTrue(int1 == int0);
      assertEquals((-9L), long0);
  }

  @Test
  public void test040()  throws Throwable  {
      long long0 = 941L;
      float[] floatArray0 = new float[8];
      floatArray0[5] = (float) long0;
      float float0 = NumberUtils.max(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 941.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(941.0F, float0, 0.01F);
  }

  @Test
  public void test041()  throws Throwable  {
      float[] floatArray0 = new float[10];
      float float0 = Float.NaN;
      floatArray0[4] = float0;
      float float1 = NumberUtils.max(floatArray0);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, Float.NaN, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test
  public void test042()  throws Throwable  {
      float float0 = 1404.1F;
      double[] doubleArray0 = new double[7];
      doubleArray0[4] = (double) float0;
      double double0 = NumberUtils.max(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1404.0999755859375, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1404.0999755859375, double0, 0.01D);
  }

  @Test
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = Double.NaN;
      doubleArray0[7] = double0;
      double double1 = NumberUtils.max(doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.NaN}, doubleArray0, 0.01);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)13;
      byteArray0[1] = byte0;
      byte byte1 = NumberUtils.max(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)13, (byte)0}, byteArray0);
      assertTrue(byte1 == byte0);
      assertEquals((byte)13, byte1);
  }

  @Test
  public void test045()  throws Throwable  {
      short short0 = (short) (-1336);
      short[] shortArray0 = new short[7];
      shortArray0[0] = short0;
      short short1 = NumberUtils.max(shortArray0);
      assertArrayEquals(new short[] {(short) (-1336), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(short1 == short0);
      assertEquals((short)0, short1);
  }

  @Test
  public void test046()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test047()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = (-1665);
      intArray0[0] = int0;
      int int1 = NumberUtils.max(intArray0);
      assertArrayEquals(new int[] {(-1665), 0}, intArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test
  public void test048()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = NumberUtils.max(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(0, int0);
  }

  @Test
  public void test049()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test050()  throws Throwable  {
      long[] longArray0 = new long[8];
      long long0 = 2011L;
      longArray0[3] = long0;
      long long1 = NumberUtils.max(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 2011L, 0L, 0L, 0L, 0L}, longArray0);
      assertTrue(long1 == long0);
      assertEquals(2011L, long1);
  }

  @Test
  public void test051()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try {
        long long0 = NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test052()  throws Throwable  {
      int int0 = 1462;
      int int1 = NumberUtils.min(int0, int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(1462, int1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) int1;
      float float0 = NumberUtils.min(floatArray0);
      assertArrayEquals(new float[] {1462.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test053()  throws Throwable  {
      float float0 = Float.NaN;
      float[] floatArray0 = new float[7];
      floatArray0[2] = float0;
      float float1 = NumberUtils.min(floatArray0);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, Float.NaN, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = (-1.0);
      doubleArray0[4] = double0;
      double double1 = NumberUtils.min(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(double1 == double0);
      assertEquals((-1.0), double1, 0.01D);
  }

  @Test
  public void test055()  throws Throwable  {
      int int0 = 1462;
      float float0 = Float.NaN;
      float float1 = NumberUtils.max((float) int0, float0, (float) int0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[6] = (double) float1;
      double double0 = NumberUtils.min(doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test056()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try {
        double double0 = NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte) (-1);
      byteArray0[1] = byte0;
      byte byte1 = NumberUtils.min(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(byte1 == byte0);
      assertEquals((byte) (-1), byte1);
  }

  @Test
  public void test058()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try {
        byte byte0 = NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test059()  throws Throwable  {
      String string0 = null;
      short[] shortArray0 = new short[3];
      short short0 = (short)23;
      short short1 = NumberUtils.toShort(string0, short0);
      assertTrue(short1 == short0);
      assertTrue(short0 == short1);
      assertEquals((short)23, short1);
      
      shortArray0[0] = short1;
      short short2 = NumberUtils.min(shortArray0);
      assertArrayEquals(new short[] {(short)23, (short)0, (short)0}, shortArray0);
      assertFalse(short2 == short0);
      assertFalse(short2 == short1);
      assertEquals((short)0, short2);
  }

  @Test
  public void test060()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = (-911);
      intArray0[2] = int0;
      int int1 = NumberUtils.min(intArray0);
      assertArrayEquals(new int[] {0, 0, (-911), 0, 0, 0}, intArray0);
      assertTrue(int1 == int0);
      assertEquals((-911), int1);
  }

  @Test
  public void test061()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test062()  throws Throwable  {
      long[] longArray0 = new long[5];
      long long0 = 1L;
      longArray0[0] = long0;
      long long1 = NumberUtils.min(longArray0);
      assertArrayEquals(new long[] {1L, 0L, 0L, 0L, 0L}, longArray0);
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
  }

  @Test
  public void test063()  throws Throwable  {
      String string0 = null;
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
      assertNull(bigDecimal0);
  }

  @Test
  public void test064()  throws Throwable  {
      String string0 = null;
      BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
      assertNull(bigInteger0);
  }

  @Test
  public void test065()  throws Throwable  {
      String string0 = "----";
      // Undeclared exception!
      try {
        BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
      }
  }

  @Test
  public void test066()  throws Throwable  {
      String string0 = null;
      Long long0 = NumberUtils.createLong(string0);
  }

  @Test
  public void test067()  throws Throwable  {
      String string0 = "dVd3";
      // Undeclared exception!
      try {
        Long long0 = NumberUtils.createLong(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"dVd3\"
         //
      }
  }

  @Test
  public void test068()  throws Throwable  {
      String string0 = null;
      Integer integer0 = NumberUtils.createInteger(string0);
  }

  @Test
  public void test069()  throws Throwable  {
      String string0 = null;
      Double double0 = NumberUtils.createDouble(string0);
  }

  @Test
  public void test070()  throws Throwable  {
      String string0 = null;
      Float float0 = NumberUtils.createFloat(string0);
  }

  @Test
  public void test071()  throws Throwable  {
      String string0 = "0";
      Integer integer0 = (Integer)NumberUtils.createNumber(string0);
      assertEquals(0, (int)integer0);
  }

  @Test
  public void test072()  throws Throwable  {
      String string0 = "Th Array must not be null";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Th Array must not be null is not a valid number.
         //
      }
  }

  @Test
  public void test073()  throws Throwable  {
      String string0 = "RS3,PaNg?;]Z,f";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // RS3,PaNg?;]Z,f is not a valid number.
         //
      }
  }

  @Test
  public void test074()  throws Throwable  {
      String string0 = "InvocationTargetException occurred";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // InvocationTargetException occurred is not a valid number.
         //
      }
  }

  @Test
  public void test075()  throws Throwable  {
      String string0 = "!'Jt&8ShB9x#L";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // !'Jt&8ShB9x#L is not a valid number.
         //
      }
  }

  @Test
  public void test076()  throws Throwable  {
      String string0 = ".\\MrF";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // .\\MrF is not a valid number.
         //
      }
  }

  @Test
  public void test077()  throws Throwable  {
      String string0 = "D";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // D is not a valid number.
         //
      }
  }

  @Test
  public void test078()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.math.NumberUtils";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // org.apache.commons.lang3.math.NumberUtils is not a valid number.
         //
      }
  }

  @Test
  public void test079()  throws Throwable  {
      String string0 = "zKW1HB6'YG[A~e8";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test080()  throws Throwable  {
      String string0 = "GyoE";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // GyoE is not a valid number.
         //
      }
  }

  @Test
  public void test081()  throws Throwable  {
      String string0 = "Array cannot be empty.";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Array cannot be empty. is not a valid number.
         //
      }
  }

  @Test
  public void test082()  throws Throwable  {
      String string0 = "2.";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals(2.0F, (float)float0, 0.01F);
  }

  @Test
  public void test083()  throws Throwable  {
      String string0 = "-0Xorg.apache.commons.lang3.math.NumberUtils";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-org.apache.commons.lang3.math.NumberUtils\"
         //
      }
  }

  @Test
  public void test084()  throws Throwable  {
      String string0 = "0XL}T&R$2or9)Dp/ehfv";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"L}T&R$2or9)Dp/ehfv\"
         //
      }
  }

  @Test
  public void test085()  throws Throwable  {
      String string0 = "-0xL}T&R$2or9)Dp/ehfv";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-L}T&R$2or9)Dp/ehfv\"
         //
      }
  }

  @Test
  public void test086()  throws Throwable  {
      String string0 = "0xTh Array must not be null";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Th Array must not be null\"
         //
      }
  }

  @Test
  public void test087()  throws Throwable  {
      String string0 = "----";
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test088()  throws Throwable  {
      String string0 = "";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test089()  throws Throwable  {
      String string0 = null;
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test090()  throws Throwable  {
      String string0 = null;
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
  }

  @Test
  public void test091()  throws Throwable  {
      String string0 = null;
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
      
      double double0 = NumberUtils.toDouble(string0, (double) float0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test092()  throws Throwable  {
      byte byte0 = (byte) (-91);
      String string0 = null;
      long long0 = NumberUtils.toLong(string0, (long) byte0);
      assertEquals((-91L), long0);
  }

  @Test
  public void test093()  throws Throwable  {
      String string0 = null;
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
  }

  @Test
  public void test094()  throws Throwable  {
      String string0 = "4~ *22XvA\"!p\\j(d.pe";
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test095()  throws Throwable  {
      String string0 = "-";
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
  }

  @Test
  public void test096()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = NumberUtils.min(float0, float0, float0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test
  public void test097()  throws Throwable  {
      double double0 = 1606.3599268615;
      double double1 = NumberUtils.min(double0, double0, double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(1606.3599268615, double1, 0.01D);
  }

  @Test
  public void test098()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      assertNotNull(numberUtils0);
  }

  @Test
  public void test099()  throws Throwable  {
      String string0 = "-0x";
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
  }

  @Test
  public void test100()  throws Throwable  {
      long long0 = 1L;
      double double0 = NumberUtils.max((double) long0, (double) long0, (double) long0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test101()  throws Throwable  {
      String string0 = ".\\MrF";
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test102()  throws Throwable  {
      String string0 = "0";
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
  }
}
