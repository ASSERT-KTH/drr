/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:03:02 GMT 2014
 */

package org.apache.commons.lang.time;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.lang.time.DurationFormatUtils;



import org.junit.runner.RunWith;


public class DurationFormatUtilsEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      String string0 = ";]...";
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token(string0);
      assertNotNull(durationFormatUtils_Token0);
      
      String string1 = (String)DurationFormatUtils.m;
      assertNotSame(string1, string0);
      assertEquals("m", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(string1);
      assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
      assertNotSame(string1, string0);
      assertNotNull(durationFormatUtils_Token1);
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = durationFormatUtils_Token0.equals((Object) durationFormatUtils_Token1);
      assertNotSame(string0, string1);
      assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
      assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      assertNotSame(string1, string0);
      assertFalse(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 1160;
      Integer integer0 = new Integer(int0);
      assertEquals(1160, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token(integer0);
      assertNotNull(durationFormatUtils_Token0);
      assertTrue(integer0.equals((Object)int0));
      
      boolean boolean0 = durationFormatUtils_Token0.equals((Object) durationFormatUtils_Token0);
      assertTrue(boolean0);
      assertTrue(integer0.equals((Object)int0));
  }

  @Test
  public void test02()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(16, stringBuffer0.capacity());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token(stringBuffer0);
      assertEquals(16, stringBuffer0.capacity());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(durationFormatUtils_Token0);
      
      boolean boolean0 = durationFormatUtils_Token0.equals((Object) durationFormatUtils_Token0);
      assertEquals(16, stringBuffer0.capacity());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertTrue(boolean0);
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = (-4);
      String string0 = (String)DurationFormatUtils.M;
      assertEquals("M", string0);
      assertNotNull(string0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token(string0, int0);
      assertNotNull(durationFormatUtils_Token0);
      
      String string1 = durationFormatUtils_Token0.toString();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      int int1 = 782;
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(string1, int1);
      assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
      assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(durationFormatUtils_Token1);
      assertFalse(int0 == int1);
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      
      boolean boolean0 = durationFormatUtils_Token0.equals((Object) durationFormatUtils_Token1);
      assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
      assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(boolean0);
      assertFalse(int0 == int1);
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = (-4);
      String string0 = (String)DurationFormatUtils.M;
      assertEquals("M", string0);
      assertNotNull(string0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token(string0, int0);
      assertNotNull(durationFormatUtils_Token0);
      
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(durationFormatUtils_Token0);
      assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
      assertNotNull(durationFormatUtils_Token1);
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      
      boolean boolean0 = durationFormatUtils_Token0.equals((Object) durationFormatUtils_Token1);
      assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
      assertFalse(boolean0);
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = ";]...";
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token(string0);
      assertNotNull(durationFormatUtils_Token0);
      
      boolean boolean0 = durationFormatUtils_Token0.equals((Object) durationFormatUtils_Token0);
      assertTrue(boolean0);
  }

  @Test
  public void test06()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token(stringBuffer0);
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(durationFormatUtils_Token0);
      
      boolean boolean0 = durationFormatUtils_Token0.equals((Object) stringBuffer0);
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertFalse(boolean0);
  }

  @Test
  public void test07()  throws Throwable  {
      long long0 = 1708L;
      boolean boolean0 = false;
      String string0 = DurationFormatUtils.formatPeriodISO(long0, long0);
      assertEquals("P0Y0M0DT0H0M0.000S", string0);
      assertNotNull(string0);
      
      String string1 = DurationFormatUtils.formatDuration(long0, string0, boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("P0Y000DT00000.0001708", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test08()  throws Throwable  {
      long long0 = 3600023L;
      boolean boolean0 = true;
      String string0 = DurationFormatUtils.formatDurationWords(long0, boolean0, boolean0);
      assertEquals("1 hour", string0);
      assertNotNull(string0);
      
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[11];
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token(string0);
      assertNotNull(durationFormatUtils_Token0);
      
      durationFormatUtils_TokenArray0[0] = durationFormatUtils_Token0;
      assertNotNull(durationFormatUtils_TokenArray0[0]);
      
      int int0 = 1947;
      // Undeclared exception!
      try {
        String string1 = DurationFormatUtils.format(durationFormatUtils_TokenArray0, int0, int0, int0, int0, int0, int0, int0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      long long0 = (-8L);
      long long1 = 2419200002L;
      String string0 = "j?&Mp*Z;b6";
      String string1 = DurationFormatUtils.formatPeriod(long0, long1, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("j?&0p*Z;b6", string1);
      assertNotNull(string1);
      assertFalse(long0 == long1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(long1 == long0);
  }

  @Test
  public void test10()  throws Throwable  {
      long long0 = (-52L);
      long long1 = 2419199994L;
      String string0 = DurationFormatUtils.formatDurationHMS(long1);
      assertEquals("671:59:59.994", string0);
      assertNotNull(string0);
      assertFalse(long1 == long0);
      
      String string1 = DurationFormatUtils.formatPeriod(long0, long1, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("671:59:59.994", string1);
      assertNotNull(string1);
      assertFalse(long1 == long0);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertFalse(long0 == long1);
  }

  @Test
  public void test11()  throws Throwable  {
      long long0 = (-8L);
      long long1 = 2419200002L;
      boolean boolean0 = false;
      String string0 = DurationFormatUtils.formatDurationWords(long1, boolean0, boolean0);
      assertEquals("28 days 0 hours 0 minutes 0 seconds", string0);
      assertNotNull(string0);
      assertFalse(long1 == long0);
      
      String string1 = DurationFormatUtils.formatPeriod(long0, long1, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("28 -308a000 0 hour 0 0inute00 0 econ-3080", string1);
      assertNotNull(string1);
      assertFalse(long1 == long0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(long0 == long1);
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test12()  throws Throwable  {
      long long0 = 3L;
      long long1 = 2419200003L;
      String string0 = DurationFormatUtils.formatPeriodISO(long0, long1);
      assertEquals("P0Y0M28DT0H0M0.000S", string0);
      assertNotNull(string0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test
  public void test13()  throws Throwable  {
      long long0 = 60019L;
      boolean boolean0 = true;
      String string0 = DurationFormatUtils.formatDurationWords(long0, boolean0, boolean0);
      assertEquals("1 minute", string0);
      assertNotNull(string0);
  }

  @Test
  public void test14()  throws Throwable  {
      long long0 = 2419200029L;
      boolean boolean0 = true;
      String string0 = DurationFormatUtils.formatDurationWords(long0, boolean0, boolean0);
      assertEquals("28 days", string0);
      assertNotNull(string0);
  }

  @Test
  public void test15()  throws Throwable  {
      long long0 = (-16L);
      boolean boolean0 = true;
      String string0 = DurationFormatUtils.formatDurationWords(long0, boolean0, boolean0);
      assertEquals("0 seconds", string0);
      assertNotNull(string0);
  }

  @Test
  public void test16()  throws Throwable  {
      long long0 = (-16L);
      String string0 = "`q)G0ce 3y";
      String string1 = DurationFormatUtils.formatPeriod(long0, long0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("`q)G0ce 30", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test17()  throws Throwable  {
      DurationFormatUtils durationFormatUtils0 = new DurationFormatUtils();
      assertNotNull(durationFormatUtils0);
  }

  @Test
  public void test18()  throws Throwable  {
      long long0 = 3L;
      String string0 = DurationFormatUtils.formatDurationISO(long0);
      assertEquals("P0Y0M0DT0H0M0.003S", string0);
      assertNotNull(string0);
  }

  @Test
  public void test19()  throws Throwable  {
      long long0 = (-21L);
      String string0 = DurationFormatUtils.formatPeriodISO(long0, long0);
      assertEquals("P0Y0M0DT0H0M0.000S", string0);
      assertNotNull(string0);
      
      String string1 = DurationFormatUtils.formatPeriod(long0, long0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("P0Y000DT00000.0000", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }
}
