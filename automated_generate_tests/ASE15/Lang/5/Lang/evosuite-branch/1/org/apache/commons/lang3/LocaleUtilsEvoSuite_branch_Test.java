/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:31:53 GMT 2014
 */

package org.apache.commons.lang3;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.lang3.LocaleUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;


public class LocaleUtilsEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      String string0 = null;
      List<Locale> list0 = LocaleUtils.countriesByLanguage(string0);
      assertNotNull(list0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "ja";
      List<Locale> list0 = LocaleUtils.countriesByLanguage(string0);
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = null;
      List<Locale> list0 = LocaleUtils.languagesByCountry(string0);
      assertNotNull(list0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "4ZX";
      List<Locale> list0 = LocaleUtils.languagesByCountry(string0);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test04()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertFalse(boolean0);
  }

  @Test
  public void test05()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      
      Locale locale1 = Locale.CANADA_FRENCH;
      assertNotNull(locale1);
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("CA", locale1.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      
      List<Locale> list0 = LocaleUtils.localeLookupList(locale0, locale1);
      assertNotNull(list0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals(3, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("CA", locale1.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "hEjVR";
      Locale locale0 = new Locale(string0, string0, string0);
      assertNotNull(locale0);
      assertEquals("hejvr", locale0.getLanguage());
      assertEquals("HEJVR", locale0.getCountry());
      assertEquals("hEjVR", locale0.getVariant());
      assertEquals("hejvr_HEJVR_hEjVR", locale0.toString());
      
      List<Locale> list0 = LocaleUtils.localeLookupList(locale0, locale0);
      assertNotNull(list0);
      assertEquals("hejvr", locale0.getLanguage());
      assertEquals("HEJVR", locale0.getCountry());
      assertEquals("hEjVR", locale0.getVariant());
      assertEquals("hejvr_HEJVR_hEjVR", locale0.toString());
      assertEquals(false, list0.isEmpty());
      assertEquals(3, list0.size());
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = null;
      Locale locale0 = LocaleUtils.toLocale(string0);
      assertNull(locale0);
      
      List<Locale> list0 = LocaleUtils.localeLookupList(locale0, locale0);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "de_^yk\\+7lq=yKd%";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: de_^yk\\+7lq=yKd%
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "d}&%`Tg~@&+!r\\O";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: d}&%`Tg~@&+!r\\O
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "p896<";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: p896<
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "|a\\7VdE%w";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: |a\\7VdE%w
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "]9";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: ]9
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: 
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      
      String string0 = locale0.toString();
      assertNotNull(string0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr_CA", string0);
      
      Locale locale1 = LocaleUtils.toLocale(string0);
      assertNotNull(locale1);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("CA", locale1.getCountry());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fra", locale1.getISO3Language());
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(locale1.equals((Object)locale0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.LocaleUtils";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: org.apache.commons.lang3.LocaleUtils
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "ja";
      Locale locale0 = LocaleUtils.toLocale(string0);
      assertNotNull(locale0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
  }

  @Test
  public void test17()  throws Throwable  {
      Set<Locale> set0 = LocaleUtils.availableLocaleSet();
      assertNotNull(set0);
      assertEquals(false, set0.isEmpty());
      assertEquals(156, set0.size());
  }

  @Test
  public void test18()  throws Throwable  {
      LocaleUtils localeUtils0 = new LocaleUtils();
      assertNotNull(localeUtils0);
  }

  @Test
  public void test19()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertTrue(boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      
      List<Locale> list0 = LocaleUtils.localeLookupList(locale0);
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
  }

  @Test
  public void test21()  throws Throwable  {
      LocaleUtils.SyncAvoid localeUtils_SyncAvoid0 = new LocaleUtils.SyncAvoid();
      assertNotNull(localeUtils_SyncAvoid0);
  }
}
