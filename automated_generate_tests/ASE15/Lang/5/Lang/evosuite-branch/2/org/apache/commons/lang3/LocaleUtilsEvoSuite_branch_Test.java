/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:42:11 GMT 2014
 */

package org.apache.commons.lang3;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.lang3.LocaleUtils;




import org.junit.runner.RunWith;


public class LocaleUtilsEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      String string0 = null;
      List<Locale> list0 = LocaleUtils.countriesByLanguage(string0);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test01()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      
      String string0 = locale0.getCountry();
      assertEquals("JP", string0);
      assertNotNull(string0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      
      List<Locale> list0 = LocaleUtils.countriesByLanguage(string0);
      assertNotNull(list0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test
  public void test02()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      String string0 = locale0.getCountry();
      assertEquals("JP", string0);
      assertNotNull(string0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      String string1 = locale0.getUnicodeLocaleType(string0);
      assertNull(string1);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      List<Locale> list0 = LocaleUtils.languagesByCountry(string1);
      assertNotNull(list0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
  }

  @Test
  public void test03()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      
      String string0 = locale0.getCountry();
      assertEquals("JP", string0);
      assertNotNull(string0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      
      List<Locale> list0 = LocaleUtils.languagesByCountry(string0);
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
  }

  @Test
  public void test04()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      assertTrue(boolean0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
  }

  @Test
  public void test05()  throws Throwable  {
      Locale locale0 = null;
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      assertFalse(boolean0);
  }

  @Test
  public void test06()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      Locale locale1 = Locale.UK;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GB", locale1.getCountry());
      assertEquals("en_GB", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("GBR", locale1.getISO3Country());
      
      List<Locale> list0 = LocaleUtils.localeLookupList(locale0, locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(list0);
      assertEquals(2, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GB", locale1.getCountry());
      assertEquals("en_GB", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("GBR", locale1.getISO3Country());
  }

  @Test
  public void test07()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      
      List<Locale> list0 = LocaleUtils.localeLookupList(locale0);
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "NZ";
      Locale locale0 = new Locale(string0, string0, string0);
      assertNotNull(locale0);
      assertEquals("nz", locale0.getLanguage());
      assertEquals("NZ", locale0.getCountry());
      assertEquals("nz_NZ_NZ", locale0.toString());
      assertEquals("NZ", locale0.getVariant());
      assertEquals("NZL", locale0.getISO3Country());
      
      List<Locale> list0 = LocaleUtils.localeLookupList(locale0, locale0);
      assertNotNull(list0);
      assertEquals("nz", locale0.getLanguage());
      assertEquals("NZ", locale0.getCountry());
      assertEquals("nz_NZ_NZ", locale0.toString());
      assertEquals("NZ", locale0.getVariant());
      assertEquals("NZL", locale0.getISO3Country());
      assertEquals(false, list0.isEmpty());
      assertEquals(3, list0.size());
  }

  @Test
  public void test09()  throws Throwable  {
      Locale locale0 = null;
      List<Locale> list0 = LocaleUtils.localeLookupList(locale0);
      assertNotNull(list0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "be";
      String string1 = "Ya$XIS";
      assertNotSame(string1, string0);
      
      Locale locale0 = new Locale(string0, string1, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(locale0);
      assertEquals("bel", locale0.getISO3Language());
      assertEquals("YA$XIS", locale0.getCountry());
      assertEquals("be_YA$XIS_Ya$XIS", locale0.toString());
      assertEquals("be", locale0.getLanguage());
      assertEquals("Ya$XIS", locale0.getVariant());
      
      String string2 = locale0.toString();
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals("be_YA$XIS_Ya$XIS", string2);
      assertNotNull(string2);
      assertEquals("bel", locale0.getISO3Language());
      assertEquals("YA$XIS", locale0.getCountry());
      assertEquals("be_YA$XIS_Ya$XIS", locale0.toString());
      assertEquals("be", locale0.getLanguage());
      assertEquals("Ya$XIS", locale0.getVariant());
      
      // Undeclared exception!
      try {
        Locale locale1 = LocaleUtils.toLocale(string2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: be_YA$XIS_Ya$XIS
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "NZ";
      Locale locale0 = new Locale(string0, string0, string0);
      assertNotNull(locale0);
      assertEquals("nz", locale0.getLanguage());
      assertEquals("NZ", locale0.getVariant());
      assertEquals("NZL", locale0.getISO3Country());
      assertEquals("nz_NZ_NZ", locale0.toString());
      assertEquals("NZ", locale0.getCountry());
      
      String string1 = locale0.toString();
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("nz_NZ_NZ", string1);
      assertNotNull(string1);
      assertEquals("nz", locale0.getLanguage());
      assertEquals("NZ", locale0.getVariant());
      assertEquals("NZL", locale0.getISO3Country());
      assertEquals("nz_NZ_NZ", locale0.toString());
      assertEquals("NZ", locale0.getCountry());
      
      Locale locale1 = LocaleUtils.toLocale(string1);
      assertNotSame(string1, string0);
      assertNotSame(locale0, locale1);
      assertNotSame(string0, string1);
      assertNotSame(locale1, locale0);
      assertFalse(string1.equals((Object)string0));
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(string0.equals((Object)string1));
      assertTrue(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("nz", locale0.getLanguage());
      assertEquals("NZ", locale0.getVariant());
      assertEquals("NZL", locale0.getISO3Country());
      assertEquals("nz_NZ_NZ", locale0.toString());
      assertEquals("NZ", locale0.getCountry());
      assertEquals("NZ", locale1.getCountry());
      assertEquals("NZL", locale1.getISO3Country());
      assertEquals("nz_NZ_NZ", locale1.toString());
      assertEquals("nz", locale1.getLanguage());
      assertEquals("NZ", locale1.getVariant());
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "be";
      String string1 = "`9E4=rP>";
      assertNotSame(string1, string0);
      
      Locale locale0 = new Locale(string0, string1, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(locale0);
      assertEquals("be", locale0.getLanguage());
      assertEquals("be_`9E4=RP>_`9E4=rP>", locale0.toString());
      assertEquals("`9E4=RP>", locale0.getCountry());
      assertEquals("`9E4=rP>", locale0.getVariant());
      assertEquals("bel", locale0.getISO3Language());
      
      String string2 = locale0.toString();
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("be_`9E4=RP>_`9E4=rP>", string2);
      assertNotNull(string2);
      assertEquals("be", locale0.getLanguage());
      assertEquals("be_`9E4=RP>_`9E4=rP>", locale0.toString());
      assertEquals("`9E4=RP>", locale0.getCountry());
      assertEquals("`9E4=rP>", locale0.getVariant());
      assertEquals("bel", locale0.getISO3Language());
      
      // Undeclared exception!
      try {
        Locale locale1 = LocaleUtils.toLocale(string2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: be_`9E4=RP>_`9E4=rP>
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "ar_!FGtj+EA)";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: ar_!FGtj+EA)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      
      String string0 = locale0.toString();
      assertEquals("zh_CN", string0);
      assertNotNull(string0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      
      Locale locale1 = LocaleUtils.toLocale(string0);
      assertNotSame(locale1, locale0);
      assertNotSame(locale0, locale1);
      assertTrue(locale1.equals((Object)locale0));
      assertTrue(locale0.equals((Object)locale1));
      assertNotNull(locale1);
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "z{9w8i*Ef( r";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: z{9w8i*Ef( r
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "k[\\)9%]FJjE$Bq]";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: k[\\)9%]FJjE$Bq]
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "{?";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: {?
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "Invhi\" lo,ale formt:";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: Invhi\" lo,ale formt:
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = ")";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: )
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "be";
      Locale locale0 = LocaleUtils.toLocale(string0);
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("be", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("bel", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("be", locale0.toString());
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = null;
      Locale locale0 = LocaleUtils.toLocale(string0);
      assertNull(locale0);
  }

  @Test
  public void test22()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      
      String string0 = locale0.toLanguageTag();
      assertEquals("fr-CA", string0);
      assertNotNull(string0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      
      // Undeclared exception!
      try {
        Locale locale1 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: fr-CA
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      Set<Locale> set0 = LocaleUtils.availableLocaleSet();
      assertNotNull(set0);
      assertEquals(156, set0.size());
      assertEquals(false, set0.isEmpty());
  }

  @Test
  public void test24()  throws Throwable  {
      LocaleUtils localeUtils0 = new LocaleUtils();
      assertNotNull(localeUtils0);
  }

  @Test
  public void test25()  throws Throwable  {
      LocaleUtils.SyncAvoid localeUtils_SyncAvoid0 = new LocaleUtils.SyncAvoid();
      assertNotNull(localeUtils_SyncAvoid0);
  }
}
