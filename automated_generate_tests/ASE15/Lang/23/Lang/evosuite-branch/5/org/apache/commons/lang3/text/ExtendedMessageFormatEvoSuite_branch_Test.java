/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:29:05 GMT 2014
 */

package org.apache.commons.lang3.text;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.math.RoundingMode;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.Format;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import org.apache.commons.lang3.text.ExtendedMessageFormat;
import org.apache.commons.lang3.text.FormatFactory;




import org.junit.runner.RunWith;


public class ExtendedMessageFormatEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "v7e{1,{-&Cx~%";
      HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>();
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertNotNull(hashMap0);
      
      ExtendedMessageFormat extendedMessageFormat0 = null;
      try {
        extendedMessageFormat0 = new ExtendedMessageFormat(string0, (Map<String, ? extends FormatFactory>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unterminated format element at position 7
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "/_`PmJ8p{}7";
      Locale locale0 = new Locale(string0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("/_`pmj8p{}7", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("/_`pmj8p{}7", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>();
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      ExtendedMessageFormat extendedMessageFormat0 = null;
      try {
        extendedMessageFormat0 = new ExtendedMessageFormat(string0, locale0, (Map<String, ? extends FormatFactory>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format argument index at position 9: }
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "f\\R{ ";
      HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>();
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      ExtendedMessageFormat extendedMessageFormat0 = null;
      try {
        extendedMessageFormat0 = new ExtendedMessageFormat(string0, (Map<String, ? extends FormatFactory>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unterminated format element at position 4
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "%~{5 VnQ;:iLBx%wG";
      HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>();
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertNotNull(hashMap0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertNotNull(locale0);
      
      ExtendedMessageFormat extendedMessageFormat0 = null;
      try {
        extendedMessageFormat0 = new ExtendedMessageFormat(string0, locale0, (Map<String, ? extends FormatFactory>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format argument index at position 3: 5 V
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "wCr;eiQd~!:GxZ0s5d";
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0);
      assertEquals("wCr;eiQd~!:GxZ0s5d", extendedMessageFormat0.toPattern());
      assertNotNull(extendedMessageFormat0);
      
      ExtendedMessageFormat extendedMessageFormat1 = new ExtendedMessageFormat(string0);
      assertNotSame(extendedMessageFormat1, extendedMessageFormat0);
      assertEquals("wCr;eiQd~!:GxZ0s5d", extendedMessageFormat1.toPattern());
      assertTrue(extendedMessageFormat1.equals((Object)extendedMessageFormat0));
      assertNotNull(extendedMessageFormat1);
      
      boolean boolean0 = extendedMessageFormat0.equals((Object) extendedMessageFormat1);
      assertNotSame(extendedMessageFormat0, extendedMessageFormat1);
      assertNotSame(extendedMessageFormat1, extendedMessageFormat0);
      assertEquals("wCr;eiQd~!:GxZ0s5d", extendedMessageFormat0.toPattern());
      assertEquals("wCr;eiQd~!:GxZ0s5d", extendedMessageFormat1.toPattern());
      assertTrue(extendedMessageFormat0.equals((Object)extendedMessageFormat1));
      assertTrue(extendedMessageFormat1.equals((Object)extendedMessageFormat0));
      assertTrue(boolean0);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "M-b1D[=L?Lz|@K";
      HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>();
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertNotNull(hashMap0);
      
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0, (Map<String, ? extends FormatFactory>) hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals("M-b1D[=L?Lz|@K", extendedMessageFormat0.toPattern());
      assertNotNull(extendedMessageFormat0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      boolean boolean0 = extendedMessageFormat0.equals((Object) locale0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals("M-b1D[=L?Lz|@K", extendedMessageFormat0.toPattern());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertFalse(boolean0);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "`39:'{_PL";
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0);
      assertEquals("`39:'{'_PL", extendedMessageFormat0.toPattern());
      assertNotNull(extendedMessageFormat0);
      
      Object object0 = null;
      boolean boolean0 = extendedMessageFormat0.equals(object0);
      assertEquals("`39:'{'_PL", extendedMessageFormat0.toPattern());
      assertFalse(boolean0);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "";
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", extendedMessageFormat0.toPattern());
      assertNotNull(extendedMessageFormat0);
      
      HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>();
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      ExtendedMessageFormat extendedMessageFormat1 = new ExtendedMessageFormat(string0, locale0, (Map<String, ? extends FormatFactory>) hashMap0);
      assertNotSame(extendedMessageFormat1, extendedMessageFormat0);
      assertEquals("", extendedMessageFormat1.toPattern());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertFalse(extendedMessageFormat1.equals((Object)extendedMessageFormat0));
      assertNotNull(extendedMessageFormat1);
      
      boolean boolean0 = extendedMessageFormat0.equals((Object) extendedMessageFormat1);
      assertNotSame(extendedMessageFormat1, extendedMessageFormat0);
      assertNotSame(extendedMessageFormat0, extendedMessageFormat1);
      assertEquals("", extendedMessageFormat1.toPattern());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", extendedMessageFormat0.toPattern());
      assertFalse(extendedMessageFormat1.equals((Object)extendedMessageFormat0));
      assertFalse(extendedMessageFormat0.equals((Object)extendedMessageFormat1));
      assertFalse(boolean0);
  }

  @Test
  public void test08()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string0 = "%~{8 ,OVn;:iL}";
      HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>();
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertNotNull(hashMap0);
      
      ExtendedMessageFormat extendedMessageFormat0 = null;
      try {
        extendedMessageFormat0 = new ExtendedMessageFormat(string0, locale0, (Map<String, ? extends FormatFactory>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unknown format type: OVn;:iL
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "'x+qH='|.HNIf.H)<U";
      HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>();
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0, (Map<String, ? extends FormatFactory>) hashMap0);
      assertEquals("x+qH=|.HNIf.H)<U", extendedMessageFormat0.toPattern());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertNotNull(extendedMessageFormat0);
  }

  @Test
  public void test10() {}
//   @Test
//   public void test10()  throws Throwable  {
//       String string0 = "vri&{1}gQK7+2w:uHO}";
//       Locale locale0 = Locale.GERMANY;
//       assertEquals("deu", locale0.getISO3Language());
//       assertEquals("DE", locale0.getCountry());
//       assertEquals("de_DE", locale0.toString());
//       assertEquals("de", locale0.getLanguage());
//       assertEquals("DEU", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertNotNull(locale0);
//       
//       HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>();
//       assertEquals(true, hashMap0.isEmpty());
//       assertEquals("{}", hashMap0.toString());
//       assertEquals(0, hashMap0.size());
//       assertNotNull(hashMap0);
//       
//       ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0, locale0, (Map<String, ? extends FormatFactory>) hashMap0);
//       assertEquals("deu", locale0.getISO3Language());
//       assertEquals("DE", locale0.getCountry());
//       assertEquals("de_DE", locale0.toString());
//       assertEquals("de", locale0.getLanguage());
//       assertEquals("DEU", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("vri&{1}gQK7+2w:uHO}", extendedMessageFormat0.toPattern());
//       assertEquals(true, hashMap0.isEmpty());
//       assertEquals("{}", hashMap0.toString());
//       assertEquals(0, hashMap0.size());
//       assertNotNull(extendedMessageFormat0);
//       
//       int int0 = (-10);
//       DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
//       assertEquals("%", decimalFormat0.getNegativeSuffix());
//       assertEquals(false, decimalFormat0.isParseIntegerOnly());
//       assertEquals("", decimalFormat0.getPositivePrefix());
//       assertEquals(true, decimalFormat0.isGroupingUsed());
//       assertEquals("#,##0%", decimalFormat0.toPattern());
//       assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
//       assertEquals("-", decimalFormat0.getNegativePrefix());
//       assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
//       assertEquals("#.##0%", decimalFormat0.toLocalizedPattern());
//       assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
//       assertEquals(0, decimalFormat0.getMaximumFractionDigits());
//       assertEquals(100, decimalFormat0.getMultiplier());
//       assertEquals("%", decimalFormat0.getPositiveSuffix());
//       assertEquals(3, decimalFormat0.getGroupingSize());
//       assertEquals(0, decimalFormat0.getMinimumFractionDigits());
//       assertEquals(false, decimalFormat0.isParseBigDecimal());
//       assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
//       assertNotNull(decimalFormat0);
//       
//       // Undeclared exception!
//       try {
//         extendedMessageFormat0.setFormat(int0, (Format) decimalFormat0);
//         fail("Expecting exception: UnsupportedOperationException");
//       
//       } catch(UnsupportedOperationException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "M-b1D[=L?Lz|@K";
      HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>();
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertNotNull(hashMap0);
      
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0, (Map<String, ? extends FormatFactory>) hashMap0);
      assertEquals("M-b1D[=L?Lz|@K", extendedMessageFormat0.toPattern());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertNotNull(extendedMessageFormat0);
      
      int int0 = extendedMessageFormat0.hashCode();
      assertEquals("M-b1D[=L?Lz|@K", extendedMessageFormat0.toPattern());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(278768016, int0);
  }

  @Test
  public void test12() {}
//   @Test
//   public void test12()  throws Throwable  {
//       String string0 = "";
//       Locale locale0 = Locale.GERMANY;
//       assertEquals("deu", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("de_DE", locale0.toString());
//       assertEquals("DEU", locale0.getISO3Country());
//       assertEquals("de", locale0.getLanguage());
//       assertEquals("DE", locale0.getCountry());
//       assertNotNull(locale0);
//       
//       HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>();
//       assertEquals(true, hashMap0.isEmpty());
//       assertEquals(0, hashMap0.size());
//       assertEquals("{}", hashMap0.toString());
//       assertNotNull(hashMap0);
//       
//       ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0, locale0, (Map<String, ? extends FormatFactory>) hashMap0);
//       assertEquals("", extendedMessageFormat0.toPattern());
//       assertEquals(true, hashMap0.isEmpty());
//       assertEquals(0, hashMap0.size());
//       assertEquals("{}", hashMap0.toString());
//       assertEquals("deu", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("de_DE", locale0.toString());
//       assertEquals("DEU", locale0.getISO3Country());
//       assertEquals("de", locale0.getLanguage());
//       assertEquals("DE", locale0.getCountry());
//       assertNotNull(extendedMessageFormat0);
//       
//       int int0 = 125;
//       SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)DateFormat.getDateTimeInstance();
//       assertEquals(true, simpleDateFormat0.isLenient());
//       assertEquals("dd.MM.yyyy HH:mm:ss", simpleDateFormat0.toPattern());
//       assertEquals("tt.MM.uuuu HH:mm:ss", simpleDateFormat0.toLocalizedPattern());
//       assertNotNull(simpleDateFormat0);
//       
//       // Undeclared exception!
//       try {
//         extendedMessageFormat0.setFormatByArgumentIndex(int0, (Format) simpleDateFormat0);
//         fail("Expecting exception: UnsupportedOperationException");
//       
//       } catch(UnsupportedOperationException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "/A3mzD";
      HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>();
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0, (Map<String, ? extends FormatFactory>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("/A3mzD", extendedMessageFormat0.toPattern());
      assertNotNull(extendedMessageFormat0);
      
      Format[] formatArray0 = new Format[12];
      // Undeclared exception!
      try {
        extendedMessageFormat0.setFormatsByArgumentIndex(formatArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "wCr;eiQd~!:GxZ0s5d";
      HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>();
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertNotNull(hashMap0);
      
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0, (Map<String, ? extends FormatFactory>) hashMap0);
      assertEquals("wCr;eiQd~!:GxZ0s5d", extendedMessageFormat0.toPattern());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertNotNull(extendedMessageFormat0);
      
      Format[] formatArray0 = new Format[10];
      // Undeclared exception!
      try {
        extendedMessageFormat0.setFormats(formatArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "M-b1D[=L?Lz|@K";
      HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>();
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertNotNull(hashMap0);
      
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0, (Map<String, ? extends FormatFactory>) hashMap0);
      assertEquals("M-b1D[=L?Lz|@K", extendedMessageFormat0.toPattern());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertNotNull(extendedMessageFormat0);
      
      String string1 = extendedMessageFormat0.toPattern();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("M-b1D[=L?Lz|@K", extendedMessageFormat0.toPattern());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("M-b1D[=L?Lz|@K", string1);
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "27{1,'";
      HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>();
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      ExtendedMessageFormat extendedMessageFormat0 = null;
      try {
        extendedMessageFormat0 = new ExtendedMessageFormat(string0, (Map<String, ? extends FormatFactory>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unterminated format element at position 6
         //
      }
  }
}
