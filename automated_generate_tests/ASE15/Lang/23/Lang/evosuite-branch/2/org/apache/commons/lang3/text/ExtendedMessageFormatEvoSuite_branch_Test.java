/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:57:59 GMT 2014
 */

package org.apache.commons.lang3.text;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.text.Format;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import org.apache.commons.lang3.text.ExtendedMessageFormat;
import org.apache.commons.lang3.text.FormatFactory;




import org.junit.runner.RunWith;


public class ExtendedMessageFormatEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "`QCy/$#{}Ue.Q!G";
      HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>();
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      ExtendedMessageFormat extendedMessageFormat0 = null;
      try {
        extendedMessageFormat0 = new ExtendedMessageFormat(string0, (Map<String, ? extends FormatFactory>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format argument index at position 8: }
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "Fu 7x=4{ ";
      Locale locale0 = Locale.GERMANY;
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>();
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      ExtendedMessageFormat extendedMessageFormat0 = null;
      try {
        extendedMessageFormat0 = new ExtendedMessageFormat(string0, locale0, (Map<String, ? extends FormatFactory>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unterminated format element at position 8
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "8#c{3 /{";
      HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>();
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertNotNull(hashMap0);
      
      ExtendedMessageFormat extendedMessageFormat0 = null;
      try {
        extendedMessageFormat0 = new ExtendedMessageFormat(string0, (Map<String, ? extends FormatFactory>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format argument index at position 4: 3 /
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "K#[soF5Qw::Ja''&V]";
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("K#[soF5Qw::Ja''&V]", extendedMessageFormat0.toPattern());
      assertNotNull(extendedMessageFormat0);
      
      HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>();
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertNotNull(hashMap0);
      
      ExtendedMessageFormat extendedMessageFormat1 = new ExtendedMessageFormat(string0, locale0, (Map<String, ? extends FormatFactory>) hashMap0);
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals("K#[soF5Qw::Ja''&V]", extendedMessageFormat1.toPattern());
      assertNotNull(extendedMessageFormat1);
      assertFalse(extendedMessageFormat1.equals((Object)extendedMessageFormat0));
      assertNotSame(extendedMessageFormat1, extendedMessageFormat0);
      
      boolean boolean0 = extendedMessageFormat0.equals((Object) extendedMessageFormat1);
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals("K#[soF5Qw::Ja''&V]", extendedMessageFormat0.toPattern());
      assertEquals("K#[soF5Qw::Ja''&V]", extendedMessageFormat1.toPattern());
      assertFalse(extendedMessageFormat0.equals((Object)extendedMessageFormat1));
      assertFalse(extendedMessageFormat1.equals((Object)extendedMessageFormat0));
      assertFalse(boolean0);
      assertNotSame(extendedMessageFormat0, extendedMessageFormat1);
      assertNotSame(extendedMessageFormat1, extendedMessageFormat0);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "m4#W>cE l!Y{3,}";
      HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>();
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0, (Map<String, ? extends FormatFactory>) hashMap0);
      assertEquals("m4#W>cE l!Y{3}", extendedMessageFormat0.toPattern());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertNotNull(extendedMessageFormat0);
      
      boolean boolean0 = extendedMessageFormat0.equals((Object) hashMap0);
      assertEquals("m4#W>cE l!Y{3}", extendedMessageFormat0.toPattern());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "?";
      Locale locale0 = Locale.GERMANY;
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertNotNull(locale0);
      
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0, locale0);
      assertEquals("?", extendedMessageFormat0.toPattern());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertNotNull(extendedMessageFormat0);
      
      Map<String, FormatFactory> map0 = null;
      ExtendedMessageFormat extendedMessageFormat1 = new ExtendedMessageFormat(string0, locale0, (Map<String, ? extends FormatFactory>) map0);
      assertEquals("?", extendedMessageFormat1.toPattern());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertNotNull(extendedMessageFormat1);
      assertTrue(extendedMessageFormat1.equals((Object)extendedMessageFormat0));
      assertNotSame(extendedMessageFormat1, extendedMessageFormat0);
      
      boolean boolean0 = extendedMessageFormat0.equals((Object) extendedMessageFormat1);
      assertEquals("?", extendedMessageFormat1.toPattern());
      assertEquals("?", extendedMessageFormat0.toPattern());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertTrue(extendedMessageFormat1.equals((Object)extendedMessageFormat0));
      assertTrue(extendedMessageFormat0.equals((Object)extendedMessageFormat1));
      assertTrue(boolean0);
      assertNotSame(extendedMessageFormat1, extendedMessageFormat0);
      assertNotSame(extendedMessageFormat0, extendedMessageFormat1);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "8H~dN ,mr'B";
      Locale locale0 = null;
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0, locale0);
      assertEquals("8H~dN ,mrB", extendedMessageFormat0.toPattern());
      assertNotNull(extendedMessageFormat0);
      
      boolean boolean0 = extendedMessageFormat0.equals((Object) locale0);
      assertEquals("8H~dN ,mrB", extendedMessageFormat0.toPattern());
      assertFalse(boolean0);
  }

  @Test
  public void test07() {}
//   @Test
//   public void test07()  throws Throwable  {
//       String string0 = "Zk!O9k^v|(f4";
//       Locale locale0 = Locale.ROOT;
//       assertEquals("", locale0.getISO3Language());
//       assertEquals("", locale0.getLanguage());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getCountry());
//       assertEquals("", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertNotNull(locale0);
//       
//       ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0, locale0);
//       assertEquals("Zk!O9k^v|(f4", extendedMessageFormat0.toPattern());
//       assertEquals("", locale0.getISO3Language());
//       assertEquals("", locale0.getLanguage());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getCountry());
//       assertEquals("", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertNotNull(extendedMessageFormat0);
//       
//       int int0 = extendedMessageFormat0.hashCode();
//       assertEquals("Zk!O9k^v|(f4", extendedMessageFormat0.toPattern());
//       assertEquals("", locale0.getISO3Language());
//       assertEquals("", locale0.getLanguage());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getCountry());
//       assertEquals("", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals((-1024184827), int0);
//       
//       // Undeclared exception!
//       try {
//         extendedMessageFormat0.setFormat(int0, (Format) extendedMessageFormat0);
//         fail("Expecting exception: UnsupportedOperationException");
//       
//       } catch(UnsupportedOperationException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "K#[soF5Qw::Ja''&V]";
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0, locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("K#[soF5Qw::Ja''&V]", extendedMessageFormat0.toPattern());
      assertNotNull(extendedMessageFormat0);
      
      int int0 = (-34);
      // Undeclared exception!
      try {
        extendedMessageFormat0.setFormatByArgumentIndex(int0, (Format) extendedMessageFormat0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "HHEEonz4";
      Locale locale0 = null;
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0, locale0);
      assertEquals("HHEEonz4", extendedMessageFormat0.toPattern());
      assertNotNull(extendedMessageFormat0);
      
      Format[] formatArray0 = new Format[7];
      // Undeclared exception!
      try {
        extendedMessageFormat0.setFormatsByArgumentIndex(formatArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "8nU{3 }";
      HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>();
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertNotNull(hashMap0);
      
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0, (Map<String, ? extends FormatFactory>) hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals("8nU{3}", extendedMessageFormat0.toPattern());
      assertNotNull(extendedMessageFormat0);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "Y)?G1}[o";
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0);
      assertEquals("Y)?G1}[o", extendedMessageFormat0.toPattern());
      assertNotNull(extendedMessageFormat0);
      
      Format[] formatArray0 = new Format[3];
      // Undeclared exception!
      try {
        extendedMessageFormat0.setFormats(formatArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "Zk!O9k^v|(f4";
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals("Zk!O9k^v|(f4", extendedMessageFormat0.toPattern());
      assertNotNull(extendedMessageFormat0);
      
      String string1 = extendedMessageFormat0.toPattern();
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals("Zk!O9k^v|(f4", extendedMessageFormat0.toPattern());
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("Zk!O9k^v|(f4", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }
}
