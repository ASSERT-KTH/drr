/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:09:09 GMT 2014
 */

package org.apache.commons.lang3.math;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;




import org.junit.runner.RunWith;


public class NumberUtilsEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      String string0 = "6l";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test001()  throws Throwable  {
      String string0 = "F";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test002()  throws Throwable  {
      String string0 = "..";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test003()  throws Throwable  {
      String string0 = "E";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test004()  throws Throwable  {
      String string0 = "-.";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test005()  throws Throwable  {
      String string0 = "--yiF";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test006()  throws Throwable  {
      String string0 = "+UV(-GgxQa6";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test007()  throws Throwable  {
      String string0 = "\\ pj+S.UE596Z#_hV";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test008()  throws Throwable  {
      String string0 = "e.G:z#6F8El\\d";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test009()  throws Throwable  {
      String string0 = "-";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test010()  throws Throwable  {
      String string0 = "0xyiFadbx5l";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test011()  throws Throwable  {
      String string0 = "-0xf.";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test012()  throws Throwable  {
      String string0 = "-0x";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test013()  throws Throwable  {
      String string0 = "...";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test014()  throws Throwable  {
      String string0 = "g";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test015()  throws Throwable  {
      String string0 = "-0xD6";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test017()  throws Throwable  {
      String string0 = "0E<";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test018()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test019()  throws Throwable  {
      byte byte0 = (byte)48;
      byte byte1 = (byte)62;
      byte byte2 = NumberUtils.max(byte0, byte0, byte1);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertEquals((byte)62, byte2);
  }

  @Test
  public void test020()  throws Throwable  {
      String string0 = "0Xhx&APu<B *i";
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
      
      byte byte1 = (byte)116;
      assertFalse(byte1 == byte0);
      
      byte byte2 = NumberUtils.max(byte0, byte1, byte1);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertEquals((byte)116, byte2);
  }

  @Test
  public void test021()  throws Throwable  {
      short short0 = (short)2;
      short short1 = (short)32;
      short short2 = NumberUtils.max(short0, short0, short1);
      assertFalse(short0 == short2);
      assertFalse(short0 == short1);
      assertTrue(short2 == short1);
      assertFalse(short2 == short0);
      assertTrue(short1 == short2);
      assertFalse(short1 == short0);
      assertEquals((short)32, short2);
  }

  @Test
  public void test022()  throws Throwable  {
      short short0 = (short) (-1572);
      byte byte0 = (byte)2;
      short short1 = NumberUtils.max(short0, (short) byte0, (short) byte0);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertEquals((short)2, short1);
  }

  @Test
  public void test023()  throws Throwable  {
      short short0 = (short)102;
      int int0 = (-1070);
      int int1 = 3;
      int int2 = NumberUtils.max(int0, int1, (int) short0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertEquals(102, int2);
  }

  @Test
  public void test024()  throws Throwable  {
      short short0 = (short)102;
      int int0 = (-1070);
      int int1 = NumberUtils.max(int0, (int) short0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(102, int1);
  }

  @Test
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)81;
      byteArray0[0] = byte0;
      int int0 = NumberUtils.max((int) byteArray0[0], (int) byte0, (int) byteArray0[0]);
      assertArrayEquals(new byte[] {(byte)81, (byte)0}, byteArray0);
      assertEquals(81, int0);
  }

  @Test
  public void test026()  throws Throwable  {
      int int0 = 43;
      byte byte0 = (byte)93;
      long long0 = NumberUtils.max((long) int0, (long) byte0, (long) int0);
      assertEquals(93L, long0);
  }

  @Test
  public void test027()  throws Throwable  {
      String string0 = null;
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
      
      short short0 = (short) (-3705);
      long long0 = NumberUtils.max((long) short0, (long) short0, (long) int0);
      assertEquals(0L, long0);
  }

  @Test
  public void test028()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = (byte) (-66);
      byte byte2 = NumberUtils.min(byte0, byte0, byte1);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertEquals((byte) (-66), byte2);
  }

  @Test
  public void test029()  throws Throwable  {
      byte byte0 = (byte)10;
      byte byte1 = (byte)16;
      byte byte2 = NumberUtils.min(byte1, byte0, byte0);
      assertTrue(byte2 == byte0);
      assertFalse(byte2 == byte1);
      assertFalse(byte0 == byte1);
      assertTrue(byte0 == byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte1 == byte2);
      assertEquals((byte)10, byte2);
  }

  @Test
  public void test030()  throws Throwable  {
      short short0 = (short)0;
      short short1 = (short)441;
      short short2 = NumberUtils.min(short1, short1, short0);
      assertFalse(short0 == short1);
      assertTrue(short0 == short2);
      assertTrue(short2 == short0);
      assertFalse(short2 == short1);
      assertFalse(short1 == short2);
      assertFalse(short1 == short0);
      assertEquals((short)0, short2);
  }

  @Test
  public void test031()  throws Throwable  {
      short short0 = (short)120;
      short short1 = (short)0;
      short short2 = NumberUtils.min(short0, short1, short1);
      assertTrue(short1 == short2);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertFalse(short0 == short2);
      assertTrue(short2 == short1);
      assertFalse(short2 == short0);
      assertEquals((short)0, short2);
  }

  @Test
  public void test032()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = NumberUtils.min(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals((short)0, short0);
      
      int int0 = (-2535);
      int int1 = NumberUtils.min((int) short0, (int) short0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals((-2535), int1);
  }

  @Test
  public void test033()  throws Throwable  {
      int int0 = 3090;
      byte byte0 = (byte) (-17);
      int int1 = NumberUtils.min(int0, (int) byte0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-17), int1);
  }

  @Test
  public void test034()  throws Throwable  {
      String string0 = "0xVY@b};=L1BfRDmgsyODE";
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
      
      int int0 = (-1900);
      long long0 = NumberUtils.min((long) byte0, (long) byte0, (long) int0);
      assertEquals((-1900L), long0);
  }

  @Test
  public void test035()  throws Throwable  {
      short short0 = (short) (-1037);
      long long0 = (-1869L);
      long long1 = NumberUtils.min((long) short0, long0, long0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals((-1869L), long1);
  }

  @Test
  public void test036()  throws Throwable  {
      short[] shortArray0 = new short[8];
      short short0 = (short)8;
      shortArray0[0] = short0;
      shortArray0[1] = shortArray0[0];
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) shortArray0[1];
      float float0 = NumberUtils.max(floatArray0);
      assertArrayEquals(new float[] {0.0F, 8.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8.0F, float0, 0.01F);
  }

  @Test
  public void test037()  throws Throwable  {
      float[] floatArray0 = new float[4];
      float float0 = Float.NaN;
      floatArray0[3] = float0;
      float float1 = NumberUtils.max(floatArray0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, Float.NaN}, floatArray0, 0.01F);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 1611.38230906;
      doubleArray0[2] = double0;
      double double1 = NumberUtils.max(doubleArray0);
      assertTrue(double1 == double0);
      assertArrayEquals(new double[] {0.0, 0.0, 1611.38230906, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1611.38230906, double1, 0.01D);
  }

  @Test
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = Double.NaN;
      doubleArray0[6] = double0;
      double double1 = NumberUtils.max(doubleArray0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test040()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try {
        double double0 = NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte)55;
      byteArray0[1] = byte0;
      byte byte1 = NumberUtils.max(byteArray0);
      assertTrue(byte1 == byte0);
      assertArrayEquals(new byte[] {(byte)0, (byte)55, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((byte)55, byte1);
  }

  @Test
  public void test042()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short short0 = (short)538;
      shortArray0[3] = short0;
      short short1 = NumberUtils.max(shortArray0);
      assertTrue(short1 == short0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)538, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals((short)538, short1);
  }

  @Test
  public void test043()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test044()  throws Throwable  {
      short short0 = (short)74;
      int[] intArray0 = new int[3];
      intArray0[2] = (int) short0;
      int int0 = NumberUtils.max(intArray0);
      assertArrayEquals(new int[] {0, 0, 74}, intArray0);
      assertEquals(74, int0);
  }

  @Test
  public void test045()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)81;
      byteArray0[0] = byte0;
      long[] longArray0 = new long[7];
      longArray0[3] = (long) byteArray0[0];
      long long0 = NumberUtils.max(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 81L, 0L, 0L, 0L}, longArray0);
      assertEquals(81L, long0);
  }

  @Test
  public void test047()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try {
        long long0 = NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test048()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float float0 = 4121.39F;
      floatArray0[0] = float0;
      float float1 = NumberUtils.min(floatArray0);
      assertFalse(float1 == float0);
      assertArrayEquals(new float[] {4121.39F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test
  public void test049()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float float0 = Float.NaN;
      floatArray0[6] = float0;
      float float1 = NumberUtils.min(floatArray0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, Float.NaN, 0.0F, 0.0F}, floatArray0, 0.01F);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test
  public void test050()  throws Throwable  {
      float[] floatArray0 = null;
      // Undeclared exception!
      try {
        float float0 = NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test051()  throws Throwable  {
      short short0 = (short)120;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) short0;
      double double0 = NumberUtils.min(doubleArray0);
      assertArrayEquals(new double[] {120.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = Double.NaN;
      doubleArray0[6] = double0;
      double double1 = NumberUtils.min(doubleArray0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test053()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try {
        double double0 = NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)21;
      byteArray0[0] = byte0;
      byte byte1 = NumberUtils.min(byteArray0);
      assertFalse(byte1 == byte0);
      assertArrayEquals(new byte[] {(byte)21, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((byte)0, byte1);
  }

  @Test
  public void test055()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try {
        byte byte0 = NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)57;
      byteArray0[1] = byte0;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) byteArray0[1];
      short short0 = NumberUtils.min(shortArray0);
      assertArrayEquals(new short[] {(short)57, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals((short)0, short0);
  }

  @Test
  public void test057()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = 256;
      intArray0[0] = int0;
      int int1 = NumberUtils.min(intArray0);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {256, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, int1);
  }

  @Test
  public void test058()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test059()  throws Throwable  {
      long[] longArray0 = new long[10];
      long long0 = 1L;
      longArray0[0] = long0;
      long long1 = NumberUtils.min(longArray0);
      assertFalse(long1 == long0);
      assertArrayEquals(new long[] {1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(0L, long1);
  }

  @Test
  public void test060()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try {
        long long0 = NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test061()  throws Throwable  {
      String string0 = null;
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
      assertNull(bigDecimal0);
  }

  @Test
  public void test062()  throws Throwable  {
      String string0 = null;
      BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
      assertNull(bigInteger0);
  }

  @Test
  public void test063()  throws Throwable  {
      String string0 = null;
      Long long0 = NumberUtils.createLong(string0);
  }

  @Test
  public void test064()  throws Throwable  {
      String string0 = null;
      Integer integer0 = NumberUtils.createInteger(string0);
  }

  @Test
  public void test065()  throws Throwable  {
      String string0 = null;
      Double double0 = NumberUtils.createDouble(string0);
  }

  @Test
  public void test066()  throws Throwable  {
      String string0 = null;
      Float float0 = NumberUtils.createFloat(string0);
  }

  @Test
  public void test067()  throws Throwable  {
      String string0 = "D6";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"D6\"
         //
      }
  }

  @Test
  public void test068()  throws Throwable  {
      String string0 = "6l";
      Long long0 = (Long)NumberUtils.createNumber(string0);
      assertEquals(6L, (long)long0);
  }

  @Test
  public void test069()  throws Throwable  {
      String string0 = "Strings must not be null";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Strings must not be null is not a valid number.
         //
      }
  }

  @Test
  public void test070()  throws Throwable  {
      String string0 = "9A{jWMl0<Pk#f";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 9A{jWMl0<Pk#f is not a valid number.
         //
      }
  }

  @Test
  public void test071()  throws Throwable  {
      String string0 = "SecurityException occurred";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // SecurityException occurred is not a valid number.
         //
      }
  }

  @Test
  public void test072()  throws Throwable  {
      String string0 = "kb\" FsMC<P9S4{%h6L";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // kb\" FsMC<P9S4{%h6L is not a valid number.
         //
      }
  }

  @Test
  public void test073()  throws Throwable  {
      String string0 = "F";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // F is not a valid number.
         //
      }
  }

  @Test
  public void test074()  throws Throwable  {
      String string0 = "F>;)l~c|LD";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // F>;)l~c|LD is not a valid number.
         //
      }
  }

  @Test
  public void test075()  throws Throwable  {
      String string0 = "0Erp&3#U";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0Erp&3#U is not a valid number.
         //
      }
  }

  @Test
  public void test076()  throws Throwable  {
      String string0 = "Minium abbrviation width with ffset i 7";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test077()  throws Throwable  {
      String string0 = "aXgze";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // aXgze is not a valid number.
         //
      }
  }

  @Test
  public void test078()  throws Throwable  {
      String string0 = "ScurityExcption occurred";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ScurityExcption occurred is not a valid number.
         //
      }
  }

  @Test
  public void test079()  throws Throwable  {
      String string0 = "\\;jaS.E5PZe+OV";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // \\;jaS.E5PZe+OV is not a valid number.
         //
      }
  }

  @Test
  public void test080()  throws Throwable  {
      String string0 = "sk|<Sz&ENbD GA29-.";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // sk|<Sz&ENbD GA29-. is not a valid number.
         //
      }
  }

  @Test
  public void test081()  throws Throwable  {
      String string0 = "...";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test082()  throws Throwable  {
      String string0 = "\\ pj+S.UE596Z#_hV";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // \\ pj+S.UE596Z#_hV is not a valid number.
         //
      }
  }

  @Test
  public void test083()  throws Throwable  {
      String string0 = "-0X-.Y";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Sign character in wrong position
         //
      }
  }

  @Test
  public void test084()  throws Throwable  {
      String string0 = "0X";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
      }
  }

  @Test
  public void test085()  throws Throwable  {
      String string0 = "-0x";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
      }
  }

  @Test
  public void test086()  throws Throwable  {
      String string0 = "0xyiFadbx5l";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"yiFadbx5l\"
         //
      }
  }

  @Test
  public void test087()  throws Throwable  {
      String string0 = "--";
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test088()  throws Throwable  {
      String string0 = " ";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test089()  throws Throwable  {
      String string0 = null;
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test090()  throws Throwable  {
      String string0 = null;
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
  }

  @Test
  public void test091()  throws Throwable  {
      String string0 = null;
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
  }

  @Test
  public void test092()  throws Throwable  {
      String string0 = null;
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test093()  throws Throwable  {
      String string0 = null;
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test094()  throws Throwable  {
      String string0 = null;
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
  }

  @Test
  public void test095()  throws Throwable  {
      String string0 = "0Xhx&APu<B *i";
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test096()  throws Throwable  {
      float float0 = Float.NaN;
      float float1 = NumberUtils.max(float0, float0, float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test
  public void test097()  throws Throwable  {
      String string0 = "IllegalArgumentException occurred";
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
  }

  @Test
  public void test098()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = NumberUtils.min(float0, float0, float0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test
  public void test099()  throws Throwable  {
      double double0 = Double.NaN;
      double double1 = NumberUtils.min(double0, double0, double0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test100()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      assertNotNull(numberUtils0);
  }

  @Test
  public void test101()  throws Throwable  {
      String string0 = "The Array must not be null";
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
  }

  @Test
  public void test102()  throws Throwable  {
      String string0 = "0Xhx&APu<B *i";
      double double0 = 3926.14197801186;
      double double1 = NumberUtils.toDouble(string0, double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(3926.14197801186, double1, 0.01D);
      
      double double2 = NumberUtils.max(double1, double0, double0);
      assertTrue(double1 == double0);
      assertTrue(double1 == double2);
      assertTrue(double2 == double0);
      assertTrue(double2 == double1);
      assertTrue(double0 == double1);
      assertTrue(double0 == double2);
      assertEquals(3926.14197801186, double2, 0.01D);
  }

  @Test
  public void test103()  throws Throwable  {
      String string0 = "0Xhx&APu<B *i";
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test104()  throws Throwable  {
      String string0 = "0E<";
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
  }
}
