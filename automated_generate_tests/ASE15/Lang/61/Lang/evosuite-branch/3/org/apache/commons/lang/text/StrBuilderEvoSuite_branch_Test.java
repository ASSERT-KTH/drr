/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:55:42 GMT 2014
 */

package org.apache.commons.lang.text;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import org.apache.commons.lang.text.StrBuilder;
import org.apache.commons.lang.text.StrMatcher;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class StrBuilderEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      
      char[] charArray0 = new char[6];
      char char0 = '.';
      charArray0[0] = char0;
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      
      long long0 = strBuilder_StrBuilderReader0.skip((long) charArray0[0]);
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {'.', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test
  public void test001()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      
      long long0 = (-338L);
      long long1 = strBuilder_StrBuilderReader0.skip(long0);
      assertEquals(0L, long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test
  public void test002()  throws Throwable  {
      String string0 = "hzlD9Dj";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.size());
      assertEquals(39, strBuilder0.capacity());
      assertEquals(7, strBuilder0.length());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.size());
      assertEquals(39, strBuilder0.capacity());
      assertEquals(7, strBuilder0.length());
      
      char[] charArray0 = new char[3];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals(3, int0);
      assertArrayEquals(new char[] {'h', 'z', 'l'}, charArray0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.size());
      assertEquals(39, strBuilder0.capacity());
      assertEquals(7, strBuilder0.length());
  }

  @Test
  public void test003()  throws Throwable  {
      int int0 = 3346;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(3346, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(3346, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      
      char[] charArray0 = new char[3];
      int int1 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(3346, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
  }

  @Test
  public void test004()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      char[] charArray0 = new char[9];
      int int0 = 0;
      int int1 = strBuilder_StrBuilderReader0.read(charArray0, int0, int0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test
  public void test005()  throws Throwable  {
      String string0 = "U0.";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(35, strBuilder0.capacity());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      char char0 = '$';
      char[] charArray0 = new char[10];
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(35, strBuilder0.capacity());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      int int0 = 0;
      // Undeclared exception!
      try {
        int int1 = strBuilder_StrBuilderReader0.read(charArray0, int0, (int) char0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test006()  throws Throwable  {
      String string0 = "S,QG2<*_aF";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(42, strBuilder0.capacity());
      assertEquals(10, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.size());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(42, strBuilder0.capacity());
      assertEquals(10, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.size());
      
      char[] charArray0 = new char[6];
      char char0 = '[';
      charArray0[0] = char0;
      charArray0[5] = charArray0[0];
      // Undeclared exception!
      try {
        int int0 = strBuilder_StrBuilderReader0.read(charArray0, (int) charArray0[5], (int) charArray0[5]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test007()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      
      char[] charArray0 = new char[9];
      char char0 = 'L';
      int int0 = (-1660);
      // Undeclared exception!
      try {
        int int1 = strBuilder_StrBuilderReader0.read(charArray0, int0, (int) char0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test008()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertEquals((-1), int0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
  }

  @Test
  public void test009()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      String string0 = strBuilder_StrBuilderTokenizer0.getContent();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test
  public void test010()  throws Throwable  {
      String string0 = "TKvW";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(4, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(36, strBuilder0.capacity());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      
      char[] charArray0 = new char[7];
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(4, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(36, strBuilder0.capacity());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      
      List list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, charArray0[4], charArray0[0]);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(list0);
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(4, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(36, strBuilder0.capacity());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test
  public void test011()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      
      int int0 = 101;
      String string0 = "pyu0)TY^+vfEB6_H`M";
      int int1 = strBuilder0.lastIndexOf(string0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      
      // Undeclared exception!
      try {
        char[] charArray0 = strBuilder0.toCharArray(int1, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
      }
  }

  @Test
  public void test012()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      
      boolean boolean0 = false;
      StrBuilder strBuilder1 = strBuilder0.append(boolean0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      
      int int0 = strBuilder0.hashCode();
      assertEquals(96808483, int0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
  }

  @Test
  public void test013()  throws Throwable  {
      int int0 = 3346;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3346, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = strBuilder0.equals(object0);
      assertFalse(boolean0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3346, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
  }

  @Test
  public void test014()  throws Throwable  {
      char char0 = '+';
      StrBuilder strBuilder0 = new StrBuilder((int) char0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = new StrBuilder((int) char0);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(43, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      
      boolean boolean0 = strBuilder1.equals(strBuilder0);
      assertTrue(boolean0);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder0, strBuilder1);
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(43, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
  }

  @Test
  public void test015()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      boolean boolean0 = strBuilder0.equals((Object) strBuilder0);
      assertTrue(boolean0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test
  public void test016()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      
      char char0 = 'd';
      StrBuilder strBuilder1 = new StrBuilder((int) char0);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(100, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      
      StrBuilder strBuilder2 = strBuilder1.appendFixedWidthPadRight((int) char0, (int) char0, char0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      assertEquals(100, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(100, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(100, strBuilder1.length());
      assertEquals(100, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(100, strBuilder2.size());
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(100, strBuilder2.length());
      
      boolean boolean0 = strBuilder0.equals(strBuilder2);
      assertFalse(boolean0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertEquals(100, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(100, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(100, strBuilder1.length());
      assertEquals(100, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(100, strBuilder2.size());
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(100, strBuilder2.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test
  public void test017()  throws Throwable  {
      String string0 = "hzlD9Dj";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(7, strBuilder0.size());
      assertEquals(7, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(39, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      
      String string1 = "Nk,9^`g";
      assertNotSame(string1, string0);
      
      char char0 = '.';
      StrBuilder strBuilder1 = new StrBuilder((int) char0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(46, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder1.new StrBuilderWriter();
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(46, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      
      strBuilder_StrBuilderWriter0.write(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotSame(string1, string0);
      assertNotSame(strBuilder1, strBuilder0);
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(46, strBuilder1.capacity());
      assertEquals(7, strBuilder1.length());
      assertEquals(7, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
      assertFalse(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertNotSame(string0, string1);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder0, strBuilder1);
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(46, strBuilder1.capacity());
      assertEquals(7, strBuilder1.length());
      assertEquals(7, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(7, strBuilder0.size());
      assertEquals(7, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(39, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
  }

  @Test
  public void test018()  throws Throwable  {
      String string0 = "hzlD9Dj";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(7, strBuilder0.size());
      assertEquals(39, strBuilder0.capacity());
      assertEquals(7, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      
      char[] charArray0 = new char[3];
      StrBuilder strBuilder1 = new StrBuilder((int) charArray0[2]);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotSame(strBuilder1, strBuilder0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strBuilder1);
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder1.new StrBuilderWriter();
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotSame(strBuilder1, strBuilder0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      
      strBuilder_StrBuilderWriter0.write(string0);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotSame(strBuilder1, strBuilder0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(7, strBuilder1.length());
      assertEquals(7, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
      assertTrue(boolean0);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, strBuilder0.size());
      assertEquals(39, strBuilder0.capacity());
      assertEquals(7, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(7, strBuilder1.length());
      assertEquals(7, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
  }

  @Test
  public void test019()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      
      char char0 = 'd';
      StrBuilder strBuilder1 = new StrBuilder((int) char0);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(100, strBuilder1.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      
      StrBuilder strBuilder2 = strBuilder1.appendFixedWidthPadRight((int) char0, (int) char0, char0);
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertNotNull(strBuilder2);
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(100, strBuilder2.size());
      assertEquals(100, strBuilder2.length());
      assertEquals(100, strBuilder2.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(100, strBuilder1.capacity());
      assertEquals(100, strBuilder1.length());
      assertEquals(100, strBuilder1.size());
      
      boolean boolean0 = strBuilder2.equalsIgnoreCase(strBuilder0);
      assertFalse(boolean0);
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(100, strBuilder2.size());
      assertEquals(100, strBuilder2.length());
      assertEquals(100, strBuilder2.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(100, strBuilder1.capacity());
      assertEquals(100, strBuilder1.length());
      assertEquals(100, strBuilder1.size());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
  }

  @Test
  public void test020()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      
      float float0 = 310.2255F;
      StrBuilder strBuilder1 = strBuilder0.append(float0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(8, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(8, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(8, strBuilder1.length());
      
      char[] charArray0 = new char[9];
      char char0 = '-';
      char char1 = '.';
      charArray0[3] = char1;
      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = (StrMatcher.CharSetMatcher)StrMatcher.charSetMatcher(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '.', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strMatcher_CharSetMatcher0);
      
      int int0 = strBuilder1.lastIndexOf((StrMatcher) strMatcher_CharSetMatcher0, (int) char0);
      assertEquals(3, int0);
      assertFalse(char0 == char1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '.', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(8, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(8, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(8, strBuilder1.length());
  }

  @Test
  public void test021()  throws Throwable  {
      int int0 = 332;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(332, strBuilder0.capacity());
      
      char char0 = '!';
      StrMatcher strMatcher0 = null;
      int int1 = strBuilder0.lastIndexOf(strMatcher0, (int) char0);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(332, strBuilder0.capacity());
  }

  @Test
  public void test022()  throws Throwable  {
      int int0 = 332;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(332, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(332, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      
      char char0 = '!';
      int int1 = 0;
      String string0 = strBuilder0.substring(int1, int0);
      assertEquals("", string0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(string0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(332, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) string0, int0, char0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(332, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(332, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(332, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(332, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(332, strBuilder1.capacity());
      assertEquals(332, strBuilder1.length());
      
      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = (StrMatcher.CharSetMatcher)strBuilder_StrBuilderTokenizer0.getDelimiterMatcher();
      assertFalse(int0 == int1);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strMatcher_CharSetMatcher0);
      assertEquals(332, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(332, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(332, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      
      int int2 = strBuilder0.lastIndexOf((StrMatcher) strMatcher_CharSetMatcher0, (int) char0);
      assertEquals((-1), int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(332, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(332, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(332, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
  }

  @Test
  public void test023()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      
      int int0 = 101;
      char char0 = '6';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) strBuilder0, int0, char0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(101, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(101, strBuilder0.length());
      assertEquals(101, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertEquals(101, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(101, strBuilder1.capacity());
      assertEquals(101, strBuilder1.size());
      
      String string0 = "pyu0)TY^+vfEB6_H`M";
      int int1 = strBuilder0.lastIndexOf(string0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(101, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(101, strBuilder0.length());
      assertEquals(101, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
  }

  @Test
  public void test024()  throws Throwable  {
      String string0 = "U0.";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(35, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      
      char char0 = '$';
      String string1 = ">";
      assertNotSame(string1, string0);
      
      int int0 = strBuilder0.lastIndexOf(string1, (int) char0);
      assertEquals((-1), int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNull(strBuilder0.getNullText());
      assertEquals(35, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
  }

  @Test
  public void test025()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      
      boolean boolean0 = false;
      StrBuilder strBuilder1 = strBuilder0.append(boolean0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      
      String string0 = "Invalid length: ";
      int int0 = strBuilder1.lastIndexOf(string0);
      assertEquals((-1), int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
  }

  @Test
  public void test026()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      
      char char0 = ':';
      StrBuilder strBuilder1 = strBuilder0.insert(int0, (long) char0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(2, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(2, strBuilder1.length());
      
      int int1 = strBuilder1.lastIndexOf(string0);
      assertEquals(1, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(2, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(2, strBuilder1.length());
  }

  @Test
  public void test027()  throws Throwable  {
      String string0 = "TKvW";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(36, strBuilder0.capacity());
      assertEquals(4, strBuilder0.size());
      
      char[] charArray0 = new char[7];
      String string1 = null;
      int int0 = strBuilder0.lastIndexOf(string1, (int) charArray0[4]);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(36, strBuilder0.capacity());
      assertEquals(4, strBuilder0.size());
  }

  @Test
  public void test028()  throws Throwable  {
      String string0 = "'RRV&MO";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(8, strBuilder0.size());
      assertEquals(8, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(40, strBuilder0.capacity());
      
      char char0 = 'h';
      int int0 = strBuilder0.lastIndexOf(string0, (int) char0);
      assertEquals(0, int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(8, strBuilder0.size());
      assertEquals(8, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(40, strBuilder0.capacity());
  }

  @Test
  public void test029()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      
      double double0 = 3102.537;
      StrBuilder strBuilder1 = strBuilder0.append(double0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(8, strBuilder1.size());
      assertEquals(8, strBuilder1.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(8, strBuilder0.length());
      assertEquals(8, strBuilder0.size());
      
      char char0 = '2';
      int int0 = strBuilder0.lastIndexOf(char0);
      assertEquals(3, int0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(8, strBuilder0.length());
      assertEquals(8, strBuilder0.size());
  }

  @Test
  public void test030()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      
      char[] charArray0 = new char[10];
      int int0 = strBuilder0.lastIndexOf(charArray0[1], (int) charArray0[0]);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
  }

  @Test
  public void test031()  throws Throwable  {
      String string0 = "=eGNaX%h?s";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(42, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.length());
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = (StrMatcher.TrimMatcher)StrMatcher.trimMatcher();
      assertNotNull(strMatcher_TrimMatcher0);
      
      int int0 = strBuilder0.indexOf((StrMatcher) strMatcher_TrimMatcher0);
      assertEquals((-1), int0);
      assertEquals(42, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.length());
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test
  public void test032()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      String string0 = "Invalid length: ";
      StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher(string0);
      assertNotNull(strMatcher_StringMatcher0);
      
      int int0 = (-17);
      int int1 = strBuilder0.indexOf((StrMatcher) strMatcher_StringMatcher0, int0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
  }

  @Test
  public void test033()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      
      String string0 = "Invalid length: ";
      int int0 = 44;
      char char0 = 'K';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(int0, int0, char0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(44, strBuilder0.size());
      assertEquals(44, strBuilder0.capacity());
      assertEquals(44, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(44, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(44, strBuilder1.length());
      assertEquals(44, strBuilder1.size());
      
      StrBuilder strBuilder2 = strBuilder1.replaceAll(string0, string0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder2);
      assertNull(strBuilder0.getNullText());
      assertEquals(44, strBuilder0.size());
      assertEquals(44, strBuilder0.capacity());
      assertEquals(44, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(44, strBuilder2.length());
      assertEquals(44, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(44, strBuilder2.capacity());
      assertEquals(44, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(44, strBuilder1.length());
      assertEquals(44, strBuilder1.size());
  }

  @Test
  public void test034()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      
      float float0 = 310.2255F;
      StrBuilder strBuilder1 = strBuilder0.append(float0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(8, strBuilder0.length());
      assertEquals(8, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(8, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(8, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      
      String string0 = "Invalid offset: ";
      StrBuilder strBuilder2 = strBuilder1.deleteAll(string0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder2);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(8, strBuilder0.length());
      assertEquals(8, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(8, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(8, strBuilder2.size());
      assertEquals(8, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(8, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
  }

  @Test
  public void test035()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      
      int int0 = 101;
      char char0 = '6';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) strBuilder0, int0, char0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(101, strBuilder0.size());
      assertEquals(101, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(101, strBuilder0.length());
      assertEquals(101, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(101, strBuilder1.capacity());
      assertEquals(101, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      
      String string0 = "";
      int int1 = strBuilder0.indexOf(string0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(101, strBuilder0.size());
      assertEquals(101, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(101, strBuilder0.length());
  }

  @Test
  public void test036()  throws Throwable  {
      char char0 = '+';
      StrBuilder strBuilder0 = new StrBuilder((int) char0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(43, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      
      String string0 = null;
      int int0 = strBuilder0.indexOf(string0);
      assertEquals((-1), int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(43, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
  }

  @Test
  public void test037()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      
      int int0 = (-553);
      int int1 = strBuilder0.indexOf(string0, int0);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test
  public void test038()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      
      String string0 = "WpECiPc`IM6";
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) strBuilder0;
      assertNotNull(objectArray0[1]);
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      
      double double0 = 3102.537;
      StrBuilder strBuilder1 = strBuilder0.append(double0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(8, strBuilder1.length());
      assertEquals(8, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(8, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(8, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder2 = strBuilder0.appendWithSeparators(objectArray0, string0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder2);
      assertNull(strBuilder2.getNullText());
      assertEquals(71, strBuilder2.size());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(71, strBuilder2.capacity());
      assertEquals(71, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(71, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(71, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(71, strBuilder0.length());
      
      char char0 = 'F';
      String string1 = "R";
      assertNotSame(string1, string0);
      
      StrBuilder strBuilder3 = strBuilder0.replace((int) char0, (int) char0, string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder3);
      assertEquals(72, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(false, strBuilder3.isEmpty());
      assertEquals(72, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(72, strBuilder3.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(72, strBuilder0.capacity());
      assertEquals(72, strBuilder0.size());
      assertEquals(72, strBuilder0.length());
      
      boolean boolean0 = strBuilder1.contains(string1);
      assertTrue(boolean0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(72, strBuilder1.capacity());
      assertEquals(72, strBuilder1.size());
      assertEquals(72, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(72, strBuilder0.capacity());
      assertEquals(72, strBuilder0.size());
      assertEquals(72, strBuilder0.length());
  }

  @Test
  public void test039()  throws Throwable  {
      String string0 = "java.specification.vendor";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(25, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(25, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(57, strBuilder0.capacity());
      
      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = (StrMatcher.CharSetMatcher)StrMatcher.quoteMatcher();
      assertNotNull(strMatcher_CharSetMatcher0);
      
      int int0 = strBuilder0.lastIndexOf((StrMatcher) strMatcher_CharSetMatcher0);
      assertEquals((-1), int0);
      assertEquals(25, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(25, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(57, strBuilder0.capacity());
      
      char char0 = '!';
      int int1 = strBuilder0.indexOf(char0, int0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(25, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(25, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(57, strBuilder0.capacity());
  }

  @Test
  public void test040()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      
      int int0 = 44;
      char char0 = 'K';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(int0, int0, char0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(44, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(44, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(44, strBuilder1.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(44, strBuilder0.capacity());
      assertEquals(44, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(44, strBuilder0.length());
      
      char[] charArray0 = new char[3];
      charArray0[1] = char0;
      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = (StrMatcher.CharSetMatcher)StrMatcher.charSetMatcher(charArray0);
      assertArrayEquals(new char[] {'\u0000', 'K', '\u0000'}, charArray0);
      assertNotNull(strMatcher_CharSetMatcher0);
      
      boolean boolean0 = strBuilder0.contains((StrMatcher) strMatcher_CharSetMatcher0);
      assertTrue(boolean0);
      assertSame(strBuilder0, strBuilder1);
      assertArrayEquals(new char[] {'\u0000', 'K', '\u0000'}, charArray0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(44, strBuilder0.capacity());
      assertEquals(44, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(44, strBuilder0.length());
  }

  @Test
  public void test041()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = (StrMatcher.CharMatcher)StrMatcher.commaMatcher();
      assertNotNull(strMatcher_CharMatcher0);
      
      boolean boolean0 = strBuilder0.contains((StrMatcher) strMatcher_CharMatcher0);
      assertFalse(boolean0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test
  public void test042()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      
      String string0 = "WpECiPc`IM6";
      Object[] objectArray0 = new Object[5];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, string0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(44, strBuilder0.length());
      assertEquals(44, strBuilder0.capacity());
      assertEquals(44, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(44, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(44, strBuilder1.length());
      assertEquals(44, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      
      boolean boolean0 = strBuilder0.contains(string0);
      assertTrue(boolean0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(44, strBuilder0.length());
      assertEquals(44, strBuilder0.capacity());
      assertEquals(44, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
  }

  @Test
  public void test043()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      
      String string0 = "end < start";
      boolean boolean0 = strBuilder0.contains(string0);
      assertFalse(boolean0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
  }

  @Test
  public void test044()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      char char0 = 'E';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((Object) strBuilder0, (int) char0, char0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(69, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(69, strBuilder0.length());
      assertEquals(69, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(69, strBuilder1.length());
      assertEquals(69, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(69, strBuilder1.capacity());
      
      boolean boolean0 = strBuilder0.contains(char0);
      assertTrue(boolean0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(69, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(69, strBuilder0.length());
      assertEquals(69, strBuilder0.capacity());
  }

  @Test
  public void test045()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      
      char char0 = '.';
      boolean boolean0 = strBuilder0.contains(char0);
      assertFalse(boolean0);
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
  }

  @Test
  public void test046()  throws Throwable  {
      String string0 = "]";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(1, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(33, strBuilder0.capacity());
      
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) strBuilder0;
      assertNotNull(objectArray0[1]);
      assertEquals(1, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(33, strBuilder0.capacity());
      
      objectArray0[3] = (Object) string0;
      assertNotNull(objectArray0[3]);
      
      String string1 = "=D=]Z{b";
      assertNotSame(string1, string0);
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(59, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(59, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(59, strBuilder1.length());
      assertEquals(59, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(59, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(59, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      
      int int0 = 57;
      char char0 = ':';
      StrBuilder strBuilder2 = strBuilder1.appendPadding(int0, char0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotNull(strBuilder2);
      assertEquals(116, strBuilder1.size());
      assertEquals(116, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(116, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(116, strBuilder2.size());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(116, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(116, strBuilder2.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(116, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(116, strBuilder0.capacity());
      assertEquals(116, strBuilder0.length());
      
      String string2 = strBuilder2.midString((int) char0, int0);
      assertEquals("::::::::::::::::::::::::::::::::::::::::::::::::::::::::", string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotNull(string2);
      assertEquals(116, strBuilder1.size());
      assertEquals(116, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(116, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(116, strBuilder2.size());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(116, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(116, strBuilder2.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(116, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(116, strBuilder0.capacity());
      assertEquals(116, strBuilder0.length());
  }

  @Test
  public void test047()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      
      char char0 = 'E';
      int int0 = strBuilder0.indexOf(char0);
      assertEquals((-1), int0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      
      boolean boolean0 = false;
      StrBuilder strBuilder1 = strBuilder0.append(boolean0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder0.size());
      
      String string0 = strBuilder0.midString(int0, (int) char0);
      assertEquals("false", string0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(string0);
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder0.size());
  }

  @Test
  public void test048()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      
      char char0 = 'L';
      String string0 = strBuilder0.midString((int) char0, int0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test
  public void test049()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      
      char char0 = 'E';
      int int0 = strBuilder0.indexOf(char0);
      assertEquals((-1), int0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      
      String string0 = strBuilder0.midString(int0, (int) char0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
  }

  @Test
  public void test050()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      
      char char0 = 'x';
      StrBuilder strBuilder1 = strBuilder0.setLength((int) char0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(120, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(120, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(120, strBuilder1.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(120, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(120, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(120, strBuilder0.size());
      
      int int0 = 4;
      String string0 = strBuilder1.rightString(int0);
      assertEquals("\u0000\u0000\u0000\u0000", string0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(string0);
      assertEquals(120, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(120, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(120, strBuilder1.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(120, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(120, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(120, strBuilder0.size());
  }

  @Test
  public void test051()  throws Throwable  {
      int int0 = (-97);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      
      String string0 = strBuilder0.rightString(int0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
  }

  @Test
  public void test052()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      
      char char0 = 'E';
      String string0 = strBuilder0.rightString((int) char0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
  }

  @Test
  public void test053()  throws Throwable  {
      String string0 = "Invalid offset: ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.size());
      
      int int0 = strBuilder0.length();
      assertEquals(16, int0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.append(strBuilder0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(48, strBuilder1.capacity());
      assertEquals(32, strBuilder1.length());
      assertEquals(32, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.size());
      assertEquals(32, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(48, strBuilder0.capacity());
      
      String string1 = strBuilder0.leftString(int0);
      assertEquals("Invalid offset: ", string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.size());
      assertEquals(32, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(48, strBuilder0.capacity());
  }

  @Test
  public void test054()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      int int0 = strBuilder0.length();
      assertEquals(0, int0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      String string1 = strBuilder0.leftString(int0);
      assertEquals("", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
  }

  @Test
  public void test055()  throws Throwable  {
      String string0 = "Invalid offset: ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.size());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      char char0 = 'f';
      String string1 = strBuilder0.leftString((int) char0);
      assertEquals("Invalid offset: ", string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.size());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test
  public void test056()  throws Throwable  {
      String string0 = "Invalid offset: ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      
      boolean boolean0 = strBuilder0.endsWith(string0);
      assertTrue(boolean0);
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
  }

  @Test
  public void test057()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      int int0 = 101;
      char char0 = '6';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) strBuilder0, int0, char0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(101, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(101, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(101, strBuilder1.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(101, strBuilder0.length());
      assertEquals(101, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(101, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      
      String string0 = ", Length: 0";
      boolean boolean0 = strBuilder0.endsWith(string0);
      assertFalse(boolean0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(101, strBuilder0.length());
      assertEquals(101, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(101, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
  }

  @Test
  public void test058()  throws Throwable  {
      String string0 = "'>jM,";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertEquals(37, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      String string1 = "";
      assertNotSame(string1, string0);
      
      boolean boolean0 = strBuilder0.endsWith(string1);
      assertTrue(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertEquals(37, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
  }

  @Test
  public void test059()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      
      String string0 = null;
      boolean boolean0 = strBuilder0.endsWith(string0);
      assertFalse(boolean0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
  }

  @Test
  public void test060()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      
      String string0 = "pjWh2CXKyaaHvSLF?!Xx";
      boolean boolean0 = strBuilder0.endsWith(string0);
      assertFalse(boolean0);
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
  }

  @Test
  public void test061()  throws Throwable  {
      String string0 = "Invalid offset: ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(48, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      String string1 = "LF/h\\";
      assertNotSame(string1, string0);
      
      boolean boolean0 = strBuilder0.startsWith(string1);
      assertFalse(boolean0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(48, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
  }

  @Test
  public void test062()  throws Throwable  {
      String string0 = "Invalid offset: ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      boolean boolean0 = strBuilder0.startsWith(string0);
      assertTrue(boolean0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test
  public void test063()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      
      boolean boolean0 = strBuilder0.startsWith(string0);
      assertTrue(boolean0);
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
  }

  @Test
  public void test064()  throws Throwable  {
      String string0 = "=eGNaX%h?s";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(42, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.length());
      
      String string1 = null;
      boolean boolean0 = strBuilder0.startsWith(string1);
      assertFalse(boolean0);
      assertEquals(42, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.length());
  }

  @Test
  public void test065()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      String string0 = "!SQs5~akK";
      boolean boolean0 = strBuilder0.startsWith(string0);
      assertFalse(boolean0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test
  public void test066()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      
      int int0 = 0;
      char char0 = 'x';
      StrBuilder strBuilder1 = strBuilder0.insert(int0, char0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.size());
      
      StrBuilder strBuilder2 = strBuilder0.setLength((int) char0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(120, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(120, strBuilder0.capacity());
      assertEquals(120, strBuilder0.length());
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(120, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(120, strBuilder2.capacity());
      assertEquals(120, strBuilder2.length());
      
      StrBuilder strBuilder3 = strBuilder1.trim();
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertNotNull(strBuilder3);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(120, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(1, strBuilder3.size());
      assertEquals(120, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertEquals(1, strBuilder3.length());
      assertEquals(false, strBuilder3.isEmpty());
      assertEquals(1, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.size());
      assertEquals(120, strBuilder1.capacity());
  }

  @Test
  public void test067()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      char char0 = ';';
      StrBuilder strBuilder1 = strBuilder0.append((float) char0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(4, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(4, strBuilder1.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      
      StrBuilder strBuilder2 = strBuilder0.trim();
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotNull(strBuilder2);
      assertEquals(4, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(4, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
  }

  @Test
  public void test068()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
  }

  @Test
  public void test069()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.reverse();
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
  }

  @Test
  public void test070()  throws Throwable  {
      String string0 = ")~n/Bd(w#z$Kh>+";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(47, strBuilder0.capacity());
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.reverse();
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(15, strBuilder1.size());
      assertEquals(47, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(15, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(47, strBuilder0.capacity());
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
  }

  @Test
  public void test071()  throws Throwable  {
      int int0 = 5;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.capacity());
      
      char[] charArray0 = new char[10];
      char char0 = 'N';
      charArray0[1] = char0;
      StrBuilder strBuilder1 = strBuilder0.append(char0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.capacity());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertEquals(5, strBuilder0.capacity());
      
      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = (StrMatcher.CharSetMatcher)StrMatcher.charSetMatcher(charArray0);
      assertArrayEquals(new char[] {'\u0000', 'N', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strMatcher_CharSetMatcher0);
      
      StrBuilder strBuilder2 = strBuilder0.deleteAll((StrMatcher) strMatcher_CharSetMatcher0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertArrayEquals(new char[] {'\u0000', 'N', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strBuilder2);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.capacity());
      assertEquals(true, strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.length());
      assertEquals(5, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
  }

  @Test
  public void test072()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = (StrMatcher.CharMatcher)StrMatcher.commaMatcher();
      assertNotNull(strMatcher_CharMatcher0);
      
      char char0 = 'd';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((int) char0, (int) char0, char0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(100, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(100, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(100, strBuilder1.capacity());
      assertEquals(100, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(100, strBuilder0.length());
      assertEquals(100, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder2 = strBuilder1.deleteAll((StrMatcher) strMatcher_CharMatcher0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotNull(strBuilder2);
      assertEquals(100, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(100, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(100, strBuilder1.capacity());
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(100, strBuilder2.capacity());
      assertEquals(100, strBuilder2.size());
      assertEquals(100, strBuilder2.length());
      assertEquals(100, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(100, strBuilder0.length());
      assertEquals(100, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test
  public void test073()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = (StrMatcher.CharMatcher)StrMatcher.commaMatcher();
      assertNotNull(strMatcher_CharMatcher0);
      
      String string0 = "@rF";
      char char0 = 'd';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((int) char0, (int) char0, char0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(100, strBuilder1.capacity());
      assertEquals(100, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(100, strBuilder1.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(100, strBuilder0.size());
      assertEquals(100, strBuilder0.capacity());
      assertEquals(100, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      
      StrBuilder strBuilder2 = strBuilder1.replace((StrMatcher) strMatcher_CharMatcher0, string0, (int) char0, (int) char0, (int) char0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder2);
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(100, strBuilder1.capacity());
      assertEquals(100, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(100, strBuilder1.length());
      assertEquals(100, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(100, strBuilder2.length());
      assertEquals(100, strBuilder2.capacity());
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(100, strBuilder0.size());
      assertEquals(100, strBuilder0.capacity());
      assertEquals(100, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
  }

  @Test
  public void test074()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      
      StrMatcher strMatcher0 = null;
      StrBuilder strBuilder1 = strBuilder0.deleteFirst(strMatcher0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test
  public void test075()  throws Throwable  {
      String string0 = "TKvW";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.length());
      assertEquals(36, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.size());
      
      String string1 = null;
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(string0, string1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(36, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(36, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
  }

  @Test
  public void test076()  throws Throwable  {
      String string0 = "java.ext.dirs";
      int int0 = 477;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(477, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(477, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      
      String string1 = strBuilder_StrBuilderTokenizer0.previousToken();
      assertNull(string1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(477, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(string0, string1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(477, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder1.size());
      assertEquals(477, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
  }

  @Test
  public void test077()  throws Throwable  {
      int int0 = 332;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(332, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      
      String string0 = "length must be valid";
      String string1 = null;
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(string1, string0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(332, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(332, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test
  public void test078()  throws Throwable  {
      String string0 = "=eGNaX%h?s";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(42, strBuilder0.capacity());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(10, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      
      String string1 = null;
      StrBuilder strBuilder1 = strBuilder0.replaceAll(string0, string1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(0, strBuilder1.size());
      assertEquals(42, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(42, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
  }

  @Test
  public void test079()  throws Throwable  {
      String string0 = null;
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll(string0, string0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
  }

  @Test
  public void test080()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      char char0 = 'd';
      char char1 = 'S';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((int) char0, (int) char0, char1);
      assertFalse(char1 == char0);
      assertFalse(char0 == char1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(100, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(100, strBuilder1.length());
      assertEquals(100, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder0.getNullText());
      assertEquals(100, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(100, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(100, strBuilder0.length());
      
      StrBuilder strBuilder2 = strBuilder1.replaceFirst(char1, char0);
      assertFalse(char1 == char0);
      assertFalse(char0 == char1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(100, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(100, strBuilder1.length());
      assertEquals(100, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder0.getNullText());
      assertEquals(100, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(100, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(100, strBuilder0.length());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(100, strBuilder2.length());
      assertEquals(100, strBuilder2.size());
      assertEquals(100, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
  }

  @Test
  public void test081()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      
      char char0 = 'd';
      char char1 = 'S';
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(char0, char1);
      assertFalse(char0 == char1);
      assertFalse(char1 == char0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
  }

  @Test
  public void test082()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      
      char char0 = '6';
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(char0, char0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
  }

  @Test
  public void test083()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      
      char char0 = 'E';
      char char1 = 'T';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((Object) strBuilder0, (int) char0, char1);
      assertFalse(char0 == char1);
      assertFalse(char1 == char0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(69, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(69, strBuilder0.length());
      assertEquals(69, strBuilder0.size());
      assertEquals(69, strBuilder1.size());
      assertEquals(69, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(69, strBuilder1.length());
      
      StrBuilder strBuilder2 = strBuilder0.replaceAll(char1, char0);
      assertFalse(char0 == char1);
      assertFalse(char1 == char0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder2);
      assertNull(strBuilder2.getNewLineText());
      assertEquals(69, strBuilder2.capacity());
      assertEquals(69, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(69, strBuilder2.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(69, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(69, strBuilder0.length());
      assertEquals(69, strBuilder0.size());
  }

  @Test
  public void test084()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      
      char char0 = 'E';
      boolean boolean0 = false;
      StrBuilder strBuilder1 = strBuilder0.append(boolean0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(5, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.length());
      
      char char1 = 'T';
      StrBuilder strBuilder2 = strBuilder1.replaceAll(char1, char0);
      assertFalse(char0 == char1);
      assertFalse(char1 == char0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder2);
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(5, strBuilder2.size());
      assertEquals(5, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(5, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.length());
  }

  @Test
  public void test085()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      
      char[] charArray0 = new char[9];
      StrBuilder strBuilder1 = strBuilder0.replaceAll(charArray0[2], charArray0[2]);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
  }

  @Test
  public void test086()  throws Throwable  {
      String string0 = null;
      String string1 = ")~n/Bd(w#z$Kh>+";
      StrBuilder strBuilder0 = new StrBuilder(string1);
      assertNotNull(strBuilder0);
      assertEquals(15, strBuilder0.length());
      assertEquals(15, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(47, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      
      int int0 = 1;
      StrBuilder strBuilder1 = strBuilder0.replace(int0, int0, string0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(15, strBuilder0.length());
      assertEquals(15, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(47, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(15, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(15, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(47, strBuilder1.capacity());
  }

  @Test
  public void test087()  throws Throwable  {
      String string0 = "'RRV&MO";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(8, strBuilder0.size());
      assertEquals(40, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(8, strBuilder0.length());
      
      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = (StrMatcher.CharSetMatcher)StrMatcher.charSetMatcher(string0);
      assertNotNull(strMatcher_CharSetMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst((StrMatcher) strMatcher_CharSetMatcher0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(40, strBuilder1.capacity());
      assertEquals(7, strBuilder1.length());
      assertEquals(7, strBuilder1.size());
      assertEquals(7, strBuilder0.length());
      assertEquals(40, strBuilder0.capacity());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
  }

  @Test
  public void test088()  throws Throwable  {
      String string0 = "If(p nSN]{R";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(11, strBuilder0.size());
      assertEquals(43, strBuilder0.capacity());
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(string0, string0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(11, strBuilder0.size());
      assertEquals(43, strBuilder0.capacity());
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(43, strBuilder1.capacity());
      assertEquals(11, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(11, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
  }

  @Test
  public void test089()  throws Throwable  {
      String string0 = "'>jM,";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(37, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst(string0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(37, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(37, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
  }

  @Test
  public void test090()  throws Throwable  {
      String string0 = "If(p nSN]{R";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(11, strBuilder0.length());
      assertEquals(11, strBuilder0.size());
      assertEquals(43, strBuilder0.capacity());
      
      String string1 = null;
      StrBuilder strBuilder1 = strBuilder0.deleteFirst(string1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(11, strBuilder1.length());
      assertEquals(43, strBuilder1.capacity());
      assertEquals(11, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(11, strBuilder0.length());
      assertEquals(11, strBuilder0.size());
      assertEquals(43, strBuilder0.capacity());
  }

  @Test
  public void test091()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      
      String string0 = "length must be valid";
      StrBuilder strBuilder1 = strBuilder0.deleteFirst(string0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test
  public void test092()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      
      int int0 = 0;
      char char0 = ';';
      StrBuilder strBuilder1 = strBuilder0.append((float) char0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(4, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      
      String string0 = strBuilder0.substring(int0);
      assertEquals("59.0", string0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(string0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.length());
      
      StrBuilder strBuilder2 = strBuilder0.deleteAll(string0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder2);
      assertEquals(0, strBuilder2.length());
      assertEquals(true, strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
  }

  @Test
  public void test093()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      
      String string0 = null;
      StrBuilder strBuilder1 = strBuilder0.deleteAll(string0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test
  public void test094()  throws Throwable  {
      String string0 = "java.specification.vendor";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(57, strBuilder0.capacity());
      assertEquals(25, strBuilder0.length());
      assertEquals(25, strBuilder0.size());
      
      char char0 = '!';
      StrBuilder strBuilder1 = strBuilder0.appendPadding((int) char0, char0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(58, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(58, strBuilder0.size());
      assertEquals(58, strBuilder0.capacity());
      assertEquals(58, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(58, strBuilder1.size());
      assertEquals(58, strBuilder1.capacity());
      
      StrBuilder strBuilder2 = strBuilder0.deleteFirst(char0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotNull(strBuilder2);
      assertNull(strBuilder2.getNewLineText());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(58, strBuilder2.capacity());
      assertEquals(57, strBuilder2.length());
      assertEquals(57, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(57, strBuilder0.size());
      assertEquals(57, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(58, strBuilder0.capacity());
  }

  @Test
  public void test095()  throws Throwable  {
      String string0 = "TKvW";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      
      char[] charArray0 = new char[7];
      StrBuilder strBuilder1 = strBuilder0.deleteFirst(charArray0[0]);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strBuilder1);
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(4, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(36, strBuilder1.capacity());
      assertEquals(4, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
  }

  @Test
  public void test096()  throws Throwable  {
      String string0 = "Invalid offset: ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      
      char char0 = 'f';
      StrBuilder strBuilder1 = strBuilder0.deleteAll(char0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(48, strBuilder1.capacity());
      assertEquals(14, strBuilder1.size());
      assertEquals(14, strBuilder1.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
  }

  @Test
  public void test097()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      
      char char0 = 'x';
      StrBuilder strBuilder1 = strBuilder0.setLength((int) char0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(120, strBuilder1.capacity());
      assertEquals(120, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(120, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder0.getNullText());
      assertEquals(120, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(120, strBuilder0.capacity());
      assertEquals(120, strBuilder0.length());
      
      StrBuilder strBuilder2 = strBuilder0.trim();
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(120, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder2.length());
      assertEquals(true, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(120, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
  }

  @Test
  public void test098()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.delete(int0, int0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
  }

  @Test
  public void test099()  throws Throwable  {
      String string0 = "If(p nSN]{R";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(43, strBuilder0.capacity());
      assertEquals(11, strBuilder0.size());
      
      int int0 = 0;
      boolean boolean0 = true;
      StrBuilder strBuilder1 = strBuilder0.insert(int0, boolean0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertEquals(15, strBuilder1.length());
      assertEquals(43, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(15, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(15, strBuilder0.size());
      assertEquals(43, strBuilder0.capacity());
      assertEquals(15, strBuilder0.length());
  }

  @Test
  public void test100()  throws Throwable  {
      int int0 = 101;
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      
      char char0 = 'U';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(int0, int0, char0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(101, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(101, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(101, strBuilder1.capacity());
      assertEquals(101, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(101, strBuilder0.capacity());
      assertEquals(101, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      
      boolean boolean0 = false;
      StrBuilder strBuilder2 = strBuilder1.insert(int0, boolean0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotNull(strBuilder2);
      assertNull(strBuilder2.getNullText());
      assertEquals(106, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(106, strBuilder2.capacity());
      assertEquals(106, strBuilder2.length());
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(106, strBuilder1.length());
      assertEquals(106, strBuilder1.capacity());
      assertEquals(106, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(106, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(106, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(106, strBuilder0.capacity());
  }

  @Test
  public void test101()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      char[] charArray0 = new char[1];
      StrBuilder strBuilder1 = strBuilder0.insert(int0, charArray0, int0, int0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(strBuilder1);
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test
  public void test102()  throws Throwable  {
      String string0 = "Invalid offset: ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.length());
      
      int int0 = strBuilder0.length();
      assertEquals(16, int0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.append(strBuilder0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(32, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(48, strBuilder1.capacity());
      assertEquals(32, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
      
      char[] charArray0 = strBuilder1.toCharArray();
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertArrayEquals(new char[] {'I', 'n', 'v', 'a', 'l', 'i', 'd', ' ', 'o', 'f', 'f', 's', 'e', 't', ':', ' ', 'I', 'n', 'v', 'a', 'l', 'i', 'd', ' ', 'o', 'f', 'f', 's', 'e', 't', ':', ' '}, charArray0);
      assertNotNull(charArray0);
      assertEquals(32, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(48, strBuilder1.capacity());
      assertEquals(32, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
      
      StrBuilder strBuilder2 = strBuilder1.insert(int0, charArray0, int0, int0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertArrayEquals(new char[] {'I', 'n', 'v', 'a', 'l', 'i', 'd', ' ', 'o', 'f', 'f', 's', 'e', 't', ':', ' ', 'I', 'n', 'v', 'a', 'l', 'i', 'd', ' ', 'o', 'f', 'f', 's', 'e', 't', ':', ' '}, charArray0);
      assertNotNull(strBuilder2);
      assertEquals(48, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(48, strBuilder1.length());
      assertEquals(48, strBuilder1.capacity());
      assertEquals(48, strBuilder2.length());
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(48, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(48, strBuilder2.capacity());
      assertEquals(48, strBuilder0.length());
      assertEquals(48, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(48, strBuilder0.capacity());
  }

  @Test
  public void test103()  throws Throwable  {
      String string0 = "Invalid offset: ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(48, strBuilder0.capacity());
      
      int int0 = strBuilder0.length();
      assertEquals(16, int0);
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(48, strBuilder0.capacity());
      
      char[] charArray0 = strBuilder0.toCharArray();
      assertArrayEquals(new char[] {'I', 'n', 'v', 'a', 'l', 'i', 'd', ' ', 'o', 'f', 'f', 's', 'e', 't', ':', ' '}, charArray0);
      assertNotNull(charArray0);
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(48, strBuilder0.capacity());
      
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.insert(int0, charArray0, int0, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 16
         //
      }
  }

  @Test
  public void test104()  throws Throwable  {
      int int0 = 477;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(477, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      
      int int1 = 0;
      char[] charArray0 = new char[5];
      int int2 = (-1544);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.insert(int1, charArray0, int2, (int) charArray0[1]);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: -1544
         //
      }
  }

  @Test
  public void test105()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      
      int int0 = 0;
      char char0 = '%';
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.insert(int0, charArray0, (int) char0, (int) charArray0[2]);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: 37
         //
      }
  }

  @Test
  public void test106()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      
      char char0 = 'd';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((int) char0, (int) char0, char0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(100, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(100, strBuilder1.capacity());
      assertEquals(100, strBuilder1.length());
      assertEquals(100, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(100, strBuilder0.size());
      assertEquals(100, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      char[] charArray0 = new char[22];
      StrBuilder strBuilder2 = strBuilder0.insert((int) char0, charArray0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strBuilder2);
      assertEquals(122, strBuilder0.capacity());
      assertEquals(122, strBuilder0.size());
      assertEquals(122, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder2.getNullText());
      assertEquals(122, strBuilder2.capacity());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(122, strBuilder2.size());
      assertEquals(122, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
  }

  @Test
  public void test107()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      
      String string0 = null;
      StrBuilder strBuilder1 = strBuilder0.insert(int0, string0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test
  public void test108()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      
      int int0 = (-553);
      Object object0 = null;
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.insert(int0, object0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -553
         //
      }
  }

  @Test
  public void test109()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.insert(int0, (Object) string0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
  }

  @Test
  public void test110()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      
      char char0 = '^';
      int int0 = 2;
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((int) char0, int0, char0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(2, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
  }

  @Test
  public void test111()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      
      String string0 = null;
      int int0 = 2585;
      char char0 = 'v';
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((Object) string0, int0, char0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test112()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      
      char char0 = 'u';
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((Object) string0, int0, char0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
  }

  @Test
  public void test113()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      
      char char0 = 'd';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((int) char0, (int) char0, char0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(100, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(100, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(100, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(100, strBuilder0.capacity());
      assertEquals(100, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(100, strBuilder0.size());
      
      StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft((Object) strBuilder1, (int) char0, char0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotNull(strBuilder2);
      assertEquals(200, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(200, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(200, strBuilder2.capacity());
      assertEquals(200, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(200, strBuilder1.size());
      assertEquals(200, strBuilder1.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(200, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(200, strBuilder0.capacity());
      assertEquals(200, strBuilder0.size());
  }

  @Test
  public void test114()  throws Throwable  {
      String string0 = "'RRV&MO";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(8, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(40, strBuilder0.capacity());
      assertEquals(8, strBuilder0.length());
      
      int int0 = 2;
      int int1 = 0;
      char char0 = 'h';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(int0, int1, char0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(8, strBuilder1.length());
      assertEquals(8, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(40, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(8, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(40, strBuilder0.capacity());
      assertEquals(8, strBuilder0.length());
  }

  @Test
  public void test115()  throws Throwable  {
      int int0 = (-97);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      char char0 = '%';
      StrBuilder strBuilder1 = strBuilder0.appendPadding(int0, char0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test
  public void test116()  throws Throwable  {
      String string0 = "end < start";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(11, strBuilder0.length());
      assertEquals(11, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(43, strBuilder0.capacity());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(11, strBuilder0.length());
      assertEquals(11, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(43, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) strBuilder_StrBuilderTokenizer0, string0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(2, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(3, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(42, strBuilder0.length());
      assertEquals(42, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(42, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(42, strBuilder1.size());
      assertEquals(43, strBuilder1.capacity());
  }

  @Test
  public void test117()  throws Throwable  {
      String string0 = null;
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) strBuilder_StrBuilderTokenizer0, string0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
  }

  @Test
  public void test118()  throws Throwable  {
      char char0 = '+';
      StrBuilder strBuilder0 = new StrBuilder((int) char0);
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(43, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      
      Iterator<StrBuilder> iterator0 = null;
      String string0 = "K:v7u,cc2/?q{y%F";
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(iterator0, string0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(43, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(43, strBuilder1.capacity());
  }

  @Test
  public void test119()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      char char0 = '.';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) strBuilder0, (int) char0, char0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(46, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(46, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(46, strBuilder1.capacity());
      assertEquals(46, strBuilder0.size());
      assertEquals(46, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(46, strBuilder0.capacity());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(46, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(46, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(46, strBuilder1.capacity());
      assertEquals(46, strBuilder0.size());
      assertEquals(46, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(46, strBuilder0.capacity());
      
      List list0 = strBuilder_StrBuilderTokenizer0.getTokenList();
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(list0);
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(46, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(46, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(46, strBuilder1.capacity());
      assertEquals(46, strBuilder0.size());
      assertEquals(46, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(46, strBuilder0.capacity());
      
      String string0 = null;
      StrBuilder strBuilder2 = strBuilder1.appendWithSeparators((Collection) list0, string0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotNull(strBuilder2);
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(92, strBuilder2.capacity());
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(92, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(92, strBuilder2.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(92, strBuilder1.length());
      assertEquals(92, strBuilder1.capacity());
      assertEquals(92, strBuilder1.size());
      assertEquals(92, strBuilder0.capacity());
      assertEquals(92, strBuilder0.length());
      assertEquals(92, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
  }

  @Test
  public void test120()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      
      List list0 = strBuilder_StrBuilderTokenizer0.getTokenList();
      assertNotNull(list0);
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      
      String string0 = ">D9efj#5NvwQPK";
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) list0, string0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
  }

  @Test
  public void test121()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      Collection<Integer> collection0 = null;
      String string0 = "J}Q";
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(collection0, string0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
  }

  @Test
  public void test122()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      
      String string0 = null;
      Object[] objectArray0 = new Object[9];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, string0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test
  public void test123()  throws Throwable  {
      String string0 = "If(p nSN]{R";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(11, strBuilder0.size());
      assertEquals(11, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      boolean boolean0 = true;
      StrBuilder strBuilder1 = strBuilder0.append(boolean0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(15, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(15, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(43, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(15, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(43, strBuilder0.capacity());
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test
  public void test124()  throws Throwable  {
      int int0 = 332;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(332, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(332, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      
      char char0 = '!';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((int) char0, (int) char0, char0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(332, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(33, strBuilder0.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(332, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(33, strBuilder1.length());
      assertEquals(33, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      
      int int1 = 0;
      String string0 = strBuilder0.substring(int1, int0);
      assertEquals("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!33", string0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(string0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(332, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(33, strBuilder0.length());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.setQuoteChar(char0);
      assertFalse(int0 == int1);
      assertSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      assertSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder_StrBuilderTokenizer1);
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertEquals(-1, strBuilder_StrBuilderTokenizer1.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(332, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(33, strBuilder0.length());
      
      StrBuilder strBuilder2 = strBuilder0.appendWithSeparators((Iterator) strBuilder_StrBuilderTokenizer1, string0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      assertSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder2);
      assertEquals(332, strBuilder2.capacity());
      assertEquals(50, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(50, strBuilder2.size());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(false, strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertEquals(1, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(50, strBuilder0.length());
      assertEquals(50, strBuilder0.size());
      assertEquals(332, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
  }

  @Test
  public void test125()  throws Throwable  {
      int int0 = 1403;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(1403, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      int int1 = 0;
      char[] charArray0 = new char[10];
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertFalse(int0 == int1);
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(1403, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      // Undeclared exception!
      try {
        strBuilder_StrBuilderWriter0.write(charArray0, int1, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 1403
         //
      }
  }

  @Test
  public void test126()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      char[] charArray0 = new char[4];
      int int0 = 0;
      int int1 = (-1646);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(charArray0, int0, int1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -1646
         //
      }
  }

  @Test
  public void test127()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      char[] charArray0 = new char[6];
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.append(charArray0, int0, (int) charArray0[0]);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
  }

  @Test
  public void test128()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      char[] charArray0 = new char[9];
      int int0 = (-2622);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(charArray0, int0, (int) charArray0[0]);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 0
         //
      }
  }

  @Test
  public void test129()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      
      int int0 = 0;
      char[] charArray0 = strBuilder0.toCharArray(int0, int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.append(charArray0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(strBuilder1);
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
  }

  @Test
  public void test130()  throws Throwable  {
      int int0 = 332;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(332, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(332, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      char char0 = '!';
      int int1 = 0;
      String string0 = strBuilder0.substring(int1, int0);
      assertEquals("", string0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(string0);
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(332, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) string0, int0, char0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(332, strBuilder1.size());
      assertEquals(332, strBuilder1.length());
      assertEquals(332, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(332, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(332, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(332, strBuilder0.size());
      
      StrBuilder strBuilder2 = strBuilder0.appendWithSeparators((Iterator) strBuilder_StrBuilderTokenizer0, string0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      assertEquals(0, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(1, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(664, strBuilder0.size());
      assertEquals(664, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(664, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(664, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(664, strBuilder2.size());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(664, strBuilder2.capacity());
      
      StrBuilder strBuilder3 = strBuilder2.append(strBuilder0, (int) char0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder3);
      assertNull(strBuilder3.getNewLineText());
      assertEquals(996, strBuilder3.length());
      assertEquals(false, strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(996, strBuilder3.capacity());
      assertEquals(996, strBuilder3.size());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(1, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(996, strBuilder0.capacity());
      assertEquals(996, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(996, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder2.getNullText());
      assertEquals(996, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(996, strBuilder2.length());
      assertEquals(996, strBuilder2.capacity());
      assertEquals(false, strBuilder2.isEmpty());
  }

  @Test
  public void test131()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      
      char char0 = 'e';
      int int0 = 0;
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(strBuilder0, int0, (int) char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
      }
  }

  @Test
  public void test132()  throws Throwable  {
      int int0 = (-2537);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      
      int int1 = 700;
      char char0 = 'K';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(int1, int1, char0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(700, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(700, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(700, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(700, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(700, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(700, strBuilder0.length());
      
      // Undeclared exception!
      try {
        StrBuilder strBuilder2 = strBuilder0.append(strBuilder1, (int) char0, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
      }
  }

  @Test
  public void test133()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      int int1 = 2;
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(strBuilder0, int1, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
      }
  }

  @Test
  public void test134()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      
      int int0 = (-2567);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(strBuilder0, int0, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
      }
  }

  @Test
  public void test135()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder strBuilder1 = null;
      int int0 = 0;
      StrBuilder strBuilder2 = strBuilder0.append(strBuilder1, int0, int0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
  }

  @Test
  public void test136()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.append(strBuilder0, int0, int0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test
  public void test137()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.append(strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
  }

  @Test
  public void test138()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder1 = null;
      StrBuilder strBuilder2 = strBuilder0.append(strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(true, strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
  }

  @Test
  public void test139()  throws Throwable  {
      String string0 = "\\/r";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(35, strBuilder0.capacity());
      
      char char0 = '\'';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((int) char0, (int) char0, char0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(42, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(42, strBuilder1.size());
      assertEquals(42, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(42, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(42, strBuilder0.capacity());
      assertEquals(42, strBuilder0.length());
      
      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(stringBuffer0);
      assertEquals(42, stringBuffer0.capacity());
      assertEquals(42, stringBuffer0.length());
      assertEquals("\\/r'''''''''''''''''''''''''''''''''''''39", stringBuffer0.toString());
      assertEquals(42, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(42, strBuilder0.capacity());
      assertEquals(42, strBuilder0.length());
      
      StringBuffer stringBuffer1 = stringBuffer0.append(stringBuffer0);
      assertSame(stringBuffer1, stringBuffer0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(stringBuffer1);
      assertEquals("\\/r'''''''''''''''''''''''''''''''''''''39\\/r'''''''''''''''''''''''''''''''''''''39", stringBuffer1.toString());
      assertEquals(84, stringBuffer1.length());
      assertEquals(86, stringBuffer1.capacity());
      assertEquals(86, stringBuffer0.capacity());
      assertEquals(84, stringBuffer0.length());
      assertEquals("\\/r'''''''''''''''''''''''''''''''''''''39\\/r'''''''''''''''''''''''''''''''''''''39", stringBuffer0.toString());
      assertEquals(42, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(42, strBuilder0.capacity());
      assertEquals(42, strBuilder0.length());
      
      StrBuilder strBuilder2 = strBuilder0.append(stringBuffer1, (int) char0, (int) char0);
      assertSame(stringBuffer1, stringBuffer0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      assertEquals("\\/r'''''''''''''''''''''''''''''''''''''39\\/r'''''''''''''''''''''''''''''''''''''39", stringBuffer1.toString());
      assertEquals(84, stringBuffer1.length());
      assertEquals(86, stringBuffer1.capacity());
      assertEquals(86, stringBuffer0.capacity());
      assertEquals(84, stringBuffer0.length());
      assertEquals("\\/r'''''''''''''''''''''''''''''''''''''39\\/r'''''''''''''''''''''''''''''''''''''39", stringBuffer0.toString());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(81, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(81, strBuilder0.capacity());
      assertEquals(81, strBuilder0.size());
      assertEquals(81, strBuilder2.length());
      assertEquals(81, strBuilder2.capacity());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(81, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
  }

  @Test
  public void test140()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer(string0);
      assertNotNull(stringBuffer0);
      assertEquals(16, stringBuffer0.capacity());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      char[] charArray0 = new char[6];
      char char0 = '.';
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, (int) char0, (int) charArray0[4]);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
      }
  }

  @Test
  public void test141()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
      assertNotNull(stringBuffer0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.capacity());
      assertEquals(0, stringBuffer0.length());
      
      int int0 = (-15);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, int0, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
      }
  }

  @Test
  public void test142()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      
      StringBuffer stringBuffer0 = null;
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, int0, int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
  }

  @Test
  public void test143()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer(string0);
      assertNotNull(stringBuffer0);
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      char[] charArray0 = new char[6];
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, (int) charArray0[2], (int) charArray0[4]);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strBuilder1);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
  }

  @Test
  public void test144()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer(string0);
      assertNotNull(stringBuffer0);
      assertEquals(16, stringBuffer0.capacity());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      char[] charArray0 = new char[6];
      StringBuffer stringBuffer1 = stringBuffer0.append(charArray0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(stringBuffer1);
      assertEquals(16, stringBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000", stringBuffer0.toString());
      assertEquals(6, stringBuffer0.length());
      assertEquals(6, stringBuffer1.length());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000", stringBuffer1.toString());
      assertEquals(16, stringBuffer1.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strBuilder1);
      assertEquals(6, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(6, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(6, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000", stringBuffer0.toString());
      assertEquals(6, stringBuffer0.length());
      assertEquals(6, stringBuffer1.length());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000", stringBuffer1.toString());
      assertEquals(16, stringBuffer1.capacity());
  }

  @Test
  public void test145()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer(string0);
      assertNotNull(stringBuffer0);
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
  }

  @Test
  public void test146()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      
      String string0 = "(U";
      int int1 = 1;
      StrBuilder strBuilder1 = strBuilder0.append(string0, int1, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
  }

  @Test
  public void test147()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.append(string0, int0, int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
  }

  @Test
  public void test148()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      
      String string0 = "";
      int int1 = (-2721);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(string0, int0, int1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
      }
  }

  @Test
  public void test149()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      
      int int0 = 0;
      char char0 = '';
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      
      String string0 = ">D9efj#5NvwQPK";
      // Undeclared exception!
      try {
        strBuilder_StrBuilderWriter0.write(string0, int0, (int) char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
      }
  }

  @Test
  public void test150()  throws Throwable  {
      String string0 = "~y[^i'\\2V";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(9, strBuilder0.size());
      assertEquals(41, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      int int0 = (-837);
      Integer integer0 = new Integer(int0);
      assertEquals((-837), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(string0, (int) integer0, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
      }
  }

  @Test
  public void test151()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      
      char char0 = 'E';
      int int0 = strBuilder0.indexOf(char0);
      assertEquals((-1), int0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      
      String string0 = null;
      StrBuilder strBuilder1 = strBuilder0.append(string0, int0, (int) char0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
  }

  @Test
  public void test152()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      String string0 = null;
      StrBuilder strBuilder1 = strBuilder0.append(string0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
  }

  @Test
  public void test153()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      
      String string0 = "";
      char char0 = '.';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) strBuilder0, (int) char0, char0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertEquals(46, strBuilder1.capacity());
      assertEquals(46, strBuilder1.size());
      assertEquals(46, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(46, strBuilder0.length());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(46, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertNull(strBuilder1.getNullText());
      assertEquals(46, strBuilder1.capacity());
      assertEquals(46, strBuilder1.size());
      assertEquals(46, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(46, strBuilder0.length());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(46, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      
      List list0 = strBuilder_StrBuilderTokenizer0.getTokenList();
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(list0);
      assertNull(strBuilder1.getNullText());
      assertEquals(46, strBuilder1.capacity());
      assertEquals(46, strBuilder1.size());
      assertEquals(46, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(46, strBuilder0.length());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(46, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      
      StrBuilder strBuilder2 = strBuilder1.appendWithSeparators((Collection) list0, string0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotNull(strBuilder2);
      assertNull(strBuilder2.getNewLineText());
      assertEquals(92, strBuilder2.length());
      assertEquals(92, strBuilder2.capacity());
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(92, strBuilder2.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(92, strBuilder1.length());
      assertEquals(92, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(92, strBuilder1.size());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(92, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(92, strBuilder0.capacity());
      assertEquals(92, strBuilder0.length());
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
  }

  @Test
  public void test154()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      
      StringBuffer stringBuffer0 = null;
      String string0 = "WpECiPc`IM6";
      StrBuilder strBuilder1 = strBuilder0.setNullText(string0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals("WpECiPc`IM6", strBuilder1.getNullText());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals("WpECiPc`IM6", strBuilder0.getNullText());
      
      StrBuilder strBuilder2 = strBuilder0.append(stringBuffer0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder2);
      assertEquals(11, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(11, strBuilder2.length());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals("WpECiPc`IM6", strBuilder2.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(11, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11, strBuilder0.length());
      assertEquals("WpECiPc`IM6", strBuilder0.getNullText());
  }

  @Test
  public void test155()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
  }

  @Test
  public void test156()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.setNewLineText(string0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertEquals("", strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals("", strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      
      StrBuilder strBuilder2 = strBuilder1.appendNewLine();
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder2);
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertEquals("", strBuilder2.getNewLineText());
      assertEquals(true, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder1.getNullText());
      assertEquals("", strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals("", strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
  }

  @Test
  public void test157()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      char char0 = 'C';
      char[] charArray0 = new char[18];
      charArray0[1] = char0;
      // Undeclared exception!
      try {
        strBuilder0.getChars((int) charArray0[1], (int) charArray0[2], charArray0, (int) char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
      }
  }

  @Test
  public void test158()  throws Throwable  {
      String string0 = "TKvW";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(36, strBuilder0.capacity());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(36, strBuilder0.capacity());
      
      char[] charArray0 = new char[7];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals(4, int0);
      assertArrayEquals(new char[] {'T', 'K', 'v', 'W', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(36, strBuilder0.capacity());
  }

  @Test
  public void test159()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      
      int int0 = 1911;
      int int1 = (-1343);
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try {
        strBuilder0.getChars(int0, int1, charArray0, (int) charArray0[7]);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1343
         //
      }
  }

  @Test
  public void test160()  throws Throwable  {
      int int0 = (-613);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      char[] charArray0 = new char[7];
      char char0 = '&';
      String string0 = "";
      int int1 = strBuilder0.indexOf(string0, (int) charArray0[2]);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      // Undeclared exception!
      try {
        strBuilder0.getChars(int1, (int) char0, charArray0, (int) char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
      }
  }

  @Test
  public void test161()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      char char0 = '~';
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try {
        strBuilder0.getChars((int) char0, (int) char0, charArray0, (int) charArray0[1]);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 126
         //
      }
  }

  @Test
  public void test162()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      
      String string0 = "WpECiPc`IM6";
      Object[] objectArray0 = new Object[5];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, string0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(44, strBuilder1.capacity());
      assertEquals(44, strBuilder1.length());
      assertEquals(44, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(44, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(44, strBuilder0.capacity());
      assertEquals(44, strBuilder0.length());
      
      char[] charArray0 = new char[12];
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotSame(charArray1, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'W', 'p', 'E', 'C', 'i', 'P', 'c', '`', 'I', 'M', '6', 'W', 'p', 'E', 'C', 'i', 'P', 'c', '`', 'I', 'M', '6', 'W', 'p', 'E', 'C', 'i', 'P', 'c', '`', 'I', 'M', '6', 'W', 'p', 'E', 'C', 'i', 'P', 'c', '`', 'I', 'M', '6'}, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArray1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(44, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(44, strBuilder0.capacity());
      assertEquals(44, strBuilder0.length());
  }

  @Test
  public void test163()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      char[] charArray0 = new char[12];
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArray1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
  }

  @Test
  public void test164()  throws Throwable  {
      String string0 = "=eGNaX%h?s";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(10, strBuilder0.length());
      assertEquals(42, strBuilder0.capacity());
      
      int int0 = 0;
      int int1 = 3209;
      char[] charArray0 = strBuilder0.toCharArray(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'=', 'e', 'G', 'N', 'a', 'X', '%', 'h', '?', 's'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(10, strBuilder0.length());
      assertEquals(42, strBuilder0.capacity());
  }

  @Test
  public void test165()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      
      char[] charArray0 = strBuilder0.toCharArray();
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
  }

  @Test
  public void test166()  throws Throwable  {
      String string0 = "Invalid offset: ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.size());
      
      int int0 = strBuilder0.length();
      assertEquals(16, int0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.append(strBuilder0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.size());
      assertEquals(48, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(48, strBuilder0.capacity());
      
      StrBuilder strBuilder2 = strBuilder0.deleteCharAt(int0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(31, strBuilder0.length());
      assertEquals(31, strBuilder0.size());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(31, strBuilder2.size());
      assertEquals(31, strBuilder2.length());
      assertEquals(48, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
  }

  @Test
  public void test167()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      
      int int0 = strBuilder0.length();
      assertEquals(0, int0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.deleteCharAt(int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 0
         //
      }
  }

  @Test
  public void test168()  throws Throwable  {
      String string0 = "\\/r";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(35, strBuilder0.capacity());
      
      int int0 = (-904);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.deleteCharAt(int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -904
         //
      }
  }

  @Test
  public void test169()  throws Throwable  {
      String string0 = ")~n/Bd(w#z$Kh>+";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.size());
      assertEquals(47, strBuilder0.capacity());
      assertEquals(15, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      char[] charArray0 = new char[10];
      StrBuilder strBuilder1 = strBuilder0.setCharAt((int) charArray0[9], charArray0[1]);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.size());
      assertEquals(47, strBuilder0.capacity());
      assertEquals(15, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(15, strBuilder1.length());
      assertEquals(15, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(47, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
  }

  @Test
  public void test170()  throws Throwable  {
      String string0 = null;
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      int int0 = strBuilder0.size();
      assertEquals(0, int0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      char char0 = '#';
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.setCharAt(int0, char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 0
         //
      }
  }

  @Test
  public void test171()  throws Throwable  {
      int int0 = (-4509);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      char char0 = 'E';
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.setCharAt(int0, char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -4509
         //
      }
  }

  @Test
  public void test172()  throws Throwable  {
      String string0 = "S,QG2<*_aF";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(42, strBuilder0.capacity());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(42, strBuilder0.capacity());
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertEquals(83, int0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(42, strBuilder0.capacity());
  }

  @Test
  public void test173()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      
      char char0 = '';
      // Undeclared exception!
      try {
        char char1 = strBuilder0.charAt((int) char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 127
         //
      }
  }

  @Test
  public void test174()  throws Throwable  {
      int int0 = 332;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(332, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      int int1 = (-2345);
      // Undeclared exception!
      try {
        char char0 = strBuilder0.charAt(int1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2345
         //
      }
  }

  @Test
  public void test175()  throws Throwable  {
      int int0 = (-97);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      
      boolean boolean0 = strBuilder0.isEmpty();
      assertTrue(boolean0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
  }

  @Test
  public void test176()  throws Throwable  {
      String string0 = "'RRV&MO";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(40, strBuilder0.capacity());
      assertEquals(8, strBuilder0.size());
      
      boolean boolean0 = strBuilder0.isEmpty();
      assertFalse(boolean0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(40, strBuilder0.capacity());
      assertEquals(8, strBuilder0.size());
  }

  @Test
  public void test177()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test
  public void test178()  throws Throwable  {
      String string0 = "\\/r";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(35, strBuilder0.capacity());
      assertEquals(3, strBuilder0.size());
      
      char char0 = '\'';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((int) char0, (int) char0, char0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(42, strBuilder1.length());
      assertEquals(42, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(42, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(42, strBuilder0.length());
      assertEquals(42, strBuilder0.capacity());
      assertEquals(42, strBuilder0.size());
      
      StrBuilder strBuilder2 = strBuilder0.minimizeCapacity();
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder2);
      assertEquals(42, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(42, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(42, strBuilder2.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(42, strBuilder0.length());
      assertEquals(42, strBuilder0.capacity());
      assertEquals(42, strBuilder0.size());
  }

  @Test
  public void test179()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.append((double) int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      
      StrBuilder strBuilder2 = strBuilder0.setLength(int0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertEquals(true, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.length());
  }

  @Test
  public void test180()  throws Throwable  {
      int int0 = (-97);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.setLength(int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -97
         //
      }
  }

  @Test
  public void test181()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.setLength(int0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test
  public void test182()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      String string0 = "";
      StrBuilder strBuilder1 = strBuilder0.setNullText(string0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test
  public void test183()  throws Throwable  {
      int int0 = 5;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.capacity());
      
      String string0 = null;
      StrBuilder strBuilder1 = strBuilder0.setNullText(string0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(5, strBuilder1.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.capacity());
  }

  @Test
  public void test184()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      
      strBuilder_StrBuilderWriter0.close();
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
  }

  @Test
  public void test185()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      
      char char0 = '';
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      
      String string0 = ">D9efj#5NvwQPK";
      // Undeclared exception!
      try {
        strBuilder_StrBuilderWriter0.write(string0, (int) char0, (int) char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
      }
  }

  @Test
  public void test186()  throws Throwable  {
      int int0 = 1403;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(1403, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      
      char[] charArray0 = new char[10];
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(1403, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      
      // Undeclared exception!
      try {
        strBuilder_StrBuilderWriter0.write(charArray0, int0, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 1403
         //
      }
  }

  @Test
  public void test187()  throws Throwable  {
      int int0 = 332;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(332, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(332, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      strBuilder_StrBuilderWriter0.flush();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(332, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test
  public void test188()  throws Throwable  {
      String string0 = "=eGNaX%h?s";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(42, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.length());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(42, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.length());
      
      char char0 = 'X';
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter1 = (StrBuilder.StrBuilderWriter)strBuilder_StrBuilderWriter0.append(char0);
      assertSame(strBuilder_StrBuilderWriter0, strBuilder_StrBuilderWriter1);
      assertSame(strBuilder_StrBuilderWriter1, strBuilder_StrBuilderWriter0);
      assertNotNull(strBuilder_StrBuilderWriter1);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(11, strBuilder0.length());
      assertEquals(42, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11, strBuilder0.size());
  }

  @Test
  public void test189()  throws Throwable  {
      int int0 = 332;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(332, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(332, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      
      char[] charArray0 = new char[6];
      strBuilder_StrBuilderWriter0.write(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.length());
      assertEquals(332, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test
  public void test190()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = (StrMatcher.CharMatcher)StrMatcher.commaMatcher();
      assertNotNull(strMatcher_CharMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll((StrMatcher) strMatcher_CharMatcher0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
  }

  @Test
  public void test191()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      
      String string0 = "end < start";
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = (StrMatcher.CharMatcher)StrMatcher.spaceMatcher();
      assertNotNull(strMatcher_CharMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll((StrMatcher) strMatcher_CharMatcher0, string0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
  }

  @Test
  public void test192()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      
      char char0 = '.';
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.insert((int) char0, char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 46
         //
      }
  }

  @Test
  public void test193()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      
      char[] charArray0 = new char[12];
      char char0 = 'F';
      StrBuilder strBuilder1 = strBuilder0.insert((int) charArray0[1], (double) char0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strBuilder1);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
  }

  @Test
  public void test194()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      char char0 = 'K';
      // Undeclared exception!
      try {
        String string0 = strBuilder0.substring((int) char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
      }
  }

  @Test
  public void test195()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      
      Object object0 = null;
      int int0 = 1545;
      char char0 = 'n';
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(object0, int0, char0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test196()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      
      int int0 = 2;
      StrBuilder strBuilder1 = strBuilder0.append((long) int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
  }

  @Test
  public void test197()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      
      StrMatcher strMatcher0 = null;
      int int0 = strBuilder0.indexOf(strMatcher0);
      assertEquals((-1), int0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test
  public void test198()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.append(int0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test
  public void test199()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = (StrMatcher.CharMatcher)StrMatcher.commaMatcher();
      assertNotNull(strMatcher_CharMatcher0);
      
      String string0 = "@rF";
      StrBuilder strBuilder1 = strBuilder0.replaceFirst((StrMatcher) strMatcher_CharMatcher0, string0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test
  public void test200()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = (StrMatcher.CharMatcher)StrMatcher.singleQuoteMatcher();
      assertNotNull(strMatcher_CharMatcher0);
      
      int int1 = strBuilder0.lastIndexOf((StrMatcher) strMatcher_CharMatcher0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
  }

  @Test
  public void test201()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = (StrBuilder.StrBuilderWriter)strBuilder0.asWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
  }

  @Test
  public void test202()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      
      char char0 = '';
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.insert((int) char0, (int) char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 127
         //
      }
  }

  @Test
  public void test203()  throws Throwable  {
      int int0 = (-97);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = (StrBuilder.StrBuilderTokenizer)strBuilder0.asTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
  }

  @Test
  public void test204()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = (StrBuilder.StrBuilderReader)strBuilder0.asReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test
  public void test205()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      char char0 = '.';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) strBuilder0, (int) char0, char0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertEquals(46, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(46, strBuilder1.length());
      assertEquals(46, strBuilder1.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(46, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(46, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(46, strBuilder0.capacity());
      
      StrBuilder strBuilder2 = strBuilder0.deleteAll(char0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotNull(strBuilder2);
      assertEquals(true, strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertEquals(46, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(46, strBuilder0.capacity());
  }

  @Test
  public void test206()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      int int0 = strBuilder0.capacity();
      assertEquals(32, int0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test
  public void test207()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.insert(int0, (float) int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(3, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(3, strBuilder1.size());
  }

  @Test
  public void test208()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      String string0 = strBuilder0.getNewLineText();
      assertNull(string0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test
  public void test209()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      
      strBuilder_StrBuilderReader0.reset();
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test
  public void test210()  throws Throwable  {
      String string0 = "=eGNaX%h?s";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.size());
      assertEquals(42, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.size());
      assertEquals(42, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      
      int int0 = 0;
      strBuilder_StrBuilderReader0.mark(int0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.size());
      assertEquals(42, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
  }

  @Test
  public void test211()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      strBuilder_StrBuilderReader0.close();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test
  public void test212()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      
      boolean boolean0 = strBuilder_StrBuilderReader0.markSupported();
      assertTrue(boolean0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
  }
}
