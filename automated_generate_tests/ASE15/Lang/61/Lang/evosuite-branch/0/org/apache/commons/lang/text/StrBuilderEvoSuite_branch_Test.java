/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:22:44 GMT 2014
 */

package org.apache.commons.lang.text;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import org.apache.commons.lang.text.StrBuilder;
import org.apache.commons.lang.text.StrMatcher;



import org.junit.runner.RunWith;


public class StrBuilderEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      String string0 = "C?TXJ~,t()Ltm6g";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(47, strBuilder0.capacity());
      assertEquals(15, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char char0 = '!';
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(47, strBuilder0.capacity());
      assertEquals(15, strBuilder0.size());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      long long0 = strBuilder_StrBuilderReader0.skip((long) char0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(47, strBuilder0.capacity());
      assertEquals(15, strBuilder0.size());
      assertEquals(15L, long0);
  }

  @Test
  public void test001()  throws Throwable  {
      String string0 = "C?TXJ~,t()Ltm6g";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(15, strBuilder0.length());
      assertEquals(15, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      int int0 = (-26);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(15, strBuilder0.length());
      assertEquals(15, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      long long0 = strBuilder_StrBuilderReader0.skip((long) int0);
      assertEquals(15, strBuilder0.length());
      assertEquals(15, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0L, long0);
  }

  @Test
  public void test002()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((long) int0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[10];
      int int1 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.size());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertArrayEquals(new char[] {'0', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(1, int1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test
  public void test003()  throws Throwable  {
      String string0 = "Invalid startIndex: ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(20, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(20, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[9];
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(20, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(20, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals(20, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(20, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertArrayEquals(new char[] {'I', 'n', 'v', 'a', 'l', 'i', 'd', ' ', 's'}, charArray0);
      assertEquals(9, int0);
  }

  @Test
  public void test004()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[4];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
  }

  @Test
  public void test005()  throws Throwable  {
      String string0 = "M}m^";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(36, strBuilder0.capacity());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(36, strBuilder0.capacity());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.length());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[5];
      char char0 = 'g';
      charArray0[0] = char0;
      charArray0[2] = charArray0[0];
      // Undeclared exception!
      try {
        int int0 = strBuilder_StrBuilderReader0.read(charArray0, (int) charArray0[2], (int) charArray0[2]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test006()  throws Throwable  {
      String string0 = "a5x_M";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertEquals(37, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[6];
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertEquals(37, strBuilder0.capacity());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      int int0 = (-1773);
      // Undeclared exception!
      try {
        int int1 = strBuilder_StrBuilderReader0.read(charArray0, (int) charArray0[0], int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test007()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      char[] charArray0 = strBuilder0.toCharArray(int0, int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      int int1 = (-2391);
      // Undeclared exception!
      try {
        int int2 = strBuilder_StrBuilderReader0.read(charArray0, int1, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test008()  throws Throwable  {
      int int0 = (-2090);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      int int1 = strBuilder_StrBuilderReader0.read();
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
  }

  @Test
  public void test009()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      String string0 = strBuilder_StrBuilderTokenizer0.getContent();
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test
  public void test010()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      char[] charArray0 = new char[2];
      char char0 = 'o';
      List list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, char0, char0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(list0);
  }

  @Test
  public void test011()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = (-1);
      // Undeclared exception!
      try {
        strBuilder0.validateIndex(int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
      }
  }

  @Test
  public void test012()  throws Throwable  {
      int int0 = 34;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(34, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char char0 = ':';
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.delete((int) char0, (int) char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
      }
  }

  @Test
  public void test013()  throws Throwable  {
      int int0 = (-557);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      String string0 = "";
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.replace(int0, int0, string0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -557
         //
      }
  }

  @Test
  public void test014()  throws Throwable  {
      String string0 = "Invalid startIndex: ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(20, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(20, strBuilder0.size());
      assertEquals(52, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.hashCode();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(20, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(20, strBuilder0.size());
      assertEquals(52, strBuilder0.capacity());
      assertEquals(1011166913, int0);
  }

  @Test
  public void test015()  throws Throwable  {
      String string0 = "Invalid length: ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[10];
      Integer integer0 = new Integer((int) charArray0[0]);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, (int)integer0);
      
      boolean boolean0 = strBuilder0.equals((Object) integer0);
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test016()  throws Throwable  {
      char char0 = '4';
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder((int) char0);
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(52, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      boolean boolean0 = strBuilder0.equals(strBuilder1);
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(52, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(boolean0);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
  }

  @Test
  public void test017()  throws Throwable  {
      String string0 = "Invalid startIndex: ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(20, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.equals((Object) strBuilder0);
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(20, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.length());
      assertTrue(boolean0);
  }

  @Test
  public void test018()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      char char0 = ']';
      StrBuilder strBuilder1 = strBuilder0.insert(int0, char0);
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = new StrBuilder(int0);
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(true, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      boolean boolean0 = strBuilder0.equals(strBuilder2);
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(true, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(1, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(boolean0);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
  }

  @Test
  public void test019()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(boolean0);
  }

  @Test
  public void test020()  throws Throwable  {
      String string0 = "Invalid startIndex: ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(20, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(20, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[9];
      char char0 = 'v';
      charArray0[5] = char0;
      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = (StrMatcher.CharSetMatcher)StrMatcher.charSetMatcher(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'v', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strMatcher_CharSetMatcher0);
      
      int int0 = strBuilder0.lastIndexOf((StrMatcher) strMatcher_CharSetMatcher0);
      assertNull(strBuilder0.getNullText());
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(20, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(20, strBuilder0.length());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'v', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(2, int0);
  }

  @Test
  public void test021()  throws Throwable  {
      String string0 = "'; the SystemUtils property value will default to null.";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(87, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(55, strBuilder0.length());
      assertEquals(55, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      StrMatcher strMatcher0 = null;
      int int1 = strBuilder0.lastIndexOf(strMatcher0, int0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(87, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(55, strBuilder0.length());
      assertEquals(55, strBuilder0.size());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
  }

  @Test
  public void test022()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      String string0 = "Invalid offset: ";
      int int0 = 1456;
      char char0 = 'I';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(int0, int0, char0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1456, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1456, strBuilder0.capacity());
      assertEquals(1456, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(1456, strBuilder1.capacity());
      assertEquals(1456, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1456, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      int int1 = strBuilder1.lastIndexOf(string0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1456, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1456, strBuilder0.capacity());
      assertEquals(1456, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(1456, strBuilder1.capacity());
      assertEquals(1456, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1456, strBuilder1.length());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test
  public void test023()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      String string0 = "length must be valid";
      strBuilder_StrBuilderWriter0.write(string0);
      assertEquals(20, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(20, strBuilder0.length());
      
      int int0 = strBuilder0.lastIndexOf(string0);
      assertEquals(20, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(20, strBuilder0.length());
      assertEquals(0, int0);
  }

  @Test
  public void test024()  throws Throwable  {
      int int0 = 97;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(97, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = false;
      StrBuilder strBuilder1 = strBuilder0.append(boolean0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertEquals(97, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(97, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      char char0 = '+';
      String string0 = "sqp6pr$*wU\\9Ok";
      int int1 = strBuilder1.lastIndexOf(string0, (int) char0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertEquals(97, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(97, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test
  public void test025()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      String string0 = "";
      char char0 = ',';
      StrBuilder strBuilder1 = strBuilder0.append((int) char0);
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      int int1 = strBuilder1.lastIndexOf(string0, (int) char0);
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
  }

  @Test
  public void test026()  throws Throwable  {
      String string0 = null;
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char char0 = 'u';
      int int0 = strBuilder0.lastIndexOf(string0, (int) char0);
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test
  public void test027()  throws Throwable  {
      int int0 = (-557);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      String string0 = "";
      int int1 = 0;
      int int2 = strBuilder0.lastIndexOf(string0, int1);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test
  public void test028()  throws Throwable  {
      String string0 = "java.vm.specification.version";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(29, strBuilder0.size());
      assertEquals(61, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(29, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      String string1 = "/";
      assertNotSame(string1, string0);
      
      int int0 = strBuilder0.lastIndexOf(string1);
      assertEquals(29, strBuilder0.size());
      assertEquals(61, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(29, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1), int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test029()  throws Throwable  {
      String string0 = "#DwHd+\"^Wou .\\U?/";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(17, strBuilder0.size());
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(17, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      char char0 = 'U';
      int int0 = strBuilder0.capacity();
      assertNull(strBuilder0.getNullText());
      assertEquals(17, strBuilder0.size());
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(17, strBuilder0.length());
      assertEquals(49, int0);
      
      StrBuilder strBuilder1 = strBuilder0.clear();
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(49, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      int int1 = strBuilder0.lastIndexOf(char0, int0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
      assertSame(strBuilder0, strBuilder1);
  }

  @Test
  public void test030()  throws Throwable  {
      String string0 = "#DwHd+\"^Wou .\\U?/";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(17, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(17, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      char char0 = 'U';
      int int0 = strBuilder0.lastIndexOf(char0, (int) char0);
      assertEquals(17, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(17, strBuilder0.length());
      assertEquals(14, int0);
  }

  @Test
  public void test031()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[2];
      StrBuilder strBuilder1 = strBuilder0.append(charArray0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(2, strBuilder1.length());
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = (StrMatcher.CharSetMatcher)StrMatcher.quoteMatcher();
      assertNotNull(strMatcher_CharSetMatcher0);
      
      int int0 = strBuilder0.indexOf((StrMatcher) strMatcher_CharSetMatcher0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertEquals((-1), int0);
      assertSame(strBuilder0, strBuilder1);
  }

  @Test
  public void test032()  throws Throwable  {
      String string0 = "'; the SystemUtils property value will default to null.";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(87, strBuilder0.capacity());
      assertEquals(55, strBuilder0.length());
      assertEquals(55, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrMatcher strMatcher0 = null;
      int int0 = strBuilder0.indexOf(strMatcher0);
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(87, strBuilder0.capacity());
      assertEquals(55, strBuilder0.length());
      assertEquals(55, strBuilder0.size());
      assertEquals((-1), int0);
  }

  @Test
  public void test033()  throws Throwable  {
      String string0 = "#DwHd+\"^Wou .\\U?/";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(17, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(49, strBuilder0.capacity());
      assertEquals(17, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char char0 = 'U';
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = (StrMatcher.CharMatcher)StrMatcher.charMatcher(char0);
      assertNotNull(strMatcher_CharMatcher0);
      
      int int0 = (-2605);
      int int1 = strBuilder0.indexOf((StrMatcher) strMatcher_CharMatcher0, int0);
      assertEquals(17, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(49, strBuilder0.capacity());
      assertEquals(17, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(14, int1);
  }

  @Test
  public void test034()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      String string0 = "r_H\"Q$:FPX1/Ju2lR";
      char[] charArray0 = new char[2];
      StrBuilder strBuilder1 = strBuilder0.append(charArray0);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(2, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.size());
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.replaceAll(string0, string0);
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(2, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(2, strBuilder2.size());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.size());
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotNull(strBuilder2);
  }

  @Test
  public void test035()  throws Throwable  {
      String string0 = "M}m^";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      String string1 = "";
      assertNotSame(string1, string0);
      
      boolean boolean0 = strBuilder0.contains(string1);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test036()  throws Throwable  {
      String string0 = "length must be valid";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(52, strBuilder0.capacity());
      assertEquals(20, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(20, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      int int0 = (-155);
      int int1 = strBuilder0.indexOf(string0, int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(52, strBuilder0.capacity());
      assertEquals(20, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(20, strBuilder0.length());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test
  public void test037()  throws Throwable  {
      String string0 = "&=*2OoNQ'Q]";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(11, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(43, strBuilder0.capacity());
      assertEquals(11, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher();
      assertNotNull(strMatcher_TrimMatcher0);
      
      int int1 = strBuilder0.lastIndexOf((StrMatcher) strMatcher_TrimMatcher0, int0);
      assertEquals(11, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(43, strBuilder0.capacity());
      assertEquals(11, strBuilder0.length());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      char char0 = 'd';
      int int2 = strBuilder0.indexOf(char0, int1);
      assertEquals(11, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(43, strBuilder0.capacity());
      assertEquals(11, strBuilder0.length());
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertEquals((-1), int2);
  }

  @Test
  public void test038()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char char0 = ']';
      int int0 = (-1);
      int int1 = strBuilder0.indexOf(char0, int0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals((-1), int1);
  }

  @Test
  public void test039()  throws Throwable  {
      String string0 = null;
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      int int0 = 32;
      StrBuilder strBuilder1 = strBuilder0.setLength(int0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(32, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher();
      assertNotNull(strMatcher_TrimMatcher0);
      
      boolean boolean0 = strBuilder0.contains((StrMatcher) strMatcher_TrimMatcher0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.size());
      assertTrue(boolean0);
      assertSame(strBuilder0, strBuilder1);
  }

  @Test
  public void test040()  throws Throwable  {
      int int0 = (-2090);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = (StrMatcher.CharMatcher)StrMatcher.commaMatcher();
      assertNotNull(strMatcher_CharMatcher0);
      
      boolean boolean0 = strBuilder0.contains((StrMatcher) strMatcher_CharMatcher0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test
  public void test041()  throws Throwable  {
      String string0 = "'; the SystemUtils property value will default to null.";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(87, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(55, strBuilder0.size());
      assertEquals(55, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      String string1 = "PSsW>";
      assertNotSame(string1, string0);
      
      boolean boolean0 = strBuilder0.contains(string1);
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(87, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(55, strBuilder0.size());
      assertEquals(55, strBuilder0.length());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test042()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      char char0 = '<';
      char[] charArray0 = new char[6];
      charArray0[0] = char0;
      StrBuilder strBuilder1 = strBuilder0.append(charArray0);
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(6, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(6, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.length());
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertArrayEquals(new char[] {'<', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      boolean boolean0 = strBuilder0.contains(char0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.length());
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(boolean0);
      assertSame(strBuilder0, strBuilder1);
  }

  @Test
  public void test043()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      char char0 = 'g';
      boolean boolean0 = strBuilder0.contains(char0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertFalse(boolean0);
  }

  @Test
  public void test044()  throws Throwable  {
      int int0 = 3;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((long) int0);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      int int1 = (-4020);
      char char0 = 'J';
      String string0 = strBuilder1.midString(int1, (int) char0);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("3", string0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(string0);
  }

  @Test
  public void test045()  throws Throwable  {
      int int0 = 117;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(117, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      Object[] objectArray0 = new Object[26];
      String string0 = ")Y[=[fTU_5t9E/j~@B";
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, string0);
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(450, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(450, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(450, strBuilder1.capacity());
      assertEquals(450, strBuilder0.size());
      assertEquals(450, strBuilder0.length());
      assertEquals(450, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      char[] charArray0 = new char[6];
      char char0 = '$';
      charArray0[0] = char0;
      String string1 = strBuilder0.midString((int) char0, (int) charArray0[0]);
      assertEquals(450, strBuilder0.size());
      assertEquals(450, strBuilder0.length());
      assertEquals(450, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {'$', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(")Y[=[fTU_5t9E/j~@B)Y[=[fTU_5t9E/j~@B", string1);
      assertNotSame(string1, string0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(string1);
  }

  @Test
  public void test046()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      int int1 = 32;
      String string0 = strBuilder0.midString(int0, int1);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test
  public void test047()  throws Throwable  {
      int int0 = 117;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(117, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      String string0 = "";
      int int1 = strBuilder0.indexOf(string0);
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(117, strBuilder0.capacity());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
      
      String string1 = strBuilder0.midString(int1, int1);
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(117, strBuilder0.capacity());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
  }

  @Test
  public void test048()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = 2879;
      char char0 = ']';
      StrBuilder strBuilder1 = strBuilder0.setLength(int0);
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(2879, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(2879, strBuilder1.size());
      assertEquals(2879, strBuilder1.length());
      assertEquals(2879, strBuilder0.size());
      assertEquals(2879, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2879, strBuilder0.length());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      String string0 = strBuilder0.rightString((int) char0);
      assertEquals(2879, strBuilder0.size());
      assertEquals(2879, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2879, strBuilder0.length());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(string0);
  }

  @Test
  public void test049()  throws Throwable  {
      String string0 = null;
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      String string1 = strBuilder0.rightString(int0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test
  public void test050()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[4];
      char char0 = ']';
      charArray0[0] = char0;
      String string0 = strBuilder0.rightString((int) charArray0[0]);
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertArrayEquals(new char[] {']', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test
  public void test051()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char char0 = ']';
      StrBuilder strBuilder1 = strBuilder0.insert(int0, char0);
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft((int) char0, (int) char0, char0);
      assertEquals(94, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(94, strBuilder0.size());
      assertEquals(94, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(94, strBuilder2.length());
      assertEquals(94, strBuilder2.size());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(94, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      String string0 = strBuilder0.leftString((int) char0);
      assertEquals(94, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(94, strBuilder0.size());
      assertEquals(94, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]9", string0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(string0);
  }

  @Test
  public void test052()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      int int0 = (-2591);
      String string0 = strBuilder0.leftString(int0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test
  public void test053()  throws Throwable  {
      String string0 = "Invalid startIndex: ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(52, strBuilder0.capacity());
      assertEquals(20, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(20, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[9];
      char char0 = 'S';
      charArray0[0] = char0;
      String string1 = strBuilder0.leftString((int) charArray0[0]);
      assertEquals(52, strBuilder0.capacity());
      assertEquals(20, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(20, strBuilder0.length());
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertArrayEquals(new char[] {'S', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("Invalid startIndex: ", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test054()  throws Throwable  {
      String string0 = "'; the SystemUtils property value will default to null.";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(87, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(55, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(55, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      String string1 = "pg)uf[";
      assertNotSame(string1, string0);
      
      boolean boolean0 = strBuilder0.endsWith(string1);
      assertEquals(87, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(55, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(55, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test055()  throws Throwable  {
      String string0 = "'; the SystemUtils property value will default to null.";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(87, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(55, strBuilder0.length());
      assertEquals(55, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.endsWith(string0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(87, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(55, strBuilder0.length());
      assertEquals(55, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(boolean0);
  }

  @Test
  public void test056()  throws Throwable  {
      int int0 = 97;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(97, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      String string0 = "";
      boolean boolean0 = strBuilder0.endsWith(string0);
      assertEquals(97, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(boolean0);
  }

  @Test
  public void test057()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      String string0 = null;
      boolean boolean0 = strBuilder0.endsWith(string0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test
  public void test058()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      String string0 = "F($YEA";
      boolean boolean0 = strBuilder0.endsWith(string0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(boolean0);
  }

  @Test
  public void test059()  throws Throwable  {
      int int0 = 1567;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(1567, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[5];
      char char0 = ']';
      String string0 = "StrTokenizer[not tokenized yet]";
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((int) charArray0[2], (int) char0, char0);
      assertEquals(93, strBuilder0.length());
      assertEquals(1567, strBuilder0.capacity());
      assertEquals(93, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(1567, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(93, strBuilder1.length());
      assertEquals(93, strBuilder1.size());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      boolean boolean0 = strBuilder0.startsWith(string0);
      assertEquals(93, strBuilder0.length());
      assertEquals(1567, strBuilder0.capacity());
      assertEquals(93, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(boolean0);
      assertSame(strBuilder0, strBuilder1);
  }

  @Test
  public void test060()  throws Throwable  {
      int int0 = 2311;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(2311, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      String string0 = "5.0";
      boolean boolean0 = strBuilder0.startsWith(string0);
      assertEquals(2311, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(boolean0);
  }

  @Test
  public void test061()  throws Throwable  {
      int int0 = 117;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(117, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      String string0 = "";
      boolean boolean0 = strBuilder0.startsWith(string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(117, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test
  public void test062()  throws Throwable  {
      String string0 = null;
      int int0 = 2152;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2152, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.startsWith(string0);
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2152, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test
  public void test063()  throws Throwable  {
      String string0 = "length must be valid";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(52, strBuilder0.capacity());
      assertEquals(20, strBuilder0.length());
      assertEquals(20, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.startsWith(string0);
      assertEquals(52, strBuilder0.capacity());
      assertEquals(20, strBuilder0.length());
      assertEquals(20, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertTrue(boolean0);
  }

  @Test
  public void test064()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      Object[] objectArray0 = new Object[5];
      String string0 = "Invalid offset: ";
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, string0);
      assertEquals(64, strBuilder0.size());
      assertEquals(64, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(64, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(64, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(64, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(64, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.trim();
      assertEquals(64, strBuilder0.capacity());
      assertEquals(63, strBuilder0.length());
      assertEquals(63, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(63, strBuilder2.size());
      assertEquals(64, strBuilder2.capacity());
      assertEquals(63, strBuilder2.length());
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(63, strBuilder1.length());
      assertEquals(63, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(64, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertNotNull(strBuilder2);
  }

  @Test
  public void test065()  throws Throwable  {
      String string0 = "#DwHd+\"^Wou .\\U?/";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(17, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(17, strBuilder0.size());
      assertEquals(49, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(17, strBuilder1.size());
      assertEquals(17, strBuilder1.length());
      assertEquals(49, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(17, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(17, strBuilder0.size());
      assertEquals(49, strBuilder0.capacity());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test066()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test067()  throws Throwable  {
      int int0 = (-2105);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.reverse();
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test068()  throws Throwable  {
      String string0 = "&=*2OoNQ'Q]";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(43, strBuilder0.capacity());
      assertEquals(11, strBuilder0.size());
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.reverse();
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(11, strBuilder1.length());
      assertEquals(43, strBuilder1.capacity());
      assertEquals(11, strBuilder1.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(43, strBuilder0.capacity());
      assertEquals(11, strBuilder0.size());
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test069()  throws Throwable  {
      String string0 = "a5x_M";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(37, strBuilder0.capacity());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      Object[] objectArray0 = new Object[9];
      String string1 = "r\"iI;[aIbuh#`d tV";
      assertNotSame(string1, string0);
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, string1);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(141, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(141, strBuilder0.length());
      assertEquals(141, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(141, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(141, strBuilder1.capacity());
      assertEquals(141, strBuilder1.size());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(string1, string0);
      assertNotNull(strBuilder1);
      
      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = (StrMatcher.CharSetMatcher)StrMatcher.splitMatcher();
      assertNotNull(strMatcher_CharSetMatcher0);
      
      StrBuilder strBuilder2 = strBuilder0.deleteAll((StrMatcher) strMatcher_CharSetMatcher0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(141, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(133, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(133, strBuilder0.size());
      assertEquals(141, strBuilder2.capacity());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(133, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(133, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test
  public void test070()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char char0 = 'X';
      String string0 = null;
      StrBuilder strBuilder1 = strBuilder0.append((long) int0);
      assertEquals(1, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = (StrMatcher.CharMatcher)StrMatcher.commaMatcher();
      assertNotNull(strMatcher_CharMatcher0);
      
      StrBuilder strBuilder2 = strBuilder0.replace((StrMatcher) strMatcher_CharMatcher0, string0, int0, (int) char0, int0);
      assertEquals(32, strBuilder2.capacity());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.length());
      assertEquals(1, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotNull(strBuilder2);
  }

  @Test
  public void test071()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[7];
      StrBuilder strBuilder1 = strBuilder0.append(charArray0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.size());
      assertEquals(7, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(7, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      String string0 = "end < start";
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = (StrMatcher.CharMatcher)StrMatcher.singleQuoteMatcher();
      assertNotNull(strMatcher_CharMatcher0);
      
      StrBuilder strBuilder2 = strBuilder1.replaceFirst((StrMatcher) strMatcher_CharMatcher0, string0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(7, strBuilder2.length());
      assertEquals(7, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(7, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(7, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertNotNull(strBuilder2);
  }

  @Test
  public void test072()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      String string0 = "end < start";
      StrBuilder strBuilder1 = strBuilder0.append(string0);
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(11, strBuilder1.length());
      assertEquals(11, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(11, strBuilder0.length());
      assertEquals(11, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      String string1 = null;
      StrBuilder strBuilder2 = strBuilder0.replaceFirst(string0, string1);
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertEquals(true, strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test
  public void test073()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      String string0 = "CX+Rqyh_aUu[";
      StrBuilder strBuilder1 = strBuilder0.append(string0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(12, strBuilder0.length());
      assertEquals(12, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertEquals(12, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(12, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.replaceFirst(string0, string0);
      assertEquals(12, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(12, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(12, strBuilder0.length());
      assertEquals(12, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertEquals(12, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(12, strBuilder1.length());
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test
  public void test074()  throws Throwable  {
      String string0 = null;
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(string0, string0);
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test075()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      String string0 = "CX+Rqyh_aUu[";
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(string0, string0);
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test076()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      String string0 = "r_H\"Q$:FPX1/Ju2lR";
      String string1 = null;
      StrBuilder strBuilder1 = strBuilder0.replaceAll(string0, string1);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test077()  throws Throwable  {
      int int0 = (-1551);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      String string0 = null;
      StrBuilder strBuilder1 = strBuilder0.replaceAll(string0, string0);
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test078()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char char0 = '[';
      StrBuilder strBuilder1 = strBuilder0.append(char0);
      assertEquals(1, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      char char1 = '4';
      StrBuilder strBuilder2 = strBuilder0.replaceFirst(char0, char1);
      assertEquals(32, strBuilder2.capacity());
      assertEquals(1, strBuilder2.size());
      assertEquals(1, strBuilder2.length());
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(char0 == char1);
      assertFalse(char1 == char0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test
  public void test079()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      int int0 = 1456;
      char char0 = 'I';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(int0, int0, char0);
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1456, strBuilder1.length());
      assertEquals(1456, strBuilder1.capacity());
      assertEquals(1456, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(1456, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1456, strBuilder0.size());
      assertEquals(1456, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      char char1 = '&';
      StrBuilder strBuilder2 = strBuilder1.replaceFirst(char1, char0);
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(1456, strBuilder2.capacity());
      assertEquals(1456, strBuilder2.length());
      assertEquals(1456, strBuilder2.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1456, strBuilder1.length());
      assertEquals(1456, strBuilder1.capacity());
      assertEquals(1456, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(1456, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1456, strBuilder0.size());
      assertEquals(1456, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(char0 == char1);
      assertFalse(char1 == char0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotNull(strBuilder2);
  }

  @Test
  public void test080()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      char char0 = '<';
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(char0, char0);
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test081()  throws Throwable  {
      String string0 = "a5x_M";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(37, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char char0 = 'f';
      char char1 = '_';
      StrBuilder strBuilder1 = strBuilder0.replaceAll(char1, char0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(37, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(37, strBuilder1.capacity());
      assertEquals(5, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(char0 == char1);
      assertFalse(char1 == char0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test082()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      char char0 = 'I';
      StrBuilder strBuilder1 = strBuilder0.replaceAll(char0, char0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(true, strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test083()  throws Throwable  {
      String string0 = null;
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      char char0 = ',';
      StrBuilder strBuilder1 = strBuilder0.replace(int0, (int) char0, string0);
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test084()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      String string0 = "Invalid offset: ";
      int int0 = 1456;
      char char0 = 'I';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(int0, int0, char0);
      assertEquals(1456, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1456, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1456, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(1456, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1456, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(1456, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.insert((int) char0, string0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1472, strBuilder0.length());
      assertEquals(1472, strBuilder0.capacity());
      assertEquals(1472, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(1472, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(1472, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(1472, strBuilder2.size());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = (StrMatcher.CharMatcher)StrMatcher.spaceMatcher();
      assertNotNull(strMatcher_CharMatcher0);
      
      String string1 = null;
      StrBuilder strBuilder3 = strBuilder0.replace((StrMatcher) strMatcher_CharMatcher0, string1, (int) char0, int0, int0);
      assertNull(strBuilder3.getNullText());
      assertEquals(1470, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(false, strBuilder3.isEmpty());
      assertEquals(1472, strBuilder3.capacity());
      assertEquals(1470, strBuilder3.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1470, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1472, strBuilder0.capacity());
      assertEquals(1470, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertNotNull(strBuilder3);
  }

  @Test
  public void test085()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      int int0 = 2879;
      String string0 = "Invalid length: ";
      StrBuilder strBuilder1 = strBuilder0.setLength(int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(2879, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2879, strBuilder0.capacity());
      assertEquals(2879, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(2879, strBuilder1.length());
      assertEquals(2879, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(2879, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.replace(int0, int0, string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(2895, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2895, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(2895, strBuilder0.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(2895, strBuilder2.capacity());
      assertEquals(2895, strBuilder2.size());
      assertEquals(2895, strBuilder2.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test
  public void test086()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      String string0 = ",";
      StrBuilder strBuilder1 = strBuilder0.append(string0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.replaceAll(string0, string0);
      assertNull(strBuilder2.getNullText());
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(1, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(1, strBuilder2.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test
  public void test087()  throws Throwable  {
      int int0 = 9;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      char char0 = 'U';
      String string0 = "<2t_{iKp:fbPxf";
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) string0, (int) char0, char0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(85, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(85, strBuilder0.size());
      assertEquals(85, strBuilder0.length());
      assertEquals(85, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(85, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(85, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.deleteFirst(string0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(85, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(70, strBuilder0.length());
      assertEquals(70, strBuilder0.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(70, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(70, strBuilder2.size());
      assertEquals(85, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test
  public void test088()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      String string0 = "r_H\"Q$:FPX1/Ju2lR";
      StrBuilder strBuilder1 = strBuilder0.deleteFirst(string0);
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test089()  throws Throwable  {
      String string0 = null;
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst(string0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test090()  throws Throwable  {
      String string0 = null;
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll(string0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test091()  throws Throwable  {
      int int0 = 117;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(117, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      Object[] objectArray0 = new Object[26];
      String string0 = ")Y[=[fTU_5t9E/j~@B";
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, string0);
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(450, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(450, strBuilder1.length());
      assertEquals(450, strBuilder1.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(450, strBuilder0.capacity());
      assertEquals(450, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(450, strBuilder0.length());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      char[] charArray0 = new char[6];
      StrBuilder strBuilder2 = strBuilder0.insert(int0, charArray0);
      assertEquals(456, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(456, strBuilder0.length());
      assertEquals(456, strBuilder0.capacity());
      assertEquals(456, strBuilder2.capacity());
      assertEquals(456, strBuilder2.size());
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(456, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.deleteFirst(charArray0[1]);
      assertEquals(455, strBuilder3.length());
      assertEquals(456, strBuilder3.capacity());
      assertEquals(455, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(false, strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(455, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(455, strBuilder0.length());
      assertEquals(456, strBuilder0.capacity());
      assertEquals(456, strBuilder2.capacity());
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(455, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(455, strBuilder2.length());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder3);
  }

  @Test
  public void test092()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      int int0 = 9;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(9, (int)integer0);
      
      StrBuilder strBuilder1 = strBuilder0.append((Object) integer0);
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertTrue(integer0.equals((Object)int0));
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      char char0 = 'm';
      StrBuilder strBuilder2 = strBuilder0.deleteFirst(char0);
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(1, strBuilder2.size());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test
  public void test093()  throws Throwable  {
      int int0 = 2311;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(2311, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      char char0 = ')';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) strBuilder0, int0, char0);
      assertEquals(2311, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(2311, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(2311, strBuilder1.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(2311, strBuilder0.size());
      assertEquals(2311, strBuilder0.capacity());
      assertEquals(2311, strBuilder0.length());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.deleteAll(char0);
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(2311, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(2311, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder2.length());
      assertEquals(2311, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(true, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test
  public void test094()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      int int0 = 1456;
      char char0 = 'I';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(int0, int0, char0);
      assertEquals(1456, strBuilder1.size());
      assertEquals(1456, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(1456, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(1456, strBuilder0.size());
      assertEquals(1456, strBuilder0.length());
      assertEquals(1456, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.deleteAll(char0);
      assertEquals(4, strBuilder2.length());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(1456, strBuilder2.capacity());
      assertEquals(4, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(1456, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(4, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.size());
      assertEquals(4, strBuilder0.length());
      assertEquals(1456, strBuilder0.capacity());
      assertEquals(4, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test
  public void test095()  throws Throwable  {
      int int0 = (-2105);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      int int1 = 6;
      StrBuilder strBuilder1 = strBuilder0.setLength(int1);
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(6, strBuilder1.length());
      assertEquals(6, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(6, strBuilder0.length());
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.trim();
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(true, strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test
  public void test096()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.delete(int0, int0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test097()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[2];
      char char0 = '>';
      charArray0[0] = char0;
      charArray0[1] = charArray0[0];
      StrBuilder strBuilder1 = strBuilder0.setLength((int) charArray0[1]);
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(62, strBuilder1.size());
      assertEquals(62, strBuilder1.capacity());
      assertEquals(62, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(62, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(62, strBuilder0.size());
      assertEquals(62, strBuilder0.capacity());
      assertArrayEquals(new char[] {'>', '>'}, charArray0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      boolean boolean0 = true;
      StrBuilder strBuilder2 = strBuilder0.insert((int) char0, boolean0);
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(66, strBuilder2.length());
      assertEquals(66, strBuilder2.size());
      assertEquals(66, strBuilder2.capacity());
      assertEquals(66, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(66, strBuilder0.capacity());
      assertEquals(66, strBuilder0.size());
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotNull(strBuilder2);
  }

  @Test
  public void test098()  throws Throwable  {
      String string0 = "a5x_M";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(37, strBuilder0.capacity());
      assertEquals(5, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char char0 = 'f';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((int) char0, (int) char0, char0);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(107, strBuilder1.size());
      assertEquals(107, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(107, strBuilder1.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(107, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(107, strBuilder0.capacity());
      assertEquals(107, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      boolean boolean0 = false;
      StrBuilder strBuilder2 = strBuilder1.insert((int) char0, boolean0);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(112, strBuilder1.size());
      assertEquals(112, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(112, strBuilder1.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(112, strBuilder0.capacity());
      assertEquals(112, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(112, strBuilder0.length());
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(112, strBuilder2.length());
      assertEquals(112, strBuilder2.size());
      assertEquals(112, strBuilder2.capacity());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test
  public void test099()  throws Throwable  {
      String string0 = "a5x_M";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(37, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = 4;
      int int1 = 0;
      char[] charArray0 = new char[6];
      StrBuilder strBuilder1 = strBuilder0.insert(int1, charArray0, int1, int0);
      assertEquals(37, strBuilder1.capacity());
      assertEquals(9, strBuilder1.length());
      assertEquals(9, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.length());
      assertEquals(37, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.size());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test100()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[1];
      char char0 = 'O';
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.insert(int0, charArray0, int0, (int) char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 79
         //
      }
  }

  @Test
  public void test101()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      char char0 = '\'';
      char[] charArray0 = new char[5];
      charArray0[1] = char0;
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.insert(int0, charArray0, (int) charArray0[1], int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: 39
         //
      }
  }

  @Test
  public void test102()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      char[] charArray0 = new char[9];
      int int1 = (-1247);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.insert(int0, charArray0, int1, int1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: -1247
         //
      }
  }

  @Test
  public void test103()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      char[] charArray0 = new char[9];
      StrBuilder strBuilder1 = strBuilder0.insert(int0, charArray0, int0, (int) charArray0[1]);
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test104()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      char[] charArray0 = strBuilder0.toCharArray(int0, int0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      int int1 = strBuilder_StrBuilderReader0.read(charArray0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, int1);
      
      StrBuilder strBuilder1 = strBuilder0.insert(int1, charArray0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test105()  throws Throwable  {
      String string0 = "";
      int int0 = 2;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(2, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(2, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      List list0 = strBuilder_StrBuilderTokenizer0.getTokenList();
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(2, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertNotNull(list0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) list0;
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(2, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertNotNull(objectArray0[0]);
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, string0);
      assertEquals(2, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.capacity());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      Object object0 = null;
      StrBuilder strBuilder2 = strBuilder0.insert(int0, object0);
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.capacity());
      assertEquals(2, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(2, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.capacity());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotNull(strBuilder2);
  }

  @Test
  public void test106()  throws Throwable  {
      int int0 = 2;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(2, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      char char0 = 'd';
      StrMatcher strMatcher0 = null;
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.insert((int) char0, (Object) strMatcher0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 100
         //
      }
  }

  @Test
  public void test107()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char char0 = 'X';
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.insert((int) char0, (Object) strBuilder0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 88
         //
      }
  }

  @Test
  public void test108()  throws Throwable  {
      int int0 = 3;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(3, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((long) int0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(3, strBuilder0.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3, strBuilder1.capacity());
      assertEquals(1, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      char char0 = 'J';
      int int1 = 1;
      StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadRight((Object) strBuilder1, int1, char0);
      assertEquals(2, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertEquals(3, strBuilder0.capacity());
      assertEquals(2, strBuilder2.size());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(3, strBuilder2.capacity());
      assertEquals(2, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3, strBuilder1.capacity());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertNotNull(strBuilder2);
  }

  @Test
  public void test109()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      Object object0 = null;
      int int0 = 5370;
      char char0 = '=';
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(object0, int0, char0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test110()  throws Throwable  {
      int int0 = (-2750);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      char char0 = '.';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((Object) strBuilder0, int0, char0);
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test111()  throws Throwable  {
      int int0 = 2311;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(2311, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char char0 = ')';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) strBuilder0, int0, char0);
      assertEquals(2311, strBuilder1.size());
      assertEquals(2311, strBuilder1.length());
      assertEquals(2311, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2311, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(2311, strBuilder0.size());
      assertEquals(2311, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendFixedWidthPadLeft((Object) strBuilder1, int0, char0);
      assertNull(strBuilder2.getNullText());
      assertEquals(4622, strBuilder2.size());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(4622, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(4622, strBuilder2.capacity());
      assertEquals(4622, strBuilder1.size());
      assertEquals(4622, strBuilder1.length());
      assertEquals(4622, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(4622, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(4622, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4622, strBuilder0.size());
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test
  public void test112()  throws Throwable  {
      String string0 = "Invalid length: ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(48, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[10];
      char char0 = 'G';
      charArray0[2] = char0;
      Object object0 = null;
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(object0, (int) charArray0[2], charArray0[2]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test113()  throws Throwable  {
      String string0 = "-T}l";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(4, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(36, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      char char0 = 'g';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) string0, int0, char0);
      assertEquals(36, strBuilder1.capacity());
      assertEquals(4, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(4, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(4, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(36, strBuilder0.capacity());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test114()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char char0 = '\'';
      StrBuilder strBuilder1 = strBuilder0.appendPadding((int) char0, char0);
      assertEquals(39, strBuilder1.capacity());
      assertEquals(39, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(39, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(39, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(39, strBuilder0.length());
      assertEquals(39, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test115()  throws Throwable  {
      int int0 = 97;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(97, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[1];
      int int1 = (-3015);
      StrBuilder strBuilder1 = strBuilder0.appendPadding(int1, charArray0[0]);
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(97, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(97, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test116()  throws Throwable  {
      String string0 = "a5x_M";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(37, strBuilder0.capacity());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      Object[] objectArray0 = new Object[9];
      String string1 = "r\"iI;[aIbuh#`d tV";
      assertNotSame(string1, string0);
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, string1);
      assertEquals(141, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(141, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(141, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(141, strBuilder1.size());
      assertEquals(141, strBuilder1.capacity());
      assertEquals(141, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(string0, string1);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(string1, string0);
      assertNotNull(strBuilder1);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertEquals(141, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(141, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(141, strBuilder0.capacity());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(string0.equals((Object)string1));
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(string0, string1);
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrBuilder strBuilder2 = strBuilder1.appendWithSeparators((Iterator) strBuilder_StrBuilderTokenizer0, string0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(314, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(314, strBuilder0.capacity());
      assertEquals(314, strBuilder0.length());
      assertEquals(314, strBuilder2.capacity());
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(314, strBuilder2.length());
      assertEquals(314, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(9, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(8, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(314, strBuilder1.size());
      assertEquals(314, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(314, strBuilder1.length());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(string0, string1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(string1, string0);
      assertNotNull(strBuilder2);
  }

  @Test
  public void test117()  throws Throwable  {
      int int0 = (-1551);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      String string0 = null;
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) strBuilder_StrBuilderTokenizer0, string0);
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test118()  throws Throwable  {
      int int0 = 9;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      Iterator<String> iterator0 = null;
      String string0 = "<2t_{iKp:fbPxf";
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(iterator0, string0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(9, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test119()  throws Throwable  {
      int int0 = 2311;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(2311, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      String string0 = "5.0";
      char char0 = ')';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) strBuilder0, int0, char0);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(2311, strBuilder1.capacity());
      assertEquals(2311, strBuilder1.length());
      assertEquals(2311, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(2311, strBuilder0.size());
      assertEquals(2311, strBuilder0.length());
      assertEquals(2311, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(2311, strBuilder1.capacity());
      assertEquals(2311, strBuilder1.length());
      assertEquals(2311, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(2311, strBuilder0.size());
      assertEquals(2311, strBuilder0.length());
      assertEquals(2311, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      List list0 = strBuilder_StrBuilderTokenizer0.getTokenList();
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(2311, strBuilder1.capacity());
      assertEquals(2311, strBuilder1.length());
      assertEquals(2311, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(2311, strBuilder0.size());
      assertEquals(2311, strBuilder0.length());
      assertEquals(2311, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(list0);
      
      StrBuilder strBuilder2 = strBuilder1.appendWithSeparators((Collection) list0, string0);
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(4622, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(4622, strBuilder2.capacity());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(4622, strBuilder2.length());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(4622, strBuilder1.capacity());
      assertEquals(4622, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(4622, strBuilder1.length());
      assertEquals(4622, strBuilder0.capacity());
      assertEquals(4622, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4622, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotNull(strBuilder2);
  }

  @Test
  public void test120()  throws Throwable  {
      int int0 = (-1551);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      assertEquals(1, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      String string0 = null;
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      boolean boolean0 = false;
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.setIgnoreEmptyTokens(boolean0);
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(false, strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertEquals(-1, strBuilder_StrBuilderTokenizer1.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder_StrBuilderTokenizer1);
      
      List list0 = strBuilder_StrBuilderTokenizer0.getTokenList();
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(2, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(list0);
      
      StrBuilder strBuilder2 = strBuilder1.appendWithSeparators((Collection) list0, string0);
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(1, strBuilder2.size());
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(1, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(2, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(1, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotNull(strBuilder2);
  }

  @Test
  public void test121()  throws Throwable  {
      String string0 = "";
      int int0 = 2;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(2, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(2, strBuilder0.capacity());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      List list0 = strBuilder_StrBuilderTokenizer0.getTokenList();
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(2, strBuilder0.capacity());
      assertNotNull(list0);
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) list0, string0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(2, strBuilder0.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(2, strBuilder1.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test122()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      Collection<Object> collection0 = null;
      String string0 = "QeeSQ|g{tU(BEON";
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(collection0, string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test123()  throws Throwable  {
      int int0 = (-1551);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      Object[] objectArray0 = new Object[2];
      String string0 = null;
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, string0);
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test124()  throws Throwable  {
      int int0 = 97;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(97, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = true;
      StrBuilder strBuilder1 = strBuilder0.append(boolean0);
      assertEquals(4, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(97, strBuilder0.capacity());
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(4, strBuilder1.length());
      assertEquals(97, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test125()  throws Throwable  {
      int int0 = (-3575);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[2];
      char char0 = 'a';
      charArray0[1] = char0;
      int int1 = 0;
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(charArray0, int1, (int) charArray0[1]);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 97
         //
      }
  }

  @Test
  public void test126()  throws Throwable  {
      String string0 = null;
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      char[] charArray0 = new char[4];
      int int1 = (-3919);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(charArray0, int0, int1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -3919
         //
      }
  }

  @Test
  public void test127()  throws Throwable  {
      int int0 = 97;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(97, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertEquals(97, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      char[] charArray0 = new char[10];
      // Undeclared exception!
      try {
        strBuilder_StrBuilderWriter0.write(charArray0, int0, (int) charArray0[6]);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 0
         //
      }
  }

  @Test
  public void test128()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[1];
      int int0 = (-1314);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(charArray0, int0, (int) charArray0[0]);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 0
         //
      }
  }

  @Test
  public void test129()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = null;
      StrBuilder strBuilder1 = strBuilder0.append(charArray0);
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test130()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[2];
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.append(strBuilder0, (int) charArray0[0], int0);
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test131()  throws Throwable  {
      String string0 = "-T}l";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(4, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      char char0 = 'g';
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(strBuilder0, int0, (int) char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
      }
  }

  @Test
  public void test132()  throws Throwable  {
      String string0 = "7(!);z9";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(8, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(40, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(8, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      int int1 = (-9);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(strBuilder0, int0, int1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
      }
  }

  @Test
  public void test133()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      int int0 = 97;
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(strBuilder0, int0, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
      }
  }

  @Test
  public void test134()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = (-1763);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(strBuilder0, int0, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
      }
  }

  @Test
  public void test135()  throws Throwable  {
      String string0 = "C?TXJ~,t()Ltm6g";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(15, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.length());
      assertEquals(47, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char char0 = '!';
      StrBuilder strBuilder1 = null;
      StrBuilder strBuilder2 = strBuilder0.append(strBuilder1, (int) char0, (int) char0);
      assertEquals(15, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.length());
      assertEquals(47, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(15, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(15, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(47, strBuilder2.capacity());
      assertEquals(false, strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test
  public void test136()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      String string0 = "qlY)~7x}T#xkkr";
      int int0 = 0;
      int int1 = 2;
      StrBuilder strBuilder1 = strBuilder0.append(string0, int0, int1);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(2, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.append(strBuilder0);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(4, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(4, strBuilder1.size());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(4, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(4, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(4, strBuilder0.size());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotNull(strBuilder2);
  }

  @Test
  public void test137()  throws Throwable  {
      String string0 = "'; the SystemUtils property value will default to null.";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(87, strBuilder0.capacity());
      assertEquals(55, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(55, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = null;
      StrBuilder strBuilder2 = strBuilder0.append(strBuilder1);
      assertEquals(55, strBuilder2.length());
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(87, strBuilder2.capacity());
      assertEquals(55, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(87, strBuilder0.capacity());
      assertEquals(55, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(55, strBuilder0.length());
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder0, strBuilder2);
      assertNotNull(strBuilder2);
  }

  @Test
  public void test138()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append(strBuilder0);
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test139()  throws Throwable  {
      int int0 = 1567;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(1567, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[5];
      char char0 = ']';
      char char1 = '&';
      charArray0[1] = char1;
      charArray0[2] = char0;
      charArray0[3] = charArray0[2];
      charArray0[4] = charArray0[1];
      CharBuffer charBuffer0 = CharBuffer.allocate((int) charArray0[3]);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(true, charBuffer0.hasRemaining());
      assertEquals(93, charBuffer0.length());
      assertEquals(true, charBuffer0.hasArray());
      assertEquals(93, charBuffer0.capacity());
      assertEquals(93, charBuffer0.remaining());
      assertEquals(93, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(false, charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(false, charBuffer0.isReadOnly());
      assertArrayEquals(new char[] {'\u0000', '&', ']', ']', '&'}, charArray0);
      assertNotNull(charBuffer0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) charBuffer0);
      assertEquals(109, stringBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", stringBuffer0.toString());
      assertEquals(93, stringBuffer0.length());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(true, charBuffer0.hasRemaining());
      assertEquals(93, charBuffer0.length());
      assertEquals(true, charBuffer0.hasArray());
      assertEquals(93, charBuffer0.capacity());
      assertEquals(93, charBuffer0.remaining());
      assertEquals(93, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(false, charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(false, charBuffer0.isReadOnly());
      assertArrayEquals(new char[] {'\u0000', '&', ']', ']', '&'}, charArray0);
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, (int) char1, (int) charArray0[4]);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1567, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(38, strBuilder1.length());
      assertEquals(38, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(109, stringBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", stringBuffer0.toString());
      assertEquals(93, stringBuffer0.length());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(true, charBuffer0.hasRemaining());
      assertEquals(93, charBuffer0.length());
      assertEquals(true, charBuffer0.hasArray());
      assertEquals(93, charBuffer0.capacity());
      assertEquals(93, charBuffer0.remaining());
      assertEquals(93, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(false, charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(false, charBuffer0.isReadOnly());
      assertEquals(38, strBuilder0.length());
      assertEquals(1567, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(38, strBuilder0.size());
      assertFalse(char1 == char0);
      assertArrayEquals(new char[] {'\u0000', '&', ']', ']', '&'}, charArray0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test140()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(0, stringBuffer0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(stringBuffer0);
      
      int int0 = 0;
      int int1 = 3496;
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, int0, int1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
      }
  }

  @Test
  public void test141()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char char0 = '0';
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) string0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.capacity());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, (int) char0, (int) char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
      }
  }

  @Test
  public void test142()  throws Throwable  {
      String string0 = "U|$wjb}H[)";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(42, strBuilder0.capacity());
      assertEquals(10, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      char char0 = 'u';
      StringBuffer stringBuffer0 = new StringBuffer(string0);
      assertEquals(26, stringBuffer0.capacity());
      assertEquals("U|$wjb}H[)", stringBuffer0.toString());
      assertEquals(10, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      int int0 = (-484);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, int0, (int) char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
      }
  }

  @Test
  public void test143()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      char char0 = 'G';
      StringBuffer stringBuffer0 = null;
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, (int) char0, int0);
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test144()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
      assertEquals(0, stringBuffer0.capacity());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(stringBuffer0);
      
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, int0, int0);
      assertEquals(0, stringBuffer0.capacity());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test145()  throws Throwable  {
      int int0 = 1567;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(1567, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[5];
      char char0 = ']';
      charArray0[2] = char0;
      charArray0[3] = charArray0[2];
      charArray0[4] = charArray0[3];
      CharBuffer charBuffer0 = CharBuffer.allocate((int) charArray0[4]);
      assertEquals(93, charBuffer0.remaining());
      assertEquals(false, charBuffer0.isDirect());
      assertEquals(false, charBuffer0.isReadOnly());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(93, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(93, charBuffer0.capacity());
      assertEquals(true, charBuffer0.hasArray());
      assertEquals(93, charBuffer0.length());
      assertEquals(true, charBuffer0.hasRemaining());
      assertArrayEquals(new char[] {'\u0000', '\u0000', ']', ']', ']'}, charArray0);
      assertNotNull(charBuffer0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) charBuffer0);
      assertEquals(93, charBuffer0.remaining());
      assertEquals(false, charBuffer0.isDirect());
      assertEquals(false, charBuffer0.isReadOnly());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(93, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(93, charBuffer0.capacity());
      assertEquals(true, charBuffer0.hasArray());
      assertEquals(93, charBuffer0.length());
      assertEquals(true, charBuffer0.hasRemaining());
      assertEquals(109, stringBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", stringBuffer0.toString());
      assertEquals(93, stringBuffer0.length());
      assertArrayEquals(new char[] {'\u0000', '\u0000', ']', ']', ']'}, charArray0);
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0);
      assertEquals(93, charBuffer0.remaining());
      assertEquals(false, charBuffer0.isDirect());
      assertEquals(false, charBuffer0.isReadOnly());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(93, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(93, charBuffer0.capacity());
      assertEquals(true, charBuffer0.hasArray());
      assertEquals(93, charBuffer0.length());
      assertEquals(true, charBuffer0.hasRemaining());
      assertNull(strBuilder0.getNullText());
      assertEquals(1567, strBuilder0.capacity());
      assertEquals(93, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(93, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(93, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(93, strBuilder1.length());
      assertEquals(1567, strBuilder1.capacity());
      assertEquals(109, stringBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", stringBuffer0.toString());
      assertEquals(93, stringBuffer0.length());
      assertArrayEquals(new char[] {'\u0000', '\u0000', ']', ']', ']'}, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test146()  throws Throwable  {
      int int0 = 34;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = null;
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(34, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test147()  throws Throwable  {
      int int0 = (-557);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer(string0);
      assertEquals(0, stringBuffer0.length());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test148()  throws Throwable  {
      String string0 = "&=*2OoNQ'Q]";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(11, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(11, strBuilder0.length());
      assertEquals(43, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.append(string0, int0, int0);
      assertEquals(11, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(11, strBuilder0.length());
      assertEquals(43, strBuilder0.capacity());
      assertEquals(43, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(11, strBuilder1.length());
      assertEquals(11, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test149()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      char char0 = 'Q';
      String string0 = "java.vm.specification.name";
      int int0 = 0;
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(string0, int0, (int) char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
      }
  }

  @Test
  public void test150()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.getNewLineText();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(string0);
      
      String string1 = "RHk*,kT2";
      int int1 = strBuilder0.indexOf(string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(string1, int0, int1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
      }
  }

  @Test
  public void test151()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      String string0 = "qlY)~7x}T#xkkr";
      int int0 = (-18);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(string0, int0, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
      }
  }

  @Test
  public void test152()  throws Throwable  {
      String string0 = "#DwHd+\"^Wou .\\U?/";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(17, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(17, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(49, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = 700;
      char char0 = 'U';
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertEquals(17, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(17, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(49, strBuilder0.capacity());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      String string1 = null;
      strBuilder_StrBuilderWriter0.write(string1, int0, (int) char0);
      assertEquals(17, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(17, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(49, strBuilder0.capacity());
  }

  @Test
  public void test153()  throws Throwable  {
      String string0 = null;
      int int0 = 2152;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2152, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append(string0);
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(2152, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2152, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test154()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      String string0 = "I60:0 =EEzf=";
      StrBuilder strBuilder1 = strBuilder0.setNullText(string0);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals("I60:0 =EEzf=", strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals("I60:0 =EEzf=", strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendNull();
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(12, strBuilder1.length());
      assertEquals(12, strBuilder1.size());
      assertEquals("I60:0 =EEzf=", strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals("I60:0 =EEzf=", strBuilder2.getNullText());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(12, strBuilder2.length());
      assertEquals(12, strBuilder2.size());
      assertEquals(12, strBuilder0.length());
      assertEquals("I60:0 =EEzf=", strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(12, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test
  public void test155()  throws Throwable  {
      String string0 = "&=*2OoNQ'Q]";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(11, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(43, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setNewLineText(string0);
      assertEquals(11, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals("&=*2OoNQ'Q]", strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(11, strBuilder0.length());
      assertEquals(43, strBuilder0.capacity());
      assertEquals(11, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals("&=*2OoNQ'Q]", strBuilder1.getNewLineText());
      assertEquals(43, strBuilder1.capacity());
      assertEquals(11, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendNewLine();
      assertNull(strBuilder0.getNullText());
      assertEquals("&=*2OoNQ'Q]", strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(22, strBuilder0.size());
      assertEquals(22, strBuilder0.length());
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(43, strBuilder2.capacity());
      assertEquals(22, strBuilder2.size());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals("&=*2OoNQ'Q]", strBuilder2.getNewLineText());
      assertEquals(22, strBuilder2.length());
      assertNull(strBuilder1.getNullText());
      assertEquals("&=*2OoNQ'Q]", strBuilder1.getNewLineText());
      assertEquals(43, strBuilder1.capacity());
      assertEquals(22, strBuilder1.length());
      assertEquals(22, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test
  public void test156()  throws Throwable  {
      int int0 = 2;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int1 = 0;
      char[] charArray0 = new char[5];
      char char0 = 'N';
      // Undeclared exception!
      try {
        strBuilder0.getChars(int0, int1, charArray0, (int) char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
      }
  }

  @Test
  public void test157()  throws Throwable  {
      int int0 = (-2090);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      int int1 = 1422;
      char char0 = 'w';
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try {
        strBuilder0.getChars(int1, (int) char0, charArray0, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 119
         //
      }
  }

  @Test
  public void test158()  throws Throwable  {
      int int0 = (-2750);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrMatcher.NoMatcher strMatcher_NoMatcher0 = (StrMatcher.NoMatcher)StrMatcher.noneMatcher();
      assertNotNull(strMatcher_NoMatcher0);
      
      int int1 = 0;
      int int2 = strBuilder0.lastIndexOf((StrMatcher) strMatcher_NoMatcher0, int1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try {
        strBuilder0.getChars(int1, int0, charArray0, int2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2750
         //
      }
  }

  @Test
  public void test159()  throws Throwable  {
      int int0 = (-2105);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try {
        strBuilder0.getChars(int0, int0, charArray0, (int) charArray0[1]);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2105
         //
      }
  }

  @Test
  public void test160()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = 9;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(9, (int)integer0);
      
      StrBuilder strBuilder1 = strBuilder0.append((Object) integer0);
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertTrue(integer0.equals((Object)int0));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendNewLine();
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(2, strBuilder1.length());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(2, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(integer0.equals((Object)int0));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      int int1 = 1;
      StrBuilder strBuilder3 = strBuilder0.append(strBuilder2, int1, int1);
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(3, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(false, strBuilder3.isEmpty());
      assertEquals(3, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.size());
      assertEquals(3, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(3, strBuilder2.length());
      assertEquals(3, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder3);
  }

  @Test
  public void test161()  throws Throwable  {
      int int0 = 97;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(97, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = false;
      StrBuilder strBuilder1 = strBuilder0.append(boolean0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(97, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.length());
      assertEquals(97, strBuilder1.capacity());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      char[] charArray0 = new char[1];
      char[] charArray1 = strBuilder1.getChars(charArray0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(97, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.length());
      assertEquals(97, strBuilder1.capacity());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'f', 'a', 'l', 's', 'e'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(charArray1, charArray0);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(charArray1);
  }

  @Test
  public void test162()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[1];
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
  }

  @Test
  public void test163()  throws Throwable  {
      String string0 = "U|$wjb}H[)";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(10, strBuilder0.length());
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(42, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = null;
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertEquals(10, strBuilder0.length());
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(42, strBuilder0.capacity());
      assertArrayEquals(new char[] {'U', '|', '$', 'w', 'j', 'b', '}', 'H', '[', ')'}, charArray1);
      assertNotNull(charArray1);
  }

  @Test
  public void test164()  throws Throwable  {
      int int0 = 1015;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(1015, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = false;
      StrBuilder strBuilder1 = strBuilder0.append(boolean0);
      assertEquals(5, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5, strBuilder1.length());
      assertEquals(1015, strBuilder1.capacity());
      assertEquals(1015, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      char char0 = 'Y';
      int int1 = 0;
      char[] charArray0 = strBuilder0.toCharArray(int1, (int) char0);
      assertEquals(1015, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertArrayEquals(new char[] {'f', 'a', 'l', 's', 'e'}, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(charArray0);
  }

  @Test
  public void test165()  throws Throwable  {
      int int0 = 2311;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2311, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = strBuilder0.toCharArray();
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2311, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
  }

  @Test
  public void test166()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      char char0 = '<';
      StrBuilder strBuilder1 = strBuilder0.setLength((int) char0);
      assertEquals(60, strBuilder0.size());
      assertEquals(60, strBuilder0.capacity());
      assertEquals(60, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(60, strBuilder1.length());
      assertEquals(60, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(60, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      char[] charArray0 = strBuilder0.toCharArray();
      assertEquals(60, strBuilder0.size());
      assertEquals(60, strBuilder0.capacity());
      assertEquals(60, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(charArray0);
  }

  @Test
  public void test167()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      int int0 = 1456;
      char char0 = 'I';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(int0, int0, char0);
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(1456, strBuilder1.size());
      assertEquals(1456, strBuilder1.capacity());
      assertEquals(1456, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1456, strBuilder0.capacity());
      assertEquals(1456, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(1456, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.deleteCharAt((int) char0);
      assertEquals(1455, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(1456, strBuilder2.capacity());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(1455, strBuilder2.size());
      assertEquals(1455, strBuilder0.size());
      assertEquals(1456, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1455, strBuilder0.length());
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test
  public void test168()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char char0 = '0';
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.deleteCharAt((int) char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 48
         //
      }
  }

  @Test
  public void test169()  throws Throwable  {
      String string0 = "java.vm.name";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(12, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(44, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(12, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = (-4422);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.deleteCharAt(int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -4422
         //
      }
  }

  @Test
  public void test170()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      String string0 = "qlY)~7x}T#xkkr";
      int int0 = 0;
      int int1 = 2;
      StrBuilder strBuilder1 = strBuilder0.append(string0, int0, int1);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(2, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      char char0 = 'g';
      StrBuilder strBuilder2 = strBuilder1.setCharAt(int0, char0);
      assertEquals(2, strBuilder2.length());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(2, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test
  public void test171()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      char char0 = 'g';
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.setCharAt(int0, char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 0
         //
      }
  }

  @Test
  public void test172()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[1];
      int int0 = (-1345);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.setCharAt(int0, charArray0[0]);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1345
         //
      }
  }

  @Test
  public void test173()  throws Throwable  {
      int int0 = 9;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      char char0 = 'F';
      // Undeclared exception!
      try {
        char char1 = strBuilder0.charAt((int) char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 70
         //
      }
  }

  @Test
  public void test174()  throws Throwable  {
      int int0 = (-2090);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      int int1 = 1422;
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(int0 == int1);
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char char0 = 'w';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(int0, int1, char0);
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1422, strBuilder1.capacity());
      assertEquals(1422, strBuilder1.length());
      assertEquals(1422, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(1422, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1422, strBuilder0.capacity());
      assertEquals(1422, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      int int2 = strBuilder_StrBuilderReader0.read();
      assertEquals(1422, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1422, strBuilder0.capacity());
      assertEquals(1422, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals(119, int2);
      assertSame(strBuilder0, strBuilder1);
  }

  @Test
  public void test175()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = (StrMatcher.TrimMatcher)StrMatcher.trimMatcher();
      assertNotNull(strMatcher_TrimMatcher0);
      
      int int0 = 97;
      int int1 = strBuilder0.lastIndexOf((StrMatcher) strMatcher_TrimMatcher0, int0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try {
        char char0 = strBuilder0.charAt(int1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
      }
  }

  @Test
  public void test176()  throws Throwable  {
      int int0 = (-3575);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.isEmpty();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(boolean0);
  }

  @Test
  public void test177()  throws Throwable  {
      String string0 = "Invalid length: ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(16, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.size());
      assertEquals(48, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.isEmpty();
      assertEquals(16, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.size());
      assertEquals(48, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test
  public void test178()  throws Throwable  {
      String string0 = null;
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertEquals(0, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test179()  throws Throwable  {
      String string0 = null;
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      int int0 = 32;
      StrBuilder strBuilder1 = strBuilder0.setLength(int0);
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(32, strBuilder1.size());
      assertEquals(32, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.length());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.minimizeCapacity();
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.length());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(32, strBuilder2.size());
      assertEquals(32, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.length());
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test
  public void test180()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.setLength(int0);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test181()  throws Throwable  {
      int int0 = (-2090);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      int int1 = 1422;
      char char0 = 'w';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(int0, int1, char0);
      assertEquals(1422, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1422, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1422, strBuilder0.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(1422, strBuilder1.size());
      assertEquals(1422, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1422, strBuilder1.capacity());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.setLength((int) char0);
      assertEquals(1422, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(119, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(119, strBuilder0.size());
      assertEquals(119, strBuilder2.length());
      assertEquals(119, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(1422, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(int0 == int1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test
  public void test182()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      int int0 = (-1);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.setLength(int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
      }
  }

  @Test
  public void test183()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      String string0 = "";
      StrBuilder strBuilder1 = strBuilder0.setNullText(string0);
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test184()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      String string0 = null;
      StrBuilder strBuilder1 = strBuilder0.setNullText(string0);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test185()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      strBuilder_StrBuilderWriter0.close();
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
  }

  @Test
  public void test186()  throws Throwable  {
      String string0 = "#DwHd+\"^Wou .\\U?/";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(17, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(17, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = 700;
      char char0 = 'U';
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(17, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(17, strBuilder0.size());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      // Undeclared exception!
      try {
        strBuilder_StrBuilderWriter0.write(string0, int0, (int) char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
      }
  }

  @Test
  public void test187()  throws Throwable  {
      int int0 = 97;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(97, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(97, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      char[] charArray0 = new char[10];
      strBuilder_StrBuilderWriter0.write(charArray0, (int) charArray0[3], (int) charArray0[6]);
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(97, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test188()  throws Throwable  {
      String string0 = "#DwHd+\"^Wou .\\U?/";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(17, strBuilder0.size());
      assertEquals(17, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(49, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(17, strBuilder0.size());
      assertEquals(17, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(49, strBuilder0.capacity());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      strBuilder_StrBuilderWriter0.flush();
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(17, strBuilder0.size());
      assertEquals(17, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(49, strBuilder0.capacity());
  }

  @Test
  public void test189()  throws Throwable  {
      int int0 = 9;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      strBuilder_StrBuilderWriter0.write(int0);
      assertEquals(1, strBuilder0.length());
      assertEquals(9, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test
  public void test190()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      char[] charArray0 = new char[1];
      strBuilder_StrBuilderWriter0.write(charArray0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test
  public void test191()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.insert(int0, (long) int0);
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test192()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrMatcher.NoMatcher strMatcher_NoMatcher0 = (StrMatcher.NoMatcher)StrMatcher.noneMatcher();
      assertNotNull(strMatcher_NoMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll((StrMatcher) strMatcher_NoMatcher0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test193()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      char char0 = 'a';
      int int0 = strBuilder0.indexOf(char0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals((-1), int0);
  }

  @Test
  public void test194()  throws Throwable  {
      String string0 = "Invalid length: ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrMatcher strMatcher0 = null;
      StrBuilder strBuilder1 = strBuilder0.replaceAll(strMatcher0, string0);
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(16, strBuilder1.size());
      assertEquals(16, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(48, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test195()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.insert(int0, (double) int0);
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3, strBuilder1.size());
      assertEquals(3, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test196()  throws Throwable  {
      int int0 = 117;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(117, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[6];
      String string0 = strBuilder0.substring((int) charArray0[0]);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(117, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test
  public void test197()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[2];
      StrBuilder strBuilder1 = strBuilder0.append((float) charArray0[0]);
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test198()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrMatcher strMatcher0 = null;
      StrBuilder strBuilder1 = strBuilder0.deleteFirst(strMatcher0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test199()  throws Throwable  {
      int int0 = 2;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = (StrBuilder.StrBuilderWriter)strBuilder0.asWriter();
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder_StrBuilderWriter0);
  }

  @Test
  public void test200()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.insert(int0, int0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test201()  throws Throwable  {
      String string0 = "length must be valid";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(20, strBuilder0.size());
      assertEquals(52, strBuilder0.capacity());
      assertEquals(20, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = (StrBuilder.StrBuilderTokenizer)strBuilder0.asTokenizer();
      assertEquals(20, strBuilder0.size());
      assertEquals(52, strBuilder0.capacity());
      assertEquals(20, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
  }

  @Test
  public void test202()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = (StrBuilder.StrBuilderReader)strBuilder0.asReader();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder_StrBuilderReader0);
  }

  @Test
  public void test203()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      String string0 = ",";
      StrBuilder strBuilder1 = strBuilder0.append(string0);
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.deleteAll(string0);
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertEquals(true, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test
  public void test204()  throws Throwable  {
      String string0 = "'; the SystemUtils property value will default to null.";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(87, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(55, strBuilder0.size());
      assertEquals(55, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      char char0 = 'w';
      int int0 = strBuilder0.lastIndexOf(char0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(87, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(55, strBuilder0.size());
      assertEquals(55, strBuilder0.length());
      assertEquals(34, int0);
  }

  @Test
  public void test205()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[7];
      char char0 = 'K';
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.insert((int) char0, (float) charArray0[1]);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 75
         //
      }
  }

  @Test
  public void test206()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      char char0 = '+';
      StrBuilder strBuilder1 = strBuilder0.append((double) char0);
      assertEquals(4, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(4, strBuilder1.size());
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.size());
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
  }

  @Test
  public void test207()  throws Throwable  {
      String string0 = "java.vm.specification.version";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(61, strBuilder0.capacity());
      assertEquals(29, strBuilder0.size());
      assertEquals(29, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(61, strBuilder0.capacity());
      assertEquals(29, strBuilder0.size());
      assertEquals(29, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      strBuilder_StrBuilderReader0.reset();
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(61, strBuilder0.capacity());
      assertEquals(29, strBuilder0.size());
      assertEquals(29, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test
  public void test208()  throws Throwable  {
      int int0 = 117;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(117, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(117, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      strBuilder_StrBuilderReader0.mark(int0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(117, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
  }

  @Test
  public void test209()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      strBuilder_StrBuilderReader0.close();
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test
  public void test210()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      boolean boolean0 = strBuilder_StrBuilderReader0.markSupported();
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(boolean0);
  }
}
