/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:37:15 GMT 2014
 */

package org.apache.commons.lang3;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.io.DataOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.Serializable;
import java.util.Locale;
import org.apache.commons.lang3.SerializationException;
import org.apache.commons.lang3.SerializationUtils;




import org.junit.runner.RunWith;


public class SerializationUtilsEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      String string0 = "org.apache.commons.lang3.SerializationException";
      InputStream inputStream0 = classLoader0.getResourceAsStream(string0);
      assertNull(inputStream0);
      
      // Undeclared exception!
      try {
        Object object0 = SerializationUtils.deserialize(inputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The InputStream must not be null
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      // Undeclared exception!
      try {
        Object object0 = SerializationUtils.deserialize(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.StreamCorruptedException: invalid stream header: 00000000
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(int0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) pipedOutputStream0);
      assertEquals(0, dataOutputStream0.size());
      assertNotNull(dataOutputStream0);
      
      // Undeclared exception!
      try {
        SerializationUtils.serialize((Serializable) integer0, (OutputStream) dataOutputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      assertEquals(Locale.Category.FORMAT, locale_Category0);
      assertEquals("FORMAT", locale_Category0.toString());
      assertEquals(1, locale_Category0.ordinal());
      assertEquals("FORMAT", locale_Category0.name());
      
      OutputStream outputStream0 = null;
      // Undeclared exception!
      try {
        SerializationUtils.serialize((Serializable) locale_Category0, outputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The OutputStream must not be null
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      Integer integer0 = null;
      Integer integer1 = SerializationUtils.clone(integer0);
  }

  @Test
  public void test5()  throws Throwable  {
      SerializationUtils serializationUtils0 = new SerializationUtils();
      assertNotNull(serializationUtils0);
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(int0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Integer integer1 = SerializationUtils.clone(integer0);
      assertEquals(0, (int)integer1);
      assertNotSame(integer1, integer0);
      assertNotSame(integer0, integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)integer1));
  }
}
