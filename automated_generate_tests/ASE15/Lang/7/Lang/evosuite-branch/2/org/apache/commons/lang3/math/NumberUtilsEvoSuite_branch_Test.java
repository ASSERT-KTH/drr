/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:43:37 GMT 2014
 */

package org.apache.commons.lang3.math;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;




import org.junit.runner.RunWith;


public class NumberUtilsEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      String string0 = "L";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test001()  throws Throwable  {
      String string0 = "3L";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test002()  throws Throwable  {
      String string0 = "9D";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test003()  throws Throwable  {
      String string0 = ".";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test004()  throws Throwable  {
      String string0 = "e";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test005()  throws Throwable  {
      String string0 = "6";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test006()  throws Throwable  {
      String string0 = "--[~*";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test007()  throws Throwable  {
      String string0 = "+G+/Q8~DGTh{P+qZ`z";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test008()  throws Throwable  {
      String string0 = "Eha";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test009()  throws Throwable  {
      String string0 = "...";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test010()  throws Throwable  {
      String string0 = "..";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test011()  throws Throwable  {
      String string0 = "3ef";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test012()  throws Throwable  {
      String string0 = "-0xCqzla,T[L";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test013()  throws Throwable  {
      String string0 = "0x6dX";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test014()  throws Throwable  {
      String string0 = "0x9D";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test015()  throws Throwable  {
      String string0 = "0x ;_G1-Av8n~?a1";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = "0X";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test017()  throws Throwable  {
      String string0 = "-0x";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test018()  throws Throwable  {
      String string0 = "9Ei,;U/Xk@";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test019()  throws Throwable  {
      String string0 = "-";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test020()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test021()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test022()  throws Throwable  {
      byte byte0 = (byte) (-120);
      byte byte1 = (byte) (-88);
      byte byte2 = NumberUtils.max(byte0, byte0, byte1);
      assertEquals((byte) (-88), byte2);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
  }

  @Test
  public void test023()  throws Throwable  {
      byte byte0 = (byte) (-15);
      byte byte1 = (byte)4;
      byte byte2 = NumberUtils.max(byte0, byte1, byte1);
      assertEquals((byte)4, byte2);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
  }

  @Test
  public void test024()  throws Throwable  {
      short short0 = (short) (-1748);
      short short1 = (short) (-1540);
      short short2 = NumberUtils.max(short0, short0, short1);
      assertEquals((short) (-1540), short2);
      assertTrue(short2 == short1);
      assertFalse(short2 == short0);
      assertFalse(short0 == short1);
      assertFalse(short0 == short2);
      assertTrue(short1 == short2);
      assertFalse(short1 == short0);
  }

  @Test
  public void test025()  throws Throwable  {
      short short0 = (short)1636;
      short short1 = NumberUtils.min(short0, short0, short0);
      assertEquals((short)1636, short1);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
      
      byte byte0 = (byte)3;
      short short2 = NumberUtils.max((short) byte0, short1, short0);
      assertEquals((short)1636, short2);
      assertTrue(short2 == short1);
      assertTrue(short2 == short0);
      assertTrue(short0 == short2);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
      assertTrue(short1 == short2);
  }

  @Test
  public void test026()  throws Throwable  {
      byte byte0 = (byte) (-120);
      byte byte1 = (byte)23;
      int int0 = NumberUtils.max((int) byte0, (int) byte0, (int) byte1);
      assertEquals(23, int0);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
  }

  @Test
  public void test027()  throws Throwable  {
      short short0 = (short) (-1748);
      short short1 = NumberUtils.max(short0, short0, short0);
      assertEquals((short) (-1748), short1);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
      
      short short2 = (short)1464;
      assertFalse(short2 == short1);
      
      int int0 = NumberUtils.max((int) short1, (int) short2, (int) short0);
      assertEquals(1464, int0);
      assertFalse(short0 == short2);
      assertTrue(short0 == short1);
      assertFalse(short2 == short1);
      assertFalse(short2 == short0);
      assertFalse(short1 == short2);
      assertTrue(short1 == short0);
  }

  @Test
  public void test028()  throws Throwable  {
      short[] shortArray0 = new short[19];
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)7;
      byteArray0[2] = byte0;
      shortArray0[7] = (short) byteArray0[2];
      long long0 = NumberUtils.max((long) shortArray0[0], (long) byteArray0[1], (long) shortArray0[7]);
      assertEquals(7L, long0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)7, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)7, (byte)0}, byteArray0);
  }

  @Test
  public void test029()  throws Throwable  {
      String string0 = "-0X";
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
      
      short short1 = (short)48;
      assertFalse(short1 == short0);
      
      long long0 = NumberUtils.max((long) short0, (long) short1, (long) short0);
      assertEquals(48L, long0);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
  }

  @Test
  public void test030()  throws Throwable  {
      byte byte0 = (byte)44;
      byte byte1 = (byte)12;
      byte byte2 = NumberUtils.min(byte0, byte0, byte1);
      assertEquals((byte)12, byte2);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
  }

  @Test
  public void test031()  throws Throwable  {
      byte byte0 = (byte)11;
      byte byte1 = (byte)91;
      byte byte2 = NumberUtils.min(byte1, byte0, byte0);
      assertEquals((byte)11, byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte1 == byte2);
      assertTrue(byte2 == byte0);
      assertFalse(byte2 == byte1);
      assertTrue(byte0 == byte2);
      assertFalse(byte0 == byte1);
  }

  @Test
  public void test032()  throws Throwable  {
      byte byte0 = (byte) (-120);
      byte byte1 = (byte)23;
      byte byte2 = NumberUtils.max(byte1, byte0, byte0);
      assertEquals((byte)23, byte2);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      
      short short0 = NumberUtils.min((short) byte2, (short) byte2, (short) byte0);
      assertEquals((short) (-120), short0);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
  }

  @Test
  public void test033()  throws Throwable  {
      short short0 = (short) (-845);
      short short1 = (short) (-1494);
      short short2 = NumberUtils.min(short0, short1, short1);
      assertEquals((short) (-1494), short2);
      assertFalse(short1 == short0);
      assertTrue(short1 == short2);
      assertFalse(short2 == short0);
      assertTrue(short2 == short1);
      assertFalse(short0 == short1);
      assertFalse(short0 == short2);
  }

  @Test
  public void test034()  throws Throwable  {
      short short0 = (short) (-1748);
      short short1 = NumberUtils.max(short0, short0, short0);
      assertEquals((short) (-1748), short1);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
      
      int int0 = 0;
      int int1 = NumberUtils.min(int0, int0, (int) short1);
      assertEquals((-1748), int1);
      assertTrue(short0 == short1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(short1 == short0);
  }

  @Test
  public void test035()  throws Throwable  {
      int int0 = 8192;
      int int1 = 1010;
      int int2 = NumberUtils.min(int0, int1, int1);
      assertEquals(1010, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
  }

  @Test
  public void test036()  throws Throwable  {
      short short0 = (short)1636;
      short short1 = NumberUtils.min(short0, short0, short0);
      assertEquals((short)1636, short1);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
      
      byte byte0 = (byte)3;
      long long0 = NumberUtils.min((long) short1, (long) short1, (long) byte0);
      assertEquals(3L, long0);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
  }

  @Test
  public void test037()  throws Throwable  {
      byte byte0 = (byte)44;
      byte byte1 = NumberUtils.min(byte0, byte0, byte0);
      assertEquals((byte)44, byte1);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      
      long long0 = (-255L);
      long long1 = NumberUtils.min((long) byte1, long0, (long) byte1);
      assertEquals((-255L), long1);
      assertTrue(long0 == long1);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      assertTrue(long1 == long0);
  }

  @Test
  public void test038()  throws Throwable  {
      long long0 = 1L;
      float[] floatArray0 = new float[5];
      floatArray0[2] = (float) long0;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(1.0F, float0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test
  public void test039()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float float0 = Float.NaN;
      floatArray0[7] = float0;
      float float1 = NumberUtils.max(floatArray0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, Float.NaN, 0.0F}, floatArray0, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
  }

  @Test
  public void test040()  throws Throwable  {
      float[] floatArray0 = null;
      // Undeclared exception!
      try {
        float float0 = NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test041()  throws Throwable  {
      byte byte0 = (byte)23;
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = (double) byte0;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(23.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 23.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      double double0 = Double.NaN;
      doubleArray0[2] = double0;
      double double1 = NumberUtils.max(doubleArray0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertTrue(double1 == double0);
  }

  @Test
  public void test043()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try {
        double double0 = NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)19;
      byteArray0[1] = byte0;
      byte byte1 = NumberUtils.max(byteArray0);
      assertEquals((byte)19, byte1);
      assertArrayEquals(new byte[] {(byte)0, (byte)19, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(byte1 == byte0);
  }

  @Test
  public void test045()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short short0 = (short)535;
      shortArray0[4] = short0;
      short short1 = NumberUtils.max(shortArray0);
      assertEquals((short)535, short1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)535, (short)0}, shortArray0);
      assertTrue(short1 == short0);
  }

  @Test
  public void test046()  throws Throwable  {
      int[] intArray0 = new int[19];
      int int0 = 46;
      intArray0[8] = int0;
      int int1 = NumberUtils.max(intArray0);
      assertEquals(46, int1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(int1 == int0);
  }

  @Test
  public void test047()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test048()  throws Throwable  {
      long[] longArray0 = new long[4];
      long long0 = (-1402L);
      longArray0[0] = long0;
      long long1 = NumberUtils.max(longArray0);
      assertEquals(0L, long1);
      assertArrayEquals(new long[] {(-1402L), 0L, 0L, 0L}, longArray0);
      assertFalse(long1 == long0);
  }

  @Test
  public void test049()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try {
        long long0 = NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test050()  throws Throwable  {
      byte byte0 = (byte) (-14);
      float[] floatArray0 = new float[10];
      floatArray0[5] = (float) byte0;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-14.0F), float0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-14.0F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test
  public void test051()  throws Throwable  {
      float[] floatArray0 = new float[19];
      float float0 = Float.NaN;
      floatArray0[1] = float0;
      float float1 = NumberUtils.min(floatArray0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, Float.NaN, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
  }

  @Test
  public void test052()  throws Throwable  {
      float[] floatArray0 = null;
      // Undeclared exception!
      try {
        float float0 = NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test053()  throws Throwable  {
      short short0 = (short) (-534);
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) short0;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-534.0), double0, 0.01D);
      assertArrayEquals(new double[] {0.0, (-534.0), 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test054()  throws Throwable  {
      float[] floatArray0 = new float[19];
      float float0 = Float.NaN;
      floatArray0[1] = float0;
      floatArray0[2] = floatArray0[1];
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (double) floatArray0[2];
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN}, doubleArray0, 0.01);
  }

  @Test
  public void test055()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try {
        double double0 = NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-82);
      byteArray0[1] = byte0;
      byte byte1 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-82), byte1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-82), (byte)0, (byte)0}, byteArray0);
      assertTrue(byte1 == byte0);
  }

  @Test
  public void test057()  throws Throwable  {
      short[] shortArray0 = new short[19];
      byte byte0 = (byte) (-82);
      shortArray0[2] = (short) byte0;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-82), short0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-82), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test
  public void test058()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = (-3324);
      intArray0[1] = int0;
      int int1 = NumberUtils.min(intArray0);
      assertEquals((-3324), int1);
      assertArrayEquals(new int[] {0, (-3324), 0}, intArray0);
      assertTrue(int1 == int0);
  }

  @Test
  public void test059()  throws Throwable  {
      byte byte0 = (byte)94;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) byte0;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
      assertArrayEquals(new long[] {94L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test
  public void test060()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try {
        long long0 = NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test061()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try {
        BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test062()  throws Throwable  {
      String string0 = null;
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
      assertNull(bigDecimal0);
  }

  @Test
  public void test063()  throws Throwable  {
      String string0 = null;
      BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
      assertNull(bigInteger0);
  }

  @Test
  public void test064()  throws Throwable  {
      String string0 = null;
      Long long0 = NumberUtils.createLong(string0);
  }

  @Test
  public void test065()  throws Throwable  {
      String string0 = null;
      Integer integer0 = NumberUtils.createInteger(string0);
  }

  @Test
  public void test066()  throws Throwable  {
      String string0 = null;
      Double double0 = NumberUtils.createDouble(string0);
  }

  @Test
  public void test067()  throws Throwable  {
      String string0 = null;
      Float float0 = NumberUtils.createFloat(string0);
  }

  @Test
  public void test068()  throws Throwable  {
      String string0 = "'??0Ek/0";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test069()  throws Throwable  {
      String string0 = "3L";
      Long long0 = (Long)NumberUtils.createNumber(string0);
      assertEquals(3L, (long)long0);
  }

  @Test
  public void test070()  throws Throwable  {
      String string0 = "-*M$k\"( ^vr^4gL";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -*M$k\"( ^vr^4gL is not a valid number.
         //
      }
  }

  @Test
  public void test071()  throws Throwable  {
      String string0 = "GO$PWU@Cf";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // GO$PWU@Cf is not a valid number.
         //
      }
  }

  @Test
  public void test072()  throws Throwable  {
      String string0 = "SecurityException occurred";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // SecurityException occurred is not a valid number.
         //
      }
  }

  @Test
  public void test073()  throws Throwable  {
      String string0 = "K5|cF";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // K5|cF is not a valid number.
         //
      }
  }

  @Test
  public void test074()  throws Throwable  {
      String string0 = "9D";
      Double double0 = (Double)NumberUtils.createNumber(string0);
      assertEquals(9.0, (double)double0, 0.01D);
  }

  @Test
  public void test075()  throws Throwable  {
      String string0 = ".";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test076()  throws Throwable  {
      String string0 = "5N|`Xa0";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"5N|`Xa0\"
         //
      }
  }

  @Test
  public void test077()  throws Throwable  {
      String string0 = "Strings must not be null";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Strings must not be null is not a valid number.
         //
      }
  }

  @Test
  public void test078()  throws Throwable  {
      String string0 = "Array cannot be empty.";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Array cannot be empty. is not a valid number.
         //
      }
  }

  @Test
  public void test079()  throws Throwable  {
      String string0 = "v).\\/x H8L";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // v).\\/x H8L is not a valid number.
         //
      }
  }

  @Test
  public void test080()  throws Throwable  {
      String string0 = "(Su1w_.;xLyBL[e";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // (Su1w_.;xLyBL[e is not a valid number.
         //
      }
  }

  @Test
  public void test081()  throws Throwable  {
      String string0 = "-0X";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
      }
  }

  @Test
  public void test082()  throws Throwable  {
      String string0 = "0XMinimum abbreviation width with offset is 7";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Minimum abbreviation width with offset is 7\"
         //
      }
  }

  @Test
  public void test083()  throws Throwable  {
      String string0 = "-0x5N|pa0";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-5N|pa0\"
         //
      }
  }

  @Test
  public void test084()  throws Throwable  {
      String string0 = "0x";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
      }
  }

  @Test
  public void test085() {}
//   @Test
//   public void test085()  throws Throwable  {
//       String string0 = "--0XMinimum abbreviation width with offset is 7";
//       Number number0 = NumberUtils.createNumber(string0);
//       assertNull(number0);
//   }

  @Test
  public void test086()  throws Throwable  {
      String string0 = " ";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test087()  throws Throwable  {
      String string0 = null;
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test088()  throws Throwable  {
      String string0 = "!NV}E/GQ2'_[?C$eG@";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // !NV}E/GQ2'_[?C$eG@ is not a valid number.
         //
      }
  }

  @Test
  public void test089()  throws Throwable  {
      byte byte0 = (byte)0;
      String string0 = null;
      short short0 = NumberUtils.toShort(string0, (short) byte0);
      assertEquals((short)0, short0);
  }

  @Test
  public void test090()  throws Throwable  {
      byte byte0 = (byte) (-15);
      String string0 = null;
      byte byte1 = NumberUtils.toByte(string0, byte0);
      assertEquals((byte) (-15), byte1);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
  }

  @Test
  public void test091()  throws Throwable  {
      String string0 = " b'=%Wk";
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
      
      String string1 = null;
      double double0 = NumberUtils.toDouble(string1, (double) int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test092()  throws Throwable  {
      byte byte0 = (byte) (-1);
      String string0 = null;
      float float0 = NumberUtils.toFloat(string0, (float) byte0);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test
  public void test093()  throws Throwable  {
      String string0 = null;
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
  }

  @Test
  public void test094()  throws Throwable  {
      byte byte0 = (byte)3;
      String string0 = null;
      int int0 = NumberUtils.toInt(string0, (int) byte0);
      assertEquals(3, int0);
  }

  @Test
  public void test095()  throws Throwable  {
      String string0 = "--[~*";
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test096()  throws Throwable  {
      byte byte0 = (byte) (-1);
      float float0 = NumberUtils.max((float) byte0, (float) byte0, (float) byte0);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test
  public void test097()  throws Throwable  {
      String string0 = "0X";
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
  }

  @Test
  public void test098()  throws Throwable  {
      String string0 = "sun.text.Normalizer is not available";
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
  }

  @Test
  public void test099()  throws Throwable  {
      byte byte0 = (byte)94;
      float float0 = NumberUtils.min((float) byte0, (float) byte0, (float) byte0);
      assertEquals(94.0F, float0, 0.01F);
  }

  @Test
  public void test100()  throws Throwable  {
      float float0 = (-3116.574F);
      double double0 = NumberUtils.min((double) float0, (double) float0, (double) float0);
      assertEquals((-3116.573974609375), double0, 0.01D);
  }

  @Test
  public void test101()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      assertNotNull(numberUtils0);
  }

  @Test
  public void test102()  throws Throwable  {
      byte byte0 = (byte)94;
      double double0 = NumberUtils.max((double) byte0, (double) byte0, (double) byte0);
      assertEquals(94.0, double0, 0.01D);
  }

  @Test
  public void test103()  throws Throwable  {
      String string0 = "mt\\tz";
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }
}
