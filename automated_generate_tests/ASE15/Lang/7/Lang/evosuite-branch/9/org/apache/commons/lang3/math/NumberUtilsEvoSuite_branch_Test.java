/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:56:49 GMT 2014
 */

package org.apache.commons.lang3.math;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;


public class NumberUtilsEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      String string0 = "L";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test001()  throws Throwable  {
      String string0 = "F";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test002()  throws Throwable  {
      String string0 = "f";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test003()  throws Throwable  {
      String string0 = "D";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test004()  throws Throwable  {
      String string0 = "d";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test005()  throws Throwable  {
      String string0 = ".";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test006()  throws Throwable  {
      String string0 = "-7";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test007()  throws Throwable  {
      String string0 = "--k7";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test008()  throws Throwable  {
      String string0 = "E/:FbA";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test009()  throws Throwable  {
      String string0 = "e>Jd?*G";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test010()  throws Throwable  {
      String string0 = "...";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test011()  throws Throwable  {
      String string0 = "..";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test012()  throws Throwable  {
      String string0 = "-";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test013()  throws Throwable  {
      String string0 = "0x7Xn-yGc'B3zP";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test014()  throws Throwable  {
      String string0 = "0xE)";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test015()  throws Throwable  {
      String string0 = "-0xc";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = "0xlUJv{i";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test017()  throws Throwable  {
      String string0 = "0dUUt";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test018()  throws Throwable  {
      String string0 = "+|sYGJ(&2`{l8?@4n`E";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test019()  throws Throwable  {
      String string0 = "-0x";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test020()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test021()  throws Throwable  {
      String string0 = "i";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test022()  throws Throwable  {
      String string0 = "11";
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test023()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test024()  throws Throwable  {
      byte byte0 = (byte)1;
      byte byte1 = NumberUtils.max(byte0, byte0, byte0);
      assertEquals((byte)1, byte1);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      
      byte byte2 = (byte)36;
      assertFalse(byte2 == byte1);
      
      byte byte3 = NumberUtils.max(byte0, byte1, byte2);
      assertEquals((byte)36, byte3);
      assertFalse(byte0 == byte3);
      assertFalse(byte0 == byte2);
      assertTrue(byte0 == byte1);
      assertTrue(byte3 == byte2);
      assertFalse(byte3 == byte1);
      assertFalse(byte3 == byte0);
      assertFalse(byte1 == byte2);
      assertFalse(byte1 == byte3);
      assertTrue(byte1 == byte0);
      assertFalse(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte3);
  }

  @Test
  public void test025()  throws Throwable  {
      byte byte0 = (byte) (-61);
      byte byte1 = (byte) (-22);
      byte byte2 = NumberUtils.max(byte0, byte1, byte0);
      assertEquals((byte) (-22), byte2);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
  }

  @Test
  public void test026()  throws Throwable  {
      short short0 = (short) (-1320);
      short short1 = (short)0;
      short short2 = NumberUtils.max(short0, short1, short1);
      assertEquals((short)0, short2);
      assertTrue(short2 == short1);
      assertFalse(short2 == short0);
      assertFalse(short1 == short0);
      assertTrue(short1 == short2);
      assertFalse(short0 == short1);
      assertFalse(short0 == short2);
  }

  @Test
  public void test027()  throws Throwable  {
      byte byte0 = (byte) (-31);
      int int0 = 97;
      int int1 = NumberUtils.max((int) byte0, (int) byte0, int0);
      assertEquals(97, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test028()  throws Throwable  {
      int int0 = 1;
      int int1 = (-351);
      int int2 = NumberUtils.max(int1, int0, int1);
      assertEquals(1, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
  }

  @Test
  public void test029()  throws Throwable  {
      byte byte0 = (byte)64;
      byte byte1 = (byte) (-49);
      byte byte2 = NumberUtils.min(byte0, byte1, byte1);
      assertEquals((byte) (-49), byte2);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      
      long long0 = NumberUtils.max((long) byte2, (long) byte1, (long) byte0);
      assertEquals(64L, long0);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
  }

  @Test
  public void test030()  throws Throwable  {
      byte byte0 = (byte)7;
      long long0 = (-2596L);
      long long1 = NumberUtils.max(long0, (long) byte0, (long) byte0);
      assertEquals(7L, long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test
  public void test031()  throws Throwable  {
      byte byte0 = (byte)64;
      byte byte1 = NumberUtils.min(byte0, byte0, byte0);
      assertEquals((byte)64, byte1);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      
      long long0 = NumberUtils.max((long) byte1, (long) byte0, (long) byte0);
      assertEquals(64L, long0);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
  }

  @Test
  public void test032()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = (byte) (-83);
      byte byte2 = NumberUtils.min(byte0, byte0, byte1);
      assertEquals((byte) (-83), byte2);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
  }

  @Test
  public void test033()  throws Throwable  {
      short short0 = (short) (-1096);
      short short1 = (short)1723;
      short short2 = NumberUtils.max(short0, short0, short1);
      assertEquals((short)1723, short2);
      assertFalse(short1 == short0);
      assertTrue(short1 == short2);
      assertFalse(short0 == short1);
      assertFalse(short0 == short2);
      assertTrue(short2 == short1);
      assertFalse(short2 == short0);
      
      short short3 = NumberUtils.min(short2, short1, short0);
      assertEquals((short) (-1096), short3);
      assertFalse(short1 == short0);
      assertTrue(short1 == short2);
      assertFalse(short1 == short3);
      assertFalse(short0 == short1);
      assertFalse(short0 == short2);
      assertTrue(short0 == short3);
      assertFalse(short3 == short1);
      assertFalse(short3 == short2);
      assertTrue(short3 == short0);
      assertTrue(short2 == short1);
      assertFalse(short2 == short3);
      assertFalse(short2 == short0);
  }

  @Test
  public void test034()  throws Throwable  {
      short short0 = (short) (-1466);
      short short1 = (short) (-3778);
      short short2 = NumberUtils.min(short0, short1, short0);
      assertEquals((short) (-3778), short2);
      assertTrue(short2 == short1);
      assertFalse(short2 == short0);
      assertFalse(short1 == short0);
      assertTrue(short1 == short2);
      assertFalse(short0 == short1);
      assertFalse(short0 == short2);
  }

  @Test
  public void test035()  throws Throwable  {
      byte byte0 = (byte)64;
      int int0 = (-2484);
      int int1 = NumberUtils.min((int) byte0, (int) byte0, int0);
      assertEquals((-2484), int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-1);
      byte byte1 = (byte) (-109);
      byteArray0[3] = byte1;
      int int0 = NumberUtils.min((int) byte0, (int) byteArray0[3], (int) byteArray0[4]);
      assertEquals((-109), int0);
      assertFalse(byte0 == byte1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-109), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test037()  throws Throwable  {
      short[] shortArray0 = new short[5];
      long long0 = (-2570L);
      long long1 = NumberUtils.min((long) shortArray0[1], (long) shortArray0[1], long0);
      assertEquals((-2570L), long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test
  public void test038()  throws Throwable  {
      short[] shortArray0 = new short[5];
      long long0 = (-867L);
      long long1 = NumberUtils.min((long) shortArray0[1], long0, long0);
      assertEquals((-867L), long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      long long0 = NumberUtils.min((long) byte0, (long) byte0, (long) byte0);
      assertEquals(0L, long0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test
  public void test040()  throws Throwable  {
      float[] floatArray0 = new float[16];
      float float0 = (-709.8094F);
      floatArray0[0] = float0;
      float float1 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertArrayEquals(new float[] {(-709.8094F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test
  public void test041()  throws Throwable  {
      float[] floatArray0 = new float[16];
      float float0 = Float.NaN;
      floatArray0[4] = float0;
      float float1 = NumberUtils.max(floatArray0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, Float.NaN, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 875.21583095;
      doubleArray0[1] = double0;
      double double1 = NumberUtils.max(doubleArray0);
      assertEquals(875.21583095, double1, 0.01D);
      assertTrue(double1 == double0);
      assertArrayEquals(new double[] {0.0, 875.21583095, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = Double.NaN;
      doubleArray0[2] = double0;
      double double1 = NumberUtils.max(doubleArray0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test044()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try {
        double double0 = NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)76;
      byteArray0[3] = byte0;
      byte byte1 = NumberUtils.max(byteArray0);
      assertEquals((byte)76, byte1);
      assertTrue(byte1 == byte0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)76, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test046()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = (short)101;
      shortArray0[1] = short0;
      short short1 = NumberUtils.max(shortArray0);
      assertEquals((short)101, short1);
      assertTrue(short1 == short0);
      assertArrayEquals(new short[] {(short)0, (short)101, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test
  public void test047()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test048()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = (-71);
      intArray0[0] = int0;
      int int1 = NumberUtils.max(intArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {(-71), 0, 0, 0, 0, 0}, intArray0);
  }

  @Test
  public void test049()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test050()  throws Throwable  {
      byte byte0 = (byte)76;
      long[] longArray0 = new long[8];
      longArray0[7] = (long) byte0;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(76L, long0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 76L}, longArray0);
  }

  @Test
  public void test051()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try {
        long long0 = NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test052()  throws Throwable  {
      float[] floatArray0 = new float[10];
      float float0 = (-1562.0F);
      floatArray0[1] = float0;
      float float1 = NumberUtils.min(floatArray0);
      assertEquals((-1562.0F), float1, 0.01F);
      assertTrue(float1 == float0);
      assertArrayEquals(new float[] {0.0F, (-1562.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test
  public void test053()  throws Throwable  {
      float[] floatArray0 = new float[8];
      float float0 = Float.NaN;
      floatArray0[2] = float0;
      float float1 = NumberUtils.min(floatArray0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, Float.NaN, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test
  public void test054()  throws Throwable  {
      float[] floatArray0 = null;
      // Undeclared exception!
      try {
        float float0 = NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 1553.3573128674118;
      doubleArray0[0] = double0;
      double double1 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertArrayEquals(new double[] {1553.3573128674118, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = Double.NaN;
      doubleArray0[2] = double0;
      double double1 = NumberUtils.min(doubleArray0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test057()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try {
        double double0 = NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-1);
      byteArray0[3] = byte0;
      byte byte1 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-1), byte1);
      assertTrue(byte1 == byte0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test059()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try {
        byte byte0 = NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test060()  throws Throwable  {
      short short0 = (short) (-1096);
      short[] shortArray0 = new short[9];
      shortArray0[1] = short0;
      short short1 = NumberUtils.min(shortArray0);
      assertEquals((short) (-1096), short1);
      assertTrue(short1 == short0);
      assertArrayEquals(new short[] {(short)0, (short) (-1096), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test
  public void test061()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = (-1877);
      intArray0[1] = int0;
      int int1 = NumberUtils.min(intArray0);
      assertEquals((-1877), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {0, (-1877), 0, 0, 0, 0}, intArray0);
  }

  @Test
  public void test062()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test063()  throws Throwable  {
      long long0 = (-2583L);
      long[] longArray0 = new long[7];
      longArray0[2] = long0;
      long long1 = NumberUtils.min(longArray0);
      assertEquals((-2583L), long1);
      assertTrue(long1 == long0);
      assertArrayEquals(new long[] {0L, 0L, (-2583L), 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test
  public void test064()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try {
        long long0 = NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test065()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try {
        BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test066()  throws Throwable  {
      String string0 = null;
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
      assertNull(bigDecimal0);
  }

  @Test
  public void test067()  throws Throwable  {
      String string0 = null;
      BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
      assertNull(bigInteger0);
  }

  @Test
  public void test068()  throws Throwable  {
      String string0 = null;
      Long long0 = NumberUtils.createLong(string0);
  }

  @Test
  public void test069()  throws Throwable  {
      String string0 = null;
      Integer integer0 = NumberUtils.createInteger(string0);
  }

  @Test
  public void test070()  throws Throwable  {
      String string0 = null;
      Double double0 = NumberUtils.createDouble(string0);
  }

  @Test
  public void test071()  throws Throwable  {
      String string0 = null;
      Float float0 = NumberUtils.createFloat(string0);
  }

  @Test
  public void test072()  throws Throwable  {
      String string0 = "8.";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals(8.0F, (float)float0, 0.01F);
  }

  @Test
  public void test073()  throws Throwable  {
      String string0 = "k7";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"k7\"
         //
      }
  }

  @Test
  public void test074()  throws Throwable  {
      String string0 = "0iSbQK6qZGJ;eO1";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test075()  throws Throwable  {
      String string0 = "The Arraymust not be null";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The Arraymust not be null is not a valid number.
         //
      }
  }

  @Test
  public void test076()  throws Throwable  {
      String string0 = "11t&;F<IP14KDWkMf";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 11t&;F<IP14KDWkMf is not a valid number.
         //
      }
  }

  @Test
  public void test077()  throws Throwable  {
      String string0 = "IllegalAccessException occurred";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // IllegalAccessException occurred is not a valid number.
         //
      }
  }

  @Test
  public void test078()  throws Throwable  {
      String string0 = "gTp+(7tybC9RJCF";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // gTp+(7tybC9RJCF is not a valid number.
         //
      }
  }

  @Test
  public void test079()  throws Throwable  {
      String string0 = "4D";
      Double double0 = (Double)NumberUtils.createNumber(string0);
      assertEquals(4.0, (double)double0, 0.01D);
  }

  @Test
  public void test080()  throws Throwable  {
      String string0 = "2[@/EPk1\"";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 2[@/EPk1\" is not a valid number.
         //
      }
  }

  @Test
  public void test081()  throws Throwable  {
      String string0 = "...";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test082()  throws Throwable  {
      String string0 = "5PiS)KaEZGJbeO1";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 5PiS)KaEZGJbeO1 is not a valid number.
         //
      }
  }

  @Test
  public void test083()  throws Throwable  {
      String string0 = "+|sYGJ(&2`{l8?@4n`E";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // +|sYGJ(&2`{l8?@4n`E is not a valid number.
         //
      }
  }

  @Test
  public void test084()  throws Throwable  {
      String string0 = ".tec\"A72=:Ew0";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test085()  throws Throwable  {
      String string0 = "k7S[TeyM2)U.J;x";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // k7S[TeyM2)U.J;x is not a valid number.
         //
      }
  }

  @Test
  public void test086()  throws Throwable  {
      String string0 = "T[!.?$vEDii!,X5ce";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // T[!.?$vEDii!,X5ce is not a valid number.
         //
      }
  }

  @Test
  public void test087()  throws Throwable  {
      String string0 = ";#[8x.qn3lW8+7N_rL";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ;#[8x.qn3lW8+7N_rL is not a valid number.
         //
      }
  }

  @Test
  public void test088()  throws Throwable  {
      String string0 = "-0XMinimum  bbrevNaHion width with fBset is47";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-Minimum  bbrevNaHion width with fBset is47\"
         //
      }
  }

  @Test
  public void test089()  throws Throwable  {
      String string0 = "*0#x\"1Fu~L";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // *0#x\"1Fu~L is not a valid number.
         //
      }
  }

  @Test
  public void test090()  throws Throwable  {
      String string0 = "-0x0iSbQK6qZGJ;eO1";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-0iSbQK6qZGJ;eO1\"
         //
      }
  }

  @Test
  public void test091()  throws Throwable  {
      String string0 = "0xlUJv{i";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"lUJv{i\"
         //
      }
  }

  @Test
  public void test092() {}
//   @Test
//   public void test092()  throws Throwable  {
//       String string0 = "--k7";
//       Number number0 = NumberUtils.createNumber(string0);
//       assertNull(number0);
//   }

  @Test
  public void test093()  throws Throwable  {
      String string0 = "0X";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
      }
  }

  @Test
  public void test094()  throws Throwable  {
      String string0 = null;
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test095()  throws Throwable  {
      String string0 = "";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test096()  throws Throwable  {
      String string0 = null;
      byte byte0 = (byte)64;
      short short0 = NumberUtils.toShort(string0, (short) byte0);
      assertEquals((short)64, short0);
  }

  @Test
  public void test097()  throws Throwable  {
      String string0 = null;
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
  }

  @Test
  public void test098()  throws Throwable  {
      byte byte0 = (byte)1;
      String string0 = null;
      double double0 = NumberUtils.toDouble(string0, (double) byte0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test099()  throws Throwable  {
      String string0 = null;
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test100()  throws Throwable  {
      String string0 = "i";
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
  }

  @Test
  public void test101()  throws Throwable  {
      String string0 = "";
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
  }

  @Test
  public void test102()  throws Throwable  {
      String string0 = "L";
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test103()  throws Throwable  {
      float float0 = 0.0F;
      short short0 = (short) (-1466);
      float float1 = NumberUtils.max(float0, (float) short0, (float) short0);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
  }

  @Test
  public void test104()  throws Throwable  {
      String string0 = null;
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
  }

  @Test
  public void test105()  throws Throwable  {
      String string0 = "A blank string is not a valid number";
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
  }

  @Test
  public void test106()  throws Throwable  {
      byte byte0 = (byte)64;
      byte byte1 = NumberUtils.min(byte0, byte0, byte0);
      assertEquals((byte)64, byte1);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      
      float float0 = NumberUtils.min((float) byte1, (float) byte1, (float) byte1);
      assertEquals(64.0F, float0, 0.01F);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
  }

  @Test
  public void test107()  throws Throwable  {
      double double0 = 1267.7;
      byte byte0 = (byte)64;
      byte byte1 = NumberUtils.min(byte0, byte0, byte0);
      assertEquals((byte)64, byte1);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      
      double double1 = NumberUtils.min(double0, double0, (double) byte1);
      assertEquals(64.0, double1, 0.01D);
      assertTrue(byte0 == byte1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertTrue(byte1 == byte0);
  }

  @Test
  public void test108()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      assertNotNull(numberUtils0);
  }

  @Test
  public void test109()  throws Throwable  {
      String string0 = "..";
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
  }

  @Test
  public void test110()  throws Throwable  {
      int int0 = 32;
      double double0 = NumberUtils.max((double) int0, (double) int0, (double) int0);
      assertEquals(32.0, double0, 0.01D);
  }

  @Test
  public void test111()  throws Throwable  {
      String string0 = ".";
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test112()  throws Throwable  {
      String string0 = null;
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
  }
}
