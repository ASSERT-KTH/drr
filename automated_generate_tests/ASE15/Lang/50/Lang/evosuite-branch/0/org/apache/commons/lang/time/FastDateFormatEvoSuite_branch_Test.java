/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:20:56 GMT 2014
 */

package org.apache.commons.lang.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.text.AttributedCharacterIterator;
import java.text.DateFormatSymbols;
import java.text.FieldPosition;
import java.text.ParsePosition;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;


public class FastDateFormatEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "]";
      Locale locale0 = Locale.CHINA;
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("]", fastDateFormat0.getPattern());
      assertEquals(1, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(fastDateFormat0);
      
      Calendar calendar0 = null;
      String string1 = fastDateFormat0.format(calendar0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("]", fastDateFormat0.getPattern());
      assertEquals(1, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("]", string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertNotSame(fastDateFormat0, fastDateFormat1);
      assertEquals("]", fastDateFormat1.getPattern());
      assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
      assertEquals(1, fastDateFormat1.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("]", fastDateFormat0.getPattern());
      assertEquals(1, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
      assertNotNull(fastDateFormat1);
      
      boolean boolean0 = fastDateFormat1.equals((Object) fastDateFormat0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertNotSame(fastDateFormat0, fastDateFormat1);
      assertEquals("]", fastDateFormat1.getPattern());
      assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
      assertEquals(1, fastDateFormat1.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("]", fastDateFormat0.getPattern());
      assertEquals(1, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(boolean0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
  }

  @Test
  public void test01() {}
//   @Test
//   public void test01()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(15, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("H.mm.ss z", fastDateFormat0.getPattern());
//       assertNotNull(fastDateFormat0);
//       
//       String string0 = "4\\=y+gaM/";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(zoneInfo0);
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(int0, int0, (TimeZone) zoneInfo0);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertEquals(44, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals("EEEE d MMMM yyyy H.mm.ss z", fastDateFormat1.getPattern());
//       assertEquals(true, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertNotNull(fastDateFormat1);
//       
//       boolean boolean0 = fastDateFormat1.equals((Object) fastDateFormat0);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertNotSame(fastDateFormat0, fastDateFormat1);
//       assertEquals(44, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals("EEEE d MMMM yyyy H.mm.ss z", fastDateFormat1.getPattern());
//       assertEquals(true, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(15, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("H.mm.ss z", fastDateFormat0.getPattern());
//       assertFalse(boolean0);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
//   }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("", fastDateFormat0.getPattern());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertNotNull(fastDateFormat0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try {
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.lang.Object
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.PRC;
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, locale0);
      assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(fastDateFormat0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) zoneInfo0, locale0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getTime();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(date0);
      
      String string0 = fastDateFormat0.format((Object) date0);
      assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("\u4E0B\u534808\u65F621\u520621\u79D2 GMT", string0);
      assertNotNull(string0);
  }

  @Test
  public void test04() {}
//   @Test
//   public void test04()  throws Throwable  {
//       String string0 = "W;";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(zoneInfo0);
//       
//       Locale locale0 = Locale.UK;
//       assertEquals("GBR", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("en_GB", locale0.toString());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("GB", locale0.getCountry());
//       assertNotNull(locale0);
//       
//       int int0 = 0;
//       ZoneInfo zoneInfo1 = (ZoneInfo)TimeZone.getDefault();
//       assertNotSame(zoneInfo1, zoneInfo0);
//       assertEquals("GMT", zoneInfo1.getID());
//       assertTrue(zoneInfo1.equals((Object)zoneInfo0));
//       assertNotNull(zoneInfo1);
//       
//       ZoneInfo zoneInfo2 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       assertNotSame(zoneInfo2, zoneInfo0);
//       assertNotSame(zoneInfo2, zoneInfo1);
//       assertEquals("GMT", zoneInfo2.getID());
//       assertTrue(zoneInfo2.equals((Object)zoneInfo0));
//       assertTrue(zoneInfo2.equals((Object)zoneInfo1));
//       assertNotNull(zoneInfo2);
//       
//       int int1 = zoneInfo1.getRawOffset();
//       assertNotSame(zoneInfo1, zoneInfo0);
//       assertNotSame(zoneInfo1, zoneInfo2);
//       assertEquals("GMT", zoneInfo1.getID());
//       assertEquals(0, int1);
//       assertTrue(zoneInfo1.equals((Object)zoneInfo2));
//       assertTrue(zoneInfo1.equals((Object)zoneInfo0));
//       assertTrue(int1 == int0);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, (TimeZone) zoneInfo0);
//       assertNotSame(zoneInfo0, zoneInfo2);
//       assertNotSame(zoneInfo0, zoneInfo1);
//       assertEquals("EEEE d MMMM yyyy", fastDateFormat0.getPattern());
//       assertEquals(29, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertTrue(int0 == int1);
//       assertTrue(zoneInfo0.equals((Object)zoneInfo1));
//       assertTrue(zoneInfo0.equals((Object)zoneInfo2));
//       assertNotNull(fastDateFormat0);
//       
//       String string1 = fastDateFormat0.getPattern();
//       assertNotSame(zoneInfo0, zoneInfo2);
//       assertNotSame(zoneInfo0, zoneInfo1);
//       assertNotSame(string1, string0);
//       assertEquals("EEEE d MMMM yyyy", fastDateFormat0.getPattern());
//       assertEquals(29, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("EEEE d MMMM yyyy", string1);
//       assertTrue(int0 == int1);
//       assertTrue(zoneInfo0.equals((Object)zoneInfo1));
//       assertTrue(zoneInfo0.equals((Object)zoneInfo2));
//       assertFalse(string1.equals((Object)string0));
//       assertNotNull(string1);
//       
//       boolean boolean0 = fastDateFormat0.equals((Object) string0);
//       assertNotSame(string0, string1);
//       assertNotSame(zoneInfo0, zoneInfo2);
//       assertNotSame(zoneInfo0, zoneInfo1);
//       assertEquals("EEEE d MMMM yyyy", fastDateFormat0.getPattern());
//       assertEquals(29, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertFalse(boolean0);
//       assertTrue(int0 == int1);
//       assertFalse(string0.equals((Object)string1));
//       assertTrue(zoneInfo0.equals((Object)zoneInfo1));
//       assertTrue(zoneInfo0.equals((Object)zoneInfo2));
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(int0, int0, locale0);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertEquals("GBR", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("en_GB", locale0.toString());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("GB", locale0.getCountry());
//       assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals("EEEE, d MMMM yyyy HH:mm:ss 'o''clock' z", fastDateFormat1.getPattern());
//       assertEquals(52, fastDateFormat1.getMaxLengthEstimate());
//       assertTrue(int0 == int1);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertNotNull(fastDateFormat1);
//       
//       FastDateFormat fastDateFormat2 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
//       assertNotSame(fastDateFormat2, fastDateFormat1);
//       assertNotSame(fastDateFormat2, fastDateFormat0);
//       assertNotSame(string0, string1);
//       assertNotSame(zoneInfo0, zoneInfo2);
//       assertNotSame(zoneInfo0, zoneInfo1);
//       assertEquals("W;", fastDateFormat2.getPattern());
//       assertEquals(5, fastDateFormat2.getMaxLengthEstimate());
//       assertEquals(true, fastDateFormat2.getTimeZoneOverridesCalendar());
//       assertEquals("GBR", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("en_GB", locale0.toString());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("GB", locale0.getCountry());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat0));
//       assertFalse(string0.equals((Object)string1));
//       assertTrue(zoneInfo0.equals((Object)zoneInfo1));
//       assertTrue(zoneInfo0.equals((Object)zoneInfo2));
//       assertNotNull(fastDateFormat2);
//       
//       Locale locale1 = Locale.UK;
//       assertSame(locale1, locale0);
//       assertEquals("", locale1.getVariant());
//       assertEquals("en_GB", locale1.toString());
//       assertEquals("GBR", locale1.getISO3Country());
//       assertEquals("en", locale1.getLanguage());
//       assertEquals("GB", locale1.getCountry());
//       assertEquals("eng", locale1.getISO3Language());
//       assertNotNull(locale1);
//       
//       FastDateFormat fastDateFormat3 = FastDateFormat.getInstance(string0, locale1);
//       assertNotSame(fastDateFormat3, fastDateFormat0);
//       assertNotSame(fastDateFormat3, fastDateFormat2);
//       assertNotSame(fastDateFormat3, fastDateFormat1);
//       assertNotSame(string0, string1);
//       assertSame(locale1, locale0);
//       assertEquals(false, fastDateFormat3.getTimeZoneOverridesCalendar());
//       assertEquals(5, fastDateFormat3.getMaxLengthEstimate());
//       assertEquals("W;", fastDateFormat3.getPattern());
//       assertEquals("", locale1.getVariant());
//       assertEquals("en_GB", locale1.toString());
//       assertEquals("GBR", locale1.getISO3Country());
//       assertEquals("en", locale1.getLanguage());
//       assertEquals("GB", locale1.getCountry());
//       assertEquals("eng", locale1.getISO3Language());
//       assertFalse(fastDateFormat3.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat3.equals((Object)fastDateFormat2));
//       assertFalse(fastDateFormat3.equals((Object)fastDateFormat1));
//       assertFalse(string0.equals((Object)string1));
//       assertNotNull(fastDateFormat3);
//   }

  @Test
  public void test05() {}
//   @Test
//   public void test05()  throws Throwable  {
//       int int0 = 2;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0);
//       assertEquals("d-MMM-yyyy H.mm.ss", fastDateFormat0.getPattern());
//       assertEquals(24, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertNotNull(fastDateFormat0);
//       
//       int int1 = 2113;
//       int int2 = 2182;
//       int int3 = 0;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int1, int0, int0, int2, int3);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=2,MONTH=2113,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=2,HOUR_OF_DAY=2,MINUTE=2182,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertFalse(int0 == int1);
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int3);
//       assertFalse(int2 == int1);
//       assertFalse(int2 == int0);
//       assertFalse(int2 == int3);
//       assertFalse(int3 == int1);
//       assertFalse(int3 == int0);
//       assertFalse(int3 == int2);
//       assertFalse(int1 == int0);
//       assertFalse(int1 == int2);
//       assertFalse(int1 == int3);
//       assertNotNull(mockGregorianCalendar0);
//       
//       int int4 = 0;
//       StringBuffer stringBuffer0 = new StringBuffer(int4);
//       assertEquals("", stringBuffer0.toString());
//       assertEquals(0, stringBuffer0.capacity());
//       assertEquals(0, stringBuffer0.length());
//       assertFalse(int4 == int2);
//       assertFalse(int4 == int1);
//       assertFalse(int4 == int0);
//       assertNotNull(stringBuffer0);
//       
//       FieldPosition fieldPosition0 = null;
//       StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
//       assertSame(stringBuffer0, stringBuffer1);
//       assertSame(stringBuffer1, stringBuffer0);
//       assertEquals("3-feb-0178 14.22.00", stringBuffer0.toString());
//       assertEquals(19, stringBuffer0.length());
//       assertEquals(30, stringBuffer0.capacity());
//       assertEquals(19, stringBuffer1.length());
//       assertEquals("3-feb-0178 14.22.00", stringBuffer1.toString());
//       assertEquals(30, stringBuffer1.capacity());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-56547193080000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=178,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=34,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=22,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("d-MMM-yyyy H.mm.ss", fastDateFormat0.getPattern());
//       assertEquals(24, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertFalse(int0 == int1);
//       assertFalse(int0 == int4);
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int3);
//       assertFalse(int2 == int1);
//       assertFalse(int2 == int0);
//       assertFalse(int2 == int3);
//       assertFalse(int2 == int4);
//       assertFalse(int3 == int1);
//       assertFalse(int3 == int0);
//       assertFalse(int3 == int2);
//       assertFalse(int4 == int2);
//       assertFalse(int4 == int1);
//       assertFalse(int4 == int0);
//       assertFalse(int1 == int0);
//       assertFalse(int1 == int2);
//       assertFalse(int1 == int4);
//       assertFalse(int1 == int3);
//       assertNotNull(stringBuffer1);
//       
//       String string0 = "The validated map is empty";
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: T
//          //
//       }
//   }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "$x+";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: x
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "=u0{=*n-r";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = ">t}!)2uH63a";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = " 3r]Dgo-[";
      Locale locale0 = Locale.JAPANESE;
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "qy2*M=s?jTj]+j_wXk";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "p$J-";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: p
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "org.apache.commons.lang.time.FastDateFormat$UnpaddedMonthField";
      Locale locale0 = Locale.ENGLISH;
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "Mn_";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "=i4Zz)p'JN";
      int int0 = 842;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=842,MONTH=842,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=842,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(mockGregorianCalendar0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=842,MONTH=842,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=842,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: i
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "w_";
      String string1 = "go=";
      assertNotSame(string1, string0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotSame(string0, string1);
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(string0.equals((Object)string1));
      assertNotNull(zoneInfo0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string1, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: g
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "Ef?*Y0^";
      Locale locale0 = Locale.PRC;
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = ",Ze&R]w_6y";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: e
         //
      }
  }

  @Test
  public void test18() {}
//   @Test
//   public void test18()  throws Throwable  {
//       String string0 = "%4z;)c)*Z2\"<<c%g7p";
//       SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat();
//       assertEquals(true, simpleDateFormat0.isLenient());
//       assertEquals("jj/MM/aa HH:mm", simpleDateFormat0.toLocalizedPattern());
//       assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toPattern());
//       assertNotNull(simpleDateFormat0);
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)simpleDateFormat0.getTimeZone();
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(true, simpleDateFormat0.isLenient());
//       assertEquals("jj/MM/aa HH:mm", simpleDateFormat0.toLocalizedPattern());
//       assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toPattern());
//       assertNotNull(zoneInfo0);
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: c
//          //
//       }
//   }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "M$\\b0F";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "h%YsjwO;amCH6a_~t";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.forLanguageTag(string0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Y
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = ":Xvkmn";
      Locale locale0 = Locale.CHINA;
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: X
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "2VD?";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: V
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "{3U;_KH8N;~RR";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = "^RaS|1";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: R
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = "QhQ?rSpobI";
      Locale locale0 = Locale.GERMAN;
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Q
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = "60%5;S0P^]ny/]$k";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = "?\\KO6!c'ic^Q";
      Locale locale0 = Locale.ITALIAN;
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: O
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = "No date pattern for locale: ";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = "yL";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: L
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = "(KJ3NouU7F_hB:|g";
      int int0 = 1;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0, int0, int0, int0, int0, int0, int0, int0, int0, int0);
      assertEquals("java.util.SimpleTimeZone[id=(KJ3NouU7F_hB:|g,offset=1,dstSavings=1,useDaylight=true,startYear=0,startMode=2,startMonth=1,startDay=1,startDayOfWeek=1,startTime=1,startTimeMode=0,endMode=2,endMonth=1,endDay=1,endDayOfWeek=1,endTime=1,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("(KJ3NouU7F_hB:|g", simpleTimeZone0.getID());
      assertEquals(1, simpleTimeZone0.getDSTSavings());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals(true, simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.US;
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: J
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      String string0 = "yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE";
      Locale locale0 = Locale.forLanguageTag(string0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      String string1 = "I&)J&/";
      assertNotSame(string1, string0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string1, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      String string0 = ",@GhvjBa";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: v
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = "3kEDw&*jl";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: j
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      String string0 = "%C,)XM7~VGC )L";
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
      }
  }

  @Test
  public void test35()  throws Throwable  {
      String string0 = ";3B$;?|@%?\\&?";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: B
         //
      }
  }

  @Test
  public void test36()  throws Throwable  {
      String string0 = "Agv}x)?B>':";
      int int0 = 0;
      Locale locale0 = Locale.ITALY;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("H.mm.ss z", fastDateFormat0.getPattern());
      assertEquals(15, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertNotNull(fastDateFormat0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)fastDateFormat0.getTimeZone();
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("H.mm.ss z", fastDateFormat0.getPattern());
      assertEquals(15, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
      }
  }

  @Test
  public void test37()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string0 = null;
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("dd/MM/yy HH:mm", fastDateFormat0.getPattern());
      assertNotNull(fastDateFormat0);
      
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
      assertEquals("dd/MM/yy HH:mm", fastDateFormat1.getPattern());
      assertEquals(14, fastDateFormat1.getMaxLengthEstimate());
      assertTrue(fastDateFormat1.equals((Object)fastDateFormat0));
      assertNotNull(fastDateFormat1);
  }

  @Test
  public void test39()  throws Throwable  {
      String string0 = "Agv}x)?B>':";
      int int0 = 0;
      int int1 = 1;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int1, int0, int0, int1);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(mockGregorianCalendar0);
      
      String string1 = "org.apache.commons.lang.time.FastDateFormat$UnpaddedMonthField";
      assertNotSame(string1, string0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string1);
      assertNotSame(string1, string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, (TimeZone) zoneInfo0, locale0);
      assertNotSame(string1, string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("EEEE d MMMM yyyy", fastDateFormat0.getPattern());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(29, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertNotNull(fastDateFormat0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) string0);
      assertNotSame(string0, string1);
      assertEquals(27, stringBuffer0.capacity());
      assertEquals("Agv}x)?B>':", stringBuffer0.toString());
      assertEquals(11, stringBuffer0.length());
      assertFalse(string0.equals((Object)string1));
      assertNotNull(stringBuffer0);
      
      StringBuffer stringBuffer1 = stringBuffer0.append((long) int0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotSame(string0, string1);
      assertEquals(12, stringBuffer0.length());
      assertEquals(27, stringBuffer0.capacity());
      assertEquals("Agv}x)?B>':0", stringBuffer0.toString());
      assertEquals(12, stringBuffer1.length());
      assertEquals(27, stringBuffer1.capacity());
      assertEquals("Agv}x)?B>':0", stringBuffer1.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertNotNull(stringBuffer1);
      
      StringBuffer stringBuffer2 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer1);
      assertSame(stringBuffer0, stringBuffer2);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer2);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertSame(stringBuffer2, stringBuffer0);
      assertSame(stringBuffer2, stringBuffer1);
      assertEquals(34, stringBuffer0.length());
      assertEquals(56, stringBuffer0.capacity());
      assertEquals("Agv}x)?B>':0sabato 31 gennaio 0001", stringBuffer0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(34, stringBuffer1.length());
      assertEquals("Agv}x)?B>':0sabato 31 gennaio 0001", stringBuffer1.toString());
      assertEquals(56, stringBuffer1.capacity());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("Agv}x)?B>':0sabato 31 gennaio 0001", stringBuffer2.toString());
      assertEquals(56, stringBuffer2.capacity());
      assertEquals(34, stringBuffer2.length());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("EEEE d MMMM yyyy", fastDateFormat0.getPattern());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(29, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertNotNull(stringBuffer2);
      
      char[] charArray0 = new char[3];
      StringBuffer stringBuffer3 = stringBuffer2.insert(int0, charArray0);
      assertSame(stringBuffer0, stringBuffer2);
      assertSame(stringBuffer0, stringBuffer3);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer2);
      assertSame(stringBuffer1, stringBuffer0);
      assertSame(stringBuffer1, stringBuffer3);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertSame(stringBuffer2, stringBuffer0);
      assertSame(stringBuffer2, stringBuffer1);
      assertSame(stringBuffer2, stringBuffer3);
      assertSame(stringBuffer3, stringBuffer2);
      assertSame(stringBuffer3, stringBuffer1);
      assertSame(stringBuffer3, stringBuffer0);
      assertEquals(56, stringBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000Agv}x)?B>':0sabato 31 gennaio 0001", stringBuffer0.toString());
      assertEquals(37, stringBuffer0.length());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(37, stringBuffer1.length());
      assertEquals("\u0000\u0000\u0000Agv}x)?B>':0sabato 31 gennaio 0001", stringBuffer1.toString());
      assertEquals(56, stringBuffer1.capacity());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("\u0000\u0000\u0000Agv}x)?B>':0sabato 31 gennaio 0001", stringBuffer2.toString());
      assertEquals(37, stringBuffer2.length());
      assertEquals(56, stringBuffer2.capacity());
      assertEquals(56, stringBuffer3.capacity());
      assertEquals("\u0000\u0000\u0000Agv}x)?B>':0sabato 31 gennaio 0001", stringBuffer3.toString());
      assertEquals(37, stringBuffer3.length());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("EEEE d MMMM yyyy", fastDateFormat0.getPattern());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(29, fastDateFormat0.getMaxLengthEstimate());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertNotNull(stringBuffer3);
      
      int int2 = (-574);
      int int3 = 0;
      SimpleDateFormat simpleDateFormat0 = null;
      try {
        simpleDateFormat0 = new SimpleDateFormat(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'A'
         //
      }
  }

  @Test
  public void test40()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      String string0 = "@%b2x=&bu";
      DateFormatSymbols dateFormatSymbols0 = null;
      String string1 = "5|:ZS#";
      //  // Unstable assertion: assertNotSame(string1, string0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string1);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      
      String string2 = "&HIPEPs,";
      //  // Unstable assertion: assertNotSame(string2, string1);
      //  // Unstable assertion: assertNotSame(string2, string0);
      
      String string3 = "H*36.%0:k@";
      //  // Unstable assertion: assertNotSame(string3, string2);
      //  // Unstable assertion: assertNotSame(string3, string1);
      //  // Unstable assertion: assertNotSame(string3, string0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string3, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNotSame(string1, string2);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertNotSame(string1, string3);
      //  // Unstable assertion: assertNotSame(string3, string2);
      //  // Unstable assertion: assertNotSame(string3, string1);
      //  // Unstable assertion: assertNotSame(string3, string0);
      //  // Unstable assertion: assertEquals("H*36.%0:k@", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertFalse(string1.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string0));
      //  // Unstable assertion: assertNotNull(fastDateFormat0);
      
      int int2 = fastDateFormat0.hashCode();
      //  // Unstable assertion: assertNotSame(string1, string2);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertNotSame(string1, string3);
      //  // Unstable assertion: assertNotSame(string3, string2);
      //  // Unstable assertion: assertNotSame(string3, string1);
      //  // Unstable assertion: assertNotSame(string3, string0);
      //  // Unstable assertion: assertEquals("H*36.%0:k@", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(954851571, int2);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string0));
      //  // Unstable assertion: assertFalse(int2 == int0);
      //  // Unstable assertion: assertFalse(int2 == int1);
      
      String string4 = fastDateFormat0.format((long) int0);
      //  // Unstable assertion: assertNotSame(string1, string4);
      //  // Unstable assertion: assertNotSame(string1, string2);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertNotSame(string1, string3);
      //  // Unstable assertion: assertNotSame(string3, string2);
      //  // Unstable assertion: assertNotSame(string3, string1);
      //  // Unstable assertion: assertNotSame(string3, string0);
      //  // Unstable assertion: assertNotSame(string3, string4);
      //  // Unstable assertion: assertNotSame(string4, string2);
      //  // Unstable assertion: assertNotSame(string4, string1);
      //  // Unstable assertion: assertNotSame(string4, string3);
      //  // Unstable assertion: assertNotSame(string4, string0);
      //  // Unstable assertion: assertEquals("H*36.%0:k@", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("0*36.%0:24@", string4);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string4));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string3));
      //  // Unstable assertion: assertFalse(int0 == int2);
      //  // Unstable assertion: assertFalse(string3.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string4));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string0));
      //  // Unstable assertion: assertNotNull(string4);
      
      String string5 = fastDateFormat0.format((long) int2);
      //  // Unstable assertion: assertNotSame(string1, string4);
      //  // Unstable assertion: assertNotSame(string1, string5);
      //  // Unstable assertion: assertNotSame(string1, string2);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertNotSame(string1, string3);
      //  // Unstable assertion: assertNotSame(string5, string0);
      //  // Unstable assertion: assertNotSame(string5, string4);
      //  // Unstable assertion: assertNotSame(string5, string2);
      //  // Unstable assertion: assertNotSame(string5, string3);
      //  // Unstable assertion: assertNotSame(string5, string1);
      //  // Unstable assertion: assertNotSame(string3, string2);
      //  // Unstable assertion: assertNotSame(string3, string1);
      //  // Unstable assertion: assertNotSame(string3, string0);
      //  // Unstable assertion: assertNotSame(string3, string5);
      //  // Unstable assertion: assertNotSame(string3, string4);
      //  // Unstable assertion: assertEquals("H*36.%0:k@", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("1*36.%0:1@", string5);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string4));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string5));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string4));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string5));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string4));
      //  // Unstable assertion: assertFalse(int2 == int0);
      //  // Unstable assertion: assertFalse(int2 == int1);
      //  // Unstable assertion: assertNotNull(string5);
      
      Locale locale0 = Locale.KOREA;
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("ko_KR", locale0.toString());
      //  // Unstable assertion: assertEquals("kor", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("ko", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("KOR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("KR", locale0.getCountry());
      //  // Unstable assertion: assertNotNull(locale0);
      
      FastDateFormat fastDateFormat1 = new FastDateFormat(string2, zoneInfo0, locale0);
      //  // Unstable assertion: assertNotSame(string1, string4);
      //  // Unstable assertion: assertNotSame(string1, string5);
      //  // Unstable assertion: assertNotSame(string1, string2);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertNotSame(string1, string3);
      //  // Unstable assertion: assertNotSame(fastDateFormat1, fastDateFormat0);
      //  // Unstable assertion: assertNotSame(string2, string4);
      //  // Unstable assertion: assertNotSame(string2, string1);
      //  // Unstable assertion: assertNotSame(string2, string3);
      //  // Unstable assertion: assertNotSame(string2, string0);
      //  // Unstable assertion: assertNotSame(string2, string5);
      //  // Unstable assertion: assertEquals(0, fastDateFormat1.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals(true, fastDateFormat1.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals("&HIPEPs,", fastDateFormat1.getPattern());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("ko_KR", locale0.toString());
      //  // Unstable assertion: assertEquals("kor", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("ko", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("KOR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("KR", locale0.getCountry());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertFalse(string1.equals((Object)string4));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string5));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string3));
      //  // Unstable assertion: assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string4));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string5));
      //  // Unstable assertion: assertNotNull(fastDateFormat1);
      
      Locale locale1 = Locale.PRC;
      //  // Unstable assertion: assertNotSame(locale1, locale0);
      //  // Unstable assertion: assertEquals("zh", locale1.getLanguage());
      //  // Unstable assertion: assertEquals("zho", locale1.getISO3Language());
      //  // Unstable assertion: assertEquals("CN", locale1.getCountry());
      //  // Unstable assertion: assertEquals("CHN", locale1.getISO3Country());
      //  // Unstable assertion: assertEquals("zh_CN", locale1.toString());
      //  // Unstable assertion: assertEquals("", locale1.getVariant());
      //  // Unstable assertion: assertFalse(locale1.equals((Object)locale0));
      //  // Unstable assertion: assertNotNull(locale1);
      
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance(string1, (TimeZone) zoneInfo0, locale1);
      //  // Unstable assertion: assertNotSame(string1, string4);
      //  // Unstable assertion: assertNotSame(string1, string5);
      //  // Unstable assertion: assertNotSame(string1, string2);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertNotSame(string1, string3);
      //  // Unstable assertion: assertNotSame(fastDateFormat2, fastDateFormat0);
      //  // Unstable assertion: assertNotSame(fastDateFormat2, fastDateFormat1);
      //  // Unstable assertion: assertNotSame(locale1, locale0);
      //  // Unstable assertion: assertEquals(13, fastDateFormat2.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals(true, fastDateFormat2.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals("5|:ZS#", fastDateFormat2.getPattern());
      //  // Unstable assertion: assertEquals("zh", locale1.getLanguage());
      //  // Unstable assertion: assertEquals("zho", locale1.getISO3Language());
      //  // Unstable assertion: assertEquals("CN", locale1.getCountry());
      //  // Unstable assertion: assertEquals("CHN", locale1.getISO3Country());
      //  // Unstable assertion: assertEquals("zh_CN", locale1.toString());
      //  // Unstable assertion: assertEquals("", locale1.getVariant());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertFalse(string1.equals((Object)string4));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string5));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string3));
      //  // Unstable assertion: assertFalse(fastDateFormat2.equals((Object)fastDateFormat0));
      //  // Unstable assertion: assertFalse(fastDateFormat2.equals((Object)fastDateFormat1));
      //  // Unstable assertion: assertFalse(locale1.equals((Object)locale0));
      //  // Unstable assertion: assertNotNull(fastDateFormat2);
      
      SimpleDateFormat simpleDateFormat0 = null;
      try {
        simpleDateFormat0 = new SimpleDateFormat(string0, dateFormatSymbols0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test41()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat0.getPattern());
      assertNotNull(fastDateFormat0);
      
      MockDate mockDate0 = new MockDate(int0, int0, int0);
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      assertNotNull(mockDate0);
      
      String string0 = fastDateFormat0.format((Date) mockDate0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat0.getPattern());
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      assertEquals("1899\u5E7412\u670831\u65E5 \u661F\u671F\u65E5", string0);
      assertNotNull(string0);
  }

  @Test
  public void test42()  throws Throwable  {
      int int0 = (-31);
      int int1 = 0;
      TimeZone timeZone0 = null;
      String string0 = "9Fs]<M|";
      int int2 = 0;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
      assertEquals("9Fs]<M|", fastDateFormat0.getPattern());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
      assertNotNull(fastDateFormat0);
      
      // Undeclared exception!
      try {
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator((Object) timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: <null>
         //
      }
  }

  @Test
  public void test43() {}
//   @Test
//   public void test43()  throws Throwable  {
//       String string0 = "Agv}x)?B>':";
//       int int0 = 0;
//       int int1 = 1;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int1, int0, int0, int1);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertNotNull(mockGregorianCalendar0);
//       
//       String string1 = "org.apache.commons.lang.time.FastDateFormat$UnpaddedMonthField";
//       assertNotSame(string1, string0);
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string1);
//       assertNotSame(string1, string0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertFalse(string1.equals((Object)string0));
//       assertNotNull(zoneInfo0);
//       
//       Locale locale0 = Locale.ITALIAN;
//       assertEquals("", locale0.getCountry());
//       assertEquals("ita", locale0.getISO3Language());
//       assertEquals("it", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("it", locale0.getLanguage());
//       assertEquals("", locale0.getISO3Country());
//       assertNotNull(locale0);
//       
//       StringBuffer stringBuffer0 = new StringBuffer((CharSequence) string0);
//       assertNotSame(string0, string1);
//       assertEquals(27, stringBuffer0.capacity());
//       assertEquals("Agv}x)?B>':", stringBuffer0.toString());
//       assertEquals(11, stringBuffer0.length());
//       assertFalse(string0.equals((Object)string1));
//       assertNotNull(stringBuffer0);
//       
//       StringBuffer stringBuffer1 = stringBuffer0.append((long) int0);
//       assertNotSame(string0, string1);
//       assertSame(stringBuffer1, stringBuffer0);
//       assertSame(stringBuffer0, stringBuffer1);
//       assertEquals(27, stringBuffer1.capacity());
//       assertEquals(12, stringBuffer1.length());
//       assertEquals("Agv}x)?B>':0", stringBuffer1.toString());
//       assertEquals(27, stringBuffer0.capacity());
//       assertEquals("Agv}x)?B>':0", stringBuffer0.toString());
//       assertEquals(12, stringBuffer0.length());
//       assertFalse(int0 == int1);
//       assertFalse(string0.equals((Object)string1));
//       assertNotNull(stringBuffer1);
//       
//       char[] charArray0 = new char[3];
//       int int2 = (-574);
//       ZoneInfo zoneInfo1 = (ZoneInfo)TimeZone.getDefault();
//       assertNotSame(zoneInfo1, zoneInfo0);
//       assertEquals("GMT", zoneInfo1.getID());
//       assertTrue(zoneInfo1.equals((Object)zoneInfo0));
//       assertNotNull(zoneInfo1);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int1, int1, (TimeZone) zoneInfo1);
//       assertNotSame(zoneInfo1, zoneInfo0);
//       assertEquals("d MMMM yyyy H.mm.ss z", fastDateFormat0.getPattern());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(34, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("GMT", zoneInfo1.getID());
//       assertTrue(zoneInfo1.equals((Object)zoneInfo0));
//       assertFalse(int1 == int2);
//       assertFalse(int1 == int0);
//       assertNotNull(fastDateFormat0);
//       
//       String string2 = "";
//       assertNotSame(string2, string0);
//       assertNotSame(string2, string1);
//       
//       String string3 = "TN|qm2m]o&+wlEd-&rP";
//       assertNotSame(string3, string2);
//       assertNotSame(string3, string1);
//       assertNotSame(string3, string0);
//       
//       char char0 = '>';
//       Set<Character> set0 = locale0.getExtensionKeys();
//       assertEquals("", locale0.getCountry());
//       assertEquals("ita", locale0.getISO3Language());
//       assertEquals("it", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("it", locale0.getLanguage());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals(0, set0.size());
//       assertEquals(true, set0.isEmpty());
//       assertNotNull(set0);
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(int0, int0, (TimeZone) zoneInfo1, locale0);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertNotSame(zoneInfo1, zoneInfo0);
//       assertEquals("", locale0.getCountry());
//       assertEquals("ita", locale0.getISO3Language());
//       assertEquals("it", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("it", locale0.getLanguage());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals(44, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals("EEEE d MMMM yyyy H.mm.ss z", fastDateFormat1.getPattern());
//       assertEquals(true, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals("GMT", zoneInfo1.getID());
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertTrue(zoneInfo1.equals((Object)zoneInfo0));
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int1);
//       assertNotNull(fastDateFormat1);
//   }

  @Test
  public void test44()  throws Throwable  {
      int int0 = 0;
      String string0 = "@%b2x=&bu";
      String string1 = "5|:ZS#";
      //  // Unstable assertion: assertNotSame(string1, string0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string1);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string1, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertEquals("5|:ZS#", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertNotNull(fastDateFormat0);
      
      int int1 = fastDateFormat0.hashCode();
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertEquals("5|:ZS#", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(1734104047, int1);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertFalse(int1 == int0);
      
      String string2 = fastDateFormat0.format((long) int1);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertNotSame(string1, string2);
      //  // Unstable assertion: assertNotSame(string2, string0);
      //  // Unstable assertion: assertNotSame(string2, string1);
      //  // Unstable assertion: assertEquals("5|:ZS#", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("5|:+000047#", string2);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string2));
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertNotNull(string2);
      
      Locale locale0 = Locale.PRC;
      //  // Unstable assertion: assertEquals("CN", locale0.getCountry());
      //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("CHN", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("zh_CN", locale0.toString());
      //  // Unstable assertion: assertNotNull(locale0);
      
      int int2 = 0;
      //  // Unstable assertion: assertFalse(int2 == int1);
  }

  @Test
  public void test45()  throws Throwable  {
      int int0 = 1;
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertNotNull(locale0);
      
      String string0 = "s9iLr!vW+Pt";
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, (TimeZone) zoneInfo0, locale0);
      assertEquals("ahh'\u65F6'mm'\u5206'ss'\u79D2'", fastDateFormat0.getPattern());
      assertEquals(11, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(fastDateFormat0);
  }

  @Test
  public void test46()  throws Throwable  {
      String string0 = "]";
      Locale locale0 = Locale.CHINA;
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
      assertEquals("]", fastDateFormat0.getPattern());
      assertEquals(1, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(fastDateFormat0);
      
      String string1 = fastDateFormat0.toString();
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("]", fastDateFormat0.getPattern());
      assertEquals(1, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("FastDateFormat[]]", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
  }

  @Test
  public void test47()  throws Throwable  {
      int int0 = 0;
      String string0 = "";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, (TimeZone) zoneInfo0, locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("ahh'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(15, fastDateFormat0.getMaxLengthEstimate());
      assertNotNull(fastDateFormat0);
      
      MockDate mockDate0 = new MockDate(int0, int0, int0);
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      assertNotNull(mockDate0);
      
      int int1 = mockDate0.getHours();
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      assertEquals(0, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      String string1 = fastDateFormat0.format((Date) mockDate0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("ahh'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(15, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      assertEquals("\u4E0A\u534812\u664200\u520600\u79D2 GMT", string1);
      assertFalse(string0.equals((Object)string1));
      assertTrue(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      ParsePosition parsePosition0 = new ParsePosition(int1);
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertEquals(-1, parsePosition0.getErrorIndex());
      assertEquals(0, parsePosition0.getIndex());
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertNotNull(parsePosition0);
      
      Object object0 = fastDateFormat0.parseObject(string1, parsePosition0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(0, parsePosition0.getErrorIndex());
      assertEquals(0, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=0]", parsePosition0.toString());
      assertEquals("ahh'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(15, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      assertFalse(string0.equals((Object)string1));
      assertTrue(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(int1 == int0);
      assertNull(object0);
  }

  @Test
  public void test48() {}
//   @Test
//   public void test48()  throws Throwable  {
//       int int0 = 1;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0);
//       assertEquals("d MMMM yyyy", fastDateFormat0.getPattern());
//       assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertNotNull(fastDateFormat0);
//       
//       int int1 = fastDateFormat0.getMaxLengthEstimate();
//       assertEquals("d MMMM yyyy", fastDateFormat0.getPattern());
//       assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(19, int1);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//   }

  @Test
  public void test49() {}
//   @Test
//   public void test49()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertEquals("dd/MM/yy HH:mm", fastDateFormat0.getPattern());
//       assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertNotNull(fastDateFormat0);
//       
//       Locale locale0 = fastDateFormat0.getLocale();
//       assertEquals("dd/MM/yy HH:mm", fastDateFormat0.getPattern());
//       assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("", locale0.getCountry());
//       assertEquals("it", locale0.getLanguage());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("ita", locale0.getISO3Language());
//       assertEquals("it", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertNotNull(locale0);
//   }

  @Test
  public void test50() {}
//   @Test
//   public void test50()  throws Throwable  {
//       int int0 = 0;
//       String string0 = "KM.qtIV5shG<T8I";
//       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("KM.qtIV5shG<T8I", simpleTimeZone0.getID());
//       assertEquals("java.util.SimpleTimeZone[id=KM.qtIV5shG<T8I,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertNotNull(simpleTimeZone0);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, (TimeZone) simpleTimeZone0);
//       assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("H.mm.ss z", fastDateFormat0.getPattern());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("KM.qtIV5shG<T8I", simpleTimeZone0.getID());
//       assertEquals("java.util.SimpleTimeZone[id=KM.qtIV5shG<T8I,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertNotNull(fastDateFormat0);
//   }

  @Test
  public void test51()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("dd/MM/yy HH:mm", fastDateFormat0.getPattern());
      assertNotNull(fastDateFormat0);
      
      long long0 = (-1L);
      String string0 = fastDateFormat0.format(long0);
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("dd/MM/yy HH:mm", fastDateFormat0.getPattern());
      assertEquals("31/12/69 23:59", string0);
      assertNotNull(string0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
      assertNotSame(fastDateFormat0, fastDateFormat1);
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("dd/MM/yy HH:mm", fastDateFormat0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("31/12/69 23:59", fastDateFormat1.getPattern());
      assertEquals(true, fastDateFormat1.getTimeZoneOverridesCalendar());
      assertEquals(14, fastDateFormat1.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      assertNotNull(fastDateFormat1);
  }

  @Test
  public void test52()  throws Throwable  {
      String string0 = "]";
      Locale locale0 = Locale.CHINA;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
      assertEquals("]", fastDateFormat0.getPattern());
      assertEquals(1, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(fastDateFormat0);
      
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
      assertEquals("]", fastDateFormat0.getPattern());
      assertEquals(1, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(boolean0);
  }

  @Test
  public void test53() {}
//   @Test
//   public void test53()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(15, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("H.mm.ss z", fastDateFormat0.getPattern());
//       assertNotNull(fastDateFormat0);
//       
//       Long long0 = new Long((long) int0);
//       assertEquals(0L, (long)long0);
//       
//       String string0 = fastDateFormat0.format((Object) long0);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(15, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("H.mm.ss z", fastDateFormat0.getPattern());
//       assertEquals("0.00.00 GMT", string0);
//       assertNotNull(string0);
//   }
}
