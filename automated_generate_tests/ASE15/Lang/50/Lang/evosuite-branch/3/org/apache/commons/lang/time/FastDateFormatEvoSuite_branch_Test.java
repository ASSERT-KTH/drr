/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:52:29 GMT 2014
 */

package org.apache.commons.lang.time;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.text.AttributedCharacterIterator;
import java.text.ParsePosition;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang.time.FastDateFormat;




import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;


public class FastDateFormatEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      int int0 = 454;
      String string0 = "}kW51";
      int int1 = (-4);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int1, int1, int1, int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-4,MONTH=-4,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-4,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=454,HOUR_OF_DAY=454,MINUTE=-4,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(mockGregorianCalendar0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-4,MONTH=-4,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-4,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=454,HOUR_OF_DAY=454,MINUTE=-4,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("}kW51", fastDateFormat0.getPattern());
      assertEquals(11, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-4,MONTH=-4,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-4,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=454,HOUR_OF_DAY=454,MINUTE=-4,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(fastDateFormat0);
      
      String string1 = fastDateFormat0.format((long) int1);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertEquals("}23551", string1);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("}kW51", fastDateFormat0.getPattern());
      assertEquals(11, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-4,MONTH=-4,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-4,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=454,HOUR_OF_DAY=454,MINUTE=-4,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
  }

  @Test
  public void test01() {}
//   @Test
//   public void test01()  throws Throwable  {
//       int int0 = 140;
//       int int1 = 0;
//       String string0 = "psF2";
//       int int2 = 0;
//       int int3 = (-827);
//       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0, int2, int2, int1, int0, int0, int2, int3, int3);
//       assertFalse(int0 == int3);
//       assertFalse(int0 == int1);
//       assertFalse(int0 == int2);
//       assertFalse(int1 == int3);
//       assertFalse(int1 == int0);
//       assertFalse(int2 == int3);
//       assertFalse(int2 == int0);
//       assertFalse(int3 == int0);
//       assertFalse(int3 == int2);
//       assertFalse(int3 == int1);
//       assertEquals("java.util.SimpleTimeZone[id=psF2,offset=140,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=140,startTimeMode=0,endMode=0,endMonth=140,endDay=0,endDayOfWeek=-827,endTime=-827,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(140, simpleTimeZone0.getRawOffset());
//       assertEquals("psF2", simpleTimeZone0.getID());
//       assertNotNull(simpleTimeZone0);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int1, int1, (TimeZone) simpleTimeZone0);
//       assertFalse(int0 == int3);
//       assertFalse(int0 == int1);
//       assertFalse(int0 == int2);
//       assertFalse(int1 == int3);
//       assertFalse(int1 == int0);
//       assertFalse(int2 == int3);
//       assertFalse(int2 == int0);
//       assertFalse(int3 == int0);
//       assertFalse(int3 == int2);
//       assertFalse(int3 == int1);
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(55, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
//       assertEquals("java.util.SimpleTimeZone[id=psF2,offset=140,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=140,startTimeMode=0,endMode=0,endMonth=140,endDay=0,endDayOfWeek=-827,endTime=-827,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(140, simpleTimeZone0.getRawOffset());
//       assertEquals("psF2", simpleTimeZone0.getID());
//       assertNotNull(fastDateFormat0);
//       
//       MockDate mockDate0 = new MockDate(int3, int0, int3, int1, int3);
//       assertFalse(int0 == int3);
//       assertFalse(int0 == int1);
//       assertFalse(int0 == int2);
//       assertFalse(int1 == int3);
//       assertFalse(int1 == int0);
//       assertFalse(int3 == int0);
//       assertFalse(int3 == int2);
//       assertFalse(int3 == int1);
//       assertEquals("Thu May 26 10:13:00 GMT 1082", mockDate0.toString());
//       assertNotNull(mockDate0);
//       
//       String string1 = fastDateFormat0.format((Date) mockDate0);
//       assertFalse(int0 == int3);
//       assertFalse(int0 == int1);
//       assertFalse(int0 == int2);
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(int1 == int3);
//       assertFalse(int1 == int0);
//       assertFalse(int2 == int3);
//       assertFalse(int2 == int0);
//       assertFalse(int3 == int0);
//       assertFalse(int3 == int2);
//       assertFalse(int3 == int1);
//       assertEquals("Thursday, May 26, 1082 10:13:00 AM GMT+00:00", string1);
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(55, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
//       assertEquals("Thu May 26 10:13:00 GMT 1082", mockDate0.toString());
//       assertEquals("java.util.SimpleTimeZone[id=psF2,offset=140,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=140,startTimeMode=0,endMode=0,endMonth=140,endDay=0,endDayOfWeek=-827,endTime=-827,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(140, simpleTimeZone0.getRawOffset());
//       assertEquals("psF2", simpleTimeZone0.getID());
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       assertNotNull(string1);
//   }

  @Test
  public void test02() {}
//   @Test
//   public void test02()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
//       assertNotNull(fastDateFormat0);
//       
//       int int1 = 122;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int1, int0, int0, int0, int0, int0);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=122,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertNotNull(mockGregorianCalendar0);
//       
//       String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertEquals("Tuesday, December 31, 0121", string0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-58317408000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=121,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
//       assertNotNull(string0);
//   }

  @Test
  public void test03() {}
//   @Test
//   public void test03()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
//       assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
//       assertNotNull(fastDateFormat0);
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertNotNull(mockGregorianCalendar0);
//       
//       Date date0 = mockGregorianCalendar0.getTime();
//       assertEquals("Wed Dec 31 00:00:00 GMT 2", date0.toString());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=31,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertNotNull(date0);
//       
//       String string0 = fastDateFormat0.format(date0);
//       assertEquals("Wednesday, December 31, 0002", string0);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
//       assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("Wed Dec 31 00:00:00 GMT 2", date0.toString());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=31,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertNotNull(string0);
//   }

  @Test
  public void test04()  throws Throwable  {
      int int0 = 0;
      String string0 = "?{PsLVp#*#";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, (TimeZone) zoneInfo0, locale0);
      assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("H' h 'mm z", fastDateFormat0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(fastDateFormat0);
      
      Object object0 = null;
      // Undeclared exception!
      try {
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: <null>
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "dd/MM/yy H.mm";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
      assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("dd/MM/yy H.mm", fastDateFormat0.getPattern());
      assertNotNull(fastDateFormat0);
      
      int int0 = (-203);
      MockDate mockDate0 = new MockDate((long) int0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertNotNull(mockDate0);
      
      String string1 = fastDateFormat0.format((Object) mockDate0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("31/12/69 23.59", string1);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("dd/MM/yy H.mm", fastDateFormat0.getPattern());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test06() {}
//   @Test
//   public void test06()  throws Throwable  {
//       int int0 = 2;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(28, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("MMM d, yyyy h:mm:ss a", fastDateFormat0.getPattern());
//       assertNotNull(fastDateFormat0);
//       
//       int int1 = 1800;
//       int int2 = (-530);
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int1, int1, int0, int2, int2, int0);
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertFalse(int1 == int2);
//       assertFalse(int2 == int1);
//       assertFalse(int2 == int0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=1800,MONTH=1800,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-530,HOUR_OF_DAY=-530,MINUTE=-530,SECOND=2,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertNotNull(mockGregorianCalendar0);
//       
//       int int3 = 0;
//       String string0 = "P?+aWV";
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: P
//          //
//       }
//   }

  @Test
  public void test07() {}
//   @Test
//   public void test07()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("dd/MM/yy HH:mm", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertNotNull(fastDateFormat0);
//       
//       Locale locale0 = fastDateFormat0.getLocale();
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       assertEquals("en", locale0.toString());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("dd/MM/yy HH:mm", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertNotNull(locale0);
//       
//       String string0 = "4Gx^Q/KzNRYCs";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(zoneInfo0);
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: x
//          //
//       }
//   }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "\\`vX3$Q_|Qr|xo";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: v
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "mu)eN;iX~Gyp";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = ")tPNrXcl]3S";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string0 = "rco1c[Xx-;2G";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = ",qA7g;";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      String string0 = "pNz-XQSOV";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: p
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule";
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      Locale locale0 = Locale.US;
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertNotNull(locale0);
      
      String string0 = "nKA44ff{Ez61}*1*Ig";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "K\\k-1lx[Ff=E";
      Locale locale0 = null;
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: l
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "K}mj4L8";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: j
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "*26giui,(c";
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(mockGregorianCalendar0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: g
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "3,fOW1o:mzyV";
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.CANADA;
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "euk";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.US;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: e
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "c";
      Locale locale0 = Locale.GERMAN;
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de", locale0.toString());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "w+b?";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "X';K";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: X
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = null;
      String string0 = "VX^uAA<iu*_h\\";
      Locale locale0 = Locale.KOREA;
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: V
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = "+hS@UsL6,RzsQ";
      Locale locale0 = Locale.KOREA;
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string0 = "The validated collection contains an element not of type ";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = "\\Rd";
      Locale locale0 = new Locale(string0, string0, string0);
      assertEquals("\\RD", locale0.getCountry());
      assertEquals("\\rd_\\RD_\\Rd", locale0.toString());
      assertEquals("\\Rd", locale0.getVariant());
      assertEquals("\\rd", locale0.getLanguage());
      assertEquals("\\rd", locale0.getISO3Language());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: R
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = "QV?4}B";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.forLanguageTag(string0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Q
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = "94Ox.Rsbncod4|\\";
      Locale locale0 = Locale.KOREA;
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: O
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = "+)4N5&q^F";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      String string0 = ":}L5~d]no@Y!(T";
      int int0 = (-3154);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals("java.util.SimpleTimeZone[id=:}L5~d]no@Y!(T,offset=-3154,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(-3154, simpleTimeZone0.getRawOffset());
      assertEquals(":}L5~d]no@Y!(T", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: L
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      int int0 = 0;
      String string0 = "";
      int int1 = 25;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0, int0, int0, int0, int0, int0, int0, int0, int0, int1, int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=25,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=25,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", simpleTimeZone0.getID());
      assertNotNull(simpleTimeZone0);
      
      String string1 = "3{558wJ3pax;O9GV";
      assertNotSame(string1, string0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string1, (TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: J
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = "DI8mjbMoQGvBW-*cXB";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertNotNull(locale0);
      
      String string0 = "CNWfD.xx";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
      }
  }

  @Test
  public void test35()  throws Throwable  {
      String string0 = ":ZK)wB";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: B
         //
      }
  }

  @Test
  public void test36()  throws Throwable  {
      String string0 = "-A2QK@_}k5R";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
      }
  }

  @Test
  public void test37()  throws Throwable  {
      String string0 = null;
      Locale locale0 = Locale.CHINA;
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertEquals("dd/MM/yy HH:mm", fastDateFormat0.getPattern());
      assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertNotNull(fastDateFormat0);
      
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      assertTrue(fastDateFormat1.equals((Object)fastDateFormat0));
      assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
      assertEquals("dd/MM/yy HH:mm", fastDateFormat1.getPattern());
      assertEquals(14, fastDateFormat1.getMaxLengthEstimate());
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertNotNull(fastDateFormat1);
  }

  @Test
  public void test39() {}
//   @Test
//   public void test39()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0);
//       assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertNotNull(fastDateFormat0);
//       
//       String string0 = "h[_X[jHHvUe";
//       int[] intArray0 = new int[4];
//       Object object0 = null;
//       boolean boolean0 = fastDateFormat0.equals(object0);
//       assertFalse(boolean0);
//       assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       
//       intArray0[0] = int0;
//       intArray0[1] = int0;
//       intArray0[2] = int0;
//       intArray0[3] = int0;
//       String string1 = fastDateFormat0.parseToken(string0, intArray0);
//       assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       assertEquals("h", string1);
//       assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//       assertNotNull(string1);
//       
//       List list0 = fastDateFormat0.parsePattern();
//       assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(7, list0.size());
//       assertEquals(false, list0.isEmpty());
//       assertNotNull(list0);
//       
//       int int1 = 65;
//       int int2 = 0;
//       MockDate mockDate0 = new MockDate(int1, int0, int0, int0, int2, int2);
//       assertFalse(int2 == int1);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertFalse(int1 == int2);
//       assertEquals("Thu Dec 31 00:00:00 GMT 1964", mockDate0.toString());
//       assertNotNull(mockDate0);
//       
//       String string2 = fastDateFormat0.format((Date) mockDate0);
//       assertFalse(int2 == int1);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertFalse(int1 == int2);
//       assertFalse(string2.equals((Object)string0));
//       assertFalse(string2.equals((Object)string1));
//       assertEquals("Thursday, December 31, 1964", string2);
//       assertEquals("Thu Dec 31 00:00:00 GMT 1964", mockDate0.toString());
//       assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertNotSame(string2, string0);
//       assertNotSame(string2, string1);
//       assertNotNull(string2);
//       
//       Locale locale0 = Locale.CANADA_FRENCH;
//       assertEquals("", locale0.getVariant());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("fr_CA", locale0.toString());
//       assertEquals("fr", locale0.getLanguage());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("CA", locale0.getCountry());
//       assertNotNull(locale0);
//       
//       String string3 = fastDateFormat0.toString();
//       assertFalse(int0 == int1);
//       assertFalse(string3.equals((Object)string2));
//       assertFalse(string3.equals((Object)string1));
//       assertFalse(string3.equals((Object)string0));
//       assertEquals("FastDateFormat[EEEE, MMMM d, yyyy]", string3);
//       assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertNotSame(string3, string2);
//       assertNotSame(string3, string1);
//       assertNotSame(string3, string0);
//       assertNotNull(string3);
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("", locale0.getVariant());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("fr_CA", locale0.toString());
//       assertEquals("fr", locale0.getLanguage());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("CA", locale0.getCountry());
//       assertNotNull(mockGregorianCalendar0);
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("", locale0.getVariant());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("fr_CA", locale0.toString());
//       assertEquals("fr", locale0.getLanguage());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("CA", locale0.getCountry());
//       assertNotNull(zoneInfo0);
//       
//       int int3 = mockGregorianCalendar0.getWeekYear();
//       assertFalse(int3 == int1);
//       assertFalse(int3 == int0);
//       assertFalse(int3 == int2);
//       assertEquals(2014, int3);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("", locale0.getVariant());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("fr_CA", locale0.toString());
//       assertEquals("fr", locale0.getLanguage());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("CA", locale0.getCountry());
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(int0, (TimeZone) zoneInfo0, locale0);
//       assertFalse(int0 == int1);
//       assertFalse(int0 == int3);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("", locale0.getVariant());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("fr_CA", locale0.toString());
//       assertEquals("fr", locale0.getLanguage());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals(true, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals(13, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals("H' h 'mm z", fastDateFormat1.getPattern());
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertNotNull(fastDateFormat1);
//       
//       fastDateFormat1.init();
//       assertFalse(int0 == int1);
//       assertFalse(int0 == int3);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("", locale0.getVariant());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("fr_CA", locale0.toString());
//       assertEquals("fr", locale0.getLanguage());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals(true, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals(13, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals("H' h 'mm z", fastDateFormat1.getPattern());
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//   }

  @Test
  public void test40()  throws Throwable  {
      int int0 = 465;
      String string0 = "}kW51";
      int int1 = 1;
      int int2 = 3212;
      int int3 = 0;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int1, int1, int2, int0, int3);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=1,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=3212,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=465,HOUR_OF_DAY=465,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(mockGregorianCalendar0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=1,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=3212,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=465,HOUR_OF_DAY=465,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=1,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=3212,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=465,HOUR_OF_DAY=465,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(11, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("}kW51", fastDateFormat0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(fastDateFormat0);
      
      String string1 = fastDateFormat0.format((long) int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(string1.equals((Object)string0));
      assertEquals("}24151", string1);
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=1,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=3212,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=465,HOUR_OF_DAY=465,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(11, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("}kW51", fastDateFormat0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      
      Locale locale1 = Locale.FRENCH;
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      String string2 = locale1.getDisplayCountry();
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", string2);
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(locale1, locale0);
      assertNotNull(string2);
      
      Locale locale2 = (Locale)locale1.clone();
      assertFalse(locale2.equals((Object)locale0));
      assertTrue(locale2.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(locale1.equals((Object)locale2));
      assertEquals("", locale2.getISO3Country());
      assertEquals("fr", locale2.toString());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getCountry());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotNull(locale2);
      
      String string3 = "C\\";
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      
      String string4 = "wrHa}m)k";
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      
      ParsePosition parsePosition0 = new ParsePosition(int0);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(-1, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=465,errorIndex=-1]", parsePosition0.toString());
      assertEquals(465, parsePosition0.getIndex());
      assertNotNull(parsePosition0);
      
      int int4 = 186;
      parsePosition0.setIndex(int4);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int0 == int4);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals("java.text.ParsePosition[index=186,errorIndex=-1]", parsePosition0.toString());
      assertEquals(186, parsePosition0.getIndex());
      assertEquals(-1, parsePosition0.getErrorIndex());
      
      Object object0 = fastDateFormat0.parseObject(string4, parsePosition0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int4);
      assertFalse(int2 == int1);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(int3 == int4);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int0 == int4);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(int1 == int3);
      assertFalse(int1 == int4);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertEquals(0, parsePosition0.getErrorIndex());
      assertEquals(0, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=0]", parsePosition0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=1,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=3212,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=465,HOUR_OF_DAY=465,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(11, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("}kW51", fastDateFormat0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNull(object0);
      
      ZoneInfo zoneInfo1 = (ZoneInfo)TimeZone.getDefault();
      assertTrue(zoneInfo1.equals((Object)zoneInfo0));
      assertEquals("GMT", zoneInfo1.getID());
      assertNotSame(zoneInfo1, zoneInfo0);
      assertNotNull(zoneInfo1);
      
      // Undeclared exception!
      try {
        String string5 = fastDateFormat0.format((Object) string4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.lang.String
         //
      }
  }

  @Test
  public void test41() {}
//   @Test
//   public void test41()  throws Throwable  {
//       String string0 = "^FSY#/93V\"\"";
//       String string1 = "$HdZ*\\*m>0";
//       assertNotSame(string1, string0);
//       
//       SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat();
//       assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toPattern());
//       assertEquals(true, simpleDateFormat0.isLenient());
//       assertEquals("jj/MM/aa HH:mm", simpleDateFormat0.toLocalizedPattern());
//       assertNotNull(simpleDateFormat0);
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)simpleDateFormat0.getTimeZone();
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toPattern());
//       assertEquals(true, simpleDateFormat0.isLenient());
//       assertEquals("jj/MM/aa HH:mm", simpleDateFormat0.toLocalizedPattern());
//       assertNotNull(zoneInfo0);
//       
//       Locale locale0 = Locale.FRENCH;
//       assertEquals("", locale0.getVariant());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("", locale0.getCountry());
//       assertEquals("fr", locale0.getLanguage());
//       assertEquals("fr", locale0.toString());
//       assertEquals("", locale0.getISO3Country());
//       assertNotNull(locale0);
//       
//       String string2 = zoneInfo0.getID();
//       assertFalse(string2.equals((Object)string0));
//       assertFalse(string2.equals((Object)string1));
//       assertEquals("GMT", string2);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toPattern());
//       assertEquals(true, simpleDateFormat0.isLenient());
//       assertEquals("jj/MM/aa HH:mm", simpleDateFormat0.toLocalizedPattern());
//       assertNotSame(string2, string0);
//       assertNotSame(string2, string1);
//       assertNotNull(string2);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string1, (TimeZone) zoneInfo0, locale0);
//       assertFalse(string1.equals((Object)string2));
//       assertFalse(string1.equals((Object)string0));
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("$HdZ*\\*m>0", fastDateFormat0.getPattern());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toPattern());
//       assertEquals(true, simpleDateFormat0.isLenient());
//       assertEquals("jj/MM/aa HH:mm", simpleDateFormat0.toLocalizedPattern());
//       assertEquals("", locale0.getVariant());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("", locale0.getCountry());
//       assertEquals("fr", locale0.getLanguage());
//       assertEquals("fr", locale0.toString());
//       assertEquals("", locale0.getISO3Country());
//       assertNotSame(string1, string2);
//       assertNotSame(string1, string0);
//       assertNotNull(fastDateFormat0);
//       
//       int int0 = (-2375);
//       int int1 = 12;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int1);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-2375,MONTH=-2375,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=12,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertNotNull(mockGregorianCalendar0);
//       
//       String string3 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertFalse(string1.equals((Object)string2));
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string1.equals((Object)string3));
//       assertFalse(string3.equals((Object)string1));
//       assertFalse(string3.equals((Object)string2));
//       assertFalse(string3.equals((Object)string0));
//       assertEquals("$012+0000*\\*0>0", string3);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-2375,MONTH=-2375,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=12,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("$HdZ*\\*m>0", fastDateFormat0.getPattern());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toPattern());
//       assertEquals(true, simpleDateFormat0.isLenient());
//       assertEquals("jj/MM/aa HH:mm", simpleDateFormat0.toLocalizedPattern());
//       assertEquals("", locale0.getVariant());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("", locale0.getCountry());
//       assertEquals("fr", locale0.getLanguage());
//       assertEquals("fr", locale0.toString());
//       assertEquals("", locale0.getISO3Country());
//       assertNotSame(string1, string2);
//       assertNotSame(string1, string0);
//       assertNotSame(string1, string3);
//       assertNotSame(string3, string1);
//       assertNotSame(string3, string2);
//       assertNotSame(string3, string0);
//       assertNotNull(string3);
//       
//       TimeZone timeZone0 = null;
//       Locale locale1 = Locale.UK;
//       assertFalse(locale1.equals((Object)locale0));
//       assertEquals("", locale1.getVariant());
//       assertEquals("en_GB", locale1.toString());
//       assertEquals("GB", locale1.getCountry());
//       assertEquals("GBR", locale1.getISO3Country());
//       assertEquals("en", locale1.getLanguage());
//       assertEquals("eng", locale1.getISO3Language());
//       assertNotSame(locale1, locale0);
//       assertNotNull(locale1);
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0, timeZone0, locale1);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: Y
//          //
//       }
//   }

  @Test
  public void test42()  throws Throwable  {
      int int0 = 1;
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, locale0);
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5'", fastDateFormat0.getPattern());
      assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(fastDateFormat0);
  }

  @Test
  public void test43() {}
//   @Test
//   public void test43()  throws Throwable  {
//       int int0 = (-625);
//       int int1 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int1);
//       assertFalse(int1 == int0);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
//       assertNotNull(fastDateFormat0);
//       
//       String string0 = "";
//       ParsePosition parsePosition0 = new ParsePosition(int0);
//       assertFalse(int0 == int1);
//       assertEquals(-1, parsePosition0.getErrorIndex());
//       assertEquals("java.text.ParsePosition[index=-625,errorIndex=-1]", parsePosition0.toString());
//       assertEquals(-625, parsePosition0.getIndex());
//       assertNotNull(parsePosition0);
//       
//       Object object0 = fastDateFormat0.parseObject(string0, parsePosition0);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertEquals("java.text.ParsePosition[index=0,errorIndex=0]", parsePosition0.toString());
//       assertEquals(0, parsePosition0.getErrorIndex());
//       assertEquals(0, parsePosition0.getIndex());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
//       assertNull(object0);
//   }

  @Test
  public void test44()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.PRC;
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, locale0);
      assertEquals("ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
      assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(fastDateFormat0);
      
      String string0 = fastDateFormat0.getPattern();
      assertEquals("ahh'\u65F6'mm'\u5206'ss'\u79D2' z", string0);
      assertEquals("ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
      assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(string0);
  }

  @Test
  public void test45()  throws Throwable  {
      int int0 = (-625);
      String string0 = "";
      Locale locale0 = new Locale(string0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -625
         //
      }
  }

  @Test
  public void test46()  throws Throwable  {
      String string0 = "d~?$SK:K'&S?Gi0,";
      int int0 = (-50);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("d~?$SK:K'&S?Gi0,", simpleTimeZone0.getID());
      assertEquals(-50, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=d~?$SK:K'&S?Gi0,,offset=-50,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.US;
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("US", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) simpleTimeZone0, locale0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("d~?$SK:K'&S?Gi0,", simpleTimeZone0.getID());
      assertEquals(-50, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=d~?$SK:K'&S?Gi0,,offset=-50,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("US", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals(28, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("d~?$SK:K'&S?Gi0,", fastDateFormat0.getPattern());
      assertNotNull(fastDateFormat0);
      
      String string1 = fastDateFormat0.format((long) int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("31~?$90011:11&S?Gi0,", string1);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("d~?$SK:K'&S?Gi0,", simpleTimeZone0.getID());
      assertEquals(-50, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=d~?$SK:K'&S?Gi0,,offset=-50,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("US", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals(28, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("d~?$SK:K'&S?Gi0,", fastDateFormat0.getPattern());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string1, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: i
         //
      }
  }

  @Test
  public void test47() {}
//   @Test
//   public void test47()  throws Throwable  {
//       int int0 = 1;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0);
//       assertEquals(39, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
//       assertNotNull(fastDateFormat0);
//       
//       int int1 = fastDateFormat0.getMaxLengthEstimate();
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertEquals(39, int1);
//       assertEquals(39, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
//   }

  @Test
  public void test48() {}
//   @Test
//   public void test48()  throws Throwable  {
//       int int0 = 0;
//       String string0 = "";
//       int int1 = 210;
//       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0, int0, int0, int0, int0, int0, int1, int0, int1, int1, int1, int1);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertEquals("", simpleTimeZone0.getID());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=210,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=210,endDay=0,endDayOfWeek=210,endTime=210,endTimeMode=210]", simpleTimeZone0.toString());
//       assertNotNull(simpleTimeZone0);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, (TimeZone) simpleTimeZone0);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
//       assertEquals("", simpleTimeZone0.getID());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=210,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=210,endDay=0,endDayOfWeek=210,endTime=210,endTimeMode=210]", simpleTimeZone0.toString());
//       assertNotNull(fastDateFormat0);
//   }

  @Test
  public void test49() {}
//   @Test
//   public void test49()  throws Throwable  {
//       int int0 = 0;
//       Locale locale0 = null;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, locale0);
//       assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
//       assertNotNull(fastDateFormat0);
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)fastDateFormat0.getTimeZone();
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
//       assertNotNull(zoneInfo0);
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(int0, (TimeZone) zoneInfo0);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
//       assertEquals(true, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals(17, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals("h:mm:ss a z", fastDateFormat1.getPattern());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertNotSame(fastDateFormat0, fastDateFormat1);
//       assertNotNull(fastDateFormat1);
//   }

  @Test
  public void test50() {}
//   @Test
//   public void test50()  throws Throwable  {
//       int int0 = 0;
//       Locale locale0 = null;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, locale0);
//       assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertNotNull(fastDateFormat0);
//       
//       boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
//       assertFalse(boolean0);
//       assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//   }

  @Test
  public void test51() {}
//   @Test
//   public void test51()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0);
//       assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertNotNull(fastDateFormat0);
//       
//       Long long0 = new Long((long) int0);
//       assertEquals(0L, (long)long0);
//       
//       String string0 = fastDateFormat0.format((Object) long0);
//       assertEquals("12:00:00 AM GMT", string0);
//       assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertNotNull(string0);
//   }

  @Test
  public void test52()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("dd/MM/yy HH:mm", fastDateFormat0.getPattern());
      assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
      assertNotNull(fastDateFormat0);
      
      int int0 = 0;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertNotNull(mockGregorianCalendar0);
      
      AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator((Object) mockGregorianCalendar0);
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(0, attributedCharacterIterator0.getBeginIndex());
      assertEquals(14, attributedCharacterIterator0.getRunLimit());
      assertEquals(14, attributedCharacterIterator0.getEndIndex());
      assertEquals(0, attributedCharacterIterator0.getIndex());
      assertEquals(0, attributedCharacterIterator0.getRunStart());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("dd/MM/yy HH:mm", fastDateFormat0.getPattern());
      assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
      assertNotNull(attributedCharacterIterator0);
  }
}
