/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:03:04 GMT 2014
 */

package org.apache.commons.lang.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.text.AttributedCharacterIterator;
import java.text.ParsePosition;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;


public class FastDateFormatEvoSuite_branch_Test  {

  @Test
  public void test00() {}
//   @Test
//   public void test00()  throws Throwable  {
//       int int0 = 0;
//       String string0 = "sk^4)";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(11, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("sk^4)", fastDateFormat0.getPattern());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       Locale locale0 = Locale.GERMAN;
//       assertNotNull(locale0);
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getCountry());
//       assertEquals("de", locale0.getLanguage());
//       assertEquals("de", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("deu", locale0.getISO3Language());
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(int0, (TimeZone) zoneInfo0, locale0);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertNotNull(fastDateFormat1);
//       assertEquals("HH:mm' Uhr 'z", fastDateFormat1.getPattern());
//       assertEquals(true, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals(13, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getCountry());
//       assertEquals("de", locale0.getLanguage());
//       assertEquals("de", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("deu", locale0.getISO3Language());
//       
//       FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
//       assertNotSame(fastDateFormat0, fastDateFormat1);
//       assertNotSame(fastDateFormat0, fastDateFormat2);
//       assertNotSame(fastDateFormat2, fastDateFormat1);
//       assertNotSame(fastDateFormat2, fastDateFormat0);
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
//       assertTrue(fastDateFormat0.equals((Object)fastDateFormat2));
//       assertTrue(fastDateFormat2.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat1));
//       assertNotNull(fastDateFormat2);
//       assertEquals(11, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("sk^4)", fastDateFormat0.getPattern());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(11, fastDateFormat2.getMaxLengthEstimate());
//       assertEquals(true, fastDateFormat2.getTimeZoneOverridesCalendar());
//       assertEquals("sk^4)", fastDateFormat2.getPattern());
//       
//       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
//       assertNotNull(simpleTimeZone0);
//       assertEquals("java.util.SimpleTimeZone[id=sk^4),offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("sk^4)", simpleTimeZone0.getID());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       
//       FastDateFormat fastDateFormat3 = FastDateFormat.getTimeInstance(int0, (TimeZone) simpleTimeZone0);
//       assertNotSame(fastDateFormat3, fastDateFormat2);
//       assertNotSame(fastDateFormat3, fastDateFormat0);
//       assertNotSame(fastDateFormat3, fastDateFormat1);
//       assertFalse(fastDateFormat3.equals((Object)fastDateFormat2));
//       assertFalse(fastDateFormat3.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat3.equals((Object)fastDateFormat1));
//       assertNotNull(fastDateFormat3);
//       assertEquals("java.util.SimpleTimeZone[id=sk^4),offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("sk^4)", simpleTimeZone0.getID());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals("h:mm:ss a z", fastDateFormat3.getPattern());
//       assertEquals(true, fastDateFormat3.getTimeZoneOverridesCalendar());
//       assertEquals(23, fastDateFormat3.getMaxLengthEstimate());
//       
//       int int1 = (-1134);
//       int int2 = (-2653);
//       int int3 = 15;
//       int int4 = 0;
//       int int5 = 0;
//       int int6 = 1601;
//       int int7 = 39;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int4, int2, int5, int6, int7);
//       assertFalse(int2 == int6);
//       assertFalse(int2 == int0);
//       assertFalse(int2 == int7);
//       assertFalse(int2 == int5);
//       assertFalse(int2 == int4);
//       assertFalse(int2 == int1);
//       assertFalse(int2 == int3);
//       assertFalse(int7 == int3);
//       assertFalse(int7 == int4);
//       assertFalse(int7 == int6);
//       assertFalse(int7 == int2);
//       assertFalse(int7 == int0);
//       assertFalse(int7 == int1);
//       assertFalse(int7 == int5);
//       assertFalse(int6 == int2);
//       assertFalse(int6 == int5);
//       assertFalse(int6 == int4);
//       assertFalse(int6 == int7);
//       assertFalse(int6 == int1);
//       assertFalse(int6 == int0);
//       assertFalse(int6 == int3);
//       assertFalse(int4 == int6);
//       assertFalse(int4 == int3);
//       assertFalse(int4 == int2);
//       assertFalse(int4 == int1);
//       assertFalse(int4 == int7);
//       assertFalse(int5 == int3);
//       assertFalse(int5 == int6);
//       assertFalse(int5 == int2);
//       assertFalse(int5 == int7);
//       assertFalse(int5 == int1);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=-2653,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1601,HOUR_OF_DAY=1601,MINUTE=39,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       
//       AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator((Object) mockGregorianCalendar0);
//       assertNotSame(fastDateFormat0, fastDateFormat3);
//       assertNotSame(fastDateFormat0, fastDateFormat1);
//       assertNotSame(fastDateFormat0, fastDateFormat2);
//       assertFalse(int2 == int6);
//       assertFalse(int2 == int0);
//       assertFalse(int2 == int7);
//       assertFalse(int2 == int5);
//       assertFalse(int2 == int4);
//       assertFalse(int2 == int1);
//       assertFalse(int2 == int3);
//       assertFalse(int7 == int3);
//       assertFalse(int7 == int4);
//       assertFalse(int7 == int6);
//       assertFalse(int7 == int2);
//       assertFalse(int7 == int0);
//       assertFalse(int7 == int1);
//       assertFalse(int7 == int5);
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat3));
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
//       assertTrue(fastDateFormat0.equals((Object)fastDateFormat2));
//       assertFalse(int6 == int2);
//       assertFalse(int6 == int5);
//       assertFalse(int6 == int4);
//       assertFalse(int6 == int7);
//       assertFalse(int6 == int1);
//       assertFalse(int6 == int0);
//       assertFalse(int6 == int3);
//       assertFalse(int4 == int6);
//       assertFalse(int4 == int3);
//       assertFalse(int4 == int2);
//       assertFalse(int4 == int1);
//       assertFalse(int4 == int7);
//       assertFalse(int5 == int3);
//       assertFalse(int5 == int6);
//       assertFalse(int5 == int2);
//       assertFalse(int5 == int7);
//       assertFalse(int5 == int1);
//       assertNotNull(attributedCharacterIterator0);
//       assertEquals(11, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("sk^4)", fastDateFormat0.getPattern());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=-2653,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1601,HOUR_OF_DAY=1601,MINUTE=39,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(6, attributedCharacterIterator0.getEndIndex());
//       assertEquals(6, attributedCharacterIterator0.getRunLimit());
//       assertEquals(0, attributedCharacterIterator0.getBeginIndex());
//       assertEquals(0, attributedCharacterIterator0.getIndex());
//       assertEquals(0, attributedCharacterIterator0.getRunStart());
//       
//       long long0 = 0L;
//       String string1 = fastDateFormat0.format(long0);
//       assertNotSame(string1, string0);
//       assertNotSame(fastDateFormat0, fastDateFormat3);
//       assertNotSame(fastDateFormat0, fastDateFormat1);
//       assertNotSame(fastDateFormat0, fastDateFormat2);
//       assertNotSame(string0, string1);
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat3));
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
//       assertTrue(fastDateFormat0.equals((Object)fastDateFormat2));
//       assertFalse(string0.equals((Object)string1));
//       assertNotNull(string1);
//       assertEquals(11, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("sk^4)", fastDateFormat0.getPattern());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("024^4)", string1);
//       
//       boolean boolean0 = simpleTimeZone0.equals((Object) string0);
//       assertNotSame(string0, string1);
//       assertFalse(int0 == int6);
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int1);
//       assertFalse(int0 == int3);
//       assertFalse(int0 == int7);
//       assertFalse(string0.equals((Object)string1));
//       assertEquals("java.util.SimpleTimeZone[id=sk^4),offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("sk^4)", simpleTimeZone0.getID());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertFalse(boolean0);
//       
//       int int8 = 8;
//       Locale locale1 = Locale.KOREA;
//       assertNotSame(locale1, locale0);
//       assertFalse(locale1.equals((Object)locale0));
//       assertNotNull(locale1);
//       assertEquals("kor", locale1.getISO3Language());
//       assertEquals("KR", locale1.getCountry());
//       assertEquals("", locale1.getVariant());
//       assertEquals("KOR", locale1.getISO3Country());
//       assertEquals("ko", locale1.getLanguage());
//       assertEquals("ko_KR", locale1.toString());
//       
//       FastDateFormat fastDateFormat4 = FastDateFormat.getInstance(string0, (TimeZone) simpleTimeZone0, locale1);
//       assertNotSame(locale1, locale0);
//       assertNotSame(fastDateFormat4, fastDateFormat0);
//       assertNotSame(fastDateFormat4, fastDateFormat1);
//       assertNotSame(fastDateFormat4, fastDateFormat2);
//       assertNotSame(fastDateFormat4, fastDateFormat3);
//       assertNotSame(string0, string1);
//       assertFalse(locale1.equals((Object)locale0));
//       assertFalse(int0 == int8);
//       assertFalse(int0 == int6);
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int1);
//       assertFalse(int0 == int3);
//       assertFalse(int0 == int7);
//       assertFalse(fastDateFormat4.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat4.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat4.equals((Object)fastDateFormat2));
//       assertFalse(fastDateFormat4.equals((Object)fastDateFormat3));
//       assertFalse(string0.equals((Object)string1));
//       assertNotNull(fastDateFormat4);
//       assertEquals("kor", locale1.getISO3Language());
//       assertEquals("KR", locale1.getCountry());
//       assertEquals("", locale1.getVariant());
//       assertEquals("KOR", locale1.getISO3Country());
//       assertEquals("ko", locale1.getLanguage());
//       assertEquals("ko_KR", locale1.toString());
//       assertEquals("java.util.SimpleTimeZone[id=sk^4),offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("sk^4)", simpleTimeZone0.getID());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals(true, fastDateFormat4.getTimeZoneOverridesCalendar());
//       assertEquals(11, fastDateFormat4.getMaxLengthEstimate());
//       assertEquals("sk^4)", fastDateFormat4.getPattern());
//       
//       MockDate mockDate0 = new MockDate(int1, int2, int3, int4, int8, int3);
//       assertFalse(int2 == int6);
//       assertFalse(int2 == int0);
//       assertFalse(int2 == int7);
//       assertFalse(int2 == int5);
//       assertFalse(int2 == int4);
//       assertFalse(int2 == int1);
//       assertFalse(int2 == int8);
//       assertFalse(int2 == int3);
//       assertFalse(int3 == int6);
//       assertFalse(int3 == int1);
//       assertFalse(int3 == int2);
//       assertFalse(int3 == int7);
//       assertFalse(int3 == int5);
//       assertFalse(int3 == int0);
//       assertFalse(int3 == int8);
//       assertFalse(int3 == int4);
//       assertFalse(int1 == int3);
//       assertFalse(int1 == int2);
//       assertFalse(int1 == int8);
//       assertFalse(int1 == int7);
//       assertFalse(int1 == int4);
//       assertFalse(int1 == int0);
//       assertFalse(int1 == int5);
//       assertFalse(int1 == int6);
//       assertFalse(int4 == int6);
//       assertFalse(int4 == int3);
//       assertFalse(int4 == int2);
//       assertFalse(int4 == int1);
//       assertFalse(int4 == int8);
//       assertFalse(int4 == int7);
//       assertFalse(int8 == int0);
//       assertFalse(int8 == int3);
//       assertFalse(int8 == int7);
//       assertFalse(int8 == int2);
//       assertFalse(int8 == int6);
//       assertFalse(int8 == int5);
//       assertFalse(int8 == int4);
//       assertFalse(int8 == int1);
//       assertNotNull(mockDate0);
//       assertEquals("Thu Dec 15 00:08:15 GMT 544", mockDate0.toString());
//       
//       String string2 = fastDateFormat4.format((Date) mockDate0);
//       assertNotSame(locale1, locale0);
//       assertNotSame(string2, string0);
//       assertNotSame(string2, string1);
//       assertNotSame(fastDateFormat4, fastDateFormat0);
//       assertNotSame(fastDateFormat4, fastDateFormat1);
//       assertNotSame(fastDateFormat4, fastDateFormat2);
//       assertNotSame(fastDateFormat4, fastDateFormat3);
//       assertNotSame(string0, string1);
//       assertNotSame(string0, string2);
//       assertFalse(int2 == int6);
//       assertFalse(int2 == int0);
//       assertFalse(int2 == int7);
//       assertFalse(int2 == int5);
//       assertFalse(int2 == int4);
//       assertFalse(int2 == int1);
//       assertFalse(int2 == int8);
//       assertFalse(int2 == int3);
//       assertFalse(locale1.equals((Object)locale0));
//       assertFalse(int3 == int6);
//       assertFalse(int3 == int1);
//       assertFalse(int3 == int2);
//       assertFalse(int3 == int7);
//       assertFalse(int3 == int5);
//       assertFalse(int3 == int0);
//       assertFalse(int3 == int8);
//       assertFalse(int3 == int4);
//       assertFalse(int1 == int3);
//       assertFalse(int1 == int2);
//       assertFalse(int1 == int8);
//       assertFalse(int1 == int7);
//       assertFalse(int1 == int4);
//       assertFalse(int1 == int0);
//       assertFalse(int1 == int5);
//       assertFalse(int1 == int6);
//       assertFalse(int0 == int8);
//       assertFalse(int0 == int6);
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int1);
//       assertFalse(int0 == int3);
//       assertFalse(int0 == int7);
//       assertFalse(string2.equals((Object)string0));
//       assertFalse(string2.equals((Object)string1));
//       assertFalse(fastDateFormat4.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat4.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat4.equals((Object)fastDateFormat2));
//       assertFalse(fastDateFormat4.equals((Object)fastDateFormat3));
//       assertFalse(int4 == int6);
//       assertFalse(int4 == int3);
//       assertFalse(int4 == int2);
//       assertFalse(int4 == int1);
//       assertFalse(int4 == int8);
//       assertFalse(int4 == int7);
//       assertFalse(int8 == int0);
//       assertFalse(int8 == int3);
//       assertFalse(int8 == int7);
//       assertFalse(int8 == int2);
//       assertFalse(int8 == int6);
//       assertFalse(int8 == int5);
//       assertFalse(int8 == int4);
//       assertFalse(int8 == int1);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string0.equals((Object)string2));
//       assertNotNull(string2);
//       assertEquals("kor", locale1.getISO3Language());
//       assertEquals("KR", locale1.getCountry());
//       assertEquals("", locale1.getVariant());
//       assertEquals("KOR", locale1.getISO3Country());
//       assertEquals("ko", locale1.getLanguage());
//       assertEquals("ko_KR", locale1.toString());
//       assertEquals("java.util.SimpleTimeZone[id=sk^4),offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("sk^4)", simpleTimeZone0.getID());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals(true, fastDateFormat4.getTimeZoneOverridesCalendar());
//       assertEquals(11, fastDateFormat4.getMaxLengthEstimate());
//       assertEquals("sk^4)", fastDateFormat4.getPattern());
//       assertEquals("Thu Dec 15 00:08:15 GMT 544", mockDate0.toString());
//       assertEquals("1524^4)", string2);
//   }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 0;
      String string0 = "\\ $@m*=}Z@9#";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) simpleTimeZone0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0, int0);
      assertNotNull(mockDate0);
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      
      String string1 = fastDateFormat0.format((Date) mockDate0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "kSk.}'OPN8%u";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
      assertNotNull(fastDateFormat0);
      assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("kSk.}'OPN8%u", fastDateFormat0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) zoneInfo0, locale0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      
      String string1 = fastDateFormat0.format((Object) mockGregorianCalendar0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("kSk.}'OPN8%u", fastDateFormat0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("2032020.}OPN8%u", string1);
  }

  @Test
  public void test03() {}
//   @Test
//   public void test03()  throws Throwable  {
//       int int0 = 0;
//       Locale locale0 = null;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, locale0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
//       
//       Integer integer0 = new Integer(int0);
//       assertTrue(integer0.equals((Object)int0));
//       assertEquals(0, (int)integer0);
//       
//       boolean boolean0 = fastDateFormat0.equals((Object) integer0);
//       assertTrue(integer0.equals((Object)int0));
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
//       assertFalse(boolean0);
//   }

  @Test
  public void test04() {}
//   @Test
//   public void test04()  throws Throwable  {
//       int int0 = 3;
//       String string0 = ":";
//       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
//       assertNotNull(simpleTimeZone0);
//       assertEquals(3, simpleTimeZone0.getRawOffset());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals("java.util.SimpleTimeZone[id=:,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(":", simpleTimeZone0.getID());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, (TimeZone) simpleTimeZone0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
//       assertEquals(3, simpleTimeZone0.getRawOffset());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals("java.util.SimpleTimeZone[id=:,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(":", simpleTimeZone0.getID());
//       
//       String string1 = null;
//       // Undeclared exception!
//       try {
//         AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator((Object) string1);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Unknown class: <null>
//          //
//       }
//   }

  @Test
  public void test05() {}
//   @Test
//   public void test05()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat0);
//       assertEquals("yyyy/M/d a h:mm", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       
//       int int0 = (-180);
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-180,MONTH=-180,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-180,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       String string0 = fastDateFormat0.format((Object) mockGregorianCalendar0);
//       assertNotNull(string0);
//       assertEquals("yyyy/M/d a h:mm", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-68336697600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=197,MONTH=6,WEEK_OF_YEAR=28,WEEK_OF_MONTH=2,DAY_OF_MONTH=4,DAY_OF_YEAR=186,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("0197/7/4 AM 12:00", string0);
//   }

  @Test
  public void test06() {}
//   @Test
//   public void test06()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat0);
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("yyyy/M/d a h:mm", fastDateFormat0.getPattern());
//       
//       int int0 = (-180);
//       MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
//       assertNotNull(mockDate0);
//       assertEquals("Thu Jun 26 09:00:00 GMT 1704", mockDate0.toString());
//       
//       AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator((Object) mockDate0);
//       assertNotNull(attributedCharacterIterator0);
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("yyyy/M/d a h:mm", fastDateFormat0.getPattern());
//       assertEquals(17, attributedCharacterIterator0.getEndIndex());
//       assertEquals(0, attributedCharacterIterator0.getBeginIndex());
//       assertEquals(17, attributedCharacterIterator0.getRunLimit());
//       assertEquals(0, attributedCharacterIterator0.getIndex());
//       assertEquals(0, attributedCharacterIterator0.getRunStart());
//       assertEquals("Thu Jun 26 09:00:00 GMT 1704", mockDate0.toString());
//   }

  @Test
  public void test07() {}
//   @Test
//   public void test07()  throws Throwable  {
//       int int0 = 0;
//       Locale locale0 = Locale.JAPANESE;
//       assertNotNull(locale0);
//       assertEquals("ja", locale0.getLanguage());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("jpn", locale0.getISO3Language());
//       assertEquals("ja", locale0.toString());
//       assertEquals("", locale0.getCountry());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, locale0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("ja", locale0.getLanguage());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("jpn", locale0.getISO3Language());
//       assertEquals("ja", locale0.toString());
//       assertEquals("", locale0.getCountry());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5'", fastDateFormat0.getPattern());
//       assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
//       
//       int int1 = 21;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int1, int0, int1, int0, int0);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=21,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=21,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       
//       int int2 = (-1);
//       FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(int0, int0);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int1);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertNotNull(fastDateFormat1);
//       assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals(50, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat1.getPattern());
//       
//       boolean boolean0 = mockGregorianCalendar0.after((Object) fastDateFormat1);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertFalse(int1 == int2);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int1);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=21,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=21,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals(50, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat1.getPattern());
//       assertFalse(boolean0);
//       
//       Locale locale1 = Locale.GERMANY;
//       assertNotSame(locale1, locale0);
//       assertFalse(locale1.equals((Object)locale0));
//       assertNotNull(locale1);
//       assertEquals("deu", locale1.getISO3Language());
//       assertEquals("de", locale1.getLanguage());
//       assertEquals("DEU", locale1.getISO3Country());
//       assertEquals("DE", locale1.getCountry());
//       assertEquals("", locale1.getVariant());
//       assertEquals("de_DE", locale1.toString());
//       
//       int int3 = fastDateFormat1.getMaxLengthEstimate();
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int3);
//       assertFalse(int0 == int1);
//       assertFalse(int3 == int1);
//       assertFalse(int3 == int0);
//       assertFalse(int3 == int2);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals(50, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat1.getPattern());
//       assertEquals(50, int3);
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertFalse(int1 == int3);
//       assertFalse(int1 == int2);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int3);
//       assertFalse(int0 == int1);
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=21,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=21,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       
//       int int4 = 0;
//       assertFalse(int4 == int3);
//       
//       Locale locale2 = Locale.CANADA;
//       assertNotSame(locale2, locale1);
//       assertNotSame(locale2, locale0);
//       assertFalse(locale2.equals((Object)locale1));
//       assertFalse(locale2.equals((Object)locale0));
//       assertNotNull(locale2);
//       assertEquals("en", locale2.getLanguage());
//       assertEquals("eng", locale2.getISO3Language());
//       assertEquals("CAN", locale2.getISO3Country());
//       assertEquals("", locale2.getVariant());
//       assertEquals("CA", locale2.getCountry());
//       assertEquals("en_CA", locale2.toString());
//       
//       FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(int4, (TimeZone) zoneInfo0, locale2);
//       assertNotSame(fastDateFormat2, fastDateFormat0);
//       assertNotSame(fastDateFormat2, fastDateFormat1);
//       assertNotSame(locale2, locale1);
//       assertNotSame(locale2, locale0);
//       assertFalse(int4 == int2);
//       assertFalse(int4 == int3);
//       assertFalse(int4 == int1);
//       assertFalse(int1 == int4);
//       assertFalse(int1 == int3);
//       assertFalse(int1 == int2);
//       assertFalse(int1 == int0);
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat1));
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int3);
//       assertFalse(int0 == int1);
//       assertFalse(locale2.equals((Object)locale1));
//       assertFalse(locale2.equals((Object)locale0));
//       assertNotNull(fastDateFormat2);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(true, fastDateFormat2.getTimeZoneOverridesCalendar());
//       assertEquals("h:mm:ss 'o''clock' a z", fastDateFormat2.getPattern());
//       assertEquals(25, fastDateFormat2.getMaxLengthEstimate());
//       assertEquals("en", locale2.getLanguage());
//       assertEquals("eng", locale2.getISO3Language());
//       assertEquals("CAN", locale2.getISO3Country());
//       assertEquals("", locale2.getVariant());
//       assertEquals("CA", locale2.getCountry());
//       assertEquals("en_CA", locale2.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=21,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=21,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       
//       String string0 = fastDateFormat2.format((Calendar) mockGregorianCalendar0);
//       assertNotSame(fastDateFormat2, fastDateFormat0);
//       assertNotSame(fastDateFormat2, fastDateFormat1);
//       assertNotSame(locale2, locale1);
//       assertNotSame(locale2, locale0);
//       assertFalse(int4 == int2);
//       assertFalse(int4 == int3);
//       assertFalse(int4 == int1);
//       assertFalse(int1 == int4);
//       assertFalse(int1 == int3);
//       assertFalse(int1 == int2);
//       assertFalse(int1 == int0);
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat1));
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int3);
//       assertFalse(int0 == int1);
//       assertFalse(locale2.equals((Object)locale1));
//       assertFalse(locale2.equals((Object)locale0));
//       assertNotNull(string0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(true, fastDateFormat2.getTimeZoneOverridesCalendar());
//       assertEquals("h:mm:ss 'o''clock' a z", fastDateFormat2.getPattern());
//       assertEquals(25, fastDateFormat2.getMaxLengthEstimate());
//       assertEquals("en", locale2.getLanguage());
//       assertEquals("eng", locale2.getISO3Language());
//       assertEquals("CAN", locale2.getISO3Country());
//       assertEquals("", locale2.getVariant());
//       assertEquals("CA", locale2.getCountry());
//       assertEquals("en_CA", locale2.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=21,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=21,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals("12:00:00 o'clock AM GMT", string0);
//       
//       int int5 = 850;
//       assertFalse(int5 == int3);
//       
//       String string1 = "O=-/";
//       assertNotSame(string1, string0);
//       assertFalse(string1.equals((Object)string0));
//       
//       int int6 = 2270;
//       assertFalse(int6 == int3);
//       
//       int int7 = (-1942);
//       assertFalse(int7 == int3);
//       
//       int int8 = (-6198);
//       assertFalse(int8 == int3);
//   }

  @Test
  public void test08() {}
//   @Test
//   public void test08()  throws Throwable  {
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       int int0 = (-4029);
//       String string0 = "=czi;";
//       int int1 = 0;
//       Locale locale0 = Locale.CHINESE;
//       assertNotNull(locale0);
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("zh", locale0.toString());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getCountry());
//       assertEquals("zh", locale0.getLanguage());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int1, locale0);
//       assertFalse(int1 == int0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("zh", locale0.toString());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getCountry());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(int1, (TimeZone) zoneInfo0);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertFalse(int1 == int0);
//       assertNotNull(fastDateFormat1);
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat1.getPattern());
//       assertEquals(31, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals(true, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       boolean boolean0 = fastDateFormat0.equals((Object) fastDateFormat1);
//       assertNotSame(fastDateFormat0, fastDateFormat1);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertFalse(int1 == int0);
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("zh", locale0.toString());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getCountry());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat1.getPattern());
//       assertEquals(31, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals(true, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertFalse(boolean0);
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat2 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: c
//          //
//       }
//   }

  @Test
  public void test09() {}
//   @Test
//   public void test09()  throws Throwable  {
//       Locale locale0 = Locale.GERMAN;
//       assertNotNull(locale0);
//       assertEquals("", locale0.getVariant());
//       assertEquals("de", locale0.getLanguage());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("deu", locale0.getISO3Language());
//       assertEquals("", locale0.getCountry());
//       assertEquals("de", locale0.toString());
//       
//       Locale locale1 = null;
//       int int0 = (-1450);
//       int int1 = 12;
//       Locale locale2 = Locale.FRANCE;
//       assertNotSame(locale2, locale0);
//       assertFalse(locale2.equals((Object)locale0));
//       assertNotNull(locale2);
//       assertEquals("fra", locale2.getISO3Language());
//       assertEquals("fr", locale2.getLanguage());
//       assertEquals("", locale2.getVariant());
//       assertEquals("FR", locale2.getCountry());
//       assertEquals("fr_FR", locale2.toString());
//       assertEquals("FRA", locale2.getISO3Country());
//       
//       String string0 = "@>P\\";
//       TimeZone timeZone0 = null;
//       int int2 = 2;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int2);
//       assertFalse(int2 == int1);
//       assertFalse(int2 == int0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("MMM d, yyyy", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0, timeZone0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: P
//          //
//       }
//   }

  @Test
  public void test10()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      String string0 = "yw";
      int int0 = 1153;
      int int1 = 2522;
      int int2 = (-1699);
      int int3 = 4846;
      int int4 = (-2810);
      Integer integer0 = new Integer(int0);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int4);
      assertFalse(int0 == int1);
      assertFalse(integer0.equals((Object)int4));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int3));
      assertFalse(integer0.equals((Object)int1));
      assertEquals(1153, (int)integer0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
      assertNotNull(fastDateFormat0);
      assertEquals(6, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("yw", fastDateFormat0.getPattern());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      
      String string1 = "tM";
      assertNotSame(string1, string0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string1, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      
      String string0 = "7vcF`D`5T~Y5RU2YkF";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: v
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "?`1uTp";
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "rTa!\\\\i:=(|Z";
      Locale locale0 = new Locale(string0, string0);
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("RTA!\\\\I:=(|Z", locale0.getCountry());
      assertEquals("rta!\\\\i:=(|z", locale0.getLanguage());
      assertEquals("rta!\\\\i:=(|z_RTA!\\\\I:=(|Z", locale0.toString());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "aF*q]W}_^jn$ %";
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "pC2";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: p
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "org.apache.commons.lang.time.FastDateFormat$TwoDigitYearField";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "<null>";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
      }
  }

  @Test
  public void test18() {}
//   @Test
//   public void test18()  throws Throwable  {
//       int int0 = (-3871);
//       String string0 = "l~'q&~*>Y~;";
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-3871,MONTH=-3871,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-3871,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-3871,MONTH=-3871,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-3871,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: l
//          //
//       }
//   }

  @Test
  public void test19()  throws Throwable  {
      String string0 = ",j<vE}gK~mkS[=;|den";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: j
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "iL.Bi!;ixd.I";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: i
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = null;
      String string0 = "g\"Ej{`";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: g
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "|eORRl4S}n";
      TimeZone timeZone0 = null;
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: e
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      
      TimeZone timeZone0 = null;
      String string0 = "Eab&*M";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = "7+-kX#A";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: X
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = "Vm%_d'.x9#m;\"";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: V
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = "U]X`";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = "]T%80Li&M&!1";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      
      String string0 = "}R<j7in&IPI|\"T>&";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: R
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      String string0 = ":HW^Q(&}CxWzhV";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Q
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = "@[#$SOynqw;";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: O
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      String string0 = "Negative values should not be possible";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      String string0 = "Illegal pattern component: ";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = "Gx";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: x
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      String string0 = "FL.Czk=~<.FH4/X.";
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: L
         //
      }
  }

  @Test
  public void test35() {}
//   @Test
//   public void test35()  throws Throwable  {
//       Locale locale0 = Locale.TRADITIONAL_CHINESE;
//       assertNotNull(locale0);
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("TWN", locale0.getISO3Country());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("zh_TW", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("TW", locale0.getCountry());
//       
//       int int0 = 0;
//       int int1 = 90;
//       MockDate mockDate0 = new MockDate(int0, int0, int1, int1, int1);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertNotNull(mockDate0);
//       assertEquals("Tue Apr 03 19:30:00 GMT 1900", mockDate0.toString());
//       
//       int int2 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int2);
//       assertFalse(int2 == int1);
//       assertNotNull(fastDateFormat0);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
//       assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
//       
//       int int3 = (-1333);
//       int int4 = 40;
//       int int5 = 0;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int3, int4, int5);
//       assertFalse(int4 == int2);
//       assertFalse(int4 == int3);
//       assertFalse(int4 == int1);
//       assertFalse(int4 == int0);
//       assertFalse(int4 == int5);
//       assertFalse(int5 == int4);
//       assertFalse(int5 == int3);
//       assertFalse(int5 == int1);
//       assertFalse(int3 == int0);
//       assertFalse(int3 == int2);
//       assertFalse(int3 == int1);
//       assertFalse(int3 == int4);
//       assertFalse(int3 == int5);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1333,MONTH=40,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       
//       String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
//       assertFalse(int4 == int2);
//       assertFalse(int4 == int3);
//       assertFalse(int4 == int1);
//       assertFalse(int4 == int0);
//       assertFalse(int4 == int5);
//       assertFalse(int2 == int1);
//       assertFalse(int2 == int3);
//       assertFalse(int2 == int4);
//       assertFalse(int5 == int4);
//       assertFalse(int5 == int3);
//       assertFalse(int5 == int1);
//       assertFalse(int3 == int0);
//       assertFalse(int3 == int2);
//       assertFalse(int3 == int1);
//       assertFalse(int3 == int4);
//       assertFalse(int3 == int5);
//       assertNotNull(string0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-104128675200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1331,MONTH=3,WEEK_OF_YEAR=18,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=120,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
//       assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("Monday, April 30, 1331", string0);
//       
//       boolean boolean0 = false;
//       String string1 = ":s,2m:WJNCy{M]zLm_R";
//       assertNotSame(string1, string0);
//       assertFalse(string1.equals((Object)string0));
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string1);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: J
//          //
//       }
//   }

  @Test
  public void test36()  throws Throwable  {
      String string0 = "DK/+=f*\"iq5";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
      }
  }

  @Test
  public void test37()  throws Throwable  {
      String string0 = "mCKvjFSDI@F.(6Z/7#";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      String string0 = "A<DaKkZ*eP";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
      }
  }

  @Test
  public void test39()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
      }
  }

  @Test
  public void test40() {}
//   @Test
//   public void test40()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat0);
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy/M/d a h:mm", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertTrue(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertNotNull(fastDateFormat1);
//       assertEquals("yyyy/M/d a h:mm", fastDateFormat1.getPattern());
//       assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals(23, fastDateFormat1.getMaxLengthEstimate());
//   }

  @Test
  public void test41() {}
//   @Test
//   public void test41()  throws Throwable  {
//       int int0 = 0;
//       String string0 = "sk^4)";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
//       assertNotNull(simpleTimeZone0);
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals("java.util.SimpleTimeZone[id=sk^4),offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals("sk^4)", simpleTimeZone0.getID());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, (TimeZone) simpleTimeZone0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals("java.util.SimpleTimeZone[id=sk^4),offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals("sk^4)", simpleTimeZone0.getID());
//       
//       int int1 = (-1134);
//       int int2 = (-2653);
//       int int3 = 15;
//       int int4 = 0;
//       int int5 = 0;
//       int int6 = 1601;
//       int int7 = 39;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int4, int2, int5, int6, int7);
//       assertFalse(int5 == int7);
//       assertFalse(int5 == int2);
//       assertFalse(int5 == int6);
//       assertFalse(int5 == int1);
//       assertFalse(int5 == int3);
//       assertFalse(int7 == int2);
//       assertFalse(int7 == int6);
//       assertFalse(int7 == int0);
//       assertFalse(int7 == int5);
//       assertFalse(int7 == int3);
//       assertFalse(int7 == int1);
//       assertFalse(int7 == int4);
//       assertFalse(int4 == int7);
//       assertFalse(int4 == int3);
//       assertFalse(int4 == int6);
//       assertFalse(int4 == int1);
//       assertFalse(int4 == int2);
//       assertFalse(int2 == int1);
//       assertFalse(int2 == int7);
//       assertFalse(int2 == int0);
//       assertFalse(int2 == int5);
//       assertFalse(int2 == int3);
//       assertFalse(int2 == int4);
//       assertFalse(int2 == int6);
//       assertFalse(int6 == int1);
//       assertFalse(int6 == int0);
//       assertFalse(int6 == int2);
//       assertFalse(int6 == int5);
//       assertFalse(int6 == int4);
//       assertFalse(int6 == int7);
//       assertFalse(int6 == int3);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=-2653,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1601,HOUR_OF_DAY=1601,MINUTE=39,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       
//       boolean boolean0 = simpleTimeZone0.equals((Object) string0);
//       assertFalse(int0 == int7);
//       assertFalse(int0 == int3);
//       assertFalse(int0 == int1);
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int6);
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals("java.util.SimpleTimeZone[id=sk^4),offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals("sk^4)", simpleTimeZone0.getID());
//       assertFalse(boolean0);
//       
//       Locale locale0 = Locale.KOREA;
//       assertNotNull(locale0);
//       assertEquals("KR", locale0.getCountry());
//       assertEquals("KOR", locale0.getISO3Country());
//       assertEquals("ko_KR", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("ko", locale0.getLanguage());
//       assertEquals("kor", locale0.getISO3Language());
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0, (TimeZone) simpleTimeZone0, locale0);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertFalse(int0 == int7);
//       assertFalse(int0 == int3);
//       assertFalse(int0 == int1);
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int6);
//       assertNotNull(fastDateFormat1);
//       assertEquals("KR", locale0.getCountry());
//       assertEquals("KOR", locale0.getISO3Country());
//       assertEquals("ko_KR", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("ko", locale0.getLanguage());
//       assertEquals("kor", locale0.getISO3Language());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals("java.util.SimpleTimeZone[id=sk^4),offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals("sk^4)", simpleTimeZone0.getID());
//       assertEquals(11, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals("sk^4)", fastDateFormat1.getPattern());
//       assertEquals(true, fastDateFormat1.getTimeZoneOverridesCalendar());
//       
//       MockDate mockDate0 = new MockDate(int1, int2, int3, int4, int7, int3);
//       assertFalse(int7 == int2);
//       assertFalse(int7 == int6);
//       assertFalse(int7 == int0);
//       assertFalse(int7 == int5);
//       assertFalse(int7 == int3);
//       assertFalse(int7 == int1);
//       assertFalse(int7 == int4);
//       assertFalse(int4 == int7);
//       assertFalse(int4 == int3);
//       assertFalse(int4 == int6);
//       assertFalse(int4 == int1);
//       assertFalse(int4 == int2);
//       assertFalse(int3 == int2);
//       assertFalse(int3 == int4);
//       assertFalse(int3 == int0);
//       assertFalse(int3 == int5);
//       assertFalse(int3 == int1);
//       assertFalse(int3 == int7);
//       assertFalse(int3 == int6);
//       assertFalse(int2 == int1);
//       assertFalse(int2 == int7);
//       assertFalse(int2 == int0);
//       assertFalse(int2 == int5);
//       assertFalse(int2 == int3);
//       assertFalse(int2 == int4);
//       assertFalse(int2 == int6);
//       assertFalse(int1 == int6);
//       assertFalse(int1 == int7);
//       assertFalse(int1 == int0);
//       assertFalse(int1 == int2);
//       assertFalse(int1 == int3);
//       assertFalse(int1 == int4);
//       assertFalse(int1 == int5);
//       assertNotNull(mockDate0);
//       assertEquals("Thu Dec 15 00:39:15 GMT 544", mockDate0.toString());
//       
//       String string1 = fastDateFormat1.format((Date) mockDate0);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       assertFalse(int7 == int2);
//       assertFalse(int7 == int6);
//       assertFalse(int7 == int0);
//       assertFalse(int7 == int5);
//       assertFalse(int7 == int3);
//       assertFalse(int7 == int1);
//       assertFalse(int7 == int4);
//       assertFalse(int4 == int7);
//       assertFalse(int4 == int3);
//       assertFalse(int4 == int6);
//       assertFalse(int4 == int1);
//       assertFalse(int4 == int2);
//       assertFalse(int3 == int2);
//       assertFalse(int3 == int4);
//       assertFalse(int3 == int0);
//       assertFalse(int3 == int5);
//       assertFalse(int3 == int1);
//       assertFalse(int3 == int7);
//       assertFalse(int3 == int6);
//       assertFalse(int2 == int1);
//       assertFalse(int2 == int7);
//       assertFalse(int2 == int0);
//       assertFalse(int2 == int5);
//       assertFalse(int2 == int3);
//       assertFalse(int2 == int4);
//       assertFalse(int2 == int6);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertFalse(int1 == int6);
//       assertFalse(int1 == int7);
//       assertFalse(int1 == int0);
//       assertFalse(int1 == int2);
//       assertFalse(int1 == int3);
//       assertFalse(int1 == int4);
//       assertFalse(int1 == int5);
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(int0 == int7);
//       assertFalse(int0 == int3);
//       assertFalse(int0 == int1);
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int6);
//       assertNotNull(string1);
//       assertEquals("Thu Dec 15 00:39:15 GMT 544", mockDate0.toString());
//       assertEquals("KR", locale0.getCountry());
//       assertEquals("KOR", locale0.getISO3Country());
//       assertEquals("ko_KR", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("ko", locale0.getLanguage());
//       assertEquals("kor", locale0.getISO3Language());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals("java.util.SimpleTimeZone[id=sk^4),offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals("sk^4)", simpleTimeZone0.getID());
//       assertEquals(11, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals("sk^4)", fastDateFormat1.getPattern());
//       assertEquals(true, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals("1524^4)", string1);
//   }

  @Test
  public void test42() {}
//   @Test
//   public void test42()  throws Throwable  {
//       int int0 = 0;
//       String string0 = "sk^4)";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       String string1 = "\\ $@m*=}Z@9#";
//       assertNotSame(string1, string0);
//       
//       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string1);
//       assertNotSame(string1, string0);
//       assertFalse(string1.equals((Object)string0));
//       assertNotNull(simpleTimeZone0);
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       
//       int int1 = (-1134);
//       int int2 = (-2653);
//       int int3 = 15;
//       int int4 = 0;
//       int int5 = 0;
//       int int6 = 1601;
//       int int7 = 39;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int4, int2, int5, int6, int7);
//       assertFalse(int7 == int0);
//       assertFalse(int7 == int2);
//       assertFalse(int7 == int5);
//       assertFalse(int7 == int1);
//       assertFalse(int7 == int6);
//       assertFalse(int7 == int3);
//       assertFalse(int7 == int4);
//       assertFalse(int4 == int3);
//       assertFalse(int4 == int6);
//       assertFalse(int4 == int2);
//       assertFalse(int4 == int1);
//       assertFalse(int4 == int7);
//       assertFalse(int6 == int4);
//       assertFalse(int6 == int0);
//       assertFalse(int6 == int5);
//       assertFalse(int6 == int2);
//       assertFalse(int6 == int7);
//       assertFalse(int6 == int1);
//       assertFalse(int6 == int3);
//       assertFalse(int5 == int3);
//       assertFalse(int5 == int2);
//       assertFalse(int5 == int6);
//       assertFalse(int5 == int1);
//       assertFalse(int5 == int7);
//       assertFalse(int2 == int3);
//       assertFalse(int2 == int6);
//       assertFalse(int2 == int7);
//       assertFalse(int2 == int0);
//       assertFalse(int2 == int5);
//       assertFalse(int2 == int4);
//       assertFalse(int2 == int1);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=-2653,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1601,HOUR_OF_DAY=1601,MINUTE=39,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       boolean boolean0 = simpleTimeZone0.equals((Object) string1);
//       assertNotSame(string1, string0);
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(int0 == int7);
//       assertFalse(int0 == int1);
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int3);
//       assertFalse(int0 == int6);
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertFalse(boolean0);
//       
//       Locale locale0 = Locale.KOREA;
//       assertNotNull(locale0);
//       assertEquals("kor", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("KOR", locale0.getISO3Country());
//       assertEquals("ko", locale0.getLanguage());
//       assertEquals("KR", locale0.getCountry());
//       assertEquals("ko_KR", locale0.toString());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string1, (TimeZone) simpleTimeZone0, locale0);
//       assertNotSame(string1, string0);
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(int0 == int7);
//       assertFalse(int0 == int1);
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int3);
//       assertFalse(int0 == int6);
//       assertNotNull(fastDateFormat0);
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals("kor", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("KOR", locale0.getISO3Country());
//       assertEquals("ko", locale0.getLanguage());
//       assertEquals("KR", locale0.getCountry());
//       assertEquals("ko_KR", locale0.toString());
//       assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//   }

  @Test
  public void test43() {}
//   @Test
//   public void test43()  throws Throwable  {
//       int int0 = 1;
//       String string0 = "";
//       Locale locale0 = Locale.JAPAN;
//       assertNotNull(locale0);
//       assertEquals("jpn", locale0.getISO3Language());
//       assertEquals("ja_JP", locale0.toString());
//       assertEquals("JP", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       assertEquals("JPN", locale0.getISO3Country());
//       assertEquals("ja", locale0.getLanguage());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, locale0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(26, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy/MM/dd H:mm:ss z", fastDateFormat0.getPattern());
//       assertEquals("jpn", locale0.getISO3Language());
//       assertEquals("ja_JP", locale0.toString());
//       assertEquals("JP", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       assertEquals("JPN", locale0.getISO3Country());
//       assertEquals("ja", locale0.getLanguage());
//       
//       boolean boolean0 = true;
//       SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat(string0);
//       assertNotNull(simpleDateFormat0);
//       assertEquals("", simpleDateFormat0.toLocalizedPattern());
//       assertEquals("", simpleDateFormat0.toPattern());
//       assertEquals(true, simpleDateFormat0.isLenient());
//       
//       int int1 = 0;
//       int int2 = 217;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int1, int2);
//       assertFalse(int2 == int0);
//       assertFalse(int2 == int1);
//       assertFalse(int1 == int2);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int1);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=217,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       
//       StringBuffer stringBuffer0 = new StringBuffer((CharSequence) string0);
//       assertNotNull(stringBuffer0);
//       assertEquals("", stringBuffer0.toString());
//       assertEquals(0, stringBuffer0.length());
//       assertEquals(16, stringBuffer0.capacity());
//       
//       StringBuffer stringBuffer1 = fastDateFormat0.applyRules(mockGregorianCalendar0, stringBuffer0);
//       assertSame(stringBuffer1, stringBuffer0);
//       assertSame(stringBuffer0, stringBuffer1);
//       assertFalse(int2 == int0);
//       assertFalse(int2 == int1);
//       assertFalse(int1 == int2);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int1);
//       assertNotNull(stringBuffer1);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(26, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy/MM/dd H:mm:ss z", fastDateFormat0.getPattern());
//       assertEquals("jpn", locale0.getISO3Language());
//       assertEquals("ja_JP", locale0.toString());
//       assertEquals("JP", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       assertEquals("JPN", locale0.getISO3Country());
//       assertEquals("ja", locale0.getLanguage());
//       assertEquals("0001/02/01 3:37:00 GMT", stringBuffer1.toString());
//       assertEquals(22, stringBuffer1.length());
//       assertEquals(34, stringBuffer1.capacity());
//       assertEquals(34, stringBuffer0.capacity());
//       assertEquals(22, stringBuffer0.length());
//       assertEquals("0001/02/01 3:37:00 GMT", stringBuffer0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62133078180000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=32,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=3,HOUR_OF_DAY=3,MINUTE=37,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       
//       StringBuffer stringBuffer2 = stringBuffer1.append((long) int0);
//       assertSame(stringBuffer1, stringBuffer2);
//       assertSame(stringBuffer1, stringBuffer0);
//       assertSame(stringBuffer2, stringBuffer0);
//       assertSame(stringBuffer2, stringBuffer1);
//       assertSame(stringBuffer0, stringBuffer1);
//       assertSame(stringBuffer0, stringBuffer2);
//       assertFalse(int2 == int0);
//       assertFalse(int2 == int1);
//       assertFalse(int1 == int2);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int1);
//       assertNotNull(stringBuffer2);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(26, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy/MM/dd H:mm:ss z", fastDateFormat0.getPattern());
//       assertEquals("jpn", locale0.getISO3Language());
//       assertEquals("ja_JP", locale0.toString());
//       assertEquals("JP", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       assertEquals("JPN", locale0.getISO3Country());
//       assertEquals("ja", locale0.getLanguage());
//       assertEquals(23, stringBuffer1.length());
//       assertEquals("0001/02/01 3:37:00 GMT1", stringBuffer1.toString());
//       assertEquals(34, stringBuffer1.capacity());
//       assertEquals(23, stringBuffer2.length());
//       assertEquals(34, stringBuffer2.capacity());
//       assertEquals("0001/02/01 3:37:00 GMT1", stringBuffer2.toString());
//       assertEquals(23, stringBuffer0.length());
//       assertEquals(34, stringBuffer0.capacity());
//       assertEquals("0001/02/01 3:37:00 GMT1", stringBuffer0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62133078180000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=32,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=3,HOUR_OF_DAY=3,MINUTE=37,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       
//       int int3 = 100;
//       StringBuffer stringBuffer3 = stringBuffer2.append(int3);
//       assertSame(stringBuffer3, stringBuffer0);
//       assertSame(stringBuffer3, stringBuffer1);
//       assertSame(stringBuffer3, stringBuffer2);
//       assertSame(stringBuffer1, stringBuffer2);
//       assertSame(stringBuffer1, stringBuffer0);
//       assertSame(stringBuffer1, stringBuffer3);
//       assertSame(stringBuffer2, stringBuffer0);
//       assertSame(stringBuffer2, stringBuffer1);
//       assertSame(stringBuffer2, stringBuffer3);
//       assertSame(stringBuffer0, stringBuffer1);
//       assertSame(stringBuffer0, stringBuffer2);
//       assertSame(stringBuffer0, stringBuffer3);
//       assertFalse(int3 == int2);
//       assertFalse(int3 == int1);
//       assertFalse(int3 == int0);
//       assertFalse(int2 == int0);
//       assertFalse(int2 == int1);
//       assertFalse(int2 == int3);
//       assertFalse(int1 == int2);
//       assertFalse(int1 == int0);
//       assertFalse(int1 == int3);
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int1);
//       assertFalse(int0 == int3);
//       assertNotNull(stringBuffer3);
//       assertEquals(26, stringBuffer3.length());
//       assertEquals("0001/02/01 3:37:00 GMT1100", stringBuffer3.toString());
//       assertEquals(34, stringBuffer3.capacity());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(26, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy/MM/dd H:mm:ss z", fastDateFormat0.getPattern());
//       assertEquals("jpn", locale0.getISO3Language());
//       assertEquals("ja_JP", locale0.toString());
//       assertEquals("JP", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       assertEquals("JPN", locale0.getISO3Country());
//       assertEquals("ja", locale0.getLanguage());
//       assertEquals(26, stringBuffer1.length());
//       assertEquals("0001/02/01 3:37:00 GMT1100", stringBuffer1.toString());
//       assertEquals(34, stringBuffer1.capacity());
//       assertEquals("0001/02/01 3:37:00 GMT1100", stringBuffer2.toString());
//       assertEquals(26, stringBuffer2.length());
//       assertEquals(34, stringBuffer2.capacity());
//       assertEquals(34, stringBuffer0.capacity());
//       assertEquals(26, stringBuffer0.length());
//       assertEquals("0001/02/01 3:37:00 GMT1100", stringBuffer0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62133078180000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=32,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=3,HOUR_OF_DAY=3,MINUTE=37,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       
//       long long0 = 0L;
//       StringBuffer stringBuffer4 = fastDateFormat0.format(long0, stringBuffer3);
//       assertSame(stringBuffer3, stringBuffer0);
//       assertSame(stringBuffer3, stringBuffer1);
//       assertSame(stringBuffer3, stringBuffer4);
//       assertSame(stringBuffer3, stringBuffer2);
//       assertSame(stringBuffer1, stringBuffer2);
//       assertSame(stringBuffer1, stringBuffer0);
//       assertSame(stringBuffer1, stringBuffer3);
//       assertSame(stringBuffer1, stringBuffer4);
//       assertSame(stringBuffer4, stringBuffer3);
//       assertSame(stringBuffer4, stringBuffer0);
//       assertSame(stringBuffer4, stringBuffer2);
//       assertSame(stringBuffer4, stringBuffer1);
//       assertSame(stringBuffer2, stringBuffer4);
//       assertSame(stringBuffer2, stringBuffer0);
//       assertSame(stringBuffer2, stringBuffer1);
//       assertSame(stringBuffer2, stringBuffer3);
//       assertSame(stringBuffer0, stringBuffer1);
//       assertSame(stringBuffer0, stringBuffer2);
//       assertSame(stringBuffer0, stringBuffer4);
//       assertSame(stringBuffer0, stringBuffer3);
//       assertFalse(int2 == int0);
//       assertFalse(int2 == int1);
//       assertFalse(int2 == int3);
//       assertFalse(int1 == int2);
//       assertFalse(int1 == int0);
//       assertFalse(int1 == int3);
//       assertFalse(int3 == int2);
//       assertFalse(int3 == int1);
//       assertFalse(int3 == int0);
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int1);
//       assertFalse(int0 == int3);
//       assertNotNull(stringBuffer4);
//       assertEquals("0001/02/01 3:37:00 GMT11001970/01/01 0:00:00 GMT", stringBuffer3.toString());
//       assertEquals(48, stringBuffer3.length());
//       assertEquals(70, stringBuffer3.capacity());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(26, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy/MM/dd H:mm:ss z", fastDateFormat0.getPattern());
//       assertEquals("jpn", locale0.getISO3Language());
//       assertEquals("ja_JP", locale0.toString());
//       assertEquals("JP", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       assertEquals("JPN", locale0.getISO3Country());
//       assertEquals("ja", locale0.getLanguage());
//       assertEquals("0001/02/01 3:37:00 GMT11001970/01/01 0:00:00 GMT", stringBuffer1.toString());
//       assertEquals(48, stringBuffer1.length());
//       assertEquals(70, stringBuffer1.capacity());
//       assertEquals("0001/02/01 3:37:00 GMT11001970/01/01 0:00:00 GMT", stringBuffer4.toString());
//       assertEquals(70, stringBuffer4.capacity());
//       assertEquals(48, stringBuffer4.length());
//       assertEquals("0001/02/01 3:37:00 GMT11001970/01/01 0:00:00 GMT", stringBuffer2.toString());
//       assertEquals(48, stringBuffer2.length());
//       assertEquals(70, stringBuffer2.capacity());
//       assertEquals("0001/02/01 3:37:00 GMT11001970/01/01 0:00:00 GMT", stringBuffer0.toString());
//       assertEquals(48, stringBuffer0.length());
//       assertEquals(70, stringBuffer0.capacity());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62133078180000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=32,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=3,HOUR_OF_DAY=3,MINUTE=37,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(int0, (TimeZone) zoneInfo0);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int1);
//       assertFalse(int0 == int3);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertNotNull(fastDateFormat1);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("MMMM d, yyyy", fastDateFormat1.getPattern());
//       assertEquals(true, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals(20, fastDateFormat1.getMaxLengthEstimate());
//       
//       // Undeclared exception!
//       try {
//         String string1 = fastDateFormat1.format((Object) zoneInfo0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Unknown class: sun.util.calendar.ZoneInfo
//          //
//       }
//   }

  @Test
  public void test44() {}
//   @Test
//   public void test44()  throws Throwable  {
//       int int0 = 0;
//       Locale locale0 = null;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, locale0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
//       
//       String string0 = fastDateFormat0.toString();
//       assertNotNull(string0);
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("FastDateFormat[EEEE, MMMM d, yyyy]", string0);
//   }

  @Test
  public void test45() {}
//   @Test
//   public void test45()  throws Throwable  {
//       int int0 = 1;
//       String string0 = "h:mm:ss 'o''clock' a z";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       Locale locale0 = null;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, (TimeZone) zoneInfo0, locale0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(38, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       
//       ParsePosition parsePosition0 = new ParsePosition(int0);
//       assertNotNull(parsePosition0);
//       assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
//       assertEquals(1, parsePosition0.getIndex());
//       assertEquals(-1, parsePosition0.getErrorIndex());
//       
//       Object object0 = fastDateFormat0.parseObject(string0, parsePosition0);
//       assertNull(object0);
//       assertEquals("java.text.ParsePosition[index=0,errorIndex=0]", parsePosition0.toString());
//       assertEquals(0, parsePosition0.getErrorIndex());
//       assertEquals(0, parsePosition0.getIndex());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(38, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//   }

  @Test
  public void test46() {}
//   @Test
//   public void test46()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat0);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy/M/d a h:mm", fastDateFormat0.getPattern());
//       
//       String string0 = fastDateFormat0.getPattern();
//       assertNotNull(string0);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy/M/d a h:mm", fastDateFormat0.getPattern());
//       assertEquals("yyyy/M/d a h:mm", string0);
//   }

  @Test
  public void test47() {}
//   @Test
//   public void test47()  throws Throwable  {
//       int int0 = 0;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, (TimeZone) zoneInfo0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       ZoneInfo zoneInfo1 = (ZoneInfo)fastDateFormat0.getTimeZone();
//       assertSame(zoneInfo1, zoneInfo0);
//       assertSame(zoneInfo0, zoneInfo1);
//       assertNotNull(zoneInfo1);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
//       assertEquals("GMT", zoneInfo1.getID());
//       assertEquals("GMT", zoneInfo0.getID());
//   }

  @Test
  public void test48()  throws Throwable  {
      String string0 = ")\"s2Y[N\\u?";
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Y
         //
      }
  }

  @Test
  public void test49() {}
//   @Test
//   public void test49()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat0);
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("yyyy/M/d a h:mm", fastDateFormat0.getPattern());
//       
//       Locale locale0 = fastDateFormat0.getLocale();
//       assertNotNull(locale0);
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("yyyy/M/d a h:mm", fastDateFormat0.getPattern());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.toString());
//       assertEquals("", locale0.getLanguage());
//       assertEquals("", locale0.getISO3Language());
//   }

  @Test
  public void test50() {}
//   @Test
//   public void test50()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat0);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy/M/d a h:mm", fastDateFormat0.getPattern());
//       
//       boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy/M/d a h:mm", fastDateFormat0.getPattern());
//       assertFalse(boolean0);
//   }

  @Test
  public void test51() {}
//   @Test
//   public void test51()  throws Throwable  {
//       int int0 = 1599;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat0);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("yyyy/M/d a h:mm", fastDateFormat0.getPattern());
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       
//       Long long0 = new Long((long) int0);
//       assertEquals(1599L, (long)long0);
//       
//       String string0 = fastDateFormat0.format((Object) long0);
//       assertNotNull(string0);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("yyyy/M/d a h:mm", fastDateFormat0.getPattern());
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("1970/1/1 AM 12:00", string0);
//   }

  @Test
  public void test52() {}
//   @Test
//   public void test52()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat0);
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy/M/d a h:mm", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       
//       long long0 = (-2830L);
//       String string0 = fastDateFormat0.format(long0);
//       assertNotNull(string0);
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy/M/d a h:mm", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("1969/12/31 PM 11:59", string0);
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: P
//          //
//       }
//   }

  @Test
  public void test53() {}
//   @Test
//   public void test53()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
//   }
}
