/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:40:03 GMT 2014
 */

package org.apache.commons.lang3.math;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.lang3.math.Fraction;



import org.evosuite.runtime.mock.java.lang.MockArithmeticException;

import org.junit.runner.RunWith;


public class FractionEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      int int0 = (-373);
      Fraction fraction0 = Fraction.getFraction((double) int0);
      assertEquals(-373, fraction0.intValue());
      assertEquals(-373, fraction0.shortValue());
      assertEquals(-373, fraction0.getProperWhole());
      assertEquals((-373.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-117, fraction0.byteValue());
      assertEquals((-373.0), fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-373L), fraction0.longValue());
      assertEquals(-373, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      String string0 = fraction0.toProperString();
      assertEquals(-373, fraction0.intValue());
      assertEquals(-373, fraction0.shortValue());
      assertEquals(-373, fraction0.getProperWhole());
      assertEquals((-373.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-117, fraction0.byteValue());
      assertEquals((-373.0), fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-373L), fraction0.longValue());
      assertEquals(-373, fraction0.getNumerator());
      assertEquals("-373", string0);
      assertNotNull(string0);
  }

  @Test
  public void test01()  throws Throwable  {
      double double0 = (-1.0);
      Fraction fraction0 = Fraction.getFraction(double0);
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(-1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      String string0 = fraction0.toProperString();
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(-1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals("-1", string0);
      assertNotNull(string0);
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = 771;
      Fraction fraction0 = Fraction.getFraction(int0, int0);
      assertEquals(771, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.shortValue());
      assertEquals(771, fraction0.getNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1L, fraction0.longValue());
      assertNotNull(fraction0);
      
      String string0 = fraction0.toProperString();
      assertEquals(771, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.shortValue());
      assertEquals(771, fraction0.getNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1L, fraction0.longValue());
      assertEquals("1", string0);
      assertNotNull(string0);
  }

  @Test
  public void test03()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
      
      String string0 = fraction1.toProperString();
      assertEquals(0, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals("0", string0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(string0);
  }

  @Test
  public void test04()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      String string0 = fraction0.toString();
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getNumerator());
      assertEquals("3/4", string0);
      assertNotNull(string0);
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = (-813);
      Fraction fraction0 = Fraction.getFraction(int0, int0);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.intValue());
      assertEquals(813, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(813, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.pow(int0);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.intValue());
      assertEquals(813, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(813, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.intValue());
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      
      int int1 = fraction1.compareTo(fraction0);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.intValue());
      assertEquals(813, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(813, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.intValue());
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, int1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test
  public void test06()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction0);
      
      int int0 = 47;
      Fraction fraction1 = Fraction.getReducedFraction(int0, int0);
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.shortValue());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      
      Fraction fraction2 = Fraction.FOUR_FIFTHS;
      assertEquals(4, fraction2.getProperNumerator());
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0.8, fraction2.doubleValue(), 0.01D);
      assertEquals(4, fraction2.getNumerator());
      assertEquals(0.8F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.shortValue());
      assertEquals(5, fraction2.getDenominator());
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotNull(fraction2);
      
      Fraction fraction3 = fraction1.subtract(fraction2);
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.shortValue());
      assertEquals(4, fraction2.getProperNumerator());
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0.8, fraction2.doubleValue(), 0.01D);
      assertEquals(4, fraction2.getNumerator());
      assertEquals(0.8F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.shortValue());
      assertEquals(5, fraction2.getDenominator());
      assertEquals(1, fraction3.getNumerator());
      assertEquals(0, fraction3.intValue());
      assertEquals(1, fraction3.getProperNumerator());
      assertEquals(0L, fraction3.longValue());
      assertEquals(5, fraction3.getDenominator());
      assertEquals(0.2, fraction3.doubleValue(), 0.01D);
      assertEquals(0.2F, fraction3.floatValue(), 0.01F);
      assertEquals(0, fraction3.shortValue());
      assertEquals(0, fraction3.getProperWhole());
      assertEquals(0, fraction3.byteValue());
      assertFalse(fraction1.equals((Object)fraction3));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction3));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction3.equals((Object)fraction2));
      assertTrue(fraction3.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction1));
      assertNotSame(fraction1, fraction3);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction3);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction3, fraction2);
      assertNotSame(fraction3, fraction0);
      assertNotSame(fraction3, fraction1);
      assertNotNull(fraction3);
      
      int int1 = fraction3.compareTo(fraction0);
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(4, fraction2.getProperNumerator());
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0.8, fraction2.doubleValue(), 0.01D);
      assertEquals(4, fraction2.getNumerator());
      assertEquals(0.8F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.shortValue());
      assertEquals(5, fraction2.getDenominator());
      assertEquals(1, fraction3.getNumerator());
      assertEquals(0, fraction3.intValue());
      assertEquals(1, fraction3.getProperNumerator());
      assertEquals(0L, fraction3.longValue());
      assertEquals(5, fraction3.getDenominator());
      assertEquals(0.2, fraction3.doubleValue(), 0.01D);
      assertEquals(0.2F, fraction3.floatValue(), 0.01F);
      assertEquals(0, fraction3.shortValue());
      assertEquals(0, fraction3.getProperWhole());
      assertEquals(0, fraction3.byteValue());
      assertFalse(fraction1.equals((Object)fraction3));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertTrue(fraction0.equals((Object)fraction3));
      assertFalse(int1 == int0);
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction3));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(int0 == int1);
      assertFalse(fraction3.equals((Object)fraction2));
      assertTrue(fraction3.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction1));
      assertEquals(0, int1);
      assertNotSame(fraction1, fraction3);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction3);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction3);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction3, fraction2);
      assertNotSame(fraction3, fraction0);
      assertNotSame(fraction3, fraction1);
  }

  @Test
  public void test07()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ONE_QUARTER;
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.25, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0.25F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.25, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0.25F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals((-1), int0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
  }

  @Test
  public void test08()  throws Throwable  {
      double double0 = (-2516.7771899664544);
      Fraction fraction0 = Fraction.getFraction(double0);
      assertEquals((-2516L), fraction0.longValue());
      assertEquals(6317, fraction0.getProperNumerator());
      assertEquals(-20456365, fraction0.getNumerator());
      assertEquals(8128, fraction0.getDenominator());
      assertEquals((-2516.77718996063), fraction0.doubleValue(), 0.01D);
      assertEquals((-2516.777F), fraction0.floatValue(), 0.01F);
      assertEquals(-2516, fraction0.intValue());
      assertEquals(44, fraction0.byteValue());
      assertEquals(-2516, fraction0.shortValue());
      assertEquals(-2516, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      int int0 = fraction0.hashCode();
      assertEquals((-2516L), fraction0.longValue());
      assertEquals(6317, fraction0.getProperNumerator());
      assertEquals(-20456365, fraction0.getNumerator());
      assertEquals(8128, fraction0.getDenominator());
      assertEquals((-2516.77718996063), fraction0.doubleValue(), 0.01D);
      assertEquals((-2516.777F), fraction0.floatValue(), 0.01F);
      assertEquals(-2516, fraction0.intValue());
      assertEquals(44, fraction0.byteValue());
      assertEquals(-2516, fraction0.shortValue());
      assertEquals(-2516, fraction0.getProperWhole());
      assertEquals((-756854104), int0);
  }

  @Test
  public void test09()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.negate();
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertTrue(fraction0.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      
      Fraction fraction2 = fraction1.reduce();
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0, fraction2.shortValue());
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction2.getProperWhole());
      assertTrue(fraction0.equals((Object)fraction2));
      assertTrue(fraction0.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction0));
      assertTrue(fraction2.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction0);
      assertSame(fraction2, fraction1);
      assertNotNull(fraction2);
  }

  @Test
  public void test10()  throws Throwable  {
      double double0 = (-2516.7771899664544);
      Fraction fraction0 = Fraction.getFraction(double0);
      assertEquals(44, fraction0.byteValue());
      assertEquals(8128, fraction0.getDenominator());
      assertEquals(-2516, fraction0.getProperWhole());
      assertEquals((-2516.777F), fraction0.floatValue(), 0.01F);
      assertEquals((-2516L), fraction0.longValue());
      assertEquals(-2516, fraction0.shortValue());
      assertEquals((-2516.77718996063), fraction0.doubleValue(), 0.01D);
      assertEquals(-20456365, fraction0.getNumerator());
      assertEquals(-2516, fraction0.intValue());
      assertEquals(6317, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.negate();
      assertEquals(2516L, fraction1.longValue());
      assertEquals(-44, fraction1.byteValue());
      assertEquals(2516.77718996063, fraction1.doubleValue(), 0.01D);
      assertEquals(2516, fraction1.intValue());
      assertEquals(8128, fraction1.getDenominator());
      assertEquals(6317, fraction1.getProperNumerator());
      assertEquals(20456365, fraction1.getNumerator());
      assertEquals(2516, fraction1.getProperWhole());
      assertEquals(2516.777F, fraction1.floatValue(), 0.01F);
      assertEquals(2516, fraction1.shortValue());
      assertEquals(44, fraction0.byteValue());
      assertEquals(8128, fraction0.getDenominator());
      assertEquals(-2516, fraction0.getProperWhole());
      assertEquals((-2516.777F), fraction0.floatValue(), 0.01F);
      assertEquals((-2516L), fraction0.longValue());
      assertEquals(-2516, fraction0.shortValue());
      assertEquals((-2516.77718996063), fraction0.doubleValue(), 0.01D);
      assertEquals(-20456365, fraction0.getNumerator());
      assertEquals(-2516, fraction0.intValue());
      assertEquals(6317, fraction0.getProperNumerator());
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
      
      boolean boolean0 = fraction0.equals((Object) fraction1);
      assertEquals(2516L, fraction1.longValue());
      assertEquals(-44, fraction1.byteValue());
      assertEquals(2516.77718996063, fraction1.doubleValue(), 0.01D);
      assertEquals(2516, fraction1.intValue());
      assertEquals(8128, fraction1.getDenominator());
      assertEquals(6317, fraction1.getProperNumerator());
      assertEquals(20456365, fraction1.getNumerator());
      assertEquals(2516, fraction1.getProperWhole());
      assertEquals(2516.777F, fraction1.floatValue(), 0.01F);
      assertEquals(2516, fraction1.shortValue());
      assertEquals(44, fraction0.byteValue());
      assertEquals(8128, fraction0.getDenominator());
      assertEquals(-2516, fraction0.getProperWhole());
      assertEquals((-2516.777F), fraction0.floatValue(), 0.01F);
      assertEquals((-2516L), fraction0.longValue());
      assertEquals(-2516, fraction0.shortValue());
      assertEquals((-2516.77718996063), fraction0.doubleValue(), 0.01D);
      assertEquals(-20456365, fraction0.getNumerator());
      assertEquals(-2516, fraction0.intValue());
      assertEquals(6317, fraction0.getProperNumerator());
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(boolean0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
  }

  @Test
  public void test11()  throws Throwable  {
      double double0 = (-2516.7771899664544);
      Fraction fraction0 = Fraction.getFraction(double0);
      assertEquals((-2516.77718996063), fraction0.doubleValue(), 0.01D);
      assertEquals((-2516.777F), fraction0.floatValue(), 0.01F);
      assertEquals(-2516, fraction0.intValue());
      assertEquals(44, fraction0.byteValue());
      assertEquals(6317, fraction0.getProperNumerator());
      assertEquals(-2516, fraction0.shortValue());
      assertEquals((-2516L), fraction0.longValue());
      assertEquals(-20456365, fraction0.getNumerator());
      assertEquals(8128, fraction0.getDenominator());
      assertEquals(-2516, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      String string0 = fraction0.toString();
      assertEquals((-2516.77718996063), fraction0.doubleValue(), 0.01D);
      assertEquals((-2516.777F), fraction0.floatValue(), 0.01F);
      assertEquals(-2516, fraction0.intValue());
      assertEquals(44, fraction0.byteValue());
      assertEquals(6317, fraction0.getProperNumerator());
      assertEquals(-2516, fraction0.shortValue());
      assertEquals((-2516L), fraction0.longValue());
      assertEquals(-20456365, fraction0.getNumerator());
      assertEquals(8128, fraction0.getDenominator());
      assertEquals(-2516, fraction0.getProperWhole());
      assertEquals("-20456365/8128", string0);
      assertNotNull(string0);
      
      boolean boolean0 = fraction0.equals((Object) string0);
      assertEquals((-2516.77718996063), fraction0.doubleValue(), 0.01D);
      assertEquals((-2516.777F), fraction0.floatValue(), 0.01F);
      assertEquals(-2516, fraction0.intValue());
      assertEquals(44, fraction0.byteValue());
      assertEquals(6317, fraction0.getProperNumerator());
      assertEquals(-2516, fraction0.shortValue());
      assertEquals((-2516L), fraction0.longValue());
      assertEquals(-20456365, fraction0.getNumerator());
      assertEquals(8128, fraction0.getDenominator());
      assertEquals(-2516, fraction0.getProperWhole());
      assertFalse(boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.divideBy(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The fraction to divide by must not be zero
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.divideBy(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ONE_QUARTER;
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.25F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.25, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      
      Fraction fraction2 = fraction1.multiplyBy(fraction0);
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.25F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.25, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction2.byteValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(0, fraction2.shortValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction2.getProperWhole());
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction0, fraction1);
      assertSame(fraction0, fraction2);
      assertNotSame(fraction2, fraction1);
      assertSame(fraction2, fraction0);
      assertNotNull(fraction2);
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1750);
      Fraction fraction0 = Fraction.getFraction(int0, int1);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1750, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.getNumerator());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.multiplyBy(fraction0);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1750, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.getNumerator());
      assertFalse(int1 == int0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(int0 == int1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
  }

  @Test
  public void test16()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.multiplyBy(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertNotNull(fraction0);
      
      int int0 = fraction0.hashCode();
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(23388, int0);
      
      int int1 = 1946;
      assertFalse(int1 == int0);
      
      Fraction fraction1 = Fraction.getFraction(int1, int0);
      assertEquals(1946, fraction1.getProperNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.08320506242517531, fraction1.doubleValue(), 0.01D);
      assertEquals(0.08320506F, fraction1.floatValue(), 0.01F);
      assertEquals(1946, fraction1.getNumerator());
      assertEquals(23388, fraction1.getDenominator());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertFalse(int1 == int0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(int0 == int1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
      
      Fraction fraction2 = Fraction.getFraction(int1, int0, int1);
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1958.0184994861254, fraction2.doubleValue(), 0.01D);
      assertEquals(1958L, fraction2.longValue());
      assertEquals(1946, fraction2.getDenominator());
      assertEquals(1958, fraction2.shortValue());
      assertEquals(1958, fraction2.getProperWhole());
      assertEquals(3810304, fraction2.getNumerator());
      assertEquals(-90, fraction2.byteValue());
      assertEquals(36, fraction2.getProperNumerator());
      assertEquals(1958.0186F, fraction2.floatValue(), 0.01F);
      assertEquals(1958, fraction2.intValue());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotNull(fraction2);
      
      // Undeclared exception!
      try {
        Fraction fraction3 = fraction2.subtract(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: numerator too large after multiply
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ONE_QUARTER;
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.25F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.25, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      
      Fraction fraction2 = fraction1.add(fraction0);
      assertEquals(0, fraction2.shortValue());
      assertEquals(1, fraction2.getNumerator());
      assertEquals(0, fraction2.byteValue());
      assertEquals(1, fraction2.getProperNumerator());
      assertEquals(0, fraction2.intValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals(4, fraction2.getDenominator());
      assertEquals(0.25, fraction2.doubleValue(), 0.01D);
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0.25F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.25F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.25, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction1, fraction0);
      assertSame(fraction1, fraction2);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction2);
  }

  @Test
  public void test19()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertSame(fraction1, fraction0);
      assertSame(fraction0, fraction1);
      assertNotNull(fraction1);
  }

  @Test
  public void test20()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.add(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      double double0 = 2869.7257295716;
      Fraction fraction0 = Fraction.getFraction(double0);
      assertEquals(2869L, fraction0.longValue());
      assertEquals(53, fraction0.byteValue());
      assertEquals(24682511, fraction0.getNumerator());
      assertEquals(6242, fraction0.getProperNumerator());
      assertEquals(2869.7258F, fraction0.floatValue(), 0.01F);
      assertEquals(2869, fraction0.intValue());
      assertEquals(2869.7257295663294, fraction0.doubleValue(), 0.01D);
      assertEquals(8601, fraction0.getDenominator());
      assertEquals(2869, fraction0.getProperWhole());
      assertEquals(2869, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      assertEquals(0, fraction1.shortValue());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      
      Fraction fraction2 = fraction0.add(fraction1);
      assertEquals(34404, fraction2.getDenominator());
      assertEquals(2870.2257295663294, fraction2.doubleValue(), 0.01D);
      assertEquals(2870.2258F, fraction2.floatValue(), 0.01F);
      assertEquals(2870, fraction2.getProperWhole());
      assertEquals(2870L, fraction2.longValue());
      assertEquals(2870, fraction2.shortValue());
      assertEquals(7766, fraction2.getProperNumerator());
      assertEquals(2870, fraction2.intValue());
      assertEquals(54, fraction2.byteValue());
      assertEquals(98747246, fraction2.getNumerator());
      assertEquals(2869L, fraction0.longValue());
      assertEquals(53, fraction0.byteValue());
      assertEquals(24682511, fraction0.getNumerator());
      assertEquals(6242, fraction0.getProperNumerator());
      assertEquals(2869.7258F, fraction0.floatValue(), 0.01F);
      assertEquals(2869, fraction0.intValue());
      assertEquals(2869.7257295663294, fraction0.doubleValue(), 0.01D);
      assertEquals(8601, fraction0.getDenominator());
      assertEquals(2869, fraction0.getProperWhole());
      assertEquals(2869, fraction0.shortValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotNull(fraction2);
  }

  @Test
  public void test22()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertNotNull(fraction0);
      
      int int0 = 2351;
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.pow(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mulPos
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      double double0 = 2.147483647E9;
      Fraction fraction0 = Fraction.getFraction(double0);
      assertEquals(-1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2.147483647E9, fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.byteValue());
      assertEquals(2147483647L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(2.14748365E9F, fraction0.floatValue(), 0.01F);
      assertEquals(2147483647, fraction0.intValue());
      assertEquals(2147483647, fraction0.getProperWhole());
      assertEquals(2147483647, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.negate();
      assertEquals(-1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2.147483647E9, fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.byteValue());
      assertEquals(2147483647L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(2.14748365E9F, fraction0.floatValue(), 0.01F);
      assertEquals(2147483647, fraction0.intValue());
      assertEquals(2147483647, fraction0.getProperWhole());
      assertEquals(2147483647, fraction0.getNumerator());
      assertEquals((-2.147483647E9), fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.shortValue());
      assertEquals((-2147483647L), fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(-2147483647, fraction1.getNumerator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(-2147483647, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-2.14748365E9F), fraction1.floatValue(), 0.01F);
      assertEquals(-2147483647, fraction1.getProperWhole());
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.multiplyBy(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      assertEquals(0, fraction0.intValue());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      int int0 = fraction0.getProperNumerator();
      assertEquals(0, fraction0.intValue());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(4, int0);
      
      Fraction fraction1 = fraction0.pow(int0);
      assertEquals(0, fraction0.intValue());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(256, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(625, fraction1.getDenominator());
      assertEquals(256, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.4096, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.4096F, fraction1.floatValue(), 0.01F);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
  }

  @Test
  public void test25()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      int int0 = fraction0.getProperNumerator();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, int0);
      
      Fraction fraction1 = fraction0.pow(int0);
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
  }

  @Test
  public void test26()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertEquals(0, fraction0.intValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.pow(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.abs();
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.75, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.75F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(3, fraction1.getProperNumerator());
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
      assertNotNull(fraction1);
  }

  @Test
  public void test28()  throws Throwable  {
      double double0 = (-1534.3899);
      Fraction fraction0 = Fraction.getFraction(double0);
      assertEquals(10000, fraction0.getDenominator());
      assertEquals((-1534.3899F), fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.byteValue());
      assertEquals(-1534, fraction0.getProperWhole());
      assertEquals(-1534, fraction0.shortValue());
      assertEquals(-15343899, fraction0.getNumerator());
      assertEquals((-1534.3899), fraction0.doubleValue(), 0.01D);
      assertEquals((-1534L), fraction0.longValue());
      assertEquals(3899, fraction0.getProperNumerator());
      assertEquals(-1534, fraction0.intValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.abs();
      assertEquals(10000, fraction0.getDenominator());
      assertEquals((-1534.3899F), fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.byteValue());
      assertEquals(-1534, fraction0.getProperWhole());
      assertEquals(-1534, fraction0.shortValue());
      assertEquals(-15343899, fraction0.getNumerator());
      assertEquals((-1534.3899), fraction0.doubleValue(), 0.01D);
      assertEquals((-1534L), fraction0.longValue());
      assertEquals(3899, fraction0.getProperNumerator());
      assertEquals(-1534, fraction0.intValue());
      assertEquals(1534.3899, fraction1.doubleValue(), 0.01D);
      assertEquals(1534L, fraction1.longValue());
      assertEquals(1534.3899F, fraction1.floatValue(), 0.01F);
      assertEquals(1534, fraction1.getProperWhole());
      assertEquals(-2, fraction1.byteValue());
      assertEquals(1534, fraction1.shortValue());
      assertEquals(15343899, fraction1.getNumerator());
      assertEquals(3899, fraction1.getProperNumerator());
      assertEquals(10000, fraction1.getDenominator());
      assertEquals(1534, fraction1.intValue());
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
  }

  @Test
  public void test29()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.shortValue());
      assertTrue(fraction0.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
  }

  @Test
  public void test30()  throws Throwable  {
      double double0 = (-2516.7771899664544);
      Fraction fraction0 = Fraction.getFraction(double0);
      assertEquals((-2516.77718996063), fraction0.doubleValue(), 0.01D);
      assertEquals(-2516, fraction0.intValue());
      assertEquals(-20456365, fraction0.getNumerator());
      assertEquals(8128, fraction0.getDenominator());
      assertEquals(44, fraction0.byteValue());
      assertEquals(6317, fraction0.getProperNumerator());
      assertEquals((-2516L), fraction0.longValue());
      assertEquals((-2516.777F), fraction0.floatValue(), 0.01F);
      assertEquals(-2516, fraction0.shortValue());
      assertEquals(-2516, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.divideBy(fraction0);
      assertEquals((-2516.77718996063), fraction0.doubleValue(), 0.01D);
      assertEquals(-2516, fraction0.intValue());
      assertEquals(-20456365, fraction0.getNumerator());
      assertEquals(8128, fraction0.getDenominator());
      assertEquals(44, fraction0.byteValue());
      assertEquals(6317, fraction0.getProperNumerator());
      assertEquals((-2516L), fraction0.longValue());
      assertEquals((-2516.777F), fraction0.floatValue(), 0.01F);
      assertEquals(-2516, fraction0.shortValue());
      assertEquals(-2516, fraction0.getProperWhole());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
  }

  @Test
  public void test31()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1750);
      Fraction fraction0 = Fraction.getFraction(int0, int1);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1750, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.invert();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Unable to invert zero.
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.reduce();
      assertEquals(0.25, fraction1.doubleValue(), 0.01D);
      assertEquals(0.25F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.byteValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertSame(fraction1, fraction0);
      assertSame(fraction0, fraction1);
      assertNotNull(fraction1);
  }

  @Test
  public void test33()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1750);
      Fraction fraction0 = Fraction.getFraction(int0, int1);
      assertEquals(1750, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getNumerator());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.reduce();
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1750, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getNumerator());
      assertFalse(int0 == int1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(int1 == int0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
  }

  @Test
  public void test34()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.reduce();
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
  }

  @Test
  public void test35()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
      }
  }

  @Test
  public void test36()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.invert();
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.25F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1.25, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.intValue());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(1, fraction1.shortValue());
      assertEquals(5, fraction1.getNumerator());
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      
      String string0 = fraction1.toProperString();
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.25F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1.25, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.intValue());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(1, fraction1.shortValue());
      assertEquals(5, fraction1.getNumerator());
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals("1 1/4", string0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(string0);
      
      Fraction fraction2 = Fraction.getFraction(string0);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction2.byteValue());
      assertEquals(1, fraction2.getProperNumerator());
      assertEquals(5, fraction2.getNumerator());
      assertEquals(1, fraction2.intValue());
      assertEquals(1.25, fraction2.doubleValue(), 0.01D);
      assertEquals(4, fraction2.getDenominator());
      assertEquals(1.25F, fraction2.floatValue(), 0.01F);
      assertEquals(1, fraction2.shortValue());
      assertEquals(1L, fraction2.longValue());
      assertEquals(1, fraction2.getProperWhole());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.25F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1.25, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.intValue());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(1, fraction1.shortValue());
      assertEquals(5, fraction1.getNumerator());
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertTrue(fraction2.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction2);
  }

  @Test
  public void test37()  throws Throwable  {
      String string0 = "Unable to invert zero.";
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Unable to invert zero.\"
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The string must not be null
         //
      }
  }

  @Test
  public void test39()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      String string0 = fraction0.toProperString();
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals("1/2", string0);
      assertNotNull(string0);
      
      Fraction fraction1 = Fraction.getFraction(string0);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertTrue(fraction1.equals((Object)fraction0));
      assertTrue(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
  }

  @Test
  public void test40()  throws Throwable  {
      double double0 = 1.7976931348623157E308;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(double0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The value must not be greater than Integer.MAX_VALUE or NaN
         //
      }
  }

  @Test
  public void test41()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      int int1 = (-1253);
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
      }
  }

  @Test
  public void test42()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Fraction fraction0 = Fraction.getReducedFraction(int0, int0);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
  }

  @Test
  public void test43()  throws Throwable  {
      int int0 = 1756;
      Fraction fraction0 = Fraction.getReducedFraction(int0, int0);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ONE_THIRD;
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.33333334F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(3, fraction1.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.3333333333333333, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      
      int int1 = fraction0.compareTo(fraction1);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.33333334F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(3, fraction1.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.3333333333333333, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(1, int1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      
      int int2 = Integer.MIN_VALUE;
      assertFalse(int2 == int1);
      
      // Undeclared exception!
      try {
        Fraction fraction2 = Fraction.getReducedFraction(int1, int2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
      }
  }

  @Test
  public void test44()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      assertEquals(0, fraction0.byteValue());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      int int0 = fraction0.intValue();
      assertEquals(0, fraction0.byteValue());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0, int0);
      
      Fraction fraction1 = Fraction.getFraction((double) int0);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getNumerator());
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
  }

  @Test
  public void test45()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
      }
  }

  @Test
  public void test46()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      int int1 = 0;
      int int2 = 3;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(int0, int1, int2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Numerator too large to represent as an Integer.
         //
      }
  }

  @Test
  public void test47()  throws Throwable  {
      int int0 = (-373);
      int int1 = 2230;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(int0, int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The numerator must not be negative
         //
      }
  }

  @Test
  public void test48()  throws Throwable  {
      int int0 = (-813);
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(int0, int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be negative
         //
      }
  }

  @Test
  public void test49()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertNotNull(fraction0);
      
      int int0 = 47;
      int int1 = fraction0.compareTo(fraction0);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = Fraction.getFraction(int0, int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
      }
  }

  @Test
  public void test50()  throws Throwable  {
      double double0 = (-1.0);
      Fraction fraction0 = Fraction.getFraction(double0);
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      short short0 = fraction0.shortValue();
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((short) (-1), short0);
      
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        Fraction fraction1 = Fraction.getFraction((int) short0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
      }
  }

  @Test
  public void test51()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
      }
  }

  @Test
  public void test52()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
      }
  }

  @Test
  public void test53()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(2, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.multiplyBy(fraction0);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0.25, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0.25F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(4, fraction1.getDenominator());
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      
      String string0 = fraction1.toProperString();
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0.25, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0.25F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(4, fraction1.getDenominator());
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals("1/4", string0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(string0);
  }

  @Test
  public void test54()  throws Throwable  {
      double double0 = (-2516.7771899664544);
      Fraction fraction0 = Fraction.getFraction(double0);
      assertEquals(-2516, fraction0.shortValue());
      assertEquals((-2516.777F), fraction0.floatValue(), 0.01F);
      assertEquals(8128, fraction0.getDenominator());
      assertEquals((-2516L), fraction0.longValue());
      assertEquals(-2516, fraction0.getProperWhole());
      assertEquals(6317, fraction0.getProperNumerator());
      assertEquals(-2516, fraction0.intValue());
      assertEquals(-20456365, fraction0.getNumerator());
      assertEquals(44, fraction0.byteValue());
      assertEquals((-2516.77718996063), fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      double double1 = fraction0.doubleValue();
      assertEquals(-2516, fraction0.shortValue());
      assertEquals((-2516.777F), fraction0.floatValue(), 0.01F);
      assertEquals(8128, fraction0.getDenominator());
      assertEquals((-2516L), fraction0.longValue());
      assertEquals(-2516, fraction0.getProperWhole());
      assertEquals(6317, fraction0.getProperNumerator());
      assertEquals(-2516, fraction0.intValue());
      assertEquals(-20456365, fraction0.getNumerator());
      assertEquals(44, fraction0.byteValue());
      assertEquals((-2516.77718996063), fraction0.doubleValue(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-2516.77718996063), double1, 0.01D);
  }

  @Test
  public void test55()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      float float0 = fraction0.floatValue();
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test56()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertNotNull(fraction0);
      
      long long0 = fraction0.longValue();
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0L, long0);
  }

  @Test
  public void test57()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.shortValue());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(1.5F, fraction1.floatValue(), 0.01F);
      assertEquals(1.5, fraction1.doubleValue(), 0.01D);
      assertEquals(2, fraction1.getDenominator());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
  }
}
