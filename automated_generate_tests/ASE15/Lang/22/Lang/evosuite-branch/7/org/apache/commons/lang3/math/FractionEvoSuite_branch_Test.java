/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:50:29 GMT 2014
 */

package org.apache.commons.lang3.math;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.lang3.math.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockArithmeticException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;


public class FractionEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Fraction fraction0 = Fraction.getReducedFraction(int0, int0);
      assertNotNull(fraction0);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperWhole());
      
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction0.multiplyBy(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotNull(fraction2);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction2.shortValue());
      assertEquals(0.5, fraction2.doubleValue(), 0.01D);
      assertEquals(2, fraction2.getDenominator());
      assertEquals(1, fraction2.getNumerator());
      assertEquals(1, fraction2.getProperNumerator());
      assertEquals(0.5F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      
      String string0 = fraction2.toProperString();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotNull(string0);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction2.shortValue());
      assertEquals(0.5, fraction2.doubleValue(), 0.01D);
      assertEquals(2, fraction2.getDenominator());
      assertEquals(1, fraction2.getNumerator());
      assertEquals(1, fraction2.getProperNumerator());
      assertEquals(0.5F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertEquals("1/2", string0);
  }

  @Test
  public void test01()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertNotNull(fraction0);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      
      Fraction fraction1 = fraction0.invert();
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
      assertEquals(4, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(4, fraction1.getNumerator());
      assertEquals(4, fraction1.intValue());
      assertEquals(4, fraction1.byteValue());
      assertEquals(4, fraction1.getProperWhole());
      assertEquals(4L, fraction1.longValue());
      assertEquals(4.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(4.0, fraction1.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      
      String string0 = fraction1.toProperString();
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(string0);
      assertEquals(4, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(4, fraction1.getNumerator());
      assertEquals(4, fraction1.intValue());
      assertEquals(4, fraction1.byteValue());
      assertEquals(4, fraction1.getProperWhole());
      assertEquals(4L, fraction1.longValue());
      assertEquals(4.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(4.0, fraction1.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals("4", string0);
  }

  @Test
  public void test02()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      
      int int0 = fraction0.hashCode();
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(23312, int0);
      
      Fraction fraction1 = Fraction.getReducedFraction(int0, int0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      
      String string0 = fraction1.toProperString();
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(string0);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals("1", string0);
  }

  @Test
  public void test03()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      
      String string0 = fraction1.toProperString();
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(string0);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals("0", string0);
  }

  @Test
  public void test04()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      
      String string0 = fraction0.toProperString();
      assertNotNull(string0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals("2/5", string0);
  }

  @Test
  public void test05()  throws Throwable  {
      double double0 = (-1.0);
      Fraction fraction0 = Fraction.getFraction(double0);
      assertNotNull(fraction0);
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(-1, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.byteValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.getProperWhole());
      assertEquals(-1, fraction0.getNumerator());
      
      String string0 = fraction0.toString();
      assertNotNull(string0);
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(-1, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.byteValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.getProperWhole());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals("-1/1", string0);
  }

  @Test
  public void test06()  throws Throwable  {
      double double0 = (-168.54861772);
      Fraction fraction0 = Fraction.getFraction(double0);
      assertNotNull(fraction0);
      assertEquals(-168, fraction0.getProperWhole());
      assertEquals(-168, fraction0.shortValue());
      assertEquals(88, fraction0.byteValue());
      assertEquals((-168.54861773117256), fraction0.doubleValue(), 0.01D);
      assertEquals(-168, fraction0.intValue());
      assertEquals(1151, fraction0.getProperNumerator());
      assertEquals(2098, fraction0.getDenominator());
      assertEquals((-168.54861F), fraction0.floatValue(), 0.01F);
      assertEquals((-168L), fraction0.longValue());
      assertEquals(-353615, fraction0.getNumerator());
      
      Fraction fraction1 = Fraction.FOUR_FIFTHS;
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(4, fraction1.getNumerator());
      assertEquals(0.8F, fraction1.floatValue(), 0.01F);
      assertEquals(0.8, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(4, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0L, fraction1.longValue());
      assertFalse(fraction1.equals((Object)fraction0));
      
      int int0 = fraction1.compareTo(fraction0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(4, fraction1.getNumerator());
      assertEquals(0.8F, fraction1.floatValue(), 0.01F);
      assertEquals(0.8, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(4, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0L, fraction1.longValue());
      assertEquals(-168, fraction0.getProperWhole());
      assertEquals(-168, fraction0.shortValue());
      assertEquals(88, fraction0.byteValue());
      assertEquals((-168.54861773117256), fraction0.doubleValue(), 0.01D);
      assertEquals(-168, fraction0.intValue());
      assertEquals(1151, fraction0.getProperNumerator());
      assertEquals(2098, fraction0.getDenominator());
      assertEquals((-168.54861F), fraction0.floatValue(), 0.01F);
      assertEquals((-168L), fraction0.longValue());
      assertEquals(-353615, fraction0.getNumerator());
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(1, int0);
  }

  @Test
  public void test07()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      
      Fraction fraction1 = fraction0.invert();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(4, fraction1.intValue());
      assertEquals(4L, fraction1.longValue());
      assertEquals(4, fraction1.shortValue());
      assertEquals(4, fraction1.getNumerator());
      assertEquals(4.0, fraction1.doubleValue(), 0.01D);
      assertEquals(4, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(4.0F, fraction1.floatValue(), 0.01F);
      assertEquals(4, fraction1.byteValue());
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction0.multiplyBy(fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotNull(fraction2);
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(4, fraction1.intValue());
      assertEquals(4L, fraction1.longValue());
      assertEquals(4, fraction1.shortValue());
      assertEquals(4, fraction1.getNumerator());
      assertEquals(4.0, fraction1.doubleValue(), 0.01D);
      assertEquals(4, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(4.0F, fraction1.floatValue(), 0.01F);
      assertEquals(4, fraction1.byteValue());
      assertEquals(1L, fraction2.longValue());
      assertEquals(1, fraction2.getProperWhole());
      assertEquals(1, fraction2.byteValue());
      assertEquals(1, fraction2.intValue());
      assertEquals(1, fraction2.shortValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(1, fraction2.getNumerator());
      assertEquals(1.0, fraction2.doubleValue(), 0.01D);
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      
      Fraction fraction3 = fraction0.divideBy(fraction0);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction3);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction3, fraction0);
      assertNotSame(fraction3, fraction2);
      assertNotSame(fraction3, fraction1);
      assertNotNull(fraction3);
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction3.getDenominator());
      assertEquals(1, fraction3.getProperWhole());
      assertEquals(1, fraction3.shortValue());
      assertEquals(1, fraction3.byteValue());
      assertEquals(1L, fraction3.longValue());
      assertEquals(1.0, fraction3.doubleValue(), 0.01D);
      assertEquals(1, fraction3.intValue());
      assertEquals(0, fraction3.getProperNumerator());
      assertEquals(1, fraction3.getNumerator());
      assertEquals(1.0F, fraction3.floatValue(), 0.01F);
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction3));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction3.equals((Object)fraction0));
      assertTrue(fraction3.equals((Object)fraction2));
      assertFalse(fraction3.equals((Object)fraction1));
      
      int int0 = fraction2.compareTo(fraction3);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction3);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction3);
      assertNotSame(fraction3, fraction0);
      assertNotSame(fraction3, fraction2);
      assertNotSame(fraction3, fraction1);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction3);
      assertNotSame(fraction2, fraction0);
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(4, fraction1.intValue());
      assertEquals(4L, fraction1.longValue());
      assertEquals(4, fraction1.shortValue());
      assertEquals(4, fraction1.getNumerator());
      assertEquals(4.0, fraction1.doubleValue(), 0.01D);
      assertEquals(4, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(4.0F, fraction1.floatValue(), 0.01F);
      assertEquals(4, fraction1.byteValue());
      assertEquals(1, fraction3.getDenominator());
      assertEquals(1, fraction3.getProperWhole());
      assertEquals(1, fraction3.shortValue());
      assertEquals(1, fraction3.byteValue());
      assertEquals(1L, fraction3.longValue());
      assertEquals(1.0, fraction3.doubleValue(), 0.01D);
      assertEquals(1, fraction3.intValue());
      assertEquals(0, fraction3.getProperNumerator());
      assertEquals(1, fraction3.getNumerator());
      assertEquals(1.0F, fraction3.floatValue(), 0.01F);
      assertEquals(1L, fraction2.longValue());
      assertEquals(1, fraction2.getProperWhole());
      assertEquals(1, fraction2.byteValue());
      assertEquals(1, fraction2.intValue());
      assertEquals(1, fraction2.shortValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(1, fraction2.getNumerator());
      assertEquals(1.0, fraction2.doubleValue(), 0.01D);
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction3));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction3));
      assertFalse(fraction3.equals((Object)fraction0));
      assertTrue(fraction3.equals((Object)fraction2));
      assertFalse(fraction3.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction1));
      assertTrue(fraction2.equals((Object)fraction3));
      assertFalse(fraction2.equals((Object)fraction0));
      assertEquals(0, int0);
  }

  @Test
  public void test08()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = fraction0.reduce();
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      
      int int0 = fraction1.compareTo(fraction0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(0, int0);
  }

  @Test
  public void test09()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      
      Fraction fraction1 = Fraction.TWO_THIRDS;
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(0.6666666666666666, fraction1.doubleValue(), 0.01D);
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.6666667F, fraction1.floatValue(), 0.01F);
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(3, fraction1.getDenominator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertFalse(fraction1.equals((Object)fraction0));
      
      int int0 = fraction0.compareTo(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.6666666666666666, fraction1.doubleValue(), 0.01D);
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.6666667F, fraction1.floatValue(), 0.01F);
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(3, fraction1.getDenominator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((-1), int0);
  }

  @Test
  public void test10()  throws Throwable  {
      double double0 = (-261.78454785073);
      Fraction fraction0 = Fraction.getFraction(double0);
      assertNotNull(fraction0);
      assertEquals(-261, fraction0.intValue());
      assertEquals(4468, fraction0.getProperNumerator());
      assertEquals(-261, fraction0.shortValue());
      assertEquals((-261L), fraction0.longValue());
      assertEquals((-261.7845478489903), fraction0.doubleValue(), 0.01D);
      assertEquals(-5, fraction0.byteValue());
      assertEquals(-261, fraction0.getProperWhole());
      assertEquals(5695, fraction0.getDenominator());
      assertEquals((-261.78455F), fraction0.floatValue(), 0.01F);
      assertEquals(-1490863, fraction0.getNumerator());
      
      int int0 = fraction0.hashCode();
      assertEquals(-261, fraction0.intValue());
      assertEquals(4468, fraction0.getProperNumerator());
      assertEquals(-261, fraction0.shortValue());
      assertEquals((-261L), fraction0.longValue());
      assertEquals((-261.7845478489903), fraction0.doubleValue(), 0.01D);
      assertEquals(-5, fraction0.byteValue());
      assertEquals(-261, fraction0.getProperWhole());
      assertEquals(5695, fraction0.getDenominator());
      assertEquals((-261.78455F), fraction0.floatValue(), 0.01F);
      assertEquals(-1490863, fraction0.getNumerator());
      assertEquals((-55132963), int0);
  }

  @Test
  public void test11()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(0.4, fraction1.doubleValue(), 0.01D);
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.4F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      
      boolean boolean0 = fraction1.equals((Object) fraction0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(0.4, fraction1.doubleValue(), 0.01D);
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.4F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      
      short short0 = fraction0.shortValue();
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, short0);
      
      boolean boolean0 = fraction0.equals((Object) short0);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertFalse(boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      double double0 = (-40.40304);
      Fraction fraction0 = Fraction.getFraction(double0);
      assertNotNull(fraction0);
      assertEquals((-40L), fraction0.longValue());
      assertEquals(-252519, fraction0.getNumerator());
      assertEquals(-40, fraction0.intValue());
      assertEquals((-40.40304F), fraction0.floatValue(), 0.01F);
      assertEquals(2519, fraction0.getProperNumerator());
      assertEquals(6250, fraction0.getDenominator());
      assertEquals(-40, fraction0.getProperWhole());
      assertEquals((-40.40304), fraction0.doubleValue(), 0.01D);
      assertEquals(-40, fraction0.shortValue());
      assertEquals(-40, fraction0.byteValue());
      
      Fraction fraction1 = Fraction.ZERO;
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertFalse(fraction1.equals((Object)fraction0));
      
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.divideBy(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The fraction to divide by must not be zero
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      assertNotNull(fraction0);
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.divideBy(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      
      Fraction fraction1 = Fraction.ZERO;
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction0.multiplyBy(fraction1);
      assertNotSame(fraction2, fraction0);
      assertSame(fraction2, fraction1);
      assertSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction2);
      assertEquals(0, fraction2.shortValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
  }

  @Test
  public void test16()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertNotNull(fraction0);
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.multiplyBy(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      
      int int0 = fraction0.getProperNumerator();
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(2, int0);
      
      int int1 = 0;
      assertFalse(int1 == int0);
      
      Fraction fraction1 = Fraction.getFraction(int1, int0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertFalse(int0 == int1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(int1 == int0);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction0.add(fraction1);
      assertSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction2);
      assertEquals(2, fraction2.getProperNumerator());
      assertEquals(2, fraction2.getNumerator());
      assertEquals(0, fraction2.intValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.byteValue());
      assertEquals(5, fraction2.getDenominator());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0, fraction2.shortValue());
      assertEquals(0.4, fraction2.doubleValue(), 0.01D);
      assertEquals(0.4F, fraction2.floatValue(), 0.01F);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertFalse(int0 == int1);
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(int1 == int0);
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test
  public void test18()  throws Throwable  {
      double double0 = 0.0;
      Fraction fraction0 = Fraction.getFraction(double0);
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperNumerator());
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertSame(fraction1, fraction0);
      assertSame(fraction0, fraction1);
      assertNotNull(fraction1);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperNumerator());
  }

  @Test
  public void test19()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      assertNotNull(fraction0);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.subtract(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      
      int int0 = fraction0.hashCode();
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(23389, int0);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.pow(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mulPos
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      double double0 = (-168.54861772);
      Fraction fraction0 = Fraction.getFraction(double0);
      assertNotNull(fraction0);
      assertEquals(-168, fraction0.shortValue());
      assertEquals((-168L), fraction0.longValue());
      assertEquals(-168, fraction0.getProperWhole());
      assertEquals(-168, fraction0.intValue());
      assertEquals(88, fraction0.byteValue());
      assertEquals((-168.54861773117256), fraction0.doubleValue(), 0.01D);
      assertEquals(1151, fraction0.getProperNumerator());
      assertEquals((-168.54861F), fraction0.floatValue(), 0.01F);
      assertEquals(2098, fraction0.getDenominator());
      assertEquals(-353615, fraction0.getNumerator());
      
      Fraction fraction1 = fraction0.invert();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(-168, fraction0.shortValue());
      assertEquals((-168L), fraction0.longValue());
      assertEquals(-168, fraction0.getProperWhole());
      assertEquals(-168, fraction0.intValue());
      assertEquals(88, fraction0.byteValue());
      assertEquals((-168.54861773117256), fraction0.doubleValue(), 0.01D);
      assertEquals(1151, fraction0.getProperNumerator());
      assertEquals((-168.54861F), fraction0.floatValue(), 0.01F);
      assertEquals(2098, fraction0.getDenominator());
      assertEquals(-353615, fraction0.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals((-0.0059330063F), fraction1.floatValue(), 0.01F);
      assertEquals(2098, fraction1.getProperNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(-2098, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals((-0.005933006235595209), fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(353615, fraction1.getDenominator());
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction1.add(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      
      double double0 = (-4085.36580410673);
      Fraction fraction1 = Fraction.getFraction(double0);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(9352, fraction1.getDenominator());
      assertEquals((-4085L), fraction1.longValue());
      assertEquals(-4085, fraction1.intValue());
      assertEquals((-4085.3658041060735), fraction1.doubleValue(), 0.01D);
      assertEquals(-4085, fraction1.shortValue());
      assertEquals(3421, fraction1.getProperNumerator());
      assertEquals(-4085, fraction1.getProperWhole());
      assertEquals(11, fraction1.byteValue());
      assertEquals(-38206341, fraction1.getNumerator());
      assertEquals((-4085.3657F), fraction1.floatValue(), 0.01F);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction1.add(fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction2);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(-4084, fraction2.getProperWhole());
      assertEquals((-4084L), fraction2.longValue());
      assertEquals(9352, fraction2.getDenominator());
      assertEquals(-4084, fraction2.intValue());
      assertEquals(-4084, fraction2.shortValue());
      assertEquals((-4084.3658041060735), fraction2.doubleValue(), 0.01D);
      assertEquals(12, fraction2.byteValue());
      assertEquals((-4084.3657F), fraction2.floatValue(), 0.01F);
      assertEquals(3421, fraction2.getProperNumerator());
      assertEquals(-38196989, fraction2.getNumerator());
      assertEquals(9352, fraction1.getDenominator());
      assertEquals((-4085L), fraction1.longValue());
      assertEquals(-4085, fraction1.intValue());
      assertEquals((-4085.3658041060735), fraction1.doubleValue(), 0.01D);
      assertEquals(-4085, fraction1.shortValue());
      assertEquals(3421, fraction1.getProperNumerator());
      assertEquals(-4085, fraction1.getProperWhole());
      assertEquals(11, fraction1.byteValue());
      assertEquals(-38206341, fraction1.getNumerator());
      assertEquals((-4085.3657F), fraction1.floatValue(), 0.01F);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test
  public void test23()  throws Throwable  {
      double double0 = 0.0;
      Fraction fraction0 = Fraction.getFraction(double0);
      assertNotNull(fraction0);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      
      int int0 = fraction0.hashCode();
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(23274, int0);
      
      Fraction fraction1 = fraction0.pow(int0);
      assertSame(fraction1, fraction0);
      assertSame(fraction0, fraction1);
      assertNotNull(fraction1);
      assertEquals(0, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
  }

  @Test
  public void test24()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      
      int int0 = 0;
      Fraction fraction1 = fraction0.pow(int0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.intValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
  }

  @Test
  public void test25()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.pow(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      
      Fraction fraction1 = fraction0.abs();
      assertSame(fraction1, fraction0);
      assertSame(fraction0, fraction1);
      assertNotNull(fraction1);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
  }

  @Test
  public void test27()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      
      int int0 = fraction0.getProperNumerator();
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, int0);
      
      int int1 = (-1740);
      assertFalse(int1 == int0);
      
      Fraction fraction1 = Fraction.getReducedFraction(int0, int1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((-0.0011494252873563218), fraction1.doubleValue(), 0.01D);
      assertEquals(870, fraction1.getDenominator());
      assertEquals((-0.0011494253F), fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(-1, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getProperWhole());
      assertFalse(int1 == int0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(int0 == int1);
      
      Fraction fraction2 = fraction1.abs();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotNull(fraction2);
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((-0.0011494252873563218), fraction1.doubleValue(), 0.01D);
      assertEquals(870, fraction1.getDenominator());
      assertEquals((-0.0011494253F), fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(-1, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(1, fraction2.getNumerator());
      assertEquals(0.0011494253F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.shortValue());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0.0011494252873563218, fraction2.doubleValue(), 0.01D);
      assertEquals(870, fraction2.getDenominator());
      assertEquals(1, fraction2.getProperNumerator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.intValue());
      assertFalse(int1 == int0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(int0 == int1);
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
  }

  @Test
  public void test28()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      
      short short0 = fraction0.shortValue();
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, short0);
      
      int int0 = (-1);
      Fraction fraction1 = Fraction.getFraction((int) short0, int0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      
      Fraction fraction2 = fraction1.subtract(fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotNull(fraction2);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(1, fraction2.getProperNumerator());
      assertEquals(0, fraction2.byteValue());
      assertEquals(5, fraction2.getDenominator());
      assertEquals(-1, fraction2.getNumerator());
      assertEquals((-0.2), fraction2.doubleValue(), 0.01D);
      assertEquals(0, fraction2.shortValue());
      assertEquals(0, fraction2.intValue());
      assertEquals((-0.2F), fraction2.floatValue(), 0.01F);
      assertEquals(0L, fraction2.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
  }

  @Test
  public void test29()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertNotNull(fraction0);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      
      int int0 = (-1);
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction1.pow(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Unable to invert zero.
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(2, fraction0.getNumerator());
      
      int int0 = fraction0.getProperNumerator();
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, int0);
      
      int int1 = 0;
      assertFalse(int1 == int0);
      
      Fraction fraction1 = Fraction.getFraction(int1, int0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      Fraction fraction2 = fraction1.reduce();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotNull(fraction2);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction2.shortValue());
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test31()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertNotNull(fraction0);
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      
      Fraction fraction1 = fraction0.reduce();
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
  }

  @Test
  public void test32()  throws Throwable  {
      double double0 = (-1.0);
      Fraction fraction0 = Fraction.getFraction(double0);
      assertNotNull(fraction0);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.getProperWhole());
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      
      String string0 = fraction0.toProperString();
      assertNotNull(string0);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.getProperWhole());
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals("-1", string0);
      
      Fraction fraction1 = Fraction.getFraction(string0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
      assertEquals(-1, fraction1.shortValue());
      assertEquals(-1, fraction1.intValue());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals(-1, fraction1.getProperWhole());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(-1, fraction1.byteValue());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01D);
      assertEquals((-1L), fraction1.longValue());
      assertEquals(-1, fraction1.getNumerator());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.getProperWhole());
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertTrue(fraction1.equals((Object)fraction0));
      assertTrue(fraction0.equals((Object)fraction1));
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = "4 ]-Dm,RPcP&H%Bc";
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The fraction could not be parsed as the format X Y/Z
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      
      String string0 = fraction0.toString();
      assertNotNull(string0);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals("2/5", string0);
      
      Fraction fraction1 = Fraction.getFraction(string0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.4, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.4F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertTrue(fraction1.equals((Object)fraction0));
      assertTrue(fraction0.equals((Object)fraction1));
  }

  @Test
  public void test35()  throws Throwable  {
      String string0 = "DHzer30.No}N|D|J";
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"DHzer30.No}N|D|J\"
         //
      }
  }

  @Test
  public void test36()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The string must not be null
         //
      }
  }

  @Test
  public void test37()  throws Throwable  {
      double double0 = 1.7976931348623157E308;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(double0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The value must not be greater than Integer.MAX_VALUE or NaN
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      int int0 = 549;
      int int1 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
      }
  }

  @Test
  public void test39()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(4, fraction0.getDenominator());
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = Fraction.getReducedFraction(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
      }
  }

  @Test
  public void test40()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      int int1 = 1751;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(int0, int1, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Numerator too large to represent as an Integer.
         //
      }
  }

  @Test
  public void test41()  throws Throwable  {
      double double0 = (-40.40304);
      Fraction fraction0 = Fraction.getFraction(double0);
      assertNotNull(fraction0);
      assertEquals((-40L), fraction0.longValue());
      assertEquals(-252519, fraction0.getNumerator());
      assertEquals(2519, fraction0.getProperNumerator());
      assertEquals(-40, fraction0.shortValue());
      assertEquals((-40.40304), fraction0.doubleValue(), 0.01D);
      assertEquals((-40.40304F), fraction0.floatValue(), 0.01F);
      assertEquals(-40, fraction0.byteValue());
      assertEquals(-40, fraction0.intValue());
      assertEquals(6250, fraction0.getDenominator());
      assertEquals(-40, fraction0.getProperWhole());
      
      String string0 = fraction0.toProperString();
      assertNotNull(string0);
      assertEquals((-40L), fraction0.longValue());
      assertEquals(-252519, fraction0.getNumerator());
      assertEquals(2519, fraction0.getProperNumerator());
      assertEquals(-40, fraction0.shortValue());
      assertEquals((-40.40304), fraction0.doubleValue(), 0.01D);
      assertEquals((-40.40304F), fraction0.floatValue(), 0.01F);
      assertEquals(-40, fraction0.byteValue());
      assertEquals(-40, fraction0.intValue());
      assertEquals(6250, fraction0.getDenominator());
      assertEquals(-40, fraction0.getProperWhole());
      assertEquals("-40 2519/6250", string0);
      
      Fraction fraction1 = Fraction.getFraction(string0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals((-40L), fraction0.longValue());
      assertEquals(-252519, fraction0.getNumerator());
      assertEquals(2519, fraction0.getProperNumerator());
      assertEquals(-40, fraction0.shortValue());
      assertEquals((-40.40304), fraction0.doubleValue(), 0.01D);
      assertEquals((-40.40304F), fraction0.floatValue(), 0.01F);
      assertEquals(-40, fraction0.byteValue());
      assertEquals(-40, fraction0.intValue());
      assertEquals(6250, fraction0.getDenominator());
      assertEquals(-40, fraction0.getProperWhole());
      assertEquals(-40, fraction1.shortValue());
      assertEquals(-40, fraction1.byteValue());
      assertEquals(2519, fraction1.getProperNumerator());
      assertEquals(-40, fraction1.getProperWhole());
      assertEquals(6250, fraction1.getDenominator());
      assertEquals((-40L), fraction1.longValue());
      assertEquals(-252519, fraction1.getNumerator());
      assertEquals(-40, fraction1.intValue());
      assertEquals((-40.40304), fraction1.doubleValue(), 0.01D);
      assertEquals((-40.40304F), fraction1.floatValue(), 0.01F);
      assertTrue(fraction0.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test
  public void test42()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      
      int int0 = (-1);
      int int1 = fraction0.getNumerator();
      assertEquals(0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = Fraction.getFraction(int0, int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The numerator must not be negative
         //
      }
  }

  @Test
  public void test43()  throws Throwable  {
      int int0 = 2726;
      int int1 = (-1294);
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(int0, int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be negative
         //
      }
  }

  @Test
  public void test44()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      
      int int0 = fraction0.getProperWhole();
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = Fraction.getFraction(int0, int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
      }
  }

  @Test
  public void test45()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertNotNull(fraction0);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      
      short short0 = fraction0.shortValue();
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals((short)0, short0);
      
      int int0 = fraction0.getNumerator();
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, int0);
      
      Fraction fraction1 = Fraction.getFraction((int) short0, (int) short0, int0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
  }

  @Test
  public void test46()  throws Throwable  {
      double double0 = 693.3593524423309;
      Fraction fraction0 = Fraction.getFraction(double0);
      assertNotNull(fraction0);
      assertEquals(9698, fraction0.getDenominator());
      assertEquals(693, fraction0.shortValue());
      assertEquals(-75, fraction0.byteValue());
      assertEquals(6724199, fraction0.getNumerator());
      assertEquals(693, fraction0.getProperWhole());
      assertEquals(3485, fraction0.getProperNumerator());
      assertEquals(693L, fraction0.longValue());
      assertEquals(693.3594F, fraction0.floatValue(), 0.01F);
      assertEquals(693, fraction0.intValue());
      assertEquals(693.3593524438029, fraction0.doubleValue(), 0.01D);
      
      int int0 = fraction0.getNumerator();
      assertEquals(9698, fraction0.getDenominator());
      assertEquals(693, fraction0.shortValue());
      assertEquals(-75, fraction0.byteValue());
      assertEquals(6724199, fraction0.getNumerator());
      assertEquals(693, fraction0.getProperWhole());
      assertEquals(3485, fraction0.getProperNumerator());
      assertEquals(693L, fraction0.longValue());
      assertEquals(693.3594F, fraction0.floatValue(), 0.01F);
      assertEquals(693, fraction0.intValue());
      assertEquals(693.3593524438029, fraction0.doubleValue(), 0.01D);
      assertEquals(6724199, int0);
      
      int int1 = Integer.MIN_VALUE;
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = Fraction.getFraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
      }
  }

  @Test
  public void test47()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
      }
  }

  @Test
  public void test48()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
      }
  }

  @Test
  public void test49()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      
      Fraction fraction1 = Fraction.TWO_THIRDS;
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(3, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.6666666666666666, fraction1.doubleValue(), 0.01D);
      assertEquals(0.6666667F, fraction1.floatValue(), 0.01F);
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(2, fraction1.getProperNumerator());
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotNull(fraction2);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(3, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.6666666666666666, fraction1.doubleValue(), 0.01D);
      assertEquals(0.6666667F, fraction1.floatValue(), 0.01F);
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction2.shortValue());
      assertEquals((-0.33333334F), fraction2.floatValue(), 0.01F);
      assertEquals((-0.3333333333333333), fraction2.doubleValue(), 0.01D);
      assertEquals(0, fraction2.intValue());
      assertEquals(3, fraction2.getDenominator());
      assertEquals(1, fraction2.getProperNumerator());
      assertEquals(-1, fraction2.getNumerator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0, fraction2.getProperWhole());
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      
      Fraction fraction3 = fraction0.add(fraction2);
      assertNotSame(fraction1, fraction3);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction3, fraction2);
      assertNotSame(fraction3, fraction1);
      assertNotSame(fraction3, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction3);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction3);
      assertNotNull(fraction3);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(3, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.6666666666666666, fraction1.doubleValue(), 0.01D);
      assertEquals(0.6666667F, fraction1.floatValue(), 0.01F);
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(0, fraction3.getNumerator());
      assertEquals(0, fraction3.getProperWhole());
      assertEquals(0, fraction3.intValue());
      assertEquals(0.0, fraction3.doubleValue(), 0.01D);
      assertEquals(0L, fraction3.longValue());
      assertEquals(0, fraction3.shortValue());
      assertEquals(1, fraction3.getDenominator());
      assertEquals(0, fraction3.getProperNumerator());
      assertEquals(0.0F, fraction3.floatValue(), 0.01F);
      assertEquals(0, fraction3.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction2.shortValue());
      assertEquals((-0.33333334F), fraction2.floatValue(), 0.01F);
      assertEquals((-0.3333333333333333), fraction2.doubleValue(), 0.01D);
      assertEquals(0, fraction2.intValue());
      assertEquals(3, fraction2.getDenominator());
      assertEquals(1, fraction2.getProperNumerator());
      assertEquals(-1, fraction2.getNumerator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0, fraction2.getProperWhole());
      assertFalse(fraction1.equals((Object)fraction3));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction3.equals((Object)fraction2));
      assertFalse(fraction3.equals((Object)fraction1));
      assertFalse(fraction3.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction3));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction3));
      
      Fraction fraction4 = fraction3.reduce();
      assertNotSame(fraction1, fraction3);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction4);
      assertNotSame(fraction3, fraction2);
      assertNotSame(fraction3, fraction1);
      assertSame(fraction3, fraction4);
      assertNotSame(fraction3, fraction0);
      assertSame(fraction4, fraction3);
      assertNotSame(fraction4, fraction1);
      assertNotSame(fraction4, fraction2);
      assertNotSame(fraction4, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction4);
      assertNotSame(fraction0, fraction3);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction4);
      assertNotSame(fraction2, fraction3);
      assertNotNull(fraction4);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(3, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.6666666666666666, fraction1.doubleValue(), 0.01D);
      assertEquals(0.6666667F, fraction1.floatValue(), 0.01F);
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(0, fraction3.getNumerator());
      assertEquals(0, fraction3.getProperWhole());
      assertEquals(0, fraction3.intValue());
      assertEquals(0.0, fraction3.doubleValue(), 0.01D);
      assertEquals(0L, fraction3.longValue());
      assertEquals(0, fraction3.shortValue());
      assertEquals(1, fraction3.getDenominator());
      assertEquals(0, fraction3.getProperNumerator());
      assertEquals(0.0F, fraction3.floatValue(), 0.01F);
      assertEquals(0, fraction3.byteValue());
      assertEquals(0, fraction4.getProperNumerator());
      assertEquals(0, fraction4.getNumerator());
      assertEquals(1, fraction4.getDenominator());
      assertEquals(0, fraction4.shortValue());
      assertEquals(0, fraction4.getProperWhole());
      assertEquals(0.0, fraction4.doubleValue(), 0.01D);
      assertEquals(0, fraction4.intValue());
      assertEquals(0, fraction4.byteValue());
      assertEquals(0.0F, fraction4.floatValue(), 0.01F);
      assertEquals(0L, fraction4.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction2.shortValue());
      assertEquals((-0.33333334F), fraction2.floatValue(), 0.01F);
      assertEquals((-0.3333333333333333), fraction2.doubleValue(), 0.01D);
      assertEquals(0, fraction2.intValue());
      assertEquals(3, fraction2.getDenominator());
      assertEquals(1, fraction2.getProperNumerator());
      assertEquals(-1, fraction2.getNumerator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0, fraction2.getProperWhole());
      assertFalse(fraction1.equals((Object)fraction3));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction4));
      assertFalse(fraction3.equals((Object)fraction2));
      assertFalse(fraction3.equals((Object)fraction1));
      assertFalse(fraction3.equals((Object)fraction0));
      assertFalse(fraction4.equals((Object)fraction1));
      assertFalse(fraction4.equals((Object)fraction2));
      assertFalse(fraction4.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction4));
      assertFalse(fraction0.equals((Object)fraction3));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction4));
      assertFalse(fraction2.equals((Object)fraction3));
  }

  @Test
  public void test50()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      
      double double0 = fraction0.doubleValue();
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.5, double0, 0.01D);
  }

  @Test
  public void test51()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      
      float float0 = fraction0.floatValue();
      assertEquals(0, fraction0.intValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0.5F, float0, 0.01F);
  }

  @Test
  public void test52()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      
      long long0 = fraction0.longValue();
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, long0);
  }

  @Test
  public void test53()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
  }
}
