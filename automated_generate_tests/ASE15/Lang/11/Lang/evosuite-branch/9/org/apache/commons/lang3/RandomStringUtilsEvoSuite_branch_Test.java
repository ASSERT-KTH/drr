/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:27:55 GMT 2014
 */

package org.apache.commons.lang3;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Random;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;


public class RandomStringUtilsEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      char[] charArray0 = new char[6];
      int int0 = 0;
      String string0 = RandomStringUtils.randomAlphanumeric(int0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random((int) charArray0[3], string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = (-2822);
      boolean boolean0 = false;
      char char0 = 'v';
      String string0 = RandomStringUtils.random((int) char0, int0, (int) char0, boolean0, boolean0);
      assertEquals("\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA\uF4FA", string0);
      assertNotNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      boolean boolean0 = false;
      boolean boolean1 = true;
      char[] charArray0 = new char[6];
      char char0 = 'l';
      charArray0[0] = char0;
      charArray0[1] = char0;
      charArray0[3] = charArray0[1];
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random((int) charArray0[0], int0, (int) charArray0[3], boolean1, boolean0, charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'l', 'l', '\u0000', 'l', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals("llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll", string0);
      assertNotNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      char char0 = 'h';
      String string0 = RandomStringUtils.random((int) char0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = (-1198);
      boolean boolean0 = false;
      char[] charArray0 = new char[6];
      char char0 = 'l';
      // Undeclared exception!
      try {
        String string0 = RandomStringUtils.random(int0, (int) char0, (int) char0, boolean0, boolean0, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1198 is less than 0.
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 2294;
      String string0 = RandomStringUtils.randomAscii(int0);
      assertEqualsstring0);
      assertNotNull(string0);
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = (-1257);
      // Undeclared exception!
      try {
        String string0 = RandomStringUtils.randomNumeric(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1257 is less than 0.
         //
      }
  }
}
