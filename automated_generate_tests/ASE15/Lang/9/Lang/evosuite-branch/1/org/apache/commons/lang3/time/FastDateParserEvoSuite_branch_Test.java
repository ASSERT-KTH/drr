/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:33:10 GMT 2014
 */

package org.apache.commons.lang3.time;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;




import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;


public class FastDateParserEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      int int0 = (-18);
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-18), (int)integer0);
      
      String string0 = "Z";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((int) integer0, string0);
      assertNotNull(simpleTimeZone0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals("Z", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(-18, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=Z,offset=-18,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      assertNotNull(locale0);
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JP", locale0.getVariant());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals("Z", fastDateParser0.getPattern());
      assertEquals("Z", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(-18, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=Z,offset=-18,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JP", locale0.getVariant());
      
      String string1 = "GMTAsia/Sakhalin";
      assertNotSame(string1, string0);
      
      Date date0 = (Date)fastDateParser0.parseObject(string1);
      assertNotNull(date0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("Z", fastDateParser0.getPattern());
      assertEquals("Z", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(-18, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=Z,offset=-18,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JP", locale0.getVariant());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "\\Z\\xj4$l";
      int int0 = (-585);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(-585, simpleTimeZone0.getRawOffset());
      assertEquals("\\Z\\xj4$l", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=\\Z\\xj4$l,offset=-585,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string0, simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"\\Z\\xj4$l\" ; gave up at index 3
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "@:h";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("@:h", fastDateParser0.getPattern());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("GMT", zoneInfo0.getID());
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = ";yqvnXF#ohh7|";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \";yqvnXF#ohh7|\" ; gave up at index 2
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "y:`m";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("y:`m", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = (-3570);
      String string0 = "'lAid}b7Dc#g0-l-,";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals(-3570, simpleTimeZone0.getRawOffset());
      assertEquals("'lAid}b7Dc#g0-l-,", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id='lAid}b7Dc#g0-l-,,offset=-3570,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      
      String string1 = "_H8V*Sy/";
      assertNotSame(string1, string0);
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string1, simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"_H8V*Sy/\" ; gave up at index 3
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "~3K7~UINV%d";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"~3K7~UINV%d\" ; gave up at index 5
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "4dkxtl>a.upMGICY][";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      assertNotNull(locale0);
      assertEquals("JP", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"4dkxtl>a.upMGICY][\" ; gave up at index 3
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "2dQ;#2k4OR|?";
      int int0 = 1649;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=2dQ;#2k4OR|?,offset=1649,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1649, simpleTimeZone0.getRawOffset());
      assertEquals("2dQ;#2k4OR|?", simpleTimeZone0.getID());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string0, simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"2dQ;#2k4OR|?\" ; gave up at index 2
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "ky<F0@a'WI\\j";
      int int0 = 1674;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(1674, simpleTimeZone0.getRawOffset());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string0, simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"ky<F0@a'WI\\j\" ; gave up at index 7
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "[|y/<$7vH#2b;";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"[|y/<$7vH#2b;\" ; gave up at index 7
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "NZ";
      int int0 = (-1463);
      String string1 = ".L";
      assertNotSame(string1, string0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertEquals("NZ", simpleTimeZone0.getID());
      assertEquals(-1463, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=NZ,offset=-1463,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      Locale locale0 = new Locale(string0);
      assertNotNull(locale0);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertEquals("nz", locale0.toString());
      assertEquals("nz", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string1, simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \".L\" ; gave up at index 1
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "*WD#K!%_uq(4FqP19:I";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"*WD#K!%_uq(4FqP19:I\" ; gave up at index 8
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      String string0 = "(T-h3*e";
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"(T-h3*e\" ; gave up at index 1
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "-ZwW>3";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("-ZwW>3", fastDateParser0.getPattern());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("GMT", zoneInfo0.getID());
      
      int int0 = 1120;
      int int1 = fastDateParser0.adjustYear(int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("-ZwW>3", fastDateParser0.getPattern());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(3020, int1);
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++\" ; gave up at index 83
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "`=8s)#";
      int int0 = (-3090);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=`=8s)#,offset=-3090,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(-3090, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("`=8s)#", simpleTimeZone0.getID());
      
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      assertNotNull(locale0);
      assertEquals("JP", locale0.getCountry());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("`=8s)#", fastDateParser0.getPattern());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=`=8s)#,offset=-3090,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(-3090, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("`=8s)#", simpleTimeZone0.getID());
      
      try {
        Object object0 = fastDateParser0.parseObject(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"`=8s)#\" does not match `=8(\\p{IsNd}++)\\)#
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = ",";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals(",", fastDateParser0.getPattern());
      
      Locale locale1 = new Locale(string0);
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals(",", locale1.toString());
      assertEquals(",", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      
      FastDateParser fastDateParser1 = new FastDateParser(string0, zoneInfo0, locale1);
      assertNotNull(fastDateParser1);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertNotSame(locale1, locale0);
      assertNotSame(fastDateParser1, fastDateParser0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("", locale1.getVariant());
      assertEquals(",", locale1.toString());
      assertEquals(",", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals(",", fastDateParser1.getPattern());
      
      boolean boolean0 = fastDateParser0.equals((Object) fastDateParser1);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(fastDateParser0.equals((Object)fastDateParser1));
      assertNotSame(locale1, locale0);
      assertNotSame(fastDateParser1, fastDateParser0);
      assertNotSame(locale0, locale1);
      assertNotSame(fastDateParser0, fastDateParser1);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("", locale1.getVariant());
      assertEquals(",", locale1.toString());
      assertEquals(",", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals(",", fastDateParser1.getPattern());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals(",", fastDateParser0.getPattern());
      assertFalse(boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "6zMw3D&5+a";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.forLanguageTag(string0);
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("6zMw3D&5+a", fastDateParser0.getPattern());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("GMT", zoneInfo0.getID());
      
      String string1 = "{\"";
      assertNotSame(string1, string0);
      
      FastDateParser fastDateParser1 = new FastDateParser(string1, zoneInfo0, locale0);
      assertNotNull(fastDateParser1);
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(fastDateParser1, fastDateParser0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("{\"", fastDateParser1.getPattern());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("GMT", zoneInfo0.getID());
      
      boolean boolean0 = fastDateParser0.equals((Object) fastDateParser1);
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertFalse(fastDateParser0.equals((Object)fastDateParser1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(fastDateParser1, fastDateParser0);
      assertNotSame(fastDateParser0, fastDateParser1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("{\"", fastDateParser1.getPattern());
      assertEquals("6zMw3D&5+a", fastDateParser0.getPattern());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = ",";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals(",", fastDateParser0.getPattern());
      
      boolean boolean0 = fastDateParser0.equals((Object) string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals(",", fastDateParser0.getPattern());
      assertFalse(boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = ",";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(",", fastDateParser0.getPattern());
      
      boolean boolean0 = fastDateParser0.equals((Object) fastDateParser0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(",", fastDateParser0.getPattern());
      assertTrue(boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      String string0 = "e3b3lh;[hw_tYj";
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "1,1m?\\+|E";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = new Locale(string0);
      assertNotNull(locale0);
      assertEquals("1,1m?\\+|e", locale0.toString());
      assertEquals("1,1m?\\+|e", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("1,1m?\\+|E", fastDateParser0.getPattern());
      assertEquals("1,1m?\\+|e", locale0.toString());
      assertEquals("1,1m?\\+|e", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      Locale locale1 = fastDateParser0.getLocale();
      assertNotNull(locale1);
      assertSame(locale1, locale0);
      assertSame(locale0, locale1);
      assertEquals("1,1m?\\+|e", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("1,1m?\\+|e", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("1,1m?\\+|E", fastDateParser0.getPattern());
      assertEquals("1,1m?\\+|e", locale0.toString());
      assertEquals("1,1m?\\+|e", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "=W^";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("=W^", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      
      int int0 = 8;
      int int1 = fastDateParser0.adjustYear(int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("=W^", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(2008, int1);
      
      ParsePosition parsePosition0 = new ParsePosition(int1);
      assertNotNull(parsePosition0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(2008, parsePosition0.getIndex());
      assertEquals(-1, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=2008,errorIndex=-1]", parsePosition0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("=W^", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      
      // Undeclared exception!
      try {
        Object object0 = fastDateParser0.parseObject(string0, parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2005
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = ",";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals(",", fastDateParser0.getPattern());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("GMT", zoneInfo0.getID());
      
      String string1 = fastDateParser0.toString();
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(",", fastDateParser0.getPattern());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("FastDateParser[,,de,GMT]", string1);
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = "6zMw3D&5+a";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.forLanguageTag(string0);
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("6zMw3D&5+a", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      
      String string1 = fastDateParser0.getPattern();
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("6zMw3D&5+a", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("6zMw3D&5+a", string1);
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = "-ZwW>3";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("-ZwW>3", fastDateParser0.getPattern());
      
      ZoneInfo zoneInfo1 = (ZoneInfo)fastDateParser0.getTimeZone();
      assertNotNull(zoneInfo1);
      assertSame(zoneInfo0, zoneInfo1);
      assertSame(zoneInfo1, zoneInfo0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("-ZwW>3", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo1.getID());
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = ",";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(",", fastDateParser0.getPattern());
      
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertNotNull(pattern0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(",", fastDateParser0.getPattern());
      assertEquals(",", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals(",", pattern0.pattern());
  }

  @Test
  public void test28()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      String string0 = "EhE";
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("EhE", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      
      int int0 = fastDateParser0.hashCode();
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("EhE", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals((-1052386592), int0);
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = "1,1m?\\+|E";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = new Locale(string0);
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("1,1m?\\+|e", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("1,1m?\\+|e", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("1,1m?\\+|E", fastDateParser0.getPattern());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("1,1m?\\+|e", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("1,1m?\\+|e", locale0.getLanguage());
      assertEquals("GMT", zoneInfo0.getID());
      
      String string1 = locale0.getDisplayVariant(locale0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("1,1m?\\+|e", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("1,1m?\\+|e", locale0.getLanguage());
      assertEquals("", string1);
      
      try {
        Object object0 = fastDateParser0.parseObject(string1);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"\" does not match 1,1(\\p{IsNd}++)\\?\\\\\\+\\|(Fri|Friday|Mon|Monday|Sat|Saturday|Sun|Sunday|Thu|Thursday|Tue|Tuesday|Wed|Wednesday)
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = "d";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.forLanguageTag(string0);
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("d", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      
      String string1 = "6M<WyjZ&#a:?";
      assertNotSame(string1, string0);
      
      Date date0 = fastDateParser0.parse(string1);
      assertNotNull(date0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("d", fastDateParser0.getPattern());
      assertEquals("Tue Jan 06 00:00:00 GMT 1970", date0.toString());
      assertEquals("GMT", zoneInfo0.getID());
  }

  @Test
  public void test31()  throws Throwable  {
      String string0 = "5_}%Fz%aXt58";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = new Locale(string0);
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("5_}%fz%axt58", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("5_}%fz%axt58", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"5_}%Fz%aXt58\" ; gave up at index 8
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      String string0 = "9k^}$G{L<pDivN|\"&v=_";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"9k^}$G{L<pDivN|\"&v=_\" ; gave up at index 7
         //
      }
  }
}
