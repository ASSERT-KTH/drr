/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:09:10 GMT 2014
 */

package org.apache.commons.lang3.time;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.text.AttributedCharacterIterator;
import java.text.ParsePosition;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDateFormat;



import org.evosuite.runtime.System;

import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;


public class FastDateFormatEvoSuite_branch_Test  {

  @Test
  public void test00() {}
//   @Test
//   public void test00()  throws Throwable  {
//       String string0 = "=k";
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("=k", fastDateFormat0.getPattern());
//       assertEquals(5, fastDateFormat0.getMaxLengthEstimate());
//       
//       int int0 = (-670);
//       int int1 = Integer.MIN_VALUE;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int1, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-2147483648,MONTH=-670,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-670,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       
//       String string1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
//       assertNotNull(string1);
//       assertFalse(int0 == int1);
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(int1 == int0);
//       assertEquals("=k", fastDateFormat0.getPattern());
//       assertEquals(5, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-6017610312121406464,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=190684596,MONTH=11,WEEK_OF_YEAR=51,WEEK_OF_MONTH=4,DAY_OF_MONTH=18,DAY_OF_YEAR=352,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=16,SECOND=33,MILLISECOND=536,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("=14", string1);
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//   }

  @Test
  public void test01() {}
//   @Test
//   public void test01()  throws Throwable  {
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, (TimeZone) zoneInfo0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(25, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("h:mm:ss 'o''clock' a z", fastDateFormat0.getPattern());
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       long long0 = (-1574L);
//       String string0 = fastDateFormat0.format(long0);
//       assertNotNull(string0);
//       assertEquals(25, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("h:mm:ss 'o''clock' a z", fastDateFormat0.getPattern());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("11:59:58 o'clock PM GMT", string0);
//   }

  @Test
  public void test02() {}
//   @Test
//   public void test02()  throws Throwable  {
//       int int0 = 0;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(57, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy h:mm:ss 'o''clock' a z", fastDateFormat0.getPattern());
//       
//       StringBuffer stringBuffer0 = new StringBuffer();
//       assertNotNull(stringBuffer0);
//       assertEquals(0, stringBuffer0.length());
//       assertEquals("", stringBuffer0.toString());
//       assertEquals(16, stringBuffer0.capacity());
//       
//       StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
//       assertNotNull(stringBuffer1);
//       assertEquals(57, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy h:mm:ss 'o''clock' a z", fastDateFormat0.getPattern());
//       assertEquals("Wednesday, December 31, 0002 12:00:00 o'clock AM GMT", stringBuffer1.toString());
//       assertEquals(70, stringBuffer1.capacity());
//       assertEquals(52, stringBuffer1.length());
//       assertEquals(70, stringBuffer0.capacity());
//       assertEquals("Wednesday, December 31, 0002 12:00:00 o'clock AM GMT", stringBuffer0.toString());
//       assertEquals(52, stringBuffer0.length());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertSame(stringBuffer1, stringBuffer0);
//       assertSame(stringBuffer0, stringBuffer1);
//   }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "";
      String string1 = "Zd'A~c81ZEwC";
      assertNotSame(string1, string0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
      assertNotNull(fastDateFormat0);
      assertFalse(string0.equals((Object)string1));
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("", fastDateFormat0.getPattern());
      assertNotSame(string0, string1);
      
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string1, (TimeZone) zoneInfo0);
      assertNotNull(fastDateFormat1);
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(19, fastDateFormat1.getMaxLengthEstimate());
      assertEquals("Zd'A~c81ZEwC", fastDateFormat1.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertNotSame(string1, string0);
      
      boolean boolean0 = fastDateFormat0.equals((Object) fastDateFormat1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
      assertEquals(19, fastDateFormat1.getMaxLengthEstimate());
      assertEquals("Zd'A~c81ZEwC", fastDateFormat1.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("", fastDateFormat0.getPattern());
      assertFalse(boolean0);
      assertNotSame(string0, string1);
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertNotSame(string1, string0);
      assertNotSame(fastDateFormat0, fastDateFormat1);
  }

  @Test
  public void test04() {}
//   @Test
//   public void test04()  throws Throwable  {
//       Locale locale0 = Locale.KOREAN;
//       assertNotNull(locale0);
//       assertEquals("kor", locale0.getISO3Language());
//       assertEquals("", locale0.getCountry());
//       assertEquals("ko", locale0.toString());
//       assertEquals("ko", locale0.getLanguage());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, (TimeZone) zoneInfo0, locale0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("kor", locale0.getISO3Language());
//       assertEquals("", locale0.getCountry());
//       assertEquals("ko", locale0.toString());
//       assertEquals("ko", locale0.getLanguage());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", fastDateFormat0.getPattern());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       boolean boolean0 = fastDateFormat0.equals((Object) locale0);
//       assertEquals("kor", locale0.getISO3Language());
//       assertEquals("", locale0.getCountry());
//       assertEquals("ko", locale0.toString());
//       assertEquals("ko", locale0.getLanguage());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", fastDateFormat0.getPattern());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertFalse(boolean0);
//   }

  @Test
  public void test05() {}
//   @Test
//   public void test05()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat0);
//       assertEquals("dd/MM/yy h:mm a", fastDateFormat0.getPattern());
//       assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
//       
//       boolean boolean0 = fastDateFormat0.equals((Object) fastDateFormat0);
//       assertEquals("dd/MM/yy h:mm a", fastDateFormat0.getPattern());
//       assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
//       assertTrue(boolean0);
//   }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
      assertNotNull(fastDateFormat0);
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("", fastDateFormat0.getPattern());
      
      Object object0 = null;
      // Undeclared exception!
      try {
        String string1 = fastDateFormat0.format(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: <null>
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
      assertNotNull(fastDateFormat0);
      assertEquals("", fastDateFormat0.getPattern());
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      
      // Undeclared exception!
      try {
        String string1 = fastDateFormat0.format((Object) fastDateFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: org.apache.commons.lang3.time.FastDateFormat
         //
      }
  }

  @Test
  public void test08() {}
//   @Test
//   public void test08()  throws Throwable  {
//       String string0 = "Zd'A~c81ZEwC";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       Locale locale0 = Locale.GERMANY;
//       assertNotNull(locale0);
//       assertEquals("deu", locale0.getISO3Language());
//       assertEquals("de", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("DE", locale0.getCountry());
//       assertEquals("de_DE", locale0.toString());
//       assertEquals("DEU", locale0.getISO3Country());
//       
//       FastDateFormat fastDateFormat0 = new FastDateFormat(string0, zoneInfo0, locale0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("deu", locale0.getISO3Language());
//       assertEquals("de", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("DE", locale0.getCountry());
//       assertEquals("de_DE", locale0.toString());
//       assertEquals("DEU", locale0.getISO3Country());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("Zd'A~c81ZEwC", fastDateFormat0.getPattern());
//       
//       long long0 = 1L;
//       Long long1 = new Long(long0);
//       assertTrue(long1.equals((Object)long0));
//       assertEquals(1L, (long)long1);
//       
//       String string1 = fastDateFormat0.format((Object) long1);
//       assertNotNull(string1);
//       assertTrue(long1.equals((Object)long0));
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       assertEquals("deu", locale0.getISO3Language());
//       assertEquals("de", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("DE", locale0.getCountry());
//       assertEquals("de_DE", locale0.toString());
//       assertEquals("DEU", locale0.getISO3Country());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("Zd'A~c81ZEwC", fastDateFormat0.getPattern());
//       assertEquals("+00001A~c81ZEwC", string1);
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//   }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "x#,i:NR `6PCH,[K7Y.";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: x
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "FastDateFormat[";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "rYLpP\"BZ";
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
      }
  }

  @Test
  public void test12() {}
//   @Test
//   public void test12()  throws Throwable  {
//       String string0 = "K)q^ ~5[d'e#p(-";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       Locale locale0 = Locale.SIMPLIFIED_CHINESE;
//       assertNotNull(locale0);
//       assertEquals("CHN", locale0.getISO3Country());
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("zh_CN", locale0.toString());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       
//       FastDateFormat fastDateFormat0 = null;
//       try {
//         fastDateFormat0 = new FastDateFormat(string0, zoneInfo0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: q
//          //
//       }
//   }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "pattern must not be null";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: p
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "<null>";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "{lY{M%5&O }bJCa";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: l
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "i,~X83";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: i
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "gXy:}d7@_]]},aQ:r";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: g
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      
      String string0 = "fgk;*|,:@6";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
      }
  }

  @Test
  public void test19() {}
//   @Test
//   public void test19()  throws Throwable  {
//       int int0 = 0;
//       String string0 = "evZM];&:uz&o3d)X";
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       
//       Locale locale0 = new Locale(string0, string0, string0);
//       assertNotNull(locale0);
//       assertEquals("evZM];&:uz&o3d)X", locale0.getVariant());
//       assertEquals("EVZM];&:UZ&O3D)X", locale0.getCountry());
//       assertEquals("evzm];&:uz&o3d)x", locale0.getLanguage());
//       assertEquals("evzm];&:uz&o3d)x_EVZM];&:UZ&O3D)X_evZM];&:uz&o3d)X", locale0.toString());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       
//       FastDateFormat fastDateFormat0 = null;
//       try {
//         fastDateFormat0 = new FastDateFormat(string0, zoneInfo0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: e
//          //
//       }
//   }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "cg$[";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "23bTMgcy'AsCK";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "7=}-:/Y}$dBgwnC";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Y
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "XN^%|VfxpTgl3Jo3O4";
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: X
         //
      }
  }

  @Test
  public void test24() {}
//   @Test
//   public void test24()  throws Throwable  {
//       String string0 = "?;4`W_+*";
//       Locale locale0 = Locale.KOREAN;
//       assertNotNull(locale0);
//       assertEquals("ko", locale0.getLanguage());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getCountry());
//       assertEquals("ko", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("kor", locale0.getISO3Language());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       FastDateFormat fastDateFormat0 = new FastDateFormat(string0, zoneInfo0, locale0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(11, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("?;4`W_+*", fastDateFormat0.getPattern());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("ko", locale0.getLanguage());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getCountry());
//       assertEquals("ko", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("kor", locale0.getISO3Language());
//   }

  @Test
  public void test25() {}
//   @Test
//   public void test25()  throws Throwable  {
//       Locale locale0 = Locale.KOREAN;
//       assertNotNull(locale0);
//       assertEquals("kor", locale0.getISO3Language());
//       assertEquals("ko", locale0.toString());
//       assertEquals("", locale0.getCountry());
//       assertEquals("ko", locale0.getLanguage());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       
//       String string0 = "`VA_et5Sd'L(cR}vBM0";
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       FastDateFormat fastDateFormat0 = null;
//       try {
//         fastDateFormat0 = new FastDateFormat(string0, zoneInfo0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: V
//          //
//       }
//   }

  @Test
  public void test26()  throws Throwable  {
      String string0 = "$UQvC^DgD<'@6N>:]";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
      }
  }

  @Test
  public void test27() {}
//   @Test
//   public void test27()  throws Throwable  {
//       int int0 = 0;
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, (TimeZone) zoneInfo0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("EEEE, MMMM d, yyyy h:mm:ss 'o''clock' a z", fastDateFormat0.getPattern());
//       assertEquals(57, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       int int1 = 1939;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int1, int1);
//       assertNotNull(mockGregorianCalendar0);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=1939,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1939,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       
//       Date date0 = mockGregorianCalendar0.getTime();
//       assertNotNull(date0);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertEquals("Thu Nov 21 00:00:00 GMT 166", date0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-56900793600000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=166,MONTH=10,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=21,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       
//       String string0 = fastDateFormat0.format((Object) date0);
//       assertNotNull(string0);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertEquals("Thu Nov 21 00:00:00 GMT 166", date0.toString());
//       assertEquals("EEEE, MMMM d, yyyy h:mm:ss 'o''clock' a z", fastDateFormat0.getPattern());
//       assertEquals(57, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-56900793600000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=166,MONTH=10,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=21,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("Thursday, November 21, 0166 12:00:00 o'clock AM GMT", string0);
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: T
//          //
//       }
//   }

  @Test
  public void test28() {}
//   @Test
//   public void test28()  throws Throwable  {
//       String string0 = "]DSsmw_[&vgC@]B";
//       int int0 = 0;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       Locale locale0 = Locale.JAPAN;
//       assertNotNull(locale0);
//       assertEquals("ja", locale0.getLanguage());
//       assertEquals("ja_JP", locale0.toString());
//       assertEquals("JP", locale0.getCountry());
//       assertEquals("jpn", locale0.getISO3Language());
//       assertEquals("JPN", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: v
//          //
//       }
//   }

  @Test
  public void test29()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      
      String string0 = "R;yFRw #$/b`nzf";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: R
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = "-=QH";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Q
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      String string0 = "9&D+=O._B7gaLvz";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: O
         //
      }
  }

  @Test
  public void test32() {}
//   @Test
//   public void test32()  throws Throwable  {
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       Locale locale0 = Locale.UK;
//       assertNotNull(locale0);
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("GB", locale0.getCountry());
//       assertEquals("GBR", locale0.getISO3Country());
//       assertEquals("en_GB", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("en", locale0.getLanguage());
//       
//       String string0 = "Negative values should not be possible";
//       FastDateFormat fastDateFormat0 = null;
//       try {
//         fastDateFormat0 = new FastDateFormat(string0, zoneInfo0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: N
//          //
//       }
//   }

  @Test
  public void test33()  throws Throwable  {
      String string0 = "Z@L-e*0}ND5}(js.A";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: L
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      String string0 = "J[{u3&`9w|";
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: J
         //
      }
  }

  @Test
  public void test35()  throws Throwable  {
      String string0 = "If(RubR;dlr";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
      }
  }

  @Test
  public void test36()  throws Throwable  {
      String string0 = "FKz+ugB8";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
      }
  }

  @Test
  public void test37()  throws Throwable  {
      String string0 = "D`P}'b{90j\"oBJXNZ";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      String string0 = "y6!BYOT";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: B
         //
      }
  }

  @Test
  public void test39()  throws Throwable  {
      String string0 = "ArHF;DUp['\\";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
      }
  }

  @Test
  public void test40() {}
//   @Test
//   public void test40()  throws Throwable  {
//       int int0 = 0;
//       Locale locale0 = Locale.GERMANY;
//       assertNotNull(locale0);
//       assertEquals("", locale0.getVariant());
//       assertEquals("DE", locale0.getCountry());
//       assertEquals("deu", locale0.getISO3Language());
//       assertEquals("de", locale0.getLanguage());
//       assertEquals("DEU", locale0.getISO3Country());
//       assertEquals("de_DE", locale0.toString());
//       
//       long long0 = 0L;
//       System.setCurrentTimeMillis(long0);
//       String string0 = "Cannot assign a %s to a %s";
//       int int1 = 2;
//       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0, int1, int1, int0, int0, int1, int1, int0, int0);
//       assertNotNull(simpleTimeZone0);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertEquals("java.util.SimpleTimeZone[id=Cannot assign a %s to a %s,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=1,startMonth=2,startDay=2,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=1,endMonth=2,endDay=2,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(3600000, simpleTimeZone0.getDSTSavings());
//       assertEquals(true, simpleTimeZone0.useDaylightTime());
//       assertEquals("Cannot assign a %s to a %s", simpleTimeZone0.getID());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, (TimeZone) simpleTimeZone0, locale0);
//       assertNotNull(fastDateFormat0);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertEquals("java.util.SimpleTimeZone[id=Cannot assign a %s to a %s,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=1,startMonth=2,startDay=2,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=1,endMonth=2,endDay=2,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(3600000, simpleTimeZone0.getDSTSavings());
//       assertEquals(true, simpleTimeZone0.useDaylightTime());
//       assertEquals("Cannot assign a %s to a %s", simpleTimeZone0.getID());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals("EEEE, d. MMMM yyyy HH:mm' Uhr 'z", fastDateFormat0.getPattern());
//       assertEquals(52, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("", locale0.getVariant());
//       assertEquals("DE", locale0.getCountry());
//       assertEquals("deu", locale0.getISO3Language());
//       assertEquals("de", locale0.getLanguage());
//       assertEquals("DEU", locale0.getISO3Country());
//       assertEquals("de_DE", locale0.toString());
//       
//       StringBuffer stringBuffer0 = new StringBuffer(string0);
//       assertNotNull(stringBuffer0);
//       assertEquals(26, stringBuffer0.length());
//       assertEquals(42, stringBuffer0.capacity());
//       assertEquals("Cannot assign a %s to a %s", stringBuffer0.toString());
//       
//       long long1 = (-7L);
//       StringBuffer stringBuffer1 = fastDateFormat0.format(long1, stringBuffer0);
//       assertNotNull(stringBuffer1);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertFalse(long1 == long0);
//       assertEquals(72, stringBuffer0.length());
//       assertEquals("Cannot assign a %s to a %sDonnerstag, 1. Januar 1970 00:59 Uhr GMT+01:00", stringBuffer0.toString());
//       assertEquals(86, stringBuffer0.capacity());
//       assertEquals(72, stringBuffer1.length());
//       assertEquals("Cannot assign a %s to a %sDonnerstag, 1. Januar 1970 00:59 Uhr GMT+01:00", stringBuffer1.toString());
//       assertEquals(86, stringBuffer1.capacity());
//       assertEquals("java.util.SimpleTimeZone[id=Cannot assign a %s to a %s,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=1,startMonth=2,startDay=2,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=1,endMonth=2,endDay=2,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(3600000, simpleTimeZone0.getDSTSavings());
//       assertEquals(true, simpleTimeZone0.useDaylightTime());
//       assertEquals("Cannot assign a %s to a %s", simpleTimeZone0.getID());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals("EEEE, d. MMMM yyyy HH:mm' Uhr 'z", fastDateFormat0.getPattern());
//       assertEquals(52, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("", locale0.getVariant());
//       assertEquals("DE", locale0.getCountry());
//       assertEquals("deu", locale0.getISO3Language());
//       assertEquals("de", locale0.getLanguage());
//       assertEquals("DEU", locale0.getISO3Country());
//       assertEquals("de_DE", locale0.toString());
//       assertSame(stringBuffer0, stringBuffer1);
//       assertSame(stringBuffer1, stringBuffer0);
//       
//       StringBuffer stringBuffer2 = stringBuffer0.append(stringBuffer1);
//       assertNotNull(stringBuffer2);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertFalse(long1 == long0);
//       assertEquals("Cannot assign a %s to a %sDonnerstag, 1. Januar 1970 00:59 Uhr GMT+01:00Cannot assign a %s to a %sDonnerstag, 1. Januar 1970 00:59 Uhr GMT+01:00", stringBuffer0.toString());
//       assertEquals(144, stringBuffer0.length());
//       assertEquals(174, stringBuffer0.capacity());
//       assertEquals(144, stringBuffer1.length());
//       assertEquals(174, stringBuffer1.capacity());
//       assertEquals("Cannot assign a %s to a %sDonnerstag, 1. Januar 1970 00:59 Uhr GMT+01:00Cannot assign a %s to a %sDonnerstag, 1. Januar 1970 00:59 Uhr GMT+01:00", stringBuffer1.toString());
//       assertEquals("java.util.SimpleTimeZone[id=Cannot assign a %s to a %s,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=1,startMonth=2,startDay=2,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=1,endMonth=2,endDay=2,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(3600000, simpleTimeZone0.getDSTSavings());
//       assertEquals(true, simpleTimeZone0.useDaylightTime());
//       assertEquals("Cannot assign a %s to a %s", simpleTimeZone0.getID());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals("EEEE, d. MMMM yyyy HH:mm' Uhr 'z", fastDateFormat0.getPattern());
//       assertEquals(52, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(174, stringBuffer2.capacity());
//       assertEquals(144, stringBuffer2.length());
//       assertEquals("Cannot assign a %s to a %sDonnerstag, 1. Januar 1970 00:59 Uhr GMT+01:00Cannot assign a %s to a %sDonnerstag, 1. Januar 1970 00:59 Uhr GMT+01:00", stringBuffer2.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("DE", locale0.getCountry());
//       assertEquals("deu", locale0.getISO3Language());
//       assertEquals("de", locale0.getLanguage());
//       assertEquals("DEU", locale0.getISO3Country());
//       assertEquals("de_DE", locale0.toString());
//       assertSame(stringBuffer0, stringBuffer1);
//       assertSame(stringBuffer0, stringBuffer2);
//       assertSame(stringBuffer1, stringBuffer0);
//       assertSame(stringBuffer1, stringBuffer2);
//       assertSame(stringBuffer2, stringBuffer0);
//       assertSame(stringBuffer2, stringBuffer1);
//       
//       StringBuffer stringBuffer3 = fastDateFormat0.format((long) int1, stringBuffer2);
//       assertNotNull(stringBuffer3);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertFalse(long1 == long0);
//       assertEquals(190, stringBuffer0.length());
//       assertEquals(350, stringBuffer0.capacity());
//       assertEquals("Cannot assign a %s to a %sDonnerstag, 1. Januar 1970 00:59 Uhr GMT+01:00Cannot assign a %s to a %sDonnerstag, 1. Januar 1970 00:59 Uhr GMT+01:00Donnerstag, 1. Januar 1970 01:00 Uhr GMT+01:00", stringBuffer0.toString());
//       assertEquals("Cannot assign a %s to a %sDonnerstag, 1. Januar 1970 00:59 Uhr GMT+01:00Cannot assign a %s to a %sDonnerstag, 1. Januar 1970 00:59 Uhr GMT+01:00Donnerstag, 1. Januar 1970 01:00 Uhr GMT+01:00", stringBuffer1.toString());
//       assertEquals(350, stringBuffer1.capacity());
//       assertEquals(190, stringBuffer1.length());
//       assertEquals("java.util.SimpleTimeZone[id=Cannot assign a %s to a %s,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=1,startMonth=2,startDay=2,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=1,endMonth=2,endDay=2,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(3600000, simpleTimeZone0.getDSTSavings());
//       assertEquals(true, simpleTimeZone0.useDaylightTime());
//       assertEquals("Cannot assign a %s to a %s", simpleTimeZone0.getID());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals("EEEE, d. MMMM yyyy HH:mm' Uhr 'z", fastDateFormat0.getPattern());
//       assertEquals(52, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("Cannot assign a %s to a %sDonnerstag, 1. Januar 1970 00:59 Uhr GMT+01:00Cannot assign a %s to a %sDonnerstag, 1. Januar 1970 00:59 Uhr GMT+01:00Donnerstag, 1. Januar 1970 01:00 Uhr GMT+01:00", stringBuffer2.toString());
//       assertEquals(190, stringBuffer2.length());
//       assertEquals(350, stringBuffer2.capacity());
//       assertEquals("", locale0.getVariant());
//       assertEquals("DE", locale0.getCountry());
//       assertEquals("deu", locale0.getISO3Language());
//       assertEquals("de", locale0.getLanguage());
//       assertEquals("DEU", locale0.getISO3Country());
//       assertEquals("de_DE", locale0.toString());
//       assertEquals("Cannot assign a %s to a %sDonnerstag, 1. Januar 1970 00:59 Uhr GMT+01:00Cannot assign a %s to a %sDonnerstag, 1. Januar 1970 00:59 Uhr GMT+01:00Donnerstag, 1. Januar 1970 01:00 Uhr GMT+01:00", stringBuffer3.toString());
//       assertEquals(190, stringBuffer3.length());
//       assertEquals(350, stringBuffer3.capacity());
//       assertSame(stringBuffer0, stringBuffer3);
//       assertSame(stringBuffer0, stringBuffer1);
//       assertSame(stringBuffer0, stringBuffer2);
//       assertSame(stringBuffer1, stringBuffer0);
//       assertSame(stringBuffer1, stringBuffer3);
//       assertSame(stringBuffer1, stringBuffer2);
//       assertSame(stringBuffer2, stringBuffer0);
//       assertSame(stringBuffer2, stringBuffer1);
//       assertSame(stringBuffer2, stringBuffer3);
//       assertSame(stringBuffer3, stringBuffer2);
//       assertSame(stringBuffer3, stringBuffer0);
//       assertSame(stringBuffer3, stringBuffer1);
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(int0, locale0);
//       assertNotNull(fastDateFormat1);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertFalse(int0 == int1);
//       assertEquals("HH:mm' Uhr 'z", fastDateFormat1.getPattern());
//       assertEquals(13, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals("", locale0.getVariant());
//       assertEquals("DE", locale0.getCountry());
//       assertEquals("deu", locale0.getISO3Language());
//       assertEquals("de", locale0.getLanguage());
//       assertEquals("DEU", locale0.getISO3Country());
//       assertEquals("de_DE", locale0.toString());
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       
//       String string1 = fastDateFormat1.toString();
//       assertNotNull(string1);
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertFalse(int0 == int1);
//       assertEquals("HH:mm' Uhr 'z", fastDateFormat1.getPattern());
//       assertEquals(13, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals("", locale0.getVariant());
//       assertEquals("DE", locale0.getCountry());
//       assertEquals("deu", locale0.getISO3Language());
//       assertEquals("de", locale0.getLanguage());
//       assertEquals("DEU", locale0.getISO3Country());
//       assertEquals("de_DE", locale0.toString());
//       assertEquals("FastDateFormat[HH:mm' Uhr 'z]", string1);
//       assertNotSame(string1, string0);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       
//       Set<String> set0 = locale0.getUnicodeLocaleAttributes();
//       assertNotNull(set0);
//       assertEquals(0, set0.size());
//       assertEquals(true, set0.isEmpty());
//       assertEquals("", locale0.getVariant());
//       assertEquals("DE", locale0.getCountry());
//       assertEquals("deu", locale0.getISO3Language());
//       assertEquals("de", locale0.getLanguage());
//       assertEquals("DEU", locale0.getISO3Country());
//       assertEquals("de_DE", locale0.toString());
//       
//       FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(int0, locale0);
//       assertNotNull(fastDateFormat2);
//       assertFalse(int0 == int1);
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat0));
//       assertTrue(fastDateFormat2.equals((Object)fastDateFormat1));
//       assertEquals("", locale0.getVariant());
//       assertEquals("DE", locale0.getCountry());
//       assertEquals("deu", locale0.getISO3Language());
//       assertEquals("de", locale0.getLanguage());
//       assertEquals("DEU", locale0.getISO3Country());
//       assertEquals("de_DE", locale0.toString());
//       assertEquals("HH:mm' Uhr 'z", fastDateFormat2.getPattern());
//       assertEquals(13, fastDateFormat2.getMaxLengthEstimate());
//       assertNotSame(fastDateFormat2, fastDateFormat0);
//       assertNotSame(fastDateFormat2, fastDateFormat1);
//   }

  @Test
  public void test41() {}
//   @Test
//   public void test41()  throws Throwable  {
//       int int0 = 0;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       
//       Locale locale0 = Locale.GERMANY;
//       assertNotNull(locale0);
//       assertEquals("DE", locale0.getCountry());
//       assertEquals("de", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("DEU", locale0.getISO3Country());
//       assertEquals("de_DE", locale0.toString());
//       assertEquals("deu", locale0.getISO3Language());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, (TimeZone) zoneInfo0, locale0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("DE", locale0.getCountry());
//       assertEquals("de", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("DEU", locale0.getISO3Country());
//       assertEquals("de_DE", locale0.toString());
//       assertEquals("deu", locale0.getISO3Language());
//       assertEquals(32, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("EEEE, d. MMMM yyyy", fastDateFormat0.getPattern());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//   }

  @Test
  public void test42()  throws Throwable  {
      int int0 = 1;
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(36, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' '('EE')' a h'\uC2DC' mm'\uBD84' ss'\uCD08'", fastDateFormat0.getPattern());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)fastDateFormat0.getTimeZone();
      assertNotNull(zoneInfo0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(36, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' '('EE')' a h'\uC2DC' mm'\uBD84' ss'\uCD08'", fastDateFormat0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
  }

  @Test
  public void test43() {}
//   @Test
//   public void test43()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat0);
//       assertEquals("dd/MM/yy h:mm a", fastDateFormat0.getPattern());
//       assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
//       
//       long long0 = 0L;
//       String string0 = fastDateFormat0.format(long0);
//       assertNotNull(string0);
//       assertEquals("dd/MM/yy h:mm a", fastDateFormat0.getPattern());
//       assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("01/01/70 12:00 AM", string0);
//   }

  @Test
  public void test44()  throws Throwable  {
      String string0 = "";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
      //  // Unstable assertion: assertNotNull(fastDateFormat0);
      //  // Unstable assertion: assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("", fastDateFormat0.getPattern());
      
      int int0 = fastDateFormat0.hashCode();
      //  // Unstable assertion: assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals((-851252542), int0);
  }

  @Test
  public void test45()  throws Throwable  {
      int int0 = 1;
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' '('EE')' a h'\uC2DC' mm'\uBD84' ss'\uCD08'", fastDateFormat0.getPattern());
      assertEquals(36, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      String string0 = fastDateFormat0.getPattern();
      assertNotNull(string0);
      assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' '('EE')' a h'\uC2DC' mm'\uBD84' ss'\uCD08'", fastDateFormat0.getPattern());
      assertEquals(36, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' '('EE')' a h'\uC2DC' mm'\uBD84' ss'\uCD08'", string0);
  }

  @Test
  public void test46() {}
//   @Test
//   public void test46()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat0);
//       assertEquals("dd/MM/yy h:mm a", fastDateFormat0.getPattern());
//       assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
//       
//       Locale locale0 = fastDateFormat0.getLocale();
//       assertNotNull(locale0);
//       assertEquals("dd/MM/yy h:mm a", fastDateFormat0.getPattern());
//       assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//   }

  @Test
  public void test47()  throws Throwable  {
      int int0 = (-23);
      String string0 = "The validated collection index is invalid: %d";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -23
         //
      }
  }

  @Test
  public void test48()  throws Throwable  {
      String string0 = "=k";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
      assertNotNull(fastDateFormat0);
      assertEquals(5, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("=k", fastDateFormat0.getPattern());
      
      int int0 = (-670);
      ParsePosition parsePosition0 = new ParsePosition(int0);
      assertNotNull(parsePosition0);
      assertEquals(-670, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=-670,errorIndex=-1]", parsePosition0.toString());
      assertEquals(-1, parsePosition0.getErrorIndex());
      
      Object object0 = fastDateFormat0.parseObject(string0, parsePosition0);
      assertNull(object0);
      assertEquals(5, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("=k", fastDateFormat0.getPattern());
      assertEquals(0, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=0]", parsePosition0.toString());
      assertEquals(0, parsePosition0.getErrorIndex());
  }

  @Test
  public void test49()  throws Throwable  {
      int int0 = (-670);
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -670
         //
      }
  }

  @Test
  public void test50() {}
//   @Test
//   public void test50()  throws Throwable  {
//       int int0 = 0;
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("h:mm:ss 'o''clock' a z", fastDateFormat0.getPattern());
//       assertEquals(25, fastDateFormat0.getMaxLengthEstimate());
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       
//       Date date0 = mockGregorianCalendar0.getTime();
//       assertNotNull(date0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=31,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("Wed Dec 31 00:00:00 GMT 2", date0.toString());
//       
//       String string0 = fastDateFormat0.format((Object) date0);
//       assertNotNull(string0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=31,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("Wed Dec 31 00:00:00 GMT 2", date0.toString());
//       assertEquals("h:mm:ss 'o''clock' a z", fastDateFormat0.getPattern());
//       assertEquals(25, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("12:00:00 o'clock AM GMT", string0);
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: o
//          //
//       }
//   }

  @Test
  public void test51()  throws Throwable  {
      String string0 = "0C/<DrT\\";
      Locale locale0 = new Locale(string0);
      assertNotNull(locale0);
      assertEquals("0c/<drt\\", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("0c/<drt\\", locale0.toString());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals("0c/<drt\\", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("0c/<drt\\", locale0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("0c/<drt\\", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("0c/<drt\\", locale0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
      }
  }

  @Test
  public void test52() {}
//   @Test
//   public void test52()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
//       assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
//       
//       int int1 = fastDateFormat0.getMaxLengthEstimate();
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
//       assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(31, int1);
//   }

  @Test
  public void test53() {}
//   @Test
//   public void test53()  throws Throwable  {
//       int int0 = 1;
//       Locale locale0 = Locale.KOREAN;
//       assertNotNull(locale0);
//       assertEquals("ko", locale0.toString());
//       assertEquals("ko", locale0.getLanguage());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getCountry());
//       assertEquals("kor", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, locale0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' '('EE')' a h'\uC2DC' mm'\uBD84' ss'\uCD08'", fastDateFormat0.getPattern());
//       assertEquals(36, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("ko", locale0.toString());
//       assertEquals("ko", locale0.getLanguage());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getCountry());
//       assertEquals("kor", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       Date date0 = mockGregorianCalendar0.getGregorianChange();
//       assertNotNull(date0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
//       
//       String string0 = fastDateFormat0.format(date0);
//       assertNotNull(string0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' '('EE')' a h'\uC2DC' mm'\uBD84' ss'\uCD08'", fastDateFormat0.getPattern());
//       assertEquals(36, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("ko", locale0.toString());
//       assertEquals("ko", locale0.getLanguage());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getCountry());
//       assertEquals("kor", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
//       assertEquals("1582\uB144 10\uC6D4 15\uC77C (\uAE08) \uC624\uC804 12\uC2DC 00\uBD84 00\uCD08", string0);
//   }

  @Test
  public void test54() {}
//   @Test
//   public void test54()  throws Throwable  {
//       String string0 = "ahh'\u65F6'mmk'\u5206'ss'\u79D2' z";
//       Locale locale0 = Locale.GERMAN;
//       assertNotNull(locale0);
//       assertEquals("de", locale0.getLanguage());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("de", locale0.toString());
//       assertEquals("deu", locale0.getISO3Language());
//       assertEquals("", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("ahh'\u65F6'mmk'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals("de", locale0.getLanguage());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("de", locale0.toString());
//       assertEquals("deu", locale0.getISO3Language());
//       assertEquals("", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       
//       int int0 = 3;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=3,MONTH=3,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=3,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       
//       AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator((Object) mockGregorianCalendar0);
//       assertNotNull(attributedCharacterIterator0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62064748800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=3,WEEK_OF_YEAR=14,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=93,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(0, attributedCharacterIterator0.getBeginIndex());
//       assertEquals(17, attributedCharacterIterator0.getEndIndex());
//       assertEquals(0, attributedCharacterIterator0.getIndex());
//       assertEquals(17, attributedCharacterIterator0.getRunLimit());
//       assertEquals(0, attributedCharacterIterator0.getRunStart());
//       assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("ahh'\u65F6'mmk'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals("de", locale0.getLanguage());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("de", locale0.toString());
//       assertEquals("deu", locale0.getISO3Language());
//       assertEquals("", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       
//       int int1 = (-1);
//       FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0);
//       assertNotNull(fastDateFormat1);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertEquals("ahh'\u65F6'mmk'\u5206'ss'\u79D2' z", fastDateFormat1.getPattern());
//       assertEquals(19, fastDateFormat1.getMaxLengthEstimate());
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//   }
}
