/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:02:38 GMT 2014
 */

package org.apache.commons.lang3.time;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.text.AttributedCharacterIterator;
import java.text.ParsePosition;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDateFormat;




import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;


public class FastDateFormatEvoSuite_branch_Test  {

  @Test
  public void test00() {}
//   @Test
//   public void test00()  throws Throwable  {
//       int int0 = 1;
//       String string0 = "M?Ez$08KiMm@h,";
//       int int1 = 1531;
//       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0, int0, int0, int0, int0, int0, int0, int0, int1, int0);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertNotNull(simpleTimeZone0);
//       assertEquals(1, simpleTimeZone0.getRawOffset());
//       assertEquals(1, simpleTimeZone0.getDSTSavings());
//       assertEquals(true, simpleTimeZone0.useDaylightTime());
//       assertEquals("java.util.SimpleTimeZone[id=M?Ez$08KiMm@h,,offset=1,dstSavings=1,useDaylight=true,startYear=0,startMode=2,startMonth=1,startDay=1,startDayOfWeek=1,startTime=1,startTimeMode=0,endMode=2,endMonth=1,endDay=1,endDayOfWeek=1,endTime=1531,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals("M?Ez$08KiMm@h,", simpleTimeZone0.getID());
//       
//       Locale locale0 = Locale.CANADA;
//       assertNotNull(locale0);
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("CA", locale0.getCountry());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, (TimeZone) simpleTimeZone0, locale0);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("h:mm:ss z a", fastDateFormat0.getPattern());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals(1, simpleTimeZone0.getRawOffset());
//       assertEquals(1, simpleTimeZone0.getDSTSavings());
//       assertEquals(true, simpleTimeZone0.useDaylightTime());
//       assertEquals("java.util.SimpleTimeZone[id=M?Ez$08KiMm@h,,offset=1,dstSavings=1,useDaylight=true,startYear=0,startMode=2,startMonth=1,startDay=1,startDayOfWeek=1,startTime=1,startTimeMode=0,endMode=2,endMonth=1,endDay=1,endDayOfWeek=1,endTime=1531,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals("M?Ez$08KiMm@h,", simpleTimeZone0.getID());
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) simpleTimeZone0);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=M?Ez$08KiMm@h,,offset=1,dstSavings=1,useDaylight=true,startYear=0,startMode=2,startMonth=1,startDay=1,startDayOfWeek=1,startTime=1,startTimeMode=0,endMode=2,endMonth=1,endDay=1,endDayOfWeek=1,endTime=1531,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=321,ZONE_OFFSET=1,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, simpleTimeZone0.getRawOffset());
//       assertEquals(1, simpleTimeZone0.getDSTSavings());
//       assertEquals(true, simpleTimeZone0.useDaylightTime());
//       assertEquals("java.util.SimpleTimeZone[id=M?Ez$08KiMm@h,,offset=1,dstSavings=1,useDaylight=true,startYear=0,startMode=2,startMonth=1,startDay=1,startDayOfWeek=1,startTime=1,startTimeMode=0,endMode=2,endMonth=1,endDay=1,endDayOfWeek=1,endTime=1531,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals("M?Ez$08KiMm@h,", simpleTimeZone0.getID());
//       
//       String string1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//       assertNotNull(string1);
//       assertEquals("8:21:21 GMT+00:00 PM", string1);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=M?Ez$08KiMm@h,,offset=1,dstSavings=1,useDaylight=true,startYear=0,startMode=2,startMonth=1,startDay=1,startDayOfWeek=1,startTime=1,startTimeMode=0,endMode=2,endMonth=1,endDay=1,endDayOfWeek=1,endTime=1531,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=321,ZONE_OFFSET=1,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("h:mm:ss z a", fastDateFormat0.getPattern());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals(1, simpleTimeZone0.getRawOffset());
//       assertEquals(1, simpleTimeZone0.getDSTSavings());
//       assertEquals(true, simpleTimeZone0.useDaylightTime());
//       assertEquals("java.util.SimpleTimeZone[id=M?Ez$08KiMm@h,,offset=1,dstSavings=1,useDaylight=true,startYear=0,startMode=2,startMonth=1,startDay=1,startDayOfWeek=1,startTime=1,startTimeMode=0,endMode=2,endMonth=1,endDay=1,endDayOfWeek=1,endTime=1531,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals("M?Ez$08KiMm@h,", simpleTimeZone0.getID());
//   }

  @Test
  public void test01() {}
//   @Test
//   public void test01()  throws Throwable  {
//       int int0 = 1;
//       String string0 = "M?Ez$08KiMm@h,";
//       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0, int0, int0, int0, int0, int0, int0, int0, int0, int0);
//       assertNotNull(simpleTimeZone0);
//       assertEquals(1, simpleTimeZone0.getRawOffset());
//       assertEquals(true, simpleTimeZone0.useDaylightTime());
//       assertEquals("java.util.SimpleTimeZone[id=M?Ez$08KiMm@h,,offset=1,dstSavings=1,useDaylight=true,startYear=0,startMode=2,startMonth=1,startDay=1,startDayOfWeek=1,startTime=1,startTimeMode=0,endMode=2,endMonth=1,endDay=1,endDayOfWeek=1,endTime=1,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals("M?Ez$08KiMm@h,", simpleTimeZone0.getID());
//       assertEquals(1, simpleTimeZone0.getDSTSavings());
//       
//       Locale locale0 = Locale.CANADA;
//       assertNotNull(locale0);
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, (TimeZone) simpleTimeZone0, locale0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(1, simpleTimeZone0.getRawOffset());
//       assertEquals(true, simpleTimeZone0.useDaylightTime());
//       assertEquals("java.util.SimpleTimeZone[id=M?Ez$08KiMm@h,,offset=1,dstSavings=1,useDaylight=true,startYear=0,startMode=2,startMonth=1,startDay=1,startDayOfWeek=1,startTime=1,startTimeMode=0,endMode=2,endMonth=1,endDay=1,endDayOfWeek=1,endTime=1,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals("M?Ez$08KiMm@h,", simpleTimeZone0.getID());
//       assertEquals(1, simpleTimeZone0.getDSTSavings());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("h:mm:ss z a", fastDateFormat0.getPattern());
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) simpleTimeZone0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, simpleTimeZone0.getRawOffset());
//       assertEquals(true, simpleTimeZone0.useDaylightTime());
//       assertEquals("java.util.SimpleTimeZone[id=M?Ez$08KiMm@h,,offset=1,dstSavings=1,useDaylight=true,startYear=0,startMode=2,startMonth=1,startDay=1,startDayOfWeek=1,startTime=1,startTimeMode=0,endMode=2,endMonth=1,endDay=1,endDayOfWeek=1,endTime=1,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals("M?Ez$08KiMm@h,", simpleTimeZone0.getID());
//       assertEquals(1, simpleTimeZone0.getDSTSavings());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=M?Ez$08KiMm@h,,offset=1,dstSavings=1,useDaylight=true,startYear=0,startMode=2,startMonth=1,startDay=1,startDayOfWeek=1,startTime=1,startTimeMode=0,endMode=2,endMonth=1,endDay=1,endDayOfWeek=1,endTime=1,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=322,ZONE_OFFSET=1,DST_OFFSET=1]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       
//       String string1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       assertNotNull(string1);
//       assertEquals("8:21:21 GMT+00:00 PM", string1);
//       assertEquals(1, simpleTimeZone0.getRawOffset());
//       assertEquals(true, simpleTimeZone0.useDaylightTime());
//       assertEquals("java.util.SimpleTimeZone[id=M?Ez$08KiMm@h,,offset=1,dstSavings=1,useDaylight=true,startYear=0,startMode=2,startMonth=1,startDay=1,startDayOfWeek=1,startTime=1,startTimeMode=0,endMode=2,endMonth=1,endDay=1,endDayOfWeek=1,endTime=1,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals("M?Ez$08KiMm@h,", simpleTimeZone0.getID());
//       assertEquals(1, simpleTimeZone0.getDSTSavings());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=M?Ez$08KiMm@h,,offset=1,dstSavings=1,useDaylight=true,startYear=0,startMode=2,startMonth=1,startDay=1,startDayOfWeek=1,startTime=1,startTimeMode=0,endMode=2,endMonth=1,endDay=1,endDayOfWeek=1,endTime=1,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=322,ZONE_OFFSET=1,DST_OFFSET=1]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("h:mm:ss z a", fastDateFormat0.getPattern());
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//   }

  @Test
  public void test02() {}
//   @Test
//   public void test02()  throws Throwable  {
//       int int0 = 0;
//       Locale locale0 = Locale.CHINESE;
//       assertNotNull(locale0);
//       assertEquals("zh", locale0.toString());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("", locale0.getCountry());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, locale0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(15, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("zh", locale0.toString());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("", locale0.getCountry());
//       
//       String string0 = fastDateFormat0.format((long) int0);
//       assertNotNull(string0);
//       assertEquals("\u4E0A\u534812\u65F600\u520600\u79D2 GMT", string0);
//       assertEquals("ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(15, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("zh", locale0.toString());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("", locale0.getCountry());
//   }

  @Test
  public void test03() {}
//   @Test
//   public void test03()  throws Throwable  {
//       String string0 = "3k}h";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       Locale locale0 = new Locale(string0, string0);
//       assertNotNull(locale0);
//       assertEquals("3k}h_3K}H", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("3k}h", locale0.getLanguage());
//       assertEquals("3K}H", locale0.getCountry());
//       
//       FastDateFormat fastDateFormat0 = new FastDateFormat(string0, zoneInfo0, locale0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("3k}h_3K}H", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("3k}h", locale0.getLanguage());
//       assertEquals("3K}H", locale0.getCountry());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(10, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("3k}h", fastDateFormat0.getPattern());
//       
//       long long0 = 0L;
//       String string1 = fastDateFormat0.format(long0);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//       assertNotNull(string1);
//       assertEquals("324}12", string1);
//       assertEquals("3k}h_3K}H", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("3k}h", locale0.getLanguage());
//       assertEquals("3K}H", locale0.getCountry());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(10, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("3k}h", fastDateFormat0.getPattern());
//   }

  @Test
  public void test04() {}
//   @Test
//   public void test04()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat0.getPattern());
//       
//       int int1 = 1355;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int1, int1, int0, int1);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=1355,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1355,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1355,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       Date date0 = mockGregorianCalendar0.getTime();
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertNotNull(date0);
//       assertEquals("Sat Aug 16 22:35:00 GMT 116", date0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-58486929900000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=116,MONTH=7,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=16,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=35,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       
//       String string0 = fastDateFormat0.format(date0);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertNotNull(string0);
//       assertEquals("0116\u5E748\u670816\u65E5 \u661F\u671F\u516D", string0);
//       assertEquals("Sat Aug 16 22:35:00 GMT 116", date0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-58486929900000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=116,MONTH=7,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=16,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=35,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat0.getPattern());
//   }

  @Test
  public void test05()  throws Throwable  {
      int int0 = 0;
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, (TimeZone) zoneInfo0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals("EEEE, MMMM d, yyyy h:mm:ss 'o''clock' a z", fastDateFormat0.getPattern());
      assertEquals(57, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GMT", zoneInfo0.getID());
      
      String string0 = "=";
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0);
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertNotNull(fastDateFormat1);
      assertEquals(1, fastDateFormat1.getMaxLengthEstimate());
      assertEquals("=", fastDateFormat1.getPattern());
      
      boolean boolean0 = fastDateFormat1.equals((Object) fastDateFormat0);
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertNotSame(fastDateFormat0, fastDateFormat1);
      assertFalse(boolean0);
      assertEquals(1, fastDateFormat1.getMaxLengthEstimate());
      assertEquals("=", fastDateFormat1.getPattern());
      assertEquals("EEEE, MMMM d, yyyy h:mm:ss 'o''clock' a z", fastDateFormat0.getPattern());
      assertEquals(57, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GMT", zoneInfo0.getID());
  }

  @Test
  public void test06() {}
//   @Test
//   public void test06()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat0);
//       assertEquals("yy-M-d ah:mm", fastDateFormat0.getPattern());
//       assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
//       
//       Object object0 = new Object();
//       assertNotNull(object0);
//       
//       boolean boolean0 = fastDateFormat0.equals(object0);
//       assertFalse(boolean0);
//       assertEquals("yy-M-d ah:mm", fastDateFormat0.getPattern());
//       assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
//   }

  @Test
  public void test07() {}
//   @Test
//   public void test07()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat0);
//       assertEquals("yy-M-d ah:mm", fastDateFormat0.getPattern());
//       assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
//       
//       boolean boolean0 = fastDateFormat0.equals((Object) fastDateFormat0);
//       assertTrue(boolean0);
//       assertEquals("yy-M-d ah:mm", fastDateFormat0.getPattern());
//       assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
//   }

  @Test
  public void test08()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE", fastDateFormat0.getPattern());
      assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      Object object0 = null;
      // Undeclared exception!
      try {
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: <null>
         //
      }
  }

  @Test
  public void test09() {}
//   @Test
//   public void test09()  throws Throwable  {
//       int int0 = 1;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat0);
//       assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yy-M-d ah:mm", fastDateFormat0.getPattern());
//       
//       Long long0 = new Long((long) int0);
//       assertEquals(1L, (long)long0);
//       
//       AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator((Object) long0);
//       assertNotNull(attributedCharacterIterator0);
//       assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yy-M-d ah:mm", fastDateFormat0.getPattern());
//       assertEquals(0, attributedCharacterIterator0.getIndex());
//       assertEquals(0, attributedCharacterIterator0.getBeginIndex());
//       assertEquals(0, attributedCharacterIterator0.getRunStart());
//       assertEquals(14, attributedCharacterIterator0.getRunLimit());
//       assertEquals(14, attributedCharacterIterator0.getEndIndex());
//   }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 0;
      String string0 = "Nl]EN%Ic|!'hV~$1*";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, (TimeZone) zoneInfo0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("HH:mm' Uhr 'z", fastDateFormat0.getPattern());
      
      // Undeclared exception!
      try {
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator((Object) fastDateFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: org.apache.commons.lang3.time.FastDateFormat
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 0;
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, (TimeZone) zoneInfo0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE", fastDateFormat0.getPattern());
      assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      String string0 = fastDateFormat0.format((Object) mockDate0);
      assertNotNull(string0);
      assertEquals("2014\uB144 2\uC6D4 14\uC77C \uAE08\uC694\uC77C", string0);
      assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE", fastDateFormat0.getPattern());
      assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "{9x*vf\\V$026y6";
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: x
         //
      }
  }

  @Test
  public void test13() {}
//   @Test
//   public void test13()  throws Throwable  {
//       String string0 = "rlV^C;6*WG[u4$Ki";
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       Locale locale0 = Locale.CANADA;
//       assertNotNull(locale0);
//       assertEquals("", locale0.getVariant());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("en_CA", locale0.toString());
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: r
//          //
//       }
//   }

  @Test
  public void test14() {}
//   @Test
//   public void test14()  throws Throwable  {
//       String string0 = "4q\\!C9lK,>iH~{f]";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       Locale locale0 = Locale.CHINESE;
//       assertNotNull(locale0);
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getCountry());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("zh", locale0.toString());
//       
//       FastDateFormat fastDateFormat0 = null;
//       try {
//         fastDateFormat0 = new FastDateFormat(string0, zoneInfo0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: q
//          //
//       }
//   }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "pattern must nLt ke null";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: p
         //
      }
  }

  @Test
  public void test16() {}
//   @Test
//   public void test16()  throws Throwable  {
//       TimeZone timeZone0 = null;
//       String string0 = "!mlN${\\bt<Va@";
//       Locale locale0 = Locale.JAPANESE;
//       assertNotNull(locale0);
//       assertEquals("ja", locale0.toString());
//       assertEquals("", locale0.getCountry());
//       assertEquals("ja", locale0.getLanguage());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("jpn", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       
//       FastDateFormat fastDateFormat0 = null;
//       try {
//         fastDateFormat0 = new FastDateFormat(string0, timeZone0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: l
//          //
//       }
//   }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "%1]j6tvt^,.Tfpsi/.";
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: j
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "?9*hagZQ|gO";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = null;
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: g
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "!?f~";
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "e^O'{?`n6VjQ\\X>\\";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: e
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "K.c!Pd3YDF:";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "]b*zg5dt=[,=^f";
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GBR", locale0.getISO3Country());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "Zvumdm";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: v
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = "YSaUV";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Y
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = "V,W/1s=CP5";
      TimeZone timeZone0 = null;
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: V
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = "Unknown class: ";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = "S$t*bYR~:p*7_{Kfh";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = "*aR{e";
      Locale locale0 = null;
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: R
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = "Q7\"DI%g\"yC'_";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Q
         //
      }
  }

  @Test
  public void test30() {}
//   @Test
//   public void test30()  throws Throwable  {
//       String string0 = "yyyy'\uB144' M'\uC6D4' d'\uC77C' '('EE')' a h'\uC2DC' mm'\uBD84' ss'\uCD08'";
//       String string1 = "Pd";
//       assertNotSame(string1, string0);
//       
//       int int0 = 65;
//       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
//       assertFalse(string0.equals((Object)string1));
//       assertNotSame(string0, string1);
//       assertNotNull(simpleTimeZone0);
//       assertEquals(65, simpleTimeZone0.getRawOffset());
//       assertEquals("java.util.SimpleTimeZone[id=yyyy'\uB144' M'\uC6D4' d'\uC77C' '('EE')' a h'\uC2DC' mm'\uBD84' ss'\uCD08',offset=65,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' '('EE')' a h'\uC2DC' mm'\uBD84' ss'\uCD08'", simpleTimeZone0.getID());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       
//       Locale locale0 = Locale.FRENCH;
//       assertNotNull(locale0);
//       assertEquals("fr", locale0.getLanguage());
//       assertEquals("", locale0.getCountry());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("fr", locale0.toString());
//       
//       FastDateFormat fastDateFormat0 = null;
//       try {
//         fastDateFormat0 = new FastDateFormat(string1, simpleTimeZone0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: P
//          //
//       }
//   }

  @Test
  public void test31()  throws Throwable  {
      String string0 = "^O/_!7L";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: O
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      String string0 = "W)yN";
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = "MLk`R'\"z";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: L
         //
      }
  }

  @Test
  public void test34() {}
//   @Test
//   public void test34()  throws Throwable  {
//       String string0 = "-J~YF\\XD/~PA";
//       Locale locale0 = Locale.SIMPLIFIED_CHINESE;
//       assertNotNull(locale0);
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("CHN", locale0.getISO3Country());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("zh_CN", locale0.toString());
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("CHN", locale0.getISO3Country());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("zh_CN", locale0.toString());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("CHN", locale0.getISO3Country());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("zh_CN", locale0.toString());
//       
//       FastDateFormat fastDateFormat0 = null;
//       try {
//         fastDateFormat0 = new FastDateFormat(string0, zoneInfo0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: J
//          //
//       }
//   }

  @Test
  public void test35()  throws Throwable  {
      String string0 = "Illegal pattern component: ";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
      }
  }

  @Test
  public void test36()  throws Throwable  {
      String string0 = "EH^%+{@58~TAG Ha";
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
      }
  }

  @Test
  public void test37()  throws Throwable  {
      String string0 = "Gunw";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      String string0 = "Dw0/D99dF4koZC$a";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
      }
  }

  @Test
  public void test39()  throws Throwable  {
      String string0 = "Cj!nb{{cX";
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
      }
  }

  @Test
  public void test40()  throws Throwable  {
      String string0 = "^zMB_Q,eD+E";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: B
         //
      }
  }

  @Test
  public void test41()  throws Throwable  {
      String string0 = "w4|,A&b3ur9RkV-,";
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
      }
  }

  @Test
  public void test42()  throws Throwable  {
      int int0 = (-1410);
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en_GB", locale0.toString());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1410
         //
      }
  }

  @Test
  public void test43()  throws Throwable  {
      int int0 = 0;
      String string0 = "Nl]EN%Ic|!'hV~$1*";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.GERMANY;
      //  // Unstable assertion: assertNotNull(locale0);
      //  // Unstable assertion: assertEquals("DEU", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("DE", locale0.getCountry());
      //  // Unstable assertion: assertEquals("deu", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("de", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("de_DE", locale0.toString());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, (TimeZone) zoneInfo0, locale0);
      //  // Unstable assertion: assertNotNull(fastDateFormat0);
      //  // Unstable assertion: assertEquals("DEU", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("DE", locale0.getCountry());
      //  // Unstable assertion: assertEquals("deu", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("de", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("de_DE", locale0.toString());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("HH:mm' Uhr 'z", fastDateFormat0.getPattern());
      
      ZoneInfo zoneInfo1 = (ZoneInfo)fastDateFormat0.getTimeZone();
      //  // Unstable assertion: assertTrue(zoneInfo0.equals((Object)zoneInfo1));
      //  // Unstable assertion: assertTrue(zoneInfo1.equals((Object)zoneInfo0));
      //  // Unstable assertion: assertNotSame(zoneInfo0, zoneInfo1);
      //  // Unstable assertion: assertNotSame(zoneInfo1, zoneInfo0);
      //  // Unstable assertion: assertNotNull(zoneInfo1);
      //  // Unstable assertion: assertEquals("DEU", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("DE", locale0.getCountry());
      //  // Unstable assertion: assertEquals("deu", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("de", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("de_DE", locale0.toString());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo1.getID());
      //  // Unstable assertion: assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("HH:mm' Uhr 'z", fastDateFormat0.getPattern());
  }

  @Test
  public void test44()  throws Throwable  {
      int int0 = 0;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0);
      //  // Unstable assertion: assertNotNull(fastDateFormat0);
      //  // Unstable assertion: assertEquals(33, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
      
      int int1 = fastDateFormat0.hashCode();
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals((-500213385), int1);
      //  // Unstable assertion: assertEquals(33, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
  }

  @Test
  public void test45()  throws Throwable  {
      int int0 = 0;
      String string0 = "Nl]EN%Ic|!'hV~$1*";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, (TimeZone) zoneInfo0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("HH:mm' Uhr 'z", fastDateFormat0.getPattern());
      assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
      
      String string1 = fastDateFormat0.getPattern();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("HH:mm' Uhr 'z", string1);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("HH:mm' Uhr 'z", fastDateFormat0.getPattern());
      assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test
  public void test46()  throws Throwable  {
      int int0 = 0;
      String string0 = "Nl]EN%Ic|!'hV~$1*";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, (TimeZone) zoneInfo0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("HH:mm' Uhr 'z", fastDateFormat0.getPattern());
      
      Locale locale1 = fastDateFormat0.getLocale();
      assertSame(locale1, locale0);
      assertSame(locale0, locale1);
      assertNotNull(locale1);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("", locale1.getVariant());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("DE", locale1.getCountry());
      assertEquals("de_DE", locale1.toString());
      assertEquals("de", locale1.getLanguage());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("HH:mm' Uhr 'z", fastDateFormat0.getPattern());
  }

  @Test
  public void test47() {}
//   @Test
//   public void test47()  throws Throwable  {
//       int int0 = 1;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(11, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("ahh'\u65F6'mm'\u5206'ss'\u79D2'", fastDateFormat0.getPattern());
//   }

  @Test
  public void test48() {}
//   @Test
//   public void test48()  throws Throwable  {
//       int int0 = 0;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, (TimeZone) zoneInfo0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(15, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("GMT", zoneInfo0.getID());
//   }

  @Test
  public void test49() {}
//   @Test
//   public void test49()  throws Throwable  {
//       int int0 = 1;
//       String string0 = "M?Ez$08KiMm@h,";
//       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0, int0, int0, int0, int0, int0, int0, int0, int0, int0);
//       assertNotNull(simpleTimeZone0);
//       assertEquals(1, simpleTimeZone0.getDSTSavings());
//       assertEquals(1, simpleTimeZone0.getRawOffset());
//       assertEquals("java.util.SimpleTimeZone[id=M?Ez$08KiMm@h,,offset=1,dstSavings=1,useDaylight=true,startYear=0,startMode=2,startMonth=1,startDay=1,startDayOfWeek=1,startTime=1,startTimeMode=0,endMode=2,endMonth=1,endDay=1,endDayOfWeek=1,endTime=1,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals("M?Ez$08KiMm@h,", simpleTimeZone0.getID());
//       assertEquals(true, simpleTimeZone0.useDaylightTime());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, (TimeZone) simpleTimeZone0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(1, simpleTimeZone0.getDSTSavings());
//       assertEquals(1, simpleTimeZone0.getRawOffset());
//       assertEquals("java.util.SimpleTimeZone[id=M?Ez$08KiMm@h,,offset=1,dstSavings=1,useDaylight=true,startYear=0,startMode=2,startMonth=1,startDay=1,startDayOfWeek=1,startTime=1,startTimeMode=0,endMode=2,endMonth=1,endDay=1,endDayOfWeek=1,endTime=1,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals("M?Ez$08KiMm@h,", simpleTimeZone0.getID());
//       assertEquals(true, simpleTimeZone0.useDaylightTime());
//       assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5'", fastDateFormat0.getPattern());
//   }

  @Test
  public void test50()  throws Throwable  {
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      
      String string0 = "w$+n.}1/Atx5";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
      }
  }

  @Test
  public void test51()  throws Throwable  {
      String string0 = "Z'M#\\q]d";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
      assertNotNull(fastDateFormat0);
      assertEquals(11, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("Z'M#\\q]d", fastDateFormat0.getPattern());
      
      long long0 = 0L;
      String string1 = fastDateFormat0.format(long0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("+0000M#\\q]d", string1);
      assertEquals(11, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("Z'M#\\q]d", fastDateFormat0.getPattern());
      
      char char0 = 'k';
      ParsePosition parsePosition0 = new ParsePosition((int) char0);
      assertNotNull(parsePosition0);
      assertEquals(107, parsePosition0.getIndex());
      assertEquals(-1, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=107,errorIndex=-1]", parsePosition0.toString());
      
      Object object0 = fastDateFormat0.parseObject(string1, parsePosition0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNull(object0);
      assertEquals(0, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=0]", parsePosition0.toString());
      assertEquals(0, parsePosition0.getIndex());
      assertEquals(11, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("Z'M#\\q]d", fastDateFormat0.getPattern());
  }

  @Test
  public void test52() {}
//   @Test
//   public void test52()  throws Throwable  {
//       int int0 = 0;
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, (TimeZone) zoneInfo0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(33, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//   }

  @Test
  public void test53() {}
//   @Test
//   public void test53()  throws Throwable  {
//       String string0 = "3k}h";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       Locale locale0 = new Locale(string0, string0);
//       assertNotNull(locale0);
//       assertEquals("3K}H", locale0.getCountry());
//       assertEquals("3k}h", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("3k}h_3K}H", locale0.toString());
//       
//       FastDateFormat fastDateFormat0 = new FastDateFormat(string0, zoneInfo0, locale0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("3K}H", locale0.getCountry());
//       assertEquals("3k}h", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("3k}h_3K}H", locale0.toString());
//       assertEquals(10, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("3k}h", fastDateFormat0.getPattern());
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) zoneInfo0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       
//       String string1 = fastDateFormat0.format((Object) mockGregorianCalendar0);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//       assertNotNull(string1);
//       assertEquals("320}8", string1);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("3K}H", locale0.getCountry());
//       assertEquals("3k}h", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("3k}h_3K}H", locale0.toString());
//       assertEquals(10, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("3k}h", fastDateFormat0.getPattern());
//   }

  @Test
  public void test54()  throws Throwable  {
      String string0 = "2.,XJya=TF";
      TimeZone timeZone0 = null;
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: X
         //
      }
  }

  @Test
  public void test55() {}
//   @Test
//   public void test55()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(33, fastDateFormat0.getMaxLengthEstimate());
//       
//       String string0 = fastDateFormat0.toString();
//       assertNotNull(string0);
//       assertEquals("FastDateFormat[yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u65F6'mm'\u5206'ss'\u79D2' z]", string0);
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(33, fastDateFormat0.getMaxLengthEstimate());
//   }

  @Test
  public void test56() {}
//   @Test
//   public void test56()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat0.getPattern());
//       
//       int int1 = fastDateFormat0.getMaxLengthEstimate();
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertEquals(17, int1);
//       assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat0.getPattern());
//   }

  @Test
  public void test57()  throws Throwable  {
      String string0 = "M?Ez$08KiMm@h,";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: i
         //
      }
  }

  @Test
  public void test58() {}
//   @Test
//   public void test58()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat0.getPattern());
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       
//       Date date0 = mockGregorianCalendar0.getTime();
//       assertNotNull(date0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=31,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("Wed Dec 31 00:00:00 GMT 2", date0.toString());
//       
//       String string0 = fastDateFormat0.format(date0);
//       assertNotNull(string0);
//       assertEquals("0002\u5E7412\u670831\u65E5 \u661F\u671F\u4E09", string0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=31,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("Wed Dec 31 00:00:00 GMT 2", date0.toString());
//       assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat0.getPattern());
//   }
}
