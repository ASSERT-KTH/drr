/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:48:00 GMT 2014
 */

package org.apache.commons.lang3.time;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.text.AttributedCharacterIterator;
import java.text.ParsePosition;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDateFormat;




import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;


public class FastDateFormatEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "3Z`";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(7, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("3Z`", fastDateFormat0.getPattern());
      assertNotNull(fastDateFormat0);
      
      long long0 = (-3198L);
      String string1 = fastDateFormat0.format(long0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(7, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("3Z`", fastDateFormat0.getPattern());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("3+0000`", string1);
  }

  @Test
  public void test01() {}
//   @Test
//   public void test01()  throws Throwable  {
//       int int0 = 1;
//       Locale locale0 = Locale.ENGLISH;
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("", locale0.getCountry());
//       assertEquals("en", locale0.toString());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getISO3Country());
//       assertNotNull(locale0);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, locale0);
//       assertEquals(38, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("", locale0.getCountry());
//       assertEquals("en", locale0.toString());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getISO3Country());
//       assertNotNull(fastDateFormat0);
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertNotNull(mockGregorianCalendar0);
//       
//       Date date0 = mockGregorianCalendar0.getGregorianChange();
//       assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertNotNull(date0);
//       
//       String string0 = fastDateFormat0.format(date0);
//       assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
//       assertEquals(38, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("", locale0.getCountry());
//       assertEquals("en", locale0.toString());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getISO3Country());
//       assertNotNull(string0);
//       assertEquals("October 15, 1582 12:00:00 AM GMT", string0);
//   }

  @Test
  public void test02() {}
//   @Test
//   public void test02()  throws Throwable  {
//       int int0 = (-543);
//       String string0 = "\"Vhlu;m5,xf\"-55";
//       int int1 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int1, int1);
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(29, fastDateFormat0.getMaxLengthEstimate());
//       assertFalse(int1 == int0);
//       assertNotNull(fastDateFormat0);
//       
//       int int2 = 1295;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int1, int2, int1, int0, int0, int0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=1295,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-543,HOUR_OF_DAY=-543,MINUTE=-543,SECOND=-543,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int2);
//       assertFalse(int1 == int0);
//       assertFalse(int2 == int1);
//       assertFalse(int2 == int0);
//       assertNotNull(mockGregorianCalendar0);
//       
//       StringBuffer stringBuffer0 = new StringBuffer((CharSequence) string0);
//       assertEquals(15, stringBuffer0.length());
//       assertEquals("\"Vhlu;m5,xf\"-55", stringBuffer0.toString());
//       assertEquals(31, stringBuffer0.capacity());
//       assertNotNull(stringBuffer0);
//       
//       StringBuffer stringBuffer1 = fastDateFormat0.applyRules(mockGregorianCalendar0, stringBuffer0);
//       assertSame(stringBuffer0, stringBuffer1);
//       assertSame(stringBuffer1, stringBuffer0);
//       assertEquals(39, stringBuffer0.length());
//       assertEquals(64, stringBuffer0.capacity());
//       assertEquals("\"Vhlu;m5,xf\"-550107\u5E7411\u67086\u65E5 23\u664247\u520657\u79D2 GMT", stringBuffer0.toString());
//       assertEquals(39, stringBuffer1.length());
//       assertEquals("\"Vhlu;m5,xf\"-550107\u5E7411\u67086\u65E5 23\u664247\u520657\u79D2 GMT", stringBuffer1.toString());
//       assertEquals(64, stringBuffer1.capacity());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-58763923923000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=107,MONTH=10,WEEK_OF_YEAR=45,WEEK_OF_MONTH=1,DAY_OF_MONTH=6,DAY_OF_YEAR=310,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=47,SECOND=57,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(29, fastDateFormat0.getMaxLengthEstimate());
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int2);
//       assertFalse(int1 == int0);
//       assertFalse(int2 == int1);
//       assertFalse(int2 == int0);
//       assertNotNull(stringBuffer1);
//   }

  @Test
  public void test03() {}
//   @Test
//   public void test03()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertEquals("yy/MM/dd H:mm", fastDateFormat0.getPattern());
//       assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
//       assertNotNull(fastDateFormat0);
//       
//       String string0 = "}";
//       FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertEquals(1, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals("}", fastDateFormat1.getPattern());
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertNotNull(fastDateFormat1);
//       
//       boolean boolean0 = fastDateFormat0.equals((Object) fastDateFormat1);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertNotSame(fastDateFormat0, fastDateFormat1);
//       assertEquals(1, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals("}", fastDateFormat1.getPattern());
//       assertEquals("yy/MM/dd H:mm", fastDateFormat0.getPattern());
//       assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
//       assertFalse(boolean0);
//   }

  @Test
  public void test04() {}
//   @Test
//   public void test04()  throws Throwable  {
//       int int0 = 3;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0);
//       assertEquals("yy/MM/dd", fastDateFormat0.getPattern());
//       assertEquals(8, fastDateFormat0.getMaxLengthEstimate());
//       assertNotNull(fastDateFormat0);
//       
//       String string0 = "ji!xy:Gx";
//       boolean boolean0 = fastDateFormat0.equals((Object) string0);
//       assertEquals("yy/MM/dd", fastDateFormat0.getPattern());
//       assertEquals(8, fastDateFormat0.getMaxLengthEstimate());
//       assertFalse(boolean0);
//   }

  @Test
  public void test05() {}
//   @Test
//   public void test05()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yy/MM/dd H:mm", fastDateFormat0.getPattern());
//       assertNotNull(fastDateFormat0);
//       
//       boolean boolean0 = fastDateFormat0.equals((Object) fastDateFormat0);
//       assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yy/MM/dd H:mm", fastDateFormat0.getPattern());
//       assertTrue(boolean0);
//   }

  @Test
  public void test06() {}
//   @Test
//   public void test06()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertEquals("yy/MM/dd H:mm", fastDateFormat0.getPattern());
//       assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
//       assertNotNull(fastDateFormat0);
//       
//       String string0 = null;
//       // Undeclared exception!
//       try {
//         AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator((Object) string0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Unknown class: <null>
//          //
//       }
//   }

  @Test
  public void test07() {}
//   @Test
//   public void test07()  throws Throwable  {
//       int int0 = 3;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0);
//       assertEquals(8, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yy/MM/dd", fastDateFormat0.getPattern());
//       assertNotNull(fastDateFormat0);
//       
//       Long long0 = new Long((long) int0);
//       assertEquals(3L, (long)long0);
//       
//       AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator((Object) long0);
//       assertEquals(8, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yy/MM/dd", fastDateFormat0.getPattern());
//       assertEquals(8, attributedCharacterIterator0.getEndIndex());
//       assertEquals(0, attributedCharacterIterator0.getRunStart());
//       assertEquals(8, attributedCharacterIterator0.getRunLimit());
//       assertEquals(0, attributedCharacterIterator0.getBeginIndex());
//       assertEquals(0, attributedCharacterIterator0.getIndex());
//       assertNotNull(attributedCharacterIterator0);
//   }

  @Test
  public void test08() {}
//   @Test
//   public void test08()  throws Throwable  {
//       String string0 = "8kh(5d1";
//       int int0 = (-3429);
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-3429,MONTH=-3429,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-3429,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3429,HOUR_OF_DAY=-3429,MINUTE=-3429,SECOND=-3429,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertNotNull(mockGregorianCalendar0);
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-3429,MONTH=-3429,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-3429,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3429,HOUR_OF_DAY=-3429,MINUTE=-3429,SECOND=-3429,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertNotNull(zoneInfo0);
//       
//       Locale locale0 = Locale.CHINA;
//       assertEquals("zh_CN", locale0.toString());
//       assertEquals("CHN", locale0.getISO3Country());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertNotNull(locale0);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
//       assertEquals("8kh(5d1", fastDateFormat0.getPattern());
//       assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("zh_CN", locale0.toString());
//       assertEquals("CHN", locale0.getISO3Country());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-3429,MONTH=-3429,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-3429,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3429,HOUR_OF_DAY=-3429,MINUTE=-3429,SECOND=-3429,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertNotNull(fastDateFormat0);
//       
//       String string1 = fastDateFormat0.format((Object) mockGregorianCalendar0);
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//       assertEquals("8kh(5d1", fastDateFormat0.getPattern());
//       assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("zh_CN", locale0.toString());
//       assertEquals("CHN", locale0.getISO3Country());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-179704940769000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=3726,MONTH=5,WEEK_OF_YEAR=25,WEEK_OF_MONTH=3,DAY_OF_MONTH=17,DAY_OF_YEAR=168,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=4,HOUR_OF_DAY=16,MINUTE=53,SECOND=51,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       assertNotNull(string1);
//       assertEquals("8164(5171", string1);
//   }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "Expected type: %s, actual: %s";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = new Locale(string0);
      assertEquals("expected type: %s, actual: %s", locale0.getLanguage());
      assertEquals("expected type: %s, actual: %s", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: x
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "v'*D.2JH/5`}9fx{(7I";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: v
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "uqYQuXcX{";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "mD,r7it(D$^5$%yW*5N";
      Locale locale0 = Locale.FRANCE;
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "[5~)w4)q6&79Np";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = null;
      String string0 = "/!&ap4DP%(o";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: p
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "og\\;/C<";
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "hsn";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "lJ{)(rpoD}";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: l
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "ji!xy:Gx";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: j
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "gxVn\\KN&#YIm";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: g
         //
      }
  }

  @Test
  public void test20() {}
//   @Test
//   public void test20()  throws Throwable  {
//       String string0 = "e'c,DR,sc6>Oq5un7s";
//       TimeZone timeZone0 = null;
//       Locale locale0 = Locale.KOREAN;
//       assertEquals("", locale0.getCountry());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("ko", locale0.getLanguage());
//       assertEquals("ko", locale0.toString());
//       assertEquals("kor", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertNotNull(locale0);
//       
//       FastDateFormat fastDateFormat0 = null;
//       try {
//         fastDateFormat0 = new FastDateFormat(string0, timeZone0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: e
//          //
//       }
//   }

  @Test
  public void test21() {}
//   @Test
//   public void test21()  throws Throwable  {
//       String string0 = "wc`";
//       int int0 = (-1033);
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1033,MONTH=-1033,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1033,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1033,HOUR_OF_DAY=-1033,MINUTE=-1033,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertNotNull(mockGregorianCalendar0);
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1033,MONTH=-1033,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1033,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1033,HOUR_OF_DAY=-1033,MINUTE=-1033,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertNotNull(zoneInfo0);
//       
//       Locale locale0 = Locale.ITALIAN;
//       assertEquals("it", locale0.getLanguage());
//       assertEquals("it", locale0.toString());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("ita", locale0.getISO3Language());
//       assertEquals("", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       assertNotNull(locale0);
//       
//       FastDateFormat fastDateFormat0 = null;
//       try {
//         fastDateFormat0 = new FastDateFormat(string0, zoneInfo0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: c
//          //
//       }
//   }

  @Test
  public void test22() {}
//   @Test
//   public void test22()  throws Throwable  {
//       String string0 = ";W_bNm0&KR? I";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(zoneInfo0);
//       
//       Locale locale0 = Locale.JAPAN;
//       assertEquals("jpn", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("ja", locale0.getLanguage());
//       assertEquals("JPN", locale0.getISO3Country());
//       assertEquals("ja_JP", locale0.toString());
//       assertEquals("JP", locale0.getCountry());
//       assertNotNull(locale0);
//       
//       FastDateFormat fastDateFormat0 = null;
//       try {
//         fastDateFormat0 = new FastDateFormat(string0, zoneInfo0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: b
//          //
//       }
//   }

  @Test
  public void test23() {}
//   @Test
//   public void test23()  throws Throwable  {
//       String string0 = "a:?5290FYu.3z[D";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(zoneInfo0);
//       
//       Locale locale0 = Locale.ITALIAN;
//       assertEquals("it", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getCountry());
//       assertEquals("it", locale0.toString());
//       assertEquals("ita", locale0.getISO3Language());
//       assertEquals("", locale0.getISO3Country());
//       assertNotNull(locale0);
//       
//       FastDateFormat fastDateFormat0 = null;
//       try {
//         fastDateFormat0 = new FastDateFormat(string0, zoneInfo0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: Y
//          //
//       }
//   }

  @Test
  public void test24() {}
//   @Test
//   public void test24()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yy/MM/dd H:mm", fastDateFormat0.getPattern());
//       assertNotNull(fastDateFormat0);
//       
//       int int0 = fastDateFormat0.getMaxLengthEstimate();
//       assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yy/MM/dd H:mm", fastDateFormat0.getPattern());
//       assertEquals(16, int0);
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
//       assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yy/MM/dd H:mm", fastDateFormat0.getPattern());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=16,MONTH=16,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=16,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=4,HOUR_OF_DAY=16,MINUTE=16,SECOND=16,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertNotNull(mockGregorianCalendar0);
//       
//       String string0 = "X-,`{'}}";
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yy/MM/dd H:mm", fastDateFormat0.getPattern());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=16,MONTH=16,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=16,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=4,HOUR_OF_DAY=16,MINUTE=16,SECOND=16,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertNotNull(zoneInfo0);
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: X
//          //
//       }
//   }

  @Test
  public void test25() {}
//   @Test
//   public void test25()  throws Throwable  {
//       int int0 = (-543);
//       String string0 = "\"Vhlu;m5,xf\"-55";
//       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals("\"Vhlu;m5,xf\"-55", simpleTimeZone0.getID());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals(-543, simpleTimeZone0.getRawOffset());
//       assertEquals("java.util.SimpleTimeZone[id=\"Vhlu;m5,xf\"-55,offset=-543,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertNotNull(simpleTimeZone0);
//       
//       Locale locale0 = Locale.JAPANESE;
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("ja", locale0.toString());
//       assertEquals("jpn", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("ja", locale0.getLanguage());
//       assertEquals("", locale0.getCountry());
//       assertNotNull(locale0);
//       
//       FastDateFormat fastDateFormat0 = null;
//       try {
//         fastDateFormat0 = new FastDateFormat(string0, simpleTimeZone0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: V
//          //
//       }
//   }

  @Test
  public void test26() {}
//   @Test
//   public void test26()  throws Throwable  {
//       int int0 = 0;
//       Locale locale0 = Locale.GERMANY;
//       assertEquals("de_DE", locale0.toString());
//       assertEquals("DEU", locale0.getISO3Country());
//       assertEquals("de", locale0.getLanguage());
//       assertEquals("DE", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       assertEquals("deu", locale0.getISO3Language());
//       assertNotNull(locale0);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, locale0);
//       assertEquals("HH:mm' Uhr 'z", fastDateFormat0.getPattern());
//       assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("de_DE", locale0.toString());
//       assertEquals("DEU", locale0.getISO3Country());
//       assertEquals("de", locale0.getLanguage());
//       assertEquals("DE", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       assertEquals("deu", locale0.getISO3Language());
//       assertNotNull(fastDateFormat0);
//       
//       MockDate mockDate0 = new MockDate((long) int0);
//       assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
//       assertNotNull(mockDate0);
//       
//       String string0 = fastDateFormat0.format((Object) mockDate0);
//       assertEquals("HH:mm' Uhr 'z", fastDateFormat0.getPattern());
//       assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
//       assertEquals("de_DE", locale0.toString());
//       assertEquals("DEU", locale0.getISO3Country());
//       assertEquals("de", locale0.getLanguage());
//       assertEquals("DE", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       assertEquals("deu", locale0.getISO3Language());
//       assertNotNull(string0);
//       assertEquals("00:00 Uhr GMT", string0);
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: U
//          //
//       }
//   }

  @Test
  public void test27()  throws Throwable  {
      String string0 = "The validated map is empty";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = "R_";
      Locale locale0 = Locale.CANADA;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: R
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = "WQeM}s]kXq\\@\\f";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Q
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = "}PdACIf0et";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      String string0 = "74mOia85>6R%fFD)p";
      Locale locale0 = Locale.ITALIAN;
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: O
         //
      }
  }

  @Test
  public void test32() {}
//   @Test
//   public void test32()  throws Throwable  {
//       String string0 = "Negative values should not be possible";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(zoneInfo0);
//       
//       Locale locale0 = Locale.FRANCE;
//       assertEquals("fr_FR", locale0.toString());
//       assertEquals("FRA", locale0.getISO3Country());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("FR", locale0.getCountry());
//       assertEquals("fr", locale0.getLanguage());
//       assertNotNull(locale0);
//       
//       FastDateFormat fastDateFormat0 = null;
//       try {
//         fastDateFormat0 = new FastDateFormat(string0, zoneInfo0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: N
//          //
//       }
//   }

  @Test
  public void test33()  throws Throwable  {
      String string0 = "L`cUBO^]hXhT}";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: L
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      String string0 = "F@J~o`";
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: J
         //
      }
  }

  @Test
  public void test35() {}
//   @Test
//   public void test35()  throws Throwable  {
//       String string0 = "Illegal pattern component: ";
//       TimeZone timeZone0 = null;
//       Locale locale0 = Locale.KOREA;
//       assertEquals("kor", locale0.getISO3Language());
//       assertEquals("ko", locale0.getLanguage());
//       assertEquals("ko_KR", locale0.toString());
//       assertEquals("KOR", locale0.getISO3Country());
//       assertEquals("KR", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       assertNotNull(locale0);
//       
//       FastDateFormat fastDateFormat0 = null;
//       try {
//         fastDateFormat0 = new FastDateFormat(string0, timeZone0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: I
//          //
//       }
//   }

  @Test
  public void test36()  throws Throwable  {
      String string0 = "&Efx:?>";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
      }
  }

  @Test
  public void test37()  throws Throwable  {
      String string0 = "Cannot assign a %s to a %s";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      String string0 = "|B3J7,\\H x}LT";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: B
         //
      }
  }

  @Test
  public void test39()  throws Throwable  {
      String string0 = "{A:\"_DwglA8VvJ";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
      }
  }

  @Test
  public void test40()  throws Throwable  {
      String string0 = "h`iShdH.Q7}}`Cax^2+";
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.US;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: i
         //
      }
  }

  @Test
  public void test41() {}
//   @Test
//   public void test41()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0);
//       assertEquals(29, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertNotNull(fastDateFormat0);
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)fastDateFormat0.getTimeZone();
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(29, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertNotNull(zoneInfo0);
//   }

  @Test
  public void test42()  throws Throwable  {
      int int0 = 0;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0);
      //  // Unstable assertion: assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals(29, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertNotNull(fastDateFormat0);
      
      int int1 = fastDateFormat0.hashCode();
      //  // Unstable assertion: assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals(29, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertEquals(221793542, int1);
  }

  @Test
  public void test43() {}
//   @Test
//   public void test43()  throws Throwable  {
//       int int0 = 1;
//       Locale locale0 = Locale.ENGLISH;
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getCountry());
//       assertEquals("en", locale0.toString());
//       assertNotNull(locale0);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, locale0);
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getCountry());
//       assertEquals("en", locale0.toString());
//       assertEquals("MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
//       assertEquals(38, fastDateFormat0.getMaxLengthEstimate());
//       assertNotNull(fastDateFormat0);
//       
//       String string0 = fastDateFormat0.getPattern();
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getCountry());
//       assertEquals("en", locale0.toString());
//       assertEquals("MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
//       assertEquals(38, fastDateFormat0.getMaxLengthEstimate());
//       assertNotNull(string0);
//       assertEquals("MMMM d, yyyy h:mm:ss a z", string0);
//   }

  @Test
  public void test44() {}
//   @Test
//   public void test44()  throws Throwable  {
//       int int0 = 0;
//       Locale locale0 = Locale.GERMANY;
//       assertEquals("deu", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("de_DE", locale0.toString());
//       assertEquals("de", locale0.getLanguage());
//       assertEquals("DEU", locale0.getISO3Country());
//       assertEquals("DE", locale0.getCountry());
//       assertNotNull(locale0);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, locale0);
//       assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("HH:mm' Uhr 'z", fastDateFormat0.getPattern());
//       assertEquals("deu", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("de_DE", locale0.toString());
//       assertEquals("de", locale0.getLanguage());
//       assertEquals("DEU", locale0.getISO3Country());
//       assertEquals("DE", locale0.getCountry());
//       assertNotNull(fastDateFormat0);
//       
//       Locale locale1 = fastDateFormat0.getLocale();
//       assertSame(locale1, locale0);
//       assertSame(locale0, locale1);
//       assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("HH:mm' Uhr 'z", fastDateFormat0.getPattern());
//       assertEquals("de", locale1.getLanguage());
//       assertEquals("DEU", locale1.getISO3Country());
//       assertEquals("deu", locale1.getISO3Language());
//       assertEquals("DE", locale1.getCountry());
//       assertEquals("de_DE", locale1.toString());
//       assertEquals("", locale1.getVariant());
//       assertEquals("deu", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("de_DE", locale0.toString());
//       assertEquals("de", locale0.getLanguage());
//       assertEquals("DEU", locale0.getISO3Country());
//       assertEquals("DE", locale0.getCountry());
//       assertNotNull(locale1);
//   }

  @Test
  public void test45() {}
//   @Test
//   public void test45()  throws Throwable  {
//       int int0 = 1;
//       String string0 = "dd.MM.yy HH:mm";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(zoneInfo0);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, (TimeZone) zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("H:mm:ss z", fastDateFormat0.getPattern());
//       assertNotNull(fastDateFormat0);
//   }

  @Test
  public void test46() {}
//   @Test
//   public void test46()  throws Throwable  {
//       int int0 = 0;
//       Locale locale0 = Locale.PRC;
//       assertEquals("CHN", locale0.getISO3Country());
//       assertEquals("zh_CN", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("zh", locale0.getLanguage());
//       assertNotNull(locale0);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, locale0);
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat0.getPattern());
//       assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("CHN", locale0.getISO3Country());
//       assertEquals("zh_CN", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("zh", locale0.getLanguage());
//       assertNotNull(fastDateFormat0);
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertNotNull(mockGregorianCalendar0);
//       
//       String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat0.getPattern());
//       assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals("CHN", locale0.getISO3Country());
//       assertEquals("zh_CN", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("zh", locale0.getLanguage());
//       assertNotNull(string0);
//       assertEquals("0002\u5E7412\u670831\u65E5 \u661F\u671F\u4E09", string0);
//   }

  @Test
  public void test47() {}
//   @Test
//   public void test47()  throws Throwable  {
//       int int0 = 1;
//       String string0 = "dd.MM.yy HH:mm";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(zoneInfo0);
//       
//       Locale locale0 = null;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, (TimeZone) zoneInfo0, locale0);
//       assertEquals(25, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy/MM/dd H:mm:ss z", fastDateFormat0.getPattern());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(fastDateFormat0);
//       
//       ParsePosition parsePosition0 = new ParsePosition(int0);
//       assertEquals(-1, parsePosition0.getErrorIndex());
//       assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
//       assertEquals(1, parsePosition0.getIndex());
//       assertNotNull(parsePosition0);
//       
//       Object object0 = fastDateFormat0.parseObject(string0, parsePosition0);
//       assertEquals(0, parsePosition0.getIndex());
//       assertEquals("java.text.ParsePosition[index=0,errorIndex=0]", parsePosition0.toString());
//       assertEquals(0, parsePosition0.getErrorIndex());
//       assertEquals(25, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy/MM/dd H:mm:ss z", fastDateFormat0.getPattern());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNull(object0);
//   }

  @Test
  public void test48()  throws Throwable  {
      String string0 = "FastDateFormat[";
      TimeZone timeZone0 = null;
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
      }
  }

  @Test
  public void test49() {}
//   @Test
//   public void test49()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertEquals("yy/MM/dd H:mm", fastDateFormat0.getPattern());
//       assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
//       assertNotNull(fastDateFormat0);
//       
//       int int0 = 5767;
//       StringBuffer stringBuffer0 = new StringBuffer(int0);
//       assertEquals(5767, stringBuffer0.capacity());
//       assertEquals(0, stringBuffer0.length());
//       assertEquals("", stringBuffer0.toString());
//       assertNotNull(stringBuffer0);
//       
//       StringBuffer stringBuffer1 = stringBuffer0.append((Object) fastDateFormat0);
//       assertSame(stringBuffer1, stringBuffer0);
//       assertSame(stringBuffer0, stringBuffer1);
//       assertEquals(29, stringBuffer1.length());
//       assertEquals(5767, stringBuffer1.capacity());
//       assertEquals("FastDateFormat[yy/MM/dd H:mm]", stringBuffer1.toString());
//       assertEquals("yy/MM/dd H:mm", fastDateFormat0.getPattern());
//       assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(5767, stringBuffer0.capacity());
//       assertEquals(29, stringBuffer0.length());
//       assertEquals("FastDateFormat[yy/MM/dd H:mm]", stringBuffer0.toString());
//       assertNotNull(stringBuffer1);
//   }

  @Test
  public void test50()  throws Throwable  {
      int int0 = 3;
      Locale locale0 = Locale.KOREAN;
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(mockGregorianCalendar0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(zoneInfo0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, (TimeZone) zoneInfo0, locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(10, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("a h:mm", fastDateFormat0.getPattern());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(fastDateFormat0);
  }

  @Test
  public void test51() {}
//   @Test
//   public void test51()  throws Throwable  {
//       int int0 = 1;
//       String string0 = "dd.MM.yy HH:mm";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(zoneInfo0);
//       
//       Locale locale0 = null;
//       String string1 = null;
//       int[] intArray0 = new int[7];
//       ParsePosition parsePosition0 = new ParsePosition(int0);
//       assertEquals(1, parsePosition0.getIndex());
//       assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
//       assertEquals(-1, parsePosition0.getErrorIndex());
//       assertNotNull(parsePosition0);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, (TimeZone) zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("yyyy/MM/dd", fastDateFormat0.getPattern());
//       assertEquals(10, fastDateFormat0.getMaxLengthEstimate());
//       assertNotNull(fastDateFormat0);
//       
//       intArray0[0] = int0;
//       intArray0[1] = int0;
//       intArray0[2] = int0;
//       intArray0[3] = int0;
//       String string2 = fastDateFormat0.format((long) intArray0[1]);
//       assertNotSame(string2, string0);
//       assertNotSame(string0, string2);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("yyyy/MM/dd", fastDateFormat0.getPattern());
//       assertEquals(10, fastDateFormat0.getMaxLengthEstimate());
//       assertFalse(string2.equals((Object)string0));
//       assertFalse(string0.equals((Object)string2));
//       assertArrayEquals(new int[] {1, 1, 1, 1, 0, 0, 0}, intArray0);
//       assertNotNull(string2);
//       assertEquals("1970/01/01", string2);
//       
//       intArray0[4] = int0;
//       intArray0[5] = int0;
//       intArray0[6] = intArray0[2];
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertNotNull(mockGregorianCalendar0);
//       
//       int int1 = (-1);
//       int int2 = 728;
//       int int3 = 2349;
//       MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(int1, int2, int3);
//       assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar1.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1,MONTH=728,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2349,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
//       assertFalse(int3 == int2);
//       assertFalse(int3 == int0);
//       assertFalse(int3 == int1);
//       assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
//       assertFalse(int1 == int2);
//       assertFalse(int1 == int3);
//       assertFalse(int1 == int0);
//       assertFalse(int2 == int1);
//       assertFalse(int2 == int3);
//       assertFalse(int2 == int0);
//       assertNotNull(mockGregorianCalendar1);
//       
//       StringBuffer stringBuffer0 = new StringBuffer();
//       assertEquals(16, stringBuffer0.capacity());
//       assertEquals(0, stringBuffer0.length());
//       assertEquals("", stringBuffer0.toString());
//       assertNotNull(stringBuffer0);
//       
//       long long0 = 3074L;
//       StringBuffer stringBuffer1 = stringBuffer0.append(long0);
//       assertSame(stringBuffer0, stringBuffer1);
//       assertSame(stringBuffer1, stringBuffer0);
//       assertEquals(4, stringBuffer0.length());
//       assertEquals(16, stringBuffer0.capacity());
//       assertEquals("3074", stringBuffer0.toString());
//       assertEquals("3074", stringBuffer1.toString());
//       assertEquals(4, stringBuffer1.length());
//       assertEquals(16, stringBuffer1.capacity());
//       assertNotNull(stringBuffer1);
//       
//       StringBuffer stringBuffer2 = stringBuffer1.insert(int0, intArray0[3]);
//       assertSame(stringBuffer0, stringBuffer2);
//       assertSame(stringBuffer0, stringBuffer1);
//       assertSame(stringBuffer1, stringBuffer0);
//       assertSame(stringBuffer1, stringBuffer2);
//       assertSame(stringBuffer2, stringBuffer1);
//       assertSame(stringBuffer2, stringBuffer0);
//       assertEquals("31074", stringBuffer0.toString());
//       assertEquals(16, stringBuffer0.capacity());
//       assertEquals(5, stringBuffer0.length());
//       assertEquals("31074", stringBuffer1.toString());
//       assertEquals(5, stringBuffer1.length());
//       assertEquals(16, stringBuffer1.capacity());
//       assertEquals(16, stringBuffer2.capacity());
//       assertEquals("31074", stringBuffer2.toString());
//       assertEquals(5, stringBuffer2.length());
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int3);
//       assertFalse(int0 == int1);
//       assertArrayEquals(new int[] {1, 1, 1, 1, 1, 1, 1}, intArray0);
//       assertNotNull(stringBuffer2);
//       
//       int int4 = 16;
//       StringBuffer stringBuffer3 = stringBuffer2.append(int4);
//       assertSame(stringBuffer0, stringBuffer2);
//       assertSame(stringBuffer0, stringBuffer3);
//       assertSame(stringBuffer0, stringBuffer1);
//       assertSame(stringBuffer1, stringBuffer3);
//       assertSame(stringBuffer1, stringBuffer0);
//       assertSame(stringBuffer1, stringBuffer2);
//       assertSame(stringBuffer3, stringBuffer2);
//       assertSame(stringBuffer3, stringBuffer0);
//       assertSame(stringBuffer3, stringBuffer1);
//       assertSame(stringBuffer2, stringBuffer1);
//       assertSame(stringBuffer2, stringBuffer3);
//       assertSame(stringBuffer2, stringBuffer0);
//       assertEquals(16, stringBuffer0.capacity());
//       assertEquals(7, stringBuffer0.length());
//       assertEquals("3107416", stringBuffer0.toString());
//       assertEquals(16, stringBuffer1.capacity());
//       assertEquals("3107416", stringBuffer1.toString());
//       assertEquals(7, stringBuffer1.length());
//       assertEquals("3107416", stringBuffer3.toString());
//       assertEquals(16, stringBuffer3.capacity());
//       assertEquals(7, stringBuffer3.length());
//       assertEquals(16, stringBuffer2.capacity());
//       assertEquals(7, stringBuffer2.length());
//       assertEquals("3107416", stringBuffer2.toString());
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int3);
//       assertFalse(int0 == int4);
//       assertFalse(int0 == int1);
//       assertFalse(int4 == int0);
//       assertFalse(int4 == int3);
//       assertFalse(int4 == int2);
//       assertFalse(int4 == int1);
//       assertArrayEquals(new int[] {1, 1, 1, 1, 1, 1, 1}, intArray0);
//       assertNotNull(stringBuffer3);
//       
//       int int5 = (-2723);
//       FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(int0, int0, (TimeZone) zoneInfo0);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertNotSame(string0, string2);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(25, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals("yyyy/MM/dd H:mm:ss z", fastDateFormat1.getPattern());
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int3);
//       assertFalse(int0 == int4);
//       assertFalse(int0 == int5);
//       assertFalse(int0 == int1);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertFalse(string0.equals((Object)string2));
//       assertNotNull(fastDateFormat1);
//   }

  @Test
  public void test52() {}
//   @Test
//   public void test52()  throws Throwable  {
//       int int0 = 0;
//       String string0 = "org.apache.commons.lang3.time.FormatCache";
//       int int1 = 0;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertNotNull(mockGregorianCalendar0);
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertNotNull(zoneInfo0);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int1, int0, (TimeZone) zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(29, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertNotNull(fastDateFormat0);
//       
//       StringBuffer stringBuffer0 = new StringBuffer((CharSequence) string0);
//       assertEquals(41, stringBuffer0.length());
//       assertEquals("org.apache.commons.lang3.time.FormatCache", stringBuffer0.toString());
//       assertEquals(57, stringBuffer0.capacity());
//       assertNotNull(stringBuffer0);
//       
//       StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
//       assertSame(stringBuffer1, stringBuffer0);
//       assertSame(stringBuffer0, stringBuffer1);
//       assertEquals(116, stringBuffer1.capacity());
//       assertEquals("org.apache.commons.lang3.time.FormatCache2014\u5E742\u670814\u65E5 20\u664221\u520621\u79D2 GMT", stringBuffer1.toString());
//       assertEquals(65, stringBuffer1.length());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(116, stringBuffer0.capacity());
//       assertEquals(65, stringBuffer0.length());
//       assertEquals("org.apache.commons.lang3.time.FormatCache2014\u5E742\u670814\u65E5 20\u664221\u520621\u79D2 GMT", stringBuffer0.toString());
//       assertEquals(29, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertNotNull(stringBuffer1);
//       
//       Locale locale0 = Locale.TAIWAN;
//       assertEquals("", locale0.getVariant());
//       assertEquals("TW", locale0.getCountry());
//       assertEquals("TWN", locale0.getISO3Country());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("zh_TW", locale0.toString());
//       assertNotNull(locale0);
//       
//       Date date0 = mockGregorianCalendar0.getTime();
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertNotNull(date0);
//       
//       String string1 = fastDateFormat0.format(date0);
//       assertNotSame(string1, string0);
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(29, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertFalse(string1.equals((Object)string0));
//       assertNotNull(string1);
//       assertEquals("2014\u5E742\u670814\u65E5 20\u664221\u520621\u79D2 GMT", string1);
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(int0, int0);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat1.getPattern());
//       assertEquals(29, fastDateFormat1.getMaxLengthEstimate());
//       assertTrue(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertNotNull(fastDateFormat1);
//       
//       int int2 = (-636);
//       int int3 = 1210;
//       String string2 = "ryH";
//       assertNotSame(string2, string0);
//       assertNotSame(string2, string1);
//       assertFalse(string2.equals((Object)string1));
//       
//       mockGregorianCalendar0.setGregorianChange(date0);
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       
//       long long0 = 0L;
//       Set<String> set0 = locale0.getUnicodeLocaleAttributes();
//       assertEquals("", locale0.getVariant());
//       assertEquals("TW", locale0.getCountry());
//       assertEquals("TWN", locale0.getISO3Country());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("zh_TW", locale0.toString());
//       assertEquals(true, set0.isEmpty());
//       assertEquals(0, set0.size());
//       assertNotNull(set0);
//       
//       StringBuffer stringBuffer2 = new StringBuffer(int0);
//       assertNotSame(stringBuffer2, stringBuffer0);
//       assertNotSame(stringBuffer2, stringBuffer1);
//       assertEquals(0, stringBuffer2.length());
//       assertEquals("", stringBuffer2.toString());
//       assertEquals(0, stringBuffer2.capacity());
//       assertFalse(stringBuffer2.equals((Object)stringBuffer0));
//       assertFalse(stringBuffer2.equals((Object)stringBuffer1));
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int3);
//       assertNotNull(stringBuffer2);
//       
//       char char0 = 'b';
//       StringBuffer stringBuffer3 = stringBuffer2.append(char0);
//       assertNotSame(stringBuffer3, stringBuffer0);
//       assertNotSame(stringBuffer3, stringBuffer1);
//       assertSame(stringBuffer3, stringBuffer2);
//       assertNotSame(stringBuffer2, stringBuffer0);
//       assertNotSame(stringBuffer2, stringBuffer1);
//       assertSame(stringBuffer2, stringBuffer3);
//       assertEquals("b", stringBuffer3.toString());
//       assertEquals(2, stringBuffer3.capacity());
//       assertEquals(1, stringBuffer3.length());
//       assertEquals(1, stringBuffer2.length());
//       assertEquals(2, stringBuffer2.capacity());
//       assertEquals("b", stringBuffer2.toString());
//       assertFalse(stringBuffer3.equals((Object)stringBuffer0));
//       assertFalse(stringBuffer3.equals((Object)stringBuffer1));
//       assertFalse(stringBuffer2.equals((Object)stringBuffer0));
//       assertFalse(stringBuffer2.equals((Object)stringBuffer1));
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int3);
//       assertNotNull(stringBuffer3);
//       
//       StringBuffer stringBuffer4 = stringBuffer3.append((CharSequence) stringBuffer2);
//       assertNotSame(stringBuffer3, stringBuffer0);
//       assertNotSame(stringBuffer3, stringBuffer1);
//       assertSame(stringBuffer3, stringBuffer4);
//       assertSame(stringBuffer3, stringBuffer2);
//       assertNotSame(stringBuffer2, stringBuffer0);
//       assertNotSame(stringBuffer2, stringBuffer1);
//       assertSame(stringBuffer2, stringBuffer4);
//       assertSame(stringBuffer2, stringBuffer3);
//       assertSame(stringBuffer4, stringBuffer2);
//       assertSame(stringBuffer4, stringBuffer3);
//       assertNotSame(stringBuffer4, stringBuffer0);
//       assertNotSame(stringBuffer4, stringBuffer1);
//       assertEquals("bb", stringBuffer3.toString());
//       assertEquals(2, stringBuffer3.capacity());
//       assertEquals(2, stringBuffer3.length());
//       assertEquals(2, stringBuffer2.length());
//       assertEquals(2, stringBuffer2.capacity());
//       assertEquals("bb", stringBuffer2.toString());
//       assertEquals("bb", stringBuffer4.toString());
//       assertEquals(2, stringBuffer4.length());
//       assertEquals(2, stringBuffer4.capacity());
//       assertFalse(stringBuffer3.equals((Object)stringBuffer0));
//       assertFalse(stringBuffer3.equals((Object)stringBuffer1));
//       assertFalse(stringBuffer2.equals((Object)stringBuffer0));
//       assertFalse(stringBuffer2.equals((Object)stringBuffer1));
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int3);
//       assertFalse(stringBuffer4.equals((Object)stringBuffer0));
//       assertFalse(stringBuffer4.equals((Object)stringBuffer1));
//       assertNotNull(stringBuffer4);
//       
//       StringBuffer stringBuffer5 = fastDateFormat1.format(long0, stringBuffer4);
//       assertSame(stringBuffer5, stringBuffer2);
//       assertSame(stringBuffer5, stringBuffer4);
//       assertNotSame(stringBuffer5, stringBuffer1);
//       assertSame(stringBuffer5, stringBuffer3);
//       assertNotSame(stringBuffer5, stringBuffer0);
//       assertNotSame(stringBuffer3, stringBuffer0);
//       assertSame(stringBuffer3, stringBuffer5);
//       assertNotSame(stringBuffer3, stringBuffer1);
//       assertSame(stringBuffer3, stringBuffer4);
//       assertSame(stringBuffer3, stringBuffer2);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertNotSame(stringBuffer2, stringBuffer0);
//       assertNotSame(stringBuffer2, stringBuffer1);
//       assertSame(stringBuffer2, stringBuffer4);
//       assertSame(stringBuffer2, stringBuffer5);
//       assertSame(stringBuffer2, stringBuffer3);
//       assertSame(stringBuffer4, stringBuffer2);
//       assertSame(stringBuffer4, stringBuffer3);
//       assertNotSame(stringBuffer4, stringBuffer0);
//       assertSame(stringBuffer4, stringBuffer5);
//       assertNotSame(stringBuffer4, stringBuffer1);
//       assertEquals("bb1970\u5E741\u67081\u65E5 0\u664200\u520600\u79D2 GMT", stringBuffer5.toString());
//       assertEquals(24, stringBuffer5.length());
//       assertEquals(30, stringBuffer5.capacity());
//       assertEquals(30, stringBuffer3.capacity());
//       assertEquals("bb1970\u5E741\u67081\u65E5 0\u664200\u520600\u79D2 GMT", stringBuffer3.toString());
//       assertEquals(24, stringBuffer3.length());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat1.getPattern());
//       assertEquals(29, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals(24, stringBuffer2.length());
//       assertEquals(30, stringBuffer2.capacity());
//       assertEquals("bb1970\u5E741\u67081\u65E5 0\u664200\u520600\u79D2 GMT", stringBuffer2.toString());
//       assertEquals(24, stringBuffer4.length());
//       assertEquals("bb1970\u5E741\u67081\u65E5 0\u664200\u520600\u79D2 GMT", stringBuffer4.toString());
//       assertEquals(30, stringBuffer4.capacity());
//       assertFalse(stringBuffer5.equals((Object)stringBuffer1));
//       assertFalse(stringBuffer5.equals((Object)stringBuffer0));
//       assertFalse(stringBuffer3.equals((Object)stringBuffer0));
//       assertFalse(stringBuffer3.equals((Object)stringBuffer1));
//       assertTrue(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertFalse(stringBuffer2.equals((Object)stringBuffer0));
//       assertFalse(stringBuffer2.equals((Object)stringBuffer1));
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int3);
//       assertFalse(stringBuffer4.equals((Object)stringBuffer0));
//       assertFalse(stringBuffer4.equals((Object)stringBuffer1));
//       assertNotNull(stringBuffer5);
//       
//       Locale locale1 = Locale.forLanguageTag(string2);
//       assertNotSame(string2, string0);
//       assertNotSame(string2, string1);
//       assertNotSame(locale1, locale0);
//       assertEquals("", locale1.getVariant());
//       assertEquals("ryh", locale1.getISO3Language());
//       assertEquals("", locale1.getCountry());
//       assertEquals("ryh", locale1.getLanguage());
//       assertEquals("ryh", locale1.toString());
//       assertEquals("", locale1.getISO3Country());
//       assertFalse(string2.equals((Object)string0));
//       assertFalse(string2.equals((Object)string1));
//       assertFalse(locale1.equals((Object)locale0));
//       assertNotNull(locale1);
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(int3, int3, locale1);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal time style 1210
//          //
//       }
//   }

  @Test
  public void test53() {}
//   @Test
//   public void test53()  throws Throwable  {
//       int int0 = 0;
//       String string0 = "org.apache.commons.lang3.time.FormatCache";
//       int int1 = 0;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertNotNull(mockGregorianCalendar0);
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertNotNull(zoneInfo0);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int1, int0, (TimeZone) zoneInfo0);
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(29, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertNotNull(fastDateFormat0);
//       
//       StringBuffer stringBuffer0 = new StringBuffer((CharSequence) string0);
//       assertEquals("org.apache.commons.lang3.time.FormatCache", stringBuffer0.toString());
//       assertEquals(41, stringBuffer0.length());
//       assertEquals(57, stringBuffer0.capacity());
//       assertNotNull(stringBuffer0);
//       
//       StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
//       assertSame(stringBuffer0, stringBuffer1);
//       assertSame(stringBuffer1, stringBuffer0);
//       assertEquals(65, stringBuffer0.length());
//       assertEquals(116, stringBuffer0.capacity());
//       assertEquals("org.apache.commons.lang3.time.FormatCache2014\u5E742\u670814\u65E5 20\u664221\u520621\u79D2 GMT", stringBuffer0.toString());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(29, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.apache.commons.lang3.time.FormatCache2014\u5E742\u670814\u65E5 20\u664221\u520621\u79D2 GMT", stringBuffer1.toString());
//       assertEquals(116, stringBuffer1.capacity());
//       assertEquals(65, stringBuffer1.length());
//       assertNotNull(stringBuffer1);
//       
//       Locale locale0 = Locale.TAIWAN;
//       assertEquals("TWN", locale0.getISO3Country());
//       assertEquals("TW", locale0.getCountry());
//       assertEquals("zh_TW", locale0.toString());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("zho", locale0.getISO3Language());
//       assertNotNull(locale0);
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(int1, (TimeZone) zoneInfo0, locale0);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertEquals("TWN", locale0.getISO3Country());
//       assertEquals("TW", locale0.getCountry());
//       assertEquals("zh_TW", locale0.toString());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat1.getPattern());
//       assertEquals(17, fastDateFormat1.getMaxLengthEstimate());
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertNotNull(fastDateFormat1);
//       
//       Date date0 = mockGregorianCalendar0.getTime();
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertNotNull(date0);
//       
//       String string1 = fastDateFormat1.format(date0);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertNotSame(string1, string0);
//       assertEquals("TWN", locale0.getISO3Country());
//       assertEquals("TW", locale0.getCountry());
//       assertEquals("zh_TW", locale0.toString());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat1.getPattern());
//       assertEquals(17, fastDateFormat1.getMaxLengthEstimate());
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertFalse(string1.equals((Object)string0));
//       assertNotNull(string1);
//       assertEquals("2014\u5E742\u670814\u65E5 \u661F\u671F\u4E94", string1);
//       
//       int int2 = (-636);
//       int int3 = 1210;
//       String string2 = "ryH";
//       assertNotSame(string2, string1);
//       assertNotSame(string2, string0);
//       assertFalse(string2.equals((Object)string1));
//       
//       mockGregorianCalendar0.setGregorianChange(date0);
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       
//       long long0 = 0L;
//       Set<String> set0 = locale0.getUnicodeLocaleAttributes();
//       assertEquals("TWN", locale0.getISO3Country());
//       assertEquals("TW", locale0.getCountry());
//       assertEquals("zh_TW", locale0.toString());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals(0, set0.size());
//       assertEquals(true, set0.isEmpty());
//       assertNotNull(set0);
//       
//       StringBuffer stringBuffer2 = new StringBuffer(int0);
//       assertNotSame(stringBuffer2, stringBuffer1);
//       assertNotSame(stringBuffer2, stringBuffer0);
//       assertEquals(0, stringBuffer2.capacity());
//       assertEquals(0, stringBuffer2.length());
//       assertEquals("", stringBuffer2.toString());
//       assertFalse(stringBuffer2.equals((Object)stringBuffer1));
//       assertFalse(stringBuffer2.equals((Object)stringBuffer0));
//       assertFalse(int0 == int3);
//       assertFalse(int0 == int2);
//       assertNotNull(stringBuffer2);
//       
//       char char0 = 'b';
//       StringBuffer stringBuffer3 = stringBuffer2.append(char0);
//       assertNotSame(stringBuffer2, stringBuffer1);
//       assertSame(stringBuffer2, stringBuffer3);
//       assertNotSame(stringBuffer2, stringBuffer0);
//       assertNotSame(stringBuffer3, stringBuffer1);
//       assertNotSame(stringBuffer3, stringBuffer0);
//       assertSame(stringBuffer3, stringBuffer2);
//       assertEquals(2, stringBuffer2.capacity());
//       assertEquals("b", stringBuffer2.toString());
//       assertEquals(1, stringBuffer2.length());
//       assertEquals("b", stringBuffer3.toString());
//       assertEquals(1, stringBuffer3.length());
//       assertEquals(2, stringBuffer3.capacity());
//       assertFalse(stringBuffer2.equals((Object)stringBuffer1));
//       assertFalse(stringBuffer2.equals((Object)stringBuffer0));
//       assertFalse(stringBuffer3.equals((Object)stringBuffer1));
//       assertFalse(stringBuffer3.equals((Object)stringBuffer0));
//       assertFalse(int0 == int3);
//       assertFalse(int0 == int2);
//       assertNotNull(stringBuffer3);
//       
//       StringBuffer stringBuffer4 = stringBuffer3.append((CharSequence) stringBuffer2);
//       assertSame(stringBuffer2, stringBuffer4);
//       assertNotSame(stringBuffer2, stringBuffer1);
//       assertSame(stringBuffer2, stringBuffer3);
//       assertNotSame(stringBuffer2, stringBuffer0);
//       assertNotSame(stringBuffer3, stringBuffer1);
//       assertSame(stringBuffer3, stringBuffer4);
//       assertNotSame(stringBuffer3, stringBuffer0);
//       assertSame(stringBuffer3, stringBuffer2);
//       assertSame(stringBuffer4, stringBuffer3);
//       assertNotSame(stringBuffer4, stringBuffer1);
//       assertSame(stringBuffer4, stringBuffer2);
//       assertNotSame(stringBuffer4, stringBuffer0);
//       assertEquals(2, stringBuffer2.capacity());
//       assertEquals("bb", stringBuffer2.toString());
//       assertEquals(2, stringBuffer2.length());
//       assertEquals("bb", stringBuffer3.toString());
//       assertEquals(2, stringBuffer3.length());
//       assertEquals(2, stringBuffer3.capacity());
//       assertEquals(2, stringBuffer4.capacity());
//       assertEquals("bb", stringBuffer4.toString());
//       assertEquals(2, stringBuffer4.length());
//       assertFalse(stringBuffer2.equals((Object)stringBuffer1));
//       assertFalse(stringBuffer2.equals((Object)stringBuffer0));
//       assertFalse(stringBuffer3.equals((Object)stringBuffer1));
//       assertFalse(stringBuffer3.equals((Object)stringBuffer0));
//       assertFalse(stringBuffer4.equals((Object)stringBuffer1));
//       assertFalse(stringBuffer4.equals((Object)stringBuffer0));
//       assertFalse(int0 == int3);
//       assertFalse(int0 == int2);
//       assertNotNull(stringBuffer4);
//       
//       StringBuffer stringBuffer5 = fastDateFormat0.format(long0, stringBuffer4);
//       assertSame(stringBuffer2, stringBuffer4);
//       assertNotSame(stringBuffer2, stringBuffer1);
//       assertSame(stringBuffer2, stringBuffer3);
//       assertNotSame(stringBuffer2, stringBuffer0);
//       assertSame(stringBuffer2, stringBuffer5);
//       assertNotSame(stringBuffer3, stringBuffer1);
//       assertSame(stringBuffer3, stringBuffer5);
//       assertSame(stringBuffer3, stringBuffer4);
//       assertNotSame(stringBuffer3, stringBuffer0);
//       assertSame(stringBuffer3, stringBuffer2);
//       assertNotSame(fastDateFormat0, fastDateFormat1);
//       assertSame(stringBuffer4, stringBuffer3);
//       assertSame(stringBuffer4, stringBuffer5);
//       assertNotSame(stringBuffer4, stringBuffer1);
//       assertSame(stringBuffer4, stringBuffer2);
//       assertNotSame(stringBuffer4, stringBuffer0);
//       assertSame(stringBuffer5, stringBuffer2);
//       assertNotSame(stringBuffer5, stringBuffer1);
//       assertSame(stringBuffer5, stringBuffer4);
//       assertNotSame(stringBuffer5, stringBuffer0);
//       assertSame(stringBuffer5, stringBuffer3);
//       assertEquals(24, stringBuffer2.length());
//       assertEquals("bb1970\u5E741\u67081\u65E5 0\u664200\u520600\u79D2 GMT", stringBuffer2.toString());
//       assertEquals(30, stringBuffer2.capacity());
//       assertEquals(24, stringBuffer3.length());
//       assertEquals("bb1970\u5E741\u67081\u65E5 0\u664200\u520600\u79D2 GMT", stringBuffer3.toString());
//       assertEquals(30, stringBuffer3.capacity());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(29, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(30, stringBuffer4.capacity());
//       assertEquals(24, stringBuffer4.length());
//       assertEquals("bb1970\u5E741\u67081\u65E5 0\u664200\u520600\u79D2 GMT", stringBuffer4.toString());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(24, stringBuffer5.length());
//       assertEquals(30, stringBuffer5.capacity());
//       assertEquals("bb1970\u5E741\u67081\u65E5 0\u664200\u520600\u79D2 GMT", stringBuffer5.toString());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertFalse(stringBuffer2.equals((Object)stringBuffer1));
//       assertFalse(stringBuffer2.equals((Object)stringBuffer0));
//       assertFalse(stringBuffer3.equals((Object)stringBuffer1));
//       assertFalse(stringBuffer3.equals((Object)stringBuffer0));
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
//       assertFalse(stringBuffer4.equals((Object)stringBuffer1));
//       assertFalse(stringBuffer4.equals((Object)stringBuffer0));
//       assertFalse(int0 == int3);
//       assertFalse(int0 == int2);
//       assertFalse(stringBuffer5.equals((Object)stringBuffer1));
//       assertFalse(stringBuffer5.equals((Object)stringBuffer0));
//       assertFalse(int1 == int3);
//       assertFalse(int1 == int2);
//       assertNotNull(stringBuffer5);
//       
//       Locale locale1 = Locale.forLanguageTag(string2);
//       assertNotSame(locale1, locale0);
//       assertNotSame(string2, string1);
//       assertNotSame(string2, string0);
//       assertEquals("", locale1.getCountry());
//       assertEquals("ryh", locale1.getLanguage());
//       assertEquals("", locale1.getVariant());
//       assertEquals("ryh", locale1.toString());
//       assertEquals("ryh", locale1.getISO3Language());
//       assertEquals("", locale1.getISO3Country());
//       assertFalse(locale1.equals((Object)locale0));
//       assertFalse(string2.equals((Object)string1));
//       assertFalse(string2.equals((Object)string0));
//       assertNotNull(locale1);
//       
//       FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(int0);
//       assertNotSame(fastDateFormat2, fastDateFormat1);
//       assertNotSame(fastDateFormat2, fastDateFormat0);
//       assertEquals("H'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat2.getPattern());
//       assertEquals(15, fastDateFormat2.getMaxLengthEstimate());
//       assertFalse(int0 == int3);
//       assertFalse(int0 == int2);
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat0));
//       assertNotNull(fastDateFormat2);
//       
//       MockDate mockDate0 = new MockDate();
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       assertNotNull(mockDate0);
//       
//       // Undeclared exception!
//       try {
//         String string3 = fastDateFormat1.format((Object) string0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Unknown class: java.lang.String
//          //
//       }
//   }

  @Test
  public void test54()  throws Throwable  {
      String string0 = "a{>\\s{SDt>@";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
      }
  }
}
