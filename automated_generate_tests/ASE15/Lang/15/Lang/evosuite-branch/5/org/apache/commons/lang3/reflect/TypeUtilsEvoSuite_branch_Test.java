/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:29:00 GMT 2014
 */

package org.apache.commons.lang3.reflect;

import static org.junit.Assert.*;
import org.junit.Test;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.lang.reflect.TypeVariable;
import java.util.Map;
import org.apache.commons.lang3.reflect.TypeUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;


public class TypeUtilsEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      Type type0 = null;
      boolean boolean0 = TypeUtils.isArrayType(type0);
      assertFalse(boolean0);
  }

  @Test
  public void test01()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = TypeUtils.isArrayType((Type) class0);
      assertFalse(boolean0);
  }

  @Test
  public void test02()  throws Throwable  {
      Type type0 = null;
      Type type1 = TypeUtils.getArrayComponentType(type0);
      assertNull(type1);
      
      // Undeclared exception!
      try {
        Class<?> class0 = TypeUtils.getRawType(type0, type1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unknown type: null
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      Class<String> class0 = String.class;
      Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments((Type) class0, (Class<?>) class0);
      assertEquals(true, map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      boolean boolean0 = TypeUtils.typesSatisfyVariables(map0);
      assertTrue(boolean0);
      assertEquals(true, map0.isEmpty());
      assertEquals(0, map0.size());
  }

  @Test
  public void test04()  throws Throwable  {
      Type[] typeArray0 = new Type[1];
      Type[] typeArray1 = TypeUtils.normalizeUpperBounds(typeArray0);
      assertNotNull(typeArray1);
      assertSame(typeArray0, typeArray1);
      assertSame(typeArray1, typeArray0);
  }

  @Test
  public void test05()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      String string0 = null;
      boolean boolean0 = TypeUtils.isInstance((Object) string0, (Type) class0);
      assertTrue(boolean0);
  }

  @Test
  public void test06()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<?> class1 = TypeUtils.getRawType((Type) class0, (Type) class0);
      assertEquals(false, class1.isArray());
      assertEquals("class java.lang.String", class1.toString());
      assertEquals(false, class1.isEnum());
      assertEquals(17, class1.getModifiers());
      assertEquals(false, class1.isInterface());
      assertEquals(false, class1.isAnnotation());
      assertEquals(false, class1.isPrimitive());
      assertEquals(false, class1.isSynthetic());
      assertNotNull(class1);
      
      Type type0 = TypeUtils.getArrayComponentType((Type) class1);
      assertEquals(false, class1.isArray());
      assertEquals("class java.lang.String", class1.toString());
      assertEquals(false, class1.isEnum());
      assertEquals(17, class1.getModifiers());
      assertEquals(false, class1.isInterface());
      assertEquals(false, class1.isAnnotation());
      assertEquals(false, class1.isPrimitive());
      assertEquals(false, class1.isSynthetic());
      assertNull(type0);
      
      boolean boolean0 = TypeUtils.isInstance((Object) class1, type0);
      assertFalse(boolean0);
      assertEquals(false, class1.isArray());
      assertEquals("class java.lang.String", class1.toString());
      assertEquals(false, class1.isEnum());
      assertEquals(17, class1.getModifiers());
      assertEquals(false, class1.isInterface());
      assertEquals(false, class1.isAnnotation());
      assertEquals(false, class1.isPrimitive());
      assertEquals(false, class1.isSynthetic());
  }

  @Test
  public void test07() {}
//   @Test
//   public void test07()  throws Throwable  {
//       Class<TypeVariable> class0 = TypeVariable.class;
//       Class<Object> class1 = Object.class;
//       Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments((Type) class0, (Class<?>) class1);
//       assertEquals(true, map0.isEmpty());
//       assertEquals(0, map0.size());
//       assertNotNull(map0);
//   }

  @Test
  public void test08()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<TypeVariable> class1 = TypeVariable.class;
      Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments((Type) class0, (Class<?>) class1);
      assertNull(map0);
  }

  @Test
  public void test09()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Type type0 = TypeUtils.getArrayComponentType((Type) class0);
      assertNull(type0);
      
      Class<Method> class1 = Method.class;
      // Undeclared exception!
      try {
        Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments(type0, class1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // found an unhandled type: null
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      Class<String> class0 = String.class;
      Type[] typeArray0 = new Type[9];
      typeArray0[5] = (Type) class0;
      assertNotNull(typeArray0[5]);
      
      Type[] typeArray1 = TypeUtils.normalizeUpperBounds(typeArray0);
      assertFalse(typeArray1.equals((Object)typeArray0));
      assertFalse(typeArray0.equals((Object)typeArray1));
      assertNotNull(typeArray1);
      assertNotSame(typeArray1, typeArray0);
      assertNotSame(typeArray0, typeArray1);
  }

  @Test
  public void test11()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      String string0 = "m[[+{";
      boolean boolean0 = TypeUtils.isInstance((Object) string0, (Type) class0);
      assertFalse(boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Object> class1 = Object.class;
      Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments((Type) class0, (Class<?>) class1);
      assertEquals(0, map0.size());
      assertEquals(true, map0.isEmpty());
      assertNotNull(map0);
  }

  @Test
  public void test13()  throws Throwable  {
      Type type0 = null;
      boolean boolean0 = TypeUtils.isAssignable(type0, type0);
      assertTrue(boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
  }
}
