/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:41:22 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Locale;
import org.apache.commons.lang.StringEscapeUtils;
import org.apache.commons.lang.exception.NestableRuntimeException;



import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;

import org.junit.runner.RunWith;


public class StringEscapeUtilsEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "\"N:";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      StringEscapeUtils.unescapeCsv((Writer) mockPrintWriter0, string0);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "org.apache.commons.lang.StingEscapeUtils";
      String string1 = StringEscapeUtils.unescapeCsv(string0);
      assertNotNull(string1);
      assertEquals("org.apache.commons.lang.StingEscapeUtils", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "Jcu'FE-@WnxX5.<\"K";
      String string1 = StringEscapeUtils.escapeCsv(string0);
      assertNotNull(string1);
      assertEquals("\"Jcu'FE-@WnxX5.<\"\"K\"", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      String string2 = StringEscapeUtils.unescapeCsv(string1);
      assertNotNull(string2);
      assertEquals("Jcu'FE-@WnxX5.<\"K", string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
  }

  @Test
  public void test03()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      String string0 = null;
      StringEscapeUtils.unescapeCsv((Writer) charArrayWriter0, string0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "";
      String string1 = StringEscapeUtils.unescapeJavaScript(string0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      
      String string2 = StringEscapeUtils.unescapeCsv(string1);
      assertNotNull(string2);
      assertEquals("", string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)string2));
      assertTrue(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = null;
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringEscapeUtils.escapeCsv((Writer) stringWriter0, string0);
      assertEquals("", stringWriter0.toString());
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "";
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringEscapeUtils.escapeCsv((Writer) stringWriter0, string0);
      assertEquals("", stringWriter0.toString());
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "";
      String string1 = StringEscapeUtils.escapeCsv(string0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.escapeJava(string0);
      assertNull(string1);
      
      String string2 = StringEscapeUtils.escapeSql(string1);
      assertNull(string2);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "5v?cf*vRb=:<}I7o";
      String string1 = StringEscapeUtils.escapeSql(string0);
      assertNotNull(string1);
      assertEquals("5v?cf*vRb=:<}I7o", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.unescapeCsv(string0);
      assertNull(string1);
      
      String string2 = StringEscapeUtils.unescapeXml(string1);
      assertNull(string2);
  }

  @Test
  public void test11()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      String string0 = null;
      StringEscapeUtils.unescapeXml((Writer) pipedWriter0, string0);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "5v?cf*vRb=:<}I7o";
      MockPrintWriter mockPrintWriter0 = null;
      // Undeclared exception!
      try {
        StringEscapeUtils.unescapeXml((Writer) mockPrintWriter0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null.
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      String string0 = "";
      StringEscapeUtils.unescapeXml((Writer) charArrayWriter0, string0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "lvj .UB5!f>uZ1Ff";
      String string1 = StringEscapeUtils.escapeXml(string0);
      assertNotNull(string1);
      assertEquals("lvj .UB5!f&gt;uZ1Ff", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.escapeXml(string0);
      assertNull(string1);
      
      String string2 = "org.apache.commons.lang.StingEscapeUtils";
      boolean boolean0 = false;
      MockFileWriter mockFileWriter0 = new MockFileWriter(string2, boolean0);
      assertNotNull(mockFileWriter0);
      
      StringEscapeUtils.escapeXml((Writer) mockFileWriter0, string1);
  }

  @Test
  public void test16()  throws Throwable  {
      Writer writer0 = null;
      String string0 = "O#wLg4";
      // Undeclared exception!
      try {
        StringEscapeUtils.escapeXml(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null.
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "R{&iC%'+eX*YN\"2";
      String string1 = StringEscapeUtils.escapeHtml(string0);
      assertNotNull(string1);
      assertEquals("R{&amp;iC%'+eX*YN&quot;2", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      boolean boolean0 = true;
      MockFileWriter mockFileWriter0 = new MockFileWriter(string1, boolean0);
      assertNotNull(mockFileWriter0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      StringEscapeUtils.escapeXml((Writer) mockFileWriter0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test18()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      String string0 = null;
      StringEscapeUtils.unescapeHtml((Writer) charArrayWriter0, string0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
  }

  @Test
  public void test19()  throws Throwable  {
      Writer writer0 = null;
      String string0 = "4B~jV";
      // Undeclared exception!
      try {
        StringEscapeUtils.unescapeHtml(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null.
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.unescapeHtml(string0);
      assertNull(string1);
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "R{&iC%'+eX*YN\"2";
      String string1 = StringEscapeUtils.escapeHtml(string0);
      assertNotNull(string1);
      assertEquals("R{&amp;iC%'+eX*YN&quot;2", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      String string2 = StringEscapeUtils.unescapeHtml(string1);
      assertNotNull(string2);
      assertEquals("R{&iC%'+eX*YN\"2", string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
  }

  @Test
  public void test22()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      String string0 = null;
      StringEscapeUtils.escapeHtml((Writer) pipedWriter0, string0);
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "";
      Writer writer0 = null;
      // Undeclared exception!
      try {
        StringEscapeUtils.escapeHtml(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null.
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.escapeHtml(string0);
      assertNull(string1);
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = "R'<4\\";
      String string1 = StringEscapeUtils.unescapeJava(string0);
      assertNotNull(string1);
      assertEquals("R'<4\\", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = "Jcu'&E-@WnxB5/<\"W";
      boolean boolean0 = true;
      String string1 = StringEscapeUtils.escapeJavaScript(string0);
      assertNotNull(string1);
      assertEquals("Jcu\\'&E-@WnxB5\\/<\\\"W", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0, boolean0);
      assertNotNull(mockFileWriter0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      
      StringEscapeUtils.unescapeJava((Writer) mockFileWriter0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = " \t\r\n\b";
      String string1 = StringEscapeUtils.escapeJava(string0);
      assertNotNull(string1);
      assertEquals(" \\t\\r\\n\\b", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringEscapeUtils.unescapeJava(string1);
      assertNotNull(string2);
      assertEquals(" \t\r\n\b", string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = "\\00";
      String string1 = StringEscapeUtils.escapeJavaScript(string0);
      assertNotNull(string1);
      assertEquals("\\\\00", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringEscapeUtils.unescapeJavaScript(string1);
      assertNotNull(string2);
      assertEquals("\\00", string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = "UAKVg.#X~HVK=";
      boolean boolean0 = true;
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0, boolean0);
      assertNotNull(mockFileWriter0);
      
      String string1 = "\\ur000";
      assertNotSame(string1, string0);
      
      // Undeclared exception!
      try {
        StringEscapeUtils.unescapeJava((Writer) mockFileWriter0, string1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to parse unicode value: r000
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      String string0 = null;
      StringEscapeUtils.unescapeJava((Writer) stringWriter0, string0);
      assertEquals("", stringWriter0.toString());
  }

  @Test
  public void test31()  throws Throwable  {
      Writer writer0 = null;
      String string0 = "lvj .UB5!f>uZ1Ff";
      // Undeclared exception!
      try {
        StringEscapeUtils.unescapeJava(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.escapeXml(string0);
      assertNull(string1);
      
      String string2 = StringEscapeUtils.unescapeJavaScript(string1);
      assertNull(string2);
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = "r6 5}q({lPz,N'nKf";
      String string1 = StringEscapeUtils.escapeJava(string0);
      assertNotNull(string1);
      assertEquals("r6 5}q({lPz,N'nKf", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
  }

  @Test
  public void test34()  throws Throwable  {
      String string0 = "5v?cf*vRb=:<}I7o";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((File) mockFile0);
      assertNotNull(mockPrintWriter0);
      
      String string1 = "/`\\t.Y-qQ+F_I";
      assertNotSame(string1, string0);
      
      StringEscapeUtils.escapeJava((Writer) mockPrintWriter0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test35()  throws Throwable  {
      String string0 = "UAKVg.#X~HVK=";
      String string1 = StringEscapeUtils.unescapeXml(string0);
      assertNotNull(string1);
      assertEquals("UAKVg.#X~HVK=", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      Writer writer0 = null;
      // Undeclared exception!
      try {
        StringEscapeUtils.escapeJava(writer0, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null
         //
      }
  }

  @Test
  public void test36()  throws Throwable  {
      StringEscapeUtils stringEscapeUtils0 = new StringEscapeUtils();
      assertNotNull(stringEscapeUtils0);
  }

  @Test
  public void test37()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      
      String string0 = locale0.getDisplayName(locale0);
      assertNotNull(string0);
      assertEquals("\u4E2D\u6587 (\u4E2D\u56FD)", string0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      
      StringEscapeUtils.escapeJavaScript((Writer) stringWriter0, string0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("\\u4E2D\\u6587 (\\u4E2D\\u56FD)", stringWriter0.toString());
  }

  @Test
  public void test38()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.escapeXml(string0);
      assertNull(string1);
      
      int int0 = 32;
      PipedReader pipedReader0 = new PipedReader(int0);
      assertNotNull(pipedReader0);
      assertEquals(false, pipedReader0.markSupported());
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      assertEquals(false, pipedReader0.markSupported());
      assertEquals(false, pipedReader0.ready());
      
      StringEscapeUtils.escapeJavaScript((Writer) pipedWriter0, string1);
      assertEquals(false, pipedReader0.markSupported());
      assertEquals(false, pipedReader0.ready());
  }

  @Test
  public void test39()  throws Throwable  {
      String string0 = "op?i&2i\\fdkG;";
      boolean boolean0 = false;
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0, boolean0);
      assertNotNull(mockFileWriter0);
      
      StringEscapeUtils.unescapeJavaScript((Writer) mockFileWriter0, string0);
  }
}
