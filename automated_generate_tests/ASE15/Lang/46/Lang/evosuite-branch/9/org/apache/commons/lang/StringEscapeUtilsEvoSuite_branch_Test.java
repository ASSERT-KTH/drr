/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:53:53 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.OutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.io.Writer;
import org.apache.commons.lang.StringEscapeUtils;
import org.apache.commons.lang.exception.NestableRuntimeException;



import org.evosuite.runtime.mock.java.io.MockPrintWriter;

import org.junit.runner.RunWith;


public class StringEscapeUtilsEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "\"tg\"o\"";
      String string1 = StringEscapeUtils.unescapeCsv(string0);
      assertNotNull(string1);
      assertEquals("tg\"o", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "\"o1\"";
      String string1 = StringEscapeUtils.unescapeCsv(string0);
      assertNotNull(string1);
      assertEquals("\"o1\"", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "\"1\":\\C";
      String string1 = StringEscapeUtils.unescapeCsv(string0);
      assertNotNull(string1);
      assertEquals("\"1\":\\C", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "";
      String string1 = StringEscapeUtils.unescapeCsv(string0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "[eIfmkAPa'Y";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      String string1 = null;
      StringEscapeUtils.unescapeCsv((Writer) mockPrintWriter0, string1);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.unescapeCsv(string0);
      assertNull(string1);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "&{f~u|X\\n";
      String string1 = StringEscapeUtils.unescapeCsv(string0);
      assertNotNull(string1);
      assertEquals("&{f~u|X\\n", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = ";fS]-e :lP60f.zB";
      int int0 = 331;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(int0);
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      StringEscapeUtils.escapeCsv((Writer) charArrayWriter0, string0);
      assertEquals(16, charArrayWriter0.size());
      assertEquals(";fS]-e :lP60f.zB", charArrayWriter0.toString());
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = null;
      int int0 = 331;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(int0);
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      StringEscapeUtils.escapeCsv((Writer) charArrayWriter0, string0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "\\sX&Ua}`x'";
      String string1 = StringEscapeUtils.unescapeJava(string0);
      assertNotNull(string1);
      assertEquals("sX&Ua}`x'", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringEscapeUtils.escapeCsv(string1);
      assertNotNull(string2);
      assertEquals("sX&Ua}`x'", string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "4Sld{ f6\"Z";
      String string1 = StringEscapeUtils.escapeCsv(string0);
      assertNotNull(string1);
      assertEquals("\"4Sld{ f6\"\"Z\"", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.escapeXml(string0);
      assertNull(string1);
      
      String string2 = StringEscapeUtils.escapeSql(string1);
      assertNull(string2);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "&{f~u|X\\n";
      String string1 = StringEscapeUtils.unescapeJavaScript(string0);
      assertNotNull(string1);
      assertEquals("&{f~u|X\n", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringEscapeUtils.escapeSql(string1);
      assertNotNull(string2);
      assertEquals("&{f~u|X\n", string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.escapeXml(string0);
      assertNull(string1);
      
      String string2 = StringEscapeUtils.unescapeXml(string1);
      assertNull(string2);
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "[eIfmkAPa'Y";
      String string1 = StringEscapeUtils.escapeJavaScript(string0);
      assertNotNull(string1);
      assertEquals("[eIfmkAPa\\'Y", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringEscapeUtils.unescapeXml(string1);
      assertNotNull(string2);
      assertEquals("[eIfmkAPa\\'Y", string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 0;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(int0);
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      String string0 = null;
      StringEscapeUtils.unescapeXml((Writer) charArrayWriter0, string0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
  }

  @Test
  public void test16()  throws Throwable  {
      Writer writer0 = null;
      String string0 = "u@me";
      // Undeclared exception!
      try {
        StringEscapeUtils.unescapeXml(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null.
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "[eIfmkAPa'Y";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      StringEscapeUtils.unescapeXml((Writer) mockPrintWriter0, string0);
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "dXoyjrin\"dmH\\a||sCO";
      String string1 = StringEscapeUtils.escapeXml(string0);
      assertNotNull(string1);
      assertEquals("dXoyjrin&quot;dmH\\a||sCO", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test19()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      String string0 = null;
      StringEscapeUtils.escapeXml((Writer) stringWriter0, string0);
      assertEquals("", stringWriter0.toString());
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "dXoyjrin\"dmH\\a||sCO";
      Writer writer0 = null;
      // Undeclared exception!
      try {
        StringEscapeUtils.escapeXml(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null.
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "[eIfmkAPa'Y";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      StringEscapeUtils.escapeXml((Writer) mockPrintWriter0, string0);
  }

  @Test
  public void test22()  throws Throwable  {
      int int0 = 0;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(int0);
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      String string0 = null;
      StringEscapeUtils.unescapeHtml((Writer) charArrayWriter0, string0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.escapeJava(string0);
      assertNull(string1);
      
      Writer writer0 = null;
      // Undeclared exception!
      try {
        StringEscapeUtils.unescapeHtml(writer0, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null.
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.unescapeHtml(string0);
      assertNull(string1);
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = "\\t";
      String string1 = StringEscapeUtils.unescapeHtml(string0);
      assertNotNull(string1);
      assertEquals("\\t", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
  }

  @Test
  public void test26()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      String string0 = null;
      StringEscapeUtils.escapeHtml((Writer) stringWriter0, string0);
      assertEquals("", stringWriter0.toString());
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = "=REr$4";
      Writer writer0 = null;
      // Undeclared exception!
      try {
        StringEscapeUtils.escapeHtml(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null.
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.escapeXml(string0);
      assertNull(string1);
      
      String string2 = StringEscapeUtils.escapeHtml(string1);
      assertNull(string2);
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = "\"1\":\\C";
      String string1 = StringEscapeUtils.escapeHtml(string0);
      assertNotNull(string1);
      assertEquals("&quot;1&quot;:\\C", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = "JLC7`:\"/\\";
      String string1 = StringEscapeUtils.unescapeJava(string0);
      assertNotNull(string1);
      assertEquals("JLC7`:\"/\\", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
  }

  @Test
  public void test31()  throws Throwable  {
      String string0 = "\\t";
      int int0 = 109;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(int0);
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      StringEscapeUtils.unescapeJava((Writer) charArrayWriter0, string0);
      assertEquals(1, charArrayWriter0.size());
      assertEquals("\t", charArrayWriter0.toString());
  }

  @Test
  public void test32()  throws Throwable  {
      String string0 = "The Writ\\r cust not be null.";
      String string1 = StringEscapeUtils.unescapeJava(string0);
      assertNotNull(string1);
      assertEquals("The Writ\r cust not be null.", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = "H(On\\fGXnF^J-{";
      String string1 = StringEscapeUtils.unescapeJavaScript(string0);
      assertNotNull(string1);
      assertEquals("H(On\fGXnF^J-{", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test34()  throws Throwable  {
      String string0 = "\\'0@0";
      String string1 = StringEscapeUtils.unescapeJavaScript(string0);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test35()  throws Throwable  {
      String string0 = "dXoyjrin\"dmH\\a||sCO";
      String string1 = StringEscapeUtils.escapeJava(string0);
      assertNotNull(string1);
      assertEquals("dXoyjrin\\\"dmH\\\\a||sCO", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      String string2 = StringEscapeUtils.unescapeJava(string1);
      assertNotNull(string2);
      assertEquals("dXoyjrin\"dmH\\a||sCO", string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test
  public void test36()  throws Throwable  {
      String string0 = "\\uNA00";
      // Undeclared exception!
      try {
        String string1 = StringEscapeUtils.unescapeJava(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to parse unicode value: NA00
         //
      }
  }

  @Test
  public void test37()  throws Throwable  {
      Writer writer0 = null;
      String string0 = "divide";
      // Undeclared exception!
      try {
        StringEscapeUtils.unescapeJavaScript(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.escapeXml(string0);
      assertNull(string1);
      
      String string2 = StringEscapeUtils.unescapeJava(string1);
      assertNull(string2);
  }

  @Test
  public void test39()  throws Throwable  {
      String string0 = "Y,/rA";
      String string1 = StringEscapeUtils.escapeJavaScript(string0);
      assertNotNull(string1);
      assertEquals("Y,\\/rA", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      String string2 = StringEscapeUtils.escapeJava(string1);
      assertNotNull(string2);
      assertEquals("Y,\\\\/rA", string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test
  public void test40()  throws Throwable  {
      String string0 = "\\sX&Ua}`x'";
      String string1 = StringEscapeUtils.unescapeJava(string0);
      assertNotNull(string1);
      assertEquals("sX&Ua}`x'", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      String string2 = StringEscapeUtils.escapeJava(string1);
      assertNotNull(string2);
      assertEquals("sX&Ua}`x'", string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
  }

  @Test
  public void test41()  throws Throwable  {
      String string0 = "\t... ";
      String string1 = StringEscapeUtils.escapeJavaScript(string0);
      assertNotNull(string1);
      assertEquals("\\t... ", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test42()  throws Throwable  {
      String string0 = null;
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      assertEquals(false, pipedReader0.markSupported());
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      assertEquals(false, pipedReader0.ready());
      assertEquals(false, pipedReader0.markSupported());
      
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((Writer) pipedWriter0, boolean0);
      assertNotNull(mockPrintWriter0);
      assertEquals(false, pipedReader0.ready());
      assertEquals(false, pipedReader0.markSupported());
      
      StringEscapeUtils.escapeJava((Writer) mockPrintWriter0, string0);
      assertEquals(false, pipedReader0.ready());
      assertEquals(false, pipedReader0.markSupported());
  }

  @Test
  public void test43()  throws Throwable  {
      String string0 = "j]E\"EI _~[1]}";
      CharArrayWriter charArrayWriter0 = null;
      // Undeclared exception!
      try {
        StringEscapeUtils.escapeJava((Writer) charArrayWriter0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null
         //
      }
  }

  @Test
  public void test44()  throws Throwable  {
      StringEscapeUtils stringEscapeUtils0 = new StringEscapeUtils();
      assertNotNull(stringEscapeUtils0);
  }

  @Test
  public void test45()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      String string0 = "\\sX&Ua}`x'";
      StringEscapeUtils.escapeJavaScript((Writer) charArrayWriter0, string0);
      assertEquals("\\\\sX&Ua}`x\\'", charArrayWriter0.toString());
      assertEquals(12, charArrayWriter0.size());
  }

  @Test
  public void test46()  throws Throwable  {
      String string0 = "&{f~u|X\\n";
      String string1 = StringEscapeUtils.unescapeJavaScript(string0);
      assertNotNull(string1);
      assertEquals("&{f~u|X\n", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringEscapeUtils.escapeJavaScript(string1);
      assertNotNull(string2);
      assertEquals("&{f~u|X\\n", string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
  }

  @Test
  public void test47()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((OutputStream) byteArrayOutputStream0);
      assertNotNull(mockPrintWriter0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      String string0 = null;
      StringEscapeUtils.unescapeJavaScript((Writer) mockPrintWriter0, string0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
  }
}
