/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:02:07 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*;
import org.junit.Test;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Locale;
import org.apache.commons.lang.StringEscapeUtils;
import org.apache.commons.lang.exception.NestableRuntimeException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;


public class StringEscapeUtilsEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "?me,/kl?Z)q";
      String string1 = StringEscapeUtils.escapeCsv(string0);
      assertEquals("\"?me,/kl?Z)q\"", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = StringEscapeUtils.unescapeCsv(string1);
      assertEquals("?me,/kl?Z)q", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "\")LH";
      String string1 = StringEscapeUtils.unescapeCsv(string0);
      assertEquals("\")LH", string1);
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "IHyEo'h";
      String string1 = StringEscapeUtils.unescapeJava(string0);
      assertEquals("IHyEo'h", string1);
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = "";
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      MockFile mockFile0 = (MockFile)MockFile.createTempFile(string1, string1);
      assertNotNull(mockFile0);
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter((File) mockFile0);
      assertNotNull(mockFileWriter0);
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      
      StringEscapeUtils.unescapeCsv((Writer) mockFileWriter0, string2);
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = 1042;
      StringWriter stringWriter0 = new StringWriter(int0);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      String string0 = null;
      String string1 = StringEscapeUtils.unescapeCsv(string0);
      assertNull(string1);
      
      StringEscapeUtils.unescapeCsv((Writer) stringWriter0, string1);
      assertEquals("", stringWriter0.toString());
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "IHyEo'h";
      String string1 = StringEscapeUtils.unescapeJava(string0);
      assertEquals("IHyEo'h", string1);
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = StringEscapeUtils.unescapeCsv(string1);
      assertEquals("IHyEo'h", string2);
      assertNotNull(string2);
      assertTrue(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)string2));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "'5rkT/W)|#0f@l\";";
      String string1 = StringEscapeUtils.unescapeXml(string0);
      assertEquals("'5rkT/W)|#0f@l\";", string1);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string1);
      assertNotNull(mockPrintWriter0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      StringEscapeUtils.escapeCsv((Writer) mockPrintWriter0, string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = 1042;
      StringWriter stringWriter0 = new StringWriter(int0);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      String string0 = null;
      String string1 = StringEscapeUtils.unescapeCsv(string0);
      assertNull(string1);
      
      StringEscapeUtils.escapeCsv((Writer) stringWriter0, string1);
      assertEquals("", stringWriter0.toString());
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "kk<%$fPk3pi!";
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringEscapeUtils.escapeCsv((Writer) stringWriter0, string0);
      assertEquals("kk<%$fPk3pi!", stringWriter0.toString());
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.unescapeJavaScript(string0);
      assertNull(string1);
      
      String string2 = StringEscapeUtils.escapeSql(string1);
      assertNull(string2);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "'5rkT/W)|#0f@l\";";
      String string1 = StringEscapeUtils.escapeSql(string0);
      assertEquals("''5rkT/W)|#0f@l\";", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.unescapeXml(string0);
      assertNull(string1);
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 83;
      StringWriter stringWriter0 = new StringWriter(int0);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      String string0 = null;
      StringEscapeUtils.unescapeXml((Writer) stringWriter0, string0);
      assertEquals("", stringWriter0.toString());
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "?!BYYJ`l*mQ%|u9O<";
      Writer writer0 = null;
      // Undeclared exception!
      try {
        StringEscapeUtils.unescapeXml(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null.
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "*E&hG3L?rs0\\rH<1C";
      String string1 = StringEscapeUtils.unescapeJavaScript(string0);
      assertEquals("*E&hG3L?rs0\rH<1C", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0);
      assertNotNull(mockFileWriter0);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      
      StringEscapeUtils.unescapeXml((Writer) mockFileWriter0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.unescapeCsv(string0);
      assertNull(string1);
      
      String string2 = StringEscapeUtils.escapeXml(string1);
      assertNull(string2);
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "*E&hG3L?rs0\\rH<1C";
      String string1 = StringEscapeUtils.escapeXml(string0);
      assertEquals("*E&amp;hG3L?rs0\\rH&lt;1C", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 83;
      StringWriter stringWriter0 = new StringWriter(int0);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      String string0 = null;
      StringEscapeUtils.escapeXml((Writer) stringWriter0, string0);
      assertEquals("", stringWriter0.toString());
  }

  @Test
  public void test17()  throws Throwable  {
      Writer writer0 = null;
      String string0 = "lgf$Dm4$X(<^5X";
      // Undeclared exception!
      try {
        StringEscapeUtils.escapeXml(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null.
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      String string0 = "r\\n";
      StringEscapeUtils.escapeXml((Writer) charArrayWriter0, string0);
      assertEquals(3, charArrayWriter0.size());
      assertEquals("r\\n", charArrayWriter0.toString());
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = 83;
      StringWriter stringWriter0 = new StringWriter(int0);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      String string0 = null;
      StringEscapeUtils.unescapeHtml((Writer) stringWriter0, string0);
      assertEquals("", stringWriter0.toString());
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "S3a!Yg[pa){yO*";
      Writer writer0 = null;
      // Undeclared exception!
      try {
        StringEscapeUtils.unescapeHtml(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null.
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.unescapeCsv(string0);
      assertNull(string1);
      
      String string2 = StringEscapeUtils.unescapeHtml(string1);
      assertNull(string2);
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "Z\\u0";
      String string1 = StringEscapeUtils.unescapeHtml(string0);
      assertEquals("Z\\u0", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "IHyEo'h";
      String string1 = StringEscapeUtils.unescapeJava(string0);
      assertEquals("IHyEo'h", string1);
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = null;
      String string3 = StringEscapeUtils.unescapeJavaScript(string2);
      assertNull(string3);
      
      MockFile mockFile0 = (MockFile)MockFile.createTempFile(string1, string1);
      assertNotNull(mockFile0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter((File) mockFile0);
      assertNotNull(mockFileWriter0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      StringEscapeUtils.escapeHtml((Writer) mockFileWriter0, string3);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = null;
      Writer writer0 = null;
      // Undeclared exception!
      try {
        StringEscapeUtils.escapeHtml(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null.
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.escapeHtml(string0);
      assertNull(string1);
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = "Z\\u0";
      String string1 = StringEscapeUtils.escapeCsv(string0);
      assertEquals("Z\\u0", string1);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String string2 = StringEscapeUtils.escapeHtml(string1);
      assertEquals("Z\\u0", string2);
      assertNotNull(string2);
      assertTrue(string0.equals((Object)string2));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string1.equals((Object)string2));
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = "|n0Y$qK\\";
      String string1 = StringEscapeUtils.unescapeJava(string0);
      assertEquals("|n0Y$qK\\", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = ";r0\\33\\&(AGeY\\dN%M";
      String string1 = StringEscapeUtils.unescapeJavaScript(string0);
      assertEquals(";r033&(AGeYdN%M", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = "\t. ";
      String string1 = StringEscapeUtils.escapeJava(string0);
      assertEquals("\\t. ", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      int int0 = 0;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(int0);
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      BufferedWriter bufferedWriter0 = new BufferedWriter((Writer) charArrayWriter0);
      assertNotNull(bufferedWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      StringEscapeUtils.unescapeJava((Writer) bufferedWriter0, string1);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test30()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      String string0 = "r\\n";
      StringEscapeUtils.unescapeJava((Writer) charArrayWriter0, string0);
      assertEquals("r\n", charArrayWriter0.toString());
      assertEquals(2, charArrayWriter0.size());
  }

  @Test
  public void test31()  throws Throwable  {
      int int0 = 136;
      PipedReader pipedReader0 = new PipedReader(int0);
      assertNotNull(pipedReader0);
      assertEquals(false, pipedReader0.markSupported());
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      assertEquals(false, pipedReader0.ready());
      assertEquals(false, pipedReader0.markSupported());
      
      String string0 = "=\\b_";
      StringEscapeUtils.unescapeJava((Writer) pipedWriter0, string0);
      assertEquals(true, pipedReader0.ready());
      assertEquals(false, pipedReader0.markSupported());
  }

  @Test
  public void test32()  throws Throwable  {
      String string0 = "Z\\u0";
      String string1 = StringEscapeUtils.escapeCsv(string0);
      assertEquals("Z\\u0", string1);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String string2 = StringEscapeUtils.escapeJava(string1);
      assertEquals("Z\\\\u0", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      
      String string3 = StringEscapeUtils.unescapeJava(string2);
      assertEquals("Z\\u0", string3);
      assertNotNull(string3);
      assertTrue(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string3));
      assertSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string1, string3);
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = "\\\"h_zf{vzjxZFYGB?NM";
      String string1 = StringEscapeUtils.unescapeJava(string0);
      assertEquals("\"h_zf{vzjxZFYGB?NM", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test34()  throws Throwable  {
      String string0 = "\\u.000";
      // Undeclared exception!
      try {
        String string1 = StringEscapeUtils.unescapeJava(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to parse unicode value: .000
         //
      }
  }

  @Test
  public void test35()  throws Throwable  {
      String string0 = "IHyEo'h";
      String string1 = StringEscapeUtils.unescapeJava(string0);
      assertEquals("IHyEo'h", string1);
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = null;
      String string3 = StringEscapeUtils.unescapeJavaScript(string2);
      assertNull(string3);
      
      MockFile mockFile0 = (MockFile)MockFile.createTempFile(string1, string1);
      assertNotNull(mockFile0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter((File) mockFile0);
      assertNotNull(mockFileWriter0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      StringEscapeUtils.unescapeJavaScript((Writer) mockFileWriter0, string3);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test36()  throws Throwable  {
      Writer writer0 = null;
      String string0 = "\\\"h_zf{vzjxZFYGB?NM";
      // Undeclared exception!
      try {
        StringEscapeUtils.unescapeJava(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null
         //
      }
  }

  @Test
  public void test37()  throws Throwable  {
      String string0 = "\\\"h_zf{vzjxZFYGB?NM";
      String string1 = StringEscapeUtils.escapeJavaScript(string0);
      assertEquals("\\\\\\\"h_zf{vzjxZFYGB?NM", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test38()  throws Throwable  {
      String string0 = "5\t+8\r\n\b";
      String string1 = StringEscapeUtils.escapeJava(string0);
      assertEquals("5\\t+8\\r\\n\\b", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test39()  throws Throwable  {
      String string0 = "IHyEo'h";
      String string1 = StringEscapeUtils.unescapeJava(string0);
      assertEquals("IHyEo'h", string1);
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = null;
      String string3 = StringEscapeUtils.unescapeJavaScript(string2);
      assertNull(string3);
      
      MockFile mockFile0 = (MockFile)MockFile.createTempFile(string1, string1);
      assertNotNull(mockFile0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter((File) mockFile0);
      assertNotNull(mockFileWriter0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      StringEscapeUtils.escapeJavaScript((Writer) mockFileWriter0, string3);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test40()  throws Throwable  {
      String string0 = null;
      Writer writer0 = null;
      // Undeclared exception!
      try {
        StringEscapeUtils.escapeJavaScript(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null
         //
      }
  }

  @Test
  public void test41()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.escapeJavaScript(string0);
      assertNull(string1);
  }

  @Test
  public void test42()  throws Throwable  {
      String string0 = " gUwO<@\\fsWi3/EV";
      String string1 = StringEscapeUtils.unescapeJavaScript(string0);
      assertEquals(" gUwO<@\fsWi3/EV", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((Writer) stringWriter0);
      assertNotNull(mockPrintWriter0);
      assertEquals("", stringWriter0.toString());
      
      BufferedWriter bufferedWriter0 = new BufferedWriter((Writer) mockPrintWriter0);
      assertNotNull(bufferedWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringEscapeUtils.escapeJava((Writer) bufferedWriter0, string1);
      assertEquals("", stringWriter0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test43()  throws Throwable  {
      String string0 = "IHyEo'h";
      String string1 = StringEscapeUtils.unescapeJava(string0);
      assertEquals("IHyEo'h", string1);
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = StringEscapeUtils.escapeJava(string1);
      assertEquals("IHyEo'h", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)string2));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
  }

  @Test
  public void test44()  throws Throwable  {
      StringEscapeUtils stringEscapeUtils0 = new StringEscapeUtils();
      assertNotNull(stringEscapeUtils0);
  }

  @Test
  public void test45()  throws Throwable  {
      int int0 = 647;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(int0);
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      
      String string0 = locale0.getDisplayLanguage(locale0);
      assertEquals("\u65E5\u672C\u8A9E", string0);
      assertNotNull(string0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      
      StringEscapeUtils.escapeJavaScript((Writer) charArrayWriter0, string0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("\\u65E5\\u672C\\u8A9E", charArrayWriter0.toString());
      assertEquals(18, charArrayWriter0.size());
  }

  @Test
  public void test46()  throws Throwable  {
      String string0 = "IHyEo'h";
      String string1 = StringEscapeUtils.unescapeJava(string0);
      assertEquals("IHyEo'h", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      MockFile mockFile0 = (MockFile)MockFile.createTempFile(string1, string1);
      assertNotNull(mockFile0);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter((File) mockFile0);
      assertNotNull(mockFileWriter0);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      StringEscapeUtils.escapeJavaScript((Writer) mockFileWriter0, string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test47()  throws Throwable  {
      String string0 = " gUwO<@\\fsWi3/EV";
      String string1 = StringEscapeUtils.unescapeJavaScript(string0);
      assertEquals(" gUwO<@\fsWi3/EV", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = StringEscapeUtils.escapeJavaScript(string1);
      assertEquals(" gUwO<@\\fsWi3\\/EV", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
  }
}
