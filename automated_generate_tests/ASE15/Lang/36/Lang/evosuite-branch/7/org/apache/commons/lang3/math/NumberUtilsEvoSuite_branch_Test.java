/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:51:11 GMT 2014
 */

package org.apache.commons.lang3.math;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;


public class NumberUtilsEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      String string0 = "8L";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test001()  throws Throwable  {
      String string0 = "g";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test002() {}
//   @Test
//   public void test002()  throws Throwable  {
//       String string0 = "8.L";
//       boolean boolean0 = NumberUtils.isNumber(string0);
//       assertFalse(boolean0);
//   }

  @Test
  public void test003()  throws Throwable  {
      String string0 = "l";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test004()  throws Throwable  {
      String string0 = "D";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test005()  throws Throwable  {
      String string0 = "1F";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test006()  throws Throwable  {
      String string0 = ".4";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test007()  throws Throwable  {
      String string0 = "8.";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test008()  throws Throwable  {
      String string0 = "--14";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test009()  throws Throwable  {
      String string0 = ":o[\\;$y:%~hT1$+jP$";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test010()  throws Throwable  {
      String string0 = "+=_hm\"rGI=)+YM'o2n+";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test011()  throws Throwable  {
      String string0 = "efxV=ohlUZXDW0[U";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test012()  throws Throwable  {
      String string0 = "-";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test013()  throws Throwable  {
      String string0 = "0xa";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test014()  throws Throwable  {
      String string0 = "-0xArray cannot be empty.";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test015()  throws Throwable  {
      String string0 = "0x\"_4l};%E-I";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = "-0x";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test017()  throws Throwable  {
      String string0 = "0EEE@9Y@@}";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test018()  throws Throwable  {
      String string0 = "E";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test019()  throws Throwable  {
      String string0 = "...";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test020()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test021()  throws Throwable  {
      String string0 = "-0x14";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test022()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test023()  throws Throwable  {
      String string0 = null;
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
      
      byte byte1 = (byte)65;
      assertFalse(byte1 == byte0);
      
      byte byte2 = NumberUtils.max(byte0, byte0, byte1);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
      assertEquals((byte)65, byte2);
  }

  @Test
  public void test024()  throws Throwable  {
      String string0 = null;
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
      
      byte byte1 = (byte)49;
      assertFalse(byte1 == byte0);
      
      byte byte2 = NumberUtils.max(byte0, byte1, byte0);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertEquals((byte)49, byte2);
  }

  @Test
  public void test025()  throws Throwable  {
      byte byte0 = (byte)46;
      short short0 = (short) (-44);
      short short1 = NumberUtils.max(short0, short0, (short) byte0);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      assertEquals((short)46, short1);
  }

  @Test
  public void test026()  throws Throwable  {
      byte byte0 = (byte)46;
      short short0 = (short) (-44);
      short short1 = NumberUtils.max(short0, (short) byte0, (short) byte0);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      assertEquals((short)46, short1);
  }

  @Test
  public void test027()  throws Throwable  {
      int int0 = 1;
      int int1 = 694;
      int int2 = NumberUtils.max(int0, int0, int1);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(694, int2);
  }

  @Test
  public void test028()  throws Throwable  {
      int int0 = 1;
      int int1 = 694;
      int int2 = NumberUtils.max(int0, int1, int1);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(694, int2);
  }

  @Test
  public void test029()  throws Throwable  {
      long long0 = (-2830L);
      String string0 = "g";
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
      
      long long1 = NumberUtils.max(long0, long0, (long) short0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
  }

  @Test
  public void test030()  throws Throwable  {
      byte byte0 = (byte)79;
      byte byte1 = (byte)43;
      byte byte2 = NumberUtils.min(byte0, byte0, byte1);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertEquals((byte)43, byte2);
  }

  @Test
  public void test031()  throws Throwable  {
      byte byte0 = (byte)27;
      byte byte1 = (byte)0;
      byte byte2 = NumberUtils.min(byte0, byte1, byte1);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertEquals((byte)0, byte2);
  }

  @Test
  public void test032() {}
//   @Test
//   public void test032()  throws Throwable  {
//       short short0 = (short)0;
//       short short1 = NumberUtils.max(short0, short0, short0);
//       assertTrue(short0 == short1);
//       assertTrue(short1 == short0);
//       assertEquals((short)0, short1);
//       
//       short short2 = (short) (-90);
//       assertFalse(short2 == short1);
//       
//       short short3 = NumberUtils.min(short1, short1, short2);
//       assertTrue(short3 == short2);
//       assertFalse(short3 == short1);
//       assertFalse(short3 == short0);
//       assertTrue(short2 == short3);
//       assertFalse(short2 == short1);
//       assertFalse(short2 == short0);
//       assertFalse(short0 == short3);
//       assertTrue(short0 == short1);
//       assertFalse(short0 == short2);
//       assertTrue(short1 == short0);
//       assertFalse(short1 == short2);
//       assertFalse(short1 == short3);
//       assertEquals((short) (-90), short3);
//   }

  @Test
  public void test033()  throws Throwable  {
      short short0 = (short)0;
      short short1 = (short) (-1097);
      short short2 = NumberUtils.min(short0, short1, short1);
      assertTrue(short1 == short2);
      assertFalse(short1 == short0);
      assertFalse(short2 == short0);
      assertTrue(short2 == short1);
      assertFalse(short0 == short2);
      assertFalse(short0 == short1);
      assertEquals((short) (-1097), short2);
  }

  @Test
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = byteArray0[2];
      byte byte0 = (byte) (-36);
      byteArray0[3] = byte0;
      int int0 = 1;
      int int1 = NumberUtils.min((int) byteArray0[2], int0, (int) byteArray0[3]);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-36), (byte)0}, byteArray0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-36), int1);
  }

  @Test
  public void test035()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short short0 = (short)149;
      shortArray0[2] = short0;
      shortArray0[4] = shortArray0[2];
      int int0 = NumberUtils.min((int) shortArray0[4], (int) shortArray0[7], (int) shortArray0[4]);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)149, (short)0, (short)149, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(0, int0);
  }

  @Test
  public void test036()  throws Throwable  {
      String string0 = "-0x14";
      byte byte0 = (byte) (-111);
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
      
      int int1 = NumberUtils.min((int) byte0, (int) byte0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-111), int1);
  }

  @Test
  public void test037()  throws Throwable  {
      int int0 = 1;
      long long0 = (-213L);
      long long1 = NumberUtils.min((long) int0, long0, long0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals((-213L), long1);
  }

  @Test
  public void test038()  throws Throwable  {
      int int0 = (-1921);
      byte byte0 = (byte) (-126);
      long long0 = NumberUtils.min((long) byte0, (long) byte0, (long) int0);
      assertEquals((-1921L), long0);
  }

  @Test
  public void test039()  throws Throwable  {
      float[] floatArray0 = new float[10];
      float float0 = (-5074.0615F);
      floatArray0[0] = float0;
      float float1 = NumberUtils.max(floatArray0);
      assertArrayEquals(new float[] {(-5074.0615F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(float1 == float0);
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test
  public void test040()  throws Throwable  {
      float[] floatArray0 = new float[10];
      float float0 = Float.NaN;
      floatArray0[5] = float0;
      float float1 = NumberUtils.max(floatArray0);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, Float.NaN, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 878.9974;
      doubleArray0[1] = double0;
      double double1 = NumberUtils.max(doubleArray0);
      assertArrayEquals(new double[] {0.0, 878.9974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(double1 == double0);
      assertEquals(878.9974, double1, 0.01D);
  }

  @Test
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = Double.NaN;
      doubleArray0[2] = double0;
      double double1 = NumberUtils.max(doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test043()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try {
        double double0 = NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte)3;
      byteArray0[9] = byte0;
      byte byte1 = NumberUtils.max(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)3}, byteArray0);
      assertTrue(byte1 == byte0);
      assertEquals((byte)3, byte1);
  }

  @Test
  public void test045()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try {
        byte byte0 = NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test046()  throws Throwable  {
      short[] shortArray0 = new short[28];
      short short0 = (short)801;
      shortArray0[7] = short0;
      short short1 = NumberUtils.max(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)801, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertTrue(short1 == short0);
      assertEquals((short)801, short1);
  }

  @Test
  public void test047()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test048()  throws Throwable  {
      byte byte0 = (byte) (-88);
      byte byte1 = NumberUtils.min(byte0, byte0, byte0);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      assertEquals((byte) (-88), byte1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) byte1;
      int int0 = NumberUtils.max(intArray0);
      assertArrayEquals(new int[] {(-88), 0, 0}, intArray0);
      assertEquals(0, int0);
  }

  @Test
  public void test049()  throws Throwable  {
      long[] longArray0 = new long[6];
      long long0 = 1405L;
      longArray0[3] = long0;
      long long1 = NumberUtils.max(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 1405L, 0L, 0L}, longArray0);
      assertTrue(long1 == long0);
      assertEquals(1405L, long1);
  }

  @Test
  public void test050()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try {
        long long0 = NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test051()  throws Throwable  {
      float[] floatArray0 = new float[10];
      short short0 = (short) (-1097);
      floatArray0[6] = (float) short0;
      float float0 = NumberUtils.min(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-1097.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-1097.0F), float0, 0.01F);
  }

  @Test
  public void test052()  throws Throwable  {
      float[] floatArray0 = new float[10];
      float float0 = Float.NaN;
      floatArray0[7] = float0;
      float float1 = NumberUtils.min(floatArray0);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, Float.NaN, 0.0F, 0.0F}, floatArray0, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test
  public void test053()  throws Throwable  {
      float[] floatArray0 = null;
      // Undeclared exception!
      try {
        float float0 = NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = (-633.790202955921);
      doubleArray0[2] = double0;
      double double1 = NumberUtils.min(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-633.790202955921), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(double1 == double0);
      assertEquals((-633.790202955921), double1, 0.01D);
  }

  @Test
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = Double.NaN;
      doubleArray0[4] = double0;
      double double1 = NumberUtils.min(doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test056()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try {
        double double0 = NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-41);
      byteArray0[2] = byte0;
      byte byte1 = NumberUtils.min(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-41), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(byte1 == byte0);
      assertEquals((byte) (-41), byte1);
  }

  @Test
  public void test058()  throws Throwable  {
      short[] shortArray0 = new short[28];
      short short0 = (short) (-316);
      shortArray0[3] = short0;
      short short1 = NumberUtils.min(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short) (-316), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertTrue(short1 == short0);
      assertEquals((short) (-316), short1);
  }

  @Test
  public void test059()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test060()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = (-1);
      intArray0[2] = int0;
      int int1 = NumberUtils.min(intArray0);
      assertArrayEquals(new int[] {0, 0, (-1), 0, 0, 0, 0, 0}, intArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test
  public void test061()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test062()  throws Throwable  {
      String string0 = null;
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
      
      long long0 = 5019L;
      long long1 = NumberUtils.max((long) byte0, long0, (long) byte0);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals(5019L, long1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = long1;
      long long2 = NumberUtils.min(longArray0);
      assertArrayEquals(new long[] {5019L, 0L, 0L}, longArray0);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(0L, long2);
  }

  @Test
  public void test063()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try {
        long long0 = NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test064()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try {
        BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test065()  throws Throwable  {
      String string0 = null;
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
      assertNull(bigDecimal0);
  }

  @Test
  public void test066()  throws Throwable  {
      String string0 = null;
      BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
      assertNull(bigInteger0);
  }

  @Test
  public void test067()  throws Throwable  {
      String string0 = null;
      Long long0 = NumberUtils.createLong(string0);
  }

  @Test
  public void test068()  throws Throwable  {
      String string0 = null;
      Integer integer0 = NumberUtils.createInteger(string0);
  }

  @Test
  public void test069()  throws Throwable  {
      String string0 = null;
      Double double0 = NumberUtils.createDouble(string0);
  }

  @Test
  public void test070()  throws Throwable  {
      String string0 = null;
      Float float0 = NumberUtils.createFloat(string0);
  }

  @Test
  public void test071()  throws Throwable  {
      String string0 = ")<tBPw):Y6kOpC[h6";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \")<tBPw):\"
         //
      }
  }

  @Test
  public void test072()  throws Throwable  {
      String string0 = "8L";
      Long long0 = (Long)NumberUtils.createNumber(string0);
      assertEquals(8L, (long)long0);
  }

  @Test
  public void test073()  throws Throwable  {
      String string0 = "Srigs must not be null";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Srigs must not be null is not a valid number.
         //
      }
  }

  @Test
  public void test074()  throws Throwable  {
      String string0 = "t5 2MKf";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // t5 2MKf is not a valid number.
         //
      }
  }

  @Test
  public void test075()  throws Throwable  {
      String string0 = "SecurityException occurred";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // SecurityException occurred is not a valid number.
         //
      }
  }

  @Test
  public void test076()  throws Throwable  {
      String string0 = "$aL";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // $aL is not a valid number.
         //
      }
  }

  @Test
  public void test077()  throws Throwable  {
      String string0 = "XFeTjRSgq?Vu7&8x{3";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test078() {}
//   @Test
//   public void test078()  throws Throwable  {
//       String string0 = "pEUhoe";
//       try {
//         Number number0 = NumberUtils.createNumber(string0);
//         fail("Expecting exception: NumberFormatException");
//       
//       } catch(NumberFormatException e) {
//          //
//          // pEUhoe is not a valid number.
//          //
//       }
//   }

  @Test
  public void test079()  throws Throwable  {
      String string0 = "E";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // E is not a valid number.
         //
      }
  }

  @Test
  public void test080()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.mat.NumbhrUtil";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // org.apache.commons.lang3.mat.NumbhrUtil is not a valid number.
         //
      }
  }

  @Test
  public void test081()  throws Throwable  {
      String string0 = "orgyapache.commons.lang3.mah.NufberUtils";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // orgyapache.commons.lang3.mah.NufberUtils is not a valid number.
         //
      }
  }

  @Test
  public void test082()  throws Throwable  {
      String string0 = "8.";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals(8.0F, (float)float0, 0.01F);
  }

  @Test
  public void test083() {}
//   @Test
//   public void test083()  throws Throwable  {
//       String string0 = "#$VLx^[E{MFe2P.$";
//       try {
//         Number number0 = NumberUtils.createNumber(string0);
//         fail("Expecting exception: NumberFormatException");
//       
//       } catch(NumberFormatException e) {
//          //
//          // #$VLx^[E{MFe2P.$ is not a valid number.
//          //
//       }
//   }

  @Test
  public void test084()  throws Throwable  {
      String string0 = "-0X`y&/";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-`y&/\"
         //
      }
  }

  @Test
  public void test085()  throws Throwable  {
      String string0 = "0Xorg.apache.commons.lang3.math.Num9erUtils";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.apache.commons.lang3.math.Num9erUtils\"
         //
      }
  }

  @Test
  public void test086()  throws Throwable  {
      String string0 = "1F";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals(1.0F, (float)float0, 0.01F);
  }

  @Test
  public void test087()  throws Throwable  {
      String string0 = "0xfTWGQ-";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"fTWGQ-\"
         //
      }
  }

  @Test
  public void test088()  throws Throwable  {
      String string0 = "--";
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test089()  throws Throwable  {
      String string0 = "";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test090()  throws Throwable  {
      String string0 = null;
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test091()  throws Throwable  {
      String string0 = "-0x14";
      Integer integer0 = (Integer)NumberUtils.createNumber(string0);
      assertEquals((-20), (int)integer0);
  }

  @Test
  public void test092()  throws Throwable  {
      String string0 = null;
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
  }

  @Test
  public void test093()  throws Throwable  {
      String string0 = "$aL";
      byte byte0 = (byte)46;
      byte byte1 = NumberUtils.toByte(string0, byte0);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      assertEquals((byte)46, byte1);
  }

  @Test
  public void test094()  throws Throwable  {
      String string0 = null;
      double double0 = (-263.210039);
      double double1 = NumberUtils.toDouble(string0, double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals((-263.210039), double1, 0.01D);
  }

  @Test
  public void test095()  throws Throwable  {
      String string0 = null;
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test096()  throws Throwable  {
      int[] intArray0 = new int[2];
      String string0 = null;
      long long0 = NumberUtils.toLong(string0, (long) intArray0[0]);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(0L, long0);
  }

  @Test
  public void test097()  throws Throwable  {
      String string0 = null;
      short short0 = (short)0;
      int int0 = NumberUtils.toInt(string0, (int) short0);
      assertEquals(0, int0);
  }

  @Test
  public void test098()  throws Throwable  {
      String string0 = "f(&]cp";
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test099()  throws Throwable  {
      int int0 = 2800;
      float float0 = NumberUtils.max((float) int0, (float) int0, (float) int0);
      assertEquals(2800.0F, float0, 0.01F);
  }

  @Test
  public void test100()  throws Throwable  {
      String string0 = "";
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
  }

  @Test
  public void test101()  throws Throwable  {
      long long0 = (-2830L);
      String string0 = "g";
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
      
      float float0 = NumberUtils.min((float) long0, (float) long0, (float) short0);
      assertEquals((-2830.0F), float0, 0.01F);
  }

  @Test
  public void test102()  throws Throwable  {
      double double0 = 1.0;
      double double1 = NumberUtils.min(double0, double0, double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(1.0, double1, 0.01D);
  }

  @Test
  public void test103()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      assertNotNull(numberUtils0);
  }

  @Test
  public void test104()  throws Throwable  {
      int int0 = 1;
      double double0 = NumberUtils.max((double) int0, (double) int0, (double) int0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test105()  throws Throwable  {
      String string0 = "";
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }
}
