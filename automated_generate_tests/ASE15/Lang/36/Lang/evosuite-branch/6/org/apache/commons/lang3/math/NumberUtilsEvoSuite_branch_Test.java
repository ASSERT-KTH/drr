/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:40:39 GMT 2014
 */

package org.apache.commons.lang3.math;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;


public class NumberUtilsEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      String string0 = "L";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test001()  throws Throwable  {
      String string0 = "F";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test002()  throws Throwable  {
      String string0 = "f";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test003()  throws Throwable  {
      String string0 = "1D";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test004()  throws Throwable  {
      String string0 = "1E";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test005()  throws Throwable  {
      String string0 = "9";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test006()  throws Throwable  {
      String string0 = ".";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test007()  throws Throwable  {
      String string0 = "----";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test008()  throws Throwable  {
      String string0 = "e!J'6u+_(~&";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test009()  throws Throwable  {
      String string0 = "...";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test010()  throws Throwable  {
      String string0 = "c";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test011()  throws Throwable  {
      String string0 = "-0x0X; or a Su JVM ";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test012()  throws Throwable  {
      String string0 = "-0x-0Xpm,U9**cB.XEeU:-#";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test013()  throws Throwable  {
      String string0 = "0xf";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test014()  throws Throwable  {
      String string0 = "0x";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test015()  throws Throwable  {
      String string0 = "-0E0dX; or a Su JVM ";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = "++9J";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test017()  throws Throwable  {
      String string0 = "-";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test018()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test019()  throws Throwable  {
      String string0 = "0xD{@";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test020()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)100;
      byte byte1 = NumberUtils.max(byteArray0[0], byteArray0[0], byte0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals((byte)100, byte1);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
  }

  @Test
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)100;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byte byte2 = NumberUtils.max(byte1, byteArray0[0], byte1);
      assertArrayEquals(new byte[] {(byte)100}, byteArray0);
      assertEquals((byte)100, byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte1 == byte2);
      assertFalse(byte2 == byte1);
      assertTrue(byte2 == byte0);
  }

  @Test
  public void test023()  throws Throwable  {
      short short0 = (short) (-630);
      byte byte0 = (byte) (-71);
      short short1 = (short)1081;
      short short2 = NumberUtils.max((short) byte0, short0, short1);
      assertEquals((short)1081, short2);
      assertFalse(short1 == short0);
      assertTrue(short1 == short2);
      assertFalse(short0 == short2);
      assertFalse(short0 == short1);
      assertTrue(short2 == short1);
      assertFalse(short2 == short0);
  }

  @Test
  public void test024()  throws Throwable  {
      short short0 = (short) (-1193);
      byte[] byteArray0 = new byte[8];
      short short1 = NumberUtils.max(short0, (short) byteArray0[2], short0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((short)0, short1);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
  }

  @Test
  public void test025()  throws Throwable  {
      String string0 = "++9J";
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
      
      int int0 = 570;
      int int1 = NumberUtils.max((int) byte0, (int) byte0, int0);
      assertEquals(570, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)109;
      int int0 = NumberUtils.max((int) byteArray0[3], (int) byte0, (int) byteArray0[4]);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(109, int0);
  }

  @Test
  public void test027()  throws Throwable  {
      byte byte0 = (byte) (-22);
      byte byte1 = (byte) (-34);
      long long0 = NumberUtils.max((long) byte1, (long) byte1, (long) byte0);
      assertEquals((-22L), long0);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
  }

  @Test
  public void test028()  throws Throwable  {
      long long0 = (-1L);
      long long1 = 1L;
      long long2 = NumberUtils.max(long0, long1, long1);
      assertEquals(1L, long2);
      assertTrue(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
  }

  @Test
  public void test029()  throws Throwable  {
      byte byte0 = (byte)86;
      byte byte1 = (byte) (-84);
      byte byte2 = NumberUtils.min(byte0, byte0, byte1);
      assertEquals((byte) (-84), byte2);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
  }

  @Test
  public void test030()  throws Throwable  {
      byte byte0 = (byte)33;
      byte byte1 = (byte) (-108);
      byte byte2 = NumberUtils.min(byte0, byte1, byte0);
      assertEquals((byte) (-108), byte2);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
  }

  @Test
  public void test031()  throws Throwable  {
      byte byte0 = (byte) (-22);
      byte byte1 = (byte)44;
      short short0 = NumberUtils.min((short) byte1, (short) byte1, (short) byte0);
      assertEquals((short) (-22), short0);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
  }

  @Test
  public void test032()  throws Throwable  {
      short short0 = (short) (-2953);
      short short1 = (short)1107;
      short short2 = NumberUtils.min(short1, short0, short1);
      assertEquals((short) (-2953), short2);
      assertFalse(short1 == short2);
      assertFalse(short1 == short0);
      assertTrue(short2 == short0);
      assertFalse(short2 == short1);
      assertFalse(short0 == short1);
      assertTrue(short0 == short2);
  }

  @Test
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)100;
      int int0 = NumberUtils.min((int) byte0, (int) byte0, (int) byteArray0[0]);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0, int0);
  }

  @Test
  public void test034()  throws Throwable  {
      int int0 = 16;
      int int1 = 0;
      int int2 = NumberUtils.min(int0, int1, int1);
      assertEquals(0, int2);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
  }

  @Test
  public void test035()  throws Throwable  {
      int int0 = 632;
      int int1 = 0;
      long long0 = NumberUtils.min((long) int0, (long) int0, (long) int1);
      assertEquals(0L, long0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test036()  throws Throwable  {
      int int0 = 632;
      int int1 = 0;
      long long0 = NumberUtils.min((long) int0, (long) int1, (long) int0);
      assertEquals(0L, long0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test037()  throws Throwable  {
      byte byte0 = (byte)100;
      float[] floatArray0 = new float[4];
      floatArray0[3] = (float) byte0;
      float float0 = NumberUtils.max(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 100.0F}, floatArray0, 0.01F);
      assertEquals(100.0F, float0, 0.01F);
  }

  @Test
  public void test038()  throws Throwable  {
      float[] floatArray0 = new float[10];
      float float0 = Float.NaN;
      floatArray0[3] = float0;
      float float1 = NumberUtils.max(floatArray0);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, Float.NaN, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
  }

  @Test
  public void test039()  throws Throwable  {
      float[] floatArray0 = null;
      // Undeclared exception!
      try {
        float float0 = NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 652.3386;
      doubleArray0[2] = double0;
      double double1 = NumberUtils.max(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 652.3386, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(652.3386, double1, 0.01D);
      assertTrue(double1 == double0);
  }

  @Test
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      double double0 = Double.NaN;
      doubleArray0[6] = double0;
      double double1 = NumberUtils.max(doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double0);
  }

  @Test
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)109;
      byteArray0[2] = byte0;
      byte byte1 = NumberUtils.max(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)109, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((byte)109, byte1);
      assertTrue(byte1 == byte0);
  }

  @Test
  public void test043()  throws Throwable  {
      short[] shortArray0 = new short[8];
      short short0 = (short)76;
      shortArray0[4] = short0;
      short short1 = NumberUtils.max(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)76, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals((short)76, short1);
      assertTrue(short1 == short0);
  }

  @Test
  public void test044()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test045()  throws Throwable  {
      int[] intArray0 = new int[29];
      int int0 = 256;
      intArray0[5] = int0;
      int int1 = NumberUtils.max(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 256, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(256, int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test046()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test047()  throws Throwable  {
      long[] longArray0 = new long[8];
      long long0 = 1L;
      longArray0[4] = long0;
      long long1 = NumberUtils.max(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L}, longArray0);
      assertEquals(1L, long1);
      assertTrue(long1 == long0);
  }

  @Test
  public void test048()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try {
        long long0 = NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test049()  throws Throwable  {
      float[] floatArray0 = new float[8];
      float float0 = (-2.2990365F);
      floatArray0[1] = float0;
      float float1 = NumberUtils.min(floatArray0);
      assertArrayEquals(new float[] {0.0F, (-2.2990365F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-2.2990365F), float1, 0.01F);
      assertTrue(float1 == float0);
  }

  @Test
  public void test050()  throws Throwable  {
      float[] floatArray0 = new float[8];
      float float0 = Float.NaN;
      floatArray0[6] = float0;
      float float1 = NumberUtils.min(floatArray0);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, Float.NaN, 0.0F}, floatArray0, 0.01F);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
  }

  @Test
  public void test051()  throws Throwable  {
      float[] floatArray0 = null;
      // Undeclared exception!
      try {
        float float0 = NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test052()  throws Throwable  {
      long long0 = 1114L;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) long0;
      double double0 = NumberUtils.min(doubleArray0);
      assertArrayEquals(new double[] {1114.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = Double.NaN;
      doubleArray0[3] = double0;
      double double1 = NumberUtils.min(doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.NaN, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double0);
  }

  @Test
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-22);
      byteArray0[2] = byte0;
      byte byte1 = NumberUtils.min(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-22), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((byte) (-22), byte1);
      assertTrue(byte1 == byte0);
  }

  @Test
  public void test055()  throws Throwable  {
      short[] shortArray0 = new short[5];
      byte byte0 = (byte) (-71);
      shortArray0[3] = (short) byte0;
      short short0 = NumberUtils.min(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short) (-71), (short)0}, shortArray0);
      assertEquals((short) (-71), short0);
  }

  @Test
  public void test056()  throws Throwable  {
      int[] intArray0 = new int[23];
      int int0 = 1179;
      intArray0[0] = int0;
      int int1 = NumberUtils.min(intArray0);
      assertArrayEquals(new int[] {1179, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test057()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test058()  throws Throwable  {
      short short0 = (short) (-1);
      long[] longArray0 = new long[7];
      longArray0[2] = (long) short0;
      long long0 = NumberUtils.min(longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-1L), 0L, 0L, 0L, 0L}, longArray0);
      assertEquals((-1L), long0);
  }

  @Test
  public void test059()  throws Throwable  {
      String string0 = null;
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
      assertNull(bigDecimal0);
  }

  @Test
  public void test060()  throws Throwable  {
      String string0 = null;
      BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
      assertNull(bigInteger0);
  }

  @Test
  public void test061()  throws Throwable  {
      String string0 = null;
      Long long0 = NumberUtils.createLong(string0);
  }

  @Test
  public void test062()  throws Throwable  {
      String string0 = null;
      Integer integer0 = NumberUtils.createInteger(string0);
  }

  @Test
  public void test063()  throws Throwable  {
      String string0 = null;
      Double double0 = NumberUtils.createDouble(string0);
  }

  @Test
  public void test064()  throws Throwable  {
      String string0 = null;
      Float float0 = NumberUtils.createFloat(string0);
  }

  @Test
  public void test065()  throws Throwable  {
      String string0 = "fx__9MbmaE6";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test066()  throws Throwable  {
      String string0 = "^{4";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"^{4\"
         //
      }
  }

  @Test
  public void test067()  throws Throwable  {
      String string0 = "u8z\"K7l";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // u8z\"K7l is not a valid number.
         //
      }
  }

  @Test
  public void test068()  throws Throwable  {
      String string0 = "8l";
      Long long0 = (Long)NumberUtils.createNumber(string0);
      assertEquals(8L, (long)long0);
  }

  @Test
  public void test069()  throws Throwable  {
      String string0 = "f";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // f is not a valid number.
         //
      }
  }

  @Test
  public void test070()  throws Throwable  {
      String string0 = "InvocationTargetExceptio: occurred";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // InvocationTargetExceptio: occurred is not a valid number.
         //
      }
  }

  @Test
  public void test071()  throws Throwable  {
      String string0 = ".L";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // .L is not a valid number.
         //
      }
  }

  @Test
  public void test072()  throws Throwable  {
      String string0 = "q+4H9$)Fh>5UF";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // q+4H9$)Fh>5UF is not a valid number.
         //
      }
  }

  @Test
  public void test073()  throws Throwable  {
      String string0 = "Strings must not be null";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Strings must not be null is not a valid number.
         //
      }
  }

  @Test
  public void test074()  throws Throwable  {
      String string0 = "\\.";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test075() {}
//   @Test
//   public void test075()  throws Throwable  {
//       String string0 = "?fv$z3E0jDR,pc:Xe3";
//       try {
//         Number number0 = NumberUtils.createNumber(string0);
//         fail("Expecting exception: NumberFormatException");
//       
//       } catch(NumberFormatException e) {
//          //
//          // ?fv$z3E0jDR,pc:Xe3 is not a valid number.
//          //
//       }
//   }

  @Test
  public void test076()  throws Throwable  {
      String string0 = "1D";
      Double double0 = (Double)NumberUtils.createNumber(string0);
      assertEquals(1.0, (double)double0, 0.01D);
  }

  @Test
  public void test077() {}
//   @Test
//   public void test077()  throws Throwable  {
//       String string0 = "FO|Hf.d]WiEcMe";
//       try {
//         Number number0 = NumberUtils.createNumber(string0);
//         fail("Expecting exception: NumberFormatException");
//       
//       } catch(NumberFormatException e) {
//          //
//          // FO|Hf.d]WiEcMe is not a valid number.
//          //
//       }
//   }

  @Test
  public void test078()  throws Throwable  {
      String string0 = "org.apacheJcommons.lang3StringUtil9";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test079()  throws Throwable  {
      String string0 = ".2";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals(0.2F, (float)float0, 0.01F);
  }

  @Test
  public void test080()  throws Throwable  {
      String string0 = "\"0E";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // \"0E is not a valid number.
         //
      }
  }

  @Test
  public void test081()  throws Throwable  {
      String string0 = "-0Xorg.apache.commons.lang3.StringUtils";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-org.apache.commons.lang3.StringUtils\"
         //
      }
  }

  @Test
  public void test082()  throws Throwable  {
      String string0 = "0X; or a Su JVM ";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"; or a Su JVM \"
         //
      }
  }

  @Test
  public void test083()  throws Throwable  {
      String string0 = "-0x";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
      }
  }

  @Test
  public void test084()  throws Throwable  {
      String string0 = "0x";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
      }
  }

  @Test
  public void test085()  throws Throwable  {
      String string0 = "--";
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test086()  throws Throwable  {
      String string0 = "";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test087()  throws Throwable  {
      String string0 = null;
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test088()  throws Throwable  {
      String string0 = "(EGs5s,-V.Dsc&%Nk0";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // (EGs5s,-V.Dsc&%Nk0 is not a valid number.
         //
      }
  }

  @Test
  public void test089()  throws Throwable  {
      String string0 = null;
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
  }

  @Test
  public void test090()  throws Throwable  {
      String string0 = null;
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
  }

  @Test
  public void test091()  throws Throwable  {
      String string0 = "-0n";
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test092()  throws Throwable  {
      short[] shortArray0 = new short[1];
      String string0 = null;
      float float0 = NumberUtils.toFloat(string0, (float) shortArray0[0]);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test093()  throws Throwable  {
      byte byte0 = (byte) (-98);
      String string0 = ".2";
      long long0 = NumberUtils.toLong(string0, (long) byte0);
      assertEquals((-98L), long0);
  }

  @Test
  public void test094()  throws Throwable  {
      String string0 = null;
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
  }

  @Test
  public void test095()  throws Throwable  {
      String string0 = null;
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test096()  throws Throwable  {
      byte byte0 = (byte) (-98);
      float float0 = NumberUtils.max((float) byte0, (float) byte0, (float) byte0);
      assertEquals((-98.0F), float0, 0.01F);
  }

  @Test
  public void test097()  throws Throwable  {
      String string0 = null;
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
  }

  @Test
  public void test098()  throws Throwable  {
      long long0 = (-1L);
      float float0 = NumberUtils.min((float) long0, (float) long0, (float) long0);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test
  public void test099()  throws Throwable  {
      int int0 = 16;
      int int1 = NumberUtils.min(int0, int0, int0);
      assertEquals(16, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      double double0 = NumberUtils.min((double) int0, (double) int0, (double) int1);
      assertEquals(16.0, double0, 0.01D);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test100()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      assertNotNull(numberUtils0);
  }

  @Test
  public void test101()  throws Throwable  {
      String string0 = "-0E0dX; or a Su JVM ";
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
  }

  @Test
  public void test102()  throws Throwable  {
      short short0 = (short) (-713);
      short short1 = NumberUtils.min(short0, short0, short0);
      assertEquals((short) (-713), short1);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
      
      double double0 = NumberUtils.max((double) short1, (double) short0, (double) short1);
      assertEquals((-713.0), double0, 0.01D);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
  }

  @Test
  public void test103()  throws Throwable  {
      String string0 = "--q+4H9$)Fh|>5UF";
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test104()  throws Throwable  {
      String string0 = "0xD{@";
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
  }
}
