/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:50:54 GMT 2014
 */

package org.apache.commons.lang3.math;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;




import org.junit.runner.RunWith;


public class NumberUtilsEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      String string0 = "L";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test001()  throws Throwable  {
      String string0 = "C";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test002()  throws Throwable  {
      String string0 = "2l";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test003()  throws Throwable  {
      String string0 = "f";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test004()  throws Throwable  {
      String string0 = ".";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test005()  throws Throwable  {
      String string0 = "1E";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test006()  throws Throwable  {
      String string0 = "U4W\\t]";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test007()  throws Throwable  {
      String string0 = "+hG";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test008()  throws Throwable  {
      String string0 = "eSU3h%7Ngc,w9='(?";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test009()  throws Throwable  {
      String string0 = "...";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test010()  throws Throwable  {
      String string0 = "..";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test011()  throws Throwable  {
      String string0 = "8EL";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test012()  throws Throwable  {
      String string0 = "-";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test013()  throws Throwable  {
      String string0 = "-0x7yam6aneE";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test014()  throws Throwable  {
      String string0 = "-0x0Ff";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test015()  throws Throwable  {
      String string0 = "0x-0x/XjW*-$h.^";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = "-0x";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test017()  throws Throwable  {
      String string0 = "0F";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test018()  throws Throwable  {
      String string0 = "5";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test019()  throws Throwable  {
      String string0 = "---0x";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test020()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test021()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test022()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = (byte)2;
      byte byte2 = NumberUtils.max(byte0, byte0, byte1);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertEquals((byte)2, byte2);
  }

  @Test
  public void test023()  throws Throwable  {
      byte byte0 = (byte) (-27);
      byte byte1 = (byte)103;
      byte byte2 = NumberUtils.max(byte0, byte1, byte0);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertEquals((byte)103, byte2);
  }

  @Test
  public void test024()  throws Throwable  {
      short short0 = (short)83;
      short short1 = (short)107;
      short short2 = NumberUtils.max(short0, short0, short1);
      assertFalse(short0 == short1);
      assertFalse(short0 == short2);
      assertFalse(short1 == short0);
      assertTrue(short1 == short2);
      assertTrue(short2 == short1);
      assertFalse(short2 == short0);
      assertEquals((short)107, short2);
  }

  @Test
  public void test025()  throws Throwable  {
      byte byte0 = (byte)11;
      short short0 = (short)1;
      short short1 = NumberUtils.max(short0, (short) byte0, (short) byte0);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      assertEquals((short)11, short1);
  }

  @Test
  public void test026()  throws Throwable  {
      byte byte0 = (byte) (-40);
      int int0 = 0;
      int int1 = NumberUtils.max((int) byte0, int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0, int1);
  }

  @Test
  public void test027()  throws Throwable  {
      int int0 = 0;
      int int1 = NumberUtils.min(int0, int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      short[] shortArray0 = new short[1];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      int int2 = 613;
      assertFalse(int2 == int1);
      
      int int3 = NumberUtils.max((int) short0, int0, int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertTrue(int0 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(int2 == int3);
      assertEquals(613, int3);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      long long0 = NumberUtils.max((long) int0, (long) int1, (long) int3);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertTrue(int0 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(int2 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertTrue(int1 == int0);
      assertEquals(613L, long0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
  }

  @Test
  public void test028()  throws Throwable  {
      short short0 = (short)4000;
      short short1 = (short) (-4031);
      long long0 = NumberUtils.max((long) short1, (long) short0, (long) short0);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      assertEquals(4000L, long0);
  }

  @Test
  public void test029()  throws Throwable  {
      String string0 = null;
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
      
      byte byte1 = (byte) (-56);
      assertFalse(byte1 == byte0);
      
      byte byte2 = NumberUtils.min(byte0, byte0, byte1);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertEquals((byte) (-56), byte2);
  }

  @Test
  public void test030()  throws Throwable  {
      byte byte0 = (byte) (-40);
      byte byte1 = (byte)57;
      byte byte2 = NumberUtils.min(byte1, byte0, byte0);
      assertTrue(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertTrue(byte2 == byte0);
      assertFalse(byte2 == byte1);
      assertFalse(byte1 == byte0);
      assertFalse(byte1 == byte2);
      assertEquals((byte) (-40), byte2);
  }

  @Test
  public void test031()  throws Throwable  {
      short short0 = (short)256;
      byte byte0 = (byte)7;
      byte byte1 = NumberUtils.min(byte0, byte0, byte0);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      assertEquals((byte)7, byte1);
      
      short short1 = (short)0;
      short short2 = NumberUtils.min(short0, (short) byte1, short1);
      assertFalse(short0 == short1);
      assertFalse(short0 == short2);
      assertFalse(short1 == short0);
      assertTrue(short1 == short2);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      assertTrue(short2 == short1);
      assertFalse(short2 == short0);
      assertEquals((short)0, short2);
  }

  @Test
  public void test032()  throws Throwable  {
      short short0 = (short)256;
      byte byte0 = (byte)7;
      byte byte1 = NumberUtils.min(byte0, byte0, byte0);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      assertEquals((byte)7, byte1);
      
      short short1 = NumberUtils.min(short0, (short) byte1, (short) byte0);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      assertEquals((short)7, short1);
  }

  @Test
  public void test033()  throws Throwable  {
      short short0 = (short) (-609);
      short short1 = NumberUtils.min(short0, short0, short0);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
      assertEquals((short) (-609), short1);
  }

  @Test
  public void test034()  throws Throwable  {
      String string0 = "-0x";
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
      
      int int0 = (-5289);
      int int1 = NumberUtils.min((int) short0, (int) short0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals((-5289), int1);
  }

  @Test
  public void test035()  throws Throwable  {
      int int0 = 8192;
      int int1 = (-1);
      int int2 = NumberUtils.min(int0, int1, int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test
  public void test036()  throws Throwable  {
      byte byte0 = (byte)11;
      byte byte1 = NumberUtils.max(byte0, byte0, byte0);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      assertEquals((byte)11, byte1);
      
      long[] longArray0 = new long[1];
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      long long1 = NumberUtils.min((long) byte1, (long) byte0, long0);
      assertTrue(byte1 == byte0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertTrue(byte0 == byte1);
      assertEquals(0L, long1);
      assertArrayEquals(new long[] {0L}, longArray0);
  }

  @Test
  public void test037()  throws Throwable  {
      byte byte0 = (byte)11;
      byte byte1 = NumberUtils.max(byte0, byte0, byte0);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      assertEquals((byte)11, byte1);
      
      int[] intArray0 = new int[13];
      long long0 = NumberUtils.min((long) byte1, (long) intArray0[3], (long) byte1);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      assertEquals(0L, long0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-9);
      byteArray0[0] = byte0;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) byteArray0[0];
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
      assertArrayEquals(new float[] {(-9.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test
  public void test039()  throws Throwable  {
      float[] floatArray0 = new float[18];
      float float0 = Float.NaN;
      floatArray0[2] = float0;
      float float1 = NumberUtils.max(floatArray0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, Float.NaN, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test
  public void test040()  throws Throwable  {
      float[] floatArray0 = null;
      // Undeclared exception!
      try {
        float float0 = NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test041()  throws Throwable  {
      float float0 = 385.433F;
      double[] doubleArray0 = new double[7];
      doubleArray0[5] = (double) float0;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(385.4330139160156, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 385.4330139160156, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = Double.NaN;
      doubleArray0[5] = double0;
      double double1 = NumberUtils.max(doubleArray0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, Double.NaN}, doubleArray0, 0.01);
  }

  @Test
  public void test043()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try {
        double double0 = NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-9);
      byteArray0[0] = byte0;
      byte byte1 = NumberUtils.max(byteArray0);
      assertFalse(byte1 == byte0);
      assertEquals((byte)0, byte1);
      assertArrayEquals(new byte[] {(byte) (-9), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test045()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try {
        byte byte0 = NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test046()  throws Throwable  {
      byte byte0 = (byte)48;
      short[] shortArray0 = new short[5];
      shortArray0[2] = (short) byte0;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)48, short0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)48, (short)0, (short)0}, shortArray0);
  }

  @Test
  public void test047()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 3182;
      intArray0[3] = int0;
      int int1 = NumberUtils.max(intArray0);
      assertTrue(int1 == int0);
      assertEquals(3182, int1);
      assertArrayEquals(new int[] {0, 0, 0, 3182, 0}, intArray0);
  }

  @Test
  public void test048()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test049()  throws Throwable  {
      byte byte0 = (byte)48;
      long[] longArray0 = new long[4];
      longArray0[2] = (long) byte0;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(48L, long0);
      assertArrayEquals(new long[] {0L, 0L, 48L, 0L}, longArray0);
  }

  @Test
  public void test050()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try {
        long long0 = NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test051()  throws Throwable  {
      float[] floatArray0 = new float[18];
      float float0 = (-1.0F);
      floatArray0[1] = float0;
      float float1 = NumberUtils.min(floatArray0);
      assertTrue(float1 == float0);
      assertEquals((-1.0F), float1, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test
  public void test052()  throws Throwable  {
      float[] floatArray0 = new float[18];
      float float0 = Float.NaN;
      floatArray0[2] = float0;
      float float1 = NumberUtils.min(floatArray0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, Float.NaN, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test
  public void test053()  throws Throwable  {
      byte byte0 = (byte) (-76);
      double[] doubleArray0 = new double[18];
      doubleArray0[3] = (double) byte0;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-76.0), double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-76.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      double double0 = Double.NaN;
      doubleArray0[5] = double0;
      double double1 = NumberUtils.min(doubleArray0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test055()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try {
        double double0 = NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte) (-56);
      byteArray0[6] = byte0;
      byte byte1 = NumberUtils.min(byteArray0);
      assertTrue(byte1 == byte0);
      assertEquals((byte) (-56), byte1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-56), (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test057()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try {
        byte byte0 = NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test058()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short short0 = (short) (-243);
      shortArray0[4] = short0;
      short short1 = NumberUtils.min(shortArray0);
      assertTrue(short1 == short0);
      assertEquals((short) (-243), short1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short) (-243), (short)0, (short)0}, shortArray0);
  }

  @Test
  public void test059()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test060()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = (-204);
      intArray0[1] = int0;
      int int1 = NumberUtils.min(intArray0);
      assertTrue(int1 == int0);
      assertEquals((-204), int1);
      assertArrayEquals(new int[] {0, (-204), 0, 0, 0}, intArray0);
  }

  @Test
  public void test061()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test062()  throws Throwable  {
      short short0 = (short)993;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) short0;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
      assertArrayEquals(new long[] {993L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test
  public void test063()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try {
        long long0 = NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test064()  throws Throwable  {
      String string0 = null;
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
      assertNull(bigDecimal0);
  }

  @Test
  public void test065()  throws Throwable  {
      String string0 = null;
      BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
      assertNull(bigInteger0);
  }

  @Test
  public void test066()  throws Throwable  {
      String string0 = null;
      Long long0 = NumberUtils.createLong(string0);
  }

  @Test
  public void test067()  throws Throwable  {
      String string0 = null;
      Integer integer0 = NumberUtils.createInteger(string0);
  }

  @Test
  public void test068()  throws Throwable  {
      String string0 = null;
      Double double0 = NumberUtils.createDouble(string0);
  }

  @Test
  public void test069()  throws Throwable  {
      String string0 = null;
      Float float0 = NumberUtils.createFloat(string0);
  }

  @Test
  public void test070()  throws Throwable  {
      String string0 = "t c0E";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // t c0E is not a valid number.
         //
      }
  }

  @Test
  public void test071()  throws Throwable  {
      String string0 = "xK8X5<7*6";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"xK8X5<7*6\"
         //
      }
  }

  @Test
  public void test072()  throws Throwable  {
      String string0 = "2l";
      Long long0 = (Long)NumberUtils.createNumber(string0);
      assertEquals(2L, (long)long0);
  }

  @Test
  public void test073()  throws Throwable  {
      String string0 = "0Ff";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0Ff is not a valid number.
         //
      }
  }

  @Test
  public void test074()  throws Throwable  {
      String string0 = "MIJ3y&RREiK0pLL";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // MIJ3y&RREiK0pLL is not a valid number.
         //
      }
  }

  @Test
  public void test075()  throws Throwable  {
      String string0 = "F";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // F is not a valid number.
         //
      }
  }

  @Test
  public void test076()  throws Throwable  {
      String string0 = "`rUg!9gqG,,,:s9f~D";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // `rUg!9gqG,,,:s9f~D is not a valid number.
         //
      }
  }

  @Test
  public void test077()  throws Throwable  {
      String string0 = "u=p*a*el9";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test078()  throws Throwable  {
      String string0 = "7y*aa6aneE";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 7y*aa6aneE is not a valid number.
         //
      }
  }

  @Test
  public void test079()  throws Throwable  {
      String string0 = "-px?%l";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -px?%l is not a valid number.
         //
      }
  }

  @Test
  public void test080()  throws Throwable  {
      String string0 = ".i*ZPC-g2E";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // .i*ZPC-g2E is not a valid number.
         //
      }
  }

  @Test
  public void test081()  throws Throwable  {
      String string0 = "I juA1qxE8zNV\\.";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // I juA1qxE8zNV\\. is not a valid number.
         //
      }
  }

  @Test
  public void test082()  throws Throwable  {
      String string0 = "3.";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals(3.0F, (float)float0, 0.01F);
  }

  @Test
  public void test083()  throws Throwable  {
      String string0 = ".%i*ZPC-ge2E";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // .%i*ZPC-ge2E is not a valid number.
         //
      }
  }

  @Test
  public void test084()  throws Throwable  {
      String string0 = "-0X";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
      }
  }

  @Test
  public void test085()  throws Throwable  {
      String string0 = "0X/XW*-$h.^";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"/XW*-$h.^\"
         //
      }
  }

  @Test
  public void test086()  throws Throwable  {
      String string0 = "-0x";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
      }
  }

  @Test
  public void test087()  throws Throwable  {
      String string0 = "0x?%l";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"?%l\"
         //
      }
  }

  @Test
  public void test088() {}
//   @Test
//   public void test088()  throws Throwable  {
//       String string0 = "---XC0x/XjW*-$h.^";
//       Number number0 = NumberUtils.createNumber(string0);
//       assertNull(number0);
//   }

  @Test
  public void test089()  throws Throwable  {
      String string0 = "";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test090()  throws Throwable  {
      String string0 = null;
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test091()  throws Throwable  {
      String string0 = "IllegalArgumentExce^tion odcurred";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // IllegalArgumentExce^tion odcurred is not a valid number.
         //
      }
  }

  @Test
  public void test092()  throws Throwable  {
      String string0 = null;
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
  }

  @Test
  public void test093()  throws Throwable  {
      String string0 = null;
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test094()  throws Throwable  {
      short short0 = (short)4000;
      String string0 = null;
      float float0 = NumberUtils.toFloat(string0, (float) short0);
      assertEquals(4000.0F, float0, 0.01F);
  }

  @Test
  public void test095()  throws Throwable  {
      byte byte0 = (byte) (-40);
      String string0 = null;
      long long0 = NumberUtils.toLong(string0, (long) byte0);
      assertEquals((-40L), long0);
  }

  @Test
  public void test096()  throws Throwable  {
      byte byte0 = (byte) (-60);
      String string0 = null;
      int int0 = NumberUtils.toInt(string0, (int) byte0);
      assertEquals((-60), int0);
  }

  @Test
  public void test097()  throws Throwable  {
      String string0 = "-0x";
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test098()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = 571;
      float float1 = NumberUtils.max(float0, float0, (float) int0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(571.0F, float1, 0.01F);
  }

  @Test
  public void test099()  throws Throwable  {
      String string0 = "-0x";
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
  }

  @Test
  public void test100()  throws Throwable  {
      String string0 = "u=p*a*el9";
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
  }

  @Test
  public void test101()  throws Throwable  {
      String string0 = "-0x";
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
      
      float float0 = NumberUtils.min((float) short0, (float) short0, (float) short0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test102()  throws Throwable  {
      short short0 = (short)4000;
      short short1 = NumberUtils.max(short0, short0, short0);
      assertTrue(short1 == short0);
      assertTrue(short0 == short1);
      assertEquals((short)4000, short1);
      
      double double0 = NumberUtils.min((double) short1, (double) short0, (double) short0);
      assertTrue(short1 == short0);
      assertTrue(short0 == short1);
      assertEquals(4000.0, double0, 0.01D);
  }

  @Test
  public void test103()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      assertNotNull(numberUtils0);
  }

  @Test
  public void test104()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short short0 = (short)0;
      double double0 = NumberUtils.max((double) short0, (double) shortArray0[5], (double) short0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test
  public void test105()  throws Throwable  {
      String string0 = "O>p/OXu]%MS0fVG3J";
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test106()  throws Throwable  {
      String string0 = "0xb";
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
  }
}
