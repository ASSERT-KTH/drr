/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:43:15 GMT 2014
 */

package org.apache.commons.lang3.math;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;




import org.junit.runner.RunWith;


public class NumberUtilsEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      String string0 = "Y";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test001()  throws Throwable  {
      String string0 = "l";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test002()  throws Throwable  {
      String string0 = "F";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test003()  throws Throwable  {
      String string0 = "f";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test004()  throws Throwable  {
      String string0 = "-0.";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test005()  throws Throwable  {
      String string0 = "E";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test006()  throws Throwable  {
      String string0 = "7L";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test007()  throws Throwable  {
      String string0 = "..";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test008()  throws Throwable  {
      String string0 = "--y>CK$.''Ga&nQ^";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test009()  throws Throwable  {
      String string0 = "+O5):X}6jVn&:,@";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test010()  throws Throwable  {
      String string0 = "eylg'5~be}{EDaks?<";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test011()  throws Throwable  {
      String string0 = "-0";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test012()  throws Throwable  {
      String string0 = "-0xfs;&2lx~V-0@\"u>SL";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test013()  throws Throwable  {
      String string0 = "-0x0X";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test014()  throws Throwable  {
      String string0 = "0x-0X`5";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test015()  throws Throwable  {
      String string0 = "-0xE<-Z>!C";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = "-0x";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test017()  throws Throwable  {
      String string0 = "-";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test018()  throws Throwable  {
      String string0 = "...";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test019()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test020()  throws Throwable  {
      String string0 = "-0.E]vZ>!C";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test021()  throws Throwable  {
      String string0 = "1";
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test022()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test023()  throws Throwable  {
      byte byte0 = (byte)120;
      byte byte1 = (byte) (-90);
      byte byte2 = NumberUtils.max(byte1, byte1, byte0);
      assertEquals((byte)120, byte2);
      assertTrue(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertFalse(byte2 == byte1);
      assertTrue(byte2 == byte0);
      assertFalse(byte1 == byte0);
      assertFalse(byte1 == byte2);
  }

  @Test
  public void test024()  throws Throwable  {
      byte byte0 = (byte)120;
      byte byte1 = (byte) (-90);
      byte byte2 = NumberUtils.max(byte1, byte0, byte0);
      assertEquals((byte)120, byte2);
      assertFalse(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertTrue(byte0 == byte2);
      assertFalse(byte2 == byte1);
      assertTrue(byte2 == byte0);
  }

  @Test
  public void test025()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = (short) (-3048);
      shortArray0[0] = short0;
      short short1 = (short) (-1116);
      short short2 = NumberUtils.max(shortArray0[0], shortArray0[0], short1);
      assertArrayEquals(new short[] {(short) (-3048)}, shortArray0);
      assertEquals((short) (-1116), short2);
      assertTrue(short2 == short1);
      assertFalse(short2 == short0);
      assertTrue(short1 == short2);
      assertFalse(short1 == short0);
  }

  @Test
  public void test026()  throws Throwable  {
      short short0 = (short)4;
      short short1 = (short)411;
      short short2 = NumberUtils.max(short0, short1, short1);
      assertEquals((short)411, short2);
      assertFalse(short1 == short0);
      assertTrue(short1 == short2);
      assertTrue(short2 == short1);
      assertFalse(short2 == short0);
      assertFalse(short0 == short1);
      assertFalse(short0 == short2);
  }

  @Test
  public void test027()  throws Throwable  {
      int int0 = (-2460);
      int int1 = 1242;
      int int2 = NumberUtils.max(int0, int0, int1);
      assertEquals(1242, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
  }

  @Test
  public void test028()  throws Throwable  {
      int int0 = (-2460);
      int int1 = (-4028);
      int int2 = NumberUtils.max(int1, int0, int0);
      assertEquals((-2460), int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
  }

  @Test
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = NumberUtils.max(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals((byte)0, byte0);
      
      int int0 = NumberUtils.max((int) byte0, (int) byte0, (int) byte0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0, int0);
  }

  @Test
  public void test030()  throws Throwable  {
      byte byte0 = (byte)120;
      byte byte1 = (byte) (-90);
      long long0 = NumberUtils.max((long) byte1, (long) byte1, (long) byte0);
      assertEquals(120L, long0);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
  }

  @Test
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = NumberUtils.max(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals((byte)0, byte0);
      
      long long0 = (-12L);
      long long1 = NumberUtils.max(long0, (long) byte0, long0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0L, long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test
  public void test032()  throws Throwable  {
      byte byte0 = (byte)100;
      byte byte1 = (byte) (-5);
      byte byte2 = NumberUtils.min(byte0, byte0, byte1);
      assertEquals((byte) (-5), byte2);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
  }

  @Test
  public void test033()  throws Throwable  {
      byte byte0 = (byte)100;
      byte byte1 = (byte)3;
      byte byte2 = NumberUtils.min(byte0, byte1, byte0);
      assertEquals((byte)3, byte2);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
  }

  @Test
  public void test034()  throws Throwable  {
      byte byte0 = (byte)100;
      String string0 = "";
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
      
      byte byte1 = (byte)3;
      short short1 = NumberUtils.min((short) byte0, (short) byte1, short0);
      assertEquals((short)0, short1);
      assertTrue(short0 == short1);
      assertFalse(byte1 == byte0);
      assertTrue(short1 == short0);
      assertFalse(byte0 == byte1);
  }

  @Test
  public void test035()  throws Throwable  {
      byte byte0 = (byte)100;
      String string0 = "";
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
      
      short short1 = NumberUtils.min(short0, (short) byte0, short0);
      assertEquals((short)0, short1);
      assertTrue(short1 == short0);
      assertTrue(short0 == short1);
  }

  @Test
  public void test036()  throws Throwable  {
      int int0 = 8192;
      int int1 = 0;
      int int2 = NumberUtils.min(int0, int0, int1);
      assertEquals(0, int2);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test
  public void test037()  throws Throwable  {
      int int0 = 8192;
      int int1 = 3015;
      int int2 = NumberUtils.min(int0, int1, int0);
      assertEquals(3015, int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test
  public void test038()  throws Throwable  {
      short short0 = (short)1803;
      String string0 = "";
      short short1 = NumberUtils.toShort(string0);
      assertEquals((short)0, short1);
      assertFalse(short1 == short0);
      
      long long0 = (-1L);
      long long1 = NumberUtils.min((long) short0, (long) short1, long0);
      assertEquals((-1L), long1);
      assertTrue(long0 == long1);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertTrue(long1 == long0);
  }

  @Test
  public void test039()  throws Throwable  {
      short short0 = (short)1803;
      String string0 = "";
      short short1 = NumberUtils.toShort(string0);
      assertEquals((short)0, short1);
      assertFalse(short1 == short0);
      
      long long0 = NumberUtils.min((long) short0, (long) short1, (long) short0);
      assertEquals(0L, long0);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
  }

  @Test
  public void test040()  throws Throwable  {
      byte byte0 = (byte)66;
      long long0 = NumberUtils.min((long) byte0, (long) byte0, (long) byte0);
      assertEquals(66L, long0);
  }

  @Test
  public void test041()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float float0 = 1.0F;
      floatArray0[1] = float0;
      float float1 = NumberUtils.max(floatArray0);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(1.0F, float1, 0.01F);
      assertTrue(float1 == float0);
  }

  @Test
  public void test042()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float float0 = Float.NaN;
      floatArray0[8] = float0;
      float float1 = NumberUtils.max(floatArray0);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, Float.NaN}, floatArray0, 0.01F);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
  }

  @Test
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = (-1.0);
      doubleArray0[0] = double0;
      double double1 = NumberUtils.max(doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
  }

  @Test
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = Double.NaN;
      doubleArray0[6] = double0;
      double double1 = NumberUtils.max(doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.NaN, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double0);
  }

  @Test
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byte byte0 = (byte) (-8);
      byteArray0[0] = byte0;
      byte byte1 = NumberUtils.max(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-8), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((byte)0, byte1);
      assertFalse(byte1 == byte0);
  }

  @Test
  public void test046()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try {
        byte byte0 = NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test047()  throws Throwable  {
      short short0 = (short)4;
      short short1 = NumberUtils.max(short0, short0, short0);
      assertEquals((short)4, short1);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
      
      short[] shortArray0 = new short[10];
      shortArray0[3] = short1;
      short short2 = NumberUtils.max(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)4, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals((short)4, short2);
      assertTrue(short2 == short1);
      assertTrue(short2 == short0);
  }

  @Test
  public void test048()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = 10;
      intArray0[3] = int0;
      int int1 = NumberUtils.max(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 10, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(10, int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test049()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test050()  throws Throwable  {
      byte byte0 = (byte)66;
      long[] longArray0 = new long[9];
      longArray0[6] = (long) byte0;
      long long0 = NumberUtils.max(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 66L, 0L, 0L}, longArray0);
      assertEquals(66L, long0);
  }

  @Test
  public void test051()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try {
        long long0 = NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test052()  throws Throwable  {
      int int0 = (-1);
      float[] floatArray0 = new float[12];
      floatArray0[3] = (float) int0;
      float float0 = NumberUtils.min(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-1.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test
  public void test053()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float float0 = Float.NaN;
      floatArray0[8] = float0;
      float float1 = NumberUtils.min(floatArray0);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, Float.NaN}, floatArray0, 0.01F);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
  }

  @Test
  public void test054()  throws Throwable  {
      float[] floatArray0 = null;
      // Undeclared exception!
      try {
        float float0 = NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = (-4.0813856085647835);
      doubleArray0[1] = double0;
      double double1 = NumberUtils.min(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-4.0813856085647835), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-4.0813856085647835), double1, 0.01D);
      assertTrue(double1 == double0);
  }

  @Test
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = Double.NaN;
      doubleArray0[3] = double0;
      double double1 = NumberUtils.min(doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.NaN}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double0);
  }

  @Test
  public void test057()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try {
        double double0 = NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-23);
      byteArray0[3] = byte0;
      byte byte1 = NumberUtils.min(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-23), (byte)0}, byteArray0);
      assertEquals((byte) (-23), byte1);
      assertTrue(byte1 == byte0);
  }

  @Test
  public void test059()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try {
        byte byte0 = NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test060()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short short0 = (short)4294;
      shortArray0[0] = short0;
      short short1 = NumberUtils.min(shortArray0);
      assertArrayEquals(new short[] {(short)4294, (short)0}, shortArray0);
      assertEquals((short)0, short1);
      assertFalse(short1 == short0);
  }

  @Test
  public void test061()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = NumberUtils.min(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals((short)0, short0);
  }

  @Test
  public void test062()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 230;
      intArray0[0] = int0;
      int int1 = NumberUtils.min(intArray0);
      assertArrayEquals(new int[] {230, 0}, intArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test063()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = NumberUtils.min(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(0, int0);
  }

  @Test
  public void test064()  throws Throwable  {
      long long0 = (-2867L);
      long[] longArray0 = new long[7];
      longArray0[2] = long0;
      long long1 = NumberUtils.min(longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-2867L), 0L, 0L, 0L, 0L}, longArray0);
      assertEquals((-2867L), long1);
      assertTrue(long1 == long0);
  }

  @Test
  public void test065()  throws Throwable  {
      String string0 = null;
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
      assertNull(bigDecimal0);
  }

  @Test
  public void test066()  throws Throwable  {
      String string0 = null;
      BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
      assertNull(bigInteger0);
  }

  @Test
  public void test067()  throws Throwable  {
      String string0 = null;
      Long long0 = NumberUtils.createLong(string0);
  }

  @Test
  public void test068()  throws Throwable  {
      String string0 = null;
      Integer integer0 = NumberUtils.createInteger(string0);
  }

  @Test
  public void test069()  throws Throwable  {
      String string0 = null;
      Double double0 = NumberUtils.createDouble(string0);
  }

  @Test
  public void test070()  throws Throwable  {
      String string0 = null;
      Float float0 = NumberUtils.createFloat(string0);
  }

  @Test
  public void test071()  throws Throwable  {
      String string0 = "Eg}jZ$YoC$c[bA";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Eg}jZ$YoC$c[bA is not a valid number.
         //
      }
  }

  @Test
  public void test072()  throws Throwable  {
      String string0 = "0.";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test
  public void test073()  throws Throwable  {
      String string0 = "Z_[Ek,'@|da=rn2";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test074()  throws Throwable  {
      String string0 = "The Array must not be null";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The Array must not be null is not a valid number.
         //
      }
  }

  @Test
  public void test075()  throws Throwable  {
      String string0 = "f";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // f is not a valid number.
         //
      }
  }

  @Test
  public void test076()  throws Throwable  {
      String string0 = "fU;&2lx~C-0@\"u>L";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // fU;&2lx~C-0@\"u>L is not a valid number.
         //
      }
  }

  @Test
  public void test077()  throws Throwable  {
      String string0 = "kbZ* s6MDMQ[F";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // kbZ* s6MDMQ[F is not a valid number.
         //
      }
  }

  @Test
  public void test078()  throws Throwable  {
      String string0 = "-0.";
      BigDecimal bigDecimal0 = (BigDecimal)NumberUtils.createNumber(string0);
      assertEquals(0, bigDecimal0.shortValue());
      assertEquals(0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
  }

  @Test
  public void test079()  throws Throwable  {
      String string0 = "Mi$imEm abbriatio wdth with offset s 7";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Mi\"
         //
      }
  }

  @Test
  public void test080()  throws Throwable  {
      String string0 = "HFPgET(W0K/lben";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // HFPgET(W0K/lben is not a valid number.
         //
      }
  }

  @Test
  public void test081()  throws Throwable  {
      String string0 = "InvocationTargetException occurred";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // InvocationTargetException occurred is not a valid number.
         //
      }
  }

  @Test
  public void test082()  throws Throwable  {
      String string0 = "ftm.e";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ftm.e is not a valid number.
         //
      }
  }

  @Test
  public void test083()  throws Throwable  {
      String string0 = "$Fc2og[).DiQd)}l";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // $Fc2og[).DiQd)}l is not a valid number.
         //
      }
  }

  @Test
  public void test084()  throws Throwable  {
      String string0 = "-0D";
      BigDecimal bigDecimal0 = (BigDecimal)NumberUtils.createNumber(string0);
      assertEquals(0, bigDecimal0.byteValue());
      assertEquals(0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
  }

  @Test
  public void test085()  throws Throwable  {
      String string0 = "-0X5";
      Integer integer0 = (Integer)NumberUtils.createNumber(string0);
      assertEquals((-5), (int)integer0);
  }

  @Test
  public void test086()  throws Throwable  {
      String string0 = "0X";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
      }
  }

  @Test
  public void test087()  throws Throwable  {
      String string0 = " is not a valid number.";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         //  is not a valid number. is not a valid number.
         //
      }
  }

  @Test
  public void test088()  throws Throwable  {
      String string0 = "0x";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
      }
  }

  @Test
  public void test089() {}
//   @Test
//   public void test089()  throws Throwable  {
//       String string0 = "--{B1O$PgH";
//       Number number0 = NumberUtils.createNumber(string0);
//       assertNull(number0);
//   }

  @Test
  public void test090()  throws Throwable  {
      String string0 = "";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test091()  throws Throwable  {
      String string0 = null;
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test092()  throws Throwable  {
      String string0 = "-0x";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
      }
  }

  @Test
  public void test093()  throws Throwable  {
      String string0 = null;
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
  }

  @Test
  public void test094()  throws Throwable  {
      String string0 = null;
      byte byte0 = (byte)2;
      byte byte1 = NumberUtils.toByte(string0, byte0);
      assertEquals((byte)2, byte1);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
  }

  @Test
  public void test095()  throws Throwable  {
      byte byte0 = (byte)120;
      String string0 = "..";
      double double0 = NumberUtils.toDouble(string0, (double) byte0);
      assertEquals(120.0, double0, 0.01D);
  }

  @Test
  public void test096()  throws Throwable  {
      String string0 = null;
      byte byte0 = (byte)2;
      float float0 = NumberUtils.toFloat(string0, (float) byte0);
      assertEquals(2.0F, float0, 0.01F);
  }

  @Test
  public void test097()  throws Throwable  {
      String string0 = null;
      long long0 = (-2867L);
      long long1 = NumberUtils.toLong(string0, long0);
      assertEquals((-2867L), long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
  }

  @Test
  public void test098()  throws Throwable  {
      byte byte0 = (byte)52;
      String string0 = null;
      int int0 = NumberUtils.toInt(string0, (int) byte0);
      assertEquals(52, int0);
  }

  @Test
  public void test099()  throws Throwable  {
      String string0 = null;
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test100()  throws Throwable  {
      String string0 = "E";
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
  }

  @Test
  public void test101()  throws Throwable  {
      String string0 = "-0x";
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
  }

  @Test
  public void test102()  throws Throwable  {
      short short0 = (short)4294;
      float float0 = NumberUtils.min((float) short0, (float) short0, (float) short0);
      assertEquals(4294.0F, float0, 0.01F);
  }

  @Test
  public void test103()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 230;
      float float0 = NumberUtils.max((float) int0, (float) int0, (float) int0);
      assertEquals(230.0F, float0, 0.01F);
      
      double double0 = NumberUtils.min((double) float0, (double) intArray0[0], (double) int0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test104()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      assertNotNull(numberUtils0);
  }

  @Test
  public void test105()  throws Throwable  {
      float float0 = 1.0F;
      byte[] byteArray0 = new byte[1];
      byte byte0 = NumberUtils.max(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals((byte)0, byte0);
      
      double double0 = NumberUtils.max((double) float0, (double) float0, (double) byte0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test106()  throws Throwable  {
      String string0 = "7L";
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test107()  throws Throwable  {
      String string0 = "-0.E]vZ>!C";
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
  }
}
