/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:53:50 GMT 2014
 */

package org.apache.commons.lang3.math;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;




import org.junit.runner.RunWith;


public class NumberUtilsEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      String string0 = "L";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test001()  throws Throwable  {
      String string0 = "l";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test002()  throws Throwable  {
      String string0 = "f";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test003()  throws Throwable  {
      String string0 = "C";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test004()  throws Throwable  {
      String string0 = "..";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test005()  throws Throwable  {
      String string0 = "5E";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test006()  throws Throwable  {
      String string0 = "8";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test007()  throws Throwable  {
      String string0 = ".";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test008()  throws Throwable  {
      String string0 = "pFs/>R'Z:YG/c*";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test009()  throws Throwable  {
      String string0 = "--InocationTaretException occurred";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test010()  throws Throwable  {
      String string0 = "eFp!ROm)L";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test011()  throws Throwable  {
      String string0 = "...";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test012()  throws Throwable  {
      String string0 = "5EQ";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test013()  throws Throwable  {
      String string0 = "0x0xy]{HXK)EeY #1";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test014()  throws Throwable  {
      String string0 = "-0x#Jh3k/Pp]V9A";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test015()  throws Throwable  {
      String string0 = "-0xf";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = "-0x";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test017()  throws Throwable  {
      String string0 = "0d";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test018()  throws Throwable  {
      String string0 = "-0xE<L";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test019()  throws Throwable  {
      String string0 = "-";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test020()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test021()  throws Throwable  {
      String string0 = "+nJor";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test022()  throws Throwable  {
      String string0 = "8";
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test023()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test024()  throws Throwable  {
      byte byte0 = (byte) (-11);
      byte byte1 = (byte)58;
      byte byte2 = NumberUtils.max(byte0, byte0, byte1);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertEquals((byte)58, byte2);
  }

  @Test
  public void test025()  throws Throwable  {
      byte byte0 = (byte) (-11);
      byte byte1 = (byte)58;
      byte byte2 = NumberUtils.max(byte0, byte1, byte1);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertEquals((byte)58, byte2);
  }

  @Test
  public void test026()  throws Throwable  {
      String string0 = "C";
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
      
      short short0 = (short) (-1285);
      short short1 = NumberUtils.min((short) byte0, short0, short0);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
      assertEquals((short) (-1285), short1);
      
      short short2 = NumberUtils.max(short0, short1, (short) byte0);
      assertTrue(short0 == short1);
      assertFalse(short0 == short2);
      assertTrue(short1 == short0);
      assertFalse(short1 == short2);
      assertFalse(short2 == short1);
      assertFalse(short2 == short0);
      assertEquals((short)0, short2);
  }

  @Test
  public void test027()  throws Throwable  {
      short short0 = (short)76;
      short short1 = (short)1497;
      short short2 = NumberUtils.max(short0, short1, short1);
      assertFalse(short2 == short0);
      assertTrue(short2 == short1);
      assertFalse(short0 == short2);
      assertFalse(short0 == short1);
      assertTrue(short1 == short2);
      assertFalse(short1 == short0);
      assertEquals((short)1497, short2);
  }

  @Test
  public void test028()  throws Throwable  {
      String string0 = null;
      byte byte0 = (byte)112;
      byte byte1 = NumberUtils.toByte(string0, byte0);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      assertEquals((byte)112, byte1);
      
      int int0 = 2516;
      int int1 = NumberUtils.max((int) byte1, (int) byte1, int0);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(2516, int1);
  }

  @Test
  public void test029()  throws Throwable  {
      String string0 = "mjo-@-[MMl08";
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
      
      byte byte0 = (byte)64;
      int int0 = NumberUtils.max((int) short0, (int) byte0, (int) byte0);
      assertEquals(64, int0);
  }

  @Test
  public void test030()  throws Throwable  {
      short short0 = (short)76;
      long long0 = 0L;
      long long1 = 14L;
      long long2 = NumberUtils.max(long0, long1, (long) short0);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertEquals(76L, long2);
  }

  @Test
  public void test031()  throws Throwable  {
      short short0 = (short)76;
      long long0 = 0L;
      long long1 = NumberUtils.max(long0, (long) short0, (long) short0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(76L, long1);
  }

  @Test
  public void test032()  throws Throwable  {
      long long0 = (-37L);
      long long1 = NumberUtils.max(long0, long0, long0);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals((-37L), long1);
  }

  @Test
  public void test033()  throws Throwable  {
      byte byte0 = (byte)21;
      byte byte1 = (byte)0;
      byte byte2 = NumberUtils.min(byte0, byte0, byte1);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertEquals((byte)0, byte2);
  }

  @Test
  public void test034()  throws Throwable  {
      byte byte0 = (byte)65;
      byte byte1 = (byte)0;
      byte byte2 = NumberUtils.min(byte0, byte1, byte0);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertEquals((byte)0, byte2);
  }

  @Test
  public void test035()  throws Throwable  {
      short short0 = (short)0;
      short short1 = (short) (-1);
      short short2 = NumberUtils.min(short0, short0, short1);
      assertFalse(short0 == short1);
      assertFalse(short0 == short2);
      assertFalse(short2 == short0);
      assertTrue(short2 == short1);
      assertTrue(short1 == short2);
      assertFalse(short1 == short0);
      assertEquals((short) (-1), short2);
  }

  @Test
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      int int0 = 1409;
      int int1 = 101;
      int int2 = NumberUtils.min(int0, int1, (int) byteArray0[0]);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
  }

  @Test
  public void test037()  throws Throwable  {
      byte byte0 = (byte) (-11);
      int int0 = NumberUtils.min((int) byte0, (int) byte0, (int) byte0);
      assertEquals((-11), int0);
  }

  @Test
  public void test038()  throws Throwable  {
      short short0 = (short)43;
      short short1 = (short)0;
      long long0 = NumberUtils.min((long) short0, (long) short0, (long) short1);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertEquals(0L, long0);
  }

  @Test
  public void test039()  throws Throwable  {
      short short0 = (short)76;
      short short1 = (short)1497;
      long long0 = NumberUtils.min((long) short1, (long) short0, (long) short1);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      assertEquals(76L, long0);
  }

  @Test
  public void test040()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float float0 = 782.73F;
      floatArray0[4] = float0;
      float float1 = NumberUtils.max(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 782.73F}, floatArray0, 0.01F);
      assertTrue(float1 == float0);
      assertEquals(782.73F, float1, 0.01F);
  }

  @Test
  public void test041()  throws Throwable  {
      float[] floatArray0 = new float[10];
      float float0 = Float.NaN;
      floatArray0[4] = float0;
      float float1 = NumberUtils.max(floatArray0);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, Float.NaN, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test
  public void test042()  throws Throwable  {
      float[] floatArray0 = null;
      // Undeclared exception!
      try {
        float float0 = NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test043()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float float0 = 782.73F;
      floatArray0[4] = float0;
      double[] doubleArray0 = new double[10];
      doubleArray0[8] = (double) floatArray0[4];
      double double0 = NumberUtils.max(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 782.72998046875, 0.0}, doubleArray0, 0.01);
      assertEquals(782.72998046875, double0, 0.01D);
  }

  @Test
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = Double.NaN;
      doubleArray0[4] = double0;
      double double1 = NumberUtils.max(doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte)115;
      byteArray0[5] = byte0;
      byte byte1 = NumberUtils.max(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)115, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(byte1 == byte0);
      assertEquals((byte)115, byte1);
  }

  @Test
  public void test046()  throws Throwable  {
      short short0 = (short)76;
      short[] shortArray0 = new short[8];
      shortArray0[1] = short0;
      short short1 = NumberUtils.max(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)76, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertTrue(short1 == short0);
      assertEquals((short)76, short1);
  }

  @Test
  public void test047()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test048()  throws Throwable  {
      int[] intArray0 = new int[16];
      short short0 = (short)43;
      intArray0[4] = (int) short0;
      int int0 = NumberUtils.max(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(43, int0);
  }

  @Test
  public void test049()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test050()  throws Throwable  {
      long[] longArray0 = new long[9];
      long long0 = 3939L;
      longArray0[4] = long0;
      long long1 = NumberUtils.max(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 3939L, 0L, 0L, 0L, 0L}, longArray0);
      assertTrue(long1 == long0);
      assertEquals(3939L, long1);
  }

  @Test
  public void test051()  throws Throwable  {
      float[] floatArray0 = new float[8];
      float float0 = (-1006.6656F);
      floatArray0[5] = float0;
      float float1 = NumberUtils.min(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-1006.6656F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(float1 == float0);
      assertEquals((-1006.6656F), float1, 0.01F);
  }

  @Test
  public void test052()  throws Throwable  {
      float[] floatArray0 = new float[8];
      float float0 = Float.NaN;
      floatArray0[6] = float0;
      float float1 = NumberUtils.min(floatArray0);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, Float.NaN, 0.0F}, floatArray0, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = (-0.15986854058009298);
      doubleArray0[6] = double0;
      double double1 = NumberUtils.min(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-0.15986854058009298), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(double1 == double0);
      assertEquals((-0.15986854058009298), double1, 0.01D);
  }

  @Test
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = Double.NaN;
      doubleArray0[3] = double0;
      double double1 = NumberUtils.min(doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test055()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try {
        double double0 = NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte) (-112);
      byteArray0[8] = byte0;
      byte byte1 = NumberUtils.min(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-112), (byte)0}, byteArray0);
      assertTrue(byte1 == byte0);
      assertEquals((byte) (-112), byte1);
  }

  @Test
  public void test057()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try {
        byte byte0 = NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)95;
      byteArray0[0] = byte0;
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) byteArray0[0];
      short short0 = NumberUtils.min(shortArray0);
      assertArrayEquals(new short[] {(short)95, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals((short)0, short0);
  }

  @Test
  public void test059()  throws Throwable  {
      int[] intArray0 = new int[14];
      int int0 = 16;
      intArray0[0] = int0;
      int int1 = NumberUtils.min(intArray0);
      assertArrayEquals(new int[] {16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test
  public void test060()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test061()  throws Throwable  {
      long[] longArray0 = new long[9];
      long long0 = 281L;
      longArray0[0] = long0;
      long long1 = NumberUtils.min(longArray0);
      assertArrayEquals(new long[] {281L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
  }

  @Test
  public void test062()  throws Throwable  {
      String string0 = "f";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // f is not a valid number.
         //
      }
  }

  @Test
  public void test063()  throws Throwable  {
      String string0 = null;
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
      assertNull(bigDecimal0);
  }

  @Test
  public void test064()  throws Throwable  {
      String string0 = null;
      BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
      assertNull(bigInteger0);
  }

  @Test
  public void test065()  throws Throwable  {
      String string0 = null;
      Long long0 = NumberUtils.createLong(string0);
  }

  @Test
  public void test066()  throws Throwable  {
      String string0 = null;
      Integer integer0 = NumberUtils.createInteger(string0);
  }

  @Test
  public void test067()  throws Throwable  {
      String string0 = null;
      Double double0 = NumberUtils.createDouble(string0);
  }

  @Test
  public void test068()  throws Throwable  {
      String string0 = null;
      Float float0 = NumberUtils.createFloat(string0);
  }

  @Test
  public void test069()  throws Throwable  {
      String string0 = "ce^XM Z7evNeJSXE0";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ce^XM Z7\"
         //
      }
  }

  @Test
  public void test070()  throws Throwable  {
      String string0 = "70f";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals(70.0F, (float)float0, 0.01F);
  }

  @Test
  public void test071()  throws Throwable  {
      String string0 = "-0f";
      BigDecimal bigDecimal0 = (BigDecimal)NumberUtils.createNumber(string0);
      assertNotNull(bigDecimal0);
      assertEquals(0, bigDecimal0.shortValue());
      assertEquals(0, bigDecimal0.byteValue());
  }

  @Test
  public void test072()  throws Throwable  {
      String string0 = "InvocationTargetException occurred";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // InvocationTargetException occurred is not a valid number.
         //
      }
  }

  @Test
  public void test073()  throws Throwable  {
      String string0 = "ZcofpcEV}zF";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ZcofpcEV}zF is not a valid number.
         //
      }
  }

  @Test
  public void test074()  throws Throwable  {
      String string0 = "-'4J8v'/I9)ft)D";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -'4J8v'/I9)ft)D is not a valid number.
         //
      }
  }

  @Test
  public void test075()  throws Throwable  {
      String string0 = "iD_\\3E";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // iD_\\3E is not a valid number.
         //
      }
  }

  @Test
  public void test076()  throws Throwable  {
      String string0 = "Minim5m abbreviation width with offset-is 7";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test077()  throws Throwable  {
      String string0 = "y]{HXK)EeY #1";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // y]{HXK)EeY #1 is not a valid number.
         //
      }
  }

  @Test
  public void test078()  throws Throwable  {
      String string0 = "E<L";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // E<L is not a valid number.
         //
      }
  }

  @Test
  public void test079()  throws Throwable  {
      String string0 = "org.a|chP.commonsEang3.maxh.umberutil";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // org.a|chP.commonsEang3.maxh.umberutil is not a valid number.
         //
      }
  }

  @Test
  public void test080()  throws Throwable  {
      String string0 = ":Eds`#k$c(Y. 3*{(H";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // :Eds`#k$c(Y. 3*{(H is not a valid number.
         //
      }
  }

  @Test
  public void test081()  throws Throwable  {
      String string0 = "0..";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test082()  throws Throwable  {
      String string0 = "orb.apache.commons.lang3.math.NumberUtils";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // orb.apache.commons.lang3.math.NumberUtils is not a valid number.
         //
      }
  }

  @Test
  public void test083()  throws Throwable  {
      String string0 = "-0Xy]{HXK)EeY #1";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-y]{HXK)EeY #1\"
         //
      }
  }

  @Test
  public void test084()  throws Throwable  {
      String string0 = "0X";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
      }
  }

  @Test
  public void test085()  throws Throwable  {
      String string0 = "-0xce^XM Z7ev?NXE0S";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-ce^XM Z7ev?NXE0S\"
         //
      }
  }

  @Test
  public void test086()  throws Throwable  {
      String string0 = "0xce^XM Z7vNX0S";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ce^XM Z7vNX0S\"
         //
      }
  }

  @Test
  public void test087()  throws Throwable  {
      String string0 = "--InocationTaretException occurred";
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test088()  throws Throwable  {
      String string0 = "*O?~Nl";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // *O?~Nl is not a valid number.
         //
      }
  }

  @Test
  public void test089()  throws Throwable  {
      String string0 = null;
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test090()  throws Throwable  {
      String string0 = "";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test091()  throws Throwable  {
      String string0 = null;
      byte byte0 = (byte) (-118);
      short short0 = NumberUtils.toShort(string0, (short) byte0);
      assertEquals((short) (-118), short0);
  }

  @Test
  public void test092()  throws Throwable  {
      String string0 = "-0xf";
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test093()  throws Throwable  {
      String string0 = null;
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test094()  throws Throwable  {
      String string0 = "C";
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
      
      long long0 = NumberUtils.toLong(string0, (long) byte0);
      assertEquals(0L, long0);
  }

  @Test
  public void test095()  throws Throwable  {
      String string0 = "mjo-@-[MMl08";
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
      
      String string1 = null;
      int int0 = NumberUtils.toInt(string1, (int) short0);
      assertEquals(0, int0);
  }

  @Test
  public void test096()  throws Throwable  {
      String string0 = null;
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test097()  throws Throwable  {
      int[] intArray0 = new int[5];
      float float0 = NumberUtils.max((float) intArray0[2], (float) intArray0[1], (float) intArray0[3]);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test098()  throws Throwable  {
      String string0 = null;
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
  }

  @Test
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      float float0 = NumberUtils.min((float) byteArray0[0], (float) byteArray0[0], (float) byte0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test100()  throws Throwable  {
      double double0 = 0.0;
      double double1 = NumberUtils.min(double0, double0, double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test101()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      assertNotNull(numberUtils0);
  }

  @Test
  public void test102()  throws Throwable  {
      long[] longArray0 = new long[1];
      long long0 = NumberUtils.max(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(0L, long0);
      
      double double0 = NumberUtils.max((double) longArray0[0], (double) long0, (double) long0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test103()  throws Throwable  {
      String string0 = "mjo-@-[MMl08";
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test104()  throws Throwable  {
      String string0 = "+nJor";
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
  }
}
