/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:04:01 GMT 2014
 */

package org.apache.commons.lang.math;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang.math.NumberUtils;




import org.junit.runner.RunWith;


public class NumberUtilsEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      String string0 = "9F";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test001()  throws Throwable  {
      String string0 = "1D";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test002()  throws Throwable  {
      String string0 = "7d";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test003()  throws Throwable  {
      String string0 = "--";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test004()  throws Throwable  {
      String string0 = "--U:X}";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test005()  throws Throwable  {
      String string0 = "4eNRbr0k~TCPwsXE";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test006()  throws Throwable  {
      String string0 = "...";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test007()  throws Throwable  {
      String string0 = ".7";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test008()  throws Throwable  {
      String string0 = "E~iZ+we`&S3";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test009()  throws Throwable  {
      String string0 = "+D_|m{?e[YWQg1:\",e";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test010()  throws Throwable  {
      String string0 = "-0xCannot pad a negative amount: ";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test011()  throws Throwable  {
      String string0 = "0x#TR_`JY)NumY9sV j";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test012()  throws Throwable  {
      String string0 = "0x";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test013()  throws Throwable  {
      String string0 = "0x9f";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test014()  throws Throwable  {
      String string0 = "09f";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test015()  throws Throwable  {
      String string0 = "-";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test017()  throws Throwable  {
      String string0 = "29L";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test018()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test019()  throws Throwable  {
      float float0 = (-594.948F);
      float float1 = 0.0F;
      int int0 = NumberUtils.compare(float0, float1);
      assertEquals((-1), int0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test020()  throws Throwable  {
      int int0 = 38;
      short short0 = (short)101;
      short short1 = NumberUtils.max(short0, short0, short0);
      assertEquals((short)101, short1);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
      
      int int1 = NumberUtils.compare((double) int0, (double) short1);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
  }

  @Test
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte byte1 = (byte)101;
      assertFalse(byte1 == byte0);
      
      byte byte2 = NumberUtils.max(byte0, byte0, byte1);
      assertEquals((byte)101, byte2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
  }

  @Test
  public void test022()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = (byte)30;
      byte byte2 = NumberUtils.max(byte0, byte1, byte1);
      assertEquals((byte)30, byte2);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
  }

  @Test
  public void test023()  throws Throwable  {
      short short0 = (short) (-83);
      short short1 = (short)365;
      short short2 = NumberUtils.max(short0, short0, short1);
      assertEquals((short)365, short2);
      assertFalse(short1 == short0);
      assertTrue(short1 == short2);
      assertFalse(short2 == short0);
      assertTrue(short2 == short1);
      assertFalse(short0 == short2);
      assertFalse(short0 == short1);
  }

  @Test
  public void test024()  throws Throwable  {
      byte byte0 = (byte) (-21);
      byte byte1 = (byte)0;
      short short0 = NumberUtils.max((short) byte0, (short) byte1, (short) byte0);
      assertEquals((short)0, short0);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
  }

  @Test
  public void test025()  throws Throwable  {
      int int0 = (-1882);
      int int1 = 1112;
      int int2 = NumberUtils.max(int0, int0, int1);
      assertEquals(1112, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
  }

  @Test
  public void test026()  throws Throwable  {
      byte byte0 = (byte) (-67);
      int int0 = 0;
      int int1 = NumberUtils.max((int) byte0, int0, (int) byte0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test027()  throws Throwable  {
      int int0 = (-1948);
      byte byte0 = (byte)69;
      long long0 = NumberUtils.max((long) int0, (long) int0, (long) byte0);
      assertEquals(69L, long0);
  }

  @Test
  public void test028()  throws Throwable  {
      byte byte0 = (byte)101;
      long long0 = (-879L);
      long long1 = NumberUtils.max(long0, (long) byte0, (long) byte0);
      assertEquals(101L, long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
  }

  @Test
  public void test029()  throws Throwable  {
      String string0 = "...";
      int int0 = NumberUtils.stringToInt(string0);
      assertEquals(0, int0);
      
      long long0 = NumberUtils.max((long) int0, (long) int0, (long) int0);
      assertEquals(0L, long0);
  }

  @Test
  public void test030()  throws Throwable  {
      byte byte0 = (byte) (-1);
      byte byte1 = (byte) (-76);
      byte byte2 = NumberUtils.min(byte0, byte0, byte1);
      assertEquals((byte) (-76), byte2);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
  }

  @Test
  public void test031()  throws Throwable  {
      byte byte0 = (byte)76;
      byte byte1 = (byte) (-67);
      byte byte2 = NumberUtils.min(byte0, byte1, byte0);
      assertEquals((byte) (-67), byte2);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
  }

  @Test
  public void test032()  throws Throwable  {
      byte byte0 = (byte)55;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = byte0;
      short short0 = NumberUtils.min((short) byteArray0[0], (short) byteArray0[0], (short) byteArray0[4]);
      assertEquals((short)0, short0);
      assertArrayEquals(new byte[] {(byte)55, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test033()  throws Throwable  {
      short short0 = (short)1595;
      short short1 = (short)0;
      short short2 = NumberUtils.min(short0, short1, short0);
      assertEquals((short)0, short2);
      assertFalse(short0 == short1);
      assertFalse(short0 == short2);
      assertTrue(short2 == short1);
      assertFalse(short2 == short0);
      assertFalse(short1 == short0);
      assertTrue(short1 == short2);
  }

  @Test
  public void test034()  throws Throwable  {
      int int0 = 1810;
      int int1 = (-1121);
      int int2 = NumberUtils.min(int0, int0, int1);
      assertEquals((-1121), int2);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
  }

  @Test
  public void test035()  throws Throwable  {
      int int0 = (-2718);
      int int1 = 76;
      int int2 = NumberUtils.min(int0, int1, int1);
      assertEquals((-2718), int2);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      
      int int3 = NumberUtils.min(int1, int2, int2);
      assertEquals((-2718), int3);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(int0 == int3);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int2 == int3);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
  }

  @Test
  public void test036()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      long long0 = (-2393L);
      long long1 = NumberUtils.min((long) int0, (long) int0, long0);
      assertEquals((-2393L), long1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
  }

  @Test
  public void test037()  throws Throwable  {
      byte byte0 = (byte)0;
      long long0 = 4244L;
      long long1 = NumberUtils.min(long0, (long) byte0, long0);
      assertEquals(0L, long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
  }

  @Test
  public void test038()  throws Throwable  {
      float[] floatArray0 = new float[17];
      float float0 = 1233.0F;
      floatArray0[1] = float0;
      float float1 = NumberUtils.max(floatArray0);
      assertEquals(1233.0F, float1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1233.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(float1 == float0);
  }

  @Test
  public void test039()  throws Throwable  {
      float[] floatArray0 = null;
      // Undeclared exception!
      try {
        float float0 = NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = (-1382.0642494);
      doubleArray0[0] = double0;
      double double1 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double1, 0.01D);
      assertArrayEquals(new double[] {(-1382.0642494), 0.0}, doubleArray0, 0.01);
      assertFalse(double1 == double0);
  }

  @Test
  public void test041()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try {
        double double0 = NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte)70;
      byteArray0[2] = byte0;
      byte byte1 = NumberUtils.max(byteArray0);
      assertEquals((byte)70, byte1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)70, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(byte1 == byte0);
  }

  @Test
  public void test044()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try {
        byte byte0 = NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test045()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short short0 = (short)801;
      shortArray0[1] = short0;
      short short1 = NumberUtils.max(shortArray0);
      assertEquals((short)801, short1);
      assertArrayEquals(new short[] {(short)0, (short)801, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertTrue(short1 == short0);
  }

  @Test
  public void test046()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test047()  throws Throwable  {
      int int0 = 43;
      int[] intArray0 = new int[7];
      intArray0[1] = int0;
      int int1 = NumberUtils.max(intArray0);
      assertEquals(43, int1);
      assertArrayEquals(new int[] {0, 43, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(int1 == int0);
  }

  @Test
  public void test048()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test049()  throws Throwable  {
      long[] longArray0 = new long[2];
      long long0 = (-1L);
      longArray0[0] = long0;
      long long1 = NumberUtils.max(longArray0);
      assertEquals(0L, long1);
      assertArrayEquals(new long[] {(-1L), 0L}, longArray0);
      assertFalse(long1 == long0);
  }

  @Test
  public void test050()  throws Throwable  {
      long[] longArray0 = new long[4];
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
  }

  @Test
  public void test051()  throws Throwable  {
      float float0 = (-725.0F);
      float[] floatArray0 = new float[8];
      floatArray0[1] = float0;
      float float1 = NumberUtils.min(floatArray0);
      assertEquals((-725.0F), float1, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-725.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(float1 == float0);
  }

  @Test
  public void test052()  throws Throwable  {
      float[] floatArray0 = null;
      // Undeclared exception!
      try {
        float float0 = NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test053()  throws Throwable  {
      byte byte0 = (byte)100;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) byte0;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {100.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)127;
      byteArray0[0] = byte0;
      byte byte1 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte1);
      assertArrayEquals(new byte[] {(byte)127, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byte1 == byte0);
  }

  @Test
  public void test055()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try {
        byte byte0 = NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test056()  throws Throwable  {
      short[] shortArray0 = new short[8];
      short short0 = (short) (-3206);
      shortArray0[3] = short0;
      short short1 = NumberUtils.min(shortArray0);
      assertEquals((short) (-3206), short1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short) (-3206), (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertTrue(short1 == short0);
  }

  @Test
  public void test057()  throws Throwable  {
      short short0 = (short)3495;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) short0;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {3495, 0, 0}, intArray0);
  }

  @Test
  public void test058()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)127;
      byteArray0[0] = byte0;
      byteArray0[3] = byteArray0[0];
      long[] longArray0 = new long[3];
      longArray0[0] = (long) byteArray0[3];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
      assertArrayEquals(new long[] {127L, 0L, 0L}, longArray0);
  }

  @Test
  public void test060()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try {
        long long0 = NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test061()  throws Throwable  {
      int int0 = 101;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) int0;
      double[] doubleArray1 = new double[3];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = NumberUtils.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {101.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[7];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = NumberUtils.equals(doubleArray0, doubleArray1);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[6];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = NumberUtils.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = null;
      boolean boolean0 = NumberUtils.equals(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      boolean boolean0 = NumberUtils.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = null;
      boolean boolean0 = NumberUtils.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test067()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float float0 = 0.0F;
      floatArray0[0] = float0;
      float float1 = (-1316.43F);
      float[] floatArray1 = new float[9];
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray0[0] = float1;
      boolean boolean0 = NumberUtils.equals(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1316.43F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
  }

  @Test
  public void test068()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float[] floatArray1 = new float[7];
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = NumberUtils.equals(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
  }

  @Test
  public void test069()  throws Throwable  {
      float[] floatArray0 = new float[6];
      boolean boolean0 = NumberUtils.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test
  public void test070()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float[] floatArray1 = new float[9];
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = NumberUtils.equals(floatArray1, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test
  public void test071()  throws Throwable  {
      long[] longArray0 = new long[9];
      long long0 = (-1L);
      longArray0[0] = long0;
      long[] longArray1 = new long[9];
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean0 = NumberUtils.equals(longArray0, longArray1);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
  }

  @Test
  public void test072()  throws Throwable  {
      long[] longArray0 = new long[2];
      long[] longArray1 = new long[7];
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean0 = NumberUtils.equals(longArray0, longArray1);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test
  public void test073()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = null;
      boolean boolean0 = NumberUtils.equals(longArray1, longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {0L}, longArray0);
  }

  @Test
  public void test074()  throws Throwable  {
      long[] longArray0 = new long[1];
      boolean boolean0 = NumberUtils.equals(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L}, longArray0);
  }

  @Test
  public void test075()  throws Throwable  {
      long[] longArray0 = new long[9];
      long[] longArray1 = new long[9];
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean0 = NumberUtils.equals(longArray0, longArray1);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
  }

  @Test
  public void test076()  throws Throwable  {
      int[] intArray0 = new int[10];
      int int0 = 8192;
      intArray0[0] = int0;
      int[] intArray1 = new int[10];
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean0 = NumberUtils.equals(intArray0, intArray1);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {8192, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test
  public void test077()  throws Throwable  {
      int[] intArray0 = new int[5];
      int[] intArray1 = new int[10];
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean0 = NumberUtils.equals(intArray0, intArray1);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test
  public void test078()  throws Throwable  {
      int[] intArray0 = new int[10];
      int[] intArray1 = new int[10];
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean0 = NumberUtils.equals(intArray0, intArray1);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
  }

  @Test
  public void test079()  throws Throwable  {
      int[] intArray0 = new int[6];
      boolean boolean0 = NumberUtils.equals(intArray0, intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test
  public void test080()  throws Throwable  {
      int[] intArray0 = new int[7];
      int[] intArray1 = null;
      boolean boolean0 = NumberUtils.equals(intArray1, intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test
  public void test081()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short short0 = (short)3495;
      shortArray0[3] = short0;
      short[] shortArray1 = new short[9];
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean0 = NumberUtils.equals(shortArray0, shortArray1);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)3495, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
  }

  @Test
  public void test082()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short[] shortArray1 = new short[9];
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean0 = NumberUtils.equals(shortArray0, shortArray1);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test
  public void test083()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = null;
      boolean boolean0 = NumberUtils.equals(shortArray0, shortArray1);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
  }

  @Test
  public void test084()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = null;
      boolean boolean0 = NumberUtils.equals(shortArray1, shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
  }

  @Test
  public void test085()  throws Throwable  {
      short[] shortArray0 = new short[2];
      boolean boolean0 = NumberUtils.equals(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
  }

  @Test
  public void test086()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short[] shortArray1 = new short[1];
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean0 = NumberUtils.equals(shortArray0, shortArray1);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
  }

  @Test
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)3;
      byteArray0[3] = byte0;
      byte[] byteArray1 = new byte[6];
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = NumberUtils.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3, (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
  }

  @Test
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = new byte[3];
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = NumberUtils.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
  }

  @Test
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      boolean boolean0 = NumberUtils.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[4];
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = NumberUtils.equals(byteArray0, byteArray1);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
  }

  @Test
  public void test091()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try {
        BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test092()  throws Throwable  {
      String string0 = null;
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
      assertNull(bigDecimal0);
  }

  @Test
  public void test093()  throws Throwable  {
      String string0 = null;
      BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
      assertNull(bigInteger0);
  }

  @Test
  public void test094()  throws Throwable  {
      String string0 = null;
      Long long0 = NumberUtils.createLong(string0);
  }

  @Test
  public void test095()  throws Throwable  {
      String string0 = null;
      Integer integer0 = NumberUtils.createInteger(string0);
  }

  @Test
  public void test096()  throws Throwable  {
      String string0 = null;
      Double double0 = NumberUtils.createDouble(string0);
  }

  @Test
  public void test097()  throws Throwable  {
      String string0 = null;
      Float float0 = NumberUtils.createFloat(string0);
  }

  @Test
  public void test098()  throws Throwable  {
      String string0 = "H7";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"H7\"
         //
      }
  }

  @Test
  public void test099()  throws Throwable  {
      String string0 = "E~iZ+we`&S3";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test100()  throws Throwable  {
      String string0 = "ody(ol";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ody(ol is not a valid number.
         //
      }
  }

  @Test
  public void test101()  throws Throwable  {
      String string0 = "The Array must not be null";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The Array must not be null is not a valid number.
         //
      }
  }

  @Test
  public void test102()  throws Throwable  {
      String string0 = "9f";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals(9.0F, (float)float0, 0.01F);
  }

  @Test
  public void test103()  throws Throwable  {
      String string0 = "7d";
      Double double0 = (Double)NumberUtils.createNumber(string0);
      assertEquals(7.0, (double)double0, 0.01D);
  }

  @Test
  public void test104()  throws Throwable  {
      String string0 = "9F";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals(9.0F, (float)float0, 0.01F);
  }

  @Test
  public void test105()  throws Throwable  {
      String string0 = "7D";
      Double double0 = (Double)NumberUtils.createNumber(string0);
      assertEquals(7.0, (double)double0, 0.01D);
  }

  @Test
  public void test106()  throws Throwable  {
      String string0 = "The";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The is not a valid number.
         //
      }
  }

  @Test
  public void test107()  throws Throwable  {
      String string0 = "Ar@ay cCnnot be empty.";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Ar@ay cCnnot be empty. is not a valid number.
         //
      }
  }

  @Test
  public void test108()  throws Throwable  {
      String string0 = ".7";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals(0.7F, (float)float0, 0.01F);
  }

  @Test
  public void test109()  throws Throwable  {
      String string0 = "0ZrHp${GsD.E(#";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0ZrHp${GsD.E(# is not a valid number.
         //
      }
  }

  @Test
  public void test110()  throws Throwable  {
      String string0 = "-0xH";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-H\"
         //
      }
  }

  @Test
  public void test111()  throws Throwable  {
      String string0 = "0x=|,9s%8uO";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"=|,9s%8uO\"
         //
      }
  }

  @Test
  public void test112()  throws Throwable  {
      String string0 = "---0xH";
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test113()  throws Throwable  {
      String string0 = "";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test114()  throws Throwable  {
      String string0 = null;
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test115()  throws Throwable  {
      String string0 = "29L";
      Long long0 = (Long)NumberUtils.createNumber(string0);
      assertEquals(29L, (long)long0);
  }

  @Test
  public void test116()  throws Throwable  {
      int int0 = (-1948);
      String string0 = null;
      double double0 = NumberUtils.toDouble(string0, (double) int0);
      assertEquals((-1948.0), double0, 0.01D);
  }

  @Test
  public void test117()  throws Throwable  {
      String string0 = null;
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test118()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      String string0 = null;
      long long0 = NumberUtils.toLong(string0, (long) int0);
      assertEquals(0L, long0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test
  public void test119()  throws Throwable  {
      String string0 = null;
      int int0 = 38;
      int int1 = NumberUtils.stringToInt(string0, int0);
      assertEquals(38, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test120()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      assertNotNull(numberUtils0);
  }

  @Test
  public void test121()  throws Throwable  {
      double double0 = 0.0;
      double double1 = NumberUtils.min(double0, double0, double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test122()  throws Throwable  {
      short short0 = (short)0;
      float float0 = NumberUtils.max((float) short0, (float) short0, (float) short0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test123()  throws Throwable  {
      String string0 = "";
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
  }

  @Test
  public void test124()  throws Throwable  {
      String string0 = "h";
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test125()  throws Throwable  {
      String string0 = "";
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test126()  throws Throwable  {
      float float0 = (-1765.3473F);
      float float1 = NumberUtils.min(float0, float0, float0);
      assertEquals((-1765.3473F), float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
  }

  @Test
  public void test127()  throws Throwable  {
      String string0 = "...";
      int int0 = NumberUtils.stringToInt(string0);
      assertEquals(0, int0);
      
      double double0 = NumberUtils.max((double) int0, (double) int0, (double) int0);
      assertEquals(0.0, double0, 0.01D);
  }
}
