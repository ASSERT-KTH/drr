/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:42:48 GMT 2014
 */

package org.apache.commons.lang.math;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang.math.NumberUtils;




import org.junit.runner.RunWith;


public class NumberUtilsEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      String string0 = "L";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test001()  throws Throwable  {
      String string0 = "0F";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test002()  throws Throwable  {
      String string0 = ".f";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test003()  throws Throwable  {
      String string0 = "E";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test004()  throws Throwable  {
      String string0 = "0e";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test005()  throws Throwable  {
      String string0 = "\n";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test006()  throws Throwable  {
      String string0 = "---0x";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test007()  throws Throwable  {
      String string0 = "+p1+";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test008()  throws Throwable  {
      String string0 = "EA-";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test009()  throws Throwable  {
      String string0 = "...";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test010()  throws Throwable  {
      String string0 = "-0x'v^(";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test011()  throws Throwable  {
      String string0 = "0x0e9";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test012()  throws Throwable  {
      String string0 = "-0x";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test013()  throws Throwable  {
      String string0 = "0e9";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test014()  throws Throwable  {
      String string0 = "-";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test015()  throws Throwable  {
      String string0 = "-0xArrVy cannot be empty.";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test017()  throws Throwable  {
      String string0 = "(P|U[PbxxC";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test018()  throws Throwable  {
      String string0 = "8";
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test019()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test020()  throws Throwable  {
      String string0 = "-0";
      float float0 = 0.0F;
      float float1 = NumberUtils.toFloat(string0, float0);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertEquals(-0.0F, float1, 0.01F);
      
      int int0 = NumberUtils.compare(float1, float0);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertEquals((-1), int0);
  }

  @Test
  public void test021()  throws Throwable  {
      byte byte0 = (byte)112;
      byte byte1 = (byte)0;
      int int0 = NumberUtils.compare((float) byte0, (float) byte1);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals(1, int0);
  }

  @Test
  public void test022()  throws Throwable  {
      int int0 = (-1281);
      double double0 = 1389.69267920258;
      int int1 = NumberUtils.compare(double0, (double) int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1, int1);
  }

  @Test
  public void test023()  throws Throwable  {
      double double0 = 1.0;
      double double1 = 2732.4817763137576;
      int int0 = NumberUtils.compare(double0, double1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1), int0);
  }

  @Test
  public void test024()  throws Throwable  {
      byte byte0 = (byte)64;
      byte byte1 = (byte)76;
      byte byte2 = NumberUtils.max(byte0, byte0, byte1);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertEquals((byte)76, byte2);
  }

  @Test
  public void test025()  throws Throwable  {
      byte byte0 = (byte) (-21);
      byte byte1 = (byte)0;
      byte byte2 = NumberUtils.max(byte0, byte1, byte0);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
      assertEquals((byte)0, byte2);
  }

  @Test
  public void test026()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short short0 = (short) (-193);
      short short1 = NumberUtils.max(short0, short0, shortArray0[1]);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      assertEquals((short)0, short1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test
  public void test027()  throws Throwable  {
      byte byte0 = (byte)56;
      byte byte1 = NumberUtils.min(byte0, byte0, byte0);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      assertEquals((byte)56, byte1);
      
      byte byte2 = (byte) (-5);
      assertFalse(byte2 == byte1);
      
      short short0 = NumberUtils.max((short) byte2, (short) byte1, (short) byte1);
      assertFalse(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertFalse(byte1 == byte2);
      assertTrue(byte1 == byte0);
      assertFalse(byte0 == byte2);
      assertTrue(byte0 == byte1);
      assertEquals((short)56, short0);
  }

  @Test
  public void test028()  throws Throwable  {
      String string0 = ".9";
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
      
      short short0 = (short)0;
      int int1 = 120;
      assertFalse(int1 == int0);
      
      int int2 = NumberUtils.max(int0, (int) short0, int1);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(120, int2);
  }

  @Test
  public void test029()  throws Throwable  {
      int int0 = 0;
      int int1 = 46;
      int int2 = NumberUtils.max(int0, int1, int1);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(46, int2);
  }

  @Test
  public void test030()  throws Throwable  {
      int int0 = (-2245);
      long long0 = (-4808L);
      long long1 = NumberUtils.min((long) int0, (long) int0, long0);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals((-4808L), long1);
      
      long long2 = NumberUtils.max(long1, long1, (long) int0);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertTrue(long0 == long1);
      assertFalse(long0 == long2);
      assertTrue(long1 == long0);
      assertFalse(long1 == long2);
      assertEquals((-2245L), long2);
  }

  @Test
  public void test031()  throws Throwable  {
      int int0 = (-2245);
      long long0 = (-1679L);
      long long1 = NumberUtils.min(long0, (long) int0, (long) int0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals((-2245L), long1);
      
      long long2 = NumberUtils.max(long1, long0, long1);
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertTrue(long2 == long0);
      assertFalse(long2 == long1);
      assertTrue(long0 == long2);
      assertFalse(long0 == long1);
      assertEquals((-1679L), long2);
  }

  @Test
  public void test032()  throws Throwable  {
      byte byte0 = (byte) (-4);
      byte byte1 = (byte) (-18);
      byte byte2 = NumberUtils.min(byte0, byte0, byte1);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertEquals((byte) (-18), byte2);
  }

  @Test
  public void test033()  throws Throwable  {
      byte byte0 = (byte) (-4);
      byte byte1 = (byte)48;
      byte byte2 = NumberUtils.min(byte1, byte0, byte1);
      assertTrue(byte2 == byte0);
      assertFalse(byte2 == byte1);
      assertTrue(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertEquals((byte) (-4), byte2);
  }

  @Test
  public void test034()  throws Throwable  {
      byte byte0 = (byte)126;
      byte byte1 = (byte) (-21);
      byte byte2 = (byte)102;
      short short0 = NumberUtils.min((short) byte2, (short) byte0, (short) byte1);
      assertFalse(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte2 == byte0);
      assertFalse(byte2 == byte1);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertEquals((short) (-21), short0);
  }

  @Test
  public void test035()  throws Throwable  {
      short short0 = (short)217;
      short short1 = (short) (-2132);
      short short2 = NumberUtils.min(short0, short1, short0);
      assertFalse(short1 == short0);
      assertTrue(short1 == short2);
      assertFalse(short0 == short2);
      assertFalse(short0 == short1);
      assertFalse(short2 == short0);
      assertTrue(short2 == short1);
      assertEquals((short) (-2132), short2);
  }

  @Test
  public void test036()  throws Throwable  {
      String string0 = ".9";
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
      
      int int1 = (-2591);
      assertFalse(int1 == int0);
      
      int int2 = NumberUtils.min(int0, int0, int1);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals((-2591), int2);
  }

  @Test
  public void test037()  throws Throwable  {
      String string0 = "0e9";
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
      
      byte byte0 = (byte) (-87);
      int int1 = NumberUtils.min(int0, (int) byte0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-87), int1);
  }

  @Test
  public void test038()  throws Throwable  {
      double double0 = 1.0;
      int int0 = NumberUtils.compare(double0, double0);
      assertEquals(0, int0);
      
      long long0 = (-1901L);
      long long1 = NumberUtils.min((long) int0, long0, (long) int0);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals((-1901L), long1);
  }

  @Test
  public void test039()  throws Throwable  {
      float float0 = (-2992.3699F);
      float[] floatArray0 = new float[14];
      floatArray0[0] = float0;
      float float1 = NumberUtils.max(floatArray0);
      assertFalse(float1 == float0);
      assertEquals(0.0F, float1, 0.01F);
      assertArrayEquals(new float[] {(-2992.3699F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test
  public void test040()  throws Throwable  {
      float float0 = 118.21259F;
      double[] doubleArray0 = new double[6];
      doubleArray0[3] = (double) float0;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(118.21259307861328, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 118.21259307861328, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)100;
      byteArray0[3] = byte0;
      byte byte1 = NumberUtils.max(byteArray0);
      assertTrue(byte1 == byte0);
      assertEquals((byte)100, byte1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)100, (byte)0}, byteArray0);
  }

  @Test
  public void test042()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try {
        byte byte0 = NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test043()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short short0 = (short) (-692);
      shortArray0[0] = short0;
      short short1 = NumberUtils.max(shortArray0);
      assertFalse(short1 == short0);
      assertEquals((short)0, short1);
      assertArrayEquals(new short[] {(short) (-692), (short)0, (short)0}, shortArray0);
  }

  @Test
  public void test044()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = 1419;
      intArray0[2] = int0;
      int int1 = NumberUtils.max(intArray0);
      assertTrue(int1 == int0);
      assertEquals(1419, int1);
      assertArrayEquals(new int[] {0, 0, 1419, 0, 0, 0}, intArray0);
  }

  @Test
  public void test045()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test046()  throws Throwable  {
      long[] longArray0 = new long[4];
      short short0 = (short)1;
      longArray0[1] = (long) short0;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(1L, long0);
      assertArrayEquals(new long[] {0L, 1L, 0L, 0L}, longArray0);
  }

  @Test
  public void test047()  throws Throwable  {
      float[] floatArray0 = new float[3];
      short[] shortArray0 = new short[6];
      short short0 = (short) (-2167);
      shortArray0[1] = short0;
      floatArray0[2] = (float) shortArray0[1];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-2167.0F), float0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-2167.0F)}, floatArray0, 0.01F);
  }

  @Test
  public void test048()  throws Throwable  {
      long long0 = (-1134L);
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = (double) long0;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1134.0), double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, (-1134.0), 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test049()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try {
        double double0 = NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test050()  throws Throwable  {
      byte byte0 = (byte)63;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = byte0;
      byte byte1 = NumberUtils.min(byteArray0);
      assertFalse(byte1 == byte0);
      assertEquals((byte)0, byte1);
      assertArrayEquals(new byte[] {(byte)63, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test051()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try {
        byte byte0 = NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test052()  throws Throwable  {
      byte byte0 = (byte) (-52);
      short[] shortArray0 = new short[9];
      shortArray0[2] = (short) byte0;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-52), short0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-52), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test
  public void test053()  throws Throwable  {
      short short0 = (short)2239;
      int[] intArray0 = new int[9];
      intArray0[0] = (int) short0;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {2239, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test
  public void test054()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test055()  throws Throwable  {
      byte byte0 = (byte) (-47);
      long[] longArray0 = new long[9];
      longArray0[2] = (long) byte0;
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-47L), long0);
      assertArrayEquals(new long[] {0L, 0L, (-47L), 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test
  public void test056()  throws Throwable  {
      String string0 = "-0";
      float float0 = 0.0F;
      float float1 = NumberUtils.toFloat(string0, float0);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertEquals(-0.0F, float1, 0.01F);
      
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[7];
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      //  // Unstable assertion: assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[1] = (double) float1;
      boolean boolean0 = NumberUtils.equals(doubleArray0, doubleArray1);
      //  // Unstable assertion: assertFalse(doubleArray0.equals((Object)doubleArray1));
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      //  // Unstable assertion: assertNotSame(doubleArray0, doubleArray1);
      //  // Unstable assertion: assertNotSame(doubleArray1, doubleArray0);
  }

  @Test
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = NumberUtils.equals(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = null;
      boolean boolean0 = NumberUtils.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = null;
      boolean boolean0 = NumberUtils.equals(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      boolean boolean0 = NumberUtils.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = NumberUtils.equals(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test
  public void test062()  throws Throwable  {
      float float0 = 118.21259F;
      float[] floatArray0 = new float[4];
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      
      floatArray1[2] = float0;
      boolean boolean0 = NumberUtils.equals(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 118.21259F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test
  public void test063()  throws Throwable  {
      float[] floatArray0 = new float[4];
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      
      boolean boolean0 = NumberUtils.equals(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test
  public void test064()  throws Throwable  {
      float[] floatArray0 = new float[4];
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      
      boolean boolean0 = NumberUtils.equals(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test
  public void test065()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = null;
      boolean boolean0 = NumberUtils.equals(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
  }

  @Test
  public void test066()  throws Throwable  {
      float[] floatArray0 = new float[4];
      boolean boolean0 = NumberUtils.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test
  public void test067()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = null;
      boolean boolean0 = NumberUtils.equals(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
  }

  @Test
  public void test068()  throws Throwable  {
      long[] longArray0 = new long[8];
      long long0 = (-1074L);
      long[] longArray1 = new long[8];
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      
      longArray1[3] = long0;
      boolean boolean0 = NumberUtils.equals(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-1074L), 0L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
  }

  @Test
  public void test069()  throws Throwable  {
      long[] longArray0 = new long[11];
      long[] longArray1 = new long[5];
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      
      boolean boolean0 = NumberUtils.equals(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
  }

  @Test
  public void test070()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = null;
      boolean boolean0 = NumberUtils.equals(longArray1, longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {0L}, longArray0);
  }

  @Test
  public void test071()  throws Throwable  {
      long[] longArray0 = new long[8];
      boolean boolean0 = NumberUtils.equals(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test
  public void test072()  throws Throwable  {
      long[] longArray0 = new long[2];
      long[] longArray1 = new long[2];
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      
      boolean boolean0 = NumberUtils.equals(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
  }

  @Test
  public void test073()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 2211;
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      
      intArray1[0] = int0;
      boolean boolean0 = NumberUtils.equals(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2211}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test
  public void test074()  throws Throwable  {
      int[] intArray0 = new int[4];
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      
      boolean boolean0 = NumberUtils.equals(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test
  public void test075()  throws Throwable  {
      int[] intArray0 = new int[23];
      int[] intArray1 = null;
      boolean boolean0 = NumberUtils.equals(intArray0, intArray1);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test
  public void test076()  throws Throwable  {
      int[] intArray0 = new int[3];
      boolean boolean0 = NumberUtils.equals(intArray0, intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
  }

  @Test
  public void test077()  throws Throwable  {
      int[] intArray0 = new int[6];
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      
      boolean boolean0 = NumberUtils.equals(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test
  public void test078()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short short0 = (short)46;
      shortArray0[0] = short0;
      short[] shortArray1 = new short[6];
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      
      boolean boolean0 = NumberUtils.equals(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)46, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test
  public void test079()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short[] shortArray1 = new short[3];
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      
      boolean boolean0 = NumberUtils.equals(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test
  public void test080()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short[] shortArray1 = null;
      boolean boolean0 = NumberUtils.equals(shortArray1, shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test
  public void test081()  throws Throwable  {
      short[] shortArray0 = new short[3];
      boolean boolean0 = NumberUtils.equals(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
  }

  @Test
  public void test082()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = new short[8];
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      
      boolean boolean0 = NumberUtils.equals(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-35);
      byteArray0[5] = byte0;
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = NumberUtils.equals(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-35), (byte)0}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = NumberUtils.equals(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = NumberUtils.equals(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = NumberUtils.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = null;
      boolean boolean0 = NumberUtils.equals(byteArray1, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test088()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try {
        BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test089()  throws Throwable  {
      String string0 = null;
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
      assertNull(bigDecimal0);
  }

  @Test
  public void test090()  throws Throwable  {
      String string0 = null;
      BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
      assertNull(bigInteger0);
  }

  @Test
  public void test091()  throws Throwable  {
      String string0 = "g";
      // Undeclared exception!
      try {
        BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"g\"
         //
      }
  }

  @Test
  public void test092()  throws Throwable  {
      String string0 = null;
      Long long0 = NumberUtils.createLong(string0);
  }

  @Test
  public void test093()  throws Throwable  {
      String string0 = "-0";
      Long long0 = NumberUtils.createLong(string0);
      assertEquals(0L, (long)long0);
  }

  @Test
  public void test094()  throws Throwable  {
      String string0 = null;
      Integer integer0 = NumberUtils.createInteger(string0);
  }

  @Test
  public void test095()  throws Throwable  {
      String string0 = null;
      Double double0 = NumberUtils.createDouble(string0);
  }

  @Test
  public void test096()  throws Throwable  {
      String string0 = null;
      Float float0 = NumberUtils.createFloat(string0);
  }

  @Test
  public void test097()  throws Throwable  {
      String string0 = "-0";
      Integer integer0 = (Integer)NumberUtils.createNumber(string0);
      assertEquals(0, (int)integer0);
  }

  @Test
  public void test098()  throws Throwable  {
      String string0 = "0e9";
      BigDecimal bigDecimal0 = (BigDecimal)NumberUtils.createNumber(string0);
      assertEquals(0, bigDecimal0.shortValue());
      assertEquals(0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
  }

  @Test
  public void test099()  throws Throwable  {
      String string0 = "-t7h>&aw!Gl";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -t7h>&aw!Gl is not a valid number.
         //
      }
  }

  @Test
  public void test100()  throws Throwable  {
      String string0 = "The Array must not be nll";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The Array must not be nll is not a valid number.
         //
      }
  }

  @Test
  public void test101()  throws Throwable  {
      String string0 = "=V!<vmKEP#hGJW!\"d";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // =V!<vmKEP#hGJW!\"d is not a valid number.
         //
      }
  }

  @Test
  public void test102()  throws Throwable  {
      String string0 = "P|@Z$%au<KL";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // P|@Z$%au<KL is not a valid number.
         //
      }
  }

  @Test
  public void test103()  throws Throwable  {
      String string0 = "%+R2T@/:I(&>zl4jD";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // %+R2T@/:I(&>zl4jD is not a valid number.
         //
      }
  }

  @Test
  public void test104()  throws Throwable  {
      String string0 = "0e";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0e is not a valid number.
         //
      }
  }

  @Test
  public void test105()  throws Throwable  {
      String string0 = "ArrVy cannot be empty.";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ArrVy cannot be empty. is not a valid number.
         //
      }
  }

  @Test
  public void test106()  throws Throwable  {
      String string0 = ".9";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals(0.9F, (float)float0, 0.01F);
  }

  @Test
  public void test107()  throws Throwable  {
      String string0 = "org.apache.commons.lang.math.NumberUtils";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // org.apache.commons.lang.math.NumberUtils is not a valid number.
         //
      }
  }

  @Test
  public void test108()  throws Throwable  {
      String string0 = "-0x";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
      }
  }

  @Test
  public void test109()  throws Throwable  {
      String string0 = "0x=V!<vmKEP#hGJW!\"d";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"=V!<vmKEP#hGJW!\"d\"
         //
      }
  }

  @Test
  public void test110()  throws Throwable  {
      String string0 = "--";
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test111()  throws Throwable  {
      String string0 = "";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test112()  throws Throwable  {
      String string0 = null;
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test113()  throws Throwable  {
      String string0 = "0F";
      BigDecimal bigDecimal0 = (BigDecimal)NumberUtils.createNumber(string0);
      assertEquals(0, bigDecimal0.byteValue());
      assertEquals(0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
  }

  @Test
  public void test114()  throws Throwable  {
      String string0 = null;
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test115()  throws Throwable  {
      String string0 = null;
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test116()  throws Throwable  {
      String string0 = null;
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
  }

  @Test
  public void test117()  throws Throwable  {
      byte byte0 = (byte)64;
      byte byte1 = NumberUtils.max(byte0, byte0, byte0);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      assertEquals((byte)64, byte1);
      
      String string0 = null;
      int int0 = NumberUtils.stringToInt(string0, (int) byte1);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      assertEquals(64, int0);
  }

  @Test
  public void test118()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      assertNotNull(numberUtils0);
  }

  @Test
  public void test119()  throws Throwable  {
      byte byte0 = (byte)64;
      byte byte1 = NumberUtils.max(byte0, byte0, byte0);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      assertEquals((byte)64, byte1);
      
      double double0 = NumberUtils.min((double) byte0, (double) byte1, (double) byte0);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      assertEquals(64.0, double0, 0.01D);
  }

  @Test
  public void test120()  throws Throwable  {
      int int0 = (-1281);
      int int1 = NumberUtils.max(int0, int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals((-1281), int1);
      
      float float0 = NumberUtils.max((float) int1, (float) int0, (float) int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals((-1281.0F), float0, 0.01F);
  }

  @Test
  public void test121()  throws Throwable  {
      String string0 = "%+";
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
  }

  @Test
  public void test122()  throws Throwable  {
      String string0 = "-0x'v^(";
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test123()  throws Throwable  {
      String string0 = "-0x'v^(";
      int int0 = NumberUtils.stringToInt(string0);
      assertEquals(0, int0);
  }

  @Test
  public void test124()  throws Throwable  {
      String string0 = "0e9";
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
      
      byte byte0 = (byte) (-87);
      float float0 = NumberUtils.min((float) int0, (float) byte0, (float) byte0);
      assertEquals((-87.0F), float0, 0.01F);
  }

  @Test
  public void test125()  throws Throwable  {
      double double0 = 1.0;
      int int0 = NumberUtils.compare(double0, double0);
      assertEquals(0, int0);
      
      double double1 = NumberUtils.max(double0, (double) int0, (double) int0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(1.0, double1, 0.01D);
  }
}
