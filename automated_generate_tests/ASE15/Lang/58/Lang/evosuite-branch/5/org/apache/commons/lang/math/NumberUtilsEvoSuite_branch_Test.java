/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:14:40 GMT 2014
 */

package org.apache.commons.lang.math;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;


public class NumberUtilsEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      String string0 = "-0l";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test001()  throws Throwable  {
      String string0 = "-0f";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test002()  throws Throwable  {
      String string0 = "6";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test003()  throws Throwable  {
      String string0 = "--";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test004()  throws Throwable  {
      String string0 = "+[";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test005()  throws Throwable  {
      String string0 = "Eel5Y,hf&E9C:";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test006()  throws Throwable  {
      String string0 = "ej\\m@e";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test007()  throws Throwable  {
      String string0 = "...";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test008()  throws Throwable  {
      String string0 = "-";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test009()  throws Throwable  {
      String string0 = "-0xq9k?>3h?~3ZKm!e*\\";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test010()  throws Throwable  {
      String string0 = "0xF9";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test011()  throws Throwable  {
      String string0 = "0x";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test012()  throws Throwable  {
      String string0 = "0x...";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test013()  throws Throwable  {
      String string0 = "0jMlf9";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test014()  throws Throwable  {
      String string0 = "--\\rA[C:3@";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test015()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = "L";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test017()  throws Throwable  {
      float[] floatArray0 = new float[10];
      float float0 = (-978.0F);
      float[] floatArray1 = new float[10];
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[7] = float0;
      boolean boolean0 = NumberUtils.equals(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-978.0F), 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(boolean0);
  }

  @Test
  public void test018()  throws Throwable  {
      short short0 = (short)2;
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[9];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) short0;
      boolean boolean0 = NumberUtils.equals(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(boolean0);
  }

  @Test
  public void test019()  throws Throwable  {
      byte byte0 = (byte)71;
      byte byte1 = (byte)124;
      byte byte2 = NumberUtils.max(byte0, byte0, byte1);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertEquals((byte)124, byte2);
  }

  @Test
  public void test020()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = (byte)32;
      byte byte2 = NumberUtils.max(byte0, byte1, byte1);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertEquals((byte)32, byte2);
  }

  @Test
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-84);
      short short0 = NumberUtils.max((short) byte0, (short) byte0, (short) byteArray0[0]);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals((short)0, short0);
  }

  @Test
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-84);
      short short0 = NumberUtils.max((short) byte0, (short) byteArray0[0], (short) byteArray0[0]);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals((short)0, short0);
  }

  @Test
  public void test023()  throws Throwable  {
      long long0 = 746L;
      String string0 = "...";
      long long1 = NumberUtils.toLong(string0);
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
      
      int int0 = 13;
      int int1 = NumberUtils.compare((float) long1, (float) long0);
      assertFalse(int1 == int0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals((-1), int1);
      
      int int2 = NumberUtils.max(int1, int1, int0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(long1 == long0);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(long0 == long1);
      assertEquals(13, int2);
  }

  @Test
  public void test024()  throws Throwable  {
      int int0 = (-1);
      int int1 = 1;
      int int2 = NumberUtils.max(int0, int1, int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertEquals(1, int2);
  }

  @Test
  public void test025()  throws Throwable  {
      int int0 = (-1);
      int int1 = NumberUtils.compare((float) int0, (float) int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      long long0 = NumberUtils.max((long) int0, (long) int0, (long) int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0L, long0);
  }

  @Test
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)113;
      byte byte1 = (byte) (-1);
      long long0 = NumberUtils.max((long) byte1, (long) byte0, (long) byteArray0[0]);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(113L, long0);
  }

  @Test
  public void test027()  throws Throwable  {
      int int0 = (-1);
      int int1 = NumberUtils.compare((float) int0, (float) int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      byte byte0 = (byte)0;
      byte byte1 = NumberUtils.min(byte0, byte0, byte0);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      assertEquals((byte)0, byte1);
      
      long long0 = NumberUtils.max((long) byte1, (long) int1, (long) int1);
      assertFalse(int0 == int1);
      assertTrue(byte0 == byte1);
      assertFalse(int1 == int0);
      assertTrue(byte1 == byte0);
      assertEquals(0L, long0);
  }

  @Test
  public void test028()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = (byte) (-84);
      byte byte2 = NumberUtils.min(byte0, byte1, byte1);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertEquals((byte) (-84), byte2);
      
      byte byte3 = NumberUtils.min(byte0, byte0, byte2);
      assertTrue(byte2 == byte3);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte3);
      assertTrue(byte1 == byte2);
      assertTrue(byte3 == byte2);
      assertFalse(byte3 == byte0);
      assertTrue(byte3 == byte1);
      assertFalse(byte0 == byte3);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertEquals((byte) (-84), byte3);
  }

  @Test
  public void test029()  throws Throwable  {
      byte byte0 = (byte)97;
      byte byte1 = (byte) (-44);
      short short0 = NumberUtils.min((short) byte0, (short) byte0, (short) byte1);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals((short) (-44), short0);
  }

  @Test
  public void test030()  throws Throwable  {
      byte byte0 = (byte)97;
      byte byte1 = (byte)102;
      short short0 = NumberUtils.min((short) byte1, (short) byte0, (short) byte0);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals((short)97, short0);
  }

  @Test
  public void test031()  throws Throwable  {
      String string0 = "%S!gt5|!PIg-`:L}";
      int int0 = 5875;
      int int1 = NumberUtils.toInt(string0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(5875, int1);
      
      int int2 = (-1365);
      assertFalse(int2 == int1);
      
      int int3 = NumberUtils.min(int1, int0, int2);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertTrue(int2 == int3);
      assertFalse(int1 == int2);
      assertTrue(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int0 == int3);
      assertTrue(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals((-1365), int3);
  }

  @Test
  public void test032()  throws Throwable  {
      int int0 = 13;
      int int1 = (-3265);
      int int2 = NumberUtils.min(int0, int1, int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertEquals((-3265), int2);
  }

  @Test
  public void test033()  throws Throwable  {
      int int0 = 1078;
      int[] intArray0 = new int[2];
      long long0 = NumberUtils.min((long) int0, (long) int0, (long) intArray0[0]);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(0L, long0);
  }

  @Test
  public void test034()  throws Throwable  {
      long long0 = 0L;
      int int0 = 1078;
      long long1 = NumberUtils.min((long) int0, long0, (long) int0);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
  }

  @Test
  public void test035()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float float0 = 1.0F;
      floatArray0[1] = float0;
      float float1 = NumberUtils.max(floatArray0);
      assertTrue(float1 == float0);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(1.0F, float1, 0.01F);
  }

  @Test
  public void test036()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short short0 = (short)202;
      shortArray0[0] = short0;
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = (double) shortArray0[0];
      double double0 = NumberUtils.max(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 202.0}, doubleArray0, 0.01);
      assertEquals(202.0, double0, 0.01D);
  }

  @Test
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-93);
      byteArray0[0] = byte0;
      byte byte1 = NumberUtils.max(byteArray0);
      assertFalse(byte1 == byte0);
      assertArrayEquals(new byte[] {(byte) (-93), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((byte)0, byte1);
  }

  @Test
  public void test038()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try {
        byte byte0 = NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test039()  throws Throwable  {
      short[] shortArray0 = new short[10];
      short short0 = (short)1559;
      shortArray0[3] = short0;
      short short1 = NumberUtils.max(shortArray0);
      assertTrue(short1 == short0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)1559, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals((short)1559, short1);
  }

  @Test
  public void test040()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test041()  throws Throwable  {
      String string0 = "%S!gt5|!PIg-`:L}";
      int int0 = 5875;
      int int1 = NumberUtils.toInt(string0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(5875, int1);
      
      int[] intArray0 = new int[9];
      intArray0[1] = int1;
      int int2 = NumberUtils.max(intArray0);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertArrayEquals(new int[] {0, 5875, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(5875, int2);
  }

  @Test
  public void test042()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test043()  throws Throwable  {
      short short0 = (short) (-2694);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) short0;
      long long0 = NumberUtils.max(longArray0);
      assertArrayEquals(new long[] {(-2694L), 0L, 0L}, longArray0);
      assertEquals(0L, long0);
  }

  @Test
  public void test044()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try {
        long long0 = NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test045()  throws Throwable  {
      short short0 = (short)10;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) short0;
      float float0 = NumberUtils.min(floatArray0);
      assertArrayEquals(new float[] {10.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test046()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float float0 = NumberUtils.min(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = (-489.0);
      doubleArray0[3] = double0;
      double double1 = NumberUtils.min(doubleArray0);
      assertTrue(double1 == double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-489.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-489.0), double1, 0.01D);
  }

  @Test
  public void test048()  throws Throwable  {
      byte byte0 = (byte) (-12);
      byte byte1 = NumberUtils.min(byte0, byte0, byte0);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      assertEquals((byte) (-12), byte1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = byte1;
      byte byte2 = NumberUtils.min(byteArray0);
      assertTrue(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-12), (byte)0}, byteArray0);
      assertEquals((byte) (-12), byte2);
  }

  @Test
  public void test049()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try {
        byte byte0 = NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test050()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short short0 = (short)437;
      shortArray0[0] = short0;
      short short1 = NumberUtils.min(shortArray0);
      assertFalse(short1 == short0);
      assertArrayEquals(new short[] {(short)437, (short)0}, shortArray0);
      assertEquals((short)0, short1);
  }

  @Test
  public void test051()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test052()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short short0 = NumberUtils.min(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals((short)0, short0);
  }

  @Test
  public void test053()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = (-1394);
      intArray0[1] = int0;
      int int1 = NumberUtils.min(intArray0);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {0, (-1394)}, intArray0);
      assertEquals((-1394), int1);
  }

  @Test
  public void test054()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test055()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = NumberUtils.min(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(0, int0);
  }

  @Test
  public void test056()  throws Throwable  {
      long[] longArray0 = new long[5];
      long long0 = (-1043L);
      longArray0[1] = long0;
      long long1 = NumberUtils.min(longArray0);
      assertTrue(long1 == long0);
      assertArrayEquals(new long[] {0L, (-1043L), 0L, 0L, 0L}, longArray0);
      assertEquals((-1043L), long1);
  }

  @Test
  public void test057()  throws Throwable  {
      short short0 = (short)2;
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) short0;
      double[] doubleArray1 = new double[9];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = NumberUtils.equals(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(boolean0);
  }

  @Test
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[6];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = NumberUtils.equals(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(boolean0);
  }

  @Test
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[23];
      double[] doubleArray1 = null;
      boolean boolean0 = NumberUtils.equals(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = null;
      boolean boolean0 = NumberUtils.equals(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      boolean boolean0 = NumberUtils.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
  }

  @Test
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[9];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = NumberUtils.equals(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
  }

  @Test
  public void test063()  throws Throwable  {
      float[] floatArray0 = new float[6];
      float[] floatArray1 = new float[8];
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = NumberUtils.equals(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(boolean0);
  }

  @Test
  public void test064()  throws Throwable  {
      float[] floatArray0 = new float[10];
      float[] floatArray1 = new float[10];
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = NumberUtils.equals(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertTrue(boolean0);
  }

  @Test
  public void test065()  throws Throwable  {
      float[] floatArray0 = new float[5];
      boolean boolean0 = NumberUtils.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
  }

  @Test
  public void test066()  throws Throwable  {
      float[] floatArray0 = new float[20];
      float[] floatArray1 = null;
      boolean boolean0 = NumberUtils.equals(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
  }

  @Test
  public void test067()  throws Throwable  {
      long[] longArray0 = new long[5];
      short[] shortArray0 = new short[1];
      short short0 = (short)97;
      shortArray0[0] = short0;
      longArray0[0] = (long) shortArray0[0];
      long[] longArray1 = new long[5];
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean0 = NumberUtils.equals(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {97L, 0L, 0L, 0L, 0L}, longArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test068()  throws Throwable  {
      long[] longArray0 = new long[2];
      long[] longArray1 = new long[10];
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean0 = NumberUtils.equals(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test069()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = new long[1];
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean0 = NumberUtils.equals(longArray0, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertTrue(boolean0);
  }

  @Test
  public void test070()  throws Throwable  {
      long[] longArray0 = new long[1];
      boolean boolean0 = NumberUtils.equals(longArray0, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertTrue(boolean0);
  }

  @Test
  public void test071()  throws Throwable  {
      long[] longArray0 = new long[11];
      long[] longArray1 = null;
      boolean boolean0 = NumberUtils.equals(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test072()  throws Throwable  {
      int int0 = 8192;
      int[] intArray0 = new int[8];
      intArray0[0] = int0;
      int[] intArray1 = new int[8];
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean0 = NumberUtils.equals(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {8192, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertFalse(boolean0);
  }

  @Test
  public void test073()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = new int[10];
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean0 = NumberUtils.equals(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertFalse(boolean0);
  }

  @Test
  public void test074()  throws Throwable  {
      int[] intArray0 = new int[3];
      int[] intArray1 = null;
      boolean boolean0 = NumberUtils.equals(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test075()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = null;
      boolean boolean0 = NumberUtils.equals(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test076()  throws Throwable  {
      int[] intArray0 = new int[2];
      boolean boolean0 = NumberUtils.equals(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertTrue(boolean0);
  }

  @Test
  public void test077()  throws Throwable  {
      int[] intArray0 = new int[8];
      int[] intArray1 = new int[8];
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean0 = NumberUtils.equals(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertTrue(boolean0);
  }

  @Test
  public void test078()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short short0 = (short)32;
      shortArray0[4] = short0;
      short[] shortArray1 = new short[9];
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean0 = NumberUtils.equals(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)32, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test079()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short[] shortArray1 = new short[2];
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean0 = NumberUtils.equals(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertFalse(boolean0);
  }

  @Test
  public void test080()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = null;
      boolean boolean0 = NumberUtils.equals(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test081()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short[] shortArray1 = null;
      boolean boolean0 = NumberUtils.equals(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test082()  throws Throwable  {
      short[] shortArray0 = new short[4];
      boolean boolean0 = NumberUtils.equals(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertTrue(boolean0);
  }

  @Test
  public void test083()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = new short[1];
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean0 = NumberUtils.equals(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertTrue(boolean0);
  }

  @Test
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-84);
      byteArray0[0] = byte0;
      byte[] byteArray1 = new byte[1];
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = NumberUtils.equals(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-84)}, byteArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[1];
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = NumberUtils.equals(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertTrue(boolean0);
  }

  @Test
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = null;
      boolean boolean0 = NumberUtils.equals(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = NumberUtils.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
  }

  @Test
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = new byte[7];
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = NumberUtils.equals(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test089()  throws Throwable  {
      String string0 = " ";
      // Undeclared exception!
      try {
        BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test090()  throws Throwable  {
      String string0 = null;
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
      assertNull(bigDecimal0);
  }

  @Test
  public void test091()  throws Throwable  {
      String string0 = null;
      BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
      assertNull(bigInteger0);
  }

  @Test
  public void test092()  throws Throwable  {
      String string0 = null;
      Long long0 = NumberUtils.createLong(string0);
  }

  @Test
  public void test093()  throws Throwable  {
      String string0 = null;
      Integer integer0 = NumberUtils.createInteger(string0);
  }

  @Test
  public void test094()  throws Throwable  {
      String string0 = null;
      Double double0 = NumberUtils.createDouble(string0);
  }

  @Test
  public void test095()  throws Throwable  {
      String string0 = null;
      Float float0 = NumberUtils.createFloat(string0);
  }

  @Test
  public void test096()  throws Throwable  {
      String string0 = ".4";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals(0.4F, (float)float0, 0.01F);
  }

  @Test
  public void test097()  throws Throwable  {
      String string0 = "Minimum abbreviation width is 4";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test098()  throws Throwable  {
      String string0 = "-l";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -l is not a valid number.
         //
      }
  }

  @Test
  public void test099()  throws Throwable  {
      String string0 = "-0l";
      Long long0 = (Long)NumberUtils.createNumber(string0);
      assertEquals(0L, (long)long0);
  }

  @Test
  public void test100()  throws Throwable  {
      String string0 = "Strings must not be null";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Strings must not be null is not a valid number.
         //
      }
  }

  @Test
  public void test101()  throws Throwable  {
      String string0 = "}9A[v&fZ93uJP4sd";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // }9A[v&fZ93uJP4sd is not a valid number.
         //
      }
  }

  @Test
  public void test102()  throws Throwable  {
      String string0 = "/*L";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // /*L is not a valid number.
         //
      }
  }

  @Test
  public void test103()  throws Throwable  {
      String string0 = "5F";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals(5.0F, (float)float0, 0.01F);
  }

  @Test
  public void test104()  throws Throwable  {
      String string0 = "W3?GQ^fQ#SqyD";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // W3?GQ^fQ#SqyD is not a valid number.
         //
      }
  }

  @Test
  public void test105()  throws Throwable  {
      String string0 = "X]";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // X] is not a valid number.
         //
      }
  }

  @Test
  public void test106()  throws Throwable  {
      String string0 = "6MLzz/wd5E";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 6MLzz/wd5E is not a valid number.
         //
      }
  }

  @Test
  public void test107()  throws Throwable  {
      String string0 = " is not i valid number.";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         //  is not i valid number. is not a valid number.
         //
      }
  }

  @Test
  public void test108()  throws Throwable  {
      String string0 = ".E'";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // .E' is not a valid number.
         //
      }
  }

  @Test
  public void test109()  throws Throwable  {
      String string0 = ".0";
      BigDecimal bigDecimal0 = (BigDecimal)NumberUtils.createNumber(string0);
      assertEquals(0, bigDecimal0.shortValue());
      assertEquals(0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
  }

  @Test
  public void test110()  throws Throwable  {
      String string0 = "-0x is not i valid number.";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"- is not i valid number.\"
         //
      }
  }

  @Test
  public void test111()  throws Throwable  {
      String string0 = "0x}H(B&1";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"}H(B&1\"
         //
      }
  }

  @Test
  public void test112()  throws Throwable  {
      String string0 = "--X1V(X";
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test113()  throws Throwable  {
      String string0 = "";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test114()  throws Throwable  {
      String string0 = null;
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test115()  throws Throwable  {
      String string0 = "{'%NDS{yD%p4";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{'%\"
         //
      }
  }

  @Test
  public void test116()  throws Throwable  {
      String string0 = null;
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test117()  throws Throwable  {
      String string0 = null;
      byte byte0 = (byte)71;
      float float0 = NumberUtils.toFloat(string0, (float) byte0);
      assertEquals(71.0F, float0, 0.01F);
  }

  @Test
  public void test118()  throws Throwable  {
      String string0 = null;
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
  }

  @Test
  public void test119()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      assertNotNull(numberUtils0);
  }

  @Test
  public void test120()  throws Throwable  {
      double double0 = (-414.53);
      short[] shortArray0 = new short[1];
      double double1 = NumberUtils.min(double0, double0, (double) shortArray0[0]);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals((-414.53), double1, 0.01D);
  }

  @Test
  public void test121()  throws Throwable  {
      String string0 = "%S!gt5|!PIg-`:L}";
      int int0 = 5875;
      int int1 = NumberUtils.toInt(string0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(5875, int1);
      
      float float0 = NumberUtils.max((float) int1, (float) int1, (float) int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(5875.0F, float0, 0.01F);
  }

  @Test
  public void test122()  throws Throwable  {
      String string0 = "-0l";
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test123()  throws Throwable  {
      String string0 = null;
      int int0 = NumberUtils.stringToInt(string0);
      assertEquals(0, int0);
  }

  @Test
  public void test124()  throws Throwable  {
      String string0 = "-";
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test125()  throws Throwable  {
      String string0 = "%S!gt5|!PIg-`:L}";
      int int0 = 5875;
      int int1 = NumberUtils.toInt(string0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(5875, int1);
      
      float float0 = NumberUtils.min((float) int0, (float) int1, (float) int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(5875.0F, float0, 0.01F);
  }

  @Test
  public void test126()  throws Throwable  {
      String string0 = "%S!gt5|!PIg-`:L}";
      int int0 = 5875;
      int int1 = NumberUtils.toInt(string0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(5875, int1);
      
      double double0 = NumberUtils.max((double) int1, (double) int0, (double) int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(5875.0, double0, 0.01D);
  }

  @Test
  public void test127()  throws Throwable  {
      String string0 = "L";
      int int0 = 8192;
      int int1 = NumberUtils.toInt(string0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(8192, int1);
      
      int int2 = NumberUtils.stringToInt(string0, int1);
      assertTrue(int1 == int0);
      assertTrue(int1 == int2);
      assertTrue(int0 == int2);
      assertTrue(int0 == int1);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(8192, int2);
  }
}
