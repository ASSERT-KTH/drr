/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:21:33 GMT 2014
 */

package org.apache.commons.lang.math;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;


public class NumberUtilsEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      String string0 = "l";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test001()  throws Throwable  {
      String string0 = "e";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test002()  throws Throwable  {
      String string0 = "1";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test003()  throws Throwable  {
      String string0 = " ";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test004()  throws Throwable  {
      String string0 = "--o#g.apachecommons.lang.math.NumberUtils";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test005()  throws Throwable  {
      String string0 = "+ke~+{RK8\\#QQp79R@4";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test006()  throws Throwable  {
      String string0 = "e}mnFwB7-SA8R}bP";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test007()  throws Throwable  {
      String string0 = "...";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test008()  throws Throwable  {
      String string0 = ".F";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test009()  throws Throwable  {
      String string0 = "0E%oejf&,Zr";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test010()  throws Throwable  {
      String string0 = "0xc1&^Xn_9XGj?i5qc";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test011()  throws Throwable  {
      String string0 = "0xe";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test012()  throws Throwable  {
      String string0 = "0xDxwO!g\"-@Y^%5WN2}";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test013()  throws Throwable  {
      String string0 = "0x";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test014()  throws Throwable  {
      String string0 = "-";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test015()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = "0D";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test017()  throws Throwable  {
      String string0 = "6";
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test018()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test019()  throws Throwable  {
      String string0 = "K";
      int int0 = 65;
      int int1 = NumberUtils.min(int0, int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(65, int1);
      
      long long0 = (-2077L);
      long long1 = NumberUtils.toLong(string0, long0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals((-2077L), long1);
      
      int int2 = NumberUtils.compare((float) int1, (float) long1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertTrue(long1 == long0);
      assertFalse(int1 == int2);
      assertTrue(int1 == int0);
      assertTrue(long0 == long1);
      assertTrue(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(1, int2);
  }

  @Test
  public void test020()  throws Throwable  {
      int int0 = 2952;
      int int1 = (-1914);
      int int2 = NumberUtils.min(int0, int1, int1);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1914), int2);
      
      int int3 = NumberUtils.max(int2, int0, int0);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(2952, int3);
      
      int int4 = NumberUtils.compare((double) int1, (double) int3);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int4);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int4);
      assertFalse(int0 == int4);
      assertTrue(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int4);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int4);
  }

  @Test
  public void test021()  throws Throwable  {
      byte byte0 = (byte) (-125);
      byte byte1 = (byte)112;
      byte byte2 = NumberUtils.max(byte0, byte0, byte1);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertEquals((byte)112, byte2);
  }

  @Test
  public void test022()  throws Throwable  {
      byte byte0 = (byte)46;
      byte byte1 = (byte)91;
      byte byte2 = NumberUtils.max(byte0, byte1, byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
      assertEquals((byte)91, byte2);
  }

  @Test
  public void test023()  throws Throwable  {
      byte byte0 = (byte) (-77);
      short short0 = (short)10;
      short short1 = NumberUtils.max((short) byte0, (short) byte0, short0);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
      assertEquals((short)10, short1);
  }

  @Test
  public void test024()  throws Throwable  {
      short short0 = (short)0;
      short short1 = (short) (-1579);
      short short2 = NumberUtils.max(short1, short0, short0);
      assertFalse(short1 == short2);
      assertFalse(short1 == short0);
      assertTrue(short0 == short2);
      assertFalse(short0 == short1);
      assertTrue(short2 == short0);
      assertFalse(short2 == short1);
      assertEquals((short)0, short2);
  }

  @Test
  public void test025()  throws Throwable  {
      int int0 = 65;
      int int1 = NumberUtils.min(int0, int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(65, int1);
      
      int int2 = 955;
      assertFalse(int2 == int1);
      
      int int3 = NumberUtils.max(int0, int1, int2);
      assertTrue(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertTrue(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int1 == int3);
      assertTrue(int1 == int0);
      assertFalse(int1 == int2);
      assertEquals(955, int3);
  }

  @Test
  public void test026()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short short0 = (short)1693;
      shortArray0[1] = short0;
      long long0 = NumberUtils.max((long) shortArray0[0], (long) shortArray0[0], (long) shortArray0[1]);
      assertArrayEquals(new short[] {(short)0, (short)1693, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(1693L, long0);
  }

  @Test
  public void test027()  throws Throwable  {
      byte byte0 = (byte)45;
      short short0 = (short)0;
      long long0 = NumberUtils.max((long) short0, (long) byte0, (long) short0);
      assertEquals(45L, long0);
  }

  @Test
  public void test028()  throws Throwable  {
      byte byte0 = (byte)24;
      byte byte1 = (byte) (-13);
      byte byte2 = NumberUtils.min(byte0, byte1, byte1);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
      assertEquals((byte) (-13), byte2);
  }

  @Test
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)45;
      byte byte1 = NumberUtils.min(byte0, byte0, byteArray0[0]);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals((byte)0, byte1);
  }

  @Test
  public void test030()  throws Throwable  {
      byte byte0 = (byte) (-36);
      short short0 = (short)3461;
      short short1 = NumberUtils.min(short0, (short) byte0, (short) byte0);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertEquals((short) (-36), short1);
  }

  @Test
  public void test031()  throws Throwable  {
      int int0 = 65;
      int int1 = (-220);
      int int2 = NumberUtils.min(int0, int0, int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertEquals((-220), int2);
  }

  @Test
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)0;
      long long0 = (-272L);
      long long1 = NumberUtils.min((long) byte0, (long) byteArray0[0], long0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals((-272L), long1);
  }

  @Test
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)45;
      short short0 = (short) (-1156);
      short short1 = NumberUtils.min((short) byteArray0[0], (short) byte0, short0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertTrue(short1 == short0);
      assertTrue(short0 == short1);
      assertEquals((short) (-1156), short1);
      
      long long0 = NumberUtils.min((long) byteArray0[0], (long) short1, (long) short1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertTrue(short1 == short0);
      assertTrue(short0 == short1);
      assertEquals((-1156L), long0);
  }

  @Test
  public void test034()  throws Throwable  {
      float[] floatArray0 = new float[10];
      float float0 = 1.7011038F;
      floatArray0[3] = float0;
      float float1 = NumberUtils.max(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1.7011038F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(float1 == float0);
      assertEquals(1.7011038F, float1, 0.01F);
  }

  @Test
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)45;
      byteArray0[0] = byte0;
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = (double) byteArray0[0];
      double double0 = NumberUtils.max(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 45.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(45.0, double0, 0.01D);
  }

  @Test
  public void test036()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try {
        double double0 = NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)63;
      byteArray0[5] = byte0;
      byte byte1 = NumberUtils.max(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)63}, byteArray0);
      assertTrue(byte1 == byte0);
      assertEquals((byte)63, byte1);
  }

  @Test
  public void test038()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try {
        byte byte0 = NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test039()  throws Throwable  {
      short[] shortArray0 = new short[10];
      short short0 = (short)65;
      shortArray0[8] = short0;
      short short1 = NumberUtils.max(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)65, (short)0}, shortArray0);
      assertTrue(short1 == short0);
      assertEquals((short)65, short1);
  }

  @Test
  public void test040()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test041()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = 544;
      intArray0[3] = int0;
      int int1 = NumberUtils.max(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 544, 0, 0}, intArray0);
      assertTrue(int1 == int0);
      assertEquals(544, int1);
  }

  @Test
  public void test042()  throws Throwable  {
      short short0 = (short)1693;
      long[] longArray0 = new long[8];
      longArray0[4] = (long) short0;
      long long0 = NumberUtils.max(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 1693L, 0L, 0L, 0L}, longArray0);
      assertEquals(1693L, long0);
  }

  @Test
  public void test043()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try {
        long long0 = NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test044()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float float0 = 1141.01F;
      floatArray0[0] = float0;
      float float1 = NumberUtils.min(floatArray0);
      assertArrayEquals(new float[] {1141.01F, 0.0F}, floatArray0, 0.01F);
      assertFalse(float1 == float0);
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test
  public void test045()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float float0 = NumberUtils.min(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test046()  throws Throwable  {
      short short0 = (short)3330;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) short0;
      double double0 = NumberUtils.min(doubleArray0);
      assertArrayEquals(new double[] {3330.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test047()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try {
        double double0 = NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = NumberUtils.min(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test049()  throws Throwable  {
      byte byte0 = (byte) (-77);
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = byte0;
      byte byte1 = NumberUtils.min(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-77), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(byte1 == byte0);
      assertEquals((byte) (-77), byte1);
  }

  @Test
  public void test050()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try {
        byte byte0 = NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test051()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short short0 = (short) (-6);
      shortArray0[1] = short0;
      short short1 = NumberUtils.min(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-6), (short)0, (short)0}, shortArray0);
      assertTrue(short1 == short0);
      assertEquals((short) (-6), short1);
  }

  @Test
  public void test052()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test053()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = (-1155);
      intArray0[6] = int0;
      int int1 = NumberUtils.min(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, (-1155)}, intArray0);
      assertTrue(int1 == int0);
      assertEquals((-1155), int1);
  }

  @Test
  public void test054()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test055()  throws Throwable  {
      long[] longArray0 = new long[8];
      long long0 = (-1268L);
      longArray0[2] = long0;
      long long1 = NumberUtils.min(longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-1268L), 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertTrue(long1 == long0);
      assertEquals((-1268L), long1);
  }

  @Test
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 2275.5798274433937;
      doubleArray0[0] = double0;
      double[] doubleArray1 = new double[6];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = NumberUtils.equals(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2275.5798274433937, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
  }

  @Test
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[4];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = NumberUtils.equals(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean0);
  }

  @Test
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[6];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = NumberUtils.equals(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean0);
  }

  @Test
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = null;
      boolean boolean0 = NumberUtils.equals(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = NumberUtils.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
  }

  @Test
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = null;
      boolean boolean0 = NumberUtils.equals(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test
  public void test062()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float float0 = (-2036.158F);
      floatArray0[0] = float0;
      float[] floatArray1 = new float[5];
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = NumberUtils.equals(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-2036.158F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean0);
  }

  @Test
  public void test063()  throws Throwable  {
      float[] floatArray0 = new float[8];
      float[] floatArray1 = new float[14];
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = NumberUtils.equals(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean0);
  }

  @Test
  public void test064()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = NumberUtils.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
  }

  @Test
  public void test065()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float[] floatArray1 = new float[5];
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = NumberUtils.equals(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean0);
  }

  @Test
  public void test066()  throws Throwable  {
      long[] longArray0 = new long[6];
      long long0 = (-460L);
      longArray0[1] = long0;
      long[] longArray1 = new long[6];
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean0 = NumberUtils.equals(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, (-460L), 0L, 0L, 0L, 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(boolean0);
  }

  @Test
  public void test067()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = new long[1];
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean0 = NumberUtils.equals(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertTrue(boolean0);
  }

  @Test
  public void test068()  throws Throwable  {
      long[] longArray0 = new long[7];
      long[] longArray1 = null;
      boolean boolean0 = NumberUtils.equals(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test069()  throws Throwable  {
      long[] longArray0 = new long[3];
      boolean boolean0 = NumberUtils.equals(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertTrue(boolean0);
  }

  @Test
  public void test070()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = new long[3];
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean0 = NumberUtils.equals(longArray0, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(boolean0);
  }

  @Test
  public void test071()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = (-1);
      intArray0[3] = int0;
      int[] intArray1 = new int[2];
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = intArray0[3];
      int[] intArray2 = new int[2];
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      boolean boolean0 = NumberUtils.equals(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray2);
      assertArrayEquals(new int[] {(-1), 0}, intArray1);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(boolean0);
  }

  @Test
  public void test072()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = new int[2];
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean0 = NumberUtils.equals(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertTrue(boolean0);
  }

  @Test
  public void test073()  throws Throwable  {
      int[] intArray0 = new int[4];
      boolean boolean0 = NumberUtils.equals(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertTrue(boolean0);
  }

  @Test
  public void test074()  throws Throwable  {
      int[] intArray0 = new int[6];
      int[] intArray1 = new int[2];
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean0 = NumberUtils.equals(intArray1, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(boolean0);
  }

  @Test
  public void test075()  throws Throwable  {
      short short0 = (short) (-8);
      short[] shortArray0 = new short[2];
      shortArray0[1] = short0;
      short[] shortArray1 = new short[2];
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean0 = NumberUtils.equals(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short) (-8)}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(boolean0);
  }

  @Test
  public void test076()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short[] shortArray1 = new short[2];
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean0 = NumberUtils.equals(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertTrue(boolean0);
  }

  @Test
  public void test077()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short[] shortArray1 = null;
      boolean boolean0 = NumberUtils.equals(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test078()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short[] shortArray1 = null;
      boolean boolean0 = NumberUtils.equals(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test079()  throws Throwable  {
      short[] shortArray0 = new short[6];
      boolean boolean0 = NumberUtils.equals(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertTrue(boolean0);
  }

  @Test
  public void test080()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = new short[5];
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean0 = NumberUtils.equals(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean0);
  }

  @Test
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)4;
      byteArray0[3] = byte0;
      byte[] byteArray1 = new byte[4];
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = NumberUtils.equals(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)4}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean0);
  }

  @Test
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[4];
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = NumberUtils.equals(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean0);
  }

  @Test
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = null;
      boolean boolean0 = NumberUtils.equals(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = NumberUtils.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertTrue(boolean0);
  }

  @Test
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = new byte[2];
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = NumberUtils.equals(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(boolean0);
  }

  @Test
  public void test086()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try {
        BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test087()  throws Throwable  {
      String string0 = null;
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
      assertNull(bigDecimal0);
  }

  @Test
  public void test088()  throws Throwable  {
      String string0 = null;
      BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
      assertNull(bigInteger0);
  }

  @Test
  public void test089()  throws Throwable  {
      String string0 = null;
      Long long0 = NumberUtils.createLong(string0);
  }

  @Test
  public void test090()  throws Throwable  {
      String string0 = null;
      Integer integer0 = NumberUtils.createInteger(string0);
  }

  @Test
  public void test091()  throws Throwable  {
      String string0 = null;
      Double double0 = NumberUtils.createDouble(string0);
  }

  @Test
  public void test092()  throws Throwable  {
      String string0 = null;
      Float float0 = NumberUtils.createFloat(string0);
  }

  @Test
  public void test093()  throws Throwable  {
      String string0 = "'0MLx\"0En)mxmt|?Q";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // '0MLx\"0En)mxmt|?Q is not a valid number.
         //
      }
  }

  @Test
  public void test094()  throws Throwable  {
      String string0 = "tNH}>3G_j*-o5";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
      }
  }

  @Test
  public void test095()  throws Throwable  {
      String string0 = "Strings must not be null";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Strings must not be null is not a valid number.
         //
      }
  }

  @Test
  public void test096()  throws Throwable  {
      String string0 = "H:}x*MiVsJuN?f";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // H:}x*MiVsJuN?f is not a valid number.
         //
      }
  }

  @Test
  public void test097()  throws Throwable  {
      String string0 = ")=OL";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // )=OL is not a valid number.
         //
      }
  }

  @Test
  public void test098()  throws Throwable  {
      String string0 = "LWF";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // LWF is not a valid number.
         //
      }
  }

  @Test
  public void test099()  throws Throwable  {
      String string0 = "e";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // e is not a valid number.
         //
      }
  }

  @Test
  public void test100()  throws Throwable  {
      String string0 = "&:]:+[9{%$dVyE2";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test101()  throws Throwable  {
      String string0 = "Array cannot be empty.";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Array cannot be empty. is not a valid number.
         //
      }
  }

  @Test
  public void test102()  throws Throwable  {
      String string0 = "org.apache.commons.lang.math.NumberUtils";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // org.apache.commons.lang.math.NumberUtils is not a valid number.
         //
      }
  }

  @Test
  public void test103()  throws Throwable  {
      String string0 = "sJS|.!DqK0";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test104()  throws Throwable  {
      String string0 = "-0xorg.apache.commons.lang.math.NumberUtils";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-org.apache.commons.lang.math.NumberUtils\"
         //
      }
  }

  @Test
  public void test105()  throws Throwable  {
      String string0 = "0xCannot pad a negative amount: ";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Cannot pad a negative amount: \"
         //
      }
  }

  @Test
  public void test106()  throws Throwable  {
      String string0 = "--|<V";
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test107()  throws Throwable  {
      String string0 = "";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test108()  throws Throwable  {
      String string0 = null;
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test109()  throws Throwable  {
      String string0 = "0D";
      BigDecimal bigDecimal0 = (BigDecimal)NumberUtils.createNumber(string0);
      assertNotNull(bigDecimal0);
      assertEquals(0, bigDecimal0.shortValue());
      assertEquals(0, bigDecimal0.byteValue());
  }

  @Test
  public void test110()  throws Throwable  {
      String string0 = null;
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test111()  throws Throwable  {
      float[] floatArray0 = new float[2];
      String string0 = null;
      float float0 = NumberUtils.toFloat(string0, floatArray0[1]);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test112()  throws Throwable  {
      String string0 = null;
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
  }

  @Test
  public void test113()  throws Throwable  {
      String string0 = null;
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
  }

  @Test
  public void test114()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      assertNotNull(numberUtils0);
  }

  @Test
  public void test115()  throws Throwable  {
      byte byte0 = (byte)3;
      double double0 = NumberUtils.min((double) byte0, (double) byte0, (double) byte0);
      assertEquals(3.0, double0, 0.01D);
  }

  @Test
  public void test116()  throws Throwable  {
      int[] intArray0 = new int[17];
      float float0 = NumberUtils.max((float) intArray0[6], (float) intArray0[2], (float) intArray0[2]);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test117()  throws Throwable  {
      String string0 = "+\"Nc";
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test118()  throws Throwable  {
      String string0 = "f=v4w9 }M`[f";
      int int0 = NumberUtils.stringToInt(string0);
      assertEquals(0, int0);
  }

  @Test
  public void test119()  throws Throwable  {
      String string0 = "0E%oejf&,Zr";
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test120()  throws Throwable  {
      float float0 = 977.463F;
      float float1 = NumberUtils.min(float0, float0, float0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals(977.463F, float1, 0.01F);
  }

  @Test
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)63;
      double double0 = NumberUtils.max((double) byteArray0[5], (double) byteArray0[2], (double) byte0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(63.0, double0, 0.01D);
  }

  @Test
  public void test122()  throws Throwable  {
      String string0 = "0D";
      int int0 = 2293;
      int int1 = NumberUtils.stringToInt(string0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(2293, int1);
  }
}
