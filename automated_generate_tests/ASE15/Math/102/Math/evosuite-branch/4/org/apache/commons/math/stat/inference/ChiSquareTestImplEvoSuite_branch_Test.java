/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:03:53 GMT 2014
 */

package org.apache.commons.math.stat.inference;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.distribution.ChiSquaredDistribution;
import org.apache.commons.math.distribution.ChiSquaredDistributionImpl;
import org.apache.commons.math.distribution.DistributionFactoryImpl;
import org.apache.commons.math.distribution.GammaDistribution;
import org.apache.commons.math.distribution.GammaDistributionImpl;
import org.apache.commons.math.stat.inference.ChiSquareTestImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;


public class ChiSquareTestImplEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      long[] longArray0 = new long[10];
      long long0 = (-2818L);
      longArray0[5] = long0;
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[][] longArray1 = new long[2][5];
      longArray1[0] = longArray0;
      assertNotNull(longArray1[0]);
      
      longArray1[1] = longArray1[0];
      assertNotNull(longArray1[1]);
      
      try {
        double double0 = chiSquareTestImpl0.chiSquareTest(longArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All entries in input 2-way table must be non-negative
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[][] longArray0 = new long[6][6];
      long[] longArray1 = new long[16];
      longArray0[3] = longArray1;
      assertNotNull(longArray0[3]);
      
      try {
        double double0 = chiSquareTestImpl0.chiSquare(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input table must be rectangular
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[][] longArray0 = new long[8][9];
      long[] longArray1 = new long[1];
      longArray0[0] = longArray1;
      assertNotNull(longArray0[0]);
      
      try {
        double double0 = chiSquareTestImpl0.chiSquare(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input table must have at least two columns
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[][] longArray0 = new long[1][5];
      try {
        double double0 = chiSquareTestImpl0.chiSquareTest(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input table must have at least two rows
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      double double0 = 3320.877732778662;
      GammaDistributionImpl gammaDistributionImpl0 = new GammaDistributionImpl(double0, double0);
      assertEquals(3320.877732778662, gammaDistributionImpl0.getBeta(), 0.01D);
      assertEquals(3320.877732778662, gammaDistributionImpl0.getAlpha(), 0.01D);
      assertNotNull(gammaDistributionImpl0);
      
      ChiSquaredDistributionImpl chiSquaredDistributionImpl0 = new ChiSquaredDistributionImpl(double0, (GammaDistribution) gammaDistributionImpl0);
      assertEquals(1660.438866389331, gammaDistributionImpl0.getAlpha(), 0.01D);
      assertEquals(3320.877732778662, gammaDistributionImpl0.getBeta(), 0.01D);
      assertEquals(3320.877732778662, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertNotNull(chiSquaredDistributionImpl0);
      
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl((ChiSquaredDistribution) chiSquaredDistributionImpl0);
      assertEquals(1660.438866389331, gammaDistributionImpl0.getAlpha(), 0.01D);
      assertEquals(3320.877732778662, gammaDistributionImpl0.getBeta(), 0.01D);
      assertEquals(3320.877732778662, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertNotNull(chiSquareTestImpl0);
      
      long[] longArray0 = new long[3];
      long[][] longArray1 = new long[24][10];
      long long0 = 3145L;
      longArray0[0] = long0;
      longArray0[1] = longArray0[0];
      longArray0[2] = longArray0[0];
      longArray1[4] = longArray0;
      assertNotNull(longArray1[4]);
      
      longArray1[6] = longArray0;
      assertNotNull(longArray1[6]);
      
      double[] doubleArray0 = new double[3];
      double double1 = 1.580887032249125E-4;
      doubleArray0[2] = double1;
      boolean boolean0 = chiSquareTestImpl0.chiSquareTestDataSetsComparison(longArray1[4], longArray1[6], doubleArray0[2]);
      assertFalse(boolean0);
      assertEquals(1.0, gammaDistributionImpl0.getAlpha(), 0.01D);
      assertEquals(3320.877732778662, gammaDistributionImpl0.getBeta(), 0.01D);
      assertEquals(2.0, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 1.580887032249125E-4}, doubleArray0, 0.01);
      assertFalse(double0 == double1);
  }

  @Test
  public void test05()  throws Throwable  {
      double double0 = 3320.877732778662;
      GammaDistributionImpl gammaDistributionImpl0 = new GammaDistributionImpl(double0, double0);
      assertEquals(3320.877732778662, gammaDistributionImpl0.getAlpha(), 0.01D);
      assertEquals(3320.877732778662, gammaDistributionImpl0.getBeta(), 0.01D);
      assertNotNull(gammaDistributionImpl0);
      
      ChiSquaredDistributionImpl chiSquaredDistributionImpl0 = new ChiSquaredDistributionImpl(double0, (GammaDistribution) gammaDistributionImpl0);
      assertEquals(3320.877732778662, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertEquals(1660.438866389331, gammaDistributionImpl0.getAlpha(), 0.01D);
      assertEquals(3320.877732778662, gammaDistributionImpl0.getBeta(), 0.01D);
      assertNotNull(chiSquaredDistributionImpl0);
      
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl((ChiSquaredDistribution) chiSquaredDistributionImpl0);
      assertEquals(3320.877732778662, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertEquals(1660.438866389331, gammaDistributionImpl0.getAlpha(), 0.01D);
      assertEquals(3320.877732778662, gammaDistributionImpl0.getBeta(), 0.01D);
      assertNotNull(chiSquareTestImpl0);
      
      long[] longArray0 = new long[3];
      long long0 = 3145L;
      longArray0[0] = long0;
      longArray0[2] = longArray0[0];
      try {
        boolean boolean0 = chiSquareTestImpl0.chiSquareTestDataSetsComparison(longArray0, longArray0, (double) longArray0[2]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad significance level: 3145.0
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      double double0 = 3321.6467247751234;
      GammaDistributionImpl gammaDistributionImpl0 = new GammaDistributionImpl(double0, double0);
      assertEquals(3321.6467247751234, gammaDistributionImpl0.getAlpha(), 0.01D);
      assertEquals(3321.6467247751234, gammaDistributionImpl0.getBeta(), 0.01D);
      assertNotNull(gammaDistributionImpl0);
      
      ChiSquaredDistributionImpl chiSquaredDistributionImpl0 = new ChiSquaredDistributionImpl(double0, (GammaDistribution) gammaDistributionImpl0);
      assertEquals(3321.6467247751234, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertEquals(1660.8233623875617, gammaDistributionImpl0.getAlpha(), 0.01D);
      assertEquals(3321.6467247751234, gammaDistributionImpl0.getBeta(), 0.01D);
      assertNotNull(chiSquaredDistributionImpl0);
      
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl((ChiSquaredDistribution) chiSquaredDistributionImpl0);
      assertEquals(3321.6467247751234, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertEquals(1660.8233623875617, gammaDistributionImpl0.getAlpha(), 0.01D);
      assertEquals(3321.6467247751234, gammaDistributionImpl0.getBeta(), 0.01D);
      assertNotNull(chiSquareTestImpl0);
      
      long[] longArray0 = new long[3];
      try {
        boolean boolean0 = chiSquareTestImpl0.chiSquareTestDataSetsComparison(longArray0, longArray0, (double) longArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad significance level: 0.0
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      double double0 = 3321.6467247751234;
      GammaDistributionImpl gammaDistributionImpl0 = new GammaDistributionImpl(double0, double0);
      assertEquals(3321.6467247751234, gammaDistributionImpl0.getAlpha(), 0.01D);
      assertEquals(3321.6467247751234, gammaDistributionImpl0.getBeta(), 0.01D);
      assertNotNull(gammaDistributionImpl0);
      
      ChiSquaredDistributionImpl chiSquaredDistributionImpl0 = new ChiSquaredDistributionImpl(double0, (GammaDistribution) gammaDistributionImpl0);
      assertEquals(3321.6467247751234, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertEquals(1660.8233623875617, gammaDistributionImpl0.getAlpha(), 0.01D);
      assertEquals(3321.6467247751234, gammaDistributionImpl0.getBeta(), 0.01D);
      assertNotNull(chiSquaredDistributionImpl0);
      
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl((ChiSquaredDistribution) chiSquaredDistributionImpl0);
      assertEquals(3321.6467247751234, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertEquals(1660.8233623875617, gammaDistributionImpl0.getAlpha(), 0.01D);
      assertEquals(3321.6467247751234, gammaDistributionImpl0.getBeta(), 0.01D);
      assertNotNull(chiSquareTestImpl0);
      
      long[] longArray0 = new long[3];
      long[][] longArray1 = new long[10][10];
      long long0 = 3145L;
      longArray0[0] = long0;
      long[] longArray2 = new long[3];
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[1] = long0;
      longArray2[2] = long0;
      longArray1[4] = longArray2;
      assertNotNull(longArray1[4]);
      
      longArray1[6] = longArray0;
      assertNotNull(longArray1[6]);
      
      double[] doubleArray0 = new double[3];
      double double1 = 0.5;
      doubleArray0[2] = double1;
      boolean boolean0 = chiSquareTestImpl0.chiSquareTestDataSetsComparison(longArray1[4], longArray1[6], doubleArray0[2]);
      assertTrue(boolean0);
      assertEquals(2.0, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertEquals(1.0, gammaDistributionImpl0.getAlpha(), 0.01D);
      assertEquals(3321.6467247751234, gammaDistributionImpl0.getBeta(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.5}, doubleArray0, 0.01);
      assertFalse(double0 == double1);
  }

  @Test
  public void test08()  throws Throwable  {
      double double0 = 3320.877732778662;
      GammaDistributionImpl gammaDistributionImpl0 = new GammaDistributionImpl(double0, double0);
      assertEquals(3320.877732778662, gammaDistributionImpl0.getAlpha(), 0.01D);
      assertEquals(3320.877732778662, gammaDistributionImpl0.getBeta(), 0.01D);
      assertNotNull(gammaDistributionImpl0);
      
      ChiSquaredDistributionImpl chiSquaredDistributionImpl0 = new ChiSquaredDistributionImpl(double0, (GammaDistribution) gammaDistributionImpl0);
      assertEquals(3320.877732778662, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertEquals(1660.438866389331, gammaDistributionImpl0.getAlpha(), 0.01D);
      assertEquals(3320.877732778662, gammaDistributionImpl0.getBeta(), 0.01D);
      assertNotNull(chiSquaredDistributionImpl0);
      
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl((ChiSquaredDistribution) chiSquaredDistributionImpl0);
      assertEquals(3320.877732778662, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertEquals(1660.438866389331, gammaDistributionImpl0.getAlpha(), 0.01D);
      assertEquals(3320.877732778662, gammaDistributionImpl0.getBeta(), 0.01D);
      assertNotNull(chiSquareTestImpl0);
      
      long[] longArray0 = new long[3];
      long[][] longArray1 = new long[24][10];
      long long0 = 3145L;
      longArray0[0] = long0;
      longArray1[4] = longArray0;
      assertNotNull(longArray1[4]);
      
      longArray1[6] = longArray0;
      assertNotNull(longArray1[6]);
      
      double[] doubleArray0 = new double[3];
      double double1 = 1.580887032249125E-4;
      doubleArray0[2] = double1;
      try {
        boolean boolean0 = chiSquareTestImpl0.chiSquareTestDataSetsComparison(longArray1[4], longArray1[6], doubleArray0[2]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // observed counts must not both be zero
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      long[] longArray0 = new long[10];
      long long0 = (-1L);
      long[] longArray1 = new long[10];
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[8] = long0;
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      try {
        double double0 = chiSquareTestImpl0.chiSquareTestDataSetsComparison(longArray0, longArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // observed counts must be non-negative
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long long0 = (-1L);
      long[] longArray0 = new long[6];
      longArray0[2] = long0;
      try {
        double double0 = chiSquareTestImpl0.chiSquareTestDataSetsComparison(longArray0, longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // observed counts must be non-negative
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[] longArray0 = new long[8];
      long[] longArray1 = new long[10];
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      try {
        double double0 = chiSquareTestImpl0.chiSquareTestDataSetsComparison(longArray0, longArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // oberved1, observed2 array lengths incorrect
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      long[] longArray0 = new long[1];
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      try {
        double double0 = chiSquareTestImpl0.chiSquareDataSetsComparison(longArray0, longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // oberved1, observed2 array lengths incorrect
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[][] longArray0 = new long[5][2];
      long[] longArray1 = new long[6];
      long long0 = 39L;
      longArray1[2] = long0;
      try {
        boolean boolean0 = chiSquareTestImpl0.chiSquareTest(longArray0, (double) longArray1[2]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad significance level: 39.0
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[][] longArray0 = new long[1][8];
      long long0 = (-15L);
      try {
        boolean boolean0 = chiSquareTestImpl0.chiSquareTest(longArray0, (double) long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad significance level: -15.0
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      double double0 = 3320.877732778662;
      GammaDistributionImpl gammaDistributionImpl0 = new GammaDistributionImpl(double0, double0);
      assertEquals(3320.877732778662, gammaDistributionImpl0.getAlpha(), 0.01D);
      assertEquals(3320.877732778662, gammaDistributionImpl0.getBeta(), 0.01D);
      assertNotNull(gammaDistributionImpl0);
      
      ChiSquaredDistributionImpl chiSquaredDistributionImpl0 = new ChiSquaredDistributionImpl(double0, (GammaDistribution) gammaDistributionImpl0);
      assertEquals(3320.877732778662, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertEquals(1660.438866389331, gammaDistributionImpl0.getAlpha(), 0.01D);
      assertEquals(3320.877732778662, gammaDistributionImpl0.getBeta(), 0.01D);
      assertNotNull(chiSquaredDistributionImpl0);
      
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl((ChiSquaredDistribution) chiSquaredDistributionImpl0);
      assertEquals(3320.877732778662, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertEquals(1660.438866389331, gammaDistributionImpl0.getAlpha(), 0.01D);
      assertEquals(3320.877732778662, gammaDistributionImpl0.getBeta(), 0.01D);
      assertNotNull(chiSquareTestImpl0);
      
      long[] longArray0 = new long[3];
      long long0 = 3145L;
      longArray0[0] = long0;
      longArray0[2] = longArray0[0];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      double double1 = 1.580887032249125E-4;
      doubleArray0[2] = double1;
      boolean boolean0 = chiSquareTestImpl0.chiSquareTest(doubleArray0, longArray0, doubleArray0[2]);
      assertTrue(boolean0);
      assertEquals(2.0, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertEquals(1.0, gammaDistributionImpl0.getAlpha(), 0.01D);
      assertEquals(3320.877732778662, gammaDistributionImpl0.getBeta(), 0.01D);
      assertArrayEquals(new double[] {3320.877732778662, 3320.877732778662, 1.580887032249125E-4}, doubleArray0, 0.01);
      assertArrayEquals(new long[] {3145L, 0L, 3145L}, longArray0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test16()  throws Throwable  {
      double double0 = 3314.621489370032;
      GammaDistributionImpl gammaDistributionImpl0 = new GammaDistributionImpl(double0, double0);
      assertEquals(3314.621489370032, gammaDistributionImpl0.getBeta(), 0.01D);
      assertEquals(3314.621489370032, gammaDistributionImpl0.getAlpha(), 0.01D);
      assertNotNull(gammaDistributionImpl0);
      
      ChiSquaredDistributionImpl chiSquaredDistributionImpl0 = new ChiSquaredDistributionImpl(double0, (GammaDistribution) gammaDistributionImpl0);
      assertEquals(3314.621489370032, gammaDistributionImpl0.getBeta(), 0.01D);
      assertEquals(1657.310744685016, gammaDistributionImpl0.getAlpha(), 0.01D);
      assertEquals(3314.621489370032, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertNotNull(chiSquaredDistributionImpl0);
      
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl((ChiSquaredDistribution) chiSquaredDistributionImpl0);
      assertEquals(3314.621489370032, gammaDistributionImpl0.getBeta(), 0.01D);
      assertEquals(1657.310744685016, gammaDistributionImpl0.getAlpha(), 0.01D);
      assertEquals(3314.621489370032, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertNotNull(chiSquareTestImpl0);
      
      long[][] longArray0 = new long[18][10];
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = double0;
      try {
        boolean boolean0 = chiSquareTestImpl0.chiSquareTest(doubleArray0, longArray0[0], doubleArray0[2]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad significance level: 3314.621489370032
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[] longArray0 = new long[1];
      double[] doubleArray0 = new double[2];
      try {
        boolean boolean0 = chiSquareTestImpl0.chiSquareTest(doubleArray0, longArray0, doubleArray0[1]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad significance level: 0.0
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      double double0 = 4.9E-324;
      long[][] longArray0 = new long[5][6];
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      double double1 = chiSquareTestImpl0.chiSquare(doubleArray0, longArray0[3]);
      assertEquals(0.0, double1, 0.01D);
      assertArrayEquals(new double[] {4.9E-324, 4.9E-324, 4.9E-324, 4.9E-324, 4.9E-324, 4.9E-324}, doubleArray0, 0.01);
      assertFalse(double1 == double0);
  }

  @Test
  public void test19()  throws Throwable  {
      double double0 = 3320.877732778662;
      long[] longArray0 = new long[3];
      long long0 = (-1883L);
      longArray0[0] = long0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[0];
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      try {
        double double1 = chiSquareTestImpl0.chiSquare(doubleArray0, longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // observed counts must be non-negative and expected counts must be postive
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      double double0 = 3305.8285885328482;
      GammaDistributionImpl gammaDistributionImpl0 = new GammaDistributionImpl(double0, double0);
      assertEquals(3305.8285885328482, gammaDistributionImpl0.getAlpha(), 0.01D);
      assertEquals(3305.8285885328482, gammaDistributionImpl0.getBeta(), 0.01D);
      assertNotNull(gammaDistributionImpl0);
      
      ChiSquaredDistributionImpl chiSquaredDistributionImpl0 = new ChiSquaredDistributionImpl(double0, (GammaDistribution) gammaDistributionImpl0);
      assertEquals(1652.9142942664241, gammaDistributionImpl0.getAlpha(), 0.01D);
      assertEquals(3305.8285885328482, gammaDistributionImpl0.getBeta(), 0.01D);
      assertEquals(3305.8285885328482, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertNotNull(chiSquaredDistributionImpl0);
      
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl((ChiSquaredDistribution) chiSquaredDistributionImpl0);
      assertEquals(1652.9142942664241, gammaDistributionImpl0.getAlpha(), 0.01D);
      assertEquals(3305.8285885328482, gammaDistributionImpl0.getBeta(), 0.01D);
      assertEquals(3305.8285885328482, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertNotNull(chiSquareTestImpl0);
      
      long[] longArray0 = new long[3];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      double double1 = 1.0E-6;
      doubleArray0[2] = double1;
      boolean boolean0 = chiSquareTestImpl0.chiSquareTest(doubleArray0, longArray0, doubleArray0[2]);
      assertFalse(boolean0);
      assertEquals(3305.8285885328482, gammaDistributionImpl0.getBeta(), 0.01D);
      assertEquals(1.0, gammaDistributionImpl0.getAlpha(), 0.01D);
      assertEquals(2.0, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertArrayEquals(new double[] {3305.8285885328482, 3305.8285885328482, 1.0E-6}, doubleArray0, 0.01);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test21()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[][] longArray0 = new long[5][6];
      double[] doubleArray0 = new double[10];
      try {
        double double0 = chiSquareTestImpl0.chiSquareTest(doubleArray0, longArray0[3]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // observed, expected array lengths incorrect
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      double[] doubleArray0 = new double[1];
      long[] longArray0 = new long[2];
      try {
        double double0 = chiSquareTestImpl0.chiSquare(doubleArray0, longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // observed, expected array lengths incorrect
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      double double0 = 3305.8285885328482;
      GammaDistributionImpl gammaDistributionImpl0 = new GammaDistributionImpl(double0, double0);
      assertEquals(3305.8285885328482, gammaDistributionImpl0.getAlpha(), 0.01D);
      assertEquals(3305.8285885328482, gammaDistributionImpl0.getBeta(), 0.01D);
      assertNotNull(gammaDistributionImpl0);
      
      ChiSquaredDistributionImpl chiSquaredDistributionImpl0 = new ChiSquaredDistributionImpl(double0, (GammaDistribution) gammaDistributionImpl0);
      assertEquals(3305.8285885328482, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertEquals(1652.9142942664241, gammaDistributionImpl0.getAlpha(), 0.01D);
      assertEquals(3305.8285885328482, gammaDistributionImpl0.getBeta(), 0.01D);
      assertNotNull(chiSquaredDistributionImpl0);
      
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl((ChiSquaredDistribution) chiSquaredDistributionImpl0);
      assertEquals(3305.8285885328482, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertEquals(1652.9142942664241, gammaDistributionImpl0.getAlpha(), 0.01D);
      assertEquals(3305.8285885328482, gammaDistributionImpl0.getBeta(), 0.01D);
      assertNotNull(chiSquareTestImpl0);
      
      long[] longArray0 = new long[3];
      double[] doubleArray0 = new double[3];
      double double1 = 1.0E-6;
      doubleArray0[2] = double1;
      try {
        boolean boolean0 = chiSquareTestImpl0.chiSquareTest(doubleArray0, longArray0, doubleArray0[2]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // observed counts must be non-negative and expected counts must be postive
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      double double0 = 4.9E-324;
      long[][] longArray0 = new long[5][6];
      boolean boolean0 = chiSquareTestImpl0.chiSquareTest(longArray0, double0);
      assertFalse(boolean0);
  }

  @Test
  public void test25()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      DistributionFactoryImpl distributionFactoryImpl0 = (DistributionFactoryImpl)chiSquareTestImpl0.getDistributionFactory();
      assertNotNull(distributionFactoryImpl0);
  }

  @Test
  public void test26()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[] longArray0 = new long[6];
      try {
        double double0 = chiSquareTestImpl0.chiSquareTestDataSetsComparison(longArray0, longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // observed counts cannot all be 0
         //
      }
  }
}
