/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:37:57 GMT 2014
 */

package org.apache.commons.math.analysis.solvers;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.HarmonicOscillator;
import org.apache.commons.math.analysis.function.Inverse;
import org.apache.commons.math.analysis.function.Logit;
import org.apache.commons.math.analysis.function.Sigmoid;
import org.apache.commons.math.analysis.function.Tanh;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math.exception.NoBracketingException;
import org.apache.commons.math.exception.TooManyEvaluationsException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class BaseSecantSolverEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      double double0 = (-2839.951311996619);
      int int0 = 29;
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (double) int0;
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = double0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertArrayEquals(new double[] {29.0, (-2839.951311996619), 29.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, polynomialFunction0.degree());
      assertNotNull(polynomialFunction0);
      
      double double1 = 2022.3281414561447;
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, doubleArray0[0], double1, double1, allowedSolution0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(97.9191430784944, double2, 0.01D);
      assertArrayEquals(new double[] {29.0, (-2839.951311996619), 29.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(29, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(2022.3281414561447, illinoisSolver0.getMax(), 0.01D);
      assertEquals(15, illinoisSolver0.getEvaluations());
      assertEquals(2022.3281414561447, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(29.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(2, polynomialFunction0.degree());
  }

  @Test
  public void test01()  throws Throwable  {
      double double0 = (-1.0);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0);
      assertEquals((-1.0), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals((-1.0), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertNotNull(pegasusSolver0);
      
      double double1 = pegasusSolver0.getFunctionValueAccuracy();
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.0E-15, double1, 0.01D);
      assertEquals((-1.0), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals((-1.0), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      
      int int0 = 241;
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = (double) int0;
      doubleArray0[0] = double1;
      assertEquals((-1.0), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals((-1.0), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      
      doubleArray0[5] = double0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertArrayEquals(new double[] {1.0E-15, 0.0, 241.0, 0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction0.degree());
      assertNotNull(polynomialFunction0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, doubleArray0[0], (double) int0, (double) int0, allowedSolution0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(6.2230842555545625, double2, 0.01D);
      assertArrayEquals(new double[] {1.0E-15, 0.0, 241.0, 0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction0.degree());
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(241, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(241.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getMin(), 0.01D);
      assertEquals(131, illinoisSolver0.getEvaluations());
      assertEquals(241.0, illinoisSolver0.getStartValue(), 0.01D);
  }

  @Test
  public void test02()  throws Throwable  {
      double double0 = 108.427937443;
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertNotNull(pegasusSolver0);
      
      int int0 = 1171;
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      double double1 = (-1.7168146928204135);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) inverse0, double1, (double) int0, allowedSolution0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(6.984689308649976E-8, double2, 0.01D);
      assertEquals(584.6415926535898, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1171.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1171, pegasusSolver0.getMaxEvaluations());
      assertEquals((-1.7168146928204135), pegasusSolver0.getMin(), 0.01D);
      assertEquals(69, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(double0, double1, double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertNotNull(harmonicOscillator0);
      
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((double) int0, double2, double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(584.6415926535898, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1171.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1171, pegasusSolver0.getMaxEvaluations());
      assertEquals((-1.7168146928204135), pegasusSolver0.getMin(), 0.01D);
      assertEquals(69, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1171.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(6.984689308649976E-8, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(6.984689308649976E-8, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertNotNull(illinoisSolver0);
      
      double double3 = 1804.818930087;
      assertFalse(double3 == double2);
      
      AllowedSolution allowedSolution1 = AllowedSolution.LEFT_SIDE;
      assertNotSame(allowedSolution1, allowedSolution0);
      
      double double4 = illinoisSolver0.solve(int0, (UnivariateRealFunction) harmonicOscillator0, (double) int0, double3, allowedSolution1);
      assertFalse(allowedSolution0.equals((Object)allowedSolution1));
      assertFalse(double0 == double4);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double4);
      assertFalse(double2 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double4);
      assertFalse(double3 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double4);
      assertFalse(double1 == double2);
      assertFalse(allowedSolution1.equals((Object)allowedSolution0));
      assertFalse(double4 == double3);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertFalse(double4 == double0);
      assertEquals(1334.3209758846137, double4, 0.01D);
      assertNotSame(allowedSolution0, allowedSolution1);
      assertNotSame(allowedSolution1, allowedSolution0);
      assertEquals(584.6415926535898, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1171.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1171, pegasusSolver0.getMaxEvaluations());
      assertEquals((-1.7168146928204135), pegasusSolver0.getMin(), 0.01D);
      assertEquals(69, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1171.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(6.984689308649976E-8, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals(6.984689308649976E-8, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1804.818930087, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1487.9094650435, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1171.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1171, illinoisSolver0.getMaxEvaluations());
  }

  @Test
  public void test03()  throws Throwable  {
      double double0 = 108.427937443;
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertNotNull(pegasusSolver0);
      
      int int0 = 1171;
      double double1 = (-1.7168146928204135);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(double0, (double) int0, double0);
      assertFalse(double0 == double1);
      assertNotNull(harmonicOscillator0);
      
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) harmonicOscillator0, double1, double0, (double) int0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(108.41039671051725, double2, 0.01D);
      assertEquals(108.427937443, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-1.7168146928204135), pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1171, pegasusSolver0.getMaxEvaluations());
      assertEquals(18, pegasusSolver0.getEvaluations());
      assertEquals(1171.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
  }

  @Test
  public void test04()  throws Throwable  {
      double double0 = (-1.0);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals((-1.0), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals((-1.0), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertNotNull(pegasusSolver0);
      
      double double1 = pegasusSolver0.getFunctionValueAccuracy();
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.0E-15, double1, 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals((-1.0), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals((-1.0), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      
      int int0 = 29;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = double1;
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals((-1.0), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals((-1.0), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      
      doubleArray0[2] = double0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertArrayEquals(new double[] {1.0E-15, 0.0, (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, polynomialFunction0.degree());
      assertNotNull(polynomialFunction0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, doubleArray0[0], (double) int0, double1, allowedSolution0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(0.0, double2, 0.01D);
      assertArrayEquals(new double[] {1.0E-15, 0.0, (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals((-1.0), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals((-1.0), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getMin(), 0.01D);
      assertEquals(29, illinoisSolver0.getMaxEvaluations());
      assertEquals(29.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(2, polynomialFunction0.degree());
  }

  @Test
  public void test05()  throws Throwable  {
      double double0 = 108.427937443;
      int int0 = 1171;
      double double1 = (-1.7168146928204135);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(double0, (double) int0, double0);
      assertFalse(double0 == double1);
      assertNotNull(harmonicOscillator0);
      
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((double) int0, double0, double0);
      assertFalse(double0 == double1);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(108.427937443, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(108.427937443, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1171.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) harmonicOscillator0, double1, double0, allowedSolution0);
      assertTrue(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(108.427937443, double2, 0.01D);
      assertEquals(108.427937443, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(108.427937443, illinoisSolver0.getMax(), 0.01D);
      assertEquals(53.35556137508979, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals((-1.7168146928204135), illinoisSolver0.getMin(), 0.01D);
      assertEquals(108.427937443, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1171, illinoisSolver0.getMaxEvaluations());
      assertEquals(1171.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
  }

  @Test
  public void test06()  throws Throwable  {
      double double0 = 109.11838669469844;
      int int0 = 1192;
      double double1 = 0.08371849358081818;
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(double0, double1, double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertNotNull(harmonicOscillator0);
      
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((double) int0, (double) int0, (double) int0);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(1192.0, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(1192.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1192.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) harmonicOscillator0, double1, double0, allowedSolution0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(66.70685989311852, double2, 0.01D);
      assertEquals(1192.0, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1192.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1192.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals(54.60105259413963, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(109.11838669469844, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.08371849358081818, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1192, illinoisSolver0.getMaxEvaluations());
  }

  @Test
  public void test07()  throws Throwable  {
      double double0 = 108.427937443;
      int int0 = 1171;
      double double1 = (-1.7168146928204135);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double2 = 0.08371849358081818;
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(double0, double2, double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertNotNull(harmonicOscillator0);
      
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double1, double1, (double) int0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1171.0, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-1.7168146928204135), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals((-1.7168146928204135), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertNotNull(regulaFalsiSolver0);
      
      double double3 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) harmonicOscillator0, double1, double2, allowedSolution0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertEquals((-0.5135170804528244), double3, 0.01D);
      assertEquals((-1.7168146928204135), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(4, regulaFalsiSolver0.getEvaluations());
      assertEquals((-0.8165480996197977), regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1171.0, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-1.7168146928204135), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1171, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.08371849358081818, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-1.7168146928204135), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
  }

  @Test
  public void test08()  throws Throwable  {
      double double0 = 108.427937443;
      int int0 = 1171;
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(double0, double0, double0);
      assertNotNull(harmonicOscillator0);
      
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((double) int0, (double) int0, (double) int0);
      assertEquals(1171.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1171.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1171.0, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      double double1 = 1804.818930087;
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) harmonicOscillator0, (double) int0, double1, allowedSolution0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(1741.2277603250861, double2, 0.01D);
      assertEquals(1171.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals(1171.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1171.0, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1171.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1804.818930087, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1171, illinoisSolver0.getMaxEvaluations());
      assertEquals(1487.9094650435, illinoisSolver0.getStartValue(), 0.01D);
  }

  @Test
  public void test09()  throws Throwable  {
      double double0 = 109.11838669469844;
      int int0 = 1192;
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(double0, (double) int0, double0);
      assertNotNull(harmonicOscillator0);
      
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((double) int0, (double) int0, (double) int0);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1192.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1192.0, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1192.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertNotNull(illinoisSolver0);
      
      double double1 = 1804.818930087;
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) harmonicOscillator0, (double) int0, double1, allowedSolution0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(1192.0, double2, 0.01D);
      assertEquals(1498.4094650435, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1192.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals(1192.0, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1192, illinoisSolver0.getMaxEvaluations());
      assertEquals(1192.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1804.818930087, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1192.0, illinoisSolver0.getMin(), 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      double double0 = (-1.0);
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0);
      assertEquals((-1.0), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-1.0), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertNotNull(pegasusSolver0);
      
      double double1 = pegasusSolver0.getFunctionValueAccuracy();
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.0E-15, double1, 0.01D);
      assertEquals((-1.0), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-1.0), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      
      int int0 = 241;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = double1;
      assertEquals((-1.0), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-1.0), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      
      doubleArray0[5] = double0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertArrayEquals(new double[] {1.0E-15, 0.0, 0.0, 0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction0.degree());
      assertNotNull(polynomialFunction0);
      
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, double1, (double) int0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(0.0, double2, 0.01D);
      assertArrayEquals(new double[] {1.0E-15, 0.0, 0.0, 0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction0.degree());
      assertEquals(120.5, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getMin(), 0.01D);
      assertEquals((-1.0), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-1.0), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(241, pegasusSolver0.getMaxEvaluations());
      assertEquals(241.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertNotNull(regulaFalsiSolver0);
      
      int int0 = 2866;
      Logit logit0 = new Logit();
      assertNotNull(logit0);
      
      UnivariateRealFunction univariateRealFunction0 = logit0.derivative();
      assertNotNull(univariateRealFunction0);
      
      double double0 = 0.0;
      // Undeclared exception!
      try {
        double double1 = regulaFalsiSolver0.solve(int0, univariateRealFunction0, double0, (double) int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (2,866) exceeded: evaluations
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      double double0 = (-2830.949937380749);
      int int0 = 29;
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = (double) int0;
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = double0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertArrayEquals(new double[] {29.0, (-2830.949937380749), 29.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, polynomialFunction0.degree());
      assertNotNull(polynomialFunction0);
      
      double double1 = 1998.4447487052723;
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, doubleArray0[0], double1, (double) int0, allowedSolution0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(97.60871837106399, double2, 0.01D);
      assertArrayEquals(new double[] {29.0, (-2830.949937380749), 29.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(29.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(29.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(15, illinoisSolver0.getEvaluations());
      assertEquals(29, illinoisSolver0.getMaxEvaluations());
      assertEquals(1998.4447487052723, illinoisSolver0.getMax(), 0.01D);
      assertEquals(2, polynomialFunction0.degree());
  }

  @Test
  public void test13()  throws Throwable  {
      double double0 = (-1.0);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-1.0), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertNotNull(regulaFalsiSolver0);
      
      double double1 = 2.798;
      int int0 = 151;
      Sigmoid sigmoid0 = new Sigmoid(double1, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertNotNull(sigmoid0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double2 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) sigmoid0, double0, double1, allowedSolution0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(1.0289048762432895, double2, 0.01D);
      assertEquals(0.899, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(151, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(2.798, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-1.0), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-1.0), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(23, regulaFalsiSolver0.getEvaluations());
  }

  @Test
  public void test14()  throws Throwable  {
      double double0 = 0.0;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double0, double0);
      assertEquals(0.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertNotNull(regulaFalsiSolver0);
      
      double double1 = regulaFalsiSolver0.getRelativeAccuracy();
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      
      int int0 = 3578;
      Tanh tanh0 = new Tanh();
      assertNotNull(tanh0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double2 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) tanh0, (double) int0, double1, double0, allowedSolution0);
      assertTrue(double0 == double1);
      assertTrue(double0 == double2);
      assertTrue(double1 == double2);
      assertTrue(double1 == double0);
      assertTrue(double2 == double0);
      assertTrue(double2 == double1);
      assertEquals(0.0, double2, 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(3578, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(2, regulaFalsiSolver0.getEvaluations());
      assertEquals(3578.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
  }

  @Test
  public void test15()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertNotNull(illinoisSolver0);
      
      int int0 = 29;
      double[] doubleArray0 = new double[6];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, polynomialFunction0.degree());
      assertNotNull(polynomialFunction0);
      
      double double0 = illinoisSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, (double) int0, (double) int0);
      assertEquals(29.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, polynomialFunction0.degree());
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(29.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(29.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2, illinoisSolver0.getEvaluations());
      assertEquals(29, illinoisSolver0.getMaxEvaluations());
      assertEquals(29.0, illinoisSolver0.getMax(), 0.01D);
  }

  @Test
  public void test16()  throws Throwable  {
      double double0 = 108.427937443;
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertNotNull(pegasusSolver0);
      
      int int0 = 1171;
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      double double1 = (-1.7168146928204135);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) inverse0, double1, (double) int0, allowedSolution0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals((-8.233458523739918E-7), double2, 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1171, pegasusSolver0.getMaxEvaluations());
      assertEquals(1171.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(584.6415926535898, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals((-1.7168146928204135), pegasusSolver0.getMin(), 0.01D);
      assertEquals(69, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(double0, double2, double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1171, pegasusSolver0.getMaxEvaluations());
      assertEquals(1171.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(584.6415926535898, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals((-1.7168146928204135), pegasusSolver0.getMin(), 0.01D);
      assertEquals(69, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertNotNull(harmonicOscillator0);
      
      // Undeclared exception!
      try {
        double double3 = pegasusSolver0.solve(int0, (UnivariateRealFunction) harmonicOscillator0, double1, double0, (double) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [-1.717, 108.428], values: [-4.66, -4.65]
         //
      }
  }
}
