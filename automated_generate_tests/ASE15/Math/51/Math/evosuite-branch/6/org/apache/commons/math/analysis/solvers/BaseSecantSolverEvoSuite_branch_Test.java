/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:48:18 GMT 2014
 */

package org.apache.commons.math.analysis.solvers;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Asin;
import org.apache.commons.math.analysis.function.Cos;
import org.apache.commons.math.analysis.function.Log1p;
import org.apache.commons.math.analysis.function.Sinc;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math.exception.TooManyEvaluationsException;



import org.junit.runner.RunWith;


public class BaseSecantSolverEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      double double0 = 0.125;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0, double0);
      assertNotNull(pegasusSolver0);
      assertEquals(0.125, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.125, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.125, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      
      int int0 = 412;
      double[] doubleArray0 = new double[21];
      doubleArray0[0] = double0;
      double double1 = (-96.27222217);
      doubleArray0[1] = double1;
      doubleArray0[4] = (double) int0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.125, (-96.27222217), 0.0, 0.0, 412.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, polynomialFunction0.degree());
      
      PolynomialFunction polynomialFunction1 = polynomialFunction0.polynomialDerivative();
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertNotNull(polynomialFunction1);
      assertArrayEquals(new double[] {0.125, (-96.27222217), 0.0, 0.0, 412.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, polynomialFunction1.degree());
      assertEquals(4, polynomialFunction0.degree());
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      
      PolynomialFunction polynomialFunction2 = polynomialFunction0.multiply(polynomialFunction1);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertNotNull(polynomialFunction2);
      assertArrayEquals(new double[] {0.125, (-96.27222217), 0.0, 0.0, 412.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, polynomialFunction1.degree());
      assertEquals(7, polynomialFunction2.degree());
      assertEquals(4, polynomialFunction0.degree());
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      
      double double2 = 0.0;
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double3 = pegasusSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction2, double2, double0, doubleArray0[5], allowedSolution0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertEquals(0.0013541456887799785, double3, 0.01D);
      assertArrayEquals(new double[] {0.125, (-96.27222217), 0.0, 0.0, 412.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.125, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.125, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.125, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.125, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(412, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(3, polynomialFunction1.degree());
      assertEquals(7, polynomialFunction2.degree());
      assertEquals(4, polynomialFunction0.degree());
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction0, polynomialFunction2);
  }

  @Test
  public void test01()  throws Throwable  {
      double double0 = 2608.4;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0, double0);
      assertNotNull(pegasusSolver0);
      assertEquals(2608.4, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(2608.4, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(2608.4, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      
      int int0 = 387;
      double[] doubleArray0 = new double[14];
      double double1 = (-139.72052943534655);
      doubleArray0[1] = double1;
      doubleArray0[5] = (double) int0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0, (-139.72052943534655), 0.0, 0.0, 0.0, 387.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction0.degree());
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, doubleArray0[1], double0, doubleArray0[5], allowedSolution0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals((-139.71931753826448), double2, 0.01D);
      assertArrayEquals(new double[] {0.0, (-139.72052943534655), 0.0, 0.0, 0.0, 387.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction0.degree());
      assertEquals(2608.4, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(2608.4, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(387.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(387, pegasusSolver0.getMaxEvaluations());
      assertEquals(2608.4, pegasusSolver0.getMax(), 0.01D);
      assertEquals((-139.72052943534655), pegasusSolver0.getMin(), 0.01D);
      assertEquals(2608.4, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
  }

  @Test
  public void test02()  throws Throwable  {
      double double0 = 4615.8446;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0, double0);
      assertNotNull(pegasusSolver0);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(4615.8446, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(4615.8446, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(4615.8446, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      
      int int0 = 387;
      double[] doubleArray0 = new double[29];
      double double1 = (-67.27162260407505);
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 387.0, 387.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction0.degree());
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, double1, doubleArray0[4], allowedSolution0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(387.0, double2, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 387.0, 387.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(159.86418869796248, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(387.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(4615.8446, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(387, pegasusSolver0.getMaxEvaluations());
      assertEquals(4615.8446, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-67.27162260407505), pegasusSolver0.getMin(), 0.01D);
      assertEquals(4615.8446, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(5, polynomialFunction0.degree());
  }

  @Test
  public void test03()  throws Throwable  {
      double double0 = 2608.4;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0, double0);
      assertNotNull(pegasusSolver0);
      assertEquals(2608.4, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2608.4, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(2608.4, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      
      int int0 = 387;
      double[] doubleArray0 = new double[14];
      double double1 = (-139.72052943534655);
      doubleArray0[5] = (double) int0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 387.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction0.degree());
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, double1, doubleArray0[5], allowedSolution0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals((-136.5093047538951), double2, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 387.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction0.degree());
      assertEquals(2608.4, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2608.4, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(387.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(2608.4, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(387, pegasusSolver0.getMaxEvaluations());
      assertEquals((-139.72052943534655), pegasusSolver0.getMin(), 0.01D);
      assertEquals(123.63973528232671, pegasusSolver0.getStartValue(), 0.01D);
  }

  @Test
  public void test04()  throws Throwable  {
      double double0 = 0.125;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0, double0);
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.125, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.125, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.125, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      
      int int0 = 412;
      double[] doubleArray0 = new double[21];
      doubleArray0[0] = double0;
      double double1 = (-96.27222217);
      doubleArray0[1] = double1;
      doubleArray0[4] = (double) int0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.125, (-96.27222217), 0.0, 0.0, 412.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, polynomialFunction0.degree());
      
      double double2 = 0.0;
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double3 = pegasusSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, double2, double0, doubleArray0[5], allowedSolution0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertTrue(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double3 == double1);
      assertTrue(double3 == double2);
      assertFalse(double3 == double0);
      assertEquals(0.0, double3, 0.01D);
      assertArrayEquals(new double[] {0.125, (-96.27222217), 0.0, 0.0, 412.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(412, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.125, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.125, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.125, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.125, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(4, polynomialFunction0.degree());
  }

  @Test
  public void test05()  throws Throwable  {
      double double0 = 2483.48;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0, double0);
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(2483.48, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(2483.48, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(2483.48, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      
      int int0 = 413;
      double[] doubleArray0 = new double[22];
      doubleArray0[5] = (double) int0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 413.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction0.degree());
      
      double double1 = (-2650.664026865956);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, double1, doubleArray0[5], allowedSolution0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(412.71869458257345, double2, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 413.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(413.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(413, pegasusSolver0.getMaxEvaluations());
      assertEquals((-2650.664026865956), pegasusSolver0.getMin(), 0.01D);
      assertEquals((-1118.832013432978), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(2483.48, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(2483.48, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(2483.48, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(5, polynomialFunction0.degree());
  }

  @Test
  public void test06()  throws Throwable  {
      double double0 = 2583.8685;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0, double0);
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(2583.8685, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2583.8685, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(2583.8685, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      
      int int0 = 378;
      double[] doubleArray0 = new double[6];
      doubleArray0[3] = double0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2583.8685, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, polynomialFunction0.degree());
      
      double double1 = (-2651.529129519401);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, double1, doubleArray0[3], allowedSolution0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertEquals((-2651.529129519401), double2, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2583.8685, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-2651.529129519401), pegasusSolver0.getMin(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(2583.8685, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2583.8685, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(378, pegasusSolver0.getMaxEvaluations());
      assertEquals((-33.83031475970074), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(2583.8685, pegasusSolver0.getMax(), 0.01D);
      assertEquals(2583.8685, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(3, polynomialFunction0.degree());
  }

  @Test
  public void test07()  throws Throwable  {
      double double0 = 2483.48;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0, double0);
      assertNotNull(pegasusSolver0);
      assertEquals(2483.48, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(2483.48, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2483.48, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      
      int int0 = 413;
      double[] doubleArray0 = new double[22];
      double double1 = (-76.74231446260492);
      doubleArray0[1] = double1;
      doubleArray0[5] = (double) int0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0, (-76.74231446260492), 0.0, 0.0, 0.0, 413.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction0.degree());
      
      PolynomialFunction polynomialFunction1 = polynomialFunction0.polynomialDerivative();
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertNotNull(polynomialFunction1);
      assertArrayEquals(new double[] {0.0, (-76.74231446260492), 0.0, 0.0, 0.0, 413.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction0.degree());
      assertEquals(4, polynomialFunction1.degree());
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      
      PolynomialFunction polynomialFunction2 = polynomialFunction1.negate();
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertNotNull(polynomialFunction2);
      assertArrayEquals(new double[] {0.0, (-76.74231446260492), 0.0, 0.0, 0.0, 413.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, polynomialFunction2.degree());
      assertEquals(5, polynomialFunction0.degree());
      assertEquals(4, polynomialFunction1.degree());
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      
      double double2 = (-0.054510272);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double3 = pegasusSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction2, double2, double0, doubleArray0[5], allowedSolution0);
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertFalse(double0 == double2);
      assertTrue(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertTrue(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertEquals(2483.48, double3, 0.01D);
      assertArrayEquals(new double[] {0.0, (-76.74231446260492), 0.0, 0.0, 0.0, 413.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, polynomialFunction2.degree());
      assertEquals(5, polynomialFunction0.degree());
      assertEquals(38, pegasusSolver0.getEvaluations());
      assertEquals(2483.48, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(2483.48, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2483.48, pegasusSolver0.getMax(), 0.01D);
      assertEquals(2483.48, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-0.054510272), pegasusSolver0.getMin(), 0.01D);
      assertEquals(413, pegasusSolver0.getMaxEvaluations());
      assertEquals(413.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(4, polynomialFunction1.degree());
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction1, polynomialFunction2);
  }

  @Test
  public void test08()  throws Throwable  {
      double double0 = 6479.37387;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0, double0);
      assertNotNull(pegasusSolver0);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(6479.37387, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(6479.37387, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(6479.37387, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      
      int int0 = 437;
      double[] doubleArray0 = new double[18];
      doubleArray0[5] = (double) int0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 437.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction0.degree());
      
      double double1 = (-2650.6064434831424);
      double double2 = 0.17333540505551842;
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double3 = pegasusSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, double1, double2, allowedSolution0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertTrue(double3 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(double2 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertEquals(0.17333540505551842, double3, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 437.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction0.degree());
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(0.17333540505551842, pegasusSolver0.getMax(), 0.01D);
      assertEquals((-2650.6064434831424), pegasusSolver0.getMin(), 0.01D);
      assertEquals((-1325.2165540390433), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(6479.37387, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(437, pegasusSolver0.getMaxEvaluations());
      assertEquals(6479.37387, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(6479.37387, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
  }

  @Test
  public void test09()  throws Throwable  {
      double double0 = 2583.8685;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0, double0);
      assertNotNull(pegasusSolver0);
      assertEquals(2583.8685, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(2583.8685, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2583.8685, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      
      int int0 = 1913;
      double[] doubleArray0 = new double[22];
      doubleArray0[1] = (double) int0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 1913.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, polynomialFunction0.degree());
      
      double double1 = (-5.399655157255787);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, double1, double0, doubleArray0[5], allowedSolution0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(2.2420775429197073E-44, double2, 0.01D);
      assertArrayEquals(new double[] {0.0, 1913.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, polynomialFunction0.degree());
      assertEquals(2583.8685, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals((-5.399655157255787), pegasusSolver0.getMin(), 0.01D);
      assertEquals(1913, pegasusSolver0.getMaxEvaluations());
      assertEquals(2583.8685, pegasusSolver0.getMax(), 0.01D);
      assertEquals(2583.8685, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(5, pegasusSolver0.getEvaluations());
      assertEquals(2583.8685, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      double double0 = 2483.48;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0, double0);
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(2483.48, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2483.48, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2483.48, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      
      int int0 = 413;
      double[] doubleArray0 = new double[22];
      double double1 = (-76.74231446260492);
      doubleArray0[1] = double1;
      doubleArray0[5] = (double) int0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0, (-76.74231446260492), 0.0, 0.0, 0.0, 413.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction0.degree());
      
      PolynomialFunction polynomialFunction1 = polynomialFunction0.polynomialDerivative();
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertNotNull(polynomialFunction1);
      assertArrayEquals(new double[] {0.0, (-76.74231446260492), 0.0, 0.0, 0.0, 413.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction0.degree());
      assertEquals(4, polynomialFunction1.degree());
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      
      double double2 = (-0.054510272);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double3 = pegasusSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction1, double2, double0, doubleArray0[5], allowedSolution0);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertEquals((-0.05451027199751479), double3, 0.01D);
      assertArrayEquals(new double[] {0.0, (-76.74231446260492), 0.0, 0.0, 0.0, 413.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(413, pegasusSolver0.getMaxEvaluations());
      assertEquals(2483.48, pegasusSolver0.getMax(), 0.01D);
      assertEquals(413.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals((-0.054510272), pegasusSolver0.getMin(), 0.01D);
      assertEquals(2483.48, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2483.48, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2483.48, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(5, polynomialFunction0.degree());
      assertEquals(4, polynomialFunction1.degree());
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction1, polynomialFunction0);
  }

  @Test
  public void test11()  throws Throwable  {
      double double0 = 0.5;
      int int0 = 2679;
      double double1 = 0.0;
      double double2 = (-1305.016981563);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double1, double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertNotNull(illinoisSolver0);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.5, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.5, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      
      double double3 = illinoisSolver0.getFunctionValueAccuracy();
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertEquals(1.0E-15, double3, 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.5, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.5, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      
      Cos cos0 = new Cos();
      assertNotNull(cos0);
      
      double double4 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) cos0, double2, double1, double3);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double4);
      assertFalse(double2 == double1);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double4);
      assertFalse(double4 == double0);
      assertFalse(double4 == double3);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double4);
      assertFalse(double0 == double4);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertEquals((-240.33183799961918), double4, 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(16, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(2679, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals((-1305.016981563), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.5, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.5, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      double double0 = 0.125;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0, double0);
      assertNotNull(pegasusSolver0);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.125, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.125, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.125, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      
      int int0 = 412;
      double[] doubleArray0 = new double[21];
      doubleArray0[0] = double0;
      double double1 = (-96.27222217);
      doubleArray0[5] = (double) int0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.125, 0.0, 0.0, 0.0, 0.0, 412.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction0.degree());
      
      double double2 = 0.0;
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double3 = pegasusSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, double1, double2, allowedSolution0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertEquals((-0.22698167044342832), double3, 0.01D);
      assertArrayEquals(new double[] {0.125, 0.0, 0.0, 0.0, 0.0, 412.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction0.degree());
      assertEquals(412, pegasusSolver0.getMaxEvaluations());
      assertEquals(38, pegasusSolver0.getEvaluations());
      assertEquals(0.125, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.125, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-48.136111085), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals((-96.27222217), pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.125, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
  }

  @Test
  public void test13()  throws Throwable  {
      double double0 = 0.5;
      int int0 = 2679;
      double double1 = (-1305.016981563);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double0);
      assertFalse(double0 == double1);
      assertNotNull(illinoisSolver0);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.5, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.5, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      
      double double2 = illinoisSolver0.getFunctionValueAccuracy();
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(1.0E-15, double2, 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.5, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.5, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      
      Cos cos0 = new Cos();
      assertNotNull(cos0);
      
      double double3 = illinoisSolver0.solve(int0, (UnivariateRealFunction) cos0, double1, double2, (double) int0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertEquals((-36.11614843561672), double3, 0.01D);
      assertEquals(9, illinoisSolver0.getEvaluations());
      assertEquals(0.5, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.5, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2679, illinoisSolver0.getMaxEvaluations());
      assertEquals(2679.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getMax(), 0.01D);
      assertEquals((-1305.016981563), illinoisSolver0.getMin(), 0.01D);
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = (-2438);
      Asin asin0 = new Asin();
      assertNotNull(asin0);
      
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((double) int0, (double) int0, (double) int0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals((-2438.0), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-2438.0), regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-2438.0), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      
      int int1 = 2651;
      double double0 = (-1.0);
      double double1 = 0.16667;
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double2 = regulaFalsiSolver0.solve(int1, (UnivariateRealFunction) asin0, double0, double1, double0, allowedSolution0);
      assertFalse(int1 == int0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(int0 == int1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(0.0, double2, 0.01D);
      assertEquals((-2438.0), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.16667, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-2438.0), regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(2651, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals((-2438.0), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-1.0), regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(736, regulaFalsiSolver0.getEvaluations());
      assertEquals((-1.0), regulaFalsiSolver0.getMin(), 0.01D);
  }

  @Test
  public void test15()  throws Throwable  {
      double double0 = (-1.0);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals((-1.0), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals((-1.0), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      
      int int0 = 5547;
      Sinc sinc0 = new Sinc();
      assertNotNull(sinc0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      // Undeclared exception!
      try {
        double double1 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) sinc0, double0, (double) int0, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (5,547) exceeded: evaluations
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      double double0 = 1842.8156606167047;
      double double1 = 0.0;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0);
      assertFalse(double0 == double1);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1842.8156606167047, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      
      int int0 = 404;
      Log1p log1p0 = new Log1p();
      assertNotNull(log1p0);
      
      double double2 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) log1p0, (double) int0, double1, (double) int0);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(0.0, double2, 0.01D);
      assertEquals(404, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(404.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(2, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(404.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1842.8156606167047, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
  }

  @Test
  public void test17()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertNotNull(illinoisSolver0);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      
      double double0 = illinoisSolver0.getFunctionValueAccuracy();
      assertEquals(1.0E-15, double0, 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      
      int int0 = 91;
      Asin asin0 = new Asin();
      assertNotNull(asin0);
      
      double double1 = 0.0;
      assertFalse(double1 == double0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) asin0, double1, double0, allowedSolution0);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(0.0, double2, 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(5.0E-16, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(91, illinoisSolver0.getMaxEvaluations());
      assertEquals(2, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
  }
}
