/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:27:37 GMT 2014
 */

package org.apache.commons.math.analysis.solvers;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Log1p;
import org.apache.commons.math.analysis.function.Sigmoid;
import org.apache.commons.math.analysis.function.Sin;
import org.apache.commons.math.analysis.function.Tan;
import org.apache.commons.math.analysis.function.Tanh;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math.exception.TooManyEvaluationsException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class BaseSecantSolverEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      double double0 = 1.0;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      
      double double1 = regulaFalsiSolver0.getAbsoluteAccuracy();
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      PegasusSolver pegasusSolver0 = new PegasusSolver(double1, double1);
      assertNotNull(pegasusSolver0);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      double double2 = regulaFalsiSolver0.getFunctionValueAccuracy();
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, double2, 0.01D);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      
      int int0 = 1742;
      Tan tan0 = new Tan();
      assertNotNull(tan0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double3 = (-1938.48);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      
      double double4 = pegasusSolver0.solve(int0, (UnivariateRealFunction) tan0, double3, double2, (double) int0, allowedSolution0);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1742, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1742.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getMax(), 0.01D);
      assertEquals((-1938.48), pegasusSolver0.getMin(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(1.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, double4, 0.01D);
      assertFalse(double3 == double4);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertTrue(double0 == double1);
      assertFalse(double0 == double4);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double4 == double1);
      assertFalse(double4 == double0);
      assertTrue(double4 == double2);
      assertFalse(double4 == double3);
      assertTrue(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double4);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double4);
      assertFalse(double2 == double3);
  }

  @Test
  public void test01()  throws Throwable  {
      double double0 = 1514.1680731103393;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1514.1680731103393, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1514.1680731103393, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      
      double double1 = 4117.7419915329865;
      double double2 = regulaFalsiSolver0.getFunctionValueAccuracy();
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1514.1680731103393, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1514.1680731103393, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-15, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      
      int int0 = 1736;
      Tan tan0 = new Tan();
      assertNotNull(tan0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double3 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) tan0, double2, double1, allowedSolution0);
      assertEquals(2058.8709957664933, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1514.1680731103393, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(7, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1736, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1514.1680731103393, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(4117.7419915329865, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(420.869158287066, double3, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test02()  throws Throwable  {
      double double0 = 1.0;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      
      double double1 = 4118.51252548555;
      double double2 = regulaFalsiSolver0.getFunctionValueAccuracy();
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-15, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      
      int int0 = 1742;
      Tan tan0 = new Tan();
      assertNotNull(tan0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double3 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) tan0, double2, double1, allowedSolution0);
      assertEquals(1.0E-15, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(4118.51252548555, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1742, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(7, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(2059.256262742775, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(3724.6546115566302, double3, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
  }

  @Test
  public void test03()  throws Throwable  {
      double double0 = 1.0;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      
      double double1 = regulaFalsiSolver0.getAbsoluteAccuracy();
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      double double2 = 4117.742;
      assertFalse(double2 == double1);
      
      int int0 = 1728;
      Tan tan0 = new Tan();
      assertNotNull(tan0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double3 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) tan0, double1, double2, allowedSolution0);
      assertEquals(1728, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(4117.742, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(2059.371, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(3, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0, double3, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertTrue(double0 == double3);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double3 == double0);
      assertFalse(double3 == double2);
      assertTrue(double3 == double1);
      assertTrue(double1 == double3);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test04()  throws Throwable  {
      double double0 = 1.0;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      
      double double1 = regulaFalsiSolver0.getAbsoluteAccuracy();
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      PegasusSolver pegasusSolver0 = new PegasusSolver(double1, double1);
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      double double2 = 4118.51252548555;
      assertFalse(double2 == double1);
      
      int int0 = 1742;
      Tan tan0 = new Tan();
      assertNotNull(tan0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double3 = pegasusSolver0.solve(int0, (UnivariateRealFunction) tan0, double1, double2, allowedSolution0);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(2059.756262742775, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(4118.51252548555, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1742, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(1.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(3833.182065787174, double3, 0.01D);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertFalse(double1 == double3);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test05()  throws Throwable  {
      double double0 = 1.0;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      
      double double1 = regulaFalsiSolver0.getAbsoluteAccuracy();
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      double double2 = 4114.873;
      assertFalse(double2 == double1);
      
      int int0 = 1742;
      Tan tan0 = new Tan();
      assertNotNull(tan0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double3 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) tan0, double1, double2, allowedSolution0);
      assertEquals(2057.9365, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(4114.873, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1742, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(3, regulaFalsiSolver0.getEvaluations());
      assertEquals(2834.235954740274, double3, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
  }

  @Test
  public void test06()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-419.9532509747718);
      double double2 = 934.11759442049;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double2, double2);
      assertNotNull(illinoisSolver0);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(934.11759442049, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(934.11759442049, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      
      double double3 = (-3419.2428607769);
      int int0 = 916;
      Tan tan0 = new Tan();
      assertNotNull(tan0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double4 = illinoisSolver0.solve(int0, (UnivariateRealFunction) tan0, double1, (double) int0, double1, allowedSolution0);
      assertEquals(916, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-419.9532509747718), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(4, illinoisSolver0.getEvaluations());
      assertEquals(916.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals((-419.9532509747718), illinoisSolver0.getMin(), 0.01D);
      assertEquals(934.11759442049, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(934.11759442049, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(2.4460488112115257, double4, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double4);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double4);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double0 == double4);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertFalse(double4 == double3);
      assertFalse(double4 == double0);
      
      Sigmoid sigmoid0 = new Sigmoid(double4, double3);
      assertNotNull(sigmoid0);
      assertEquals(916, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-419.9532509747718), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(4, illinoisSolver0.getEvaluations());
      assertEquals(916.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals((-419.9532509747718), illinoisSolver0.getMin(), 0.01D);
      assertEquals(934.11759442049, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(934.11759442049, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double4);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double4);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double4);
      assertFalse(double0 == double4);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertFalse(double4 == double3);
      assertFalse(double4 == double0);
      
      AllowedSolution allowedSolution1 = AllowedSolution.BELOW_SIDE;
      assertNotSame(allowedSolution1, allowedSolution0);
      
      double double5 = illinoisSolver0.solve(int0, (UnivariateRealFunction) sigmoid0, double3, double0, double0, allowedSolution1);
      assertEquals((-3419.2428607769), illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(916, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(14, illinoisSolver0.getEvaluations());
      assertEquals(934.11759442049, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(934.11759442049, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertNotSame(allowedSolution0, allowedSolution1);
      assertNotSame(allowedSolution1, allowedSolution0);
      assertEquals(0.0, double5, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double5);
      assertFalse(double2 == double4);
      assertFalse(double2 == double1);
      assertFalse(double5 == double2);
      assertFalse(double5 == double3);
      assertFalse(double5 == double4);
      assertTrue(double5 == double0);
      assertFalse(double5 == double1);
      assertFalse(allowedSolution0.equals((Object)allowedSolution1));
      assertFalse(double1 == double2);
      assertFalse(double1 == double5);
      assertFalse(double1 == double4);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double5);
      assertFalse(double3 == double2);
      assertFalse(double3 == double4);
      assertFalse(double0 == double4);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertTrue(double0 == double5);
      assertFalse(double0 == double1);
      assertFalse(allowedSolution1.equals((Object)allowedSolution0));
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertFalse(double4 == double3);
      assertFalse(double4 == double5);
      assertFalse(double4 == double0);
  }

  @Test
  public void test07()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-419.9532509747718);
      double double2 = 934.11759442049;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double2, double2);
      assertNotNull(illinoisSolver0);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(934.11759442049, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(934.11759442049, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      
      int int0 = 916;
      Tan tan0 = new Tan();
      assertNotNull(tan0);
      
      double double3 = 718.36;
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double4 = illinoisSolver0.solve(int0, (UnivariateRealFunction) tan0, double1, double3, double1, allowedSolution0);
      assertEquals(0.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(934.11759442049, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals((-419.9532509747718), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(934.11759442049, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(916, illinoisSolver0.getMaxEvaluations());
      assertEquals(718.36, illinoisSolver0.getMax(), 0.01D);
      assertEquals((-419.9532509747718), illinoisSolver0.getMin(), 0.01D);
      assertEquals(718.36, double4, 0.01D);
      assertTrue(double3 == double4);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double2 == double4);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertTrue(double4 == double3);
      assertFalse(double4 == double1);
      assertFalse(double4 == double2);
      assertFalse(double4 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double4);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double4);
  }

  @Test
  public void test08()  throws Throwable  {
      double double0 = (-20.240703039585593);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals((-20.240703039585593), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals((-20.240703039585593), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      
      double double1 = 4117.7419915329865;
      double double2 = regulaFalsiSolver0.getFunctionValueAccuracy();
      assertEquals((-20.240703039585593), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals((-20.240703039585593), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      
      int int0 = 1690;
      Tan tan0 = new Tan();
      assertNotNull(tan0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      try {
        double double3 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) tan0, double2, double1, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (1,690) exceeded: evaluations
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      double double0 = (-1650.3733227612875);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-1650.3733227612875), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals((-1650.3733227612875), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      
      int int0 = 16;
      Sin sin0 = new Sin();
      assertNotNull(sin0);
      
      double double1 = (-1361.0);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double2 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) sin0, double1, (double) int0, allowedSolution0);
      assertEquals((-1650.3733227612875), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-1361.0), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(16.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-1650.3733227612875), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(16, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-672.5), regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(14, regulaFalsiSolver0.getEvaluations());
      assertEquals((-9.42477796076938), double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test10()  throws Throwable  {
      double double0 = (-1651.21824421);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-1651.21824421), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals((-1651.21824421), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      
      int int0 = 43;
      Sin sin0 = new Sin();
      assertNotNull(sin0);
      
      double double1 = 0.08372;
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double2 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) sin0, double1, (double) int0, allowedSolution0);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(10, regulaFalsiSolver0.getEvaluations());
      assertEquals((-1651.21824421), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(21.54186, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(43, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(43.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0.08372, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals((-1651.21824421), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(3.141592653589793, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test11()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertNotNull(regulaFalsiSolver0);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      
      int int0 = 357;
      Tanh tanh0 = new Tanh();
      assertNotNull(tanh0);
      
      double double0 = (-1181.1117023607);
      double double1 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) tanh0, double0, (double) int0, (double) int0);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-1181.1117023607), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(357.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(357.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(16, regulaFalsiSolver0.getEvaluations());
      assertEquals(357, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(9.363524784844474E-19, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test12()  throws Throwable  {
      double double0 = (-1651.21824421);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-1651.21824421), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-1651.21824421), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      
      int int0 = 16;
      Sin sin0 = new Sin();
      assertNotNull(sin0);
      
      double double1 = (-1361.0);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      try {
        double double2 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) sin0, double1, (double) int0, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (16) exceeded: evaluations
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertNotNull(illinoisSolver0);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      
      int int0 = 68;
      Log1p log1p0 = new Log1p();
      assertNotNull(log1p0);
      
      double double0 = (-0.0909);
      double double1 = illinoisSolver0.solve(int0, (UnivariateRealFunction) log1p0, double0, (double) int0);
      assertEquals(68, illinoisSolver0.getMaxEvaluations());
      assertEquals(68.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-0.0909), illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(10, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(33.954550000000005, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals((-4.572100821175723E-14), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test14()  throws Throwable  {
      double double0 = (-1.0);
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0, double0);
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals((-1.0), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals((-1.0), pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-1.0), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      
      int int0 = 3949;
      double double1 = 0.6666666269302368;
      Sigmoid sigmoid0 = new Sigmoid(double0, double1);
      assertNotNull(sigmoid0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) sigmoid0, double0, double1, double0, allowedSolution0);
      assertEquals(7, pegasusSolver0.getEvaluations());
      assertEquals(0.6666666269302368, pegasusSolver0.getMax(), 0.01D);
      assertEquals((-1.0), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-1.0), pegasusSolver0.getMin(), 0.01D);
      assertEquals((-1.0), pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-1.0), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-1.0), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(3949, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.40546516771281077, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test15()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      
      int int0 = 357;
      Tanh tanh0 = new Tanh();
      assertNotNull(tanh0);
      
      double double0 = (-1181.1117023607);
      double double1 = tanh0.value(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double2 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) tanh0, double1, (double) int0, allowedSolution0);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(357.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(178.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(13, regulaFalsiSolver0.getEvaluations());
      assertEquals(357, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals((-1.0), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(8.430662853448636E-18, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test16()  throws Throwable  {
      double double0 = (-1651.21824421);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals((-1651.21824421), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-1651.21824421), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      
      int int0 = 43;
      double double1 = regulaFalsiSolver0.getRelativeAccuracy();
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals((-1651.21824421), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-1651.21824421), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals((-1651.21824421), double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0);
      assertNotNull(pegasusSolver0);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-1651.21824421), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertTrue(double0 == double1);
      
      double double2 = 0.0;
      assertFalse(double2 == double1);
      
      Sigmoid sigmoid0 = new Sigmoid(double1, double2);
      assertNotNull(sigmoid0);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals((-1651.21824421), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-1651.21824421), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      
      double double3 = pegasusSolver0.solve(int0, (UnivariateRealFunction) sigmoid0, double1, (double) int0, allowedSolution0);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals((-1651.21824421), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-1651.21824421), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals((-1651.21824421), pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-1651.21824421), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2, pegasusSolver0.getEvaluations());
      assertEquals(43.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(43, pegasusSolver0.getMaxEvaluations());
      assertEquals((-804.109122105), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(43.0, double3, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertTrue(double0 == double1);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
  }

  @Test
  public void test17()  throws Throwable  {
      double double0 = 0.0;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double0, double0);
      assertNotNull(illinoisSolver0);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      
      int int0 = 916;
      Tan tan0 = new Tan();
      assertNotNull(tan0);
      
      double double1 = illinoisSolver0.solve(int0, (UnivariateRealFunction) tan0, double0, double0, double0);
      assertEquals(2, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(916, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }
}
