/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:46:03 GMT 2014
 */

package org.apache.commons.math.analysis.solvers;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Cos;
import org.apache.commons.math.analysis.function.HarmonicOscillator;
import org.apache.commons.math.analysis.function.Rint;
import org.apache.commons.math.analysis.function.Sin;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math.exception.TooManyEvaluationsException;



import org.junit.runner.RunWith;


public class BaseSecantSolverEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      double double0 = (-1929.7);
      int int0 = 984;
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator((double) int0, double0, double0);
      assertNotNull(harmonicOscillator0);
      
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertNotNull(pegasusSolver0);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) harmonicOscillator0, double0, (double) int0, allowedSolution0);
      assertEquals((-1834.1381170160203), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-1929.7), pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-472.85000000000014), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(984.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(984, pegasusSolver0.getMaxEvaluations());
      assertEquals(22, pegasusSolver0.getEvaluations());
  }

  @Test
  public void test01()  throws Throwable  {
      double double0 = (-1954.937315457554);
      int int0 = 921;
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator((double) int0, (double) int0, double0);
      assertNotNull(harmonicOscillator0);
      
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertNotNull(pegasusSolver0);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) harmonicOscillator0, double0, (double) int0, (double) int0, allowedSolution0);
      assertEquals(305.4227584130013, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1954.937315457554), pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(921, pegasusSolver0.getMaxEvaluations());
      assertEquals(21, pegasusSolver0.getEvaluations());
      assertEquals(921.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(921.0, pegasusSolver0.getMax(), 0.01D);
      
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) harmonicOscillator0, double1, (double) int0, double1);
      assertEquals(305.42275857099617, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(305.4227584130013, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(921, pegasusSolver0.getMaxEvaluations());
      assertEquals(921.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(305.4227584130013, pegasusSolver0.getMin(), 0.01D);
  }

  @Test
  public void test02()  throws Throwable  {
      double double0 = (-2980.2390140232146);
      int int0 = 19;
      PegasusSolver pegasusSolver0 = new PegasusSolver((double) int0, (double) int0, (double) int0);
      assertNotNull(pegasusSolver0);
      assertEquals(19.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(19.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(19.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      
      Sin sin0 = new Sin();
      assertNotNull(sin0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) sin0, double0, (double) int0, allowedSolution0);
      assertEquals((-406.95509381404423), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(19, pegasusSolver0.getMaxEvaluations());
      assertEquals(19.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(19.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(19.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(19.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals((-2980.2390140232146), pegasusSolver0.getMin(), 0.01D);
      assertEquals((-1480.6195070116073), pegasusSolver0.getStartValue(), 0.01D);
  }

  @Test
  public void test03()  throws Throwable  {
      double double0 = (-2979.601520177643);
      int int0 = 5;
      PegasusSolver pegasusSolver0 = new PegasusSolver((double) int0, (double) int0, (double) int0);
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(5.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(5.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(5.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      
      Sin sin0 = new Sin();
      assertNotNull(sin0);
      
      double double1 = (-1040.4459);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) sin0, double0, double1, allowedSolution0);
      assertEquals((-1734.9468960187519), double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(5.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(5.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-1040.4459), pegasusSolver0.getMax(), 0.01D);
      assertEquals(5.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(5, pegasusSolver0.getMaxEvaluations());
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals((-2979.601520177643), pegasusSolver0.getMin(), 0.01D);
      assertEquals((-2010.0237100888216), pegasusSolver0.getStartValue(), 0.01D);
  }

  @Test
  public void test04()  throws Throwable  {
      double double0 = (-2981.3422178055257);
      int int0 = 26;
      PegasusSolver pegasusSolver0 = new PegasusSolver((double) int0, (double) int0, (double) int0);
      assertNotNull(pegasusSolver0);
      assertEquals(26.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(26.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(26.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      
      Sin sin0 = new Sin();
      assertNotNull(sin0);
      
      double double1 = 0.0;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) sin0, double1, double0, double0);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertEquals(26.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(26, pegasusSolver0.getMaxEvaluations());
      assertEquals(2, pegasusSolver0.getEvaluations());
      assertEquals((-2981.3422178055257), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals((-2981.3422178055257), pegasusSolver0.getMax(), 0.01D);
      assertEquals(26.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(26.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double3 = 2.7553817452272217E-6;
      assertFalse(double3 == double2);
      
      double double4 = pegasusSolver0.solve(int0, (UnivariateRealFunction) sin0, double0, double3, double2, allowedSolution0);
      assertEquals(2.7553817452272217E-6, double4, 0.01D);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertTrue(double3 == double4);
      assertFalse(double3 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double4);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double4);
      assertFalse(double2 == double3);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double4);
      assertTrue(double1 == double2);
      assertFalse(double4 == double0);
      assertFalse(double4 == double1);
      assertFalse(double4 == double2);
      assertTrue(double4 == double3);
      assertEquals(26.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(26, pegasusSolver0.getMaxEvaluations());
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(26.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(26.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-2981.3422178055257), pegasusSolver0.getMin(), 0.01D);
      assertEquals(2.7553817452272217E-6, pegasusSolver0.getMax(), 0.01D);
  }

  @Test
  public void test05()  throws Throwable  {
      double double0 = (-2979.319807597746);
      int int0 = 26;
      PegasusSolver pegasusSolver0 = new PegasusSolver((double) int0, (double) int0, (double) int0);
      assertNotNull(pegasusSolver0);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(26.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(26.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(26.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      
      Sin sin0 = new Sin();
      assertNotNull(sin0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) sin0, double0, (double) int0, allowedSolution0);
      assertEquals(26.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-2979.319807597746), pegasusSolver0.getMin(), 0.01D);
      assertEquals((-1476.659903798873), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(26.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(26, pegasusSolver0.getMaxEvaluations());
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(26.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(26.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(26.0, pegasusSolver0.getMax(), 0.01D);
  }

  @Test
  public void test06()  throws Throwable  {
      double double0 = (-2979.601520177643);
      int int0 = 5;
      PegasusSolver pegasusSolver0 = new PegasusSolver((double) int0, (double) int0, (double) int0);
      assertNotNull(pegasusSolver0);
      assertEquals(5.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(5.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(5.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      
      Sin sin0 = new Sin();
      assertNotNull(sin0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double1 = (-2310.203461);
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) sin0, double0, double1, allowedSolution0);
      assertEquals((-2979.601520177643), double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(5.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-2644.902490588822), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals((-2310.203461), pegasusSolver0.getMax(), 0.01D);
      assertEquals(5.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(5.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals((-2979.601520177643), pegasusSolver0.getMin(), 0.01D);
      assertEquals(5, pegasusSolver0.getMaxEvaluations());
  }

  @Test
  public void test07()  throws Throwable  {
      double double0 = (-2981.3422178055257);
      int int0 = 26;
      PegasusSolver pegasusSolver0 = new PegasusSolver((double) int0, (double) int0, (double) int0);
      assertNotNull(pegasusSolver0);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(26.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(26.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(26.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      
      Sin sin0 = new Sin();
      assertNotNull(sin0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) sin0, double0, (double) int0, allowedSolution0);
      assertEquals((-2870.408595901869), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-2981.3422178055257), pegasusSolver0.getMin(), 0.01D);
      assertEquals(26, pegasusSolver0.getMaxEvaluations());
      assertEquals(26.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(26.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(26.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(26.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals((-1477.6711089027629), pegasusSolver0.getStartValue(), 0.01D);
  }

  @Test
  public void test08()  throws Throwable  {
      double double0 = (-1.0952796096683095);
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0);
      assertNotNull(pegasusSolver0);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals((-1.0952796096683095), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-1.0952796096683095), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      
      int int0 = 254;
      Cos cos0 = new Cos();
      assertNotNull(cos0);
      
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) cos0, double0, (double) int0);
      assertEquals(51.83627878423159, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1.0952796096683095), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-1.0952796096683095), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-1.0952796096683095), pegasusSolver0.getMin(), 0.01D);
      assertEquals(12, pegasusSolver0.getEvaluations());
      assertEquals(254.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(254, pegasusSolver0.getMaxEvaluations());
      assertEquals(126.45236019516584, pegasusSolver0.getStartValue(), 0.01D);
  }

  @Test
  public void test09()  throws Throwable  {
      double double0 = (-1929.7);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals((-1929.7), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-1929.7), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      
      int int0 = 964;
      double double1 = (-2248.771097510711);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator((double) int0, double1, double0);
      assertNotNull(harmonicOscillator0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      // Undeclared exception!
      try {
        double double2 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) harmonicOscillator0, double1, (double) int0, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (964) exceeded: evaluations
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      double double0 = 722.0;
      int int0 = 924;
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator((double) int0, double0, double0);
      assertNotNull(harmonicOscillator0);
      
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertNotNull(illinoisSolver0);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double1 = illinoisSolver0.solve(int0, (UnivariateRealFunction) harmonicOscillator0, double0, (double) int0, allowedSolution0);
      assertEquals(770.0412590199976, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(924.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(823.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(27, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(924, illinoisSolver0.getMaxEvaluations());
      assertEquals(722.0, illinoisSolver0.getMin(), 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      double double0 = (-1929.7);
      int int0 = 964;
      double double1 = (-2248.771097510711);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator((double) int0, double1, double0);
      assertNotNull(harmonicOscillator0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertNotNull(pegasusSolver0);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) harmonicOscillator0, double1, (double) int0, allowedSolution0);
      assertEquals((-417.8474509290481), double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals((-2248.771097510711), pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(964, pegasusSolver0.getMaxEvaluations());
      assertEquals(22, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(964.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals((-642.3855487553556), pegasusSolver0.getStartValue(), 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      double double0 = (-2980.308339964859);
      int int0 = 7;
      PegasusSolver pegasusSolver0 = new PegasusSolver((double) int0, (double) int0, (double) int0);
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(7.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(7.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(7.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      
      Sin sin0 = new Sin();
      assertNotNull(sin0);
      
      double double1 = (-1040.4459);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) sin0, double0, double1, allowedSolution0);
      assertEquals((-1787.2184790059266), double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals((-1040.4459), pegasusSolver0.getMax(), 0.01D);
      assertEquals((-2010.3771199824296), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(7.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-2980.308339964859), pegasusSolver0.getMin(), 0.01D);
      assertEquals(7.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(7, pegasusSolver0.getMaxEvaluations());
      assertEquals(7.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      
      Rint rint0 = new Rint();
      assertNotNull(rint0);
      
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0);
      assertNotNull(illinoisSolver0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-2980.308339964859), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      
      double double3 = illinoisSolver0.solve(int0, (UnivariateRealFunction) rint0, double2, (double) int0, (double) int0, allowedSolution0);
      assertEquals((-8.524821858895137E-4), double3, 0.01D);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals((-1040.4459), pegasusSolver0.getMax(), 0.01D);
      assertEquals((-2010.3771199824296), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(7.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-2980.308339964859), pegasusSolver0.getMin(), 0.01D);
      assertEquals(7.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(7, pegasusSolver0.getMaxEvaluations());
      assertEquals(7.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals(7.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(7, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-1787.2184790059266), illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-2980.308339964859), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(7.0, illinoisSolver0.getMax(), 0.01D);
  }

  @Test
  public void test13()  throws Throwable  {
      double double0 = (-2979.601520177643);
      int int0 = 22;
      PegasusSolver pegasusSolver0 = new PegasusSolver((double) int0, (double) int0, (double) int0);
      assertNotNull(pegasusSolver0);
      assertEquals(22.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(22.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(22.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      
      Sin sin0 = new Sin();
      assertNotNull(sin0);
      
      double double1 = (-1040.4587578417115);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) sin0, double0, double1, allowedSolution0);
      assertEquals((-2979.601520177643), double2, 0.01D);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(22, pegasusSolver0.getMaxEvaluations());
      assertEquals(22.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-1040.4587578417115), pegasusSolver0.getMax(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(22.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(22.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-2979.601520177643), pegasusSolver0.getMin(), 0.01D);
      assertEquals((-2010.0301390096774), pegasusSolver0.getStartValue(), 0.01D);
      
      Rint rint0 = new Rint();
      assertNotNull(rint0);
      
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0);
      assertNotNull(illinoisSolver0);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-2979.601520177643), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      
      double double3 = (-0.2184386254911);
      assertFalse(double3 == double2);
      
      double double4 = illinoisSolver0.solve(int0, (UnivariateRealFunction) rint0, double2, double3, (double) int0, allowedSolution0);
      assertEquals((-0.2184386254911), double4, 0.01D);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertTrue(double3 == double4);
      assertFalse(double4 == double1);
      assertFalse(double4 == double0);
      assertTrue(double4 == double3);
      assertFalse(double4 == double2);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double4);
      assertTrue(double2 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double4);
      assertFalse(double0 == double4);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertEquals(22, pegasusSolver0.getMaxEvaluations());
      assertEquals(22.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-1040.4587578417115), pegasusSolver0.getMax(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(22.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(22.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-2979.601520177643), pegasusSolver0.getMin(), 0.01D);
      assertEquals((-2010.0301390096774), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals((-2979.601520177643), illinoisSolver0.getMin(), 0.01D);
      assertEquals(2, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(22.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals((-2979.601520177643), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(22, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-0.2184386254911), illinoisSolver0.getMax(), 0.01D);
  }
}
