/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:15:01 GMT 2014
 */

package org.apache.commons.math.stat.clustering;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;
import org.apache.commons.math.stat.clustering.Cluster;
import org.apache.commons.math.stat.clustering.EuclideanIntegerPoint;
import org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;


public class KMeansPlusPlusClustererEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>((Random) mockRandom0);
      assertNotNull(kMeansPlusPlusClusterer0);
      
      int int0 = 0;
      LinkedList<EuclideanIntegerPoint> linkedList0 = new LinkedList<EuclideanIntegerPoint>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      int[] intArray0 = new int[3];
      EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertNotNull(euclideanIntegerPoint0);
      
      boolean boolean0 = linkedList0.add(euclideanIntegerPoint0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(1, linkedList0.size());
      assertEquals("[(0,0,0)]", linkedList0.toString());
      
      int int1 = (-3824);
      List<Cluster<EuclideanIntegerPoint>> list0 = kMeansPlusPlusClusterer0.cluster((Collection<EuclideanIntegerPoint>) linkedList0, int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1, linkedList0.size());
      assertEquals("[(0,0,0)]", linkedList0.toString());
      assertNotNull(list0);
  }

  @Test
  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>((Random) mockRandom0);
      assertNotNull(kMeansPlusPlusClusterer0);
      
      int int0 = 0;
      LinkedList<EuclideanIntegerPoint> linkedList0 = new LinkedList<EuclideanIntegerPoint>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      int[] intArray0 = new int[3];
      EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertNotNull(euclideanIntegerPoint0);
      
      boolean boolean0 = linkedList0.add(euclideanIntegerPoint0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals("[(0,0,0)]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      
      List<Cluster<EuclideanIntegerPoint>> list0 = kMeansPlusPlusClusterer0.cluster((Collection<EuclideanIntegerPoint>) linkedList0, int0, int0);
      assertEquals("[(0,0,0)]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      assertNotNull(list0);
  }
}
