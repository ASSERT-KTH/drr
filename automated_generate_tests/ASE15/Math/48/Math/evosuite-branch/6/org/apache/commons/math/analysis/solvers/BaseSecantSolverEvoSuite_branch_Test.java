/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:47:06 GMT 2014
 */

package org.apache.commons.math.analysis.solvers;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Cbrt;
import org.apache.commons.math.analysis.function.Cos;
import org.apache.commons.math.analysis.function.Log10;
import org.apache.commons.math.analysis.function.Sigmoid;
import org.apache.commons.math.analysis.function.Sinc;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math.exception.ConvergenceException;



import org.junit.runner.RunWith;


public class BaseSecantSolverEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      double double0 = 697.4885906832;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double0, double0);
      assertNotNull(illinoisSolver0);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(697.4885906832, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(697.4885906832, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(697.4885906832, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      
      int int0 = 5;
      Cos cos0 = new Cos();
      assertNotNull(cos0);
      
      double double1 = (-6594.8177);
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) cos0, double1, double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(5, illinoisSolver0.getMaxEvaluations());
      assertEquals(697.4885906832, illinoisSolver0.getMax(), 0.01D);
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals((-6594.8177), illinoisSolver0.getMin(), 0.01D);
      assertEquals(697.4885906832, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(697.4885906832, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(697.4885906832, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-2948.6645546584), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals((-3313.2992270751865), double2, 0.01D);
      
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0);
      assertNotNull(pegasusSolver0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(697.4885906832, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(697.4885906832, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double3 = 812.5527689715102;
      assertFalse(double3 == double2);
      
      double double4 = pegasusSolver0.solve(int0, (UnivariateRealFunction) cos0, double0, double3, double2, allowedSolution0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double4);
      assertFalse(double3 == double1);
      assertFalse(double3 == double4);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double2 == double4);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double4);
      assertFalse(double4 == double2);
      assertFalse(double4 == double0);
      assertFalse(double4 == double1);
      assertFalse(double4 == double3);
      assertEquals(5, illinoisSolver0.getMaxEvaluations());
      assertEquals(697.4885906832, illinoisSolver0.getMax(), 0.01D);
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals((-6594.8177), illinoisSolver0.getMin(), 0.01D);
      assertEquals(697.4885906832, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(697.4885906832, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(697.4885906832, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-2948.6645546584), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(697.4885906832, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(697.4885906832, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(5, pegasusSolver0.getMaxEvaluations());
      assertEquals(697.4885906832, pegasusSolver0.getMin(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals((-3313.2992270751865), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(812.5527689715102, pegasusSolver0.getMax(), 0.01D);
      assertEquals(777.584070158232, double4, 0.01D);
  }

  @Test
  public void test01()  throws Throwable  {
      double double0 = 0.875;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0, double0);
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.875, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.875, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.875, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      
      int int0 = 32;
      Sinc sinc0 = new Sinc();
      assertNotNull(sinc0);
      
      double double1 = 1435.72145;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) sinc0, (double) int0, double1, double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(32, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.875, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(0.875, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.875, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1435.72145, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.875, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(32.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1434.94984857772, double2, 0.01D);
      
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((double) int0, double1, double0);
      assertNotNull(regulaFalsiSolver0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(32.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1435.72145, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.875, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      
      Log10 log10_0 = new Log10();
      assertNotNull(log10_0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double3 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) log10_0, double0, double2, allowedSolution0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertEquals(717.91242428886, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.875, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(3, regulaFalsiSolver0.getEvaluations());
      assertEquals(32.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1435.72145, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(32, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.875, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1434.94984857772, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(32, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.875, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(0.875, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.875, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1435.72145, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.875, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(32.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(26.744121226727657, double3, 0.01D);
  }

  @Test
  public void test02()  throws Throwable  {
      double double0 = (-3798.4934209156577);
      int int0 = 134;
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      double double1 = cbrt0.value(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-15.602844951382325), double1, 0.01D);
      
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double1, (double) int0);
      assertNotNull(illinoisSolver0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(134.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals((-15.602844951382325), illinoisSolver0.getRelativeAccuracy(), 0.01D);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double0, (double) int0, allowedSolution0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(134.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(6, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(134.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-3798.4934209156577), illinoisSolver0.getMin(), 0.01D);
      assertEquals(134, illinoisSolver0.getMaxEvaluations());
      assertEquals((-1832.2467104578288), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals((-15.602844951382325), illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-51.75456622341346), double2, 0.01D);
  }

  @Test
  public void test03()  throws Throwable  {
      double double0 = 0.875;
      double double1 = 0.0;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0, double1);
      assertNotNull(pegasusSolver0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.875, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.875, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      
      int int0 = 32;
      Sinc sinc0 = new Sinc();
      assertNotNull(sinc0);
      
      double double2 = 1435.72145;
      double double3 = pegasusSolver0.solve(int0, (UnivariateRealFunction) sinc0, (double) int0, double2, double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(32.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(1435.72145, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.875, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.875, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.875, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(32, pegasusSolver0.getMaxEvaluations());
      assertEquals(1434.94984857772, double3, 0.01D);
  }

  @Test
  public void test04()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      
      double double0 = pegasusSolver0.getMax();
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, double0, 0.01D);
      
      int int0 = 1509;
      Sinc sinc0 = new Sinc();
      assertNotNull(sinc0);
      
      double double1 = (-526.5711767832938);
      assertFalse(double1 == double0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) sinc0, double1, double0, double0, allowedSolution0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(1509, pegasusSolver0.getMaxEvaluations());
      assertEquals((-526.5711767832938), pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(8, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals((-524.6459731419546), double2, 0.01D);
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = 17;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((double) int0, (double) int0, (double) int0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(17.0, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(17.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(17.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      
      Log10 log10_0 = new Log10();
      assertNotNull(log10_0);
      
      double double0 = 0.625422;
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double1 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) log10_0, double0, (double) int0, allowedSolution0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(8.812711, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(17.0, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(17.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0.625422, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(17.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(17.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(17, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(3, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.625422, double1, 0.01D);
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = (-8);
      double double0 = 20.38106083701819;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((double) int0, double0, double0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(20.38106083701819, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-8.0), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(20.38106083701819, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      
      int int1 = 237;
      Log10 log10_0 = new Log10();
      assertNotNull(log10_0);
      
      double double1 = 0.0769230769;
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double2 = regulaFalsiSolver0.solve(int1, (UnivariateRealFunction) log10_0, double1, (double) int1, allowedSolution0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(20.38106083701819, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(3, regulaFalsiSolver0.getEvaluations());
      assertEquals(237.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(118.53846153845001, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0769230769, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals((-8.0), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(20.38106083701819, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(237, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(75.72673950949095, double2, 0.01D);
  }

  @Test
  public void test07()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertNotNull(pegasusSolver0);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      
      double double0 = pegasusSolver0.getMax();
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
      
      int int0 = 1509;
      Sinc sinc0 = new Sinc();
      assertNotNull(sinc0);
      
      double double1 = (-526.5711767832938);
      assertFalse(double1 == double0);
      
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertNotNull(regulaFalsiSolver0);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double2 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) sinc0, double1, double0, double0, allowedSolution0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals((-526.5711767832938), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(7, regulaFalsiSolver0.getEvaluations());
      assertEquals(1509, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals((-524.6459731494955), double2, 0.01D);
  }

  @Test
  public void test08()  throws Throwable  {
      double double0 = 697.4885906832;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double0, double0);
      assertNotNull(illinoisSolver0);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(697.4885906832, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(697.4885906832, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(697.4885906832, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      
      int int0 = 5;
      Cos cos0 = new Cos();
      assertNotNull(cos0);
      
      double double1 = (-6594.8177);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) cos0, double1, (double) int0, double1, allowedSolution0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(697.4885906832, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(5, illinoisSolver0.getMaxEvaluations());
      assertEquals((-6594.8177), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals((-6594.8177), illinoisSolver0.getMin(), 0.01D);
      assertEquals(697.4885906832, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(5.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals(697.4885906832, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-1696.0027942016561), double2, 0.01D);
  }

  @Test
  public void test09()  throws Throwable  {
      double double0 = 697.4885906832;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double0, double0);
      assertNotNull(illinoisSolver0);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(697.4885906832, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(697.4885906832, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(697.4885906832, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      
      int int0 = 5;
      Cos cos0 = new Cos();
      assertNotNull(cos0);
      
      double double1 = (-6594.8177);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) cos0, double1, double0, allowedSolution0);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(5, illinoisSolver0.getMaxEvaluations());
      assertEquals(697.4885906832, illinoisSolver0.getMax(), 0.01D);
      assertEquals(697.4885906832, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals((-2948.6645546584), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals((-6594.8177), illinoisSolver0.getMin(), 0.01D);
      assertEquals(697.4885906832, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(697.4885906832, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(697.4885906832, double2, 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      double double0 = 30.93863557499373;
      int int0 = 32;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((double) int0, double0, double0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(30.93863557499373, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(30.93863557499373, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(32.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      
      Log10 log10_0 = new Log10();
      assertNotNull(log10_0);
      
      double double1 = 0.07692307692307693;
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double2 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) log10_0, double1, (double) int0, allowedSolution0);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(30.93863557499373, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(32.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(30.93863557499373, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(3, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.07692307692307693, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(32, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(32.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(16.03846153846154, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.07692307692307693, double2, 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      double double0 = (-3798.4934209156577);
      int int0 = 134;
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-3798.4934209156577), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      
      double double1 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double0, (double) int0, allowedSolution0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-3798.4934209156577), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-3798.4934209156577), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(134.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(134, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(119, regulaFalsiSolver0.getEvaluations());
      assertEquals((-1832.2467104578288), regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals((-7.669075245907461E-46), double1, 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertNotNull(illinoisSolver0);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      
      double double0 = illinoisSolver0.getMax();
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
      
      int int0 = (-2);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((double) int0, double0, double0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-2.0), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      
      int int1 = 310;
      Log10 log10_0 = new Log10();
      assertNotNull(log10_0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      try {
        double double1 = regulaFalsiSolver0.solve(int1, (UnivariateRealFunction) log10_0, double0, (double) int1, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: convergence failed
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      double double0 = (-3798.4934209156577);
      int int0 = 134;
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double1 = cbrt0.value(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-15.602844951382325), double1, 0.01D);
      
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double1, (double) int0);
      assertNotNull(illinoisSolver0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals((-15.602844951382325), illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(134.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double0, (double) int0, allowedSolution0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(134, illinoisSolver0.getMaxEvaluations());
      assertEquals(134.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals((-15.602844951382325), illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-3798.4934209156577), illinoisSolver0.getMin(), 0.01D);
      assertEquals(6, illinoisSolver0.getEvaluations());
      assertEquals(134.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-1832.2467104578288), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals((-51.75456622341346), double2, 0.01D);
  }

  @Test
  public void test14()  throws Throwable  {
      double double0 = 0.4617776567296541;
      int int0 = (-10);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((double) int0, double0, (double) int0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals((-10.0), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.4617776567296541, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals((-10.0), regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      
      int int1 = 261;
      Log10 log10_0 = new Log10();
      assertNotNull(log10_0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double1 = regulaFalsiSolver0.solve(int1, (UnivariateRealFunction) log10_0, double0, (double) int1, allowedSolution0);
      assertFalse(double0 == double1);
      assertFalse(int0 == int1);
      assertFalse(double1 == double0);
      assertFalse(int1 == int0);
      assertEquals(261.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-10.0), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(36, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.4617776567296541, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.4617776567296541, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(261, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(130.7308888283648, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals((-10.0), regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0, double1, 0.01D);
  }

  @Test
  public void test15()  throws Throwable  {
      double double0 = 697.4885906832;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double0, double0);
      assertNotNull(illinoisSolver0);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(697.4885906832, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(697.4885906832, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(697.4885906832, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      
      int int0 = 5;
      Cos cos0 = new Cos();
      assertNotNull(cos0);
      
      double double1 = (-6594.8177);
      double double2 = (-18.972779277426095);
      double double3 = illinoisSolver0.solve(int0, (UnivariateRealFunction) cos0, double1, double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertEquals((-6594.8177), illinoisSolver0.getMin(), 0.01D);
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals((-3306.895239638713), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(697.4885906832, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(697.4885906832, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-18.972779277426095), illinoisSolver0.getMax(), 0.01D);
      assertEquals(5, illinoisSolver0.getMaxEvaluations());
      assertEquals(697.4885906832, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-3625.7792233664463), double3, 0.01D);
      
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0);
      assertNotNull(pegasusSolver0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(697.4885906832, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(697.4885906832, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      
      Sigmoid sigmoid0 = new Sigmoid();
      assertNotNull(sigmoid0);
      
      double double4 = pegasusSolver0.solve(int0, (UnivariateRealFunction) sigmoid0, double0, double3, (double) int0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double4);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double4);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double4);
      assertFalse(double1 == double3);
      assertTrue(double3 == double4);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double4 == double1);
      assertFalse(double4 == double0);
      assertFalse(double4 == double2);
      assertTrue(double4 == double3);
      assertEquals(697.4885906832, pegasusSolver0.getMin(), 0.01D);
      assertEquals(5, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(5.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals((-3625.7792233664463), pegasusSolver0.getMax(), 0.01D);
      assertEquals(697.4885906832, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2, pegasusSolver0.getEvaluations());
      assertEquals(697.4885906832, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-6594.8177), illinoisSolver0.getMin(), 0.01D);
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals((-3306.895239638713), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(697.4885906832, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(697.4885906832, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-18.972779277426095), illinoisSolver0.getMax(), 0.01D);
      assertEquals(5, illinoisSolver0.getMaxEvaluations());
      assertEquals(697.4885906832, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-3625.7792233664463), double4, 0.01D);
  }

  @Test
  public void test16()  throws Throwable  {
      double double0 = 1.0E-6;
      int int0 = 134;
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      
      double double1 = 0.0;
      double double2 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double1, double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertEquals(134, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(5.0E-7, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(2, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, double2, 0.01D);
  }
}
