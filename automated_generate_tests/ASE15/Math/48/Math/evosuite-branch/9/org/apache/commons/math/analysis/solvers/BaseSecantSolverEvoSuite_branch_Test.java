/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:20:22 GMT 2014
 */

package org.apache.commons.math.analysis.solvers;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Expm1;
import org.apache.commons.math.analysis.function.Signum;
import org.apache.commons.math.analysis.function.Sin;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math.exception.ConvergenceException;
import org.apache.commons.math.exception.TooManyEvaluationsException;



import org.junit.runner.RunWith;


public class BaseSecantSolverEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      double double0 = 895.76178498787;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(895.76178498787, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertNotNull(pegasusSolver0);
      
      int int0 = 1759;
      Signum signum0 = new Signum();
      assertNotNull(signum0);
      
      double double1 = (-407.7399337960897);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) signum0, double1, (double) int0, allowedSolution0);
      assertEquals(675.6300331019552, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1759.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(4, pegasusSolver0.getEvaluations());
      assertEquals(1759, pegasusSolver0.getMaxEvaluations());
      assertEquals(895.76178498787, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-407.7399337960897), pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(675.6300331019552, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test01()  throws Throwable  {
      double double0 = 12.0;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(12.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertNotNull(pegasusSolver0);
      
      int int0 = 200;
      Signum signum0 = new Signum();
      assertNotNull(signum0);
      
      int int1 = (-117);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) signum0, (double) int1, double0, allowedSolution0);
      assertEquals(200, pegasusSolver0.getMaxEvaluations());
      assertEquals(6, pegasusSolver0.getEvaluations());
      assertEquals((-117.0), pegasusSolver0.getMin(), 0.01D);
      assertEquals(12.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(12.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-52.5), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals((-9.5), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test02()  throws Throwable  {
      double double0 = 4.540252357668463;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(4.540252357668463, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertNotNull(pegasusSolver0);
      
      int int0 = 254;
      Signum signum0 = new Signum();
      assertNotNull(signum0);
      
      int int1 = (-27);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) signum0, (double) int1, double0, allowedSolution0);
      assertEquals((-27.0), pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(6, pegasusSolver0.getEvaluations());
      assertEquals(254, pegasusSolver0.getMaxEvaluations());
      assertEquals(4.540252357668463, pegasusSolver0.getMax(), 0.01D);
      assertEquals(4.540252357668463, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-11.229873821165768), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.9118979945294239, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test03()  throws Throwable  {
      double double0 = 0.29;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.29, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertNotNull(pegasusSolver0);
      
      int int0 = 214;
      Signum signum0 = new Signum();
      assertNotNull(signum0);
      
      int int1 = (-52);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) signum0, (double) int1, double0, allowedSolution0);
      assertEquals((-52.0), pegasusSolver0.getMin(), 0.01D);
      assertEquals(9, pegasusSolver0.getEvaluations());
      assertEquals(0.29, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.29, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-25.855), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(214, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-5.000000000000004E-4), double1, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(double0 == double1);
      assertFalse(int1 == int0);
      assertFalse(double1 == double0);
  }

  @Test
  public void test04()  throws Throwable  {
      double double0 = 0.292155;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.292155, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertNotNull(pegasusSolver0);
      
      int int0 = 222;
      Signum signum0 = new Signum();
      assertNotNull(signum0);
      
      double double1 = (-1038.646);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) signum0, double1, (double) int0, allowedSolution0);
      assertEquals((-1038.646), pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(15, pegasusSolver0.getEvaluations());
      assertEquals(222, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.292155, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-408.323), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(222.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals((-0.16940308641974644), double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test05()  throws Throwable  {
      double double0 = 2185.7115862570095;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2185.7115862570095, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertNotNull(pegasusSolver0);
      
      int int0 = 270;
      Signum signum0 = new Signum();
      assertNotNull(signum0);
      
      int int1 = (-90);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) signum0, (double) int1, (double) int0, allowedSolution0);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2185.7115862570095, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(90.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(270, pegasusSolver0.getMaxEvaluations());
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals((-90.0), pegasusSolver0.getMin(), 0.01D);
      assertEquals(270.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(90.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(int1 == int0);
      assertFalse(double0 == double1);
      assertFalse(int0 == int1);
  }

  @Test
  public void test06()  throws Throwable  {
      double double0 = 0.292154756338973;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.292154756338973, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertNotNull(pegasusSolver0);
      
      int int0 = 190;
      Signum signum0 = new Signum();
      assertNotNull(signum0);
      
      double double1 = (-423.02);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) signum0, double1, double0, allowedSolution0);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-423.02), pegasusSolver0.getMin(), 0.01D);
      assertEquals(190, pegasusSolver0.getMaxEvaluations());
      assertEquals(10, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.292154756338973, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-211.3639226218305), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.292154756338973, pegasusSolver0.getMax(), 0.01D);
      assertEquals((-0.12285716008881042), double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test07()  throws Throwable  {
      double double0 = (-805.5059542);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double0);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals((-805.5059542), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals((-805.5059542), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertNotNull(regulaFalsiSolver0);
      
      int int0 = 921;
      Sin sin0 = new Sin();
      assertNotNull(sin0);
      
      double double1 = 2.420077;
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double2 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) sin0, double0, double1, allowedSolution0);
      assertEquals(921, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(14, regulaFalsiSolver0.getEvaluations());
      assertEquals(2.420077, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-805.5059542), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-805.5059542), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-805.5059542), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-401.5429386), regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals((-12.566370614359172), double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test08()  throws Throwable  {
      double double0 = (-806.0407547988407);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double0);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals((-806.0407547988407), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals((-806.0407547988407), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertNotNull(regulaFalsiSolver0);
      
      int int0 = 914;
      Sin sin0 = new Sin();
      assertNotNull(sin0);
      
      double double1 = 2.420077037312298;
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double2 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) sin0, double0, double1, allowedSolution0);
      assertEquals((-401.81033888076416), regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(2.420077037312298, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-806.0407547988407), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(914, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals((-806.0407547988407), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(14, regulaFalsiSolver0.getEvaluations());
      assertEquals((-806.0407547988407), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-364.424747816416), double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test09()  throws Throwable  {
      double double0 = (-805.6781261993648);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double0);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-805.6781261993648), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals((-805.6781261993648), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertNotNull(regulaFalsiSolver0);
      
      int int0 = 918;
      Sin sin0 = new Sin();
      assertNotNull(sin0);
      
      double double1 = 2.420077037312298;
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double2 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) sin0, double0, double1, allowedSolution0);
      assertEquals(14, regulaFalsiSolver0.getEvaluations());
      assertEquals((-805.6781261993648), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals((-805.6781261993648), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(918, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals((-805.6781261993648), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2.420077037312298, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-401.6290245810262), regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-182.212373908208), double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      
      Expm1 expm1_0 = new Expm1();
      assertNotNull(expm1_0);
      
      AllowedSolution allowedSolution1 = AllowedSolution.RIGHT_SIDE;
      assertNotSame(allowedSolution1, allowedSolution0);
      
      // Undeclared exception!
      try {
        double double3 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) expm1_0, double0, double1, double2, allowedSolution1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (918) exceeded: evaluations
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      double double0 = (-805.5059542);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double0);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals((-805.5059542), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals((-805.5059542), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertNotNull(regulaFalsiSolver0);
      
      int int0 = 937;
      Sin sin0 = new Sin();
      assertNotNull(sin0);
      
      double double1 = 2.420077;
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double2 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) sin0, double0, double1, allowedSolution0);
      assertEquals(2.420077, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(937, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-401.5429386), regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals((-805.5059542), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals((-805.5059542), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(14, regulaFalsiSolver0.getEvaluations());
      assertEquals((-805.5059542), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-12.566370614359172), double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test11()  throws Throwable  {
      double double0 = (-805.5059542);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double0);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-805.5059542), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-805.5059542), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertNotNull(regulaFalsiSolver0);
      
      int int0 = 951;
      Sin sin0 = new Sin();
      assertNotNull(sin0);
      
      double double1 = 2.420077037312298;
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      try {
        double double2 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) sin0, double0, double1, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: convergence failed
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      double double0 = 1.9868161777724352E-8;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0, double0);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.9868161777724352E-8, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.9868161777724352E-8, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.9868161777724352E-8, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertNotNull(pegasusSolver0);
      
      int int0 = 331;
      Sin sin0 = new Sin();
      assertNotNull(sin0);
      
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) sin0, double0, (double) int0, double0);
      assertEquals(1.9868161777724352E-8, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(331, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.9868161777724352E-8, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.9868161777724352E-8, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.9868161777724352E-8, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.9868161777724352E-8, pegasusSolver0.getMin(), 0.01D);
      assertEquals(331.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(17, pegasusSolver0.getEvaluations());
      assertEquals(229.33626371205497, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test13()  throws Throwable  {
      double double0 = (-805.15287796);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double0);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals((-805.15287796), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-805.15287796), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertNotNull(regulaFalsiSolver0);
      
      int int0 = 912;
      Sin sin0 = new Sin();
      assertNotNull(sin0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      try {
        double double1 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) sin0, double0, (double) int0, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: convergence failed
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      double double0 = 0.292154756338973;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.292154756338973, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertNotNull(pegasusSolver0);
      
      int int0 = 229;
      Signum signum0 = new Signum();
      assertNotNull(signum0);
      
      double double1 = (-1045.58080288);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) signum0, double1, (double) int0, allowedSolution0);
      assertEquals((-408.29040144), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(17, pegasusSolver0.getEvaluations());
      assertEquals(229, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(229.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.292154756338973, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-1045.58080288), pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.014740017572022757, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 214;
      Signum signum0 = new Signum();
      assertNotNull(signum0);
      
      int int1 = (-52);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((double) int0);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(214.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertNotNull(illinoisSolver0);
      assertFalse(int0 == int1);
      
      double double0 = illinoisSolver0.solve(int0, (UnivariateRealFunction) signum0, (double) int1, (double) int0, (double) int0);
      assertEquals(214.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(214.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(214, illinoisSolver0.getMaxEvaluations());
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals(214.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals((-52.0), illinoisSolver0.getMin(), 0.01D);
      assertEquals(81.0, double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test16()  throws Throwable  {
      double double0 = (-1.0);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double0);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals((-1.0), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals((-1.0), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertNotNull(regulaFalsiSolver0);
      
      int int0 = 1011;
      Sin sin0 = new Sin();
      assertNotNull(sin0);
      
      double double1 = 2.420077037312298;
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double2 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) sin0, double0, double1, allowedSolution0);
      assertEquals(0.7100385186561491, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1011, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals((-1.0), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(9, regulaFalsiSolver0.getEvaluations());
      assertEquals(2.420077037312298, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-1.0), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-1.0), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test17()  throws Throwable  {
      double double0 = 0.292154756338973;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0);
      assertEquals(0.292154756338973, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertNotNull(pegasusSolver0);
      
      int int0 = pegasusSolver0.getMaxEvaluations();
      assertEquals(0.292154756338973, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, int0);
      
      int int1 = 190;
      assertFalse(int1 == int0);
      
      Signum signum0 = new Signum();
      assertNotNull(signum0);
      
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((double) int0);
      assertEquals(0.292154756338973, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertNotNull(illinoisSolver0);
      assertFalse(int0 == int1);
      
      double double1 = illinoisSolver0.solve(int1, (UnivariateRealFunction) signum0, double0, (double) int0);
      assertEquals(0.292154756338973, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.292154756338973, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.1460773781694865, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(190, illinoisSolver0.getMaxEvaluations());
      assertEquals(2, illinoisSolver0.getEvaluations());
      assertEquals(0.0, double1, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(int1 == int0);
  }

  @Test
  public void test18()  throws Throwable  {
      double double0 = 0.292154756338973;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.292154756338973, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertNotNull(pegasusSolver0);
      
      int int0 = pegasusSolver0.getMaxEvaluations();
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.292154756338973, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, int0);
      
      int int1 = 190;
      assertFalse(int1 == int0);
      
      Signum signum0 = new Signum();
      assertNotNull(signum0);
      
      double double1 = pegasusSolver0.solve(int1, (UnivariateRealFunction) signum0, (double) int0, double0, double0);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.292154756338973, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.292154756338973, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.292154756338973, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2, pegasusSolver0.getEvaluations());
      assertEquals(190, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(int1 == int0);
      assertFalse(double0 == double1);
      assertFalse(int0 == int1);
  }
}
