/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:58:06 GMT 2014
 */

package org.apache.commons.math.analysis.solvers;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Atan;
import org.apache.commons.math.analysis.function.Expm1;
import org.apache.commons.math.analysis.function.Log;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math.exception.ConvergenceException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class BaseSecantSolverEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      int int0 = 297;
      Atan atan0 = new Atan();
      assertNotNull(atan0);
      
      double double0 = (-21.466319061964303);
      PegasusSolver pegasusSolver0 = new PegasusSolver((double) int0, (double) int0);
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(297.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(297.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) atan0, double0, (double) int0, allowedSolution0);
      assertEquals(135.54270013154672, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(297.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(137.76684046901786, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(297.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-21.466319061964303), pegasusSolver0.getMin(), 0.01D);
      assertEquals(297.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(297, pegasusSolver0.getMaxEvaluations());
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 2160;
      Atan atan0 = new Atan();
      assertNotNull(atan0);
      
      double double0 = (-2263.9587471746213);
      PegasusSolver pegasusSolver0 = new PegasusSolver((double) int0, (double) int0);
      assertNotNull(pegasusSolver0);
      assertEquals(2160.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(2160.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) atan0, double0, (double) int0, allowedSolution0);
      assertEquals((-51.96440106504497), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-51.97937358731042), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(2160, pegasusSolver0.getMaxEvaluations());
      assertEquals(2160.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-2263.9587471746213), pegasusSolver0.getMin(), 0.01D);
      assertEquals(2160.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(2160.0, pegasusSolver0.getMax(), 0.01D);
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = 297;
      Atan atan0 = new Atan();
      assertNotNull(atan0);
      
      double double0 = (-2263.8317313305897);
      double double1 = 1.0;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double1, double1);
      assertFalse(double1 == double0);
      assertNotNull(illinoisSolver0);
      assertEquals(1.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) atan0, double0, (double) int0, allowedSolution0);
      assertEquals(0.3670058144200621, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals((-2263.8317313305897), illinoisSolver0.getMin(), 0.01D);
      assertEquals(297.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(14, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-983.4158656652949), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(297, illinoisSolver0.getMaxEvaluations());
  }

  @Test
  public void test03()  throws Throwable  {
      double double0 = (-1951.61);
      int int0 = 333;
      Atan atan0 = new Atan();
      assertNotNull(atan0);
      
      double double1 = atan0.value((double) int0);
      assertEquals(1.5677933328188989, double1, 0.01D);
      assertFalse(double1 == double0);
      
      PegasusSolver pegasusSolver0 = new PegasusSolver(double1, double1);
      assertFalse(double1 == double0);
      assertNotNull(pegasusSolver0);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.5677933328188989, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.5677933328188989, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) atan0, double0, (double) int0, double0, allowedSolution0);
      assertEquals((-808.398387233404), double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(333.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.5677933328188989, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(333, pegasusSolver0.getMaxEvaluations());
      assertEquals((-1951.61), pegasusSolver0.getMin(), 0.01D);
      assertEquals((-1951.61), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.5677933328188989, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
  }

  @Test
  public void test04()  throws Throwable  {
      double double0 = (-1951.61);
      int int0 = 297;
      Atan atan0 = new Atan();
      assertNotNull(atan0);
      
      PegasusSolver pegasusSolver0 = new PegasusSolver((double) int0, (double) int0);
      assertNotNull(pegasusSolver0);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(297.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(297.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) atan0, double0, (double) int0, allowedSolution0);
      assertEquals(297.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-827.3050000000001), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(297, pegasusSolver0.getMaxEvaluations());
      assertEquals(297.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(297.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals((-1951.61), pegasusSolver0.getMin(), 0.01D);
      assertEquals(297.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
  }

  @Test
  public void test05()  throws Throwable  {
      double double0 = (-0.14285714237);
      int int0 = 287;
      Atan atan0 = new Atan();
      assertNotNull(atan0);
      
      double double1 = atan0.value((double) int0);
      assertEquals(1.5673120203377553, double1, 0.01D);
      assertFalse(double1 == double0);
      
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertNotNull(pegasusSolver0);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals((-0.14285714237), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.5673120203377553, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) atan0, double0, (double) int0, (double) int0, allowedSolution0);
      assertEquals((-0.14285714237), double2, 0.01D);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertTrue(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(287, pegasusSolver0.getMaxEvaluations());
      assertEquals(287.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals((-0.14285714237), pegasusSolver0.getMin(), 0.01D);
      assertEquals(4, pegasusSolver0.getEvaluations());
      assertEquals(287.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals((-0.14285714237), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.5673120203377553, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
  }

  @Test
  public void test06()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      
      Expm1 expm1_0 = new Expm1();
      assertNotNull(expm1_0);
      
      int int0 = 1294;
      double double0 = (-3848.0);
      double double1 = 25.78;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) expm1_0, double0, double1);
      assertEquals(7.095185962273746E-13, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals((-3848.0), pegasusSolver0.getMin(), 0.01D);
      assertEquals((-1911.11), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(86, pegasusSolver0.getEvaluations());
      assertEquals(25.78, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1294, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = 318;
      Atan atan0 = new Atan();
      assertNotNull(atan0);
      
      double double0 = (-18.84128196681613);
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0);
      assertNotNull(pegasusSolver0);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals((-18.84128196681613), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals((-18.84128196681613), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) atan0, double0, (double) int0, allowedSolution0);
      assertEquals(4.849972103225521E-17, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(318.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(149.57935901659195, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals((-18.84128196681613), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-18.84128196681613), pegasusSolver0.getMin(), 0.01D);
      assertEquals(318, pegasusSolver0.getMaxEvaluations());
      assertEquals((-18.84128196681613), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(14, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
  }

  @Test
  public void test08()  throws Throwable  {
      double double0 = (-1951.666902);
      int int0 = 321;
      Atan atan0 = new Atan();
      assertNotNull(atan0);
      
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertNotNull(illinoisSolver0);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double1 = illinoisSolver0.solve(int0, (UnivariateRealFunction) atan0, double0, (double) int0, double0, allowedSolution0);
      assertEquals(2.1357259589796225E-10, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(18, illinoisSolver0.getEvaluations());
      assertEquals(321, illinoisSolver0.getMaxEvaluations());
      assertEquals((-1951.666902), illinoisSolver0.getMin(), 0.01D);
      assertEquals(321.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-1951.666902), illinoisSolver0.getStartValue(), 0.01D);
  }

  @Test
  public void test09()  throws Throwable  {
      double double0 = (-1951.61);
      int int0 = 297;
      Atan atan0 = new Atan();
      assertNotNull(atan0);
      
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertNotNull(illinoisSolver0);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double1 = illinoisSolver0.solve(int0, (UnivariateRealFunction) atan0, double0, (double) int0, double0, allowedSolution0);
      assertEquals(1.1209876553319011E-16, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1951.61), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(297, illinoisSolver0.getMaxEvaluations());
      assertEquals(297.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals((-1951.61), illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(18, illinoisSolver0.getEvaluations());
  }

  @Test
  public void test10()  throws Throwable  {
      double double0 = (-1949.127841665429);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double0, double0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals((-1949.127841665429), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-1949.127841665429), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals((-1949.127841665429), regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      
      int int0 = 300;
      Atan atan0 = new Atan();
      assertNotNull(atan0);
      
      double double1 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) atan0, double0, (double) int0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(300, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals((-1949.127841665429), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-1949.127841665429), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(18, regulaFalsiSolver0.getEvaluations());
      assertEquals(300.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-824.5639208327145), regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals((-1949.127841665429), regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-1949.127841665429), regulaFalsiSolver0.getMin(), 0.01D);
      
      PegasusSolver pegasusSolver0 = new PegasusSolver(double1, double1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertNotNull(pegasusSolver0);
      assertEquals(300, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals((-1949.127841665429), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-1949.127841665429), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(18, regulaFalsiSolver0.getEvaluations());
      assertEquals(300.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-824.5639208327145), regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals((-1949.127841665429), regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-1949.127841665429), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      
      double double2 = 0.5;
      assertFalse(double2 == double1);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double3 = pegasusSolver0.solve(int0, (UnivariateRealFunction) atan0, double0, double2, (double) int0, allowedSolution0);
      assertEquals((-1.3684555315672042E-48), double3, 0.01D);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertEquals(300, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals((-1949.127841665429), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-1949.127841665429), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(18, regulaFalsiSolver0.getEvaluations());
      assertEquals(300.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-824.5639208327145), regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals((-1949.127841665429), regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-1949.127841665429), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(300, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-1949.127841665429), pegasusSolver0.getMin(), 0.01D);
      assertEquals(300.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(13, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.5, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      double double0 = 0.0;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      
      double double1 = regulaFalsiSolver0.getAbsoluteAccuracy();
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      
      int int0 = 810;
      Log log0 = new Log();
      assertNotNull(log0);
      
      // Undeclared exception!
      try {
        double double2 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) log0, double1, (double) int0, double0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: convergence failed
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 297;
      Atan atan0 = new Atan();
      assertNotNull(atan0);
      
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      
      double double0 = (-2263.8317313305897);
      double double1 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) atan0, double0, (double) int0, double0);
      assertEquals(6.409292654093495E-22, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(297, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-2263.8317313305897), regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(17, regulaFalsiSolver0.getEvaluations());
      assertEquals((-2263.8317313305897), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(297.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 297;
      Atan atan0 = new Atan();
      assertNotNull(atan0);
      
      double double0 = (-20.0);
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0);
      assertNotNull(pegasusSolver0);
      assertEquals((-20.0), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals((-20.0), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) atan0, double0, (double) int0, allowedSolution0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-20.0), pegasusSolver0.getMin(), 0.01D);
      assertEquals((-20.0), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(297.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(14, pegasusSolver0.getEvaluations());
      assertEquals((-20.0), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(297, pegasusSolver0.getMaxEvaluations());
      assertEquals(138.5, pegasusSolver0.getStartValue(), 0.01D);
  }

  @Test
  public void test14()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertNotNull(illinoisSolver0);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0, illinoisSolver0.getEvaluations());
      
      double double0 = 0.0;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0);
      assertNotNull(pegasusSolver0);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      
      double double1 = pegasusSolver0.getStartValue();
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      
      Expm1 expm1_0 = new Expm1();
      assertNotNull(expm1_0);
      
      int int0 = 46;
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) expm1_0, (double) int0, double1, (double) int0, allowedSolution0);
      assertEquals(0.0, double2, 0.01D);
      assertTrue(double2 == double1);
      assertTrue(double2 == double0);
      assertTrue(double0 == double1);
      assertTrue(double0 == double2);
      assertTrue(double1 == double0);
      assertTrue(double1 == double2);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(46.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(46.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(46, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(2, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
  }

  @Test
  public void test15()  throws Throwable  {
      double double0 = 0.0;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0);
      assertNotNull(pegasusSolver0);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      
      double double1 = pegasusSolver0.getStartValue();
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      
      Expm1 expm1_0 = new Expm1();
      assertNotNull(expm1_0);
      
      int int0 = 46;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) expm1_0, double1, double1, (double) int0);
      assertEquals(0.0, double2, 0.01D);
      assertTrue(double1 == double2);
      assertTrue(double1 == double0);
      assertTrue(double2 == double1);
      assertTrue(double2 == double0);
      assertTrue(double0 == double2);
      assertTrue(double0 == double1);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(46, pegasusSolver0.getMaxEvaluations());
      assertEquals(2, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(46.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
  }

  @Test
  public void test16()  throws Throwable  {
      double double0 = (-1951.61);
      int int0 = 297;
      Atan atan0 = new Atan();
      assertNotNull(atan0);
      
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertNotNull(illinoisSolver0);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double1 = illinoisSolver0.solve(int0, (UnivariateRealFunction) atan0, double0, (double) int0, (double) int0, allowedSolution0);
      assertEquals((-5.740865532873627E-9), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(297, illinoisSolver0.getMaxEvaluations());
      assertEquals(297.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(297.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(18, illinoisSolver0.getEvaluations());
      assertEquals((-1951.61), illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0);
      assertFalse(double0 == double1);
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-1951.61), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals((-1951.61), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) atan0, double1, (double) int0, allowedSolution0);
      assertEquals((-1.7936620343357659E-43), double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(297, illinoisSolver0.getMaxEvaluations());
      assertEquals(297.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(297.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(18, illinoisSolver0.getEvaluations());
      assertEquals((-1951.61), illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(6, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-1951.61), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(297, pegasusSolver0.getMaxEvaluations());
      assertEquals((-1951.61), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(148.49999999712955, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(297.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals((-5.740865532873627E-9), pegasusSolver0.getMin(), 0.01D);
  }
}
