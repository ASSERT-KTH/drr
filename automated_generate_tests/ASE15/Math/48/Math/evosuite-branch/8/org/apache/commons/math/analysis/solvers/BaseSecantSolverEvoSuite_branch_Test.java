/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:09:06 GMT 2014
 */

package org.apache.commons.math.analysis.solvers;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Asinh;
import org.apache.commons.math.analysis.function.Atan;
import org.apache.commons.math.analysis.function.Gaussian;
import org.apache.commons.math.analysis.function.HarmonicOscillator;
import org.apache.commons.math.analysis.function.Signum;
import org.apache.commons.math.analysis.function.Sinh;
import org.apache.commons.math.analysis.function.Tan;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math.exception.ConvergenceException;



import org.junit.runner.RunWith;


public class BaseSecantSolverEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      double double0 = 3347.82338;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(3347.82338, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertNotNull(pegasusSolver0);
      
      int int0 = 1675;
      double double1 = 0.0;
      double double2 = 248.3838044491705;
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(double2, double2, double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertNotNull(harmonicOscillator0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double3 = pegasusSolver0.solve(int0, (UnivariateRealFunction) harmonicOscillator0, double1, double0, allowedSolution0);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1673.91169, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(3347.82338, pegasusSolver0.getMax(), 0.01D);
      assertEquals(3347.82338, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1675, pegasusSolver0.getMaxEvaluations());
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertEquals(1677.2955464315328, double3, 0.01D);
  }

  @Test
  public void test01()  throws Throwable  {
      double double0 = 3348.1131;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(3348.1131, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertNotNull(pegasusSolver0);
      
      int int0 = 1434;
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator((double) int0, (double) int0, (double) int0);
      assertNotNull(harmonicOscillator0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) harmonicOscillator0, (double) int0, double0, allowedSolution0);
      assertEquals(3348.1131, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1434.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(3348.1131, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(2391.0565500000002, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1434, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1434.0, double1, 0.01D);
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = 2047;
      Signum signum0 = new Signum();
      assertNotNull(signum0);
      
      double double0 = (-2025.320723238);
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertNotNull(pegasusSolver0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) signum0, double0, (double) int0, (double) int0, allowedSolution0);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2047.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(2047.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(36, pegasusSolver0.getEvaluations());
      assertEquals(2047, pegasusSolver0.getMaxEvaluations());
      assertEquals((-2025.320723238), pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(9.132118771725438E-7, double1, 0.01D);
  }

  @Test
  public void test03()  throws Throwable  {
      double double0 = 3051.37197;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double0);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(3051.37197, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(3051.37197, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertNotNull(regulaFalsiSolver0);
      
      int int0 = 3;
      Tan tan0 = new Tan();
      assertNotNull(tan0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double1 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) tan0, (double) int0, double0, double0, allowedSolution0);
      assertEquals(3, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(3051.37197, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(3051.37197, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(3051.37197, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(3, regulaFalsiSolver0.getEvaluations());
      assertEquals(3051.37197, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(3.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(3.0, double1, 0.01D);
  }

  @Test
  public void test04()  throws Throwable  {
      double double0 = 3348.1131;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(3348.1131, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertNotNull(pegasusSolver0);
      
      int int0 = 4;
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(double0, double0, (double) int0);
      assertNotNull(harmonicOscillator0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) harmonicOscillator0, (double) int0, double0, allowedSolution0);
      assertEquals(1676.05655, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(4.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(3348.1131, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(3348.1131, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(4, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1459.7055175043813, double1, 0.01D);
  }

  @Test
  public void test05()  throws Throwable  {
      double double0 = (-33.44193653886349);
      double double1 = 1282.0782659677889;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double1);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1282.0782659677889, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-33.44193653886349), illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertNotNull(illinoisSolver0);
      
      int int0 = 266;
      Asinh asinh0 = new Asinh();
      assertNotNull(asinh0);
      
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) asinh0, double0, double1);
      assertEquals(1282.0782659677889, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals(624.3181647144627, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1282.0782659677889, illinoisSolver0.getMax(), 0.01D);
      assertEquals(266, illinoisSolver0.getMaxEvaluations());
      assertEquals((-33.44193653886349), illinoisSolver0.getMin(), 0.01D);
      assertEquals((-33.44193653886349), illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(425.32923357536026, double2, 0.01D);
  }

  @Test
  public void test06()  throws Throwable  {
      double double0 = 579.4969821446;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double0, double0);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(579.4969821446, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(579.4969821446, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(579.4969821446, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      int int0 = (-963);
      Atan atan0 = new Atan();
      assertNotNull(atan0);
      
      int int1 = 20;
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double1 = illinoisSolver0.solve(int1, (UnivariateRealFunction) atan0, (double) int0, (double) int1, allowedSolution0);
      assertEquals(579.4969821446, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-471.5), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals((-963.0), illinoisSolver0.getMin(), 0.01D);
      assertEquals(20, illinoisSolver0.getMaxEvaluations());
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals(20.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(579.4969821446, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(579.4969821446, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(int0 == int1);
      assertFalse(double1 == double0);
      assertFalse(int1 == int0);
      assertEquals(20.0, double1, 0.01D);
  }

  @Test
  public void test07()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertNotNull(pegasusSolver0);
      
      int int0 = 201;
      Atan atan0 = new Atan();
      assertNotNull(atan0);
      
      double double0 = (-2367.763867921667);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) atan0, double0, (double) int0, double0, allowedSolution0);
      assertEquals(201, pegasusSolver0.getMaxEvaluations());
      assertEquals(201.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(17, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-2367.763867921667), pegasusSolver0.getMin(), 0.01D);
      assertEquals((-2367.763867921667), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(4.287668458710539E-9, double1, 0.01D);
  }

  @Test
  public void test08()  throws Throwable  {
      double double0 = 577.6727384435444;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double0, double0);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(577.6727384435444, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(577.6727384435444, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(577.6727384435444, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      int int0 = (-376);
      Atan atan0 = new Atan();
      assertNotNull(atan0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      int int1 = 79;
      double double1 = illinoisSolver0.solve(int1, (UnivariateRealFunction) atan0, (double) int0, (double) int1, allowedSolution0);
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals(79.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(577.6727384435444, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(577.6727384435444, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-148.5), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(79, illinoisSolver0.getMaxEvaluations());
      assertEquals(577.6727384435444, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-376.0), illinoisSolver0.getMin(), 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-147.77244375842196), double1, 0.01D);
  }

  @Test
  public void test09()  throws Throwable  {
      double double0 = 48.55592455063656;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double0, double0);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(48.55592455063656, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(48.55592455063656, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(48.55592455063656, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      int int0 = (-990);
      Atan atan0 = new Atan();
      assertNotNull(atan0);
      
      int int1 = 1287;
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double1 = illinoisSolver0.solve(int1, (UnivariateRealFunction) atan0, (double) int0, (double) int1, allowedSolution0);
      assertEquals(48.55592455063656, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals(1287, illinoisSolver0.getMaxEvaluations());
      assertEquals(148.5, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(48.55592455063656, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-990.0), illinoisSolver0.getMin(), 0.01D);
      assertEquals(48.55592455063656, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1287.0, illinoisSolver0.getMax(), 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(148.4154774402839, double1, 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertNotNull(pegasusSolver0);
      
      int int0 = 193;
      Atan atan0 = new Atan();
      assertNotNull(atan0);
      
      double double0 = (-2364.638059113128);
      double double1 = 3051.37197;
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) atan0, double0, double1, double0, allowedSolution0);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(3051.37197, pegasusSolver0.getMax(), 0.01D);
      assertEquals(193, pegasusSolver0.getMaxEvaluations());
      assertEquals(18, pegasusSolver0.getEvaluations());
      assertEquals((-2364.638059113128), pegasusSolver0.getMin(), 0.01D);
      assertEquals((-2364.638059113128), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(2.869524617404425E-17, double2, 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      double double0 = 48.55592455063656;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double0, double0);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(48.55592455063656, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(48.55592455063656, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(48.55592455063656, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertNotNull(illinoisSolver0);
      
      int int0 = (-990);
      Atan atan0 = new Atan();
      assertNotNull(atan0);
      
      int int1 = 1287;
      double double1 = illinoisSolver0.solve(int1, (UnivariateRealFunction) atan0, (double) int0, double0);
      assertEquals(48.55592455063656, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(48.55592455063656, illinoisSolver0.getMax(), 0.01D);
      assertEquals(48.55592455063656, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(48.55592455063656, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1287, illinoisSolver0.getMaxEvaluations());
      assertEquals((-470.72203772468174), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals((-990.0), illinoisSolver0.getMin(), 0.01D);
      assertFalse(int0 == int1);
      assertFalse(double1 == double0);
      assertFalse(int1 == int0);
      assertFalse(double0 == double1);
      assertEquals((-467.4629267110102), double1, 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      double double0 = 1410.915918647429;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double0, double0);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(1410.915918647429, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1410.915918647429, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1410.915918647429, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertNotNull(regulaFalsiSolver0);
      
      int int0 = 243;
      Sinh sinh0 = new Sinh();
      assertNotNull(sinh0);
      
      double double1 = (-2108.5);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      try {
        double double2 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) sinh0, double1, double0, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: convergence failed
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertNotNull(pegasusSolver0);
      
      int int0 = 193;
      Atan atan0 = new Atan();
      assertNotNull(atan0);
      
      double double0 = (-2354.4);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) atan0, double0, (double) int0, double0, allowedSolution0);
      assertEquals((-2354.4), pegasusSolver0.getMin(), 0.01D);
      assertEquals(17, pegasusSolver0.getEvaluations());
      assertEquals((-2354.4), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(193.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(193, pegasusSolver0.getMaxEvaluations());
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-4.0774965311034123E-13), double1, 0.01D);
      
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double1);
      assertEquals((-2354.4), pegasusSolver0.getMin(), 0.01D);
      assertEquals(17, pegasusSolver0.getEvaluations());
      assertEquals((-2354.4), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(193.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(193, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals((-4.0774965311034123E-13), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertNotNull(illinoisSolver0);
      
      double double2 = 1.0E-6;
      assertFalse(double2 == double1);
      
      double double3 = illinoisSolver0.solve(int0, (UnivariateRealFunction) atan0, double0, double2, allowedSolution0);
      assertEquals((-2354.4), pegasusSolver0.getMin(), 0.01D);
      assertEquals(17, pegasusSolver0.getEvaluations());
      assertEquals((-2354.4), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(193.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(193, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-2354.4), illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getMax(), 0.01D);
      assertEquals((-4.0774965311034123E-13), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(193, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-1177.1999995), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(7, illinoisSolver0.getEvaluations());
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertEquals((-1.0097419586828949E-28), double3, 0.01D);
  }

  @Test
  public void test14()  throws Throwable  {
      double double0 = 1.0E-15;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double0, double0);
      assertEquals(1.0E-15, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      int int0 = (-1002);
      Atan atan0 = new Atan();
      assertNotNull(atan0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      int int1 = 18;
      double double1 = illinoisSolver0.solve(int1, (UnivariateRealFunction) atan0, (double) int0, (double) int1, allowedSolution0);
      assertEquals(1.0E-15, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(18.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-1002.0), illinoisSolver0.getMin(), 0.01D);
      assertEquals(16, illinoisSolver0.getEvaluations());
      assertEquals(18, illinoisSolver0.getMaxEvaluations());
      assertEquals((-492.0), illinoisSolver0.getStartValue(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(int0 == int1);
      assertFalse(double1 == double0);
      assertFalse(int1 == int0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 4;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((double) int0);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(4.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertNotNull(regulaFalsiSolver0);
      
      double double0 = (-213.906579);
      Gaussian gaussian0 = new Gaussian(double0, (double) int0, (double) int0);
      assertNotNull(gaussian0);
      
      double double1 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) gaussian0, double0, double0, (double) int0);
      assertEquals((-213.906579), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(4.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(4, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals((-213.906579), regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(4.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2, regulaFalsiSolver0.getEvaluations());
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals((-213.906579), double1, 0.01D);
      
      Asinh asinh0 = new Asinh();
      assertNotNull(asinh0);
      
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double1);
      assertEquals((-213.906579), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(4.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(4, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals((-213.906579), regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(4.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals((-213.906579), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals((-213.906579), illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertNotNull(illinoisSolver0);
      
      double double2 = 0.0;
      assertFalse(double2 == double1);
      
      double double3 = illinoisSolver0.solve(int0, (UnivariateRealFunction) asinh0, double0, double2);
      assertEquals((-213.906579), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(4.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(4, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals((-213.906579), regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(4.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals((-213.906579), illinoisSolver0.getMin(), 0.01D);
      assertEquals((-213.906579), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-106.9532895), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(2, illinoisSolver0.getEvaluations());
      assertEquals(4, illinoisSolver0.getMaxEvaluations());
      assertEquals((-213.906579), illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertTrue(double1 == double0);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertFalse(double0 == double3);
      assertTrue(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double3);
      assertEquals(0.0, double3, 0.01D);
  }
}
