/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:44:44 GMT 2014
 */

package org.apache.commons.math.complex;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.text.FieldPosition;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Locale;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;


public class ComplexFormatEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      
      ComplexFormat complexFormat0 = ComplexFormat.getInstance(locale0);
      assertNotNull(complexFormat0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      
      NumberFormat numberFormat0 = null;
      // Undeclared exception!
      try {
        complexFormat0.setRealFormat(numberFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // realFormat can not be null.
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      NumberFormat numberFormat0 = null;
      ComplexFormat complexFormat0 = null;
      try {
        complexFormat0 = new ComplexFormat(numberFormat0, numberFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // imaginaryFormat can not be null.
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "";
      ComplexFormat complexFormat0 = null;
      try {
        complexFormat0 = new ComplexFormat(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // imaginaryCharacter must be a non-empty string.
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getInstance();
      assertNotNull(decimalFormat0);
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(false, decimalFormat0.isParseBigDecimal());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(false, decimalFormat0.isParseIntegerOnly());
      assertEquals(true, decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositivePrefix());
      
      ComplexFormat complexFormat0 = new ComplexFormat((NumberFormat) decimalFormat0);
      assertNotNull(complexFormat0);
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(false, decimalFormat0.isParseBigDecimal());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(false, decimalFormat0.isParseIntegerOnly());
      assertEquals(true, decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      
      String string0 = null;
      // Undeclared exception!
      try {
        complexFormat0.setImaginaryCharacter(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // imaginaryCharacter must be a non-empty string.
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      ComplexFormat complexFormat0 = new ComplexFormat();
      assertNotNull(complexFormat0);
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      
      String string0 = " ";
      try {
        Complex complex0 = complexFormat0.parse(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable complex number: \" \"
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getInstance();
      assertNotNull(decimalFormat0);
      assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(false, decimalFormat0.isParseBigDecimal());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(false, decimalFormat0.isParseIntegerOnly());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(true, decimalFormat0.isGroupingUsed());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      
      ComplexFormat complexFormat0 = new ComplexFormat((NumberFormat) decimalFormat0, (NumberFormat) decimalFormat0);
      assertNotNull(complexFormat0);
      assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(false, decimalFormat0.isParseBigDecimal());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(false, decimalFormat0.isParseIntegerOnly());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(true, decimalFormat0.isGroupingUsed());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      
      String string0 = "8-T*?<%\\";
      try {
        Object object0 = complexFormat0.parseObject(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Format.parseObject(String) failed
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getInstance();
      assertNotNull(decimalFormat0);
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(true, decimalFormat0.isGroupingUsed());
      assertEquals(false, decimalFormat0.isParseIntegerOnly());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(false, decimalFormat0.isParseBigDecimal());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      
      ComplexFormat complexFormat0 = new ComplexFormat((NumberFormat) decimalFormat0);
      assertNotNull(complexFormat0);
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(true, decimalFormat0.isGroupingUsed());
      assertEquals(false, decimalFormat0.isParseIntegerOnly());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(false, decimalFormat0.isParseBigDecimal());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      
      String string0 = "9q;;";
      int int0 = 0;
      ParsePosition parsePosition0 = new ParsePosition(int0);
      assertNotNull(parsePosition0);
      assertEquals(0, parsePosition0.getIndex());
      assertEquals(-1, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      
      Object object0 = complexFormat0.parseObject(string0, parsePosition0);
      assertNull(object0);
      assertEquals(0, parsePosition0.getIndex());
      assertEquals(1, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=1]", parsePosition0.toString());
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(true, decimalFormat0.isGroupingUsed());
      assertEquals(false, decimalFormat0.isParseIntegerOnly());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(false, decimalFormat0.isParseBigDecimal());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "O#TLi84LB>K/?";
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      //  // Unstable assertion: assertNotNull(decimalFormat0);
      //  // Unstable assertion: assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      //  // Unstable assertion: assertEquals(false, decimalFormat0.isParseBigDecimal());
      //  // Unstable assertion: assertEquals("", decimalFormat0.getPositivePrefix());
      //  // Unstable assertion: assertEquals("-", decimalFormat0.getNegativePrefix());
      //  // Unstable assertion: assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      //  // Unstable assertion: assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      //  // Unstable assertion: assertEquals("%", decimalFormat0.getPositiveSuffix());
      //  // Unstable assertion: assertEquals(100, decimalFormat0.getMultiplier());
      //  // Unstable assertion: assertEquals("#,##0%", decimalFormat0.toPattern());
      //  // Unstable assertion: assertEquals(3, decimalFormat0.getGroupingSize());
      //  // Unstable assertion: assertEquals(false, decimalFormat0.isParseIntegerOnly());
      //  // Unstable assertion: assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      //  // Unstable assertion: assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      //  // Unstable assertion: assertEquals(true, decimalFormat0.isGroupingUsed());
      //  // Unstable assertion: assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      //  // Unstable assertion: assertEquals("%", decimalFormat0.getNegativeSuffix());
      
      ComplexFormat complexFormat0 = ComplexFormat.getInstance();
      //  // Unstable assertion: assertNotNull(complexFormat0);
      //  // Unstable assertion: assertEquals("i", complexFormat0.getImaginaryCharacter());
      
      Complex complex0 = Complex.INF;
      //  // Unstable assertion: assertNotNull(complex0);
      //  // Unstable assertion: assertEquals(false, complex0.isNaN());
      //  // Unstable assertion: assertEquals(0.0, complex0.abs(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, complex0.getReal(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isInfinite());
      //  // Unstable assertion: assertEquals(0.0, complex0.getImaginary(), 0.01D);
      
      String string1 = complexFormat0.format((Object) complex0);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertEquals(false, complex0.isNaN());
      //  // Unstable assertion: assertEquals(0.0, complex0.abs(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, complex0.getReal(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isInfinite());
      //  // Unstable assertion: assertEquals(0.0, complex0.getImaginary(), 0.01D);
      //  // Unstable assertion: assertEquals("i", complexFormat0.getImaginaryCharacter());
      //  // Unstable assertion: assertEquals("0", string1);
      
      ComplexFormat complexFormat1 = new ComplexFormat(string0, (NumberFormat) decimalFormat0, (NumberFormat) decimalFormat0);
      //  // Unstable assertion: assertFalse(complexFormat1.equals((Object)complexFormat0));
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      //  // Unstable assertion: assertNotNull(complexFormat1);
      //  // Unstable assertion: assertNotSame(complexFormat1, complexFormat0);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertEquals("O#TLi84LB>K/?", complexFormat1.getImaginaryCharacter());
      //  // Unstable assertion: assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      //  // Unstable assertion: assertEquals(false, decimalFormat0.isParseBigDecimal());
      //  // Unstable assertion: assertEquals("", decimalFormat0.getPositivePrefix());
      //  // Unstable assertion: assertEquals("-", decimalFormat0.getNegativePrefix());
      //  // Unstable assertion: assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      //  // Unstable assertion: assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      //  // Unstable assertion: assertEquals("%", decimalFormat0.getPositiveSuffix());
      //  // Unstable assertion: assertEquals(100, decimalFormat0.getMultiplier());
      //  // Unstable assertion: assertEquals("#,##0%", decimalFormat0.toPattern());
      //  // Unstable assertion: assertEquals(3, decimalFormat0.getGroupingSize());
      //  // Unstable assertion: assertEquals(false, decimalFormat0.isParseIntegerOnly());
      //  // Unstable assertion: assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      //  // Unstable assertion: assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      //  // Unstable assertion: assertEquals(true, decimalFormat0.isGroupingUsed());
      //  // Unstable assertion: assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      //  // Unstable assertion: assertEquals("%", decimalFormat0.getNegativeSuffix());
      
      try {
        Complex complex1 = complexFormat1.parse(string1);
       //  fail("Expecting exception: ParseException");
       // Unstable assertion
      } catch(ParseException e) {
         //
         // Unparseable complex number: \"0\"
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      
      ComplexFormat complexFormat0 = ComplexFormat.getInstance(locale0);
      assertNotNull(complexFormat0);
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      
      String string0 = "9";
      Complex complex0 = complexFormat0.parse(string0);
      assertNotNull(complex0);
      assertEquals(false, complex0.isNaN());
      assertEquals(9.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(9.0, complex0.abs(), 0.01D);
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("i", complexFormat0.getImaginaryCharacter());
  }

  @Test
  public void test09() {}
//   @Test
//   public void test09()  throws Throwable  {
//       DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getCurrencyInstance();
//       assertNotNull(decimalFormat0);
//       assertEquals(2, decimalFormat0.getMaximumFractionDigits());
//       assertEquals("", decimalFormat0.getNegativeSuffix());
//       assertEquals("\u00A4 #,##0.00", decimalFormat0.toLocalizedPattern());
//       assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
//       assertEquals(false, decimalFormat0.isParseBigDecimal());
//       assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
//       assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
//       assertEquals("-\u00A4 ", decimalFormat0.getNegativePrefix());
//       assertEquals(3, decimalFormat0.getGroupingSize());
//       assertEquals("\u00A4 ", decimalFormat0.getPositivePrefix());
//       assertEquals(false, decimalFormat0.isParseIntegerOnly());
//       assertEquals(2, decimalFormat0.getMinimumFractionDigits());
//       assertEquals("", decimalFormat0.getPositiveSuffix());
//       assertEquals(true, decimalFormat0.isGroupingUsed());
//       assertEquals(1, decimalFormat0.getMultiplier());
//       assertEquals("\u00A4 #,##0.00", decimalFormat0.toPattern());
//       assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
//       
//       ComplexFormat complexFormat0 = new ComplexFormat((NumberFormat) decimalFormat0, (NumberFormat) decimalFormat0);
//       assertNotNull(complexFormat0);
//       assertEquals(2, decimalFormat0.getMaximumFractionDigits());
//       assertEquals("", decimalFormat0.getNegativeSuffix());
//       assertEquals("\u00A4 #,##0.00", decimalFormat0.toLocalizedPattern());
//       assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
//       assertEquals(false, decimalFormat0.isParseBigDecimal());
//       assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
//       assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
//       assertEquals("-\u00A4 ", decimalFormat0.getNegativePrefix());
//       assertEquals(3, decimalFormat0.getGroupingSize());
//       assertEquals("\u00A4 ", decimalFormat0.getPositivePrefix());
//       assertEquals(false, decimalFormat0.isParseIntegerOnly());
//       assertEquals(2, decimalFormat0.getMinimumFractionDigits());
//       assertEquals("", decimalFormat0.getPositiveSuffix());
//       assertEquals(true, decimalFormat0.isGroupingUsed());
//       assertEquals(1, decimalFormat0.getMultiplier());
//       assertEquals("\u00A4 #,##0.00", decimalFormat0.toPattern());
//       assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
//       assertEquals("i", complexFormat0.getImaginaryCharacter());
//       
//       StringBuffer stringBuffer0 = new StringBuffer();
//       assertNotNull(stringBuffer0);
//       assertEquals(16, stringBuffer0.capacity());
//       assertEquals(0, stringBuffer0.length());
//       assertEquals("", stringBuffer0.toString());
//       
//       short short0 = (short) (-3196);
//       Short short1 = new Short(short0);
//       assertTrue(short1.equals((Object)short0));
//       assertEquals((short) (-3196), (short)short1);
//       
//       FieldPosition fieldPosition0 = new FieldPosition((int) short1);
//       assertTrue(short1.equals((Object)short0));
//       assertNotNull(fieldPosition0);
//       assertEquals(0, fieldPosition0.getBeginIndex());
//       assertEquals(-3196, fieldPosition0.getField());
//       assertEquals("java.text.FieldPosition[field=-3196,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
//       assertEquals(0, fieldPosition0.getEndIndex());
//       
//       StringBuffer stringBuffer1 = complexFormat0.format((Object) short1, stringBuffer0, fieldPosition0);
//       assertTrue(short1.equals((Object)short0));
//       assertNotNull(stringBuffer1);
//       assertSame(stringBuffer1, stringBuffer0);
//       assertSame(stringBuffer0, stringBuffer1);
//       assertEquals(0, fieldPosition0.getBeginIndex());
//       assertEquals(-3196, fieldPosition0.getField());
//       assertEquals("java.text.FieldPosition[field=-3196,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
//       assertEquals(0, fieldPosition0.getEndIndex());
//       assertEquals(2, decimalFormat0.getMaximumFractionDigits());
//       assertEquals("", decimalFormat0.getNegativeSuffix());
//       assertEquals("\u00A4 #,##0.00", decimalFormat0.toLocalizedPattern());
//       assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
//       assertEquals(false, decimalFormat0.isParseBigDecimal());
//       assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
//       assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
//       assertEquals("-\u00A4 ", decimalFormat0.getNegativePrefix());
//       assertEquals(3, decimalFormat0.getGroupingSize());
//       assertEquals("\u00A4 ", decimalFormat0.getPositivePrefix());
//       assertEquals(false, decimalFormat0.isParseIntegerOnly());
//       assertEquals(2, decimalFormat0.getMinimumFractionDigits());
//       assertEquals("", decimalFormat0.getPositiveSuffix());
//       assertEquals(true, decimalFormat0.isGroupingUsed());
//       assertEquals(1, decimalFormat0.getMultiplier());
//       assertEquals("\u00A4 #,##0.00", decimalFormat0.toPattern());
//       assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
//       assertEquals("-\u00A4 3,196.00", stringBuffer1.toString());
//       assertEquals(11, stringBuffer1.length());
//       assertEquals(16, stringBuffer1.capacity());
//       assertEquals("i", complexFormat0.getImaginaryCharacter());
//       assertEquals(16, stringBuffer0.capacity());
//       assertEquals("-\u00A4 3,196.00", stringBuffer0.toString());
//       assertEquals(11, stringBuffer0.length());
//   }

  @Test
  public void test10()  throws Throwable  {
      Complex complex0 = null;
      // Undeclared exception!
      try {
        String string0 = ComplexFormat.formatComplex(complex0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Date
         //
      }
  }
}
