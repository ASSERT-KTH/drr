/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 01:04:49 GMT 2014
 */

package org.apache.commons.math.ode.nonstiff;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class AdamsMoultonIntegratorEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      int int0 = 5;
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(int0, int0, int0, int0, int0);
      assertEquals(1.122462048309373, adamsMoultonIntegrator0.getMaxGrowth(), 0.01D);
      assertEquals(0.2, adamsMoultonIntegrator0.getMinReduction(), 0.01D);
      assertEquals(2147483647, adamsMoultonIntegrator0.getMaxEvaluations());
      assertEquals("Adams-Moulton", adamsMoultonIntegrator0.getName());
      assertEquals(0, adamsMoultonIntegrator0.getEvaluations());
      assertEquals(0.9, adamsMoultonIntegrator0.getSafety(), 0.01D);
      assertEquals(5.0, adamsMoultonIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(Double.NaN, adamsMoultonIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(5.0, adamsMoultonIntegrator0.getMinStep(), 0.01D);
      assertEquals(5.0, adamsMoultonIntegrator0.getMaxStep(), 0.01D);
      assertNotNull(adamsMoultonIntegrator0);
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 11;
      double[] doubleArray0 = new double[10];
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(int0, (double) int0, (double) int0, doubleArray0, doubleArray0);
      assertEquals(2147483647, adamsMoultonIntegrator0.getMaxEvaluations());
      assertEquals(11.0, adamsMoultonIntegrator0.getMaxStep(), 0.01D);
      assertEquals(Double.NaN, adamsMoultonIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals("Adams-Moulton", adamsMoultonIntegrator0.getName());
      assertEquals(0.9, adamsMoultonIntegrator0.getSafety(), 0.01D);
      assertEquals(11.0, adamsMoultonIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(1.0594630943592953, adamsMoultonIntegrator0.getMaxGrowth(), 0.01D);
      assertEquals(11.0, adamsMoultonIntegrator0.getMinStep(), 0.01D);
      assertEquals(0.2, adamsMoultonIntegrator0.getMinReduction(), 0.01D);
      assertEquals(0, adamsMoultonIntegrator0.getEvaluations());
      assertNotNull(adamsMoultonIntegrator0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }
}
