/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:30:00 GMT 2014
 */

package org.apache.commons.math3.genetics;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.exception.NotPositiveException;
import org.apache.commons.math3.exception.NullArgumentException;
import org.apache.commons.math3.exception.NumberIsTooLargeException;
import org.apache.commons.math3.genetics.Chromosome;
import org.apache.commons.math3.genetics.ElitisticListPopulation;



import org.junit.runner.RunWith;


public class ListPopulationEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      int int0 = 1;
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(int0, int0);
      assertNotNull(elitisticListPopulation0);
      assertEquals(1.0, elitisticListPopulation0.getElitismRate(), 0.01D);
      assertEquals(0, elitisticListPopulation0.getPopulationSize());
      assertEquals(1, elitisticListPopulation0.getPopulationLimit());
      assertEquals("[]", elitisticListPopulation0.toString());
      
      int int1 = (-70);
      // Undeclared exception!
      try {
        elitisticListPopulation0.setPopulationLimit(int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population limit has to be positive
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 16;
      double double0 = 0.429;
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(int0, double0);
      assertNotNull(elitisticListPopulation0);
      assertEquals(0.429, elitisticListPopulation0.getElitismRate(), 0.01D);
      assertEquals(0, elitisticListPopulation0.getPopulationSize());
      assertEquals("[]", elitisticListPopulation0.toString());
      assertEquals(16, elitisticListPopulation0.getPopulationLimit());
      
      elitisticListPopulation0.setPopulationLimit(int0);
      assertEquals(0.429, elitisticListPopulation0.getElitismRate(), 0.01D);
      assertEquals(0, elitisticListPopulation0.getPopulationSize());
      assertEquals("[]", elitisticListPopulation0.toString());
      assertEquals(16, elitisticListPopulation0.getPopulationLimit());
  }

  @Test
  public void test02()  throws Throwable  {
      LinkedList<Chromosome> linkedList0 = new LinkedList<Chromosome>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      int int0 = 2787;
      double double0 = 0.0;
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation((List<Chromosome>) linkedList0, int0, double0);
      assertNotNull(elitisticListPopulation0);
      assertEquals(0, elitisticListPopulation0.getPopulationSize());
      assertEquals(2787, elitisticListPopulation0.getPopulationLimit());
      assertEquals("[]", elitisticListPopulation0.toString());
      assertEquals(0.0, elitisticListPopulation0.getElitismRate(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      Chromosome chromosome0 = null;
      elitisticListPopulation0.addChromosome(chromosome0);
      assertEquals(2787, elitisticListPopulation0.getPopulationLimit());
      assertEquals(1, elitisticListPopulation0.getPopulationSize());
      assertEquals("[null]", elitisticListPopulation0.toString());
      assertEquals(0.0, elitisticListPopulation0.getElitismRate(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try {
        Chromosome chromosome1 = elitisticListPopulation0.getFittestChromosome();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = 1;
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(int0, int0);
      assertNotNull(elitisticListPopulation0);
      assertEquals(1, elitisticListPopulation0.getPopulationLimit());
      assertEquals(1.0, elitisticListPopulation0.getElitismRate(), 0.01D);
      assertEquals(0, elitisticListPopulation0.getPopulationSize());
      assertEquals("[]", elitisticListPopulation0.toString());
      
      Chromosome chromosome0 = null;
      elitisticListPopulation0.addChromosome(chromosome0);
      assertEquals("[null]", elitisticListPopulation0.toString());
      assertEquals(1, elitisticListPopulation0.getPopulationLimit());
      assertEquals(1.0, elitisticListPopulation0.getElitismRate(), 0.01D);
      assertEquals(1, elitisticListPopulation0.getPopulationSize());
      
      // Undeclared exception!
      try {
        elitisticListPopulation0.addChromosome(chromosome0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // list of chromosomes bigger than maxPopulationSize
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = 1;
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(int0, int0);
      assertNotNull(elitisticListPopulation0);
      assertEquals(0, elitisticListPopulation0.getPopulationSize());
      assertEquals(1.0, elitisticListPopulation0.getElitismRate(), 0.01D);
      assertEquals(1, elitisticListPopulation0.getPopulationLimit());
      assertEquals("[]", elitisticListPopulation0.toString());
      
      Chromosome chromosome0 = null;
      elitisticListPopulation0.addChromosome(chromosome0);
      assertEquals(1, elitisticListPopulation0.getPopulationSize());
      assertEquals("[null]", elitisticListPopulation0.toString());
      assertEquals(1.0, elitisticListPopulation0.getElitismRate(), 0.01D);
      assertEquals(1, elitisticListPopulation0.getPopulationLimit());
      
      List<Chromosome> list0 = elitisticListPopulation0.getChromosomes();
      assertNotNull(list0);
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1, elitisticListPopulation0.getPopulationSize());
      assertEquals("[null]", elitisticListPopulation0.toString());
      assertEquals(1.0, elitisticListPopulation0.getElitismRate(), 0.01D);
      assertEquals(1, elitisticListPopulation0.getPopulationLimit());
      
      // Undeclared exception!
      try {
        elitisticListPopulation0.addChromosomes((Collection<Chromosome>) list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // list of chromosomes bigger than maxPopulationSize
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      LinkedList<Chromosome> linkedList0 = new LinkedList<Chromosome>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      int int0 = 2787;
      double double0 = 0.0;
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation((List<Chromosome>) linkedList0, int0, double0);
      assertNotNull(elitisticListPopulation0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(2787, elitisticListPopulation0.getPopulationLimit());
      assertEquals("[]", elitisticListPopulation0.toString());
      assertEquals(0.0, elitisticListPopulation0.getElitismRate(), 0.01D);
      assertEquals(0, elitisticListPopulation0.getPopulationSize());
      
      elitisticListPopulation0.addChromosomes((Collection<Chromosome>) linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(2787, elitisticListPopulation0.getPopulationLimit());
      assertEquals("[]", elitisticListPopulation0.toString());
      assertEquals(0.0, elitisticListPopulation0.getElitismRate(), 0.01D);
      assertEquals(0, elitisticListPopulation0.getPopulationSize());
  }

  @Test
  public void test06()  throws Throwable  {
      List<Chromosome> list0 = null;
      int int0 = 42;
      double double0 = 0.0;
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(int0, double0);
      assertNotNull(elitisticListPopulation0);
      assertEquals(0.0, elitisticListPopulation0.getElitismRate(), 0.01D);
      assertEquals(0, elitisticListPopulation0.getPopulationSize());
      assertEquals(42, elitisticListPopulation0.getPopulationLimit());
      assertEquals("[]", elitisticListPopulation0.toString());
      
      // Undeclared exception!
      try {
        elitisticListPopulation0.setChromosomes(list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      LinkedList<Chromosome> linkedList0 = new LinkedList<Chromosome>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      int int0 = 2778;
      double double0 = 1.0;
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation((List<Chromosome>) linkedList0, int0, double0);
      assertNotNull(elitisticListPopulation0);
      assertEquals(1.0, elitisticListPopulation0.getElitismRate(), 0.01D);
      assertEquals(2778, elitisticListPopulation0.getPopulationLimit());
      assertEquals(0, elitisticListPopulation0.getPopulationSize());
      assertEquals("[]", elitisticListPopulation0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      elitisticListPopulation0.setChromosomes((List<Chromosome>) linkedList0);
      assertEquals(1.0, elitisticListPopulation0.getElitismRate(), 0.01D);
      assertEquals(2778, elitisticListPopulation0.getPopulationLimit());
      assertEquals(0, elitisticListPopulation0.getPopulationSize());
      assertEquals("[]", elitisticListPopulation0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
  }

  @Test
  public void test08()  throws Throwable  {
      int int0 = (-1504);
      ElitisticListPopulation elitisticListPopulation0 = null;
      try {
        elitisticListPopulation0 = new ElitisticListPopulation(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population limit has to be positive
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      List<Chromosome> list0 = null;
      int int0 = (-1607);
      ElitisticListPopulation elitisticListPopulation0 = null;
      try {
        elitisticListPopulation0 = new ElitisticListPopulation(list0, int0, (double) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 1;
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(int0, int0);
      assertNotNull(elitisticListPopulation0);
      assertEquals(1.0, elitisticListPopulation0.getElitismRate(), 0.01D);
      assertEquals(0, elitisticListPopulation0.getPopulationSize());
      assertEquals("[]", elitisticListPopulation0.toString());
      assertEquals(1, elitisticListPopulation0.getPopulationLimit());
      
      Iterator<Chromosome> iterator0 = elitisticListPopulation0.iterator();
      assertNotNull(iterator0);
      assertEquals(1.0, elitisticListPopulation0.getElitismRate(), 0.01D);
      assertEquals(0, elitisticListPopulation0.getPopulationSize());
      assertEquals("[]", elitisticListPopulation0.toString());
      assertEquals(1, elitisticListPopulation0.getPopulationLimit());
  }

  @Test
  public void test11()  throws Throwable  {
      LinkedList<Chromosome> linkedList0 = new LinkedList<Chromosome>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      int int0 = 2778;
      double double0 = 1.0;
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation((List<Chromosome>) linkedList0, int0, double0);
      assertNotNull(elitisticListPopulation0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(2778, elitisticListPopulation0.getPopulationLimit());
      assertEquals(1.0, elitisticListPopulation0.getElitismRate(), 0.01D);
      assertEquals(0, elitisticListPopulation0.getPopulationSize());
      assertEquals("[]", elitisticListPopulation0.toString());
      
      int int1 = elitisticListPopulation0.getPopulationLimit();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(2778, elitisticListPopulation0.getPopulationLimit());
      assertEquals(1.0, elitisticListPopulation0.getElitismRate(), 0.01D);
      assertEquals(0, elitisticListPopulation0.getPopulationSize());
      assertEquals("[]", elitisticListPopulation0.toString());
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(2778, int1);
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 16;
      double double0 = 0.429;
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(int0, double0);
      assertNotNull(elitisticListPopulation0);
      assertEquals(16, elitisticListPopulation0.getPopulationLimit());
      assertEquals("[]", elitisticListPopulation0.toString());
      assertEquals(0, elitisticListPopulation0.getPopulationSize());
      assertEquals(0.429, elitisticListPopulation0.getElitismRate(), 0.01D);
      
      int int1 = elitisticListPopulation0.getPopulationSize();
      assertEquals(16, elitisticListPopulation0.getPopulationLimit());
      assertEquals("[]", elitisticListPopulation0.toString());
      assertEquals(0, elitisticListPopulation0.getPopulationSize());
      assertEquals(0.429, elitisticListPopulation0.getElitismRate(), 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, int1);
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 16;
      double double0 = 0.429;
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(int0, double0);
      assertNotNull(elitisticListPopulation0);
      assertEquals("[]", elitisticListPopulation0.toString());
      assertEquals(0, elitisticListPopulation0.getPopulationSize());
      assertEquals(0.429, elitisticListPopulation0.getElitismRate(), 0.01D);
      assertEquals(16, elitisticListPopulation0.getPopulationLimit());
      
      String string0 = elitisticListPopulation0.toString();
      assertNotNull(string0);
      assertEquals("[]", elitisticListPopulation0.toString());
      assertEquals(0, elitisticListPopulation0.getPopulationSize());
      assertEquals(0.429, elitisticListPopulation0.getElitismRate(), 0.01D);
      assertEquals(16, elitisticListPopulation0.getPopulationLimit());
      assertEquals("[]", string0);
  }

  @Test
  public void test14()  throws Throwable  {
      LinkedList<Chromosome> linkedList0 = new LinkedList<Chromosome>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      int int0 = 2787;
      double double0 = 0.0;
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation((List<Chromosome>) linkedList0, int0, double0);
      assertNotNull(elitisticListPopulation0);
      assertEquals(2787, elitisticListPopulation0.getPopulationLimit());
      assertEquals(0.0, elitisticListPopulation0.getElitismRate(), 0.01D);
      assertEquals(0, elitisticListPopulation0.getPopulationSize());
      assertEquals("[]", elitisticListPopulation0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      List<Chromosome> list0 = elitisticListPopulation0.getChromosomeList();
      assertNotNull(list0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(2787, elitisticListPopulation0.getPopulationLimit());
      assertEquals(0.0, elitisticListPopulation0.getElitismRate(), 0.01D);
      assertEquals(0, elitisticListPopulation0.getPopulationSize());
      assertEquals("[]", elitisticListPopulation0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
  }
}
