/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:15:25 GMT 2014
 */

package org.apache.commons.math.stat.regression;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.stat.regression.SimpleRegression;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;


public class SimpleRegressionEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      assertNotNull(simpleRegression0);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      
      double double0 = (-283.42);
      // Undeclared exception!
      try {
        double double1 = simpleRegression0.getSlopeConfidenceInterval(double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      assertNotNull(simpleRegression0);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      
      double double0 = simpleRegression0.getRSquare();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      
      // Undeclared exception!
      try {
        double double1 = simpleRegression0.getSlopeConfidenceInterval(double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      assertNotNull(simpleRegression0);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      
      double[][] doubleArray0 = new double[16][3];
      double[] doubleArray1 = new double[10];
      double double0 = (-1831.5268339907866);
      doubleArray1[5] = double0;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray1);
      
      doubleArray2[0] = doubleArray1[5];
      doubleArray0[1] = doubleArray2;
      assertNotNull(doubleArray0[1]);
      
      simpleRegression0.addData(doubleArray0);
      assertEquals(0.0, simpleRegression0.getSlope(), 0.01D);
      assertEquals(0.0, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(0.0, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(0.0, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(0.0, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(0.0, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(16L, simpleRegression0.getN());
      assertEquals(0.0, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(0.0, simpleRegression0.getSlopeStdErr(), 0.01D);
      
      simpleRegression0.addData(doubleArray2[3], doubleArray2[0]);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-1831.5268339907866), 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(3144834.884651545, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(0.2576941016011038, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(209655.65897676966, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(114.47042712442416, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(0.0039062499999999545, simpleRegression0.getRSquare(), 0.01D);
      assertEquals((-114.47042712442418), simpleRegression0.getIntercept(), 0.01D);
      assertEquals(3157167.5704737077, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals((-0.06250000000000003), simpleRegression0.getSlope(), 0.01D);
      assertEquals(12332.685822162928, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(17L, simpleRegression0.getN());
      assertEquals((-0.06249999999999963), simpleRegression0.getR(), 0.01D);
      
      double double1 = simpleRegression0.getR();
      assertFalse(double1 == double0);
      assertEquals((-0.06249999999999963), double1, 0.01D);
      assertEquals(3144834.884651545, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(0.2576941016011038, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(209655.65897676966, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(114.47042712442416, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(0.0039062499999999545, simpleRegression0.getRSquare(), 0.01D);
      assertEquals((-114.47042712442418), simpleRegression0.getIntercept(), 0.01D);
      assertEquals(3157167.5704737077, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals((-0.06250000000000003), simpleRegression0.getSlope(), 0.01D);
      assertEquals(12332.685822162928, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(17L, simpleRegression0.getN());
      assertEquals((-0.06249999999999963), simpleRegression0.getR(), 0.01D);
  }

  @Test
  public void test03()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      assertNotNull(simpleRegression0);
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      
      double[][] doubleArray0 = new double[16][3];
      simpleRegression0.addData(doubleArray0);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(16L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(0.0, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      
      double double0 = simpleRegression0.getSlopeConfidenceInterval();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(16L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(0.0, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
  }

  @Test
  public void test04()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      assertNotNull(simpleRegression0);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      
      double[][] doubleArray0 = new double[16][3];
      double[] doubleArray1 = new double[10];
      double double0 = (-1831.5268339907866);
      doubleArray1[5] = double0;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray1);
      
      doubleArray2[0] = doubleArray1[5];
      doubleArray0[1] = doubleArray2;
      assertNotNull(doubleArray0[1]);
      
      simpleRegression0.addData(doubleArray0);
      assertEquals(0.0, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(16L, simpleRegression0.getN());
      assertEquals(0.0, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(0.0, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(0.0, simpleRegression0.getSlope(), 0.01D);
      assertEquals(0.0, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(0.0, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(0.0, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(0.0, simpleRegression0.getRegressionSumSquares(), 0.01D);
      
      double double1 = simpleRegression0.getR();
      assertFalse(double1 == double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertEquals(0.0, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(16L, simpleRegression0.getN());
      assertEquals(0.0, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(0.0, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(0.0, simpleRegression0.getSlope(), 0.01D);
      assertEquals(0.0, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(0.0, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(0.0, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(0.0, simpleRegression0.getRegressionSumSquares(), 0.01D);
  }

  @Test
  public void test05()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      assertNotNull(simpleRegression0);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      
      double[][] doubleArray0 = new double[16][3];
      simpleRegression0.addData(doubleArray0);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(0.0, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(16L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      
      double double0 = simpleRegression0.getR();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(0.0, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(16L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
  }

  @Test
  public void test06()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      assertNotNull(simpleRegression0);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      
      double[] doubleArray0 = new double[10];
      double double0 = simpleRegression0.predict(doubleArray0[5]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
  }

  @Test
  public void test07()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      assertNotNull(simpleRegression0);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      
      double double0 = simpleRegression0.getInterceptStdErr();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
  }

  @Test
  public void test08()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      assertNotNull(simpleRegression0);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      
      long long0 = simpleRegression0.getN();
      assertEquals(0L, long0);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
  }

  @Test
  public void test09()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      assertNotNull(simpleRegression0);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      
      double double0 = simpleRegression0.getRegressionSumSquares();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      assertNotNull(simpleRegression0);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      
      simpleRegression0.clear();
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      assertNotNull(simpleRegression0);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      
      // Undeclared exception!
      try {
        double double0 = simpleRegression0.getSignificance();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom must be positive.
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      assertNotNull(simpleRegression0);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      
      double double0 = simpleRegression0.getIntercept();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
  }
}
