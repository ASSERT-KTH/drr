/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 07:09:18 GMT 2014
 */

package org.apache.commons.math3.linear;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException;
import org.apache.commons.math3.linear.OpenMapRealMatrix;
import org.apache.commons.math3.linear.OpenMapRealVector;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.RealVector;
import org.apache.commons.math3.linear.RectangularCholeskyDecomposition;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class RectangularCholeskyDecompositionEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      double double0 = 0.0;
      Double double1 = new Double(double0);
      assertEquals(0.0, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      double double2 = (-131.6);
      Double double3 = new Double(double2);
      assertEquals((-131.6), (double)double3, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double3.equals((Object)double0));
      assertTrue(double3.equals((Object)double2));
      assertFalse(double3.equals((Object)double1));
      assertNotSame(double3, double1);
      
      doubleArray0[1] = double3;
      doubleArray0[2] = double1;
      doubleArray0[3] = double3;
      doubleArray0[4] = double1;
      doubleArray0[5] = double3;
      doubleArray0[6] = doubleArray0[3];
      doubleArray0[7] = doubleArray0[1];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[7]);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd((double) doubleArray0[7]);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      
      OpenMapRealMatrix openMapRealMatrix0 = (OpenMapRealMatrix)openMapRealVector1.outerProduct((RealVector) openMapRealVector0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(false, openMapRealMatrix0.isTransposable());
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealMatrix0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      
      RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = null;
      try {
        rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition((RealMatrix) openMapRealMatrix0, (double) double1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -\u221E is smaller than, or equal to, the minimum (0): not positive definite matrix: value -\u221E at index 2
         //
      }
  }

  @Test
  public void test1() {}
//   @Test
//   public void test1()  throws Throwable  {
//       int int0 = 2655;
//       Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(int0, int0);
//       assertEquals(false, array2DRowRealMatrix0.isTransposable());
//       assertEquals(true, array2DRowRealMatrix0.isSquare());
//       assertEquals(2655, array2DRowRealMatrix0.getRowDimension());
//       assertEquals(2655, array2DRowRealMatrix0.getColumnDimension());
//       assertNotNull(array2DRowRealMatrix0);
//       
//       RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = null;
//       try {
//         rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition((RealMatrix) array2DRowRealMatrix0, (double) int0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // 0 is smaller than, or equal to, the minimum (2,655): not positive definite matrix: value 0 at index 0
//          //
//       }
//   }

  @Test
  public void test2()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      double double0 = 0.0;
      Double double1 = new Double(double0);
      assertEquals(0.0, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      double double2 = (-131.6);
      Double double3 = new Double(double2);
      assertEquals((-131.6), (double)double3, 0.01D);
      assertFalse(double3.equals((Object)double0));
      assertTrue(double3.equals((Object)double2));
      assertFalse(double3.equals((Object)double1));
      assertFalse(double2 == double0);
      assertNotSame(double3, double1);
      
      doubleArray0[1] = double3;
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = double3;
      doubleArray0[4] = doubleArray0[2];
      doubleArray0[5] = doubleArray0[1];
      doubleArray0[6] = doubleArray0[3];
      doubleArray0[7] = doubleArray0[5];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) double3);
      assertFalse(double3.equals((Object)double0));
      assertTrue(double3.equals((Object)double2));
      assertFalse(double3.equals((Object)double1));
      assertFalse(double2 == double0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      assertNotSame(double3, double1);
      
      OpenMapRealMatrix openMapRealMatrix0 = (OpenMapRealMatrix)openMapRealVector0.outerProduct((RealVector) openMapRealVector0);
      assertFalse(double3.equals((Object)double0));
      assertTrue(double3.equals((Object)double2));
      assertFalse(double3.equals((Object)double1));
      assertFalse(double2 == double0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(false, openMapRealMatrix0.isTransposable());
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertNotNull(openMapRealMatrix0);
      assertNotSame(double3, double1);
      
      RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition((RealMatrix) openMapRealMatrix0, (double) doubleArray0[1]);
      assertFalse(double3.equals((Object)double0));
      assertTrue(double3.equals((Object)double2));
      assertFalse(double3.equals((Object)double1));
      assertFalse(double2 == double0);
      assertEquals(8, rectangularCholeskyDecomposition0.getRank());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(false, openMapRealMatrix0.isTransposable());
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertNotNull(rectangularCholeskyDecomposition0);
      assertNotSame(double3, double1);
  }

  @Test
  public void test3()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealMatrix openMapRealMatrix0 = (OpenMapRealMatrix)openMapRealVector0.outerProduct((RealVector) openMapRealVector0);
      assertEquals(9, openMapRealMatrix0.getColumnDimension());
      assertEquals(9, openMapRealMatrix0.getRowDimension());
      assertEquals(false, openMapRealMatrix0.isTransposable());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealMatrix0);
      
      RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition((RealMatrix) openMapRealMatrix0, doubleArray0[3]);
      assertEquals(9, openMapRealMatrix0.getColumnDimension());
      assertEquals(9, openMapRealMatrix0.getRowDimension());
      assertEquals(false, openMapRealMatrix0.isTransposable());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(9, rectangularCholeskyDecomposition0.getRank());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(rectangularCholeskyDecomposition0);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)rectangularCholeskyDecomposition0.getRootMatrix();
      assertEquals(9, openMapRealMatrix0.getColumnDimension());
      assertEquals(9, openMapRealMatrix0.getRowDimension());
      assertEquals(false, openMapRealMatrix0.isTransposable());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(9, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(9, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isTransposable());
      assertEquals(9, rectangularCholeskyDecomposition0.getRank());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix0);
  }

  @Test
  public void test4()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      double double0 = 3480.0;
      Double double1 = Double.valueOf(double0);
      assertEquals(3480.0, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = doubleArray0[2];
      doubleArray0[4] = doubleArray0[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[4]);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealMatrix openMapRealMatrix0 = (OpenMapRealMatrix)openMapRealVector0.outerProduct((RealVector) openMapRealVector0);
      assertEquals(5, openMapRealMatrix0.getRowDimension());
      assertEquals(5, openMapRealMatrix0.getColumnDimension());
      assertEquals(false, openMapRealMatrix0.isTransposable());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealMatrix0);
      
      RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition((RealMatrix) openMapRealMatrix0, (double) double1);
      assertTrue(double1.equals((Object)double0));
      assertEquals(5, openMapRealMatrix0.getRowDimension());
      assertEquals(5, openMapRealMatrix0.getColumnDimension());
      assertEquals(false, openMapRealMatrix0.isTransposable());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(2, rectangularCholeskyDecomposition0.getRank());
      assertNotNull(rectangularCholeskyDecomposition0);
      
      int int0 = rectangularCholeskyDecomposition0.getRank();
      assertEquals(2, int0);
      assertTrue(double1.equals((Object)double0));
      assertEquals(5, openMapRealMatrix0.getRowDimension());
      assertEquals(5, openMapRealMatrix0.getColumnDimension());
      assertEquals(false, openMapRealMatrix0.isTransposable());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(2, rectangularCholeskyDecomposition0.getRank());
  }
}
