/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:37:05 GMT 2014
 */

package org.apache.commons.math3.linear;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException;
import org.apache.commons.math3.linear.OpenMapRealMatrix;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.RealVector;
import org.apache.commons.math3.linear.RectangularCholeskyDecomposition;



import org.junit.runner.RunWith;


public class RectangularCholeskyDecompositionEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      int int0 = 471;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(int0, int0);
      assertNotNull(openMapRealMatrix0);
      assertEquals(471, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(false, openMapRealMatrix0.isTransposable());
      assertEquals(471, openMapRealMatrix0.getColumnDimension());
      
      double double0 = (-2065.43);
      OpenMapRealMatrix openMapRealMatrix1 = (OpenMapRealMatrix)openMapRealMatrix0.scalarAdd(double0);
      assertNotNull(openMapRealMatrix1);
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix1));
      assertFalse(openMapRealMatrix1.equals((Object)openMapRealMatrix0));
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      assertEquals(471, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(false, openMapRealMatrix0.isTransposable());
      assertEquals(471, openMapRealMatrix0.getColumnDimension());
      assertEquals(471, openMapRealMatrix1.getColumnDimension());
      assertEquals(true, openMapRealMatrix1.isSquare());
      assertEquals(471, openMapRealMatrix1.getRowDimension());
      assertEquals(false, openMapRealMatrix1.isTransposable());
      
      OpenMapRealMatrix openMapRealMatrix2 = openMapRealMatrix0.subtract((RealMatrix) openMapRealMatrix1);
      assertNotNull(openMapRealMatrix2);
      assertFalse(openMapRealMatrix2.equals((Object)openMapRealMatrix0));
      assertFalse(openMapRealMatrix2.equals((Object)openMapRealMatrix1));
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix2));
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix1));
      assertFalse(openMapRealMatrix1.equals((Object)openMapRealMatrix2));
      assertFalse(openMapRealMatrix1.equals((Object)openMapRealMatrix0));
      assertNotSame(openMapRealMatrix2, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix2, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      assertEquals(false, openMapRealMatrix2.isTransposable());
      assertEquals(true, openMapRealMatrix2.isSquare());
      assertEquals(471, openMapRealMatrix2.getRowDimension());
      assertEquals(471, openMapRealMatrix2.getColumnDimension());
      assertEquals(471, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(false, openMapRealMatrix0.isTransposable());
      assertEquals(471, openMapRealMatrix0.getColumnDimension());
      assertEquals(471, openMapRealMatrix1.getColumnDimension());
      assertEquals(true, openMapRealMatrix1.isSquare());
      assertEquals(471, openMapRealMatrix1.getRowDimension());
      assertEquals(false, openMapRealMatrix1.isTransposable());
      
      RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = null;
      try {
        rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition((RealMatrix) openMapRealMatrix2, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -\u221E is smaller than, or equal to, the minimum (-2,065.43): not positive definite matrix: value -\u221E at index 2
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 120.0;
      doubleArray0[4] = double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 120.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(120.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(120.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(120.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 120.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(false, array2DRowRealMatrix0.isTransposable());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
      assertEquals(8, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(120.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(120.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(120.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      
      RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition((RealMatrix) array2DRowRealMatrix0, doubleArray0[4]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 120.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(rectangularCholeskyDecomposition0);
      assertEquals(false, array2DRowRealMatrix0.isTransposable());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
      assertEquals(8, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(120.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(120.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(120.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(2, rectangularCholeskyDecomposition0.getRank());
  }

  @Test
  public void test2()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 120.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isTransposable());
      assertEquals(8, array2DRowRealMatrix0.getColumnDimension());
      
      RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = null;
      try {
        rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition((RealMatrix) array2DRowRealMatrix0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (120): not positive definite matrix: value 0 at index 0
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = (-589);
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double((double) int0);
      assertEquals((-589.0), (double)double0, 0.01D);
      
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = doubleArray0[0];
      double double1 = (-4124.16);
      Double double2 = new Double(double1);
      assertFalse(double2.equals((Object)double0));
      assertTrue(double2.equals((Object)double1));
      assertEquals((-4124.16), (double)double2, 0.01D);
      assertNotSame(double2, double0);
      
      doubleArray0[4] = double2;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(4289.100104404186, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(4124.16, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(6480.16, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(5, arrayRealVector0.getDimension());
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(4289.100104404186, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(4124.16, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(6480.16, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(5, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(5, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isTransposable());
      
      RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition((RealMatrix) array2DRowRealMatrix0, (double) doubleArray0[1]);
      assertNotNull(rectangularCholeskyDecomposition0);
      assertEquals(5, rectangularCholeskyDecomposition0.getRank());
      assertEquals(4289.100104404186, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(4124.16, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(6480.16, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(5, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(5, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isTransposable());
  }

  @Test
  public void test4()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 0.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isTransposable());
      assertEquals(8, array2DRowRealMatrix0.getColumnDimension());
      
      RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition((RealMatrix) array2DRowRealMatrix0, double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(rectangularCholeskyDecomposition0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(8, rectangularCholeskyDecomposition0.getRank());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isTransposable());
      assertEquals(8, array2DRowRealMatrix0.getColumnDimension());
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)rectangularCholeskyDecomposition0.getRootMatrix();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix1);
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(8, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(false, array2DRowRealMatrix1.isTransposable());
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(8, array2DRowRealMatrix1.getRowDimension());
      assertEquals(8, rectangularCholeskyDecomposition0.getRank());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isTransposable());
      assertEquals(8, array2DRowRealMatrix0.getColumnDimension());
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = (-589);
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double((double) int0);
      assertEquals((-589.0), (double)double0, 0.01D);
      
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = doubleArray0[0];
      doubleArray0[4] = double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(589.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1317.0440387473761, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(2945.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(5, arrayRealVector0.getDimension());
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(false, array2DRowRealMatrix0.isTransposable());
      assertEquals(5, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(5, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(589.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1317.0440387473761, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(2945.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(5, arrayRealVector0.getDimension());
      
      RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition((RealMatrix) array2DRowRealMatrix0, (double) double0);
      assertNotNull(rectangularCholeskyDecomposition0);
      assertEquals(false, array2DRowRealMatrix0.isTransposable());
      assertEquals(5, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(5, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(589.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1317.0440387473761, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(2945.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(5, rectangularCholeskyDecomposition0.getRank());
      
      int int1 = rectangularCholeskyDecomposition0.getRank();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(5, int1);
      assertEquals(false, array2DRowRealMatrix0.isTransposable());
      assertEquals(5, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(5, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(589.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1317.0440387473761, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(2945.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(5, rectangularCholeskyDecomposition0.getRank());
  }
}
