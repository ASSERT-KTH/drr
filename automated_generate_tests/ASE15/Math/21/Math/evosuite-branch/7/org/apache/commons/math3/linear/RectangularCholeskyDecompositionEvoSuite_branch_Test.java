/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:40:50 GMT 2014
 */

package org.apache.commons.math3.linear;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException;
import org.apache.commons.math3.linear.OpenMapRealMatrix;
import org.apache.commons.math3.linear.OpenMapRealVector;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.RealVector;
import org.apache.commons.math3.linear.RectangularCholeskyDecomposition;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class RectangularCholeskyDecompositionEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = (-3437.335994);
      doubleArray0[4] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-3437.335994)}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.2, openMapRealVector0.getSparsity(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(doubleArray0[4]);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-3437.335994)}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector1);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(5, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      
      OpenMapRealMatrix openMapRealMatrix0 = (OpenMapRealMatrix)openMapRealVector1.outerProduct((RealVector) openMapRealVector0);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-3437.335994)}, doubleArray0, 0.01);
      assertNotNull(openMapRealMatrix0);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(5, openMapRealMatrix0.getRowDimension());
      assertEquals(false, openMapRealMatrix0.isTransposable());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(5, openMapRealMatrix0.getColumnDimension());
      assertEquals(5, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      
      RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = null;
      try {
        rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition((RealMatrix) openMapRealMatrix0, doubleArray0[4]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -\u221E is smaller than, or equal to, the minimum (-3,437.336): not positive definite matrix: value -\u221E at index 2
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 1605.98667;
      doubleArray0[0] = double0;
      double double1 = 3.2151696978682076;
      doubleArray0[2] = double1;
      double[][] doubleArray1 = new double[1][7];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      boolean boolean0 = true;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray1, boolean0);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(8, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isTransposable());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      
      RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition((RealMatrix) array2DRowRealMatrix0, doubleArray0[2]);
      assertArrayEquals(new double[] {1605.98667, 0.0, 3.2151696978682076, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(rectangularCholeskyDecomposition0);
      assertEquals(1, rectangularCholeskyDecomposition0.getRank());
      assertEquals(8, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isTransposable());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      
      int int0 = rectangularCholeskyDecomposition0.getRank();
      assertEquals(1, int0);
      assertArrayEquals(new double[] {1605.98667, 0.0, 3.2151696978682076, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, rectangularCholeskyDecomposition0.getRank());
      assertEquals(8, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isTransposable());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertArrayEquals(new double[] {1605.98667, 0.0, 3.2151696978682076, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(1609.2018396978683, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1605.9898883660119, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1605.98667, arrayRealVector0.getLInfNorm(), 0.01D);
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertArrayEquals(new double[] {1605.98667, 0.0, 3.2151696978682076, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix1);
      assertEquals(false, array2DRowRealMatrix1.isTransposable());
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(8, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(8, array2DRowRealMatrix1.getRowDimension());
      assertEquals(1609.2018396978683, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1605.9898883660119, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1605.98667, arrayRealVector0.getLInfNorm(), 0.01D);
      
      RectangularCholeskyDecomposition rectangularCholeskyDecomposition1 = new RectangularCholeskyDecomposition((RealMatrix) array2DRowRealMatrix1, (double) int0);
      assertNotSame(rectangularCholeskyDecomposition1, rectangularCholeskyDecomposition0);
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertNotSame(rectangularCholeskyDecomposition0, rectangularCholeskyDecomposition1);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertFalse(rectangularCholeskyDecomposition1.equals((Object)rectangularCholeskyDecomposition0));
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertFalse(rectangularCholeskyDecomposition0.equals((Object)rectangularCholeskyDecomposition1));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertArrayEquals(new double[] {1605.98667, 0.0, 3.2151696978682076, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(rectangularCholeskyDecomposition1);
      assertEquals(2, rectangularCholeskyDecomposition1.getRank());
      assertEquals(false, array2DRowRealMatrix1.isTransposable());
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(8, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(8, array2DRowRealMatrix1.getRowDimension());
      assertEquals(1, rectangularCholeskyDecomposition0.getRank());
      assertEquals(8, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isTransposable());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      assertEquals(1609.2018396978683, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1605.9898883660119, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1605.98667, arrayRealVector0.getLInfNorm(), 0.01D);
  }

  @Test
  public void test2()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[1][7];
      boolean boolean0 = true;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray1, boolean0);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      assertEquals(7, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isTransposable());
      
      RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition((RealMatrix) array2DRowRealMatrix0, doubleArray0[2]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(rectangularCholeskyDecomposition0);
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      assertEquals(7, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isTransposable());
      assertEquals(1, rectangularCholeskyDecomposition0.getRank());
      
      int int0 = rectangularCholeskyDecomposition0.getRank();
      assertEquals(1, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      assertEquals(7, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isTransposable());
      assertEquals(1, rectangularCholeskyDecomposition0.getRank());
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix1);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(8, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(false, array2DRowRealMatrix1.isTransposable());
      assertEquals(8, array2DRowRealMatrix1.getRowDimension());
      
      RectangularCholeskyDecomposition rectangularCholeskyDecomposition1 = null;
      try {
        rectangularCholeskyDecomposition1 = new RectangularCholeskyDecomposition((RealMatrix) array2DRowRealMatrix1, (double) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (1): not positive definite matrix: value 0 at index 0
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[1][7];
      boolean boolean0 = true;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray1, boolean0);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(false, array2DRowRealMatrix0.isTransposable());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      assertEquals(7, array2DRowRealMatrix0.getColumnDimension());
      
      RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition((RealMatrix) array2DRowRealMatrix0, doubleArray0[2]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(rectangularCholeskyDecomposition0);
      assertEquals(false, array2DRowRealMatrix0.isTransposable());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      assertEquals(7, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, rectangularCholeskyDecomposition0.getRank());
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)rectangularCholeskyDecomposition0.getRootMatrix();
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix1);
      assertEquals(false, array2DRowRealMatrix0.isTransposable());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      assertEquals(7, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, rectangularCholeskyDecomposition0.getRank());
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(1, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix1.getRowDimension());
      assertEquals(false, array2DRowRealMatrix1.isTransposable());
  }
}
