/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:55:00 GMT 2014
 */

package org.apache.commons.math3.optimization.univariate;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.HarmonicOscillator;
import org.apache.commons.math3.analysis.function.Power;
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.apache.commons.math3.exception.NumberIsTooSmallException;
import org.apache.commons.math3.optimization.ConvergenceChecker;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.univariate.BrentOptimizer;
import org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class BrentOptimizerEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      double double0 = 0.2751311045032072;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertNotNull(brentOptimizer0);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      
      int int0 = 532;
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(double0, (double) int0, double0);
      assertNotNull(harmonicOscillator0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      double double1 = 0.0;
      UnivariateFunction univariateFunction0 = harmonicOscillator0.derivative();
      assertFalse(double0 == double1);
      assertNotNull(univariateFunction0);
      
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, univariateFunction0, goalType0, double0, (double) int0, double1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertNotNull(univariatePointValuePair0);
      assertEquals(259.3893177463757, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(117.75707651207163, univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(0.2751311045032072, brentOptimizer0.getMin(), 0.01D);
      assertEquals(532, brentOptimizer0.getMaxEvaluations());
      assertEquals(5, brentOptimizer0.getEvaluations());
      assertEquals(GoalType.MAXIMIZE, brentOptimizer0.getGoalType());
      assertEquals(532.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
  }

  @Test
  public void test1()  throws Throwable  {
      double double0 = 0.2751311045032072;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertNotNull(brentOptimizer0);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      
      int int0 = 532;
      double double1 = (-270.255037946604);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(double1, (double) int0, double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertNotNull(harmonicOscillator0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) harmonicOscillator0, goalType0, double1, (double) int0, (double) int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertNotNull(univariatePointValuePair0);
      assertEquals(532.0, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(63.25139460997043, univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(3, brentOptimizer0.getEvaluations());
      assertEquals(GoalType.MAXIMIZE, brentOptimizer0.getGoalType());
      assertEquals((-270.255037946604), brentOptimizer0.getMin(), 0.01D);
      assertEquals(532.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(532.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(532, brentOptimizer0.getMaxEvaluations());
  }

  @Test
  public void test2()  throws Throwable  {
      double double0 = 0.2751311045032072;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertNotNull(brentOptimizer0);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      
      int int0 = 532;
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(double0, (double) int0, double0);
      assertNotNull(harmonicOscillator0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) harmonicOscillator0, goalType0, (double) int0, double0);
      assertNotNull(univariatePointValuePair0);
      assertEquals(0.2715157125911712, univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(266.1375655522516, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(3, brentOptimizer0.getEvaluations());
      assertEquals(532.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.2751311045032072, brentOptimizer0.getMax(), 0.01D);
      assertEquals(532, brentOptimizer0.getMaxEvaluations());
      assertEquals(266.1375655522516, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(GoalType.MAXIMIZE, brentOptimizer0.getGoalType());
  }

  @Test
  public void test3()  throws Throwable  {
      double double0 = 0.2751311045032072;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertNotNull(brentOptimizer0);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      
      int int0 = 532;
      double double1 = (-270.255037946604);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(double1, (double) int0, double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertNotNull(harmonicOscillator0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      double double2 = (-18.361523875780257);
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) harmonicOscillator0, goalType0, (double) int0, double1, double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertNotNull(univariatePointValuePair0);
      assertEquals((-18.361523875780257), brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(532, brentOptimizer0.getMaxEvaluations());
      assertEquals((-270.255037946604), brentOptimizer0.getMax(), 0.01D);
      assertEquals(532.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(9, brentOptimizer0.getEvaluations());
      assertEquals(GoalType.MAXIMIZE, brentOptimizer0.getGoalType());
      assertEquals((-23.723388726690736), univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(190.22119328238412, univariatePointValuePair0.getValue(), 0.01D);
  }

  @Test
  public void test4()  throws Throwable  {
      double double0 = 1.70772569;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertNotNull(brentOptimizer0);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      
      int int0 = 385;
      Power power0 = new Power(double0);
      assertNotNull(power0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) power0, goalType0, double0, (double) int0, double0);
      assertNotNull(univariatePointValuePair0);
      assertEquals(2.4940570313948234, univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(1.70772569, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(1.70772569, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(385.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(1.70772569, brentOptimizer0.getMin(), 0.01D);
      assertEquals(5, brentOptimizer0.getEvaluations());
      assertEquals(385, brentOptimizer0.getMaxEvaluations());
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
  }

  @Test
  public void test5()  throws Throwable  {
      double double0 = 0.2751311045032072;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertNotNull(brentOptimizer0);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertNull(brentOptimizer0.getGoalType());
      
      int int0 = 532;
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator((double) int0, (double) int0, double0);
      assertNotNull(harmonicOscillator0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) harmonicOscillator0, goalType0, double0, (double) int0, double0);
      assertNotNull(univariatePointValuePair0);
      assertEquals(259.6061415162147, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(531.4328160934475, univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(0.2751311045032072, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.2751311045032072, brentOptimizer0.getMin(), 0.01D);
      assertEquals(532, brentOptimizer0.getMaxEvaluations());
      assertEquals(5, brentOptimizer0.getEvaluations());
      assertEquals(532.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(GoalType.MAXIMIZE, brentOptimizer0.getGoalType());
  }

  @Test
  public void test6()  throws Throwable  {
      double double0 = 0.2751311045032072;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertNotNull(brentOptimizer0);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      
      int int0 = 532;
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(double0, (double) int0, double0);
      assertNotNull(harmonicOscillator0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) harmonicOscillator0, goalType0, (double) int0, (double) int0);
      assertNotNull(univariatePointValuePair0);
      assertEquals(532.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(532, brentOptimizer0.getMaxEvaluations());
      assertEquals(1, brentOptimizer0.getEvaluations());
      assertEquals(GoalType.MAXIMIZE, brentOptimizer0.getGoalType());
      assertEquals(532.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(532.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals((-0.06439260556485049), univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(532.0, univariatePointValuePair0.getPoint(), 0.01D);
  }

  @Test
  public void test7()  throws Throwable  {
      double double0 = 1.70772569;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertNotNull(brentOptimizer0);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      
      int int0 = brentOptimizer0.getMaxEvaluations();
      assertEquals(0, int0);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      
      ConvergenceChecker<UnivariatePointValuePair> convergenceChecker0 = brentOptimizer0.getConvergenceChecker();
      assertNull(convergenceChecker0);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      
      BrentOptimizer brentOptimizer1 = null;
      try {
        brentOptimizer1 = new BrentOptimizer(double0, (double) int0, convergenceChecker0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      double double0 = (-1.3179070707783178);
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer(double0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1.318 is smaller than the minimum (0)
         //
      }
  }
}
