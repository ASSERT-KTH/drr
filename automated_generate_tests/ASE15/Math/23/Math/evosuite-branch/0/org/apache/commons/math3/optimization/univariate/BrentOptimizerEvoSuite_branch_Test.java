/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:26:30 GMT 2014
 */

package org.apache.commons.math3.optimization.univariate;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Sinc;
import org.apache.commons.math3.analysis.function.Ulp;
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.apache.commons.math3.exception.NumberIsTooSmallException;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.univariate.BrentOptimizer;
import org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class BrentOptimizerEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      double double0 = 3.516306363280308;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertNotNull(brentOptimizer0);
      
      int int0 = 1073;
      GoalType goalType0 = GoalType.MINIMIZE;
      Sinc sinc0 = new Sinc();
      assertNotNull(sinc0);
      
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) sinc0, goalType0, (double) int0, double0, double0);
      assertEquals(3.516306363280308, brentOptimizer0.getMax(), 0.01D);
      assertEquals(3.516306363280308, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(1073.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertEquals(5, brentOptimizer0.getEvaluations());
      assertEquals(1073, brentOptimizer0.getMaxEvaluations());
      assertEquals(3.516306363280308, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals((-0.10408823377464453), univariatePointValuePair0.getValue(), 0.01D);
      assertNotNull(univariatePointValuePair0);
  }

  @Test
  public void test1()  throws Throwable  {
      double double0 = 0.003;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertNotNull(brentOptimizer0);
      
      int int0 = 1784;
      Ulp ulp0 = new Ulp();
      assertNotNull(ulp0);
      
      double double1 = 1.161153793334961;
      GoalType goalType0 = GoalType.MINIMIZE;
      double double2 = (-5989.0485817714);
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) ulp0, goalType0, double1, double2, double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertEquals((-5989.0485817714), brentOptimizer0.getMax(), 0.01D);
      assertEquals(1784, brentOptimizer0.getMaxEvaluations());
      assertEquals(1.161153793334961, brentOptimizer0.getMin(), 0.01D);
      assertEquals(20, brentOptimizer0.getEvaluations());
      assertEquals(1.161153793334961, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals((-9.991230668007951E-4), univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(2.1684043449710089E-19, univariatePointValuePair0.getValue(), 0.01D);
      assertNotNull(univariatePointValuePair0);
  }

  @Test
  public void test2()  throws Throwable  {
      double double0 = 249.31;
      double double1 = 0.003;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double1, double1);
      assertFalse(double1 == double0);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertNotNull(brentOptimizer0);
      
      int int0 = 1784;
      Ulp ulp0 = new Ulp();
      assertNotNull(ulp0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) ulp0, goalType0, double1, double0, double1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.003, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(4.3368086899420177E-19, univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertEquals(1784, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.003, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.003, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(249.31, brentOptimizer0.getMax(), 0.01D);
      assertEquals(13, brentOptimizer0.getEvaluations());
      assertNotNull(univariatePointValuePair0);
  }

  @Test
  public void test3()  throws Throwable  {
      double double0 = 249.31;
      double double1 = 0.003;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double1, double1);
      assertFalse(double1 == double0);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertNotNull(brentOptimizer0);
      
      int int0 = 1784;
      Ulp ulp0 = new Ulp();
      assertNotNull(ulp0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) ulp0, goalType0, double1, double0, double1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(154.08319963327003, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(2.8421709430404007E-14, univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(1784, brentOptimizer0.getMaxEvaluations());
      assertEquals(12, brentOptimizer0.getEvaluations());
      assertEquals(GoalType.MAXIMIZE, brentOptimizer0.getGoalType());
      assertEquals(0.003, brentOptimizer0.getMin(), 0.01D);
      assertEquals(249.31, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.003, brentOptimizer0.getStartValue(), 0.01D);
      assertNotNull(univariatePointValuePair0);
  }

  @Test
  public void test4()  throws Throwable  {
      double double0 = 249.31;
      double double1 = 0.003;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double1, double1);
      assertFalse(double1 == double0);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertNotNull(brentOptimizer0);
      
      int int0 = 1784;
      Ulp ulp0 = new Ulp();
      assertNotNull(ulp0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) ulp0, goalType0, double1, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.4210854715202004E-14, univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(124.65650000000001, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(GoalType.MAXIMIZE, brentOptimizer0.getGoalType());
      assertEquals(249.31, brentOptimizer0.getMax(), 0.01D);
      assertEquals(13, brentOptimizer0.getEvaluations());
      assertEquals(0.003, brentOptimizer0.getMin(), 0.01D);
      assertEquals(124.65650000000001, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(1784, brentOptimizer0.getMaxEvaluations());
      assertNotNull(univariatePointValuePair0);
  }

  @Test
  public void test5()  throws Throwable  {
      double double0 = 249.31;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertNotNull(brentOptimizer0);
      
      int int0 = 1784;
      Ulp ulp0 = new Ulp();
      assertNotNull(ulp0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) ulp0, goalType0, double0, double0, double0);
      assertEquals(249.31, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(2.8421709430404007E-14, univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(1, brentOptimizer0.getEvaluations());
      assertEquals(249.31, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertEquals(249.31, brentOptimizer0.getMin(), 0.01D);
      assertEquals(249.31, brentOptimizer0.getMax(), 0.01D);
      assertEquals(1784, brentOptimizer0.getMaxEvaluations());
      assertNotNull(univariatePointValuePair0);
  }

  @Test
  public void test6()  throws Throwable  {
      double double0 = 333.6577213318466;
      double double1 = 0.0;
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer(double0, double1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      double double0 = (-3298.6463);
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer(double0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,298.646 is smaller than the minimum (0)
         //
      }
  }
}
