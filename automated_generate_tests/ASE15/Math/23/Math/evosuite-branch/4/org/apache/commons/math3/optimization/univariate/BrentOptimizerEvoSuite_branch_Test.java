/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 16:02:56 GMT 2014
 */

package org.apache.commons.math3.optimization.univariate;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Tan;
import org.apache.commons.math3.analysis.function.Ulp;
import org.apache.commons.math3.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.apache.commons.math3.exception.NumberIsTooSmallException;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.univariate.BrentOptimizer;
import org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class BrentOptimizerEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      double double0 = 3.9610671864052924;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertNotNull(brentOptimizer0);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      
      int int0 = 484;
      Tan tan0 = new Tan();
      assertNotNull(tan0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) tan0, goalType0, double0, (double) int0, double0);
      assertNotNull(univariatePointValuePair0);
      assertEquals(1.0705853547900428, univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(3.9610671864052924, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(3.9610671864052924, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(484.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(GoalType.MAXIMIZE, brentOptimizer0.getGoalType());
      assertEquals(3.9610671864052924, brentOptimizer0.getMin(), 0.01D);
      assertEquals(484, brentOptimizer0.getMaxEvaluations());
      assertEquals(4, brentOptimizer0.getEvaluations());
  }

  @Test
  public void test1()  throws Throwable  {
      double double0 = 0.6931470632553101;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertNotNull(brentOptimizer0);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      
      int int0 = 916;
      double[] doubleArray0 = new double[8];
      GoalType goalType0 = GoalType.MINIMIZE;
      double double1 = (-1324.37);
      doubleArray0[1] = double1;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1324.37), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction0);
      assertEquals(1, polynomialFunction0.degree());
      
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) polynomialFunction0, goalType0, double0, doubleArray0[1], doubleArray0[3]);
      assertArrayEquals(new double[] {0.0, (-1324.37), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(univariatePointValuePair0);
      assertEquals(1, polynomialFunction0.degree());
      assertEquals((-1324.37), brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.6931470632553101, brentOptimizer0.getMin(), 0.01D);
      assertEquals(9, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertEquals(916, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(0.0, univariatePointValuePair0.getValue(), 0.01D);
      assertFalse(double0 == double1);
  }

  @Test
  public void test2()  throws Throwable  {
      double double0 = 0.6931;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertNotNull(brentOptimizer0);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      
      int int0 = 897;
      double[] doubleArray0 = new double[12];
      doubleArray0[1] = (double) int0;
      double double1 = (-223.0368055753367);
      doubleArray0[3] = double1;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertArrayEquals(new double[] {0.0, 897.0, 0.0, (-223.0368055753367), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction0);
      assertEquals(3, polynomialFunction0.degree());
      
      PolynomialFunction polynomialFunction1 = polynomialFunction0.polynomialDerivative();
      assertArrayEquals(new double[] {0.0, 897.0, 0.0, (-223.0368055753367), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction1);
      assertEquals(3, polynomialFunction0.degree());
      assertEquals(2, polynomialFunction1.degree());
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) polynomialFunction1, goalType0, double0, doubleArray0[1], doubleArray0[3]);
      assertArrayEquals(new double[] {0.0, 897.0, 0.0, (-223.0368055753367), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(univariatePointValuePair0);
      assertEquals(897.0, univariatePointValuePair0.getValue(), 0.01D);
      assertEquals((-1.4210854715202004E-14), univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(3, polynomialFunction0.degree());
      assertEquals(897, brentOptimizer0.getMaxEvaluations());
      assertEquals(GoalType.MAXIMIZE, brentOptimizer0.getGoalType());
      assertEquals(0.6931, brentOptimizer0.getMin(), 0.01D);
      assertEquals(7, brentOptimizer0.getEvaluations());
      assertEquals((-223.0368055753367), brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(897.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(2, polynomialFunction1.degree());
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(double0 == double1);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction1, polynomialFunction0);
  }

  @Test
  public void test3()  throws Throwable  {
      double double0 = 0.6931470632553101;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertNotNull(brentOptimizer0);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      
      int int0 = 916;
      Ulp ulp0 = new Ulp();
      assertNotNull(ulp0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      double double1 = 1.3020631859056421E91;
      double double2 = (-1324.37);
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) ulp0, goalType0, double1, double2, double2);
      assertNotNull(univariatePointValuePair0);
      assertEquals((-1324.37), brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(1.3020631859056421E91, brentOptimizer0.getMin(), 0.01D);
      assertEquals((-1324.37), brentOptimizer0.getMax(), 0.01D);
      assertEquals(916, brentOptimizer0.getMaxEvaluations());
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertEquals(226, brentOptimizer0.getEvaluations());
      assertEquals((-0.1912406688161481), univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(2.7755575615628914E-17, univariatePointValuePair0.getValue(), 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test4()  throws Throwable  {
      double double0 = 0.6931470632553101;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertNotNull(brentOptimizer0);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      
      int int0 = 916;
      double[] doubleArray0 = new double[8];
      Ulp ulp0 = new Ulp();
      assertNotNull(ulp0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) ulp0, goalType0, doubleArray0[1], double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(univariatePointValuePair0);
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertEquals(0.34657353162765503, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(916, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.6931470632553101, brentOptimizer0.getMax(), 0.01D);
      assertEquals(1, brentOptimizer0.getEvaluations());
      assertEquals(0.34657353162765503, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(5.551115123125783E-17, univariatePointValuePair0.getValue(), 0.01D);
  }

  @Test
  public void test5()  throws Throwable  {
      double double0 = 3.9610671864052924;
      double double1 = (-404.9079218687872);
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer(double0, double1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -404.908 is smaller than, or equal to, the minimum (0)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      double double0 = 0.6931470632553101;
      double double1 = (-1324.37);
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer(double1, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,324.37 is smaller than the minimum (0)
         //
      }
  }
}
