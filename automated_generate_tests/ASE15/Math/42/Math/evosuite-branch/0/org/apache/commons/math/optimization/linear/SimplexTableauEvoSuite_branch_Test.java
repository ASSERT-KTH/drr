/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:34:36 GMT 2014
 */

package org.apache.commons.math.optimization.linear;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.util.LinkedList;
import org.apache.commons.math.exception.OutOfRangeException;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealVector;
import org.apache.commons.math.optimization.GoalType;
import org.apache.commons.math.optimization.RealPointValuePair;
import org.apache.commons.math.optimization.linear.LinearConstraint;
import org.apache.commons.math.optimization.linear.LinearObjectiveFunction;
import org.apache.commons.math.optimization.linear.Relationship;
import org.apache.commons.math.optimization.linear.SimplexTableau;



import org.junit.runner.RunWith;


public class SimplexTableauEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 0.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = false;
      GoalType goalType1 = GoalType.MAXIMIZE;
      assertNotSame(goalType1, goalType0);
      
      int int0 = (-36);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, boolean0, double0, int0);
      assertNotNull(simplexTableau0);
      assertNotSame(goalType1, goalType0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(goalType1.equals((Object)goalType0));
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[1], int0);
      assertNotNull(simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(goalType0, goalType1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(goalType0.equals((Object)goalType1));
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      boolean boolean1 = simplexTableau0.equals((Object) simplexTableau1);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(goalType0, goalType1);
      assertNotSame(goalType1, goalType0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertTrue(boolean0 == boolean1);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(goalType0.equals((Object)goalType1));
      assertFalse(goalType1.equals((Object)goalType0));
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertFalse(boolean1);
  }

  @Test
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 0.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = false;
      int int0 = (-36);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0, int0);
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[1], int0);
      assertNotNull(simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(simplexTableau1.equals((Object)simplexTableau0));
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      boolean boolean1 = simplexTableau0.equals((Object) simplexTableau1);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertTrue(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(boolean0 == boolean1);
      assertTrue(simplexTableau1.equals((Object)simplexTableau0));
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertTrue(boolean1);
  }

  @Test
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = (-14.675244831437094);
      doubleArray0[1] = double0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, (-14.675244831437094), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-14.675244831437094), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = false;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[0]);
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {0.0, (-14.675244831437094), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-14.675244831437094), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      int int0 = (-2798);
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[1], int0);
      assertNotNull(simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertArrayEquals(new double[] {0.0, (-14.675244831437094), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertEquals((-14.675244831437094), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      boolean boolean1 = simplexTableau0.equals((Object) simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertArrayEquals(new double[] {0.0, (-14.675244831437094), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals((-14.675244831437094), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertFalse(boolean1);
  }

  @Test
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = (-10.199366463365402);
      Double[] doubleArray1 = new Double[5];
      doubleArray1[1] = (Double) doubleArray0[1];
      doubleArray1[2] = (Double) double0;
      doubleArray1[0] = (Double) double0;
      doubleArray1[4] = (Double) double0;
      doubleArray1[3] = doubleArray1[2];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
      assertNotNull(openMapRealVector0);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.8, openMapRealVector0.getSparsity(), 0.01D);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-10.199366463365402), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      Relationship relationship0 = Relationship.GEQ;
      int int0 = 2;
      LinearConstraint linearConstraint0 = new LinearConstraint((RealVector) openMapRealVector0, double0, relationship0, (RealVector) openMapRealVector0, double0);
      assertNotNull(linearConstraint0);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.8, openMapRealVector0.getSparsity(), 0.01D);
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals(1, linkedList0.size());
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.8, openMapRealVector0.getSparsity(), 0.01D);
      assertTrue(boolean0);
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, (double) doubleArray1[3]);
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals((-10.199366463365402), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(1, linkedList0.size());
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.8, openMapRealVector0.getSparsity(), 0.01D);
      
      simplexTableau0.dropPhase1Objective();
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals((-10.199366463365402), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(1, linkedList0.size());
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.8, openMapRealVector0.getSparsity(), 0.01D);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0, int0);
      assertNotNull(simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals((-10.199366463365402), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(1, linkedList0.size());
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.8, openMapRealVector0.getSparsity(), 0.01D);
      
      boolean boolean1 = simplexTableau1.equals((Object) simplexTableau0);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(boolean1 == boolean0);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(boolean0 == boolean1);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals((-10.199366463365402), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(1, linkedList0.size());
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.8, openMapRealVector0.getSparsity(), 0.01D);
      assertFalse(boolean1);
  }

  @Test
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      double double0 = 0.0;
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = (Double) double0;
      doubleArray1[1] = (Double) doubleArray0[1];
      doubleArray1[2] = (Double) double0;
      doubleArray1[3] = (Double) double0;
      doubleArray1[4] = (Double) double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
      assertNotNull(openMapRealVector0);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      Relationship relationship0 = Relationship.GEQ;
      boolean boolean0 = true;
      int int0 = 2;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, (double) doubleArray1[2], int0);
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinearConstraint linearConstraint0 = new LinearConstraint((RealVector) openMapRealVector0, double0, relationship0, (RealVector) openMapRealVector0, double0);
      assertNotNull(linearConstraint0);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      
      boolean boolean1 = linkedList0.add(linearConstraint0);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertTrue(boolean1);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean1, (double) doubleArray1[3]);
      assertNotNull(simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertTrue(boolean1 == boolean0);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      
      boolean boolean2 = simplexTableau0.equals((Object) simplexTableau1);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean1 == boolean2);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertFalse(boolean2);
  }

  @Test
  public void test05()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertNotNull(openMapRealVector0);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      
      double double0 = (-43.76984951688008);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) openMapRealVector0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals((-43.76984951688008), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = false;
      int int0 = 38;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0, int0);
      assertNotNull(simplexTableau0);
      assertEquals((-43.76984951688008), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      double[] doubleArray0 = new double[4];
      LinearObjectiveFunction linearObjectiveFunction1 = new LinearObjectiveFunction(doubleArray0, (double) int0);
      assertNotNull(linearObjectiveFunction1);
      assertNotSame(linearObjectiveFunction1, linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(linearObjectiveFunction1.equals((Object)linearObjectiveFunction0));
      assertEquals(38.0, linearObjectiveFunction1.getConstantTerm(), 0.01D);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction1, linkedList0, goalType0, boolean0, doubleArray0[3]);
      assertNotNull(simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(linearObjectiveFunction1, linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(linearObjectiveFunction1.equals((Object)linearObjectiveFunction0));
      assertEquals(38.0, linearObjectiveFunction1.getConstantTerm(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      boolean boolean1 = simplexTableau0.equals((Object) simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(linearObjectiveFunction1, linearObjectiveFunction0);
      assertNotSame(linearObjectiveFunction0, linearObjectiveFunction1);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(linearObjectiveFunction1.equals((Object)linearObjectiveFunction0));
      assertFalse(linearObjectiveFunction0.equals((Object)linearObjectiveFunction1));
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertEquals(38.0, linearObjectiveFunction1.getConstantTerm(), 0.01D);
      assertEquals((-43.76984951688008), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertFalse(boolean1);
  }

  @Test
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      double double0 = (-0.3989475564348754);
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = (Double) double0;
      doubleArray1[1] = (Double) doubleArray0[1];
      doubleArray1[2] = doubleArray1[0];
      doubleArray1[3] = (Double) double0;
      doubleArray1[4] = doubleArray1[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
      assertNotNull(openMapRealVector0);
      assertEquals(0.8, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-0.3989475564348754), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      Relationship relationship0 = Relationship.GEQ;
      boolean boolean0 = false;
      int int0 = (-3);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, (double) doubleArray1[2], int0);
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-0.3989475564348754), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      LinearConstraint linearConstraint0 = new LinearConstraint((RealVector) openMapRealVector0, double0, relationship0, (RealVector) openMapRealVector0, double0);
      assertNotNull(linearConstraint0);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(0.8, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      
      boolean boolean1 = linkedList0.add(linearConstraint0);
      assertFalse(boolean1 == boolean0);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(1, linkedList0.size());
      assertEquals(0.8, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertTrue(boolean1);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean1, (double) doubleArray1[3]);
      assertNotNull(simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertEquals((-0.3989475564348754), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(1, linkedList0.size());
      assertEquals(0.8, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      
      boolean boolean2 = simplexTableau0.equals((Object) simplexTableau1);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals((-0.3989475564348754), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(1, linkedList0.size());
      assertEquals(0.8, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertFalse(boolean2);
  }

  @Test
  public void test07()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertNotNull(openMapRealVector0);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      
      double double0 = (-43.76984951688008);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) openMapRealVector0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals((-43.76984951688008), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = false;
      int int0 = 38;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0, int0);
      assertNotNull(simplexTableau0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals((-43.76984951688008), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertNotNull(simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals((-43.76984951688008), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      
      boolean boolean1 = simplexTableau0.equals((Object) simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertTrue(boolean1 == boolean0);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertTrue(boolean0 == boolean1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals((-43.76984951688008), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertFalse(boolean1);
  }

  @Test
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 0.0;
      GoalType goalType0 = GoalType.MAXIMIZE;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, doubleArray0[0], relationship0, doubleArray0, double0);
      assertNotNull(linearConstraint0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertTrue(boolean0);
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[1]);
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      
      boolean boolean1 = simplexTableau0.equals((Object) linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertFalse(boolean1);
  }

  @Test
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 0.0;
      double double1 = 1.0;
      GoalType goalType0 = GoalType.MAXIMIZE;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      //  // Unstable assertion: assertNotNull(linearObjectiveFunction0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      //  // Unstable assertion: assertNotNull(linkedList0);
      //  // Unstable assertion: assertEquals("[]", linkedList0.toString());
      //  // Unstable assertion: assertEquals(0, linkedList0.size());
      
      double[] doubleArray1 = new double[2];
      //  // Unstable assertion: assertNotSame(doubleArray1, doubleArray0);
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = double1;
      doubleArray1[1] = double1;
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray1, doubleArray1[0], relationship0, doubleArray0, double1);
      //  // Unstable assertion: assertNotNull(linearConstraint0);
      //  // Unstable assertion: assertNotSame(doubleArray1, doubleArray0);
      //  // Unstable assertion: assertNotSame(doubleArray0, doubleArray1);
      //  // Unstable assertion: assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(doubleArray0.equals((Object)doubleArray1));
      //  // Unstable assertion: assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      //  // Unstable assertion: assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      //  // Unstable assertion: assertNotSame(doubleArray1, doubleArray0);
      //  // Unstable assertion: assertNotSame(doubleArray0, doubleArray1);
      //  // Unstable assertion: assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(doubleArray0.equals((Object)doubleArray1));
      //  // Unstable assertion: assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      //  // Unstable assertion: assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      //  // Unstable assertion: assertEquals(1, linkedList0.size());
      //  // Unstable assertion: assertTrue(boolean0);
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray1[1]);
      //  // Unstable assertion: assertNotNull(simplexTableau0);
      //  // Unstable assertion: assertNotSame(doubleArray1, doubleArray0);
      //  // Unstable assertion: assertNotSame(doubleArray0, doubleArray1);
      //  // Unstable assertion: assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(doubleArray0.equals((Object)doubleArray1));
      //  // Unstable assertion: assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      //  // Unstable assertion: assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertEquals(1, linkedList0.size());
      
      // Undeclared exception!
      try {
        RealPointValuePair realPointValuePair0 = simplexTableau0.getSolution();
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 0.0;
      double double1 = 1.0;
      boolean boolean0 = false;
      doubleArray0[2] = double1;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertFalse(double0 == double1);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      double[] doubleArray1 = new double[2];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = double1;
      doubleArray1[1] = doubleArray1[0];
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray1, doubleArray1[0], relationship0, doubleArray0, doubleArray1[0]);
      assertNotNull(linearConstraint0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      
      boolean boolean1 = linkedList0.add(linearConstraint0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean1);
      
      int int0 = 1;
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0, int0);
      assertNotNull(simplexTableau0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(double0 == double1);
      assertFalse(boolean0 == boolean1);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      RealPointValuePair realPointValuePair0 = simplexTableau0.getSolution();
      assertNotNull(realPointValuePair0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(double0 == double1);
      assertFalse(boolean0 == boolean1);
      assertEquals(0.0, realPointValuePair0.getValue(), 0.01D);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 0.0;
      double double1 = 1.0;
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = false;
      doubleArray0[2] = double1;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertFalse(double0 == double1);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      int int0 = (-7954);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0, int0);
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertFalse(double0 == double1);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      boolean boolean1 = simplexTableau0.isOptimal();
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(double0 == double1);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertFalse(boolean1);
  }

  @Test
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 0.0;
      GoalType goalType0 = GoalType.MAXIMIZE;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, doubleArray0[0], relationship0, doubleArray0, double0);
      assertNotNull(linearConstraint0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertTrue(boolean0);
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[1]);
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      
      boolean boolean1 = simplexTableau0.isOptimal();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertTrue(boolean1);
  }

  @Test
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = (-10.199366463365402);
      Double[] doubleArray1 = new Double[5];
      doubleArray1[1] = (Double) doubleArray0[1];
      doubleArray1[2] = (Double) double0;
      doubleArray1[0] = (Double) double0;
      doubleArray1[4] = (Double) double0;
      doubleArray1[3] = doubleArray1[2];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
      assertNotNull(openMapRealVector0);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.8, openMapRealVector0.getSparsity(), 0.01D);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-10.199366463365402), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      Relationship relationship0 = Relationship.GEQ;
      int int0 = 2;
      LinearConstraint linearConstraint0 = new LinearConstraint((RealVector) openMapRealVector0, double0, relationship0, (RealVector) openMapRealVector0, double0);
      assertNotNull(linearConstraint0);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.8, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.8, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, (double) doubleArray1[3]);
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.8, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals((-10.199366463365402), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals(1, linkedList0.size());
      
      simplexTableau0.divideRow(int0, (double) doubleArray1[2]);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.8, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals((-10.199366463365402), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals(1, linkedList0.size());
      
      simplexTableau0.dropPhase1Objective();
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.8, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals((-10.199366463365402), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals(1, linkedList0.size());
  }

  @Test
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 0.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[0]);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = true;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      simplexTableau0.dropPhase1Objective();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
  }

  @Test
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = (-221.3304727202289);
      double double1 = 2471.7643172292255;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(double0 == double1);
      assertEquals((-221.3304727202289), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = false;
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, double1, relationship0, doubleArray0, double0);
      assertNotNull(linearConstraint0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals((-2693.0947899494545), linearConstraint0.getValue(), 0.01D);
      
      boolean boolean1 = linkedList0.add(linearConstraint0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals((-2693.0947899494545), linearConstraint0.getValue(), 0.01D);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean1);
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double1);
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(double1 == double0);
      assertFalse(boolean0 == boolean1);
      assertFalse(double0 == double1);
      assertEquals((-221.3304727202289), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(1, linkedList0.size());
  }

  @Test
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[2]);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = true;
      int int0 = (-16);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[1], int0);
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      int int1 = simplexTableau0.hashCode();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals((-1228), int1);
  }

  @Test
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 0.0;
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = (Double) double0;
      doubleArray1[1] = (Double) doubleArray0[1];
      doubleArray1[2] = doubleArray1[0];
      doubleArray1[3] = (Double) doubleArray0[0];
      doubleArray1[4] = (Double) double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint((RealVector) openMapRealVector0, (double) doubleArray1[3], relationship0, (RealVector) openMapRealVector0, (double) doubleArray1[0]);
      assertNotNull(linearConstraint0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertTrue(boolean0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, (double) doubleArray1[3]);
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      int int0 = 1761;
      // Undeclared exception!
      try {
        simplexTableau0.setEntry(int0, int0, (double) doubleArray1[3]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (1,761)
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      double double0 = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertNotNull(openMapRealVector0);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) openMapRealVector0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = false;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertNotNull(simplexTableau0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      double[][] doubleArray0 = simplexTableau0.getData();
      assertNotNull(doubleArray0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
  }

  @Test
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = (-221.3304727202289);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-221.3304727202289), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = false;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-221.3304727202289), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      int int0 = (-750);
      // Undeclared exception!
      try {
        simplexTableau0.subtractRow(int0, int0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (-750)
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[2]);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = true;
      int int0 = (-16);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[1], int0);
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      int int1 = simplexTableau0.getNumDecisionVariables();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(8, int1);
  }

  @Test
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 0.0;
      double double1 = 1.0;
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = false;
      doubleArray0[2] = double1;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      //  // Unstable assertion: assertNotNull(linearObjectiveFunction0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 1.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      //  // Unstable assertion: assertNotNull(linkedList0);
      //  // Unstable assertion: assertEquals(0, linkedList0.size());
      //  // Unstable assertion: assertEquals("[]", linkedList0.toString());
      
      int int0 = 1;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0, int0);
      //  // Unstable assertion: assertNotNull(simplexTableau0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 1.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(0, linkedList0.size());
      //  // Unstable assertion: assertEquals("[]", linkedList0.toString());
      //  // Unstable assertion: assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      // Undeclared exception!
      try {
        RealPointValuePair realPointValuePair0 = simplexTableau0.getSolution();
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
