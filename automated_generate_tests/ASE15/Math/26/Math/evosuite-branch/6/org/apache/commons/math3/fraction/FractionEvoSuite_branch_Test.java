/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:29:38 GMT 2014
 */

package org.apache.commons.math3.fraction;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math3.exception.MathArithmeticException;
import org.apache.commons.math3.exception.NullArgumentException;
import org.apache.commons.math3.fraction.Fraction;
import org.apache.commons.math3.fraction.FractionConversionException;
import org.apache.commons.math3.fraction.FractionField;



import org.junit.runner.RunWith;


public class FractionEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      
      String string0 = fraction0.toString();
      assertEquals("0", string0);
      assertNotNull(string0);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
  }

  @Test
  public void test01()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertNotNull(fraction0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(75.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      
      String string0 = fraction0.toString();
      assertEquals("3 / 4", string0);
      assertNotNull(string0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(75.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      int int1 = (-483);
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-483, cannot negate
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = (-1733);
      int int1 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -1,733/-2,147,483,648, cannot negate
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = 1298;
      int int1 = Integer.MIN_VALUE;
      Fraction fraction0 = Fraction.getReducedFraction(int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(fraction0);
      assertEquals((-6.0442835092544556E-5), fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(-649, fraction0.getNumerator());
      assertEquals((-6.0442835E-7F), fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals((-6.044283509254456E-7), fraction0.doubleValue(), 0.01D);
      assertEquals(1073741824, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
  }

  @Test
  public void test05()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertNotNull(fraction0);
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      
      Fraction fraction1 = Fraction.THREE_FIFTHS;
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(0, fraction1.shortValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(60.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0.6F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.6, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(3, fraction1.getNumerator());
      
      int int0 = fraction1.compareTo(fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(1, int0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(60.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0.6F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.6, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(3, fraction1.getNumerator());
      
      int int1 = 0;
      assertFalse(int1 == int0);
      
      Fraction fraction2 = Fraction.getReducedFraction(int1, int0);
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction2);
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction2.shortValue());
      assertEquals(0.0, fraction2.percentageValue(), 0.01D);
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertEquals(0, fraction2.byteValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction1.shortValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(60.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0.6F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.6, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(3, fraction1.getNumerator());
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = 0;
      Fraction fraction0 = new Fraction(int0);
      assertNotNull(fraction0);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.divide(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      double double0 = (-3096.012778417855);
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(-3096, fraction0.intValue());
      assertEquals(313, fraction0.getDenominator());
      assertEquals(-24, fraction0.byteValue());
      assertEquals((-3096.0127795527155), fraction0.doubleValue(), 0.01D);
      assertEquals(-3096, fraction0.shortValue());
      assertEquals(-969052, fraction0.getNumerator());
      assertEquals((-3096.0127F), fraction0.floatValue(), 0.01F);
      assertEquals((-3096L), fraction0.longValue());
      assertEquals((-309601.27795527154), fraction0.percentageValue(), 0.01D);
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.divide(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      
      double double0 = 0.0;
      Fraction fraction1 = new Fraction(double0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      
      Fraction fraction2 = fraction0.multiply(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertTrue(fraction1.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertTrue(fraction2.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotNull(fraction2);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.shortValue());
      assertEquals(0.0, fraction2.percentageValue(), 0.01D);
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(1, fraction2.getDenominator());
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 1298;
      Fraction fraction0 = Fraction.getReducedFraction(int0, int0);
      assertNotNull(fraction0);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = Fraction.ZERO;
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      
      Fraction fraction2 = fraction1.multiply(fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction2);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction2.percentageValue(), 0.01D);
      assertEquals(0, fraction2.shortValue());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.intValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
  }

  @Test
  public void test11()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.multiply(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(60.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
      assertEquals(5, fraction1.getDenominator());
      assertEquals(1, fraction1.intValue());
      assertEquals(1.2F, fraction1.floatValue(), 0.01F);
      assertEquals(120.0, fraction1.percentageValue(), 0.01D);
      assertEquals(6, fraction1.getNumerator());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1.2, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.byteValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(60.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
  }

  @Test
  public void test13()  throws Throwable  {
      double double0 = 966.0;
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(966L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(966.0F, fraction0.floatValue(), 0.01F);
      assertEquals(96600.0, fraction0.percentageValue(), 0.01D);
      assertEquals(966, fraction0.shortValue());
      assertEquals(966, fraction0.intValue());
      assertEquals(966.0, fraction0.doubleValue(), 0.01D);
      assertEquals(-58, fraction0.byteValue());
      assertEquals(966, fraction0.getNumerator());
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(966L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(966.0F, fraction0.floatValue(), 0.01F);
      assertEquals(96600.0, fraction0.percentageValue(), 0.01D);
      assertEquals(966, fraction0.shortValue());
      assertEquals(966, fraction0.intValue());
      assertEquals(966.0, fraction0.doubleValue(), 0.01D);
      assertEquals(-58, fraction0.byteValue());
      assertEquals(966, fraction0.getNumerator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 1298;
      Fraction fraction0 = Fraction.getReducedFraction(int0, int0);
      assertNotNull(fraction0);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      
      Fraction fraction1 = Fraction.ZERO;
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertNotSame(fraction0, fraction1);
      assertSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction1);
      assertSame(fraction2, fraction0);
      assertNotNull(fraction2);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(1, fraction2.intValue());
      assertEquals(1L, fraction2.longValue());
      assertEquals(100.0, fraction2.percentageValue(), 0.01D);
      assertEquals(1, fraction2.byteValue());
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
      assertEquals(1, fraction2.shortValue());
      assertEquals(1.0, fraction2.doubleValue(), 0.01D);
      assertEquals(1, fraction2.getNumerator());
  }

  @Test
  public void test15()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      
      double double0 = 0.0;
      Fraction fraction1 = new Fraction(double0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      
      Fraction fraction2 = fraction1.add(fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertSame(fraction0, fraction2);
      assertSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction2);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction2.getDenominator());
      assertEquals(1, fraction2.byteValue());
      assertEquals(1L, fraction2.longValue());
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
      assertEquals(1.0, fraction2.doubleValue(), 0.01D);
      assertEquals(1, fraction2.getNumerator());
      assertEquals(1, fraction2.intValue());
      assertEquals(100.0, fraction2.percentageValue(), 0.01D);
      assertEquals(1, fraction2.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test
  public void test16()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(80.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.add(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertTrue(fraction1.equals((Object)fraction0));
      assertTrue(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
  }

  @Test
  public void test18()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(60.0, fraction0.percentageValue(), 0.01D);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = Fraction.THREE_QUARTERS;
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(0.75, fraction1.doubleValue(), 0.01D);
      assertEquals(0.75F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals(75.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(4, fraction1.getDenominator());
      
      boolean boolean0 = fraction1.equals((Object) fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(boolean0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(60.0, fraction0.percentageValue(), 0.01D);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0.75, fraction1.doubleValue(), 0.01D);
      assertEquals(0.75F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals(75.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(4, fraction1.getDenominator());
  }

  @Test
  public void test19()  throws Throwable  {
      double double0 = (-3096.012778417855);
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(-3096, fraction0.shortValue());
      assertEquals((-3096.0127F), fraction0.floatValue(), 0.01F);
      assertEquals((-309601.27795527154), fraction0.percentageValue(), 0.01D);
      assertEquals((-3096L), fraction0.longValue());
      assertEquals((-3096.0127795527155), fraction0.doubleValue(), 0.01D);
      assertEquals(-24, fraction0.byteValue());
      assertEquals(313, fraction0.getDenominator());
      assertEquals(-3096, fraction0.intValue());
      assertEquals(-969052, fraction0.getNumerator());
      
      Fraction fraction1 = fraction0.divide(fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(100.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1, fraction1.byteValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(-3096, fraction0.shortValue());
      assertEquals((-3096.0127F), fraction0.floatValue(), 0.01F);
      assertEquals((-309601.27795527154), fraction0.percentageValue(), 0.01D);
      assertEquals((-3096L), fraction0.longValue());
      assertEquals((-3096.0127795527155), fraction0.doubleValue(), 0.01D);
      assertEquals(-24, fraction0.byteValue());
      assertEquals(313, fraction0.getDenominator());
      assertEquals(-3096, fraction0.intValue());
      assertEquals(-969052, fraction0.getNumerator());
      
      boolean boolean0 = fraction0.equals((Object) fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(boolean0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(100.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1, fraction1.byteValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(-3096, fraction0.shortValue());
      assertEquals((-3096.0127F), fraction0.floatValue(), 0.01F);
      assertEquals((-309601.27795527154), fraction0.percentageValue(), 0.01D);
      assertEquals((-3096L), fraction0.longValue());
      assertEquals((-3096.0127795527155), fraction0.doubleValue(), 0.01D);
      assertEquals(-24, fraction0.byteValue());
      assertEquals(313, fraction0.getDenominator());
      assertEquals(-3096, fraction0.intValue());
      assertEquals(-969052, fraction0.getNumerator());
  }

  @Test
  public void test20()  throws Throwable  {
      double double0 = 966.0;
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(966.0F, fraction0.floatValue(), 0.01F);
      assertEquals(966.0, fraction0.doubleValue(), 0.01D);
      assertEquals(966L, fraction0.longValue());
      assertEquals(966, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-58, fraction0.byteValue());
      assertEquals(96600.0, fraction0.percentageValue(), 0.01D);
      assertEquals(966, fraction0.getNumerator());
      assertEquals(966, fraction0.shortValue());
      
      int int0 = 0;
      Fraction fraction1 = fraction0.subtract(int0);
      assertTrue(fraction1.equals((Object)fraction0));
      assertTrue(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
      assertEquals(966.0, fraction1.doubleValue(), 0.01D);
      assertEquals(966, fraction1.intValue());
      assertEquals(966.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(966, fraction1.shortValue());
      assertEquals(966, fraction1.getNumerator());
      assertEquals(96600.0, fraction1.percentageValue(), 0.01D);
      assertEquals(-58, fraction1.byteValue());
      assertEquals(966L, fraction1.longValue());
      assertEquals(966.0F, fraction0.floatValue(), 0.01F);
      assertEquals(966.0, fraction0.doubleValue(), 0.01D);
      assertEquals(966L, fraction0.longValue());
      assertEquals(966, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-58, fraction0.byteValue());
      assertEquals(96600.0, fraction0.percentageValue(), 0.01D);
      assertEquals(966, fraction0.getNumerator());
      assertEquals(966, fraction0.shortValue());
      
      boolean boolean0 = fraction0.equals((Object) fraction1);
      assertTrue(fraction1.equals((Object)fraction0));
      assertTrue(fraction0.equals((Object)fraction1));
      assertTrue(boolean0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(966.0, fraction1.doubleValue(), 0.01D);
      assertEquals(966, fraction1.intValue());
      assertEquals(966.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(966, fraction1.shortValue());
      assertEquals(966, fraction1.getNumerator());
      assertEquals(96600.0, fraction1.percentageValue(), 0.01D);
      assertEquals(-58, fraction1.byteValue());
      assertEquals(966L, fraction1.longValue());
      assertEquals(966.0F, fraction0.floatValue(), 0.01F);
      assertEquals(966.0, fraction0.doubleValue(), 0.01D);
      assertEquals(966L, fraction0.longValue());
      assertEquals(966, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-58, fraction0.byteValue());
      assertEquals(96600.0, fraction0.percentageValue(), 0.01D);
      assertEquals(966, fraction0.getNumerator());
      assertEquals(966, fraction0.shortValue());
  }

  @Test
  public void test21()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(60.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(3, fraction0.getNumerator());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = fraction0.equals(object0);
      assertFalse(boolean0);
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(60.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(3, fraction0.getNumerator());
  }

  @Test
  public void test22()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.byteValue());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(80.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      
      Fraction fraction1 = Fraction.TWO;
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(2.0, fraction1.doubleValue(), 0.01D);
      assertEquals(2, fraction1.intValue());
      assertEquals(2, fraction1.byteValue());
      assertEquals(2, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2L, fraction1.longValue());
      assertEquals(2.0F, fraction1.floatValue(), 0.01F);
      assertEquals(200.0, fraction1.percentageValue(), 0.01D);
      assertEquals(2, fraction1.getNumerator());
      
      int int0 = fraction0.compareTo(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals((-1), int0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(2.0, fraction1.doubleValue(), 0.01D);
      assertEquals(2, fraction1.intValue());
      assertEquals(2, fraction1.byteValue());
      assertEquals(2, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2L, fraction1.longValue());
      assertEquals(2.0F, fraction1.floatValue(), 0.01F);
      assertEquals(200.0, fraction1.percentageValue(), 0.01D);
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(80.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
  }

  @Test
  public void test23()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertNotNull(fraction0);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(75.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(75.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
  }

  @Test
  public void test24()  throws Throwable  {
      double double0 = 100.0;
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(100, fraction0.byteValue());
      assertEquals(100, fraction0.intValue());
      assertEquals(100, fraction0.shortValue());
      assertEquals(10000.0, fraction0.percentageValue(), 0.01D);
      assertEquals(100.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(100, fraction0.getNumerator());
      assertEquals(100.0F, fraction0.floatValue(), 0.01F);
      assertEquals(100L, fraction0.longValue());
      
      Fraction fraction1 = fraction0.abs();
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(100, fraction0.byteValue());
      assertEquals(100, fraction0.intValue());
      assertEquals(100, fraction0.shortValue());
      assertEquals(10000.0, fraction0.percentageValue(), 0.01D);
      assertEquals(100.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(100, fraction0.getNumerator());
      assertEquals(100.0F, fraction0.floatValue(), 0.01F);
      assertEquals(100L, fraction0.longValue());
      assertEquals(100, fraction1.getNumerator());
      assertEquals(100.0, fraction1.doubleValue(), 0.01D);
      assertEquals(100L, fraction1.longValue());
      assertEquals(100, fraction1.byteValue());
      assertEquals(100.0F, fraction1.floatValue(), 0.01F);
      assertEquals(100, fraction1.shortValue());
      assertEquals(100, fraction1.intValue());
      assertEquals(10000.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Fraction fraction0 = new Fraction(int0);
      assertNotNull(fraction0);
      assertEquals(-2147483648, fraction0.intValue());
      assertEquals((-2.147483648E11), fraction0.percentageValue(), 0.01D);
      assertEquals(-2147483648, fraction0.getNumerator());
      assertEquals((-2147483648L), fraction0.longValue());
      assertEquals((-2.14748365E9F), fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals((-2.147483648E9), fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.abs();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1, cannot negate
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      
      int int0 = fraction0.hashCode();
      assertEquals(23274, int0);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      
      Fraction fraction1 = new Fraction(int0, int0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(100.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1, fraction1.shortValue());
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = 3536;
      int int1 = Integer.MIN_VALUE;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 3,536/-2,147,483,648, cannot negate
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      double double0 = 100.0;
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(100.0, fraction0.doubleValue(), 0.01D);
      assertEquals(100L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(100, fraction0.shortValue());
      assertEquals(100.0F, fraction0.floatValue(), 0.01F);
      assertEquals(100, fraction0.byteValue());
      assertEquals(10000.0, fraction0.percentageValue(), 0.01D);
      assertEquals(100, fraction0.intValue());
      assertEquals(100, fraction0.getNumerator());
      
      int int0 = 0;
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.divide(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 100/0
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      double double0 = (-524.535724684093);
      int int0 = (-2163);
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(double0, double0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -524.536 to fraction after -2,163 iterations
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      double double0 = (-1148.0);
      int int0 = (-23);
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(double0, double0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -1,148 to fraction (1,149/9,223,372,036,854,775,807)
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(60.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      
      int int0 = fraction0.getDenominator();
      assertEquals(5, int0);
      assertEquals(60.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      
      short short0 = fraction0.shortValue();
      assertEquals((short)0, short0);
      assertEquals(60.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      
      Fraction fraction1 = null;
      try {
        fraction1 = new Fraction((double) int0, (double) short0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 5 to fraction (9,223,372,036,854,775,804/9,223,372,036,854,775,807)
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      double double0 = 1.8014398509481972E16;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(double0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 18,014,398,509,481,972 to fraction (18,014,398,509,481,972/1)
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      double double0 = 966.0;
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(966, fraction0.intValue());
      assertEquals(-58, fraction0.byteValue());
      assertEquals(966, fraction0.getNumerator());
      assertEquals(96600.0, fraction0.percentageValue(), 0.01D);
      assertEquals(966.0F, fraction0.floatValue(), 0.01F);
      assertEquals(966.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(966, fraction0.shortValue());
      assertEquals(966L, fraction0.longValue());
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
      assertEquals(1932L, fraction1.longValue());
      assertEquals(1932, fraction1.intValue());
      assertEquals(193200.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1932, fraction1.shortValue());
      assertEquals(1932.0, fraction1.doubleValue(), 0.01D);
      assertEquals(-116, fraction1.byteValue());
      assertEquals(1932, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1932.0F, fraction1.floatValue(), 0.01F);
      assertEquals(966, fraction0.intValue());
      assertEquals(-58, fraction0.byteValue());
      assertEquals(966, fraction0.getNumerator());
      assertEquals(96600.0, fraction0.percentageValue(), 0.01D);
      assertEquals(966.0F, fraction0.floatValue(), 0.01F);
      assertEquals(966.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(966, fraction0.shortValue());
      assertEquals(966L, fraction0.longValue());
  }

  @Test
  public void test35()  throws Throwable  {
      double double0 = (-3096.012778417855);
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals((-3096L), fraction0.longValue());
      assertEquals(-3096, fraction0.intValue());
      assertEquals((-309601.27795527154), fraction0.percentageValue(), 0.01D);
      assertEquals((-3096.0127795527155), fraction0.doubleValue(), 0.01D);
      assertEquals(-3096, fraction0.shortValue());
      assertEquals(-969052, fraction0.getNumerator());
      assertEquals(-24, fraction0.byteValue());
      assertEquals((-3096.0127F), fraction0.floatValue(), 0.01F);
      assertEquals(313, fraction0.getDenominator());
      
      int int0 = fraction0.getNumerator();
      assertEquals((-969052), int0);
      assertEquals((-3096L), fraction0.longValue());
      assertEquals(-3096, fraction0.intValue());
      assertEquals((-309601.27795527154), fraction0.percentageValue(), 0.01D);
      assertEquals((-3096.0127795527155), fraction0.doubleValue(), 0.01D);
      assertEquals(-3096, fraction0.shortValue());
      assertEquals(-969052, fraction0.getNumerator());
      assertEquals(-24, fraction0.byteValue());
      assertEquals((-3096.0127F), fraction0.floatValue(), 0.01F);
      assertEquals(313, fraction0.getDenominator());
      
      Fraction fraction1 = fraction0.add(int0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals((-3096L), fraction0.longValue());
      assertEquals(-3096, fraction0.intValue());
      assertEquals((-309601.27795527154), fraction0.percentageValue(), 0.01D);
      assertEquals((-3096.0127795527155), fraction0.doubleValue(), 0.01D);
      assertEquals(-3096, fraction0.shortValue());
      assertEquals(-969052, fraction0.getNumerator());
      assertEquals(-24, fraction0.byteValue());
      assertEquals((-3096.0127F), fraction0.floatValue(), 0.01F);
      assertEquals(313, fraction0.getDenominator());
      assertEquals((-972148L), fraction1.longValue());
      assertEquals(-116, fraction1.byteValue());
      assertEquals(-304282328, fraction1.getNumerator());
      assertEquals((-972148.0127795527), fraction1.doubleValue(), 0.01D);
      assertEquals(-972148, fraction1.intValue());
      assertEquals((-9.721480127795528E7), fraction1.percentageValue(), 0.01D);
      assertEquals(10892, fraction1.shortValue());
      assertEquals(313, fraction1.getDenominator());
      assertEquals((-972148.0F), fraction1.floatValue(), 0.01F);
  }

  @Test
  public void test36()  throws Throwable  {
      double double0 = (-3096.012778417855);
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(313, fraction0.getDenominator());
      assertEquals(-24, fraction0.byteValue());
      assertEquals((-3096.0127795527155), fraction0.doubleValue(), 0.01D);
      assertEquals((-3096L), fraction0.longValue());
      assertEquals(-969052, fraction0.getNumerator());
      assertEquals((-309601.27795527154), fraction0.percentageValue(), 0.01D);
      assertEquals(-3096, fraction0.shortValue());
      assertEquals(-3096, fraction0.intValue());
      assertEquals((-3096.0127F), fraction0.floatValue(), 0.01F);
      
      int int0 = fraction0.getNumerator();
      assertEquals((-969052), int0);
      assertEquals(313, fraction0.getDenominator());
      assertEquals(-24, fraction0.byteValue());
      assertEquals((-3096.0127795527155), fraction0.doubleValue(), 0.01D);
      assertEquals((-3096L), fraction0.longValue());
      assertEquals(-969052, fraction0.getNumerator());
      assertEquals((-309601.27795527154), fraction0.percentageValue(), 0.01D);
      assertEquals(-3096, fraction0.shortValue());
      assertEquals(-3096, fraction0.intValue());
      assertEquals((-3096.0127F), fraction0.floatValue(), 0.01F);
      
      double double1 = fraction0.percentageValue();
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-309601.27795527154), double1, 0.01D);
      assertEquals(313, fraction0.getDenominator());
      assertEquals(-24, fraction0.byteValue());
      assertEquals((-3096.0127795527155), fraction0.doubleValue(), 0.01D);
      assertEquals((-3096L), fraction0.longValue());
      assertEquals(-969052, fraction0.getNumerator());
      assertEquals((-309601.27795527154), fraction0.percentageValue(), 0.01D);
      assertEquals(-3096, fraction0.shortValue());
      assertEquals(-3096, fraction0.intValue());
      assertEquals((-3096.0127F), fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = new Fraction(double1, int0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(313, fraction0.getDenominator());
      assertEquals(-24, fraction0.byteValue());
      assertEquals((-3096.0127795527155), fraction0.doubleValue(), 0.01D);
      assertEquals((-3096L), fraction0.longValue());
      assertEquals(-969052, fraction0.getNumerator());
      assertEquals((-309601.27795527154), fraction0.percentageValue(), 0.01D);
      assertEquals(-3096, fraction0.shortValue());
      assertEquals(-3096, fraction0.intValue());
      assertEquals((-3096.0127F), fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-3.09602E7), fraction1.percentageValue(), 0.01D);
      assertEquals((-309602L), fraction1.longValue());
      assertEquals(-98, fraction1.byteValue());
      assertEquals(-309602, fraction1.getNumerator());
      assertEquals(-309602, fraction1.intValue());
      assertEquals((-309602.0), fraction1.doubleValue(), 0.01D);
      assertEquals(18078, fraction1.shortValue());
      assertEquals((-309602.0F), fraction1.floatValue(), 0.01F);
  }

  @Test
  public void test37()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      
      FractionField fractionField0 = fraction0.getField();
      assertNotNull(fractionField0);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
  }

  @Test
  public void test38()  throws Throwable  {
      double double0 = 100.0;
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(100, fraction0.byteValue());
      assertEquals(100, fraction0.getNumerator());
      assertEquals(10000.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(100, fraction0.intValue());
      assertEquals(100, fraction0.shortValue());
      assertEquals(100.0F, fraction0.floatValue(), 0.01F);
      assertEquals(100L, fraction0.longValue());
      assertEquals(100.0, fraction0.doubleValue(), 0.01D);
      
      int int0 = 181;
      Fraction fraction1 = fraction0.multiply(int0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
      assertEquals(18100, fraction1.intValue());
      assertEquals(18100.0, fraction1.doubleValue(), 0.01D);
      assertEquals(18100.0F, fraction1.floatValue(), 0.01F);
      assertEquals(-76, fraction1.byteValue());
      assertEquals(18100L, fraction1.longValue());
      assertEquals(1810000.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(18100, fraction1.shortValue());
      assertEquals(18100, fraction1.getNumerator());
      assertEquals(100, fraction0.byteValue());
      assertEquals(100, fraction0.getNumerator());
      assertEquals(10000.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(100, fraction0.intValue());
      assertEquals(100, fraction0.shortValue());
      assertEquals(100.0F, fraction0.floatValue(), 0.01F);
      assertEquals(100L, fraction0.longValue());
      assertEquals(100.0, fraction0.doubleValue(), 0.01D);
  }

  @Test
  public void test39()  throws Throwable  {
      double double0 = (-3096.012778417855);
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals((-3096.0127795527155), fraction0.doubleValue(), 0.01D);
      assertEquals(-3096, fraction0.intValue());
      assertEquals((-3096L), fraction0.longValue());
      assertEquals(-24, fraction0.byteValue());
      assertEquals((-309601.27795527154), fraction0.percentageValue(), 0.01D);
      assertEquals(-3096, fraction0.shortValue());
      assertEquals((-3096.0127F), fraction0.floatValue(), 0.01F);
      assertEquals(-969052, fraction0.getNumerator());
      assertEquals(313, fraction0.getDenominator());
      
      float float0 = fraction0.floatValue();
      assertEquals((-3096.0127F), float0, 0.01F);
      assertEquals((-3096.0127795527155), fraction0.doubleValue(), 0.01D);
      assertEquals(-3096, fraction0.intValue());
      assertEquals((-3096L), fraction0.longValue());
      assertEquals(-24, fraction0.byteValue());
      assertEquals((-309601.27795527154), fraction0.percentageValue(), 0.01D);
      assertEquals(-3096, fraction0.shortValue());
      assertEquals((-3096.0127F), fraction0.floatValue(), 0.01F);
      assertEquals(-969052, fraction0.getNumerator());
      assertEquals(313, fraction0.getDenominator());
  }

  @Test
  public void test40()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(60.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(5, fraction0.getDenominator());
      
      long long0 = fraction0.longValue();
      assertEquals(0L, long0);
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(60.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(5, fraction0.getDenominator());
  }

  @Test
  public void test41()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertNotNull(fraction0);
      assertEquals(75.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(75.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
  }
}
