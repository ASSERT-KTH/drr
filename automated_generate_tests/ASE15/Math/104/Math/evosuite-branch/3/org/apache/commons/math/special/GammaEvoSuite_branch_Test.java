/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:21:29 GMT 2014
 */

package org.apache.commons.math.special;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math.MaxIterationsExceededException;
import org.apache.commons.math.special.Gamma;



import org.junit.runner.RunWith;


public class GammaEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 272;
      double double1 = Gamma.regularizedGammaQ((double) int0, double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.0, double1, 0.01D);
  }

  @Test
  public void test01()  throws Throwable  {
      double double0 = (-1247.66409570323);
      double double1 = 95.4623747523;
      double double2 = Gamma.regularizedGammaQ(double1, double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test02()  throws Throwable  {
      double double0 = 0.0;
      double double1 = Gamma.regularizedGammaQ(double0, double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = 3.6899182659531625E-6;
      //  // Unstable assertion: assertFalse(double2 == double1);
      
      double double3 = Gamma.regularizedGammaQ(double2, double1);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertTrue(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double3, 0.01D);
  }

  @Test
  public void test03()  throws Throwable  {
      double double0 = (-2811.0184545285665);
      int int0 = 0;
      double double1 = Gamma.regularizedGammaQ(double0, double0, double0, int0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = Gamma.regularizedGammaQ(double1, double1, double0, int0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test04()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 3.6899182659531625E-6;
      int int0 = 6;
      try {
        double double2 = Gamma.regularizedGammaQ(double1, double1, double0, int0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Maximal number of iterations (6) exceeded
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      double double0 = 4.652362892704858E-5;
      double double1 = Gamma.regularizedGammaP(double0, double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.9995628470051309, double1, 0.01D);
  }

  @Test
  public void test06()  throws Throwable  {
      double double0 = (-1247.66409570323);
      double double1 = Gamma.regularizedGammaP(double0, double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NaN, double1, 0.01D);
      
      int int0 = (-1272);
      double double2 = 1.0;
      assertFalse(double2 == double1);
      
      double double3 = 0.0;
      assertFalse(double3 == double1);
      
      double double4 = Gamma.regularizedGammaP(double2, double3, double1, int0);
      assertFalse(double4 == double0);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertTrue(double4 == double3);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertTrue(double3 == double4);
      assertFalse(double3 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double4);
      assertFalse(double2 == double4);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double4);
      assertEquals(0.0, double4, 0.01D);
  }

  @Test
  public void test07()  throws Throwable  {
      double double0 = (-1247.66409570323);
      double double1 = 95.4623747523;
      double double2 = Gamma.regularizedGammaP(double1, double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test08()  throws Throwable  {
      double double0 = (-2811.0184545285665);
      int int0 = 0;
      double double1 = Gamma.regularizedGammaQ(double0, double0, double0, int0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = Gamma.regularizedGammaP(double0, double1, double1, int0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test09()  throws Throwable  {
      double double0 = 0.0;
      double double1 = Gamma.regularizedGammaQ(double0, double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = Gamma.regularizedGammaP(double1, double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      double double0 = (-1247.66409570323);
      double double1 = Gamma.logGamma(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      double double0 = 0.0;
      double double1 = Gamma.regularizedGammaQ(double0, double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = Gamma.logGamma(double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      double double0 = 2250.9969215189244;
      double double1 = 4.652362892704858E-5;
      double double2 = Gamma.regularizedGammaQ(double0, double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(1.0, double2, 0.01D);
      
      double double3 = Gamma.regularizedGammaP(double2, double0);
      assertTrue(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertTrue(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(1.0, double3, 0.01D);
  }
}
