/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:31:38 GMT 2014
 */

package org.apache.commons.math.optimization.direct;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math.analysis.MultivariateFunction;
import org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatingFunction;
import org.apache.commons.math.exception.MathIllegalStateException;
import org.apache.commons.math.exception.NumberIsTooSmallException;
import org.apache.commons.math.exception.OutOfRangeException;
import org.apache.commons.math.optimization.GoalType;
import org.apache.commons.math.optimization.RealPointValuePair;
import org.apache.commons.math.optimization.direct.BOBYQAOptimizer;
import org.apache.commons.math.random.RandomGenerator;
import org.apache.commons.math.random.UnitSphereRandomVectorGenerator;
import org.apache.commons.math.random.Well19937a;



import org.junit.runner.RunWith;


public class BOBYQAOptimizerEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      int int0 = (-613);
      BOBYQAOptimizer bOBYQAOptimizer0 = new BOBYQAOptimizer(int0, int0, int0);
      assertEquals(0, bOBYQAOptimizer0.getEvaluations());
      assertEquals(0, bOBYQAOptimizer0.getMaxEvaluations());
      assertNull(bOBYQAOptimizer0.getGoalType());
      assertNotNull(bOBYQAOptimizer0);
      
      double[] doubleArray0 = new double[3];
      double[][] doubleArray1 = new double[3][4];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      assertNotNull(doubleArray1[2]);
      
      int int1 = 0;
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int0);
      assertFalse(int0 == int1);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray1[0], int0, int1, unitSphereRandomVectorGenerator0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      // Undeclared exception!
      try {
        RealPointValuePair realPointValuePair0 = bOBYQAOptimizer0.optimize(int0, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[2]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of interpolation points (-613)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 1;
      BOBYQAOptimizer bOBYQAOptimizer0 = new BOBYQAOptimizer(int0);
      assertNull(bOBYQAOptimizer0.getGoalType());
      assertEquals(0, bOBYQAOptimizer0.getEvaluations());
      assertEquals(0, bOBYQAOptimizer0.getMaxEvaluations());
      assertNotNull(bOBYQAOptimizer0);
      
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int0);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray0[0], int0, int0, unitSphereRandomVectorGenerator0);
      assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      // Undeclared exception!
      try {
        RealPointValuePair realPointValuePair0 = bOBYQAOptimizer0.optimize(int0, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 is smaller than the minimum (2)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 10;
      BOBYQAOptimizer bOBYQAOptimizer0 = new BOBYQAOptimizer(int0, int0, int0);
      //  // Unstable assertion: assertEquals(0, bOBYQAOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertEquals(0, bOBYQAOptimizer0.getEvaluations());
      //  // Unstable assertion: assertNull(bOBYQAOptimizer0.getGoalType());
      //  // Unstable assertion: assertNotNull(bOBYQAOptimizer0);
      
      double[] doubleArray0 = new double[3];
      int int1 = 238;
      double[][] doubleArray1 = new double[3][4];
      doubleArray1[0] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray1[0];
      //  // Unstable assertion: assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[2]);
      
      int int2 = 0;
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int0 == int2);
      //  // Unstable assertion: assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray1[0], int1, int2, unitSphereRandomVectorGenerator0);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int1 == int2);
      //  // Unstable assertion: assertFalse(int2 == int1);
      //  // Unstable assertion: assertFalse(int2 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int0 == int2);
      //  // Unstable assertion: assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      // Undeclared exception!
      try {
        RealPointValuePair realPointValuePair0 = bOBYQAOptimizer0.optimize(int1, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[2]);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // trust region step has failed to reduce Q
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 9;
      double double0 = 0.0;
      BOBYQAOptimizer bOBYQAOptimizer0 = new BOBYQAOptimizer(int0, double0, double0);
      //  // Unstable assertion: assertEquals(0, bOBYQAOptimizer0.getEvaluations());
      //  // Unstable assertion: assertNull(bOBYQAOptimizer0.getGoalType());
      //  // Unstable assertion: assertEquals(0, bOBYQAOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertNotNull(bOBYQAOptimizer0);
      
      double[] doubleArray0 = new double[3];
      int int1 = 238;
      double[][] doubleArray1 = new double[3][4];
      doubleArray1[0] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[2]);
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray1[0], int1, int0, unitSphereRandomVectorGenerator0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      // Undeclared exception!
      try {
        RealPointValuePair realPointValuePair0 = bOBYQAOptimizer0.optimize(int1, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[2]);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // trust region step has failed to reduce Q
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 9;
      BOBYQAOptimizer bOBYQAOptimizer0 = new BOBYQAOptimizer(int0, int0, int0);
      assertEquals(0, bOBYQAOptimizer0.getMaxEvaluations());
      assertEquals(0, bOBYQAOptimizer0.getEvaluations());
      assertNull(bOBYQAOptimizer0.getGoalType());
      assertNotNull(bOBYQAOptimizer0);
      
      double[] doubleArray0 = new double[3];
      double[][] doubleArray1 = new double[3][4];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      assertNotNull(doubleArray1[2]);
      
      Well19937a well19937a0 = new Well19937a((long) int0);
      assertNotNull(well19937a0);
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int0, (RandomGenerator) well19937a0);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray1[2], int0, int0, unitSphereRandomVectorGenerator0);
      assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      // Undeclared exception!
      try {
        RealPointValuePair realPointValuePair0 = bOBYQAOptimizer0.optimize(int0, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[2], doubleArray1[2], doubleArray1[0]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
      }
  }
}
