/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:27:46 GMT 2014
 */

package org.apache.commons.math.optimization.direct;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.analysis.MultivariateFunction;
import org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatingFunction;
import org.apache.commons.math.optimization.GoalType;
import org.apache.commons.math.optimization.RealPointValuePair;
import org.apache.commons.math.optimization.direct.BOBYQAOptimizer;
import org.apache.commons.math.random.RandomGenerator;
import org.apache.commons.math.random.UnitSphereRandomVectorGenerator;
import org.apache.commons.math.random.Well1024a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class BOBYQAOptimizerEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      int int0 = 13;
      BOBYQAOptimizer bOBYQAOptimizer0 = new BOBYQAOptimizer(int0);
      assertEquals(0, bOBYQAOptimizer0.getEvaluations());
      assertNull(bOBYQAOptimizer0.getGoalType());
      assertEquals(0, bOBYQAOptimizer0.getMaxEvaluations());
      assertNotNull(bOBYQAOptimizer0);
      
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[1];
      Well1024a well1024a0 = new Well1024a(int0);
      assertNotNull(well1024a0);
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int0, (RandomGenerator) well1024a0);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, int0, int0, unitSphereRandomVectorGenerator0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray1);
      
      // Undeclared exception!
      try {
        RealPointValuePair realPointValuePair0 = bOBYQAOptimizer0.optimize(int0, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray2, doubleArray2, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
      }
  }
}
