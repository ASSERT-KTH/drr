/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:08:35 GMT 2014
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.exception.MathIllegalArgumentException;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.threed.Line;
import org.apache.commons.math3.geometry.euclidean.threed.SubLine;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class LineEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      assertNotNull(vector3D0);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      
      Line line0 = new Line(vector3D0, vector3D0);
      assertNotNull(line0);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      
      Vector3D vector3D1 = line0.intersection(line0);
      assertNull(vector3D1);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
  }

  @Test
  public void test01()  throws Throwable  {
      double double0 = (-1011.36753044105);
      Vector3D vector3D0 = new Vector3D(double0, double0);
      assertNotNull(vector3D0);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.3912504118272586, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.950091231973189, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.22530401486341523, vector3D0.getDelta(), 0.01D);
      assertEquals(0.950091231973189, vector3D0.getX(), 0.01D);
      assertEquals(1.0000000000000002, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.21775647613987756, vector3D0.getY(), 0.01D);
      assertEquals(0.22530401486341523, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.2234027037141921, vector3D0.getZ(), 0.01D);
      
      Vector3D vector3D1 = vector3D0.scalarMultiply(double0);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotNull(vector3D1);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.3912504118272586, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.950091231973189, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.22530401486341523, vector3D0.getDelta(), 0.01D);
      assertEquals(0.950091231973189, vector3D0.getX(), 0.01D);
      assertEquals(1.0000000000000002, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.21775647613987756, vector3D0.getY(), 0.01D);
      assertEquals(0.22530401486341523, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.2234027037141921, vector3D0.getZ(), 0.01D);
      assertEquals((-225.94224074927607), vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals((-2.9162886387263782), vector3D1.getAlpha(), 0.01D);
      assertEquals(960.8914229744189, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals((-960.8914229744189), vector3D1.getX(), 0.01D);
      assertEquals(1407.0654932348284, vector3D1.getNorm1(), 0.01D);
      assertEquals((-0.22530401486341523), vector3D1.getDelta(), 0.01D);
      assertEquals(1011.36753044105, vector3D1.getNorm(), 0.01D);
      assertEquals(1022864.2816304283, vector3D1.getNormSq(), 0.01D);
      assertEquals((-220.23182951113338), vector3D1.getY(), 0.01D);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      
      Line line0 = new Line(vector3D0, vector3D1);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotNull(line0);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.3912504118272586, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.950091231973189, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.22530401486341523, vector3D0.getDelta(), 0.01D);
      assertEquals(0.950091231973189, vector3D0.getX(), 0.01D);
      assertEquals(1.0000000000000002, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.21775647613987756, vector3D0.getY(), 0.01D);
      assertEquals(0.22530401486341523, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.2234027037141921, vector3D0.getZ(), 0.01D);
      assertEquals((-225.94224074927607), vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals((-2.9162886387263782), vector3D1.getAlpha(), 0.01D);
      assertEquals(960.8914229744189, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals((-960.8914229744189), vector3D1.getX(), 0.01D);
      assertEquals(1407.0654932348284, vector3D1.getNorm1(), 0.01D);
      assertEquals((-0.22530401486341523), vector3D1.getDelta(), 0.01D);
      assertEquals(1011.36753044105, vector3D1.getNorm(), 0.01D);
      assertEquals(1022864.2816304283, vector3D1.getNormSq(), 0.01D);
      assertEquals((-220.23182951113338), vector3D1.getY(), 0.01D);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      
      Vector3D vector3D2 = line0.intersection(line0);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D2, vector3D0);
      assertNotNull(vector3D2);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.3912504118272586, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.950091231973189, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.22530401486341523, vector3D0.getDelta(), 0.01D);
      assertEquals(0.950091231973189, vector3D0.getX(), 0.01D);
      assertEquals(1.0000000000000002, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.21775647613987756, vector3D0.getY(), 0.01D);
      assertEquals(0.22530401486341523, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.2234027037141921, vector3D0.getZ(), 0.01D);
      assertEquals((-225.94224074927607), vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals((-2.9162886387263782), vector3D1.getAlpha(), 0.01D);
      assertEquals(960.8914229744189, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals((-960.8914229744189), vector3D1.getX(), 0.01D);
      assertEquals(1407.0654932348284, vector3D1.getNorm1(), 0.01D);
      assertEquals((-0.22530401486341523), vector3D1.getDelta(), 0.01D);
      assertEquals(1011.36753044105, vector3D1.getNorm(), 0.01D);
      assertEquals(1022864.2816304283, vector3D1.getNormSq(), 0.01D);
      assertEquals((-220.23182951113338), vector3D1.getY(), 0.01D);
      assertEquals(0.29117497961401473, vector3D2.getAlpha(), 0.01D);
      assertEquals(6.432394054867654E-17, vector3D2.getNorm1(), 0.01D);
      assertEquals(4.307964995372117E-17, vector3D2.getNorm(), 0.01D);
      assertEquals(3.9244979213023105E-17, vector3D2.getNormInf(), 0.01D);
      assertEquals((-1.331752175508766E-17), vector3D2.getZ(), 0.01D);
      assertEquals((-0.3142856447739711), vector3D2.getDelta(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(1.176143958056578E-17, vector3D2.getY(), 0.01D);
      assertEquals(1.8558562401351482E-33, vector3D2.getNormSq(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(3.9244979213023105E-17, vector3D2.getX(), 0.01D);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D2.equals((Object)vector3D0));
  }

  @Test
  public void test02()  throws Throwable  {
      double double0 = (-1011.36753044105);
      Vector3D vector3D0 = new Vector3D(double0, double0);
      assertNotNull(vector3D0);
      assertEquals(0.950091231973189, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.21775647613987756, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0000000000000002, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.22530401486341523, vector3D0.getDelta(), 0.01D);
      assertEquals(0.2234027037141921, vector3D0.getZ(), 0.01D);
      assertEquals(1.3912504118272586, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.22530401486341523, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.950091231973189, vector3D0.getX(), 0.01D);
      
      Vector3D vector3D1 = vector3D0.scalarMultiply(double0);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertNotNull(vector3D1);
      assertEquals((-225.94224074927607), vector3D1.getZ(), 0.01D);
      assertEquals(1022864.2816304283, vector3D1.getNormSq(), 0.01D);
      assertEquals((-0.22530401486341523), vector3D1.getDelta(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals((-220.23182951113338), vector3D1.getY(), 0.01D);
      assertEquals(1407.0654932348284, vector3D1.getNorm1(), 0.01D);
      assertEquals((-2.9162886387263782), vector3D1.getAlpha(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(960.8914229744189, vector3D1.getNormInf(), 0.01D);
      assertEquals((-960.8914229744189), vector3D1.getX(), 0.01D);
      assertEquals(1011.36753044105, vector3D1.getNorm(), 0.01D);
      assertEquals(0.950091231973189, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.21775647613987756, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0000000000000002, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.22530401486341523, vector3D0.getDelta(), 0.01D);
      assertEquals(0.2234027037141921, vector3D0.getZ(), 0.01D);
      assertEquals(1.3912504118272586, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.22530401486341523, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.950091231973189, vector3D0.getX(), 0.01D);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      
      Line line0 = new Line(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertNotNull(line0);
      assertEquals((-225.94224074927607), vector3D1.getZ(), 0.01D);
      assertEquals(1022864.2816304283, vector3D1.getNormSq(), 0.01D);
      assertEquals((-0.22530401486341523), vector3D1.getDelta(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals((-220.23182951113338), vector3D1.getY(), 0.01D);
      assertEquals(1407.0654932348284, vector3D1.getNorm1(), 0.01D);
      assertEquals((-2.9162886387263782), vector3D1.getAlpha(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(960.8914229744189, vector3D1.getNormInf(), 0.01D);
      assertEquals((-960.8914229744189), vector3D1.getX(), 0.01D);
      assertEquals(1011.36753044105, vector3D1.getNorm(), 0.01D);
      assertEquals(0.950091231973189, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.21775647613987756, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0000000000000002, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.22530401486341523, vector3D0.getDelta(), 0.01D);
      assertEquals(0.2234027037141921, vector3D0.getZ(), 0.01D);
      assertEquals(1.3912504118272586, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.22530401486341523, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.950091231973189, vector3D0.getX(), 0.01D);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      
      double double1 = line0.distance(line0);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertEquals((-225.94224074927607), vector3D1.getZ(), 0.01D);
      assertEquals(1022864.2816304283, vector3D1.getNormSq(), 0.01D);
      assertEquals((-0.22530401486341523), vector3D1.getDelta(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals((-220.23182951113338), vector3D1.getY(), 0.01D);
      assertEquals(1407.0654932348284, vector3D1.getNorm1(), 0.01D);
      assertEquals((-2.9162886387263782), vector3D1.getAlpha(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(960.8914229744189, vector3D1.getNormInf(), 0.01D);
      assertEquals((-960.8914229744189), vector3D1.getX(), 0.01D);
      assertEquals(1011.36753044105, vector3D1.getNorm(), 0.01D);
      assertEquals(0.950091231973189, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.21775647613987756, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0000000000000002, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.22530401486341523, vector3D0.getDelta(), 0.01D);
      assertEquals(0.2234027037141921, vector3D0.getZ(), 0.01D);
      assertEquals(1.3912504118272586, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.22530401486341523, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.950091231973189, vector3D0.getX(), 0.01D);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test03()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      assertNotNull(vector3D0);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      
      Line line0 = new Line(vector3D0, vector3D0);
      assertNotNull(line0);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      
      double double0 = line0.distance(line0);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test04()  throws Throwable  {
      double double0 = 0.0;
      Vector3D vector3D0 = Vector3D.MINUS_J;
      assertNotNull(vector3D0);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      
      Vector3D vector3D1 = vector3D0.orthogonal();
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotNull(vector3D1);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.5707963267948966, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D1.getZ(), 0.01D);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      
      Vector3D vector3D2 = new Vector3D(double0, vector3D1);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D1, vector3D0);
      assertNotNull(vector3D2);
      assertEquals(0.0, vector3D2.getX(), 0.01D);
      assertEquals(0.0, vector3D2.getNorm(), 0.01D);
      assertEquals(0.0, vector3D2.getZ(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(0.0, vector3D2.getY(), 0.01D);
      assertEquals(0.0, vector3D2.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D2.getDelta(), 0.01D);
      assertEquals(0.0, vector3D2.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D2.getNorm1(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.5707963267948966, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D1.getZ(), 0.01D);
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D1.equals((Object)vector3D0));
      
      Line line0 = new Line(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D1, vector3D0);
      assertNotNull(line0);
      assertEquals(0.0, vector3D2.getX(), 0.01D);
      assertEquals(0.0, vector3D2.getNorm(), 0.01D);
      assertEquals(0.0, vector3D2.getZ(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(0.0, vector3D2.getY(), 0.01D);
      assertEquals(0.0, vector3D2.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D2.getDelta(), 0.01D);
      assertEquals(0.0, vector3D2.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D2.getNorm1(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.5707963267948966, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D1.getZ(), 0.01D);
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D1.equals((Object)vector3D0));
      
      Line line1 = new Line(vector3D2, vector3D1);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(line1, line0);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D1, vector3D0);
      assertNotNull(line1);
      assertEquals(0.0, vector3D2.getX(), 0.01D);
      assertEquals(0.0, vector3D2.getNorm(), 0.01D);
      assertEquals(0.0, vector3D2.getZ(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(0.0, vector3D2.getY(), 0.01D);
      assertEquals(0.0, vector3D2.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D2.getDelta(), 0.01D);
      assertEquals(0.0, vector3D2.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D2.getNorm1(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.5707963267948966, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D1.getZ(), 0.01D);
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(line1.equals((Object)line0));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D1.equals((Object)vector3D0));
      
      boolean boolean0 = line0.isSimilarTo(line1);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(line1, line0);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(line0, line1);
      assertEquals(0.0, vector3D2.getX(), 0.01D);
      assertEquals(0.0, vector3D2.getNorm(), 0.01D);
      assertEquals(0.0, vector3D2.getZ(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(0.0, vector3D2.getY(), 0.01D);
      assertEquals(0.0, vector3D2.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D2.getDelta(), 0.01D);
      assertEquals(0.0, vector3D2.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D2.getNorm1(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.5707963267948966, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D1.getZ(), 0.01D);
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(line1.equals((Object)line0));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(line0.equals((Object)line1));
      assertFalse(boolean0);
  }

  @Test
  public void test05()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      assertNotNull(vector3D0);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      
      Line line0 = new Line(vector3D0, vector3D0);
      assertNotNull(line0);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      
      boolean boolean0 = line0.isSimilarTo(line0);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test06()  throws Throwable  {
      double double0 = (-1011.36753044105);
      Vector3D vector3D0 = new Vector3D(double0, double0);
      assertNotNull(vector3D0);
      assertEquals(0.22530401486341523, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.2234027037141921, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.22530401486341523, vector3D0.getDelta(), 0.01D);
      assertEquals(1.3912504118272586, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0000000000000002, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.950091231973189, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.950091231973189, vector3D0.getX(), 0.01D);
      assertEquals(0.21775647613987756, vector3D0.getY(), 0.01D);
      
      Vector3D vector3D1 = vector3D0.scalarMultiply(double0);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertNotNull(vector3D1);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals((-225.94224074927607), vector3D1.getZ(), 0.01D);
      assertEquals((-220.23182951113338), vector3D1.getY(), 0.01D);
      assertEquals((-0.22530401486341523), vector3D1.getDelta(), 0.01D);
      assertEquals((-960.8914229744189), vector3D1.getX(), 0.01D);
      assertEquals((-2.9162886387263782), vector3D1.getAlpha(), 0.01D);
      assertEquals(1407.0654932348284, vector3D1.getNorm1(), 0.01D);
      assertEquals(1022864.2816304283, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(960.8914229744189, vector3D1.getNormInf(), 0.01D);
      assertEquals(1011.36753044105, vector3D1.getNorm(), 0.01D);
      assertEquals(0.22530401486341523, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.2234027037141921, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.22530401486341523, vector3D0.getDelta(), 0.01D);
      assertEquals(1.3912504118272586, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0000000000000002, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.950091231973189, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.950091231973189, vector3D0.getX(), 0.01D);
      assertEquals(0.21775647613987756, vector3D0.getY(), 0.01D);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      
      Line line0 = new Line(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertNotNull(line0);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals((-225.94224074927607), vector3D1.getZ(), 0.01D);
      assertEquals((-220.23182951113338), vector3D1.getY(), 0.01D);
      assertEquals((-0.22530401486341523), vector3D1.getDelta(), 0.01D);
      assertEquals((-960.8914229744189), vector3D1.getX(), 0.01D);
      assertEquals((-2.9162886387263782), vector3D1.getAlpha(), 0.01D);
      assertEquals(1407.0654932348284, vector3D1.getNorm1(), 0.01D);
      assertEquals(1022864.2816304283, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(960.8914229744189, vector3D1.getNormInf(), 0.01D);
      assertEquals(1011.36753044105, vector3D1.getNorm(), 0.01D);
      assertEquals(0.22530401486341523, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.2234027037141921, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.22530401486341523, vector3D0.getDelta(), 0.01D);
      assertEquals(1.3912504118272586, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0000000000000002, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.950091231973189, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.950091231973189, vector3D0.getX(), 0.01D);
      assertEquals(0.21775647613987756, vector3D0.getY(), 0.01D);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      
      boolean boolean0 = line0.isSimilarTo(line0);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals((-225.94224074927607), vector3D1.getZ(), 0.01D);
      assertEquals((-220.23182951113338), vector3D1.getY(), 0.01D);
      assertEquals((-0.22530401486341523), vector3D1.getDelta(), 0.01D);
      assertEquals((-960.8914229744189), vector3D1.getX(), 0.01D);
      assertEquals((-2.9162886387263782), vector3D1.getAlpha(), 0.01D);
      assertEquals(1407.0654932348284, vector3D1.getNorm1(), 0.01D);
      assertEquals(1022864.2816304283, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(960.8914229744189, vector3D1.getNormInf(), 0.01D);
      assertEquals(1011.36753044105, vector3D1.getNorm(), 0.01D);
      assertEquals(0.22530401486341523, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.2234027037141921, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.22530401486341523, vector3D0.getDelta(), 0.01D);
      assertEquals(1.3912504118272586, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0000000000000002, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.950091231973189, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.950091231973189, vector3D0.getX(), 0.01D);
      assertEquals(0.21775647613987756, vector3D0.getY(), 0.01D);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertTrue(boolean0);
  }

  @Test
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      Vector3D vector3D0 = new Vector3D(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(vector3D0);
      assertEquals(0.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      
      Line line0 = null;
      try {
        line0 = new Line(vector3D0, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      assertNotNull(vector3D0);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      
      Line line0 = new Line(vector3D0, vector3D0);
      assertNotNull(line0);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      
      Vector3D vector3D1 = line0.getOrigin();
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertNotNull(vector3D1);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(true, vector3D1.isNaN());
      assertEquals(Double.NaN, vector3D1.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(Double.NaN, vector3D1.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertTrue(vector3D1.equals((Object)vector3D0));
      assertTrue(vector3D0.equals((Object)vector3D1));
  }

  @Test
  public void test09()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      assertNotNull(vector3D0);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      
      Line line0 = new Line(vector3D0, vector3D0);
      assertNotNull(line0);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      
      SubLine subLine0 = line0.wholeLine();
      assertNotNull(subLine0);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      assertNotNull(vector3D0);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(true, vector3D0.isNaN());
      
      Line line0 = new Line(vector3D0, vector3D0);
      assertNotNull(line0);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(true, vector3D0.isNaN());
      
      Vector3D vector3D1 = line0.getDirection();
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotNull(vector3D1);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNormSq(), 0.01D);
      assertEquals(true, vector3D1.isNaN());
      assertEquals(Double.NaN, vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(Double.NaN, vector3D1.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNorm(), 0.01D);
      assertTrue(vector3D0.equals((Object)vector3D1));
      assertTrue(vector3D1.equals((Object)vector3D0));
  }

  @Test
  public void test11()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      assertNotNull(vector3D0);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(true, vector3D0.isNaN());
      
      Line line0 = new Line(vector3D0, vector3D0);
      assertNotNull(line0);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(true, vector3D0.isNaN());
      
      Line line1 = line0.revert();
      assertNotSame(line1, line0);
      assertNotSame(line0, line1);
      assertNotNull(line1);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(true, vector3D0.isNaN());
      assertFalse(line1.equals((Object)line0));
      assertFalse(line0.equals((Object)line1));
  }

  @Test
  public void test12()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      assertNotNull(vector3D0);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01D);
      
      Line line0 = new Line(vector3D0, vector3D0);
      assertNotNull(line0);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01D);
      
      Vector1D vector1D0 = line0.toSubSpace((Vector<Euclidean3D>) vector3D0);
      assertNotNull(vector1D0);
      assertEquals(Double.NaN, vector1D0.getNormInf(), 0.01D);
      assertEquals(true, vector1D0.isNaN());
      assertEquals(Double.NaN, vector1D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector1D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector1D0.getNorm1(), 0.01D);
      assertEquals(false, vector1D0.isInfinite());
      assertEquals(Double.NaN, vector1D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01D);
      
      Vector3D vector3D1 = line0.toSpace((Vector<Euclidean1D>) vector1D0);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertNotNull(vector3D1);
      assertEquals(true, vector3D1.isNaN());
      assertEquals(Double.NaN, vector3D1.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNorm1(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(Double.NaN, vector3D1.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector1D0.getNormInf(), 0.01D);
      assertEquals(true, vector1D0.isNaN());
      assertEquals(Double.NaN, vector1D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector1D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector1D0.getNorm1(), 0.01D);
      assertEquals(false, vector1D0.isInfinite());
      assertEquals(Double.NaN, vector1D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
  }
}
