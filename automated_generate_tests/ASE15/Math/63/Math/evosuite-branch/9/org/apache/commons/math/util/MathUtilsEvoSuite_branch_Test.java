/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:58:50 GMT 2014
 */

package org.apache.commons.math.util;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.BigInteger;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.exception.NonMonotonousSequenceException;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockArithmeticException;
import org.junit.runner.RunWith;


public class MathUtilsEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      int int0 = 210;
      double double0 = MathUtils.factorialDouble(int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = double0;
      doubleArray0[5] = doubleArray0[1];
      double double1 = MathUtils.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertArrayEquals(new double[] {0.0, Double.POSITIVE_INFINITY, 0.0, 0.0, 0.0, Double.POSITIVE_INFINITY, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test001()  throws Throwable  {
      double double0 = 1.9699272335463627E-8;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = double0;
      double double1 = MathUtils.safeNorm(doubleArray0);
      assertEquals(1.9699272335463627E-8, double1, 0.01D);
      assertTrue(double1 == double0);
      assertArrayEquals(new double[] {1.9699272335463627E-8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = MathUtils.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      int int0 = (-2518);
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray0[4] = (double) int0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try {
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 4 and 5 are not decreasing (-2,518 < 0)
         //
      }
  }

  @Test
  public void test004()  throws Throwable  {
      double double0 = 1.9699272335463627E-8;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = double0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      boolean boolean0 = true;
      // Undeclared exception!
      try {
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 0)
         //
      }
  }

  @Test
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      int int0 = 21;
      int int1 = MathUtils.pow(int0, int0);
      assertEquals(878082373, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      doubleArray0[1] = (double) int1;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0[5], (double) int1, doubleArray0[4]);
      assertFalse(boolean0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {0.0, 8.78082373E8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try {
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (878,082,373 > 0)
         //
      }
  }

  @Test
  public void test007()  throws Throwable  {
      int int0 = 931;
      int int1 = MathUtils.pow(int0, int0);
      assertEquals((-866761861), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) int1;
      MathUtils.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {(-8.66761861E8), 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test008()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
  }

  @Test
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test010()  throws Throwable  {
      int[] intArray0 = new int[1];
      double double0 = MathUtils.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test012()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = MathUtils.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
  }

  @Test
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test014()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals(10, bigInteger0.byteValue());
      assertEquals(10, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger0, bigInteger1);
      assertEquals(0, bigInteger1.byteValue());
      assertEquals(-7168, bigInteger1.shortValue());
      assertEquals(10, bigInteger0.byteValue());
      assertEquals(10, bigInteger0.shortValue());
  }

  @Test
  public void test015()  throws Throwable  {
      int int0 = 2449;
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals(10, bigInteger0.byteValue());
      assertEquals(10, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) int0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger0, bigInteger1);
      assertEquals(0, bigInteger1.byteValue());
      assertEquals(0, bigInteger1.shortValue());
      assertEquals(10, bigInteger0.byteValue());
      assertEquals(10, bigInteger0.shortValue());
  }

  @Test
  public void test016()  throws Throwable  {
      int int0 = 138;
      int int1 = MathUtils.sign(int0);
      assertEquals(1, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      byte[] byteArray0 = new byte[7];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, bigInteger0.shortValue());
      assertEquals(0, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) int1);
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(bigInteger1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger0, bigInteger1);
      assertEquals(0, bigInteger1.shortValue());
      assertEquals(0, bigInteger1.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      assertEquals(0, bigInteger0.byteValue());
  }

  @Test
  public void test017()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      
      int int0 = 0;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, int0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      assertEquals(1, bigInteger1.byteValue());
      assertEquals(1, bigInteger1.shortValue());
  }

  @Test
  public void test018()  throws Throwable  {
      int int0 = 138;
      long long0 = MathUtils.pow((long) int0, (long) int0);
      assertEquals(0L, long0);
  }

  @Test
  public void test019()  throws Throwable  {
      long long0 = 0L;
      long long1 = (-9223372036854775808L);
      try {
        long long2 = MathUtils.pow(long0, long1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-9,223,372,036,854,775,808)
         //
      }
  }

  @Test
  public void test020()  throws Throwable  {
      double double0 = 0.0;
      int int0 = MathUtils.hash(double0);
      assertEquals(0, int0);
      
      long long0 = MathUtils.pow((long) int0, (long) int0);
      assertEquals(1L, long0);
  }

  @Test
  public void test021()  throws Throwable  {
      short short0 = (short) (-2517);
      try {
        long long0 = MathUtils.pow((long) short0, (int) short0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,517^-2,517)
         //
      }
  }

  @Test
  public void test022()  throws Throwable  {
      int int0 = 167;
      int int1 = MathUtils.pow(int0, (long) int0);
      assertEquals(425933911, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test023()  throws Throwable  {
      long long0 = 201L;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) long0;
      int int0 = MathUtils.hash(doubleArray0);
      assertEquals((-860167231), int0);
      assertArrayEquals(new double[] {201.0, 0.0}, doubleArray0, 0.01);
      
      try {
        int int1 = MathUtils.pow(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-860,167,231^-860,167,231)
         //
      }
  }

  @Test
  public void test024()  throws Throwable  {
      int int0 = 0;
      long long0 = (-9223372036854775808L);
      // Undeclared exception!
      try {
        long long1 = MathUtils.subAndCheck((long) int0, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: subtract
         //
      }
  }

  @Test
  public void test025()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      long long1 = MathUtils.subAndCheck(long0, long0);
      assertEquals(0L, long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test
  public void test026()  throws Throwable  {
      int int0 = 0;
      short short0 = (short)46;
      int int1 = MathUtils.subAndCheck((int) short0, int0);
      assertEquals(46, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test027()  throws Throwable  {
      short short0 = (short)46;
      short short1 = MathUtils.sign(short0);
      assertEquals((short)1, short1);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
  }

  @Test
  public void test028()  throws Throwable  {
      short short0 = (short)0;
      short short1 = MathUtils.sign(short0);
      assertEquals((short)0, short1);
      assertTrue(short1 == short0);
      assertTrue(short0 == short1);
  }

  @Test
  public void test029()  throws Throwable  {
      short short0 = (short) (-787);
      short short1 = MathUtils.sign(short0);
      assertEquals((short) (-1), short1);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
  }

  @Test
  public void test030()  throws Throwable  {
      long long0 = (-22L);
      long long1 = MathUtils.sign(long0);
      assertEquals((-1L), long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
  }

  @Test
  public void test031()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.sign(long0);
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
  }

  @Test
  public void test032()  throws Throwable  {
      int int0 = 2321;
      long long0 = MathUtils.sign((long) int0);
      assertEquals(1L, long0);
  }

  @Test
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      int int0 = MathUtils.hash(doubleArray0);
      assertEquals((-1796951359), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int1 = MathUtils.sign(int0);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      int int0 = MathUtils.hash(doubleArray0);
      assertEquals((-1796951359), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float float0 = MathUtils.sign((float) int0);
      assertEquals((-1.0F), float0, 0.01F);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test035()  throws Throwable  {
      long long0 = 2228L;
      float float0 = MathUtils.sign((float) long0);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test
  public void test036()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.lcm(long0, long0);
      assertEquals(0L, long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      
      float float0 = MathUtils.sign((float) long1);
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
  }

  @Test
  public void test037()  throws Throwable  {
      int int0 = (-140);
      int int1 = MathUtils.addAndCheck(int0, int0);
      assertEquals((-280), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      double double0 = MathUtils.sign((double) int1);
      assertEquals((-1.0), double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test038()  throws Throwable  {
      int int0 = 167;
      double double0 = MathUtils.sign((double) int0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test039()  throws Throwable  {
      double double0 = 0.0;
      double double1 = MathUtils.sign(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test040()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.sign(byte0);
      assertEquals((byte)0, byte1);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
  }

  @Test
  public void test041()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.lcm(long0, long0);
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      int int0 = 931;
      float float0 = MathUtils.round((float) long1, int0);
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
  }

  @Test
  public void test042()  throws Throwable  {
      int int0 = 5;
      byte byte0 = (byte) (-21);
      byte byte1 = MathUtils.sign(byte0);
      assertEquals((byte) (-1), byte1);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      
      float float0 = MathUtils.round((float) int0, (int) byte1, int0);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
  }

  @Test
  public void test043()  throws Throwable  {
      double double0 = 0.1666666505023083;
      int int0 = MathUtils.hash(double0);
      assertEquals(224114550, int0);
      
      int int1 = 0;
      assertFalse(int1 == int0);
      
      float float0 = MathUtils.round((float) int0, int1, int1);
      assertEquals(2.24114544E8F, float0, 0.01F);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test044()  throws Throwable  {
      double double0 = 1381.4223609;
      double double1 = MathUtils.sinh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int0 = 0;
      double double2 = MathUtils.round(double1, int0, int0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test045()  throws Throwable  {
      int int0 = 0;
      double double0 = Double.NaN;
      double double1 = MathUtils.round(double0, int0, int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertTrue(double0 == double1);
  }

  @Test
  public void test046()  throws Throwable  {
      byte byte0 = (byte) (-123);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) byte0;
      double double0 = Double.NaN;
      doubleArray0[1] = double0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (double) byte0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-123.0), Double.NaN, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-123.0), Double.NaN, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test
  public void test047()  throws Throwable  {
      byte byte0 = (byte) (-123);
      double[] doubleArray0 = new double[3];
      double double0 = Double.NaN;
      doubleArray0[1] = double0;
      try {
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (double) byte0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
      }
  }

  @Test
  public void test048()  throws Throwable  {
      int int0 = 66;
      int int1 = MathUtils.mulAndCheck(int0, int0);
      assertEquals(4356, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      double double0 = MathUtils.scalb((double) int1, int0);
      assertEquals(3.214160687403152E23, double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test049()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.mulAndCheck(long0, long0);
      assertEquals(0L, long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      
      int int0 = 218;
      double double0 = MathUtils.scalb((double) long1, int0);
      assertEquals(0.0, double0, 0.01D);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
  }

  @Test
  public void test050()  throws Throwable  {
      int int0 = 0;
      int int1 = 2314;
      long long0 = MathUtils.pow((long) int0, int1);
      assertEquals(0L, long0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      long long1 = MathUtils.mulAndCheck(long0, long0);
      assertEquals(0L, long1);
      assertFalse(int0 == int1);
      assertTrue(long1 == long0);
      assertFalse(int1 == int0);
      assertTrue(long0 == long1);
  }

  @Test
  public void test051()  throws Throwable  {
      int int0 = 138;
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-94);
      byteArray0[0] = byte0;
      byteArray0[1] = byteArray0[0];
      long long0 = MathUtils.mulAndCheck((long) byteArray0[1], (long) int0);
      assertEquals((-12972L), long0);
      assertArrayEquals(new byte[] {(byte) (-94), (byte) (-94), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test052()  throws Throwable  {
      long long0 = (-4267615245585081135L);
      // Undeclared exception!
      try {
        long long1 = MathUtils.mulAndCheck(long0, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
      }
  }

  @Test
  public void test053()  throws Throwable  {
      byte byte0 = (byte) (-123);
      long long0 = 0L;
      long long1 = MathUtils.mulAndCheck(long0, (long) byte0);
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
  }

  @Test
  public void test054()  throws Throwable  {
      long long0 = 3167L;
      long long1 = 0L;
      long long2 = MathUtils.lcm(long0, long1);
      assertEquals(0L, long2);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long1 == long0);
      assertTrue(long1 == long2);
  }

  @Test
  public void test055()  throws Throwable  {
      double double0 = 0.0;
      int int0 = MathUtils.hash(double0);
      assertEquals(0, int0);
      
      int int1 = MathUtils.pow(int0, int0);
      assertEquals(1, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      int int2 = MathUtils.lcm(int1, int0);
      assertEquals(0, int2);
      assertFalse(int0 == int1);
      assertTrue(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test
  public void test056()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.lcm(int0, int0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test057()  throws Throwable  {
      short short0 = (short)46;
      short short1 = MathUtils.indicator(short0);
      assertEquals((short)1, short1);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
  }

  @Test
  public void test058()  throws Throwable  {
      short short0 = (short) (-418);
      short short1 = MathUtils.indicator(short0);
      assertEquals((short) (-1), short1);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
  }

  @Test
  public void test059()  throws Throwable  {
      byte byte0 = (byte) (-123);
      long long0 = MathUtils.mulAndCheck((long) byte0, (long) byte0);
      assertEquals(15129L, long0);
      
      long long1 = MathUtils.indicator(long0);
      assertEquals(1L, long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
  }

  @Test
  public void test060()  throws Throwable  {
      long long0 = (-82L);
      long long1 = MathUtils.indicator(long0);
      assertEquals((-1L), long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
  }

  @Test
  public void test061()  throws Throwable  {
      int int0 = 3475;
      int int1 = MathUtils.indicator(int0);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test062()  throws Throwable  {
      int int0 = (-423);
      int int1 = MathUtils.indicator(int0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test063()  throws Throwable  {
      int int0 = 0;
      float float0 = (-546.43F);
      float float1 = MathUtils.round(float0, int0);
      assertEquals((-546.0F), float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test064()  throws Throwable  {
      float float0 = Float.NaN;
      float float1 = MathUtils.indicator(float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
  }

  @Test
  public void test065()  throws Throwable  {
      float float0 = (-546.43F);
      double double0 = MathUtils.indicator((double) float0);
      assertEquals((-1.0), double0, 0.01D);
  }

  @Test
  public void test066()  throws Throwable  {
      long long0 = 0L;
      double double0 = MathUtils.indicator((double) long0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test067()  throws Throwable  {
      int int0 = 66;
      long long0 = (-241L);
      long long1 = MathUtils.gcd((long) int0, long0);
      assertEquals(1L, long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
  }

  @Test
  public void test068()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      // Undeclared exception!
      try {
        long long1 = MathUtils.gcd(long0, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: gcd(-9,223,372,036,854,775,808, -9,223,372,036,854,775,808) is 2^63
         //
      }
  }

  @Test
  public void test069()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.indicator(byte0);
      assertEquals((byte)1, byte1);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      
      long long0 = MathUtils.lcm((long) byte1, (long) byte1);
      assertEquals(1L, long0);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
  }

  @Test
  public void test070()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.sign(int0);
      assertEquals(0, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      long long0 = (-1L);
      long long1 = MathUtils.gcd(long0, (long) int1);
      assertEquals(1L, long1);
      assertFalse(long1 == long0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertFalse(long0 == long1);
  }

  @Test
  public void test071()  throws Throwable  {
      int int0 = (-3317);
      int int1 = MathUtils.gcd(int0, int0);
      assertEquals(3317, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      long long0 = MathUtils.gcd((long) int0, (long) int1);
      assertEquals(3317L, long0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test072()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.lcm(long0, long0);
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      long long2 = MathUtils.gcd(long1, long1);
      assertEquals(0L, long2);
      assertTrue(long1 == long2);
      assertTrue(long1 == long0);
      assertTrue(long0 == long2);
      assertTrue(long0 == long1);
      assertTrue(long2 == long1);
      assertTrue(long2 == long0);
  }

  @Test
  public void test073()  throws Throwable  {
      int int0 = (-3002);
      int int1 = MathUtils.lcm(int0, int0);
      assertEquals(3002, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test074()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.gcd(int0, int0);
      assertEquals(0, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test075()  throws Throwable  {
      int int0 = 210;
      double double0 = MathUtils.factorialDouble(int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      int int1 = MathUtils.compareTo((double) int0, (double) int0, double0);
      assertEquals(0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      double double1 = MathUtils.factorialLog(int1);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(int0 == int1);
      assertFalse(double1 == double0);
      assertFalse(int1 == int0);
  }

  @Test
  public void test076()  throws Throwable  {
      int int0 = (-5063);
      // Undeclared exception!
      try {
        double double0 = MathUtils.factorialDouble(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -5,063
         //
      }
  }

  @Test
  public void test077()  throws Throwable  {
      int int0 = 653;
      // Undeclared exception!
      try {
        long long0 = MathUtils.factorial(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
      }
  }

  @Test
  public void test078()  throws Throwable  {
      short short0 = (short) (-787);
      // Undeclared exception!
      try {
        long long0 = MathUtils.factorial((int) short0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -787
         //
      }
  }

  @Test
  public void test079()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.factorialDouble(int0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test081()  throws Throwable  {
      int int0 = 210;
      double double0 = MathUtils.factorialDouble(int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      int int1 = MathUtils.compareTo(double0, (double) int0, double0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      boolean boolean0 = MathUtils.equalsIncludingNaN(double0, (double) int1, int0);
      assertFalse(boolean0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test082()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 66;
      boolean boolean0 = MathUtils.equalsIncludingNaN(double0, double0, int0);
      assertTrue(boolean0);
  }

  @Test
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = Double.NaN;
      doubleArray0[4] = double0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test084()  throws Throwable  {
      double double0 = 57.2957763671875;
      int int0 = (-3002);
      // Undeclared exception!
      try {
        boolean boolean0 = MathUtils.equals(double0, double0, int0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test085()  throws Throwable  {
      byte byte0 = (byte) (-123);
      double[] doubleArray0 = new double[3];
      double double0 = Double.NaN;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0[1], (double) byte0, double0);
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test086()  throws Throwable  {
      byte byte0 = (byte) (-123);
      byte byte1 = MathUtils.indicator(byte0);
      assertEquals((byte) (-1), byte1);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) byte1, (double) byte0, (double) byte0);
      assertFalse(boolean0);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
  }

  @Test
  public void test087()  throws Throwable  {
      float float0 = Float.NaN;
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = (double) float0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test088()  throws Throwable  {
      byte byte0 = (byte) (-123);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) byte0, (double) byte0, (double) byte0);
      assertTrue(boolean0);
  }

  @Test
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 0.1666666505023083;
      int int0 = MathUtils.hash(double0);
      assertEquals(224114550, int0);
      
      doubleArray0[1] = (double) int0;
      int int1 = 0;
      assertFalse(int1 == int0);
      
      int int2 = MathUtils.compareTo(doubleArray0[1], (double) int1, (double) int1);
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {0.0, 2.2411455E8, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test090()  throws Throwable  {
      double double0 = 0.0;
      long long0 = 0L;
      short short0 = (short)11;
      int int0 = MathUtils.compareTo(double0, (double) short0, (double) long0);
      assertEquals((-1), int0);
  }

  @Test
  public void test091()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = 218;
      // Undeclared exception!
      try {
        double double0 = MathUtils.binomialCoefficientDouble(intArray0[0], int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 218
         //
      }
  }

  @Test
  public void test092()  throws Throwable  {
      int int0 = 241;
      int int1 = 96;
      double double0 = MathUtils.binomialCoefficientLog(int0, int1);
      assertEquals(159.08406392306787, double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test093()  throws Throwable  {
      int int0 = 1748;
      int int1 = 332;
      double double0 = MathUtils.binomialCoefficientLog(int0, int1);
      assertEquals(846.0272641828808, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test094()  throws Throwable  {
      byte byte0 = (byte)48;
      byte byte1 = MathUtils.sign(byte0);
      assertEquals((byte)1, byte1);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      
      double double0 = MathUtils.binomialCoefficientLog((int) byte0, (int) byte1);
      assertEquals(3.871201010907891, double0, 0.01D);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
  }

  @Test
  public void test095()  throws Throwable  {
      byte byte0 = (byte)0;
      double double0 = MathUtils.binomialCoefficientLog((int) byte0, (int) byte0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test096()  throws Throwable  {
      int int0 = 2321;
      int int1 = 1303;
      double double0 = MathUtils.binomialCoefficientDouble(int0, int1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test097()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.binomialCoefficientDouble(int0, int0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test098()  throws Throwable  {
      int int0 = 63;
      int int1 = (-1120);
      double double0 = MathUtils.binomialCoefficientLog(int0, int1);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test099()  throws Throwable  {
      int int0 = 2;
      int int1 = 40;
      double double0 = MathUtils.binomialCoefficientDouble(int1, int0);
      assertEquals(780.0, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test100()  throws Throwable  {
      int int0 = 140;
      int int1 = 109;
      // Undeclared exception!
      try {
        long long0 = MathUtils.binomialCoefficient(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
      }
  }

  @Test
  public void test101()  throws Throwable  {
      int int0 = 204;
      int int1 = 0;
      long long0 = MathUtils.binomialCoefficient(int0, int1);
      assertEquals(1L, long0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test102()  throws Throwable  {
      int int0 = 2682;
      long long0 = MathUtils.binomialCoefficient(int0, int0);
      assertEquals(1L, long0);
  }

  @Test
  public void test103()  throws Throwable  {
      int int0 = (-3317);
      long long0 = MathUtils.addAndCheck((long) int0, (long) int0);
      assertEquals((-6634L), long0);
  }

  @Test
  public void test104()  throws Throwable  {
      long long0 = 201L;
      long long1 = MathUtils.subAndCheck(long0, long0);
      assertEquals(0L, long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
  }

  @Test
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 0.0;
      int int0 = MathUtils.hash(double0);
      assertEquals(0, int0);
      
      double double1 = MathUtils.round(doubleArray0[3], int0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test106()  throws Throwable  {
      byte byte0 = (byte) (-123);
      double double0 = MathUtils.cosh((double) byte0);
      assertEquals(1.3097586593745313E53, double0, 0.01D);
  }

  @Test
  public void test107()  throws Throwable  {
      int int0 = (-3317);
      double double0 = MathUtils.log((double) int0, (double) int0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try {
        MathUtils.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
      }
  }

  @Test
  public void test109()  throws Throwable  {
      int int0 = (-3317);
      double double0 = MathUtils.normalizeAngle((double) int0, (double) int0);
      assertEquals((-3317.0), double0, 0.01D);
  }

  @Test
  public void test110()  throws Throwable  {
      int int0 = (-3317);
      int int1 = 204;
      long long0 = MathUtils.binomialCoefficient(int1, int0);
      assertEquals(1L, long0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      long long1 = MathUtils.addAndCheck(long0, long0);
      assertEquals(2L, long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }
}
