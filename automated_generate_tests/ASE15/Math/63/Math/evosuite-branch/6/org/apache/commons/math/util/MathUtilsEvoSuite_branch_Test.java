/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:16:38 GMT 2014
 */

package org.apache.commons.math.util;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.BigInteger;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.exception.NonMonotonousSequenceException;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockArithmeticException;
import org.junit.runner.RunWith;


public class MathUtilsEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      long long0 = (-3512299194304650054L);
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = (double) long0;
      doubleArray0[4] = (double) long0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      assertEquals(4.9671411556977316E18, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, (-3.5122991943046502E18), 0.0, (-3.5122991943046502E18)}, doubleArray0, 0.01);
  }

  @Test
  public void test001()  throws Throwable  {
      double double0 = 924.815;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = double0;
      double double1 = MathUtils.safeNorm(doubleArray0);
      assertTrue(double1 == double0);
      assertEquals(924.815, double1, 0.01D);
      assertArrayEquals(new double[] {924.815, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathUtils.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test003()  throws Throwable  {
      int int0 = 1742;
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) int0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      boolean boolean0 = false;
      // Undeclared exception!
      try {
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (0 < 1,742)
         //
      }
  }

  @Test
  public void test004()  throws Throwable  {
      int int0 = 9;
      int int1 = MathUtils.mulAndCheck(int0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(81, int1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) int1;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      boolean boolean0 = true;
      // Undeclared exception!
      try {
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 0)
         //
      }
  }

  @Test
  public void test005()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 0.031;
      boolean boolean0 = MathUtils.equalsIncludingNaN(double0, double1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(boolean0);
      
      int int0 = 2860;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) int0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try {
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (2,860 > 0)
         //
      }
  }

  @Test
  public void test006()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 0.031;
      boolean boolean0 = MathUtils.equalsIncludingNaN(double0, double1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[2];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, boolean0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      boolean boolean0 = false;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test008()  throws Throwable  {
      int int0 = 3;
      int int1 = MathUtils.lcm(int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(3, int1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) int1;
      MathUtils.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {0.0, 3.0}, doubleArray0, 0.01);
  }

  @Test
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test010()  throws Throwable  {
      int[] intArray0 = new int[2];
      double double0 = MathUtils.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test
  public void test011()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = MathUtils.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test013()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals(10, bigInteger0.byteValue());
      assertEquals(10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals(10, bigInteger0.byteValue());
      assertEquals(10, bigInteger0.shortValue());
      assertEquals(-7168, bigInteger1.shortValue());
      assertEquals(0, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
  }

  @Test
  public void test014()  throws Throwable  {
      int int0 = (-546);
      byte[] byteArray0 = new byte[2];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(0, bigInteger0.shortValue());
      assertEquals(0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      try {
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-546)
         //
      }
  }

  @Test
  public void test015()  throws Throwable  {
      int int0 = 10;
      byte[] byteArray0 = new byte[6];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) int0);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger0, bigInteger1);
      assertEquals(0, bigInteger1.byteValue());
      assertEquals(0, bigInteger1.shortValue());
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      assertNotNull(bigInteger1);
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test016()  throws Throwable  {
      int int0 = (-2730);
      byte[] byteArray0 = new byte[8];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(0, bigInteger0.shortValue());
      assertEquals(0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try {
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-2,730)
         //
      }
  }

  @Test
  public void test017()  throws Throwable  {
      byte byte0 = (byte)0;
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals(0, bigInteger0.shortValue());
      assertEquals(0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (int) byte0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals(0, bigInteger0.shortValue());
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(1, bigInteger1.shortValue());
      assertEquals(1, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
  }

  @Test
  public void test018()  throws Throwable  {
      long long0 = (-4435L);
      try {
        long long1 = MathUtils.pow(long0, long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-4,435^-4,435)
         //
      }
  }

  @Test
  public void test019()  throws Throwable  {
      int int0 = 10;
      byte[] byteArray0 = new byte[6];
      long long0 = MathUtils.pow((long) byteArray0[1], int0);
      assertEquals(0L, long0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test020()  throws Throwable  {
      long long0 = (-688L);
      int[] intArray0 = new int[5];
      int int0 = (-262);
      intArray0[0] = int0;
      try {
        long long1 = MathUtils.pow(long0, intArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-688^-262)
         //
      }
  }

  @Test
  public void test021()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.lcm(int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0, int1);
      
      long long0 = MathUtils.pow((long) int1, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(1L, long0);
  }

  @Test
  public void test022()  throws Throwable  {
      int int0 = (-465);
      try {
        int int1 = MathUtils.pow(int0, (long) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-465^-465)
         //
      }
  }

  @Test
  public void test023()  throws Throwable  {
      byte byte0 = (byte) (-122);
      byte byte1 = MathUtils.indicator(byte0);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals((byte) (-1), byte1);
      
      byte byte2 = (byte)65;
      assertFalse(byte2 == byte1);
      
      long long0 = MathUtils.pow((long) byte2, (long) byte2);
      assertFalse(byte2 == byte0);
      assertFalse(byte2 == byte1);
      assertEquals(7437354637604294721L, long0);
      
      int int0 = MathUtils.pow((int) byte1, long0);
      assertFalse(byte1 == byte0);
      assertFalse(byte1 == byte2);
      assertFalse(byte2 == byte0);
      assertFalse(byte2 == byte1);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertEquals((-1), int0);
  }

  @Test
  public void test024()  throws Throwable  {
      int int0 = (-1034);
      try {
        int int1 = MathUtils.pow(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,034^-1,034)
         //
      }
  }

  @Test
  public void test025()  throws Throwable  {
      byte byte0 = (byte)65;
      int int0 = MathUtils.pow((int) byte0, (int) byte0);
      assertEquals(1526861889, int0);
  }

  @Test
  public void test026()  throws Throwable  {
      short short0 = (short)5327;
      short short1 = MathUtils.sign(short0);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertEquals((short)1, short1);
      
      int int0 = MathUtils.subAndCheck((int) short1, (int) short1);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertEquals(0, int0);
  }

  @Test
  public void test027()  throws Throwable  {
      int int0 = 1391;
      int int1 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        int int2 = MathUtils.subAndCheck(int1, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in subtraction: -2,147,483,648 - 1,391
         //
      }
  }

  @Test
  public void test028()  throws Throwable  {
      short short0 = (short) (-944);
      short short1 = MathUtils.sign(short0);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertEquals((short) (-1), short1);
  }

  @Test
  public void test029()  throws Throwable  {
      short short0 = (short)0;
      short short1 = MathUtils.sign(short0);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
      assertEquals((short)0, short1);
  }

  @Test
  public void test030()  throws Throwable  {
      short short0 = (short)757;
      short short1 = MathUtils.sign(short0);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertEquals((short)1, short1);
      
      long long0 = MathUtils.sign((long) short1);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertEquals(1L, long0);
  }

  @Test
  public void test031()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.addAndCheck(int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0, int1);
      
      long long0 = MathUtils.sign((long) int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0L, long0);
  }

  @Test
  public void test032()  throws Throwable  {
      double double0 = (-2519.84629598715);
      int int0 = MathUtils.hash(double0);
      assertEquals((-1927903066), int0);
      
      long long0 = MathUtils.sign((long) int0);
      assertEquals((-1L), long0);
  }

  @Test
  public void test033()  throws Throwable  {
      byte byte0 = (byte)65;
      int int0 = MathUtils.sign((int) byte0);
      assertEquals(1, int0);
  }

  @Test
  public void test034()  throws Throwable  {
      byte byte0 = (byte) (-122);
      byte byte1 = MathUtils.indicator(byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertEquals((byte) (-1), byte1);
      
      int int0 = MathUtils.sign((int) byte1);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertEquals((-1), int0);
  }

  @Test
  public void test035()  throws Throwable  {
      float float0 = (-1.0F);
      float float1 = MathUtils.sign(float0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals((-1.0F), float1, 0.01F);
  }

  @Test
  public void test036()  throws Throwable  {
      int int0 = 3;
      float float0 = MathUtils.sign((float) int0);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test
  public void test037()  throws Throwable  {
      float float0 = Float.NaN;
      float float1 = MathUtils.sign(float0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test
  public void test038()  throws Throwable  {
      int int0 = 0;
      float float0 = MathUtils.sign((float) int0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test039()  throws Throwable  {
      double double0 = (-2519.84629598715);
      double double1 = MathUtils.sign(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1.0), double1, 0.01D);
  }

  @Test
  public void test040()  throws Throwable  {
      int int0 = 3;
      double double0 = MathUtils.sign((double) int0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test041()  throws Throwable  {
      byte byte0 = (byte) (-47);
      byte byte1 = MathUtils.sign(byte0);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals((byte) (-1), byte1);
  }

  @Test
  public void test042()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.sign(byte0);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      assertEquals((byte)0, byte1);
  }

  @Test
  public void test043()  throws Throwable  {
      long long0 = 366L;
      int int0 = 3;
      float float0 = MathUtils.round((float) long0, int0, int0);
      assertEquals(365.999F, float0, 0.01F);
  }

  @Test
  public void test044()  throws Throwable  {
      byte byte0 = (byte) (-122);
      byte byte1 = MathUtils.indicator(byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertEquals((byte) (-1), byte1);
      
      int int0 = 3;
      float float0 = MathUtils.round((float) byte1, int0, int0);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertEquals((-1.001F), float0, 0.01F);
  }

  @Test
  public void test045()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = 1;
      float float0 = MathUtils.round((float) intArray0[0], intArray0[1], int0);
      assertEquals((-1.0F), float0, 0.01F);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test
  public void test046()  throws Throwable  {
      double double0 = 0.0;
      double double1 = MathUtils.sign(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
      
      int int0 = 198;
      int[] intArray0 = new int[1];
      intArray0[0] = int0;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new int[] {198}, intArray0);
      
      int int2 = MathUtils.mulAndCheck(intArray0[0], int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(39204, int2);
      assertArrayEquals(new int[] {198}, intArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) intArray0[0];
      float float0 = MathUtils.round((float) int2, intArray0[0], int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(Float.NaN, float0, 0.01F);
      assertArrayEquals(new int[] {198}, intArray0);
      
      doubleArray0[4] = (double) float0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, double1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(double1 == double0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(double0 == double1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 198.0, 0.0, 0.0, Double.NaN}, doubleArray0, 0.01);
  }

  @Test
  public void test047()  throws Throwable  {
      int int0 = 198;
      int[] intArray0 = new int[1];
      intArray0[0] = int0;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new int[] {198}, intArray0);
      
      double[] doubleArray0 = new double[5];
      float float0 = MathUtils.round((float) intArray0[0], intArray0[0], int1);
      assertFalse(int1 == int0);
      assertEquals(Float.NaN, float0, 0.01F);
      assertArrayEquals(new int[] {198}, intArray0);
      
      doubleArray0[4] = (double) float0;
      try {
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (double) int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
      }
  }

  @Test
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = double0;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      assertFalse(double1 == double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.NEGATIVE_INFINITY, 0.0, 0.0}, doubleArray0, 0.01);
      
      try {
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, double1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
      }
  }

  @Test
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = Double.NEGATIVE_INFINITY;
      try {
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
      }
  }

  @Test
  public void test050()  throws Throwable  {
      byte byte0 = (byte) (-122);
      byte byte1 = MathUtils.indicator(byte0);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals((byte) (-1), byte1);
      
      double double0 = MathUtils.scalb((double) byte1, (int) byte1);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals((-0.5), double0, 0.01D);
  }

  @Test
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 0.0;
      int int0 = MathUtils.compareTo(double0, double0, double0);
      assertEquals(0, int0);
      
      double double1 = MathUtils.scalb(doubleArray0[2], int0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test052()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.addAndCheck(int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      long long0 = MathUtils.mulAndCheck((long) int0, (long) int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0L, long0);
  }

  @Test
  public void test053()  throws Throwable  {
      byte byte0 = (byte)0;
      long long0 = (-666L);
      long long1 = MathUtils.mulAndCheck((long) byte0, long0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(0L, long1);
  }

  @Test
  public void test054()  throws Throwable  {
      short short0 = (short) (-1056);
      long long0 = MathUtils.lcm((long) short0, (long) short0);
      assertEquals(1056L, long0);
  }

  @Test
  public void test055()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.indicator(byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertEquals((byte)1, byte1);
      
      long long0 = (-666L);
      long long1 = MathUtils.mulAndCheck((long) byte1, long0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertEquals((-666L), long1);
  }

  @Test
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      int int0 = MathUtils.hash(doubleArray0);
      assertEquals((-196513505), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int1 = 925;
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try {
        int int2 = MathUtils.lcm(int1, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
      }
  }

  @Test
  public void test057()  throws Throwable  {
      int int0 = 3;
      int[] intArray0 = new int[2];
      long long0 = MathUtils.lcm((long) int0, (long) intArray0[1]);
      assertEquals(0L, long0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test
  public void test058()  throws Throwable  {
      int int0 = 3;
      int[] intArray0 = new int[2];
      long long0 = MathUtils.lcm((long) intArray0[1], (long) int0);
      assertEquals(0L, long0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test
  public void test059()  throws Throwable  {
      int int0 = (-2330);
      int int1 = 0;
      int int2 = MathUtils.lcm(int0, int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
  }

  @Test
  public void test060()  throws Throwable  {
      short short0 = (short)0;
      short short1 = MathUtils.indicator(short0);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      assertEquals((short)1, short1);
  }

  @Test
  public void test061()  throws Throwable  {
      short short0 = (short) (-3339);
      short short1 = MathUtils.indicator(short0);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertEquals((short) (-1), short1);
  }

  @Test
  public void test062()  throws Throwable  {
      int int0 = 9;
      int int1 = MathUtils.mulAndCheck(int0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(81, int1);
      
      long long0 = MathUtils.indicator((long) int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1L, long0);
  }

  @Test
  public void test063()  throws Throwable  {
      short short0 = (short) (-3339);
      long long0 = MathUtils.indicator((long) short0);
      assertEquals((-1L), long0);
  }

  @Test
  public void test064()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.indicator(int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
  }

  @Test
  public void test065()  throws Throwable  {
      short short0 = (short) (-3339);
      int int0 = MathUtils.indicator((int) short0);
      assertEquals((-1), int0);
  }

  @Test
  public void test066()  throws Throwable  {
      byte byte0 = (byte) (-122);
      long long0 = 366L;
      // Undeclared exception!
      try {
        float float0 = MathUtils.round((float) long0, (int) byte0, (int) byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -122, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
      }
  }

  @Test
  public void test067()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.sign(int0);
      //  // Unstable assertion: assertTrue(int0 == int1);
      //  // Unstable assertion: assertTrue(int1 == int0);
      //  // Unstable assertion: assertEquals(0, int1);
      
      float float0 = Float.NaN;
      float float1 = MathUtils.round(float0, int1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(int0 == int1);
      //  // Unstable assertion: assertTrue(int1 == int0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test
  public void test068()  throws Throwable  {
      byte byte0 = (byte)65;
      double double0 = MathUtils.indicator((double) byte0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test069()  throws Throwable  {
      byte byte0 = (byte) (-122);
      double double0 = MathUtils.indicator((double) byte0);
      assertEquals((-1.0), double0, 0.01D);
  }

  @Test
  public void test070()  throws Throwable  {
      long long0 = (-3512299194304650054L);
      long long1 = 4503599627370495L;
      long long2 = MathUtils.subAndCheck(long0, long1);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertEquals((-3516802793932020549L), long2);
      
      // Undeclared exception!
      try {
        long long3 = MathUtils.lcm(long0, long2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
      }
  }

  @Test
  public void test071()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      // Undeclared exception!
      try {
        long long1 = MathUtils.lcm(long0, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: gcd(-9,223,372,036,854,775,808, -9,223,372,036,854,775,808) is 2^63
         //
      }
  }

  @Test
  public void test072()  throws Throwable  {
      int int0 = (-1034);
      long long0 = 0L;
      long long1 = MathUtils.gcd((long) int0, long0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(1034L, long1);
  }

  @Test
  public void test073()  throws Throwable  {
      byte byte0 = (byte)6;
      long long0 = MathUtils.lcm((long) byte0, (long) byte0);
      assertEquals(6L, long0);
  }

  @Test
  public void test074()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.gcd(long0, long0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals(0L, long1);
  }

  @Test
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      int int0 = MathUtils.hash(doubleArray0);
      assertEquals((-196513505), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int1 = MathUtils.lcm(int0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(196513505, int1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test076()  throws Throwable  {
      int int0 = 78;
      int int1 = (-1804);
      int int2 = MathUtils.gcd(int1, int0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(2, int2);
  }

  @Test
  public void test077()  throws Throwable  {
      int int0 = (-262);
      int int1 = 0;
      int int2 = MathUtils.gcd(int0, int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(262, int2);
  }

  @Test
  public void test078()  throws Throwable  {
      byte byte0 = (byte)33;
      byte byte1 = MathUtils.sign(byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertEquals((byte)1, byte1);
      
      int int0 = 0;
      int int1 = MathUtils.gcd(int0, (int) byte1);
      assertFalse(byte0 == byte1);
      assertFalse(int0 == int1);
      assertFalse(byte1 == byte0);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
  }

  @Test
  public void test079()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.factorialLog(int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test080()  throws Throwable  {
      int int0 = (-1970);
      // Undeclared exception!
      try {
        double double0 = MathUtils.factorialLog(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,970
         //
      }
  }

  @Test
  public void test081()  throws Throwable  {
      int int0 = 78;
      double double0 = MathUtils.factorialDouble(int0);
      assertEquals(1.1324281178206682E115, double0, 0.01D);
  }

  @Test
  public void test082()  throws Throwable  {
      int int0 = (-4505);
      // Undeclared exception!
      try {
        double double0 = MathUtils.factorialDouble(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -4,505
         //
      }
  }

  @Test
  public void test083()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.sign(int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      double double0 = MathUtils.factorialDouble(int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test084()  throws Throwable  {
      int int0 = 6280;
      // Undeclared exception!
      try {
        long long0 = MathUtils.factorial(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
      }
  }

  @Test
  public void test085()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = (-2639);
      intArray0[2] = int0;
      // Undeclared exception!
      try {
        long long0 = MathUtils.factorial(intArray0[2]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,639
         //
      }
  }

  @Test
  public void test086()  throws Throwable  {
      float float0 = 3219.629F;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) float0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, doubleArray0[2]);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3219.62890625, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {3219.62890625, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[9];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      double[] doubleArray1 = null;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = null;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      double[] doubleArray1 = new double[10];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      double[] doubleArray1 = null;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = null;
      boolean boolean0 = MathUtils.equals(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test094()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 198;
      int[] intArray0 = new int[1];
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new int[] {0}, intArray0);
      
      int int2 = MathUtils.lcm(int0, int0);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(198, int2);
      
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) int1, double0, int2);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test
  public void test095()  throws Throwable  {
      double double0 = 0.0;
      double double1 = MathUtils.sign(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
      
      int int0 = 198;
      boolean boolean0 = MathUtils.equalsIncludingNaN(double1, (double) int0, int0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertFalse(boolean0);
  }

  @Test
  public void test096()  throws Throwable  {
      double double0 = Double.NaN;
      boolean boolean0 = MathUtils.equals(double0, double0);
      assertFalse(boolean0);
  }

  @Test
  public void test097()  throws Throwable  {
      long long0 = 0L;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-96);
      // Undeclared exception!
      try {
        boolean boolean0 = MathUtils.equals((double) byteArray0[1], (double) long0, (int) byte0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test098()  throws Throwable  {
      byte byte0 = (byte)0;
      double double0 = 281.286220709;
      boolean boolean0 = MathUtils.equalsIncludingNaN(double0, (double) byte0, (double) byte0);
      assertFalse(boolean0);
  }

  @Test
  public void test099()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = 1;
      int int1 = 2708;
      intArray0[4] = int1;
      boolean boolean0 = MathUtils.equals((double) int0, (double) intArray0[4], (double) intArray0[4]);
      assertFalse(int0 == int1);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 2708, 0, 0}, intArray0);
  }

  @Test
  public void test100()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.indicator(byte0);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals((byte)1, byte1);
      
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) byte1, (double) byte0, (double) byte1);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertTrue(boolean0);
  }

  @Test
  public void test101()  throws Throwable  {
      double double0 = 1549.7372713048;
      double double1 = Double.NaN;
      boolean boolean0 = MathUtils.equalsIncludingNaN(double1, double1, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertTrue(boolean0);
  }

  @Test
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 0.0;
      int int0 = MathUtils.compareTo(double0, double0, double0);
      assertEquals(0, int0);
      
      double double1 = (-1561.079507604562);
      int int1 = MathUtils.compareTo(doubleArray0[1], double1, (double) int0);
      assertFalse(double0 == double1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(double1 == double0);
      assertEquals(1, int1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test104()  throws Throwable  {
      int int0 = 198;
      int[] intArray0 = new int[1];
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new int[] {0}, intArray0);
      
      int int2 = MathUtils.compareTo((double) int1, (double) int0, (double) int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertEquals((-1), int2);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test
  public void test105()  throws Throwable  {
      int int0 = (-1531);
      // Undeclared exception!
      try {
        long long0 = MathUtils.binomialCoefficient(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,531
         //
      }
  }

  @Test
  public void test106()  throws Throwable  {
      int int0 = 0;
      short short0 = (short)5327;
      short short1 = MathUtils.sign(short0);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertEquals((short)1, short1);
      
      // Undeclared exception!
      try {
        double double0 = MathUtils.binomialCoefficientDouble(int0, (int) short1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 1
         //
      }
  }

  @Test
  public void test107()  throws Throwable  {
      int int0 = 1271;
      int int1 = 953;
      double double0 = MathUtils.binomialCoefficientLog(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(711.3462148020112, double0, 0.01D);
  }

  @Test
  public void test108()  throws Throwable  {
      int int0 = 10;
      int int1 = 429;
      double double0 = MathUtils.binomialCoefficientLog(int1, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(45.40447856313075, double0, 0.01D);
  }

  @Test
  public void test109()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.indicator(byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertEquals((byte)1, byte1);
      
      byte byte2 = (byte)18;
      assertFalse(byte2 == byte1);
      
      double double0 = MathUtils.binomialCoefficientLog((int) byte2, (int) byte1);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertFalse(byte2 == byte0);
      assertFalse(byte2 == byte1);
      assertFalse(byte1 == byte0);
      assertFalse(byte1 == byte2);
      assertEquals(2.8903717578961645, double0, 0.01D);
  }

  @Test
  public void test110()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = 1;
      double double0 = MathUtils.binomialCoefficientLog(int0, intArray0[5]);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test
  public void test111()  throws Throwable  {
      short short0 = (short)5327;
      short short1 = MathUtils.sign(short0);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertEquals((short)1, short1);
      
      short short2 = (short) (-1724);
      assertFalse(short2 == short1);
      
      double double0 = MathUtils.binomialCoefficientLog((int) short1, (int) short2);
      assertFalse(short1 == short2);
      assertFalse(short1 == short0);
      assertFalse(short2 == short0);
      assertFalse(short2 == short1);
      assertFalse(short0 == short1);
      assertFalse(short0 == short2);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test112()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.binomialCoefficientLog(int0, int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test113()  throws Throwable  {
      int int0 = 0;
      int int1 = (-2145);
      double double0 = MathUtils.binomialCoefficientDouble(int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test114()  throws Throwable  {
      int int0 = 1929;
      int int1 = 1837;
      double double0 = MathUtils.binomialCoefficientDouble(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1.5779754512724631E159, double0, 0.01D);
  }

  @Test
  public void test115()  throws Throwable  {
      int int0 = 1432;
      int[] intArray0 = new int[1];
      double double0 = MathUtils.binomialCoefficientDouble(int0, intArray0[0]);
      assertEquals(1.0, double0, 0.01D);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      double double0 = MathUtils.binomialCoefficientDouble((int) byteArray0[3], (int) byteArray0[3]);
      assertEquals(1.0, double0, 0.01D);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test117()  throws Throwable  {
      int int0 = 3;
      int int1 = MathUtils.lcm(int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(3, int1);
      
      int int2 = 6280;
      assertFalse(int2 == int1);
      
      long long0 = MathUtils.binomialCoefficient(int2, int1);
      assertTrue(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertTrue(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(41259141560L, long0);
  }

  @Test
  public void test118()  throws Throwable  {
      int int0 = 174;
      int int1 = 97;
      // Undeclared exception!
      try {
        long long0 = MathUtils.binomialCoefficient(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
      }
  }

  @Test
  public void test119()  throws Throwable  {
      int int0 = 32;
      int int1 = 1;
      long long0 = MathUtils.binomialCoefficient(int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(32L, long0);
  }

  @Test
  public void test120()  throws Throwable  {
      int int0 = 3;
      int int1 = 37;
      long long0 = MathUtils.binomialCoefficient(int1, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(7770L, long0);
  }

  @Test
  public void test121()  throws Throwable  {
      int int0 = 3;
      int int1 = MathUtils.lcm(int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(3, int1);
      
      int[] intArray0 = new int[2];
      long long0 = MathUtils.binomialCoefficient(int1, intArray0[1]);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(1L, long0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test
  public void test122()  throws Throwable  {
      int int0 = 0;
      long long0 = MathUtils.binomialCoefficient(int0, int0);
      assertEquals(1L, long0);
  }

  @Test
  public void test123()  throws Throwable  {
      long long0 = 7910884519577875640L;
      // Undeclared exception!
      try {
        long long1 = MathUtils.addAndCheck(long0, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in addition: 7,910,884,519,577,875,640 + 7,910,884,519,577,875,640
         //
      }
  }

  @Test
  public void test124()  throws Throwable  {
      byte byte0 = (byte) (-122);
      long long0 = 366L;
      long long1 = MathUtils.addAndCheck(long0, (long) byte0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(244L, long1);
  }

  @Test
  public void test125()  throws Throwable  {
      long long0 = 366L;
      long long1 = MathUtils.addAndCheck(long0, long0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(732L, long1);
  }

  @Test
  public void test126()  throws Throwable  {
      byte byte0 = (byte) (-122);
      byte byte1 = MathUtils.indicator(byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertEquals((byte) (-1), byte1);
      
      float float0 = MathUtils.round((float) byte0, (int) byte1);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertEquals((-120.0F), float0, 0.01F);
  }

  @Test
  public void test127()  throws Throwable  {
      byte byte0 = (byte) (-122);
      byte byte1 = MathUtils.indicator(byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertEquals((byte) (-1), byte1);
      
      boolean boolean0 = MathUtils.equals((double) byte1, (double) byte1);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertTrue(boolean0);
  }

  @Test
  public void test128()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.addAndCheck(int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      double double0 = MathUtils.round((double) int0, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test129()  throws Throwable  {
      short short0 = (short)5327;
      double double0 = MathUtils.cosh((double) short0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test130()  throws Throwable  {
      int int0 = 9;
      int int1 = MathUtils.mulAndCheck(int0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(81, int1);
      
      double double0 = MathUtils.log((double) int0, (double) int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(2.0, double0, 0.01D);
  }

  @Test
  public void test131()  throws Throwable  {
      double double0 = 0.0;
      double double1 = MathUtils.sinh(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try {
        MathUtils.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
      }
  }

  @Test
  public void test133()  throws Throwable  {
      byte byte0 = (byte) (-122);
      byte byte1 = MathUtils.indicator(byte0);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals((byte) (-1), byte1);
      
      double double0 = MathUtils.normalizeAngle((double) byte1, (double) byte0);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals((-120.38052083641213), double0, 0.01D);
  }
}
