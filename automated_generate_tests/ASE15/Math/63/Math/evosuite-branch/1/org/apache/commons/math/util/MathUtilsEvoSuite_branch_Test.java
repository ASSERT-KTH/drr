/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:00:07 GMT 2014
 */

package org.apache.commons.math.util;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.math.BigInteger;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.exception.NonMonotonousSequenceException;
import org.apache.commons.math.util.MathUtils;



import org.junit.runner.RunWith;


public class MathUtilsEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      long long0 = 9223372036854775807L;
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = (double) long0;
      doubleArray0[5] = (double) long0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      assertEquals(1.3043817825332783E19, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 9.223372036854776E18, 0.0, 9.223372036854776E18, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test01()  throws Throwable  {
      short short0 = (short)309;
      short short1 = MathUtils.indicator(short0);
      assertEquals((short)1, short1);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = (double) short1;
      double double0 = MathUtils.safeNorm(doubleArray0);
      assertEquals(1.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = MathUtils.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test03()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.indicator(byte0);
      assertEquals((byte)1, byte1);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = (double) byte1;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      boolean boolean0 = false;
      // Undeclared exception!
      try {
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (0 < 1)
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      short short0 = (short) (-1652);
      long long0 = 2320L;
      int int0 = MathUtils.compareTo((double) short0, (double) long0, (double) short0);
      assertEquals((-1), int0);
      
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) int0, (double) int0, (double) int0);
      assertTrue(boolean0);
      
      short short1 = MathUtils.sign(short0);
      assertEquals((short) (-1), short1);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      
      int int1 = MathUtils.lcm((int) short1, int0);
      assertEquals(1, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) int1;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try {
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 0)
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      short short0 = (short) (-1652);
      int int0 = MathUtils.compareTo((double) short0, (double) short0, (double) short0);
      assertEquals(0, int0);
      
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) int0, (double) int0, (double) int0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[9];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try {
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = (-770);
      intArray0[0] = int0;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      assertEquals(0, int1);
      assertArrayEquals(new int[] {(-770), 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(int1 == int0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = (double) intArray0[0];
      intArray0[3] = intArray0[0];
      boolean boolean0 = MathUtils.equals((double) intArray0[3], (double) int1);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-770), 0, 0, (-770), 0, 0, 0, 0, 0}, intArray0);
      assertFalse(int1 == int0);
      
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try {
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (0 > -770)
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 1899.838212254627;
      doubleArray0[1] = double0;
      // Undeclared exception!
      try {
        MathUtils.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1,899.838 >= 0)
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = (-770);
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      assertEquals(0, int1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(int1 == int0);
      
      double[] doubleArray0 = new double[4];
      intArray0[3] = int0;
      boolean boolean0 = MathUtils.equals((double) intArray0[3], (double) int1);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, (-770), 0, 0, 0, 0, 0}, intArray0);
      assertFalse(int1 == int0);
      
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, (-770), 0, 0, 0, 0, 0}, intArray0);
      assertFalse(int1 == int0);
  }

  @Test
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[9];
      double double0 = MathUtils.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = MathUtils.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test14()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals(10, bigInteger0.shortValue());
      assertEquals(10, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      assertNotNull(bigInteger1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertEquals(0, bigInteger1.byteValue());
      assertEquals(-7168, bigInteger1.shortValue());
      assertEquals(10, bigInteger0.shortValue());
      assertEquals(10, bigInteger0.byteValue());
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger0, bigInteger1);
  }

  @Test
  public void test15()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals(1, bigInteger0.byteValue());
      assertEquals(1, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = bigInteger0.not();
      assertNotNull(bigInteger1);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals(1, bigInteger0.byteValue());
      assertEquals(1, bigInteger0.shortValue());
      assertEquals(-2, bigInteger1.shortValue());
      assertEquals(-2, bigInteger1.byteValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      try {
        BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-2)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 454;
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals(1, bigInteger0.byteValue());
      assertEquals(1, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) int0);
      assertNotNull(bigInteger1);
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertEquals(1, bigInteger1.byteValue());
      assertEquals(1, bigInteger1.shortValue());
      assertEquals(1, bigInteger0.byteValue());
      assertEquals(1, bigInteger0.shortValue());
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger0, bigInteger1);
  }

  @Test
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-105);
      byteArray0[5] = byte0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-105), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(bigInteger0);
      assertEquals(0, bigInteger0.shortValue());
      assertEquals(0, bigInteger0.byteValue());
      
      try {
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) byteArray0[5]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (2,533,359,616^-105)
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 0;
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, int0);
      assertNotNull(bigInteger1);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      assertEquals(1, bigInteger1.shortValue());
      assertEquals(1, bigInteger1.byteValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = 0;
      int int1 = 3086;
      long long0 = MathUtils.pow((long) int0, (long) int1);
      assertEquals(0L, long0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test20()  throws Throwable  {
      long long0 = (-25L);
      try {
        long long1 = MathUtils.pow(long0, long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-25^-25)
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      int int0 = 0;
      long long0 = MathUtils.indicator((long) int0);
      assertEquals(1L, long0);
      
      long long1 = MathUtils.pow((long) int0, long0);
      assertEquals(0L, long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
  }

  @Test
  public void test22()  throws Throwable  {
      long long0 = 2143L;
      int int0 = (-2709);
      try {
        long long1 = MathUtils.pow(long0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (2,143^-2,709)
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      int int0 = 1327;
      int int1 = MathUtils.pow(int0, (long) int0);
      assertEquals(2085311183, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test24()  throws Throwable  {
      byte byte0 = (byte) (-75);
      try {
        int int0 = MathUtils.pow((int) byte0, (long) byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-75^-75)
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      short short0 = (short) (-3);
      short short1 = MathUtils.indicator(short0);
      assertEquals((short) (-1), short1);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      
      int int0 = MathUtils.gcd((int) short0, (int) short1);
      assertEquals(1, int0);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      
      int int1 = MathUtils.pow((int) short1, (long) int0);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
  }

  @Test
  public void test26()  throws Throwable  {
      long long0 = 0L;
      int int0 = 170;
      long long1 = MathUtils.subAndCheck(long0, (long) int0);
      assertEquals((-170L), long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = 52;
      int int1 = MathUtils.pow(int0, int0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      int int2 = MathUtils.subAndCheck(int0, int1);
      assertEquals(52, int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertTrue(int0 == int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test
  public void test28()  throws Throwable  {
      short short0 = (short)1338;
      short short1 = MathUtils.sign(short0);
      assertEquals((short)1, short1);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = (-1108);
      long long0 = MathUtils.sign((long) int0);
      assertEquals((-1L), long0);
  }

  @Test
  public void test30()  throws Throwable  {
      int int0 = 0;
      long long0 = MathUtils.sign((long) int0);
      assertEquals(0L, long0);
  }

  @Test
  public void test31()  throws Throwable  {
      short short0 = (short)309;
      long long0 = MathUtils.sign((long) short0);
      assertEquals(1L, long0);
  }

  @Test
  public void test32()  throws Throwable  {
      short short0 = (short)309;
      int int0 = MathUtils.sign((int) short0);
      assertEquals(1, int0);
  }

  @Test
  public void test33()  throws Throwable  {
      short short0 = (short)1338;
      float float0 = MathUtils.sign((float) short0);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test
  public void test34()  throws Throwable  {
      int int0 = 52;
      long long0 = MathUtils.pow((long) int0, int0);
      assertEquals(0L, long0);
      
      float float0 = MathUtils.sign((float) long0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test35()  throws Throwable  {
      float float0 = Float.NaN;
      float float1 = MathUtils.sign(float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
  }

  @Test
  public void test36()  throws Throwable  {
      short short0 = (short) (-3);
      float float0 = MathUtils.sign((float) short0);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test
  public void test37()  throws Throwable  {
      float float0 = (-2985.0F);
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.sign(byte0);
      assertEquals((byte)0, byte1);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      
      float float1 = MathUtils.round(float0, (int) byte1);
      assertEquals((-2985.0F), float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      assertTrue(float1 == float0);
      
      double double0 = MathUtils.sign((double) float1);
      assertEquals((-1.0), double0, 0.01D);
      assertTrue(float0 == float1);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      assertTrue(float1 == float0);
  }

  @Test
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathUtils.sign(doubleArray0[2]);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test39()  throws Throwable  {
      byte byte0 = (byte) (-32);
      byte byte1 = MathUtils.sign(byte0);
      assertEquals((byte) (-1), byte1);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
  }

  @Test
  public void test40()  throws Throwable  {
      int int0 = 0;
      int int1 = 3086;
      float float0 = MathUtils.round((float) int0, int1);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test41()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.sign(byte0);
      assertEquals((byte)0, byte1);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      
      int int0 = (-2360);
      int int1 = MathUtils.sign(int0);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try {
        float float0 = MathUtils.round((float) byte1, (int) byte1, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -1, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
      }
  }

  @Test
  public void test42()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      float float0 = MathUtils.round((float) intArray0[0], intArray0[0], int0);
      assertEquals(1.0F, float0, 0.01F);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test
  public void test43()  throws Throwable  {
      double double0 = 2.2250738585072014E-308;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = double0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, doubleArray0[0]);
      assertArrayEquals(new double[] {2.2250738585072014E-308}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      long long0 = 4503599627370496L;
      long long1 = MathUtils.gcd(long0, long0);
      assertEquals(4503599627370496L, long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      
      try {
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (double) long1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
      }
  }

  @Test
  public void test45()  throws Throwable  {
      double double0 = 1.1102230246251565E-16;
      int int0 = 0;
      double double1 = MathUtils.scalb(double0, int0);
      assertEquals(1.1102230246251565E-16, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test46()  throws Throwable  {
      int int0 = 52;
      long long0 = MathUtils.pow((long) int0, int0);
      assertEquals(0L, long0);
      
      double double0 = MathUtils.scalb((double) long0, int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test47()  throws Throwable  {
      int int0 = 3086;
      long long0 = (-2406L);
      long long1 = MathUtils.lcm(long0, (long) int0);
      assertEquals(3712458L, long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
  }

  @Test
  public void test48()  throws Throwable  {
      long long0 = (-1212L);
      long long1 = MathUtils.mulAndCheck(long0, long0);
      assertEquals(1468944L, long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
  }

  @Test
  public void test49()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.sign(byte0);
      assertEquals((byte)0, byte1);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      
      long long0 = 1L;
      long long1 = MathUtils.mulAndCheck(long0, (long) byte1);
      assertEquals(0L, long1);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
  }

  @Test
  public void test50()  throws Throwable  {
      int int0 = (-2709);
      long long0 = 0L;
      long long1 = MathUtils.lcm((long) int0, long0);
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
  }

  @Test
  public void test51()  throws Throwable  {
      int int0 = 3086;
      long long0 = MathUtils.lcm((long) int0, (long) int0);
      assertEquals(3086L, long0);
  }

  @Test
  public void test52()  throws Throwable  {
      short short0 = (short)309;
      double double0 = MathUtils.indicator((double) short0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test53()  throws Throwable  {
      long long0 = 4503599627370496L;
      long long1 = 2819561105158720014L;
      long long2 = MathUtils.gcd(long0, long1);
      assertEquals(2L, long2);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
  }

  @Test
  public void test54()  throws Throwable  {
      short short0 = (short) (-3);
      short short1 = MathUtils.indicator(short0);
      assertEquals((short) (-1), short1);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      
      long long0 = 0L;
      long long1 = MathUtils.gcd((long) short1, long0);
      assertEquals(1L, long1);
      assertFalse(long0 == long1);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertFalse(long1 == long0);
  }

  @Test
  public void test55()  throws Throwable  {
      short short0 = (short) (-3);
      short short1 = MathUtils.indicator(short0);
      assertEquals((short) (-1), short1);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      
      long long0 = MathUtils.gcd((long) short1, (long) short1);
      assertEquals(1L, long0);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
  }

  @Test
  public void test56()  throws Throwable  {
      int int0 = 52;
      long long0 = MathUtils.pow((long) int0, int0);
      assertEquals(0L, long0);
      
      long long1 = MathUtils.gcd(long0, (long) int0);
      assertEquals(52L, long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test
  public void test57()  throws Throwable  {
      int int0 = 454;
      int int1 = 236;
      int int2 = MathUtils.lcm(int1, int0);
      assertEquals(53572, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
  }

  @Test
  public void test58()  throws Throwable  {
      int int0 = 0;
      int int1 = 149;
      int int2 = MathUtils.gcd(int1, int0);
      assertEquals(149, int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
  }

  @Test
  public void test59()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.gcd(int0, int0);
      assertEquals(0, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test60()  throws Throwable  {
      int int0 = (-1);
      // Undeclared exception!
      try {
        double double0 = MathUtils.factorialLog(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
      }
  }

  @Test
  public void test61()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.factorialDouble(int0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test62()  throws Throwable  {
      int int0 = 52;
      double double0 = MathUtils.factorialDouble(int0);
      assertEquals(8.065817517094494E67, double0, 0.01D);
  }

  @Test
  public void test63()  throws Throwable  {
      short short0 = (short)309;
      short short1 = MathUtils.indicator(short0);
      assertEquals((short)1, short1);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      
      double double0 = MathUtils.factorialLog((int) short1);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
  }

  @Test
  public void test64()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = null;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test65()  throws Throwable  {
      int int0 = 454;
      double double0 = MathUtils.sinh((double) int0);
      assertEquals(7.390346286124271E196, double0, 0.01D);
      
      int int1 = MathUtils.lcm(int0, int0);
      assertEquals(454, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      boolean boolean0 = MathUtils.equalsIncludingNaN(double0, (double) int1, int1);
      assertFalse(boolean0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test66()  throws Throwable  {
      int int0 = 454;
      int int1 = MathUtils.lcm(int0, int0);
      assertEquals(454, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) int0, (double) int0, int1);
      assertTrue(boolean0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test67()  throws Throwable  {
      double double0 = (-776.319);
      int int0 = (-770);
      // Undeclared exception!
      try {
        boolean boolean0 = MathUtils.equals(double0, double0, int0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test68()  throws Throwable  {
      double double0 = (-2781.1784472);
      int[] intArray0 = new int[6];
      boolean boolean0 = MathUtils.equalsIncludingNaN(double0, (double) intArray0[0], (double) intArray0[3]);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test
  public void test69()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test70()  throws Throwable  {
      long long0 = 813L;
      byte byte0 = (byte)63;
      byte byte1 = MathUtils.sign(byte0);
      assertEquals((byte)1, byte1);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      
      int int0 = MathUtils.compareTo((double) byte0, (double) byte1, (double) long0);
      assertEquals(0, int0);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
  }

  @Test
  public void test71()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      int int0 = 0;
      double double1 = MathUtils.round(double0, int0, int0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      int int1 = MathUtils.indicator(int0);
      assertEquals(1, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      int int2 = MathUtils.compareTo((double) int1, double1, double1);
      assertEquals(1, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test72()  throws Throwable  {
      short short0 = (short) (-3);
      int int0 = (-461);
      // Undeclared exception!
      try {
        double double0 = MathUtils.binomialCoefficientLog(int0, (int) short0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -461, k = -3
         //
      }
  }

  @Test
  public void test73()  throws Throwable  {
      int int0 = 1885;
      int int1 = 2994;
      double double0 = MathUtils.binomialCoefficientLog(int1, int0);
      assertEquals(1969.3682504871826, double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test74()  throws Throwable  {
      int int0 = 52;
      double double0 = MathUtils.binomialCoefficientLog(int0, int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test75()  throws Throwable  {
      int int0 = 456;
      int int1 = (-2246);
      double double0 = MathUtils.binomialCoefficientLog(int0, int1);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test76()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.sign(byte0);
      assertEquals((byte)0, byte1);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      
      double double0 = MathUtils.binomialCoefficientDouble((int) byte1, (int) byte1);
      assertEquals(1.0, double0, 0.01D);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
  }

  @Test
  public void test77()  throws Throwable  {
      short short0 = (short) (-1652);
      int int0 = 1885;
      short short1 = MathUtils.sign(short0);
      assertEquals((short) (-1), short1);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      
      long long0 = MathUtils.binomialCoefficient(int0, (int) short1);
      assertEquals(1L, long0);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
  }

  @Test
  public void test78()  throws Throwable  {
      int int0 = (-1108);
      int int1 = 0;
      double double0 = MathUtils.binomialCoefficientDouble(int1, int0);
      assertEquals(1.0, double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test79()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = (-770);
      intArray0[0] = int0;
      intArray0[5] = intArray0[0];
      long long0 = MathUtils.addAndCheck((long) intArray0[5], (long) intArray0[5]);
      assertEquals((-1540L), long0);
      assertArrayEquals(new int[] {(-770), 0, 0, 0, 0, (-770), 0, 0, 0}, intArray0);
  }

  @Test
  public void test80()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = 1270;
      intArray0[1] = int0;
      long long0 = MathUtils.addAndCheck((long) intArray0[1], (long) intArray0[5]);
      assertEquals(1270L, long0);
      assertArrayEquals(new int[] {0, 1270, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test
  public void test81()  throws Throwable  {
      short short0 = (short)309;
      short short1 = MathUtils.indicator(short0);
      assertEquals((short)1, short1);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      
      int int0 = MathUtils.addAndCheck((int) short1, (int) short1);
      assertEquals(2, int0);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
  }

  @Test
  public void test82()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      int int0 = MathUtils.hash(doubleArray0);
      assertEquals(28629151, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test83()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test84()  throws Throwable  {
      short short0 = (short) (-1652);
      short short1 = MathUtils.sign(short0);
      assertEquals((short) (-1), short1);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      
      double double0 = MathUtils.round((double) short1, (int) short0);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
  }

  @Test
  public void test85()  throws Throwable  {
      byte byte0 = (byte)0;
      double double0 = MathUtils.cosh((double) byte0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test86()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 454;
      double double1 = MathUtils.log(double0, (double) int0);
      //  // Unstable assertion: assertEquals(-0.0, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
  }

  @Test
  public void test87()  throws Throwable  {
      float float0 = (-1.0F);
      float float1 = MathUtils.indicator(float0);
      assertEquals((-1.0F), float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      int int0 = MathUtils.hash((double) float1);
      assertEquals((-1074790400), int0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
  }

  @Test
  public void test88()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = (-770);
      double double0 = MathUtils.normalizeAngle((double) intArray0[0], (double) int0);
      assertEquals((-772.8317927830891), double0, 0.01D);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }
}
