/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:27:50 GMT 2014
 */

package org.apache.commons.math.util;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.math.BigInteger;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.exception.NonMonotonousSequenceException;
import org.apache.commons.math.util.MathUtils;



import org.evosuite.runtime.mock.java.lang.MockArithmeticException;
import org.junit.runner.RunWith;


public class MathUtilsEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 2.2250738585072014E-308;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      double double1 = MathUtils.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 2.2250738585072014E-308, 2.2250738585072014E-308, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(double1 == double0);
      assertEquals(3.1467296279827175E-308, double1, 0.01D);
  }

  @Test
  public void test001()  throws Throwable  {
      long long0 = 2819561105158720014L;
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) long0;
      doubleArray0[3] = (double) long0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 2.81956110515872E18, 0.0, 2.81956110515872E18, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3.9874615548551347E18, double0, 0.01D);
  }

  @Test
  public void test002()  throws Throwable  {
      float float0 = 96.7389F;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) float0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {96.73889923095703}, doubleArray0, 0.01);
      assertEquals(96.73889923095703, double0, 0.01D);
  }

  @Test
  public void test003()  throws Throwable  {
      long long0 = (-332L);
      long long1 = MathUtils.indicator(long0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals((-1L), long1);
      
      int int0 = MathUtils.hash((double) long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals((-1074790400), int0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) int0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      boolean boolean0 = false;
      // Undeclared exception!
      try {
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (-1,074,790,400 < 0)
         //
      }
  }

  @Test
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 748.888770728;
      doubleArray0[0] = double0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      boolean boolean0 = true;
      // Undeclared exception!
      try {
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 0)
         //
      }
  }

  @Test
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      boolean boolean0 = false;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test006()  throws Throwable  {
      short short0 = (short)152;
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = (double) short0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      boolean boolean0 = false;
      // Undeclared exception!
      try {
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not increasing (152 > 0)
         //
      }
  }

  @Test
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try {
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
      }
  }

  @Test
  public void test008()  throws Throwable  {
      int int0 = (-2050);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) int0;
      MathUtils.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {(-2050.0), 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test010()  throws Throwable  {
      int[] intArray0 = new int[7];
      double double0 = MathUtils.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test013()  throws Throwable  {
      int int0 = 122;
      BigInteger bigInteger0 = BigInteger.valueOf((long) int0);
      assertNotNull(bigInteger0);
      assertEquals(122, bigInteger0.byteValue());
      assertEquals(122, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertEquals(122, bigInteger0.byteValue());
      assertEquals(122, bigInteger0.shortValue());
      assertEquals(0, bigInteger1.shortValue());
      assertEquals(0, bigInteger1.byteValue());
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
  }

  @Test
  public void test014()  throws Throwable  {
      int int0 = 342;
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals(1, bigInteger0.byteValue());
      assertEquals(1, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) int0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertEquals(1, bigInteger0.byteValue());
      assertEquals(1, bigInteger0.shortValue());
      assertEquals(1, bigInteger1.shortValue());
      assertEquals(1, bigInteger1.byteValue());
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertTrue(bigInteger1.equals((Object)bigInteger0));
  }

  @Test
  public void test015()  throws Throwable  {
      int int0 = (-242);
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals(1, bigInteger0.shortValue());
      assertEquals(1, bigInteger0.byteValue());
      
      try {
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-242)
         //
      }
  }

  @Test
  public void test016()  throws Throwable  {
      int int0 = (-2098);
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      
      try {
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-2,098)
         //
      }
  }

  @Test
  public void test017()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, int0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, int0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      assertEquals(1, bigInteger1.shortValue());
      assertEquals(1, bigInteger1.byteValue());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
  }

  @Test
  public void test018()  throws Throwable  {
      long long0 = (-906L);
      try {
        long long1 = MathUtils.pow(long0, long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-906^-906)
         //
      }
  }

  @Test
  public void test019()  throws Throwable  {
      short short0 = (short)307;
      long long0 = MathUtils.pow((long) short0, (long) short0);
      assertEquals(3501924534370688363L, long0);
  }

  @Test
  public void test020()  throws Throwable  {
      short short0 = (short)63;
      short short1 = MathUtils.indicator(short0);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertEquals((short)1, short1);
      
      int int0 = (-1585);
      int int1 = MathUtils.addAndCheck(int0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-3170), int1);
      
      try {
        long long0 = MathUtils.pow((long) short1, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-3,170)
         //
      }
  }

  @Test
  public void test021()  throws Throwable  {
      int int0 = 0;
      long long0 = (-2370L);
      try {
        int int1 = MathUtils.pow(int0, long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-2,370)
         //
      }
  }

  @Test
  public void test022()  throws Throwable  {
      byte byte0 = (byte)0;
      int int0 = 138;
      int int1 = MathUtils.pow((int) byte0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test
  public void test023()  throws Throwable  {
      int int0 = 275;
      int int1 = (-1);
      try {
        int int2 = MathUtils.pow(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (275^-1)
         //
      }
  }

  @Test
  public void test024()  throws Throwable  {
      int[] intArray0 = new int[3];
      long long0 = (-9223372036854775808L);
      // Undeclared exception!
      try {
        long long1 = MathUtils.subAndCheck((long) intArray0[0], long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: subtract
         //
      }
  }

  @Test
  public void test025()  throws Throwable  {
      int int0 = (-2050);
      int int1 = MathUtils.subAndCheck(int0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, int1);
  }

  @Test
  public void test026()  throws Throwable  {
      short short0 = (short)0;
      short short1 = MathUtils.sign(short0);
      assertTrue(short1 == short0);
      assertTrue(short0 == short1);
      assertEquals((short)0, short1);
  }

  @Test
  public void test027()  throws Throwable  {
      long long0 = (-1383L);
      long long1 = MathUtils.sign(long0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals((-1L), long1);
  }

  @Test
  public void test028()  throws Throwable  {
      int int0 = 0;
      long long0 = MathUtils.sign((long) int0);
      assertEquals(0L, long0);
  }

  @Test
  public void test029()  throws Throwable  {
      int int0 = 1163;
      int int1 = MathUtils.addAndCheck(int0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(2326, int1);
      
      long long0 = MathUtils.sign((long) int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1L, long0);
  }

  @Test
  public void test030()  throws Throwable  {
      int int0 = (-2050);
      int int1 = MathUtils.sign(int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test
  public void test031()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = MathUtils.sign(float0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test
  public void test032()  throws Throwable  {
      long long0 = (-332L);
      double double0 = MathUtils.sign((double) long0);
      assertEquals((-1.0), double0, 0.01D);
  }

  @Test
  public void test033()  throws Throwable  {
      byte byte0 = (byte)0;
      float float0 = MathUtils.round((float) byte0, (int) byte0, (int) byte0);
      assertEquals(1.0F, float0, 0.01F);
      
      double double0 = MathUtils.sign((double) float0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test034()  throws Throwable  {
      byte byte0 = (byte) (-33);
      byte byte1 = MathUtils.sign(byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertEquals((byte) (-1), byte1);
  }

  @Test
  public void test035()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.sign(byte0);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      assertEquals((byte)0, byte1);
  }

  @Test
  public void test036()  throws Throwable  {
      int int0 = 0;
      int int1 = 4175;
      // Undeclared exception!
      try {
        float float0 = MathUtils.round((float) int0, int1, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 4,175, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
      }
  }

  @Test
  public void test037()  throws Throwable  {
      float float0 = 1.0F;
      int int0 = 0;
      int int1 = 3;
      float float1 = MathUtils.round(float0, int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test
  public void test038()  throws Throwable  {
      int int0 = 275;
      int int1 = 2;
      float float0 = MathUtils.round((float) int0, int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test
  public void test039()  throws Throwable  {
      double double0 = 516.011476781;
      double double1 = (-438.40124435294916);
      long long0 = (-332L);
      int int0 = MathUtils.hash((double) long0);
      assertEquals((-1066090496), int0);
      
      int int1 = MathUtils.compareTo(double0, double1, double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      float float0 = MathUtils.round((float) int0, int0, int1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
  }

  @Test
  public void test040()  throws Throwable  {
      short short0 = (short)17;
      double double0 = Double.NaN;
      double double1 = MathUtils.round(double0, (int) short0);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[20];
      double double0 = (-1529.19);
      doubleArray0[0] = double0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, double0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1529.19), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1529.19), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test
  public void test042()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.log((double) int0, (double) int0);
      assertEquals(Double.NaN, double0, 0.01D);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = double0;
      try {
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, doubleArray0[4]);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
      }
  }

  @Test
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = Double.NEGATIVE_INFINITY;
      try {
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
      }
  }

  @Test
  public void test044()  throws Throwable  {
      float float0 = (-1211.0F);
      short short0 = (short) (-1324);
      short short1 = MathUtils.sign(short0);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      assertEquals((short) (-1), short1);
      
      double double0 = MathUtils.scalb((double) float0, (int) short1);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      assertEquals((-605.5), double0, 0.01D);
  }

  @Test
  public void test045()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 202;
      double double1 = MathUtils.scalb(double0, int0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test046()  throws Throwable  {
      int int0 = (-1487);
      int int1 = MathUtils.gcd(int0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1487, int1);
      
      long long0 = 0L;
      long long1 = MathUtils.mulAndCheck((long) int1, long0);
      assertTrue(long0 == long1);
      assertFalse(int1 == int0);
      assertTrue(long1 == long0);
      assertFalse(int0 == int1);
      assertEquals(0L, long1);
  }

  @Test
  public void test047()  throws Throwable  {
      int int0 = 2213;
      int int1 = MathUtils.indicator(int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1, int1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) int1;
      int int2 = MathUtils.hash(doubleArray0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-911943521), int2);
      
      long long0 = 4503599627370496L;
      // Undeclared exception!
      try {
        long long1 = MathUtils.lcm(long0, (long) int2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
      }
  }

  @Test
  public void test048()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = (-1398);
      intArray0[2] = int0;
      long long0 = MathUtils.mulAndCheck((long) intArray0[0], (long) intArray0[2]);
      assertArrayEquals(new int[] {0, 0, (-1398), 0, 0, 0, 0}, intArray0);
      assertEquals(0L, long0);
  }

  @Test
  public void test049()  throws Throwable  {
      long long0 = (-3958705157555305932L);
      long long1 = (-256L);
      // Undeclared exception!
      try {
        long long2 = MathUtils.lcm(long0, long1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
      }
  }

  @Test
  public void test050()  throws Throwable  {
      int int0 = 4194304;
      // Undeclared exception!
      try {
        int int1 = MathUtils.mulAndCheck(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
      }
  }

  @Test
  public void test051()  throws Throwable  {
      int int0 = 4194304;
      int int1 = (-2497);
      // Undeclared exception!
      try {
        int int2 = MathUtils.mulAndCheck(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
      }
  }

  @Test
  public void test052()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.indicator(byte0);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals((byte)1, byte1);
      
      long long0 = MathUtils.lcm((long) byte1, (long) byte0);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals(0L, long0);
  }

  @Test
  public void test053()  throws Throwable  {
      byte byte0 = (byte)0;
      long long0 = MathUtils.lcm((long) byte0, (long) byte0);
      assertEquals(0L, long0);
  }

  @Test
  public void test054()  throws Throwable  {
      int int0 = 101;
      int int1 = MathUtils.indicator(int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      int int2 = 0;
      assertFalse(int2 == int1);
      
      int int3 = MathUtils.lcm(int1, int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertEquals(0, int3);
  }

  @Test
  public void test055()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.lcm(int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test
  public void test056()  throws Throwable  {
      short short0 = (short) (-1084);
      short short1 = MathUtils.indicator(short0);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertEquals((short) (-1), short1);
  }

  @Test
  public void test057()  throws Throwable  {
      byte byte0 = (byte)0;
      long long0 = MathUtils.indicator((long) byte0);
      assertEquals(1L, long0);
  }

  @Test
  public void test058()  throws Throwable  {
      int int0 = (-319);
      int int1 = MathUtils.indicator(int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test
  public void test059()  throws Throwable  {
      short short0 = (short)63;
      short short1 = MathUtils.indicator(short0);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      assertEquals((short)1, short1);
      
      int int0 = (-1585);
      int int1 = MathUtils.addAndCheck(int0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-3170), int1);
      
      float float0 = MathUtils.round((float) int1, (int) short1);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-3170.0F), float0, 0.01F);
  }

  @Test
  public void test060()  throws Throwable  {
      int int0 = 40;
      int int1 = MathUtils.sign(int0);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertEquals(1, int1);
      
      float float0 = Float.NaN;
      float float1 = MathUtils.round(float0, int1);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test
  public void test061()  throws Throwable  {
      double double0 = (-536.6709935472275);
      double double1 = MathUtils.indicator(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1.0), double1, 0.01D);
  }

  @Test
  public void test062()  throws Throwable  {
      double double0 = 1.986821492305628E-8;
      double double1 = MathUtils.indicator(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.0, double1, 0.01D);
  }

  @Test
  public void test063()  throws Throwable  {
      byte byte0 = (byte) (-126);
      byte byte1 = MathUtils.indicator(byte0);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals((byte) (-1), byte1);
  }

  @Test
  public void test064()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      // Undeclared exception!
      try {
        long long1 = MathUtils.lcm(long0, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: gcd(-9,223,372,036,854,775,808, -9,223,372,036,854,775,808) is 2^63
         //
      }
  }

  @Test
  public void test065()  throws Throwable  {
      long long0 = (-332L);
      long long1 = (-344L);
      long long2 = MathUtils.lcm(long1, long0);
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertEquals(28552L, long2);
  }

  @Test
  public void test066()  throws Throwable  {
      int int0 = 2213;
      int int1 = MathUtils.indicator(int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      long long0 = MathUtils.gcd((long) int1, (long) int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1L, long0);
  }

  @Test
  public void test067()  throws Throwable  {
      long long0 = (-713L);
      short short0 = (short)2619;
      long long1 = MathUtils.lcm((long) short0, long0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(1867347L, long1);
  }

  @Test
  public void test068()  throws Throwable  {
      long long0 = 0L;
      int int0 = 0;
      int int1 = MathUtils.pow(int0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      long long1 = MathUtils.gcd((long) int1, long0);
      assertFalse(long0 == long1);
      assertFalse(int0 == int1);
      assertFalse(long1 == long0);
      assertFalse(int1 == int0);
      assertEquals(1L, long1);
  }

  @Test
  public void test069()  throws Throwable  {
      int int0 = 0;
      long long0 = MathUtils.gcd((long) int0, (long) int0);
      assertEquals(0L, long0);
  }

  @Test
  public void test070()  throws Throwable  {
      int int0 = (-2368);
      int int1 = MathUtils.lcm(int0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(2368, int1);
  }

  @Test
  public void test071()  throws Throwable  {
      byte byte0 = (byte)0;
      int int0 = (-3247);
      int int1 = MathUtils.gcd(int0, (int) byte0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(3247, int1);
  }

  @Test
  public void test072()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.gcd(int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0, int1);
  }

  @Test
  public void test073()  throws Throwable  {
      int int0 = 1163;
      long long0 = 0L;
      int int1 = MathUtils.pow(int0, long0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1, int1);
      
      double double0 = MathUtils.factorialLog(int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test074()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        double double0 = MathUtils.factorialLog(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,147,483,648
         //
      }
  }

  @Test
  public void test075()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.factorialDouble(int0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test076()  throws Throwable  {
      int int0 = 202;
      double double0 = MathUtils.factorialDouble(int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test077()  throws Throwable  {
      int int0 = 4194304;
      // Undeclared exception!
      try {
        long long0 = MathUtils.factorial(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
      }
  }

  @Test
  public void test078()  throws Throwable  {
      int int0 = (-3332);
      // Undeclared exception!
      try {
        long long0 = MathUtils.factorial(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -3,332
         //
      }
  }

  @Test
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[1];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean0);
  }

  @Test
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[10];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean0);
  }

  @Test
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = null;
      boolean boolean0 = MathUtils.equals(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test
  public void test082()  throws Throwable  {
      long long0 = 0L;
      int int0 = 0;
      long long1 = MathUtils.pow(long0, int0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(1L, long1);
      
      int int1 = MathUtils.pow(int0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1, int1);
      
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) long1, (double) long1, int1);
      assertFalse(long0 == long1);
      assertFalse(int1 == int0);
      assertFalse(long1 == long0);
      assertFalse(int0 == int1);
      assertTrue(boolean0);
  }

  @Test
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      short short0 = (short)63;
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) short0, doubleArray0[1], (int) short0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test
  public void test084()  throws Throwable  {
      double double0 = Double.NaN;
      int int0 = 0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(double0, double0, int0);
      assertTrue(boolean0);
  }

  @Test
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = Double.NaN;
      doubleArray0[2] = double0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test
  public void test086()  throws Throwable  {
      float float0 = (-1211.0F);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) float0, (double) float0);
      assertTrue(boolean0);
  }

  @Test
  public void test087()  throws Throwable  {
      double double0 = (-2914.734983);
      int int0 = 0;
      // Undeclared exception!
      try {
        boolean boolean0 = MathUtils.equalsIncludingNaN(double0, double0, int0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      short short0 = (short)63;
      short short1 = MathUtils.indicator(short0);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertEquals((short)1, short1);
      
      doubleArray0[2] = (double) short1;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0[0], doubleArray0[2], (double) short0);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertFalse(short0 == short1);
      assertTrue(boolean0);
  }

  @Test
  public void test089()  throws Throwable  {
      long long0 = 0L;
      int int0 = 0;
      long long1 = MathUtils.pow(long0, int0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(1L, long1);
      
      int int1 = MathUtils.pow(int0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      boolean boolean0 = MathUtils.equals((double) long0, (double) long1, (double) int1);
      assertFalse(int0 == int1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(int1 == int0);
      assertTrue(boolean0);
  }

  @Test
  public void test090()  throws Throwable  {
      byte byte0 = (byte)0;
      double double0 = MathUtils.sign((double) byte0);
      assertEquals(0.0, double0, 0.01D);
      
      double double1 = (-3754.443981676886);
      assertFalse(double1 == double0);
      
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) byte0, double1, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(boolean0);
  }

  @Test
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = Double.NaN;
      doubleArray0[8] = double0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.NaN}, doubleArray0, 0.01);
      assertTrue(boolean0);
  }

  @Test
  public void test092()  throws Throwable  {
      float float0 = 96.7389F;
      float float1 = MathUtils.sign(float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(1.0F, float1, 0.01F);
      
      long long0 = (-613L);
      long long1 = MathUtils.gcd(long0, long0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(613L, long1);
      
      int int0 = (-1366);
      int int1 = MathUtils.pow(int0, long1);
      assertFalse(long0 == long1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(long1 == long0);
      assertEquals(0, int1);
      
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) float1, (double) float1, (double) int1);
      assertFalse(long0 == long1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(float1 == float0);
      assertFalse(long1 == long0);
      assertFalse(float0 == float1);
      assertTrue(boolean0);
  }

  @Test
  public void test093()  throws Throwable  {
      long long0 = (-3466L);
      int int0 = 342;
      long long1 = MathUtils.pow(long0, int0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
      
      int int1 = MathUtils.compareTo((double) long1, (double) int0, (double) long0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals((-1), int1);
  }

  @Test
  public void test094()  throws Throwable  {
      double double0 = 1.986821492305628E-8;
      int int0 = 0;
      int int1 = MathUtils.sign(int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0, int1);
      
      int int2 = MathUtils.compareTo(double0, double0, (double) int1);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertTrue(int1 == int0);
      assertTrue(int1 == int2);
      assertTrue(int0 == int1);
      assertTrue(int0 == int2);
      assertEquals(0, int2);
  }

  @Test
  public void test095()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = (-1398);
      intArray0[2] = int0;
      // Undeclared exception!
      try {
        long long0 = MathUtils.binomialCoefficient(int0, intArray0[2]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,398
         //
      }
  }

  @Test
  public void test096()  throws Throwable  {
      short short0 = (short)169;
      short short1 = MathUtils.sign(short0);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      assertEquals((short)1, short1);
      
      // Undeclared exception!
      try {
        double double0 = MathUtils.binomialCoefficientLog((int) short1, (int) short0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 1, k = 169
         //
      }
  }

  @Test
  public void test097()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = (-2282);
      intArray0[6] = int0;
      int int1 = 115;
      double double0 = MathUtils.binomialCoefficientLog(int1, intArray0[6]);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, (-2282), 0, 0}, intArray0);
      assertFalse(int1 == int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test098()  throws Throwable  {
      int int0 = (-2050);
      int[] intArray0 = new int[5];
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      double double0 = MathUtils.binomialCoefficientLog(int1, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test099()  throws Throwable  {
      int int0 = 1647;
      int int1 = 0;
      double double0 = MathUtils.binomialCoefficientLog(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test100()  throws Throwable  {
      int int0 = 4194304;
      int int1 = 2451;
      double double0 = MathUtils.binomialCoefficientLog(int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(20693.12504562751, double0, 0.01D);
  }

  @Test
  public void test101()  throws Throwable  {
      int int0 = 1352;
      double double0 = MathUtils.binomialCoefficientLog(int0, int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test102()  throws Throwable  {
      int int0 = 589;
      int int1 = 935;
      double double0 = MathUtils.binomialCoefficientDouble(int1, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1.0524711296613775E266, double0, 0.01D);
  }

  @Test
  public void test103()  throws Throwable  {
      int int0 = 275;
      int[] intArray0 = new int[1];
      intArray0[0] = int0;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {275}, intArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      double double0 = MathUtils.binomialCoefficientDouble(intArray0[0], int1);
      assertArrayEquals(new int[] {275}, intArray0);
      assertFalse(int1 == int0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test104()  throws Throwable  {
      int int0 = 1822;
      double double0 = MathUtils.binomialCoefficientDouble(int0, int0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test105()  throws Throwable  {
      int int0 = 122;
      int int1 = (-1);
      long long0 = MathUtils.binomialCoefficient(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1L, long0);
  }

  @Test
  public void test106()  throws Throwable  {
      int int0 = 63;
      int int1 = 2;
      double double0 = MathUtils.binomialCoefficientDouble(int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1953.0, double0, 0.01D);
  }

  @Test
  public void test107()  throws Throwable  {
      int int0 = 367;
      int int1 = 203;
      // Undeclared exception!
      try {
        long long0 = MathUtils.binomialCoefficient(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
      }
  }

  @Test
  public void test108()  throws Throwable  {
      short short0 = (short)169;
      short short1 = MathUtils.sign(short0);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertEquals((short)1, short1);
      
      long long0 = MathUtils.binomialCoefficient((int) short0, (int) short1);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertEquals(169L, long0);
  }

  @Test
  public void test109()  throws Throwable  {
      int int0 = 8;
      int int1 = 0;
      long long0 = MathUtils.binomialCoefficient(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1L, long0);
  }

  @Test
  public void test110()  throws Throwable  {
      int int0 = 3;
      long long0 = MathUtils.binomialCoefficient(int0, int0);
      assertEquals(1L, long0);
  }

  @Test
  public void test111()  throws Throwable  {
      long long0 = (-713L);
      long long1 = MathUtils.subAndCheck(long0, long0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(0L, long1);
  }

  @Test
  public void test112()  throws Throwable  {
      long long0 = (-613L);
      long long1 = MathUtils.gcd(long0, long0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(613L, long1);
      
      int int0 = (-1366);
      int int1 = MathUtils.pow(int0, long1);
      assertFalse(long0 == long1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(long1 == long0);
      assertEquals(0, int1);
      
      long long2 = MathUtils.addAndCheck((long) int1, (long) int1);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertEquals(0L, long2);
  }

  @Test
  public void test113()  throws Throwable  {
      long long0 = (-1298L);
      long long1 = (-2864L);
      long long2 = MathUtils.addAndCheck(long0, long1);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertEquals((-4162L), long2);
  }

  @Test
  public void test114()  throws Throwable  {
      int[] intArray0 = new int[9];
      byte byte0 = (byte)78;
      byte byte1 = MathUtils.sign(byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertEquals((byte)1, byte1);
      
      float float0 = MathUtils.round((float) byte1, intArray0[2]);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
  }

  @Test
  public void test116()  throws Throwable  {
      double double0 = 0.5;
      double double1 = MathUtils.cosh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.1276259652063807, double1, 0.01D);
  }

  @Test
  public void test117()  throws Throwable  {
      byte byte0 = (byte)0;
      double double0 = MathUtils.sinh((double) byte0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      // Undeclared exception!
      try {
        MathUtils.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
      }
  }

  @Test
  public void test119()  throws Throwable  {
      float float0 = (-1211.0F);
      float float1 = MathUtils.sign(float0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals((-1.0F), float1, 0.01F);
      
      short short0 = (short) (-1324);
      double double0 = MathUtils.normalizeAngle((double) float1, (double) short0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals((-1326.7520998148927), double0, 0.01D);
  }
}
