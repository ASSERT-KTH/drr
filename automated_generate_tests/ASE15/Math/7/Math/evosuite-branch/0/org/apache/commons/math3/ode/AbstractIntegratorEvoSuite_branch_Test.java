/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:05:45 GMT 2014
 */

package org.apache.commons.math3.ode;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.util.Collection;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.sampling.StepHandler;



import org.junit.runner.RunWith;


public class AbstractIntegratorEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      double double0 = 35.81684148639408;
      double[] doubleArray0 = new double[9];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(double0, double0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01D);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01D);
      assertEquals(35.81684148639408, dormandPrince853Integrator0.getMaxStep(), 0.01D);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01D);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01D);
      assertEquals(2147483647, dormandPrince853Integrator0.getMaxEvaluations());
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(0, dormandPrince853Integrator0.getEvaluations());
      assertEquals(35.81684148639408, dormandPrince853Integrator0.getMinStep(), 0.01D);
      assertEquals(35.81684148639408, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01D);
      
      Collection<EventHandler> collection0 = dormandPrince853Integrator0.getEventHandlers();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(collection0);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01D);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01D);
      assertEquals(35.81684148639408, dormandPrince853Integrator0.getMaxStep(), 0.01D);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01D);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01D);
      assertEquals(2147483647, dormandPrince853Integrator0.getMaxEvaluations());
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(0, dormandPrince853Integrator0.getEvaluations());
      assertEquals(35.81684148639408, dormandPrince853Integrator0.getMinStep(), 0.01D);
      assertEquals(35.81684148639408, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01D);
  }

  @Test
  public void test1()  throws Throwable  {
      double double0 = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(double0, double0, double0, double0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(2147483647, graggBulirschStoerIntegrator0.getMaxEvaluations());
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01D);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01D);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0, graggBulirschStoerIntegrator0.getEvaluations());
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      
      boolean boolean0 = true;
      int int0 = 0;
      double[] doubleArray0 = new double[4];
      // Undeclared exception!
      try {
        double double1 = graggBulirschStoerIntegrator0.initializeStep(boolean0, int0, doubleArray0, doubleArray0[2], doubleArray0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      double double0 = 0.0;
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(double0);
      assertNotNull(midpointIntegrator0);
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(0, midpointIntegrator0.getEvaluations());
      assertEquals(2147483647, midpointIntegrator0.getMaxEvaluations());
      
      midpointIntegrator0.clearStepHandlers();
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(0, midpointIntegrator0.getEvaluations());
      assertEquals(2147483647, midpointIntegrator0.getMaxEvaluations());
  }

  @Test
  public void test3()  throws Throwable  {
      double double0 = 0.0;
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(double0);
      assertNotNull(classicalRungeKuttaIntegrator0);
      assertEquals(0, classicalRungeKuttaIntegrator0.getEvaluations());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(2147483647, classicalRungeKuttaIntegrator0.getMaxEvaluations());
      
      int int0 = classicalRungeKuttaIntegrator0.getEvaluations();
      assertEquals(0, int0);
      assertEquals(0, classicalRungeKuttaIntegrator0.getEvaluations());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(2147483647, classicalRungeKuttaIntegrator0.getMaxEvaluations());
  }

  @Test
  public void test4()  throws Throwable  {
      double double0 = 0.0;
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(double0);
      assertNotNull(midpointIntegrator0);
      assertEquals(2147483647, midpointIntegrator0.getMaxEvaluations());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(0, midpointIntegrator0.getEvaluations());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01D);
      
      midpointIntegrator0.clearEventHandlers();
      assertEquals(2147483647, midpointIntegrator0.getMaxEvaluations());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(0, midpointIntegrator0.getEvaluations());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01D);
  }

  @Test
  public void test5()  throws Throwable  {
      double double0 = 0.0;
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(double0);
      assertNotNull(classicalRungeKuttaIntegrator0);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(2147483647, classicalRungeKuttaIntegrator0.getMaxEvaluations());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0, classicalRungeKuttaIntegrator0.getEvaluations());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01D);
      
      Collection<StepHandler> collection0 = classicalRungeKuttaIntegrator0.getStepHandlers();
      assertNotNull(collection0);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(2147483647, classicalRungeKuttaIntegrator0.getMaxEvaluations());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0, classicalRungeKuttaIntegrator0.getEvaluations());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01D);
  }

  @Test
  public void test6()  throws Throwable  {
      double double0 = (-484.4);
      double[] doubleArray0 = new double[4];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(double0, double0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(484.4, graggBulirschStoerIntegrator0.getMaxStep(), 0.01D);
      assertEquals(484.4, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(2147483647, graggBulirschStoerIntegrator0.getMaxEvaluations());
      assertEquals(484.4, graggBulirschStoerIntegrator0.getMinStep(), 0.01D);
      assertEquals(0, graggBulirschStoerIntegrator0.getEvaluations());
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01D);
      
      double double1 = graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(484.4, double1, 0.01D);
      assertEquals(484.4, graggBulirschStoerIntegrator0.getMaxStep(), 0.01D);
      assertEquals(484.4, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(2147483647, graggBulirschStoerIntegrator0.getMaxEvaluations());
      assertEquals(484.4, graggBulirschStoerIntegrator0.getMinStep(), 0.01D);
      assertEquals(0, graggBulirschStoerIntegrator0.getEvaluations());
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test7()  throws Throwable  {
      double double0 = (-484.4);
      double[] doubleArray0 = new double[4];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(double0, double0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(0, graggBulirschStoerIntegrator0.getEvaluations());
      assertEquals(484.4, graggBulirschStoerIntegrator0.getMaxStep(), 0.01D);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(2147483647, graggBulirschStoerIntegrator0.getMaxEvaluations());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(484.4, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(484.4, graggBulirschStoerIntegrator0.getMinStep(), 0.01D);
      
      String string0 = graggBulirschStoerIntegrator0.getName();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(string0);
      assertEquals("Gragg-Bulirsch-Stoer", string0);
      assertEquals(0, graggBulirschStoerIntegrator0.getEvaluations());
      assertEquals(484.4, graggBulirschStoerIntegrator0.getMaxStep(), 0.01D);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(2147483647, graggBulirschStoerIntegrator0.getMaxEvaluations());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(484.4, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(484.4, graggBulirschStoerIntegrator0.getMinStep(), 0.01D);
  }

  @Test
  public void test8()  throws Throwable  {
      double double0 = 357.6391179106141;
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(double0);
      assertNotNull(classicalRungeKuttaIntegrator0);
      assertEquals(2147483647, classicalRungeKuttaIntegrator0.getMaxEvaluations());
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0, classicalRungeKuttaIntegrator0.getEvaluations());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01D);
      
      EventHandler eventHandler0 = null;
      int int0 = (-1111);
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, (double) int0, (double) int0, int0);
      assertEquals(2147483647, classicalRungeKuttaIntegrator0.getMaxEvaluations());
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0, classicalRungeKuttaIntegrator0.getEvaluations());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01D);
  }
}
