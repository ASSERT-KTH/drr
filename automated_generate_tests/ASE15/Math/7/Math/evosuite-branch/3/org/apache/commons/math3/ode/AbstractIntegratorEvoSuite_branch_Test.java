/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:37:42 GMT 2014
 */

package org.apache.commons.math3.ode;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.util.Collection;
import org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.events.EventState;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.StepHandler;



import org.junit.runner.RunWith;


public class AbstractIntegratorEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      double double0 = (-4051.0761080134);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(double0, double0, double0, double0);
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(4051.0761080134, dormandPrince853Integrator0.getMaxStep(), 0.01D);
      assertEquals(4051.0761080134, dormandPrince853Integrator0.getMinStep(), 0.01D);
      assertEquals(2147483647, dormandPrince853Integrator0.getMaxEvaluations());
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01D);
      assertEquals(4051.0761080134, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01D);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01D);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01D);
      assertEquals(0, dormandPrince853Integrator0.getEvaluations());
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      
      int int0 = 0;
      dormandPrince853Integrator0.setMaxEvaluations(int0);
      assertEquals(4051.0761080134, dormandPrince853Integrator0.getMaxStep(), 0.01D);
      assertEquals(4051.0761080134, dormandPrince853Integrator0.getMinStep(), 0.01D);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01D);
      assertEquals(4051.0761080134, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(0, dormandPrince853Integrator0.getMaxEvaluations());
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01D);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01D);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01D);
      assertEquals(0, dormandPrince853Integrator0.getEvaluations());
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
  }

  @Test
  public void test01()  throws Throwable  {
      double double0 = (-95.34369635293);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(double0);
      assertNotNull(classicalRungeKuttaIntegrator0);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(2147483647, classicalRungeKuttaIntegrator0.getMaxEvaluations());
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(0, classicalRungeKuttaIntegrator0.getEvaluations());
      
      Collection<EventHandler> collection0 = classicalRungeKuttaIntegrator0.getEventHandlers();
      assertNotNull(collection0);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(2147483647, classicalRungeKuttaIntegrator0.getMaxEvaluations());
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(0, classicalRungeKuttaIntegrator0.getEvaluations());
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = (-2392);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((double) int0, (double) int0, (double) int0, (double) int0);
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(2392.0, dormandPrince853Integrator0.getMinStep(), 0.01D);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01D);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01D);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01D);
      assertEquals(2392.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(0, dormandPrince853Integrator0.getEvaluations());
      assertEquals(2392.0, dormandPrince853Integrator0.getMaxStep(), 0.01D);
      assertEquals(2147483647, dormandPrince853Integrator0.getMaxEvaluations());
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01D);
      
      EventHandler eventHandler0 = null;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((double) int0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-2392.0), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      
      EventState eventState0 = new EventState(eventHandler0, (double) int0, (double) int0, int0, (UnivariateSolver) regulaFalsiSolver0);
      assertNotNull(eventState0);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-2392.0), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-2392.0), eventState0.getMaxCheckInterval(), 0.01D);
      assertEquals(2392.0, eventState0.getConvergence(), 0.01D);
      assertEquals(false, eventState0.stop());
      assertEquals(Double.NEGATIVE_INFINITY, eventState0.getEventTime(), 0.01D);
      assertEquals(-2392, eventState0.getMaxIterationCount());
      
      EventHandler eventHandler1 = eventState0.getEventHandler();
      assertNull(eventHandler1);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-2392.0), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-2392.0), eventState0.getMaxCheckInterval(), 0.01D);
      assertEquals(2392.0, eventState0.getConvergence(), 0.01D);
      assertEquals(false, eventState0.stop());
      assertEquals(Double.NEGATIVE_INFINITY, eventState0.getEventTime(), 0.01D);
      assertEquals(-2392, eventState0.getMaxIterationCount());
      
      dormandPrince853Integrator0.addEventHandler(eventHandler1, (double) int0, (double) int0, int0);
      assertEquals(2392.0, dormandPrince853Integrator0.getMinStep(), 0.01D);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01D);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01D);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01D);
      assertEquals(2392.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(0, dormandPrince853Integrator0.getEvaluations());
      assertEquals(2392.0, dormandPrince853Integrator0.getMaxStep(), 0.01D);
      assertEquals(2147483647, dormandPrince853Integrator0.getMaxEvaluations());
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-2392.0), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-2392.0), eventState0.getMaxCheckInterval(), 0.01D);
      assertEquals(2392.0, eventState0.getConvergence(), 0.01D);
      assertEquals(false, eventState0.stop());
      assertEquals(Double.NEGATIVE_INFINITY, eventState0.getEventTime(), 0.01D);
      assertEquals(-2392, eventState0.getMaxIterationCount());
  }

  @Test
  public void test03()  throws Throwable  {
      double double0 = 0.0;
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(double0);
      assertNotNull(threeEighthesIntegrator0);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0, threeEighthesIntegrator0.getEvaluations());
      assertEquals(2147483647, threeEighthesIntegrator0.getMaxEvaluations());
      
      double[] doubleArray0 = new double[3];
      // Undeclared exception!
      try {
        threeEighthesIntegrator0.computeDerivatives(double0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      double double0 = (-95.34369635293);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(double0, double0, double0, double0);
      assertNotNull(highamHall54Integrator0);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(95.34369635293, highamHall54Integrator0.getMinStep(), 0.01D);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01D);
      assertEquals(95.34369635293, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(0, highamHall54Integrator0.getEvaluations());
      assertEquals(2147483647, highamHall54Integrator0.getMaxEvaluations());
      assertEquals(95.34369635293, highamHall54Integrator0.getMaxStep(), 0.01D);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01D);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01D);
      
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      assertNotNull(dummyStepHandler0);
      
      highamHall54Integrator0.addStepHandler((StepHandler) dummyStepHandler0);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(95.34369635293, highamHall54Integrator0.getMinStep(), 0.01D);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01D);
      assertEquals(95.34369635293, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(0, highamHall54Integrator0.getEvaluations());
      assertEquals(2147483647, highamHall54Integrator0.getMaxEvaluations());
      assertEquals(95.34369635293, highamHall54Integrator0.getMaxStep(), 0.01D);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01D);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01D);
  }

  @Test
  public void test05()  throws Throwable  {
      double double0 = (-2864.849762);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(double0);
      assertNotNull(classicalRungeKuttaIntegrator0);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(0, classicalRungeKuttaIntegrator0.getEvaluations());
      assertEquals(2147483647, classicalRungeKuttaIntegrator0.getMaxEvaluations());
      
      classicalRungeKuttaIntegrator0.clearStepHandlers();
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(0, classicalRungeKuttaIntegrator0.getEvaluations());
      assertEquals(2147483647, classicalRungeKuttaIntegrator0.getMaxEvaluations());
  }

  @Test
  public void test06()  throws Throwable  {
      double double0 = (-2864.849762);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(double0);
      assertNotNull(threeEighthesIntegrator0);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(2147483647, threeEighthesIntegrator0.getMaxEvaluations());
      assertEquals(0, threeEighthesIntegrator0.getEvaluations());
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01D);
      
      int int0 = threeEighthesIntegrator0.getEvaluations();
      assertEquals(0, int0);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(2147483647, threeEighthesIntegrator0.getMaxEvaluations());
      assertEquals(0, threeEighthesIntegrator0.getEvaluations());
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01D);
  }

  @Test
  public void test07()  throws Throwable  {
      double double0 = (-4051.0761080134);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(double0, double0, double0, double0);
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(4051.0761080134, dormandPrince853Integrator0.getMinStep(), 0.01D);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01D);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01D);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01D);
      assertEquals(4051.0761080134, dormandPrince853Integrator0.getMaxStep(), 0.01D);
      assertEquals(0, dormandPrince853Integrator0.getEvaluations());
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01D);
      assertEquals(4051.0761080134, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(2147483647, dormandPrince853Integrator0.getMaxEvaluations());
      
      int int0 = dormandPrince853Integrator0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(4051.0761080134, dormandPrince853Integrator0.getMinStep(), 0.01D);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01D);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01D);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01D);
      assertEquals(4051.0761080134, dormandPrince853Integrator0.getMaxStep(), 0.01D);
      assertEquals(0, dormandPrince853Integrator0.getEvaluations());
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01D);
      assertEquals(4051.0761080134, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(2147483647, dormandPrince853Integrator0.getMaxEvaluations());
  }

  @Test
  public void test08()  throws Throwable  {
      double double0 = (-2864.849762);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(double0);
      assertNotNull(threeEighthesIntegrator0);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(0, threeEighthesIntegrator0.getEvaluations());
      assertEquals(2147483647, threeEighthesIntegrator0.getMaxEvaluations());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      
      threeEighthesIntegrator0.clearEventHandlers();
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(0, threeEighthesIntegrator0.getEvaluations());
      assertEquals(2147483647, threeEighthesIntegrator0.getMaxEvaluations());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
  }

  @Test
  public void test09()  throws Throwable  {
      double double0 = (-2864.849762);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(double0);
      assertNotNull(classicalRungeKuttaIntegrator0);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(2147483647, classicalRungeKuttaIntegrator0.getMaxEvaluations());
      assertEquals(0, classicalRungeKuttaIntegrator0.getEvaluations());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      
      Collection<StepHandler> collection0 = classicalRungeKuttaIntegrator0.getStepHandlers();
      assertNotNull(collection0);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(2147483647, classicalRungeKuttaIntegrator0.getMaxEvaluations());
      assertEquals(0, classicalRungeKuttaIntegrator0.getEvaluations());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
  }

  @Test
  public void test10()  throws Throwable  {
      double double0 = (-95.34369635293);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(double0);
      assertNotNull(threeEighthesIntegrator0);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0, threeEighthesIntegrator0.getEvaluations());
      assertEquals(2147483647, threeEighthesIntegrator0.getMaxEvaluations());
      
      double double1 = threeEighthesIntegrator0.getCurrentSignedStepsize();
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0, threeEighthesIntegrator0.getEvaluations());
      assertEquals(2147483647, threeEighthesIntegrator0.getMaxEvaluations());
  }

  @Test
  public void test11()  throws Throwable  {
      double double0 = (-2864.849762);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(double0);
      assertNotNull(threeEighthesIntegrator0);
      assertEquals(0, threeEighthesIntegrator0.getEvaluations());
      assertEquals(2147483647, threeEighthesIntegrator0.getMaxEvaluations());
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01D);
      
      String string0 = threeEighthesIntegrator0.getName();
      assertEquals("3/8", string0);
      assertNotNull(string0);
      assertEquals(0, threeEighthesIntegrator0.getEvaluations());
      assertEquals(2147483647, threeEighthesIntegrator0.getMaxEvaluations());
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      double double0 = 0.0;
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(double0);
      assertNotNull(threeEighthesIntegrator0);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(0, threeEighthesIntegrator0.getEvaluations());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(2147483647, threeEighthesIntegrator0.getMaxEvaluations());
      
      double double1 = threeEighthesIntegrator0.getCurrentStepStart();
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(0, threeEighthesIntegrator0.getEvaluations());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(2147483647, threeEighthesIntegrator0.getMaxEvaluations());
      
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(double0);
      assertFalse(double0 == double1);
      assertNotNull(midpointIntegrator0);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(2147483647, midpointIntegrator0.getMaxEvaluations());
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(0, midpointIntegrator0.getEvaluations());
      
      EventHandler eventHandler0 = null;
      int int0 = 1;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertNotNull(regulaFalsiSolver0);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      
      midpointIntegrator0.addEventHandler(eventHandler0, double1, double1, int0, (UnivariateSolver) regulaFalsiSolver0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(0, threeEighthesIntegrator0.getEvaluations());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(2147483647, threeEighthesIntegrator0.getMaxEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(2147483647, midpointIntegrator0.getMaxEvaluations());
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(0, midpointIntegrator0.getEvaluations());
  }
}
