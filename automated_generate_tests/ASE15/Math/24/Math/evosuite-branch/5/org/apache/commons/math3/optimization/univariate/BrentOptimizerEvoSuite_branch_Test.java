/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 07:26:51 GMT 2014
 */

package org.apache.commons.math3.optimization.univariate;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Cosh;
import org.apache.commons.math3.analysis.function.Expm1;
import org.apache.commons.math3.analysis.function.Inverse;
import org.apache.commons.math3.analysis.function.Sin;
import org.apache.commons.math3.analysis.function.Sinc;
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.apache.commons.math3.exception.NumberIsTooSmallException;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.univariate.BrentOptimizer;
import org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class BrentOptimizerEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      double double0 = 6.923209420670962E-8;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertNotNull(brentOptimizer0);
      
      double double1 = brentOptimizer0.getMax();
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
      
      int int0 = 781;
      Cosh cosh0 = new Cosh();
      assertNotNull(cosh0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      double double2 = (-695.6277544720992);
      assertFalse(double2 == double1);
      
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) cosh0, goalType0, double1, double2);
      assertEquals((-695.6276871617027), univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(6.400825650497396E301, univariatePointValuePair0.getValue(), 0.01D);
      assertEquals((-347.8138772360496), brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(GoalType.MAXIMIZE, brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(781, brentOptimizer0.getMaxEvaluations());
      assertEquals((-695.6277544720992), brentOptimizer0.getMax(), 0.01D);
      assertEquals(33, brentOptimizer0.getEvaluations());
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertNotNull(univariatePointValuePair0);
  }

  @Test
  public void test1()  throws Throwable  {
      double double0 = 6.923209420670962E-8;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertNotNull(brentOptimizer0);
      
      int int0 = 795;
      boolean boolean0 = false;
      Sinc sinc0 = new Sinc(boolean0);
      assertNotNull(sinc0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) sinc0, goalType0, double0, (double) int0);
      assertEquals(6.923209420670962E-8, brentOptimizer0.getMin(), 0.01D);
      assertEquals(795, brentOptimizer0.getMaxEvaluations());
      assertEquals(21, brentOptimizer0.getEvaluations());
      assertEquals(GoalType.MAXIMIZE, brentOptimizer0.getGoalType());
      assertEquals(397.50000003461605, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(795.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.002686169067185637, univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(372.27601745214497, univariatePointValuePair0.getPoint(), 0.01D);
      assertNotNull(univariatePointValuePair0);
  }

  @Test
  public void test2()  throws Throwable  {
      double double0 = 6.923209420670962E-8;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertNotNull(brentOptimizer0);
      
      int int0 = 795;
      boolean boolean0 = false;
      Sinc sinc0 = new Sinc(boolean0);
      assertNotNull(sinc0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      double double1 = (-2842.02860854);
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) sinc0, goalType0, double1, (double) int0, double1);
      assertEquals(24, brentOptimizer0.getEvaluations());
      assertEquals((-2842.02860854), brentOptimizer0.getMin(), 0.01D);
      assertEquals(795.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(795, brentOptimizer0.getMaxEvaluations());
      assertEquals((-2842.02860854), brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(GoalType.MAXIMIZE, brentOptimizer0.getGoalType());
      assertEquals(7.5339639412465E-4, univariatePointValuePair0.getValue(), 0.01D);
      assertEquals((-1327.3221380886432), univariatePointValuePair0.getPoint(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertNotNull(univariatePointValuePair0);
  }

  @Test
  public void test3()  throws Throwable  {
      double double0 = 2.800552834259E-8;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertNotNull(brentOptimizer0);
      
      int int0 = 658;
      Sin sin0 = new Sin();
      assertNotNull(sin0);
      
      UnivariateFunction univariateFunction0 = sin0.derivative();
      assertNotNull(univariateFunction0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, univariateFunction0, goalType0, (double) int0, double0);
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertEquals(2.800552834259E-8, brentOptimizer0.getMax(), 0.01D);
      assertEquals(18, brentOptimizer0.getEvaluations());
      assertEquals(658, brentOptimizer0.getMaxEvaluations());
      assertEquals(329.00000001400275, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(658.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(436.6813904837532, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals((-0.999999999932316), univariatePointValuePair0.getValue(), 0.01D);
      assertNotNull(univariatePointValuePair0);
  }

  @Test
  public void test4()  throws Throwable  {
      double double0 = 2.800552834259E-8;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertNotNull(brentOptimizer0);
      
      int int0 = 658;
      Sin sin0 = new Sin();
      assertNotNull(sin0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) sin0, goalType0, (double) int0, double0);
      assertEquals(538.7831393131916, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals((-0.9999999999996978), univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(658, brentOptimizer0.getMaxEvaluations());
      assertEquals(329.00000001400275, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(2.800552834259E-8, brentOptimizer0.getMax(), 0.01D);
      assertEquals(20, brentOptimizer0.getEvaluations());
      assertEquals(658.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertNotNull(univariatePointValuePair0);
  }

  @Test
  public void test5()  throws Throwable  {
      double double0 = 2.800552834259E-8;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertNotNull(brentOptimizer0);
      
      int int0 = 658;
      Expm1 expm1_0 = new Expm1();
      assertNotNull(expm1_0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) expm1_0, goalType0, double0, (double) int0);
      assertEquals(87, brentOptimizer0.getEvaluations());
      assertEquals(2.800552834259E-8, brentOptimizer0.getMin(), 0.01D);
      assertEquals(658, brentOptimizer0.getMaxEvaluations());
      assertEquals(329.00000001400275, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertEquals(658.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(7.330939880609915E-8, univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(7.33093961189653E-8, univariatePointValuePair0.getPoint(), 0.01D);
      assertNotNull(univariatePointValuePair0);
  }

  @Test
  public void test6()  throws Throwable  {
      double double0 = 502.3865801;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertNotNull(brentOptimizer0);
      
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      double double1 = brentOptimizer0.getMax();
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
      
      int int0 = 760;
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) inverse0, goalType0, double0, double0, double1);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(1, brentOptimizer0.getEvaluations());
      assertEquals(GoalType.MAXIMIZE, brentOptimizer0.getGoalType());
      assertEquals(502.3865801, brentOptimizer0.getMax(), 0.01D);
      assertEquals(760, brentOptimizer0.getMaxEvaluations());
      assertEquals(502.3865801, brentOptimizer0.getMin(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(0.0, univariatePointValuePair0.getPoint(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertNotNull(univariatePointValuePair0);
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 658;
      double double0 = 0.0;
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer((double) int0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      double double0 = 6.923209420670962E-8;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertNotNull(brentOptimizer0);
      
      double double1 = brentOptimizer0.getMax();
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
      
      BrentOptimizer brentOptimizer1 = null;
      try {
        brentOptimizer1 = new BrentOptimizer(double1, double1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than the minimum (0)
         //
      }
  }
}
