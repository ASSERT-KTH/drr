/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 07:16:20 GMT 2014
 */

package org.apache.commons.math3.optimization.univariate;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Sinc;
import org.apache.commons.math3.analysis.function.Tanh;
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.apache.commons.math3.exception.NumberIsTooSmallException;
import org.apache.commons.math3.optimization.ConvergenceChecker;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.univariate.BrentOptimizer;
import org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class BrentOptimizerEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      double double0 = 2.0829952491625585E-8;
      ConvergenceChecker<UnivariatePointValuePair> convergenceChecker0 = null;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0, convergenceChecker0);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertNotNull(brentOptimizer0);
      
      boolean boolean0 = true;
      Sinc sinc0 = new Sinc(boolean0);
      assertNotNull(sinc0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      double double1 = (-2481.677818772661);
      double double2 = sinc0.value(double0);
      assertEquals(0.9999999999999993, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      
      int int0 = 120;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) sinc0, goalType0, double1, double2, (double) int0);
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertEquals(120, brentOptimizer0.getMaxEvaluations());
      assertEquals(16, brentOptimizer0.getEvaluations());
      assertEquals((-2481.677818772661), brentOptimizer0.getMin(), 0.01D);
      assertEquals(120.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.9999999999999993, brentOptimizer0.getMax(), 0.01D);
      assertEquals((-3.159403489453952E-4), univariatePointValuePair0.getValue(), 0.01D);
      assertEquals((-1007.4999174143718), univariatePointValuePair0.getPoint(), 0.01D);
      assertNotNull(univariatePointValuePair0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test1()  throws Throwable  {
      double double0 = 2.0829952491625585E-8;
      ConvergenceChecker<UnivariatePointValuePair> convergenceChecker0 = null;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0, convergenceChecker0);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertNotNull(brentOptimizer0);
      
      int int0 = 726;
      boolean boolean0 = true;
      Sinc sinc0 = new Sinc(boolean0);
      assertNotNull(sinc0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      double double1 = (-2481.677818772661);
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) sinc0, goalType0, double0, double1);
      assertEquals((-978.4999158371833), univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(3.2530393708302455E-4, univariatePointValuePair0.getValue(), 0.01D);
      assertEquals((-2481.677818772661), brentOptimizer0.getMax(), 0.01D);
      assertEquals(726, brentOptimizer0.getMaxEvaluations());
      assertEquals(17, brentOptimizer0.getEvaluations());
      assertEquals((-1240.8389093759156), brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(GoalType.MAXIMIZE, brentOptimizer0.getGoalType());
      assertEquals(2.0829952491625585E-8, brentOptimizer0.getMin(), 0.01D);
      assertNotNull(univariatePointValuePair0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test2()  throws Throwable  {
      double double0 = 2.0829952491625585E-8;
      ConvergenceChecker<UnivariatePointValuePair> convergenceChecker0 = null;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0, convergenceChecker0);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertNotNull(brentOptimizer0);
      
      int int0 = 726;
      boolean boolean0 = true;
      Sinc sinc0 = new Sinc(boolean0);
      assertNotNull(sinc0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      double double1 = 2899.9932275162;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) sinc0, goalType0, double0, double1, double0);
      assertEquals(0.9999999999999941, univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(6.018855690083897E-8, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(2899.9932275162, brentOptimizer0.getMax(), 0.01D);
      assertEquals(726, brentOptimizer0.getMaxEvaluations());
      assertEquals(2.0829952491625585E-8, brentOptimizer0.getMin(), 0.01D);
      assertEquals(GoalType.MAXIMIZE, brentOptimizer0.getGoalType());
      assertEquals(27, brentOptimizer0.getEvaluations());
      assertEquals(2.0829952491625585E-8, brentOptimizer0.getStartValue(), 0.01D);
      assertNotNull(univariatePointValuePair0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test3()  throws Throwable  {
      double double0 = 2.0829952491625585E-8;
      ConvergenceChecker<UnivariatePointValuePair> convergenceChecker0 = null;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0, convergenceChecker0);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertNull(brentOptimizer0.getGoalType());
      assertNotNull(brentOptimizer0);
      
      int int0 = 726;
      boolean boolean0 = true;
      Sinc sinc0 = new Sinc(boolean0);
      assertNotNull(sinc0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) sinc0, goalType0, (double) int0, double0, double0);
      assertEquals(2.0829952491625585E-8, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(24, brentOptimizer0.getEvaluations());
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertEquals(726, brentOptimizer0.getMaxEvaluations());
      assertEquals(726.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(2.0829952491625585E-8, brentOptimizer0.getMax(), 0.01D);
      assertEquals((-0.0018560375186098467), univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(171.49941188515524, univariatePointValuePair0.getPoint(), 0.01D);
      assertNotNull(univariatePointValuePair0);
  }

  @Test
  public void test4()  throws Throwable  {
      double double0 = 2.0829952491625585E-8;
      ConvergenceChecker<UnivariatePointValuePair> convergenceChecker0 = null;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0, convergenceChecker0);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertNotNull(brentOptimizer0);
      
      int int0 = 726;
      boolean boolean0 = true;
      Sinc sinc0 = new Sinc(boolean0);
      assertNotNull(sinc0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) sinc0, goalType0, double0, double0);
      assertEquals(2.0829952491625585E-8, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(0.9999999999999993, univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(1, brentOptimizer0.getEvaluations());
      assertEquals(GoalType.MAXIMIZE, brentOptimizer0.getGoalType());
      assertEquals(726, brentOptimizer0.getMaxEvaluations());
      assertEquals(2.0829952491625585E-8, brentOptimizer0.getMax(), 0.01D);
      assertEquals(2.0829952491625585E-8, brentOptimizer0.getMin(), 0.01D);
      assertEquals(2.0829952491625585E-8, brentOptimizer0.getStartValue(), 0.01D);
      assertNotNull(univariatePointValuePair0);
  }

  @Test
  public void test5()  throws Throwable  {
      double double0 = 5.386934883601273;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertNotNull(brentOptimizer0);
      
      int int0 = 1793;
      Tanh tanh0 = new Tanh();
      assertNotNull(tanh0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) tanh0, goalType0, double0, (double) int0, double0);
      assertEquals(1793.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(5.386934883601273, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(1793, brentOptimizer0.getMaxEvaluations());
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertEquals(5.386934883601273, brentOptimizer0.getMin(), 0.01D);
      assertEquals(5, brentOptimizer0.getEvaluations());
      assertEquals(1.0, univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(105.00719666308751, univariatePointValuePair0.getPoint(), 0.01D);
      assertNotNull(univariatePointValuePair0);
  }

  @Test
  public void test6()  throws Throwable  {
      double double0 = 5.386934883601273;
      double double1 = (-2093.0943940627494);
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer(double0, double1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,093.094 is smaller than, or equal to, the minimum (0)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      double double0 = 2.0829952491625585E-8;
      ConvergenceChecker<UnivariatePointValuePair> convergenceChecker0 = null;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0, convergenceChecker0);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertNotNull(brentOptimizer0);
      
      double double1 = (-2481.677818772661);
      ConvergenceChecker<UnivariatePointValuePair> convergenceChecker1 = brentOptimizer0.getConvergenceChecker();
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertNull(convergenceChecker1);
      assertFalse(double0 == double1);
      
      BrentOptimizer brentOptimizer1 = null;
      try {
        brentOptimizer1 = new BrentOptimizer(double1, double1, convergenceChecker1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,481.678 is smaller than the minimum (0)
         //
      }
  }
}
