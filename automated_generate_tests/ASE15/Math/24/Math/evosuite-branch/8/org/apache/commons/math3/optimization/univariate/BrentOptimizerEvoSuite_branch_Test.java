/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:13:25 GMT 2014
 */

package org.apache.commons.math3.optimization.univariate;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Acosh;
import org.apache.commons.math3.analysis.function.Gaussian;
import org.apache.commons.math3.analysis.function.Sinc;
import org.apache.commons.math3.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.apache.commons.math3.exception.NumberIsTooSmallException;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.univariate.BrentOptimizer;
import org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair;



import org.junit.runner.RunWith;


public class BrentOptimizerEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      double double0 = 920.24384;
      double double1 = 1.0;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double1);
      assertNotNull(brentOptimizer0);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = brentOptimizer0.getMin();
      assertEquals(0.0, double2, 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      
      int int0 = 2308;
      double[] doubleArray0 = new double[10];
      doubleArray0[2] = (double) int0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 2308.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, polynomialFunction0.degree());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) polynomialFunction0, goalType0, doubleArray0[2], double2, double2);
      assertNotNull(univariatePointValuePair0);
      assertArrayEquals(new double[] {0.0, 0.0, 2308.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2308, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertEquals(2308.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(7, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(1.0, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(2308.0, univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(2, polynomialFunction0.degree());
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test1()  throws Throwable  {
      double double0 = 1.1921056801463227E-8;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertNotNull(brentOptimizer0);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      
      int int0 = 263;
      boolean boolean0 = true;
      Sinc sinc0 = new Sinc(boolean0);
      assertNotNull(sinc0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) sinc0, goalType0, (double) int0, double0);
      assertNotNull(univariatePointValuePair0);
      assertEquals(263, brentOptimizer0.getMaxEvaluations());
      assertEquals(131.50000000596052, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(1.1921056801463227E-8, brentOptimizer0.getMax(), 0.01D);
      assertEquals(19, brentOptimizer0.getEvaluations());
      assertEquals(263.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertEquals(69.49854152673771, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals((-0.004580046399344815), univariatePointValuePair0.getValue(), 0.01D);
  }

  @Test
  public void test2()  throws Throwable  {
      double double0 = 1.1921056801463227E-8;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertNotNull(brentOptimizer0);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertNull(brentOptimizer0.getGoalType());
      
      int int0 = 238;
      Acosh acosh0 = new Acosh();
      assertNotNull(acosh0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) acosh0, goalType0, (double) int0, double0);
      assertNotNull(univariatePointValuePair0);
      assertEquals(38, brentOptimizer0.getEvaluations());
      assertEquals(1.1921056801463227E-8, brentOptimizer0.getMax(), 0.01D);
      assertEquals(238, brentOptimizer0.getMaxEvaluations());
      assertEquals(238.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(119.00000000596053, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(GoalType.MAXIMIZE, brentOptimizer0.getGoalType());
      assertEquals(237.99999708173942, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(6.165413428410376, univariatePointValuePair0.getValue(), 0.01D);
  }

  @Test
  public void test3()  throws Throwable  {
      double double0 = 1.1921056801463227E-8;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertNotNull(brentOptimizer0);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      
      int int0 = 263;
      boolean boolean0 = true;
      Sinc sinc0 = new Sinc(boolean0);
      assertNotNull(sinc0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      double double1 = 759.78539146;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) sinc0, goalType0, double0, double1);
      assertNotNull(univariatePointValuePair0);
      assertEquals(423.49976409186553, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals((-7.516174169480105E-4), univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(379.8926957359605, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(263, brentOptimizer0.getMaxEvaluations());
      assertEquals(17, brentOptimizer0.getEvaluations());
      assertEquals(1.1921056801463227E-8, brentOptimizer0.getMin(), 0.01D);
      assertEquals(759.78539146, brentOptimizer0.getMax(), 0.01D);
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test4()  throws Throwable  {
      double double0 = 1.1921056801463227E-8;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertNotNull(brentOptimizer0);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0, brentOptimizer0.getEvaluations());
      
      int int0 = 263;
      boolean boolean0 = true;
      Sinc sinc0 = new Sinc(boolean0);
      assertNotNull(sinc0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) sinc0, goalType0, double0, double0);
      assertNotNull(univariatePointValuePair0);
      assertEquals(0.9999999999999998, univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(1.1921056801463227E-8, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(1.1921056801463227E-8, brentOptimizer0.getMin(), 0.01D);
      assertEquals(263, brentOptimizer0.getMaxEvaluations());
      assertEquals(1.1921056801463227E-8, brentOptimizer0.getMax(), 0.01D);
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertEquals(1.1921056801463227E-8, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(1, brentOptimizer0.getEvaluations());
  }

  @Test
  public void test5()  throws Throwable  {
      double double0 = 0.7328412617563972;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(double0, double0);
      assertNotNull(brentOptimizer0);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      
      int int0 = 328;
      Gaussian gaussian0 = new Gaussian((double) int0, (double) int0, double0);
      assertNotNull(gaussian0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(int0, (UnivariateFunction) gaussian0, goalType0, (double) int0, (double) int0, double0);
      assertNotNull(univariatePointValuePair0);
      assertEquals(125.73777249815828, univariatePointValuePair0.getPoint(), 0.01D);
      assertEquals(0.0, univariatePointValuePair0.getValue(), 0.01D);
      assertEquals(328, brentOptimizer0.getMaxEvaluations());
      assertEquals(3, brentOptimizer0.getEvaluations());
      assertEquals(328.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.7328412617563972, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(328.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(GoalType.MAXIMIZE, brentOptimizer0.getGoalType());
  }

  @Test
  public void test6()  throws Throwable  {
      double double0 = 0.7328412617563972;
      double double1 = (-1588.2766559637319);
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer(double0, double1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,588.277 is smaller than, or equal to, the minimum (0)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      double double0 = 1.1921056801463227E-8;
      double double1 = (-1293.0);
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer(double1, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,293 is smaller than the minimum (0)
         //
      }
  }
}
