/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:17:55 GMT 2014
 */

package org.apache.commons.math.fraction;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.fraction.Fraction;
import org.apache.commons.math.fraction.FractionConversionException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;


public class FractionEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      int int1 = (-360);
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-360, cannot negate
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = (-27);
      int int1 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -27/-2,147,483,648, cannot negate
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Fraction fraction0 = Fraction.getReducedFraction(int0, int0);
      assertNotNull(fraction0);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.divide(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.byteValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.intValue());
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.divide(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals(-1, fraction0.byteValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.intValue());
      
      Fraction fraction1 = Fraction.ZERO;
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction0.multiply(fraction1);
      assertSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction2, fraction0);
      assertSame(fraction2, fraction1);
      assertNotNull(fraction2);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(-1, fraction0.byteValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.intValue());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction2.shortValue());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(1, fraction2.getDenominator());
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction0));
  }

  @Test
  public void test07()  throws Throwable  {
      double double0 = 1.1102230246251565E-16;
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getNumerator());
      
      Fraction fraction1 = fraction0.multiply(fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.byteValue());
      assertTrue(fraction0.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test
  public void test08()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.byteValue());
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.multiply(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      double double0 = (-1299.0914820246562);
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(-411812, fraction0.getNumerator());
      assertEquals((-1299L), fraction0.longValue());
      assertEquals(-1299, fraction0.shortValue());
      assertEquals((-1299.0914826498422), fraction0.doubleValue(), 0.01D);
      assertEquals(317, fraction0.getDenominator());
      assertEquals(-1299, fraction0.intValue());
      assertEquals((-1299.0914F), fraction0.floatValue(), 0.01F);
      assertEquals(-19, fraction0.byteValue());
      
      double double1 = (-2307.88147004);
      Fraction fraction1 = new Fraction(double1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals((-2307L), fraction1.longValue());
      assertEquals(599, fraction1.getDenominator());
      assertEquals(-2307, fraction1.shortValue());
      assertEquals(-2307, fraction1.intValue());
      assertEquals((-2307.8813F), fraction1.floatValue(), 0.01F);
      assertEquals(-1382421, fraction1.getNumerator());
      assertEquals((-2307.881469115192), fraction1.doubleValue(), 0.01D);
      assertEquals(-3, fraction1.byteValue());
      assertFalse(double1 == double0);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction1.divide(fraction0);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotNull(fraction2);
      assertEquals(1.776535F, fraction2.floatValue(), 0.01F);
      assertEquals(1, fraction2.intValue());
      assertEquals(246675388, fraction2.getDenominator());
      assertEquals(1, fraction2.byteValue());
      assertEquals(1, fraction2.shortValue());
      assertEquals(1L, fraction2.longValue());
      assertEquals(1.776534986133274, fraction2.doubleValue(), 0.01D);
      assertEquals(438227457, fraction2.getNumerator());
      assertEquals((-2307L), fraction1.longValue());
      assertEquals(599, fraction1.getDenominator());
      assertEquals(-2307, fraction1.shortValue());
      assertEquals(-2307, fraction1.intValue());
      assertEquals((-2307.8813F), fraction1.floatValue(), 0.01F);
      assertEquals(-1382421, fraction1.getNumerator());
      assertEquals((-2307.881469115192), fraction1.doubleValue(), 0.01D);
      assertEquals(-3, fraction1.byteValue());
      assertEquals(-411812, fraction0.getNumerator());
      assertEquals((-1299L), fraction0.longValue());
      assertEquals(-1299, fraction0.shortValue());
      assertEquals((-1299.0914826498422), fraction0.doubleValue(), 0.01D);
      assertEquals(317, fraction0.getDenominator());
      assertEquals(-1299, fraction0.intValue());
      assertEquals((-1299.0914F), fraction0.floatValue(), 0.01F);
      assertEquals(-19, fraction0.byteValue());
      assertFalse(double1 == double0);
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(double0 == double1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      
      // Undeclared exception!
      try {
        Fraction fraction3 = fraction2.add(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow, numerator too large after multiply: -568,859,329,395
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      double double0 = 2419.0798766855623;
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(313, fraction0.getDenominator());
      assertEquals(2419, fraction0.intValue());
      assertEquals(2419.0798F, fraction0.floatValue(), 0.01F);
      assertEquals(757172, fraction0.getNumerator());
      assertEquals(2419.079872204473, fraction0.doubleValue(), 0.01D);
      assertEquals(115, fraction0.byteValue());
      assertEquals(2419, fraction0.shortValue());
      assertEquals(2419L, fraction0.longValue());
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(313, fraction0.getDenominator());
      assertEquals(2419, fraction0.intValue());
      assertEquals(2419.0798F, fraction0.floatValue(), 0.01F);
      assertEquals(757172, fraction0.getNumerator());
      assertEquals(2419.079872204473, fraction0.doubleValue(), 0.01D);
      assertEquals(115, fraction0.byteValue());
      assertEquals(2419, fraction0.shortValue());
      assertEquals(2419L, fraction0.longValue());
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
  }

  @Test
  public void test11()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1L), fraction0.longValue());
      
      Fraction fraction1 = Fraction.ZERO;
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction0.add(fraction1);
      assertSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction2);
      assertEquals((-1.0), fraction2.doubleValue(), 0.01D);
      assertEquals((-1L), fraction2.longValue());
      assertEquals(-1, fraction2.getNumerator());
      assertEquals((-1.0F), fraction2.floatValue(), 0.01F);
      assertEquals(1, fraction2.getDenominator());
      assertEquals(-1, fraction2.shortValue());
      assertEquals(-1, fraction2.byteValue());
      assertEquals(-1, fraction2.intValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1L), fraction0.longValue());
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
  }

  @Test
  public void test12()  throws Throwable  {
      double double0 = 1.0;
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      
      int int1 = fraction0.getNumerator();
      assertEquals(1, int1);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertFalse(int1 == int0);
      
      Fraction fraction1 = Fraction.getReducedFraction(int0, int1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      Fraction fraction2 = fraction1.add(fraction0);
      assertSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotNull(fraction2);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1L, fraction2.longValue());
      assertEquals(1.0, fraction2.doubleValue(), 0.01D);
      assertEquals(1, fraction2.intValue());
      assertEquals(1, fraction2.getNumerator());
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
      assertEquals(1, fraction2.byteValue());
      assertEquals(1, fraction2.shortValue());
      assertEquals(1, fraction2.getDenominator());
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(int0 == int1);
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(int1 == int0);
  }

  @Test
  public void test13()  throws Throwable  {
      Fraction fraction0 = null;
      Fraction fraction1 = Fraction.MINUS_ONE;
      assertNotNull(fraction1);
      assertEquals(-1, fraction1.byteValue());
      assertEquals(-1, fraction1.shortValue());
      assertEquals((-1L), fraction1.longValue());
      assertEquals(-1, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01D);
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals(-1, fraction1.getNumerator());
      
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction1.add(fraction0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.byteValue());
      
      byte byte0 = fraction0.byteValue();
      assertEquals((byte) (-1), byte0);
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.byteValue());
      
      Fraction fraction1 = new Fraction((double) byte0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
      assertEquals((-1.0), fraction1.doubleValue(), 0.01D);
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-1L), fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(-1, fraction1.intValue());
      assertEquals(-1, fraction1.getNumerator());
      assertEquals(-1, fraction1.byteValue());
      assertEquals(-1, fraction1.shortValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.byteValue());
      assertTrue(fraction1.equals((Object)fraction0));
      assertTrue(fraction0.equals((Object)fraction1));
      
      boolean boolean0 = fraction0.equals((Object) fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertTrue(boolean0);
      assertEquals((-1.0), fraction1.doubleValue(), 0.01D);
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-1L), fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(-1, fraction1.intValue());
      assertEquals(-1, fraction1.getNumerator());
      assertEquals(-1, fraction1.byteValue());
      assertEquals(-1, fraction1.shortValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.byteValue());
      assertTrue(fraction1.equals((Object)fraction0));
      assertTrue(fraction0.equals((Object)fraction1));
  }

  @Test
  public void test15()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      
      Fraction fraction1 = Fraction.TWO;
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(2, fraction1.byteValue());
      assertEquals(2L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(2, fraction1.intValue());
      assertEquals(2.0, fraction1.doubleValue(), 0.01D);
      assertEquals(2, fraction1.shortValue());
      assertEquals(2.0F, fraction1.floatValue(), 0.01F);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction0.divide(fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotNull(fraction2);
      assertEquals(0, fraction2.intValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0, fraction2.shortValue());
      assertEquals(-1, fraction2.getNumerator());
      assertEquals((-0.5), fraction2.doubleValue(), 0.01D);
      assertEquals((-0.5F), fraction2.floatValue(), 0.01F);
      assertEquals(2, fraction2.getDenominator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction1.byteValue());
      assertEquals(2L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(2, fraction1.intValue());
      assertEquals(2.0, fraction1.doubleValue(), 0.01D);
      assertEquals(2, fraction1.shortValue());
      assertEquals(2.0F, fraction1.floatValue(), 0.01F);
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      
      boolean boolean0 = fraction2.equals((Object) fraction0);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertFalse(boolean0);
      assertEquals(0, fraction2.intValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0, fraction2.shortValue());
      assertEquals(-1, fraction2.getNumerator());
      assertEquals((-0.5), fraction2.doubleValue(), 0.01D);
      assertEquals((-0.5F), fraction2.floatValue(), 0.01F);
      assertEquals(2, fraction2.getDenominator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction1.byteValue());
      assertEquals(2L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(2, fraction1.intValue());
      assertEquals(2.0, fraction1.doubleValue(), 0.01D);
      assertEquals(2, fraction1.shortValue());
      assertEquals(2.0F, fraction1.floatValue(), 0.01F);
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
  }

  @Test
  public void test16()  throws Throwable  {
      double double0 = 1.1102230246251565E-16;
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      
      String string0 = null;
      boolean boolean0 = fraction0.equals((Object) string0);
      assertFalse(boolean0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
  }

  @Test
  public void test17()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      
      Fraction fraction1 = Fraction.TWO;
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(2.0F, fraction1.floatValue(), 0.01F);
      assertEquals(2L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(2, fraction1.intValue());
      assertEquals(2, fraction1.shortValue());
      assertEquals(2.0, fraction1.doubleValue(), 0.01D);
      assertEquals(2, fraction1.byteValue());
      assertFalse(fraction1.equals((Object)fraction0));
      
      boolean boolean0 = fraction1.equals((Object) fraction0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertFalse(boolean0);
      assertEquals(2.0F, fraction1.floatValue(), 0.01F);
      assertEquals(2L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(2, fraction1.intValue());
      assertEquals(2, fraction1.shortValue());
      assertEquals(2.0, fraction1.doubleValue(), 0.01D);
      assertEquals(2, fraction1.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
  }

  @Test
  public void test18()  throws Throwable  {
      double double0 = 2.0;
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(2, fraction0.shortValue());
      assertEquals(2, fraction0.intValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.byteValue());
      assertEquals(2L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2, fraction0.getNumerator());
      
      Fraction fraction1 = Fraction.MINUS_ONE;
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(-1, fraction1.byteValue());
      assertEquals(-1, fraction1.intValue());
      assertEquals(-1, fraction1.getNumerator());
      assertEquals(-1, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-1.0), fraction1.doubleValue(), 0.01D);
      assertEquals((-1L), fraction1.longValue());
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction2);
      assertEquals(1, fraction2.getDenominator());
      assertEquals(3.0F, fraction2.floatValue(), 0.01F);
      assertEquals(3, fraction2.shortValue());
      assertEquals(3, fraction2.intValue());
      assertEquals(3, fraction2.getNumerator());
      assertEquals(3.0, fraction2.doubleValue(), 0.01D);
      assertEquals(3, fraction2.byteValue());
      assertEquals(3L, fraction2.longValue());
      assertEquals(2, fraction0.shortValue());
      assertEquals(2, fraction0.intValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.byteValue());
      assertEquals(2L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(-1, fraction1.byteValue());
      assertEquals(-1, fraction1.intValue());
      assertEquals(-1, fraction1.getNumerator());
      assertEquals(-1, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-1.0), fraction1.doubleValue(), 0.01D);
      assertEquals((-1L), fraction1.longValue());
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      
      int int0 = fraction2.compareTo(fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertEquals(1, int0);
      assertEquals(1, fraction2.getDenominator());
      assertEquals(3.0F, fraction2.floatValue(), 0.01F);
      assertEquals(3, fraction2.shortValue());
      assertEquals(3, fraction2.intValue());
      assertEquals(3, fraction2.getNumerator());
      assertEquals(3.0, fraction2.doubleValue(), 0.01D);
      assertEquals(3, fraction2.byteValue());
      assertEquals(3L, fraction2.longValue());
      assertEquals(2, fraction0.shortValue());
      assertEquals(2, fraction0.intValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.byteValue());
      assertEquals(2L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(-1, fraction1.byteValue());
      assertEquals(-1, fraction1.intValue());
      assertEquals(-1, fraction1.getNumerator());
      assertEquals(-1, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-1.0), fraction1.doubleValue(), 0.01D);
      assertEquals((-1L), fraction1.longValue());
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test
  public void test19()  throws Throwable  {
      double double0 = 2.0;
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.intValue());
      assertEquals(2, fraction0.shortValue());
      assertEquals(2L, fraction0.longValue());
      assertEquals(2, fraction0.byteValue());
      assertEquals(2, fraction0.getNumerator());
      
      Fraction fraction1 = Fraction.MINUS_ONE;
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals((-1.0), fraction1.doubleValue(), 0.01D);
      assertEquals(-1, fraction1.getNumerator());
      assertEquals(-1, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(-1, fraction1.byteValue());
      assertEquals((-1L), fraction1.longValue());
      assertEquals(-1, fraction1.intValue());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertFalse(fraction1.equals((Object)fraction0));
      
      int int0 = fraction1.compareTo(fraction0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals((-1), int0);
      assertEquals((-1.0), fraction1.doubleValue(), 0.01D);
      assertEquals(-1, fraction1.getNumerator());
      assertEquals(-1, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(-1, fraction1.byteValue());
      assertEquals((-1L), fraction1.longValue());
      assertEquals(-1, fraction1.intValue());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.intValue());
      assertEquals(2, fraction0.shortValue());
      assertEquals(2L, fraction0.longValue());
      assertEquals(2, fraction0.byteValue());
      assertEquals(2, fraction0.getNumerator());
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
  }

  @Test
  public void test20()  throws Throwable  {
      double double0 = 1.0;
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      
      Fraction fraction1 = fraction0.abs();
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.intValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1L, fraction1.longValue());
  }

  @Test
  public void test21()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Fraction fraction0 = new Fraction((double) int0);
      assertNotNull(fraction0);
      assertEquals((-2.14748365E9F), fraction0.floatValue(), 0.01F);
      assertEquals((-2.147483648E9), fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-2147483648, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(-2147483648, fraction0.intValue());
      assertEquals((-2147483648L), fraction0.longValue());
      
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.abs();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1, cannot negate
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Fraction fraction0 = new Fraction((double) int0);
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals((-2147483648L), fraction0.longValue());
      assertEquals((-2.147483648E9), fraction0.doubleValue(), 0.01D);
      assertEquals(-2147483648, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(-2147483648, fraction0.intValue());
      assertEquals((-2.14748365E9F), fraction0.floatValue(), 0.01F);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.reciprocal();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 1/-2,147,483,648, cannot negate
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.byteValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      
      byte byte0 = fraction0.byteValue();
      assertEquals((byte) (-1), byte0);
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.byteValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      
      int int0 = Integer.MIN_VALUE;
      Fraction fraction1 = null;
      try {
        fraction1 = new Fraction(int0, (int) byte0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-1, cannot negate
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = 0;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      double double0 = Double.NaN;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(double0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Unable to convert \uFFFD to fraction after 100 iterations
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      double double0 = 2.0;
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.shortValue());
      assertEquals(2, fraction0.intValue());
      assertEquals(2L, fraction0.longValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2, fraction0.byteValue());
      assertEquals(2, fraction0.getNumerator());
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.shortValue());
      assertEquals(2, fraction0.intValue());
      assertEquals(2L, fraction0.longValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2, fraction0.byteValue());
      assertEquals(2, fraction0.getNumerator());
      
      Fraction fraction1 = null;
      try {
        fraction1 = new Fraction(double0, (double) int0, int0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Overflow trying to convert 2 to fraction (-1/9,223,372,036,854,775,807)
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      double double0 = 1.0;
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      
      int int0 = 67;
      int int1 = fraction0.compareTo(fraction0);
      assertEquals(0, int1);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      assertFalse(int1 == int0);
      
      int int2 = fraction0.getNumerator();
      assertEquals(1, int2);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      Fraction fraction1 = null;
      try {
        fraction1 = new Fraction((double) int2, (double) int1, int0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Overflow trying to convert 1 to fraction (-9,223,372,036,854,775,808/9,223,372,036,854,775,807)
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(double0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Overflow trying to convert -\u221E to fraction (-9,223,372,036,854,775,808/1)
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      double double0 = 2.0;
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.shortValue());
      assertEquals(2, fraction0.intValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2L, fraction0.longValue());
      
      long long0 = fraction0.longValue();
      assertEquals(2L, long0);
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.shortValue());
      assertEquals(2, fraction0.intValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2L, fraction0.longValue());
  }

  @Test
  public void test30()  throws Throwable  {
      double double0 = 2.0;
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(2, fraction0.shortValue());
      assertEquals(2L, fraction0.longValue());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.byteValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      
      int int0 = fraction0.hashCode();
      assertEquals(23348, int0);
      assertEquals(2, fraction0.shortValue());
      assertEquals(2L, fraction0.longValue());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.byteValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test
  public void test31()  throws Throwable  {
      int int0 = (-2147483633);
      Fraction fraction0 = new Fraction(int0, int0);
      assertNotNull(fraction0);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      
      float float0 = fraction0.floatValue();
      assertEquals(1.0F, float0, 0.01F);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
  }

  @Test
  public void test32()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-2, fraction1.byteValue());
      assertEquals(-2, fraction1.getNumerator());
      assertEquals(-2, fraction1.intValue());
      assertEquals((-2L), fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-2.0F), fraction1.floatValue(), 0.01F);
      assertEquals(-2, fraction1.shortValue());
      assertEquals((-2.0), fraction1.doubleValue(), 0.01D);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test
  public void test33()  throws Throwable  {
      double double0 = 1.1102230246251565E-16;
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertTrue(fraction0.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test
  public void test34()  throws Throwable  {
      int int0 = 936;
      double double0 = 2410.5645516910517;
      Fraction fraction0 = new Fraction(double0, int0);
      assertNotNull(fraction0);
      assertEquals(2410, fraction0.intValue());
      assertEquals(1101628, fraction0.getNumerator());
      assertEquals(457, fraction0.getDenominator());
      assertEquals(106, fraction0.byteValue());
      assertEquals(2410.5645514223193, fraction0.doubleValue(), 0.01D);
      assertEquals(2410, fraction0.shortValue());
      assertEquals(2410.5645F, fraction0.floatValue(), 0.01F);
      assertEquals(2410L, fraction0.longValue());
  }
}
