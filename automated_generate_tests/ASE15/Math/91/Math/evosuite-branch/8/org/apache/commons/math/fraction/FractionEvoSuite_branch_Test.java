/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:30:30 GMT 2014
 */

package org.apache.commons.math.fraction;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.fraction.Fraction;
import org.apache.commons.math.fraction.FractionConversionException;




import org.junit.runner.RunWith;


public class FractionEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      int int1 = (-1350);
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-1,350, cannot negate
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Fraction fraction0 = Fraction.getReducedFraction(int0, int0);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(fraction0);
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = (-2821);
      int int1 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,821/-2,147,483,648, cannot negate
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = 97;
      Fraction fraction0 = new Fraction(int0, int0);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ZERO;
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.divide(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      assertEquals(2, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.byteValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2L, fraction0.longValue());
      assertEquals(2, fraction0.shortValue());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.divide(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1L), fraction0.longValue());
      assertNotNull(fraction0);
      
      int int0 = 1115;
      double double0 = 0.0;
      Fraction fraction1 = new Fraction(double0, (double) int0, int0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = fraction0.multiply(fraction1);
      assertTrue(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0, fraction2.shortValue());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertNotNull(fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = (-1387);
      Fraction fraction0 = new Fraction((double) int0);
      assertEquals((-1387L), fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1387.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1387, fraction0.shortValue());
      assertEquals(-1387, fraction0.getNumerator());
      assertEquals(-107, fraction0.byteValue());
      assertEquals((-1387.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1387, fraction0.intValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ZERO;
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = fraction1.divide(fraction0);
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.shortValue());
      assertEquals((-1387L), fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1387.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1387, fraction0.shortValue());
      assertEquals(-1387, fraction0.getNumerator());
      assertEquals(-107, fraction0.byteValue());
      assertEquals((-1387.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1387, fraction0.intValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertNotNull(fraction2);
      assertNotSame(fraction2, fraction0);
      assertSame(fraction2, fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
  }

  @Test
  public void test08()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.shortValue());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.byteValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.multiply(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      double double0 = (-35.333625719806136);
      Fraction fraction0 = new Fraction(double0);
      assertEquals((-35L), fraction0.longValue());
      assertEquals(1139, fraction0.getDenominator());
      assertEquals(-35, fraction0.intValue());
      assertEquals(-35, fraction0.shortValue());
      assertEquals(-35, fraction0.byteValue());
      assertEquals((-35.333625987708515), fraction0.doubleValue(), 0.01D);
      assertEquals((-35.333626F), fraction0.floatValue(), 0.01F);
      assertEquals(-40245, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(-80490, fraction1.getNumerator());
      assertEquals((-70L), fraction1.longValue());
      assertEquals(-70, fraction1.intValue());
      assertEquals(-70, fraction1.shortValue());
      assertEquals((-70.66725F), fraction1.floatValue(), 0.01F);
      assertEquals(1139, fraction1.getDenominator());
      assertEquals((-70.66725197541703), fraction1.doubleValue(), 0.01D);
      assertEquals(-70, fraction1.byteValue());
      assertEquals((-35L), fraction0.longValue());
      assertEquals(1139, fraction0.getDenominator());
      assertEquals(-35, fraction0.intValue());
      assertEquals(-35, fraction0.shortValue());
      assertEquals(-35, fraction0.byteValue());
      assertEquals((-35.333625987708515), fraction0.doubleValue(), 0.01D);
      assertEquals((-35.333626F), fraction0.floatValue(), 0.01F);
      assertEquals(-40245, fraction0.getNumerator());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
  }

  @Test
  public void test10()  throws Throwable  {
      double double0 = 3758.76;
      Fraction fraction0 = new Fraction(double0);
      assertEquals(3758, fraction0.intValue());
      assertEquals(3758.76F, fraction0.floatValue(), 0.01F);
      assertEquals(3758, fraction0.shortValue());
      assertEquals(3758L, fraction0.longValue());
      assertEquals(25, fraction0.getDenominator());
      assertEquals(-82, fraction0.byteValue());
      assertEquals(93969, fraction0.getNumerator());
      assertEquals(3758.76, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      int int0 = 0;
      int int1 = (-2917);
      Fraction fraction1 = Fraction.getReducedFraction(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(int1 == int0);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = fraction0.add(fraction1);
      assertFalse(int0 == int1);
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(int1 == int0);
      assertEquals(3758.76F, fraction2.floatValue(), 0.01F);
      assertEquals(3758L, fraction2.longValue());
      assertEquals(93969, fraction2.getNumerator());
      assertEquals(-82, fraction2.byteValue());
      assertEquals(3758, fraction2.intValue());
      assertEquals(3758.76, fraction2.doubleValue(), 0.01D);
      assertEquals(25, fraction2.getDenominator());
      assertEquals(3758, fraction2.shortValue());
      assertEquals(3758, fraction0.intValue());
      assertEquals(3758.76F, fraction0.floatValue(), 0.01F);
      assertEquals(3758, fraction0.shortValue());
      assertEquals(3758L, fraction0.longValue());
      assertEquals(25, fraction0.getDenominator());
      assertEquals(-82, fraction0.byteValue());
      assertEquals(93969, fraction0.getNumerator());
      assertEquals(3758.76, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertNotNull(fraction2);
      assertSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction0, fraction1);
      assertSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
  }

  @Test
  public void test11()  throws Throwable  {
      double double0 = 1830.7831105527869;
      Fraction fraction0 = new Fraction(double0);
      assertEquals(38, fraction0.byteValue());
      assertEquals(521, fraction0.getDenominator());
      assertEquals(1830L, fraction0.longValue());
      assertEquals(1830.7831F, fraction0.floatValue(), 0.01F);
      assertEquals(953838, fraction0.getNumerator());
      assertEquals(1830, fraction0.shortValue());
      assertEquals(1830, fraction0.intValue());
      assertEquals(1830.7831094049905, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(38, fraction0.byteValue());
      assertEquals(521, fraction0.getDenominator());
      assertEquals(1830L, fraction0.longValue());
      assertEquals(1830.7831F, fraction0.floatValue(), 0.01F);
      assertEquals(953838, fraction0.getNumerator());
      assertEquals(1830, fraction0.shortValue());
      assertEquals(1830, fraction0.intValue());
      assertEquals(1830.7831094049905, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = fraction1.subtract(fraction0);
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(521, fraction2.getDenominator());
      assertEquals((-1830L), fraction2.longValue());
      assertEquals((-1830.7831F), fraction2.floatValue(), 0.01F);
      assertEquals(-1830, fraction2.intValue());
      assertEquals(-38, fraction2.byteValue());
      assertEquals((-1830.7831094049905), fraction2.doubleValue(), 0.01D);
      assertEquals(-1830, fraction2.shortValue());
      assertEquals(-953838, fraction2.getNumerator());
      assertEquals(38, fraction0.byteValue());
      assertEquals(521, fraction0.getDenominator());
      assertEquals(1830L, fraction0.longValue());
      assertEquals(1830.7831F, fraction0.floatValue(), 0.01F);
      assertEquals(953838, fraction0.getNumerator());
      assertEquals(1830, fraction0.shortValue());
      assertEquals(1830, fraction0.intValue());
      assertEquals(1830.7831094049905, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertNotNull(fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
  }

  @Test
  public void test12()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.byteValue());
      assertNotNull(fraction0);
      
      int int0 = 1115;
      double double0 = 0.0;
      Fraction fraction1 = new Fraction(double0, (double) int0, int0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = fraction1.add(fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1.0), fraction2.doubleValue(), 0.01D);
      assertEquals(1, fraction2.getDenominator());
      assertEquals(-1, fraction2.byteValue());
      assertEquals((-1.0F), fraction2.floatValue(), 0.01F);
      assertEquals(-1, fraction2.intValue());
      assertEquals(-1, fraction2.getNumerator());
      assertEquals((-1L), fraction2.longValue());
      assertEquals(-1, fraction2.shortValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.byteValue());
      assertNotNull(fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = (-1387);
      Fraction fraction0 = new Fraction((double) int0);
      assertEquals(-107, fraction0.byteValue());
      assertEquals(-1387, fraction0.getNumerator());
      assertEquals((-1387L), fraction0.longValue());
      assertEquals((-1387.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1387, fraction0.intValue());
      assertEquals((-1387.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1387, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.subtract(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      int int1 = 31;
      Fraction fraction0 = new Fraction(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(-66, fraction0.byteValue());
      assertEquals(-69273666, fraction0.intValue());
      assertEquals(31, fraction0.getDenominator());
      assertEquals(-2114, fraction0.shortValue());
      assertEquals((-6.9273664E7F), fraction0.floatValue(), 0.01F);
      assertEquals((-6.927366606451613E7), fraction0.doubleValue(), 0.01D);
      assertEquals((-69273666L), fraction0.longValue());
      assertEquals(-2147483648, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/31, cannot negate
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(-2, fraction1.shortValue());
      assertEquals((-2L), fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(-2, fraction1.intValue());
      assertEquals(-2, fraction1.byteValue());
      assertEquals(-2, fraction1.getNumerator());
      assertEquals((-2.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-2.0), fraction1.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      
      Fraction fraction2 = fraction1.reciprocal();
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertEquals(-2, fraction1.shortValue());
      assertEquals((-2L), fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(-2, fraction1.intValue());
      assertEquals(-2, fraction1.byteValue());
      assertEquals(-2, fraction1.getNumerator());
      assertEquals((-2.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-2.0), fraction1.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction2.shortValue());
      assertEquals(2, fraction2.getDenominator());
      assertEquals(-1, fraction2.getNumerator());
      assertEquals(0, fraction2.intValue());
      assertEquals((-0.5), fraction2.doubleValue(), 0.01D);
      assertEquals((-0.5F), fraction2.floatValue(), 0.01F);
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.byteValue());
      assertNotNull(fraction2);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      
      boolean boolean0 = fraction0.equals((Object) fraction2);
      assertFalse(boolean0);
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertEquals(-2, fraction1.shortValue());
      assertEquals((-2L), fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(-2, fraction1.intValue());
      assertEquals(-2, fraction1.byteValue());
      assertEquals(-2, fraction1.getNumerator());
      assertEquals((-2.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-2.0), fraction1.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction2.shortValue());
      assertEquals(2, fraction2.getDenominator());
      assertEquals(-1, fraction2.getNumerator());
      assertEquals(0, fraction2.intValue());
      assertEquals((-0.5), fraction2.doubleValue(), 0.01D);
      assertEquals((-0.5F), fraction2.floatValue(), 0.01F);
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.byteValue());
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
  }

  @Test
  public void test16()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.reciprocal();
      assertTrue(fraction1.equals((Object)fraction0));
      assertTrue(fraction0.equals((Object)fraction1));
      assertEquals(-1, fraction1.shortValue());
      assertEquals(-1, fraction1.intValue());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals(-1, fraction1.getNumerator());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(-1, fraction1.byteValue());
      assertEquals((-1L), fraction1.longValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      
      boolean boolean0 = fraction0.equals((Object) fraction1);
      assertTrue(boolean0);
      assertTrue(fraction1.equals((Object)fraction0));
      assertTrue(fraction0.equals((Object)fraction1));
      assertEquals(-1, fraction1.shortValue());
      assertEquals(-1, fraction1.intValue());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals(-1, fraction1.getNumerator());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(-1, fraction1.byteValue());
      assertEquals((-1L), fraction1.longValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
  }

  @Test
  public void test17()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.byteValue());
      assertEquals((-1L), fraction0.longValue());
      assertNotNull(fraction0);
      
      Object object0 = null;
      boolean boolean0 = fraction0.equals(object0);
      assertFalse(boolean0);
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.byteValue());
      assertEquals((-1L), fraction0.longValue());
  }

  @Test
  public void test18()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.intValue());
      assertNotNull(fraction0);
      
      int int0 = 1115;
      Fraction fraction1 = Fraction.getReducedFraction(int0, int0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(1, fraction1.byteValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      boolean boolean0 = fraction1.equals((Object) fraction0);
      assertFalse(boolean0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(1, fraction1.byteValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.intValue());
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
  }

  @Test
  public void test19()  throws Throwable  {
      double double0 = 1830.7831105527869;
      Fraction fraction0 = new Fraction(double0);
      assertEquals(953838, fraction0.getNumerator());
      assertEquals(38, fraction0.byteValue());
      assertEquals(1830.7831094049905, fraction0.doubleValue(), 0.01D);
      assertEquals(1830, fraction0.intValue());
      assertEquals(521, fraction0.getDenominator());
      assertEquals(1830.7831F, fraction0.floatValue(), 0.01F);
      assertEquals(1830L, fraction0.longValue());
      assertEquals(1830, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ONE;
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(1, int0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(953838, fraction0.getNumerator());
      assertEquals(38, fraction0.byteValue());
      assertEquals(1830.7831094049905, fraction0.doubleValue(), 0.01D);
      assertEquals(1830, fraction0.intValue());
      assertEquals(521, fraction0.getDenominator());
      assertEquals(1830.7831F, fraction0.floatValue(), 0.01F);
      assertEquals(1830L, fraction0.longValue());
      assertEquals(1830, fraction0.shortValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test
  public void test20()  throws Throwable  {
      int int0 = (-1387);
      Fraction fraction0 = new Fraction((double) int0);
      assertEquals(-1387, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1387L), fraction0.longValue());
      assertEquals(-1387, fraction0.getNumerator());
      assertEquals(-107, fraction0.byteValue());
      assertEquals(-1387, fraction0.shortValue());
      assertEquals((-1387.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1387.0), fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ZERO;
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getNumerator());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      int int1 = fraction0.compareTo(fraction1);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(-1387, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1387L), fraction0.longValue());
      assertEquals(-1387, fraction0.getNumerator());
      assertEquals(-107, fraction0.byteValue());
      assertEquals(-1387, fraction0.shortValue());
      assertEquals((-1387.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1387.0), fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getNumerator());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test
  public void test21()  throws Throwable  {
      double double0 = 1830.7831105527869;
      Fraction fraction0 = new Fraction(double0);
      assertEquals(1830.7831094049905, fraction0.doubleValue(), 0.01D);
      assertEquals(1830.7831F, fraction0.floatValue(), 0.01F);
      assertEquals(1830, fraction0.shortValue());
      assertEquals(1830, fraction0.intValue());
      assertEquals(38, fraction0.byteValue());
      assertEquals(953838, fraction0.getNumerator());
      assertEquals(1830L, fraction0.longValue());
      assertEquals(521, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
      assertEquals(1830.7831094049905, fraction0.doubleValue(), 0.01D);
      assertEquals(1830.7831F, fraction0.floatValue(), 0.01F);
      assertEquals(1830, fraction0.shortValue());
      assertEquals(1830, fraction0.intValue());
      assertEquals(38, fraction0.byteValue());
      assertEquals(953838, fraction0.getNumerator());
      assertEquals(1830L, fraction0.longValue());
      assertEquals(521, fraction0.getDenominator());
  }

  @Test
  public void test22()  throws Throwable  {
      int int0 = (-1387);
      Fraction fraction0 = new Fraction((double) int0);
      assertEquals((-1387.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-107, fraction0.byteValue());
      assertEquals((-1387.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1387, fraction0.getNumerator());
      assertEquals(-1387, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1387, fraction0.shortValue());
      assertEquals((-1387L), fraction0.longValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.divide(fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1387.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-107, fraction0.byteValue());
      assertEquals((-1387.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1387, fraction0.getNumerator());
      assertEquals(-1387, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1387, fraction0.shortValue());
      assertEquals((-1387L), fraction0.longValue());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      
      Fraction fraction2 = fraction1.abs();
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction0));
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1387.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-107, fraction0.byteValue());
      assertEquals((-1387.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1387, fraction0.getNumerator());
      assertEquals(-1387, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1387, fraction0.shortValue());
      assertEquals((-1387L), fraction0.longValue());
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
      assertEquals(1, fraction2.shortValue());
      assertEquals(1, fraction2.getNumerator());
      assertEquals(1, fraction2.intValue());
      assertEquals(1L, fraction2.longValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(1, fraction2.byteValue());
      assertEquals(1.0, fraction2.doubleValue(), 0.01D);
      assertNotNull(fraction2);
      assertNotSame(fraction1, fraction0);
      assertSame(fraction1, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction2, fraction0);
      assertSame(fraction2, fraction1);
  }

  @Test
  public void test23()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.intValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.abs();
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.intValue());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1L, fraction1.longValue());
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = (-11);
      int int1 = Integer.MIN_VALUE;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -11/-2,147,483,648, cannot negate
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.reciprocal();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      double double0 = Double.NaN;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(double0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Unable to convert \uFFFD to fraction after 100 iterations
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.byteValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.shortValue());
      assertNotNull(fraction0);
      
      int int0 = fraction0.hashCode();
      assertEquals(23237, int0);
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.byteValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.shortValue());
      
      double double0 = (-12.387388407110066);
      Fraction fraction1 = null;
      try {
        fraction1 = new Fraction(double0, double0, int0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Overflow trying to convert -12.387 to fraction (-132,669,092,053/10,710,013,095)
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      double double0 = (-1.0);
      int int0 = 1587;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(double0, double0, int0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Overflow trying to convert -1 to fraction (-9,223,372,036,854,775,806/9,223,372,036,854,775,807)
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      int int0 = (-28);
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(double0, int0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Overflow trying to convert \u221E to fraction (9,223,372,036,854,775,807/1)
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      long long0 = fraction0.longValue();
      assertEquals(1L, long0);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
  }

  @Test
  public void test32()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test
  public void test33()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      double double0 = (-35.333625719806136);
      Fraction fraction1 = new Fraction(double0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((-35L), fraction1.longValue());
      assertEquals(-40245, fraction1.getNumerator());
      assertEquals(-35, fraction1.byteValue());
      assertEquals(-35, fraction1.intValue());
      assertEquals((-35.333626F), fraction1.floatValue(), 0.01F);
      assertEquals(-35, fraction1.shortValue());
      assertEquals((-35.333625987708515), fraction1.doubleValue(), 0.01D);
      assertEquals(1139, fraction1.getDenominator());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      int int0 = fraction0.intValue();
      assertEquals((-1), int0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.getNumerator());
      assertNotSame(fraction0, fraction1);
      
      float float0 = fraction1.floatValue();
      assertEquals((-35.333626F), float0, 0.01F);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((-35L), fraction1.longValue());
      assertEquals(-40245, fraction1.getNumerator());
      assertEquals(-35, fraction1.byteValue());
      assertEquals(-35, fraction1.intValue());
      assertEquals((-35.333626F), fraction1.floatValue(), 0.01F);
      assertEquals(-35, fraction1.shortValue());
      assertEquals((-35.333625987708515), fraction1.doubleValue(), 0.01D);
      assertEquals(1139, fraction1.getDenominator());
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = new Fraction((double) float0, int0);
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(-36, fraction2.shortValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals((-36.0F), fraction2.floatValue(), 0.01F);
      assertEquals((-36L), fraction2.longValue());
      assertEquals(-36, fraction2.intValue());
      assertEquals(-36, fraction2.getNumerator());
      assertEquals(-36, fraction2.byteValue());
      assertEquals((-36.0), fraction2.doubleValue(), 0.01D);
      assertEquals((-35L), fraction1.longValue());
      assertEquals(-40245, fraction1.getNumerator());
      assertEquals(-35, fraction1.byteValue());
      assertEquals(-35, fraction1.intValue());
      assertEquals((-35.333626F), fraction1.floatValue(), 0.01F);
      assertEquals(-35, fraction1.shortValue());
      assertEquals((-35.333625987708515), fraction1.doubleValue(), 0.01D);
      assertEquals(1139, fraction1.getDenominator());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.getNumerator());
      assertNotNull(fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
  }
}
