/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:42:46 GMT 2014
 */

package org.apache.commons.math3.optimization.direct;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.List;
import org.apache.commons.math3.analysis.MultivariateFunction;
import org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction;
import org.apache.commons.math3.exception.MaxCountExceededException;
import org.apache.commons.math3.exception.NotPositiveException;
import org.apache.commons.math3.exception.OutOfRangeException;
import org.apache.commons.math3.exception.TooManyEvaluationsException;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.optimization.ConvergenceChecker;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.PointValuePair;
import org.apache.commons.math3.optimization.direct.CMAESOptimizer;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.UnitSphereRandomVectorGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class CMAESOptimizerEvoSuite_branch_Test  {

  @Test
  public void test00() {}
//   @Test
//   public void test00()  throws Throwable  {
//       int int0 = 2;
//       double[] doubleArray0 = new double[1];
//       doubleArray0[0] = (double) int0;
//       CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, doubleArray0);
//       //  // Unstable assertion: assertArrayEquals(new double[] {2.0}, doubleArray0, 0.01);
//       //  // Unstable assertion: assertNotNull(cMAESOptimizer0);
//       //  // Unstable assertion: assertNull(cMAESOptimizer0.getGoalType());
//       //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
//       //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getEvaluations());
//       
//       double[][] doubleArray1 = new double[1][9];
//       doubleArray1[0] = doubleArray0;
//       //  // Unstable assertion: assertNotNull(doubleArray1[0]);
//       
//       Well1024a well1024a0 = new Well1024a();
//       //  // Unstable assertion: assertNotNull(well1024a0);
//       
//       UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int0, (RandomGenerator) well1024a0);
//       //  // Unstable assertion: assertNotNull(unitSphereRandomVectorGenerator0);
//       
//       MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray1[0], int0, int0, unitSphereRandomVectorGenerator0);
//       //  // Unstable assertion: assertNotNull(microsphereInterpolatingFunction0);
//       
//       GoalType goalType0 = GoalType.MINIMIZE;
//       double[] doubleArray2 = new double[1];
//       //  // Unstable assertion: assertNotSame(doubleArray2, doubleArray0);
//       //  // Unstable assertion: assertFalse(doubleArray2.equals((Object)doubleArray0));
//       
//       PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(int0, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[0], doubleArray2, doubleArray1[0]);
//   }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[24];
      boolean boolean0 = true;
      Well1024a well1024a0 = new Well1024a((long) int0);
      assertNotNull(well1024a0);
      
      int int1 = well1024a0.nextInt();
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1014833092), int1);
      
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, doubleArray0, int0, doubleArray0[2], boolean0, int0, int0, (RandomGenerator) well1024a0, boolean0);
      assertFalse(int0 == int1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(cMAESOptimizer0);
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      
      doubleArray0[5] = (double) int1;
      double[][] doubleArray1 = new double[3][4];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray1[0];
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      assertNotNull(doubleArray1[2]);
      
      double[] doubleArray2 = new double[3];
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray2, int0, int0, unitSphereRandomVectorGenerator0);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      // Undeclared exception!
      try {
        PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(int1, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[0], doubleArray1[1], doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-1,014,833,092) exceeded: evaluations
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[13];
      Well1024a well1024a0 = new Well1024a((long) int0);
      assertNotNull(well1024a0);
      
      int int1 = well1024a0.nextInt();
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1014833092), int1);
      
      int int2 = 1490;
      assertFalse(int2 == int1);
      
      boolean boolean0 = false;
      Well19937c well19937c0 = new Well19937c((long) int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertNotNull(well19937c0);
      
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      assertNotNull(cMAESOptimizer0);
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      
      ConvergenceChecker<PointValuePair> convergenceChecker0 = cMAESOptimizer0.getConvergenceChecker();
      assertNotNull(convergenceChecker0);
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      
      CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(int0, doubleArray0, int2, doubleArray0[0], boolean0, int0, int2, (RandomGenerator) well19937c0, boolean0, convergenceChecker0);
      assertNotSame(cMAESOptimizer1, cMAESOptimizer0);
      assertNotSame(cMAESOptimizer0, cMAESOptimizer1);
      assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(cMAESOptimizer0.equals((Object)cMAESOptimizer1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(cMAESOptimizer1);
      assertEquals(0, cMAESOptimizer1.getEvaluations());
      assertNull(cMAESOptimizer1.getGoalType());
      assertEquals(0, cMAESOptimizer1.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      
      double[][] doubleArray1 = new double[3][4];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray1[0];
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      assertNotNull(doubleArray1[2]);
      
      double[] doubleArray2 = new double[3];
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray2, int0, int0, unitSphereRandomVectorGenerator0);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      // Undeclared exception!
      try {
        PointValuePair pointValuePair0 = cMAESOptimizer1.optimize(int2, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[0]);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: convergence failed
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = (-1554);
      double[] doubleArray0 = new double[7];
      double double0 = 175.84134079558;
      doubleArray0[3] = double0;
      boolean boolean0 = true;
      Well44497a well44497a0 = new Well44497a((long) int0);
      assertNotNull(well44497a0);
      
      int int1 = 2;
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, doubleArray0, int0, (double) int0, boolean0, int1, int0, (RandomGenerator) well44497a0, boolean0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 175.84134079558, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(cMAESOptimizer0);
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      
      double[][] doubleArray1 = new double[7][1];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray0;
      assertNotNull(doubleArray1[3]);
      
      doubleArray1[4] = doubleArray0;
      assertNotNull(doubleArray1[4]);
      
      doubleArray1[5] = doubleArray0;
      assertNotNull(doubleArray1[5]);
      
      doubleArray1[6] = doubleArray0;
      assertNotNull(doubleArray1[6]);
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int1);
      assertFalse(int1 == int0);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray1[6], int0, int1, unitSphereRandomVectorGenerator0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      // Undeclared exception!
      try {
        PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(int0, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[6], doubleArray1[4], doubleArray1[1]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 175.841 out of [0, 0] range
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = (-1554);
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) int0;
      boolean boolean0 = true;
      Well44497a well44497a0 = new Well44497a((long) int0);
      assertNotNull(well44497a0);
      
      int int1 = 2;
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, doubleArray0, int0, (double) int0, boolean0, int1, int0, (RandomGenerator) well44497a0, boolean0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertArrayEquals(new double[] {0.0, (-1554.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(cMAESOptimizer0);
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      
      double[][] doubleArray1 = new double[7][1];
      int int2 = cMAESOptimizer0.getEvaluations();
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new double[] {0.0, (-1554.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, int2);
      
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray0;
      assertNotNull(doubleArray1[3]);
      
      doubleArray1[4] = doubleArray0;
      assertNotNull(doubleArray1[4]);
      
      doubleArray1[5] = doubleArray0;
      assertNotNull(doubleArray1[5]);
      
      doubleArray1[6] = doubleArray0;
      assertNotNull(doubleArray1[6]);
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new double[] {0.0, (-1554.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(unitSphereRandomVectorGenerator0);
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray1[6], int1, int1, unitSphereRandomVectorGenerator0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new double[] {0.0, (-1554.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(microsphereInterpolatingFunction0);
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      // Undeclared exception!
      try {
        PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(int0, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[6], doubleArray1[4], doubleArray1[1]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,554 is smaller than the minimum (0)
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[13];
      boolean boolean0 = true;
      long long0 = 427L;
      doubleArray0[0] = (double) long0;
      Well1024a well1024a0 = new Well1024a(long0);
      //  // Unstable assertion: assertNotNull(well1024a0);
      
      int int1 = well1024a0.nextInt();
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(572749171, int1);
      
      int int2 = 1490;
      //  // Unstable assertion: assertFalse(int2 == int1);
      
      Well19937c well19937c0 = new Well19937c((long) int0);
      //  // Unstable assertion: assertFalse(int0 == int2);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertNotNull(well19937c0);
      
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      //  // Unstable assertion: assertNotNull(cMAESOptimizer0);
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertNull(cMAESOptimizer0.getGoalType());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getEvaluations());
      
      ConvergenceChecker<PointValuePair> convergenceChecker0 = cMAESOptimizer0.getConvergenceChecker();
      //  // Unstable assertion: assertNotNull(convergenceChecker0);
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertNull(cMAESOptimizer0.getGoalType());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getEvaluations());
      
      CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(int0, doubleArray0, int2, doubleArray0[0], boolean0, int0, int2, (RandomGenerator) well19937c0, boolean0, convergenceChecker0);
      //  // Unstable assertion: assertNotSame(cMAESOptimizer0, cMAESOptimizer1);
      //  // Unstable assertion: assertNotSame(cMAESOptimizer1, cMAESOptimizer0);
      //  // Unstable assertion: assertFalse(int0 == int2);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int2 == int0);
      //  // Unstable assertion: assertFalse(int2 == int1);
      //  // Unstable assertion: assertFalse(cMAESOptimizer0.equals((Object)cMAESOptimizer1));
      //  // Unstable assertion: assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
      //  // Unstable assertion: assertArrayEquals(new double[] {427.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertNotNull(cMAESOptimizer1);
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertNull(cMAESOptimizer0.getGoalType());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getEvaluations());
      //  // Unstable assertion: assertNull(cMAESOptimizer1.getGoalType());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer1.getEvaluations());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer1.getMaxEvaluations());
      
      double[][] doubleArray1 = new double[3][4];
      doubleArray1[0] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray1[0];
      //  // Unstable assertion: assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[2]);
      
      double[] doubleArray2 = new double[3];
      //  // Unstable assertion: assertNotSame(doubleArray2, doubleArray0);
      //  // Unstable assertion: assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int1);
      //  // Unstable assertion: assertFalse(int1 == int2);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray2, int0, int0, unitSphereRandomVectorGenerator0);
      //  // Unstable assertion: assertNotSame(doubleArray2, doubleArray0);
      //  // Unstable assertion: assertFalse(int1 == int2);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int2);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(doubleArray2.equals((Object)doubleArray0));
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      //  // Unstable assertion: assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      PointValuePair pointValuePair0 = cMAESOptimizer1.optimize(int2, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[0]);
      //  // Unstable assertion: assertNotSame(doubleArray2, doubleArray0);
      //  // Unstable assertion: assertNotSame(doubleArray0, doubleArray2);
      //  // Unstable assertion: assertNotSame(cMAESOptimizer0, cMAESOptimizer1);
      //  // Unstable assertion: assertNotSame(cMAESOptimizer1, cMAESOptimizer0);
      //  // Unstable assertion: assertFalse(cMAESOptimizer0.equals((Object)cMAESOptimizer1));
      //  // Unstable assertion: assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
      //  // Unstable assertion: assertFalse(int1 == int2);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int2);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(doubleArray2.equals((Object)doubleArray0));
      //  // Unstable assertion: assertFalse(int2 == int0);
      //  // Unstable assertion: assertFalse(int2 == int1);
      //  // Unstable assertion: assertFalse(doubleArray0.equals((Object)doubleArray2));
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      //  // Unstable assertion: assertArrayEquals(new double[] {427.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertNotNull(pointValuePair0);
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertNull(cMAESOptimizer0.getGoalType());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getEvaluations());
      //  // Unstable assertion: assertEquals(1490, cMAESOptimizer1.getMaxEvaluations());
      //  // Unstable assertion: assertEquals(GoalType.MAXIMIZE, cMAESOptimizer1.getGoalType());
      //  // Unstable assertion: assertEquals(1491, cMAESOptimizer1.getEvaluations());
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = 362;
      int int1 = (-37);
      boolean boolean0 = true;
      double[] doubleArray0 = new double[6];
      MersenneTwister mersenneTwister0 = (MersenneTwister)CMAESOptimizer.DEFAULT_RANDOMGENERATOR;
      assertNotNull(mersenneTwister0);
      
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, doubleArray0, int0, (double) int0, boolean0, int0, int1, (RandomGenerator) mersenneTwister0, boolean0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(cMAESOptimizer0);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      
      double[][] doubleArray1 = new double[6][2];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray0;
      assertNotNull(doubleArray1[3]);
      
      doubleArray1[4] = doubleArray0;
      assertNotNull(doubleArray1[4]);
      
      doubleArray1[5] = doubleArray0;
      assertNotNull(doubleArray1[5]);
      
      int int2 = 0;
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray1[0], int0, int0, unitSphereRandomVectorGenerator0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      // Undeclared exception!
      try {
        PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(int0, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[2]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[24];
      boolean boolean0 = true;
      Well1024a well1024a0 = new Well1024a((long) int0);
      assertNotNull(well1024a0);
      
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, doubleArray0, int0, doubleArray0[2], boolean0, int0, int0, (RandomGenerator) well1024a0, boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(cMAESOptimizer0);
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      
      int int1 = 346;
      double[][] doubleArray1 = new double[3][4];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray1[0];
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      assertNotNull(doubleArray1[2]);
      
      double[] doubleArray2 = new double[3];
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int1);
      assertFalse(int1 == int0);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray2, int0, int0, unitSphereRandomVectorGenerator0);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(int1, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[0], doubleArray1[1], doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(int0 == int1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(int1 == int0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotNull(pointValuePair0);
      assertEquals(GoalType.MAXIMIZE, cMAESOptimizer0.getGoalType());
      assertEquals(1, cMAESOptimizer0.getEvaluations());
      assertEquals(346, cMAESOptimizer0.getMaxEvaluations());
  }

  @Test
  public void test08()  throws Throwable  {
      int int0 = 0;
      int int1 = 1490;
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      //  // Unstable assertion: assertNotNull(cMAESOptimizer0);
      //  // Unstable assertion: assertNull(cMAESOptimizer0.getGoalType());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getEvaluations());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[3];
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, int0, int0, unitSphereRandomVectorGenerator0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      //  // Unstable assertion: assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(int1, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray0[0]);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      //  // Unstable assertion: assertNotNull(pointValuePair0);
      //  // Unstable assertion: assertEquals(1490, cMAESOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertEquals(1491, cMAESOptimizer0.getEvaluations());
      //  // Unstable assertion: assertEquals(GoalType.MAXIMIZE, cMAESOptimizer0.getGoalType());
  }

  @Test
  public void test09()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      assertNotNull(cMAESOptimizer0);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      
      List<RealMatrix> list0 = cMAESOptimizer0.getStatisticsDHistory();
      assertNotNull(list0);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test10()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      assertNotNull(cMAESOptimizer0);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      
      List<RealMatrix> list0 = cMAESOptimizer0.getStatisticsMeanHistory();
      assertNotNull(list0);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test11()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      assertNotNull(cMAESOptimizer0);
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      
      List<Double> list0 = cMAESOptimizer0.getStatisticsFitnessHistory();
      assertNotNull(list0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
  }

  @Test
  public void test12()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      assertNotNull(cMAESOptimizer0);
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      
      List<Double> list0 = cMAESOptimizer0.getStatisticsSigmaHistory();
      assertNotNull(list0);
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test
  public void test13()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      assertNotNull(cMAESOptimizer0);
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      
      double[] doubleArray0 = new double[8];
      int int0 = 0;
      int int1 = 18;
      double[][] doubleArray1 = new double[8][4];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray0;
      assertNotNull(doubleArray1[3]);
      
      doubleArray1[4] = doubleArray0;
      assertNotNull(doubleArray1[4]);
      
      doubleArray1[5] = doubleArray0;
      assertNotNull(doubleArray1[5]);
      
      doubleArray1[6] = doubleArray0;
      assertNotNull(doubleArray1[6]);
      
      doubleArray1[7] = doubleArray0;
      assertNotNull(doubleArray1[7]);
      
      int[] intArray0 = new int[17];
      Well19937c well19937c0 = new Well19937c(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(well19937c0);
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int0, (RandomGenerator) well19937c0);
      assertFalse(int0 == int1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray1[4], int0, int0, unitSphereRandomVectorGenerator0);
      assertFalse(int0 == int1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(int1, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[3]);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(pointValuePair0);
      assertEquals(GoalType.MINIMIZE, cMAESOptimizer0.getGoalType());
      assertEquals(18, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(19, cMAESOptimizer0.getEvaluations());
  }
}
