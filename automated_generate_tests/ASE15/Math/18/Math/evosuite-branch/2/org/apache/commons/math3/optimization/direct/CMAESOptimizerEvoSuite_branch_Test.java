/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:03:34 GMT 2014
 */

package org.apache.commons.math3.optimization.direct;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.util.List;
import org.apache.commons.math3.analysis.MultivariateFunction;
import org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction;
import org.apache.commons.math3.exception.NotPositiveException;
import org.apache.commons.math3.exception.OutOfRangeException;
import org.apache.commons.math3.exception.TooManyEvaluationsException;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.optimization.ConvergenceChecker;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.PointValuePair;
import org.apache.commons.math3.optimization.SimplePointChecker;
import org.apache.commons.math3.optimization.SimpleValueChecker;
import org.apache.commons.math3.optimization.direct.CMAESOptimizer;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.UnitSphereRandomVectorGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;



import org.junit.runner.RunWith;


public class CMAESOptimizerEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      int int0 = (-700);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0);
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getEvaluations());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertNull(cMAESOptimizer0.getGoalType());
      //  // Unstable assertion: assertNotNull(cMAESOptimizer0);
      
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) int0;
      doubleArray0[0] = doubleArray1;
      //  // Unstable assertion: assertNotNull(doubleArray0[0]);
      
      int int1 = 0;
      int int2 = 451;
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int2);
      //  // Unstable assertion: assertNotNull(unitSphereRandomVectorGenerator0);
      //  // Unstable assertion: assertFalse(int2 == int0);
      //  // Unstable assertion: assertFalse(int2 == int1);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, int0, int1, unitSphereRandomVectorGenerator0);
      //  // Unstable assertion: assertArrayEquals(new double[] {(-700.0)}, doubleArray1, 0.01);
      //  // Unstable assertion: assertNotNull(microsphereInterpolatingFunction0);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int1 == int2);
      //  // Unstable assertion: assertFalse(int2 == int0);
      //  // Unstable assertion: assertFalse(int2 == int1);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int0 == int2);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(int2, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray0[0], doubleArray0[0], doubleArray1);
      //  // Unstable assertion: assertArrayEquals(new double[] {(-700.0)}, doubleArray1, 0.01);
      //  // Unstable assertion: assertEquals(GoalType.MINIMIZE, cMAESOptimizer0.getGoalType());
      //  // Unstable assertion: assertEquals(5, cMAESOptimizer0.getEvaluations());
      //  // Unstable assertion: assertEquals(451, cMAESOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertNotNull(pointValuePair0);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int1 == int2);
      //  // Unstable assertion: assertFalse(int2 == int0);
      //  // Unstable assertion: assertFalse(int2 == int1);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int0 == int2);
  }

  @Test
  public void test01() {}
//   @Test
//   public void test01()  throws Throwable  {
//       int int0 = 1016;
//       double[] doubleArray0 = new double[2];
//       doubleArray0[0] = (double) int0;
//       doubleArray0[1] = (double) int0;
//       int int1 = (-4588);
//       boolean boolean0 = false;
//       doubleArray0[0] = (double) int0;
//       double double0 = 0.0;
//       doubleArray0[1] = double0;
//       int int2 = 0;
//       int int3 = (-2034);
//       int[] intArray0 = new int[8];
//       intArray0[0] = int3;
//       intArray0[2] = int2;
//       Well44497b well44497b0 = new Well44497b(intArray0[1]);
//       assertArrayEquals(new int[] {(-2034), 0, 0, 0, 0, 0, 0, 0}, intArray0);
//       assertNotNull(well44497b0);
//       
//       SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>();
//       assertEquals(2.2250738585072014E-306, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
//       assertEquals(1.1102230246251565E-14, simplePointChecker0.getRelativeThreshold(), 0.01D);
//       assertNotNull(simplePointChecker0);
//       
//       CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(intArray0[0], doubleArray0, int0, (double) intArray0[0], boolean0, int1, intArray0[2], (RandomGenerator) well44497b0, boolean0, (ConvergenceChecker<PointValuePair>) simplePointChecker0);
//       assertArrayEquals(new double[] {1016.0, 0.0}, doubleArray0, 0.01);
//       assertArrayEquals(new int[] {(-2034), 0, 0, 0, 0, 0, 0, 0}, intArray0);
//       assertNull(cMAESOptimizer0.getGoalType());
//       assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
//       assertEquals(0, cMAESOptimizer0.getEvaluations());
//       assertEquals(2.2250738585072014E-306, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
//       assertEquals(1.1102230246251565E-14, simplePointChecker0.getRelativeThreshold(), 0.01D);
//       assertNotNull(cMAESOptimizer0);
//       assertFalse(int1 == int3);
//       assertFalse(int1 == int2);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int3);
//       assertFalse(int0 == int1);
//       assertFalse(int0 == int2);
//       
//       double[][] doubleArray1 = new double[2][7];
//       doubleArray1[0] = doubleArray0;
//       assertNotNull(doubleArray1[0]);
//       
//       doubleArray1[1] = doubleArray0;
//       assertNotNull(doubleArray1[1]);
//       
//       int int4 = 0;
//       int int5 = 30000;
//       int int6 = 828;
//       int int7 = 0;
//       int int8 = 808;
//       UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int8, (RandomGenerator) well44497b0);
//       assertArrayEquals(new int[] {(-2034), 0, 0, 0, 0, 0, 0, 0}, intArray0);
//       assertNotNull(unitSphereRandomVectorGenerator0);
//       assertFalse(int8 == int4);
//       assertFalse(int8 == int5);
//       assertFalse(int8 == int3);
//       assertFalse(int8 == int6);
//       assertFalse(int8 == int2);
//       assertFalse(int8 == int1);
//       assertFalse(int8 == int7);
//       assertFalse(int8 == int0);
//       
//       MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, intArray0[0], int7, unitSphereRandomVectorGenerator0);
//       assertArrayEquals(new double[] {1016.0, 0.0}, doubleArray0, 0.01);
//       assertArrayEquals(new int[] {(-2034), 0, 0, 0, 0, 0, 0, 0}, intArray0);
//       assertNotNull(microsphereInterpolatingFunction0);
//       assertFalse(int7 == int6);
//       assertFalse(int7 == int0);
//       assertFalse(int7 == int8);
//       assertFalse(int7 == int3);
//       assertFalse(int7 == int5);
//       assertFalse(int7 == int1);
//       assertFalse(int8 == int4);
//       assertFalse(int8 == int5);
//       assertFalse(int8 == int3);
//       assertFalse(int8 == int6);
//       assertFalse(int8 == int2);
//       assertFalse(int8 == int1);
//       assertFalse(int8 == int7);
//       assertFalse(int8 == int0);
//       
//       GoalType goalType0 = GoalType.MINIMIZE;
//       PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(int6, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray0);
//       assertArrayEquals(new double[] {1016.0, 0.0}, doubleArray0, 0.01);
//       assertArrayEquals(new int[] {(-2034), 0, 0, 0, 0, 0, 0, 0}, intArray0);
//       assertEquals(828, cMAESOptimizer0.getMaxEvaluations());
//       assertEquals(829, cMAESOptimizer0.getEvaluations());
//       assertEquals(GoalType.MINIMIZE, cMAESOptimizer0.getGoalType());
//       assertEquals(2.2250738585072014E-306, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
//       assertEquals(1.1102230246251565E-14, simplePointChecker0.getRelativeThreshold(), 0.01D);
//       assertNotNull(pointValuePair0);
//       assertFalse(int7 == int6);
//       assertFalse(int7 == int0);
//       assertFalse(int7 == int8);
//       assertFalse(int7 == int3);
//       assertFalse(int7 == int5);
//       assertFalse(int7 == int1);
//       assertFalse(int8 == int4);
//       assertFalse(int8 == int5);
//       assertFalse(int8 == int3);
//       assertFalse(int8 == int6);
//       assertFalse(int8 == int2);
//       assertFalse(int8 == int1);
//       assertFalse(int8 == int7);
//       assertFalse(int8 == int0);
//       assertFalse(int6 == int4);
//       assertFalse(int6 == int0);
//       assertFalse(int6 == int7);
//       assertFalse(int6 == int1);
//       assertFalse(int6 == int2);
//       assertFalse(int6 == int8);
//       assertFalse(int6 == int3);
//       assertFalse(int6 == int5);
//       assertFalse(int1 == int5);
//       assertFalse(int1 == int8);
//       assertFalse(int1 == int7);
//       assertFalse(int1 == int4);
//       assertFalse(int1 == int6);
//       assertFalse(int1 == int3);
//       assertFalse(int1 == int2);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int6);
//       assertFalse(int0 == int3);
//       assertFalse(int0 == int1);
//       assertFalse(int0 == int5);
//       assertFalse(int0 == int7);
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int8);
//       assertFalse(int0 == int4);
//       
//       UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator1 = new UnitSphereRandomVectorGenerator(int5, (RandomGenerator) well44497b0);
//       assertArrayEquals(new int[] {(-2034), 0, 0, 0, 0, 0, 0, 0}, intArray0);
//       assertNotSame(unitSphereRandomVectorGenerator1, unitSphereRandomVectorGenerator0);
//       assertNotNull(unitSphereRandomVectorGenerator1);
//       assertFalse(int5 == int4);
//       assertFalse(int5 == int8);
//       assertFalse(int5 == int1);
//       assertFalse(int5 == int7);
//       assertFalse(int5 == int2);
//       assertFalse(int5 == int6);
//       assertFalse(int5 == int0);
//       assertFalse(int5 == int3);
//       assertFalse(unitSphereRandomVectorGenerator1.equals((Object)unitSphereRandomVectorGenerator0));
//       
//       MicrosphereInterpolatingFunction microsphereInterpolatingFunction1 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, int0, int4, unitSphereRandomVectorGenerator1);
//       assertArrayEquals(new double[] {1016.0, 0.0}, doubleArray0, 0.01);
//       assertArrayEquals(new int[] {(-2034), 0, 0, 0, 0, 0, 0, 0}, intArray0);
//       assertNotSame(unitSphereRandomVectorGenerator1, unitSphereRandomVectorGenerator0);
//       assertNotSame(microsphereInterpolatingFunction1, microsphereInterpolatingFunction0);
//       assertNotNull(microsphereInterpolatingFunction1);
//       assertFalse(int5 == int4);
//       assertFalse(int5 == int8);
//       assertFalse(int5 == int1);
//       assertFalse(int5 == int7);
//       assertFalse(int5 == int2);
//       assertFalse(int5 == int6);
//       assertFalse(int5 == int0);
//       assertFalse(int5 == int3);
//       assertFalse(unitSphereRandomVectorGenerator1.equals((Object)unitSphereRandomVectorGenerator0));
//       assertFalse(int4 == int0);
//       assertFalse(int4 == int8);
//       assertFalse(int4 == int5);
//       assertFalse(int4 == int3);
//       assertFalse(int4 == int6);
//       assertFalse(int4 == int1);
//       assertFalse(microsphereInterpolatingFunction1.equals((Object)microsphereInterpolatingFunction0));
//       assertFalse(int0 == int6);
//       assertFalse(int0 == int3);
//       assertFalse(int0 == int1);
//       assertFalse(int0 == int5);
//       assertFalse(int0 == int7);
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int8);
//       assertFalse(int0 == int4);
//       
//       GoalType goalType1 = GoalType.MINIMIZE;
//       assertSame(goalType1, goalType0);
//       
//       // Undeclared exception!
//       try {
//         PointValuePair pointValuePair1 = cMAESOptimizer0.optimize(int2, (MultivariateFunction) microsphereInterpolatingFunction1, goalType1, doubleArray0, doubleArray1[0], doubleArray1[1]);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // 1,016 out of [0, 0] range
//          //
//       }
//   }

  @Test
  public void test02()  throws Throwable  {
      int int0 = 736;
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) int0;
      doubleArray0[7] = (double) int0;
      doubleArray0[8] = (double) int0;
      doubleArray0[9] = (double) int0;
      int int1 = 0;
      double double0 = 233.5642;
      boolean boolean0 = false;
      int[] intArray0 = new int[1];
      intArray0[0] = int0;
      Well44497a well44497a0 = new Well44497a(intArray0);
      //  // Unstable assertion: assertArrayEquals(new int[] {736}, intArray0);
      //  // Unstable assertion: assertNotNull(well44497a0);
      
      boolean boolean1 = false;
      double double1 = (-2.071910882200156E-7);
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(double1, doubleArray0[7]);
      //  // Unstable assertion: assertArrayEquals(new double[] {736.0, 736.0, 736.0, 736.0, 0.0, 736.0, 736.0, 736.0, 736.0, 736.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals((-2.071910882200156E-7), simpleValueChecker0.getRelativeThreshold(), 0.01D);
      //  // Unstable assertion: assertEquals(736.0, simpleValueChecker0.getAbsoluteThreshold(), 0.01D);
      //  // Unstable assertion: assertNotNull(simpleValueChecker0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, doubleArray0, int1, double0, boolean0, int0, int0, (RandomGenerator) well44497a0, boolean1, (ConvergenceChecker<PointValuePair>) simpleValueChecker0);
      //  // Unstable assertion: assertArrayEquals(new int[] {736}, intArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {736.0, 736.0, 736.0, 736.0, 0.0, 736.0, 736.0, 736.0, 736.0, 736.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertNull(cMAESOptimizer0.getGoalType());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getEvaluations());
      //  // Unstable assertion: assertEquals((-2.071910882200156E-7), simpleValueChecker0.getRelativeThreshold(), 0.01D);
      //  // Unstable assertion: assertEquals(736.0, simpleValueChecker0.getAbsoluteThreshold(), 0.01D);
      //  // Unstable assertion: assertNotNull(cMAESOptimizer0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double[][] doubleArray1 = new double[10][3];
      doubleArray1[0] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[2]);
      
      CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(int0);
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer1.getMaxEvaluations());
      //  // Unstable assertion: assertNull(cMAESOptimizer1.getGoalType());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer1.getEvaluations());
      //  // Unstable assertion: assertNotSame(cMAESOptimizer1, cMAESOptimizer0);
      //  // Unstable assertion: assertNotNull(cMAESOptimizer1);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
      
      doubleArray1[3] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[3]);
      
      doubleArray1[4] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[4]);
      
      doubleArray1[5] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[5]);
      
      doubleArray1[6] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[6]);
      
      doubleArray1[7] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[7]);
      
      doubleArray1[8] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[8]);
      
      doubleArray1[9] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[9]);
      
      int int2 = 0;
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(intArray0[0], (RandomGenerator) well44497a0);
      //  // Unstable assertion: assertArrayEquals(new int[] {736}, intArray0);
      //  // Unstable assertion: assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray1[7], int1, int2, unitSphereRandomVectorGenerator0);
      //  // Unstable assertion: assertArrayEquals(new int[] {736}, intArray0);
      //  // Unstable assertion: assertNotNull(microsphereInterpolatingFunction0);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int2 == int0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(intArray0[0], (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[1]);
      //  // Unstable assertion: assertArrayEquals(new int[] {736}, intArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {736.0, 736.0, 736.0, 736.0, 0.0, 736.0, 736.0, 736.0, 736.0, 736.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(GoalType.MAXIMIZE, cMAESOptimizer0.getGoalType());
      //  // Unstable assertion: assertEquals(736, cMAESOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertEquals(1, cMAESOptimizer0.getEvaluations());
      //  // Unstable assertion: assertEquals((-2.071910882200156E-7), simpleValueChecker0.getRelativeThreshold(), 0.01D);
      //  // Unstable assertion: assertEquals(736.0, simpleValueChecker0.getAbsoluteThreshold(), 0.01D);
      //  // Unstable assertion: assertNotSame(cMAESOptimizer0, cMAESOptimizer1);
      //  // Unstable assertion: assertNotNull(pointValuePair0);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(cMAESOptimizer0.equals((Object)cMAESOptimizer1));
      //  // Unstable assertion: assertFalse(int0 == int2);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(int2 == int0);
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      double double0 = 1.4450790882110596;
      doubleArray0[4] = double0;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) int0;
      doubleArray0[7] = (double) int0;
      int int1 = 0;
      boolean boolean0 = false;
      long long0 = (-927L);
      Well19937c well19937c0 = new Well19937c(long0);
      assertNotNull(well19937c0);
      
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, doubleArray0, int1, doubleArray0[2], boolean0, int0, int1, (RandomGenerator) well19937c0, boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1.4450790882110596, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNotNull(cMAESOptimizer0);
      
      // Undeclared exception!
      try {
        double[] doubleArray1 = cMAESOptimizer0.getStartPoint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      //  // Unstable assertion: assertNull(cMAESOptimizer0.getGoalType());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getEvaluations());
      //  // Unstable assertion: assertNotNull(cMAESOptimizer0);
      
      List<Double> list0 = cMAESOptimizer0.getStatisticsFitnessHistory();
      //  // Unstable assertion: assertEquals(0, list0.size());
      //  // Unstable assertion: assertEquals(true, list0.isEmpty());
      //  // Unstable assertion: assertNull(cMAESOptimizer0.getGoalType());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getEvaluations());
      //  // Unstable assertion: assertNotNull(list0);
      
      List<RealMatrix> list1 = cMAESOptimizer0.getStatisticsMeanHistory();
      //  // Unstable assertion: assertEquals(0, list1.size());
      //  // Unstable assertion: assertEquals(true, list1.isEmpty());
      //  // Unstable assertion: assertNull(cMAESOptimizer0.getGoalType());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getEvaluations());
      //  // Unstable assertion: assertNotNull(list1);
      
      List<Double> list2 = cMAESOptimizer0.getStatisticsSigmaHistory();
      //  // Unstable assertion: assertEquals(0, list2.size());
      //  // Unstable assertion: assertEquals(true, list2.isEmpty());
      //  // Unstable assertion: assertNull(cMAESOptimizer0.getGoalType());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getEvaluations());
      //  // Unstable assertion: assertNotSame(list2, list0);
      //  // Unstable assertion: assertNotNull(list2);
      //  // Unstable assertion: assertTrue(list2.equals((Object)list0));
  }

  @Test
  public void test05() {}
//   @Test
//   public void test05()  throws Throwable  {
//       double[] doubleArray0 = new double[3];
//       int int0 = 10;
//       boolean boolean0 = true;
//       int int1 = 387;
//       int int2 = 1098;
//       int int3 = 3158;
//       boolean boolean1 = false;
//       int int4 = 17;
//       double[] doubleArray1 = new double[3];
//       assertNotSame(doubleArray1, doubleArray0);
//       assertFalse(doubleArray1.equals((Object)doubleArray0));
//       
//       doubleArray1[2] = (double) int4;
//       doubleArray1[0] = (double) int4;
//       doubleArray1[2] = (double) int4;
//       double[][] doubleArray2 = new double[3][5];
//       doubleArray2[0] = doubleArray1;
//       assertNotNull(doubleArray2[0]);
//       
//       doubleArray2[1] = doubleArray1;
//       assertNotNull(doubleArray2[1]);
//       
//       doubleArray2[2] = doubleArray0;
//       assertNotNull(doubleArray2[2]);
//       
//       int int5 = 0;
//       Well44497b well44497b0 = new Well44497b();
//       assertNotNull(well44497b0);
//       
//       int int6 = 4;
//       CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int6, doubleArray1);
//       assertArrayEquals(new double[] {17.0, 0.0, 17.0}, doubleArray1, 0.01);
//       assertNull(cMAESOptimizer0.getGoalType());
//       assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
//       assertEquals(0, cMAESOptimizer0.getEvaluations());
//       assertNotSame(doubleArray1, doubleArray0);
//       assertNotNull(cMAESOptimizer0);
//       assertFalse(doubleArray1.equals((Object)doubleArray0));
//       assertFalse(int6 == int2);
//       assertFalse(int6 == int4);
//       assertFalse(int6 == int1);
//       assertFalse(int6 == int3);
//       assertFalse(int6 == int0);
//       assertFalse(int6 == int5);
//       
//       int int7 = 2003;
//       int int8 = (-1866);
//       int int9 = 0;
//       UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int9);
//       assertNotNull(unitSphereRandomVectorGenerator0);
//       assertFalse(int9 == int0);
//       assertFalse(int9 == int6);
//       assertFalse(int9 == int2);
//       assertFalse(int9 == int8);
//       assertFalse(int9 == int7);
//       assertFalse(int9 == int3);
//       assertFalse(int9 == int4);
//       assertFalse(int9 == int1);
//       
//       MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray2, doubleArray0, int8, int5, unitSphereRandomVectorGenerator0);
//       assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
//       assertNotSame(doubleArray0, doubleArray1);
//       assertNotNull(microsphereInterpolatingFunction0);
//       assertFalse(int8 == int5);
//       assertFalse(int8 == int3);
//       assertFalse(int8 == int1);
//       assertFalse(int8 == int0);
//       assertFalse(int8 == int2);
//       assertFalse(int8 == int4);
//       assertFalse(int8 == int7);
//       assertFalse(int8 == int6);
//       assertFalse(int8 == int9);
//       assertFalse(int9 == int0);
//       assertFalse(int9 == int6);
//       assertFalse(int9 == int2);
//       assertFalse(int9 == int8);
//       assertFalse(int9 == int7);
//       assertFalse(int9 == int3);
//       assertFalse(int9 == int4);
//       assertFalse(int9 == int1);
//       assertFalse(int5 == int0);
//       assertFalse(int5 == int6);
//       assertFalse(int5 == int8);
//       assertFalse(int5 == int4);
//       assertFalse(int5 == int2);
//       assertFalse(int5 == int1);
//       assertFalse(int5 == int7);
//       assertFalse(int5 == int3);
//       assertFalse(doubleArray0.equals((Object)doubleArray1));
//       
//       GoalType goalType0 = GoalType.MAXIMIZE;
//       PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(int7, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray2[0]);
//       assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
//       assertArrayEquals(new double[] {17.0, 0.0, 17.0}, doubleArray1, 0.01);
//       assertEquals(GoalType.MAXIMIZE, cMAESOptimizer0.getGoalType());
//       assertEquals(2004, cMAESOptimizer0.getEvaluations());
//       assertEquals(2003, cMAESOptimizer0.getMaxEvaluations());
//       assertNotSame(doubleArray0, doubleArray1);
//       assertNotSame(doubleArray1, doubleArray0);
//       assertNotNull(pointValuePair0);
//       assertFalse(int8 == int5);
//       assertFalse(int8 == int3);
//       assertFalse(int8 == int1);
//       assertFalse(int8 == int0);
//       assertFalse(int8 == int2);
//       assertFalse(int8 == int4);
//       assertFalse(int8 == int7);
//       assertFalse(int8 == int6);
//       assertFalse(int8 == int9);
//       assertFalse(int9 == int0);
//       assertFalse(int9 == int6);
//       assertFalse(int9 == int2);
//       assertFalse(int9 == int8);
//       assertFalse(int9 == int7);
//       assertFalse(int9 == int3);
//       assertFalse(int9 == int4);
//       assertFalse(int9 == int1);
//       assertFalse(int5 == int0);
//       assertFalse(int5 == int6);
//       assertFalse(int5 == int8);
//       assertFalse(int5 == int4);
//       assertFalse(int5 == int2);
//       assertFalse(int5 == int1);
//       assertFalse(int5 == int7);
//       assertFalse(int5 == int3);
//       assertFalse(doubleArray0.equals((Object)doubleArray1));
//       assertFalse(int7 == int4);
//       assertFalse(int7 == int9);
//       assertFalse(int7 == int8);
//       assertFalse(int7 == int6);
//       assertFalse(int7 == int2);
//       assertFalse(int7 == int3);
//       assertFalse(int7 == int1);
//       assertFalse(int7 == int0);
//       assertFalse(int7 == int5);
//       assertFalse(doubleArray1.equals((Object)doubleArray0));
//       assertFalse(int6 == int2);
//       assertFalse(int6 == int4);
//       assertFalse(int6 == int1);
//       assertFalse(int6 == int7);
//       assertFalse(int6 == int3);
//       assertFalse(int6 == int0);
//       assertFalse(int6 == int8);
//       assertFalse(int6 == int5);
//       assertFalse(int6 == int9);
//       
//       int int10 = 679;
//       double double0 = 0.39072847228800683;
//       int int11 = (-2998);
//       boolean boolean2 = false;
//       int int12 = 0;
//       CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(int4, doubleArray2[1], int4, (double) int4, boolean2, int5, int12, (RandomGenerator) well44497b0, boolean2);
//       assertEquals(0, cMAESOptimizer1.getMaxEvaluations());
//       assertEquals(0, cMAESOptimizer1.getEvaluations());
//       assertNull(cMAESOptimizer1.getGoalType());
//       assertNotSame(cMAESOptimizer1, cMAESOptimizer0);
//       assertNotNull(cMAESOptimizer1);
//       assertFalse(int5 == int0);
//       assertFalse(int5 == int11);
//       assertFalse(int5 == int10);
//       assertFalse(int5 == int6);
//       assertFalse(int5 == int8);
//       assertFalse(int5 == int4);
//       assertFalse(int5 == int2);
//       assertFalse(int5 == int1);
//       assertFalse(int5 == int7);
//       assertFalse(int5 == int3);
//       assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
//       assertFalse(boolean2 == boolean0);
//       assertFalse(int4 == int11);
//       assertFalse(int4 == int10);
//       assertFalse(int4 == int9);
//       assertFalse(int4 == int0);
//       assertFalse(int4 == int1);
//       assertFalse(int4 == int3);
//       assertFalse(int4 == int6);
//       assertFalse(int4 == int8);
//       assertFalse(int4 == int7);
//       assertFalse(int4 == int2);
//       assertFalse(int4 == int5);
//       assertFalse(int4 == int12);
//       assertFalse(int12 == int2);
//       assertFalse(int12 == int11);
//       assertFalse(int12 == int7);
//       assertFalse(int12 == int8);
//       assertFalse(int12 == int4);
//       assertFalse(int12 == int3);
//       assertFalse(int12 == int0);
//       assertFalse(int12 == int6);
//       assertFalse(int12 == int10);
//       assertFalse(int12 == int1);
//       
//       ConvergenceChecker<PointValuePair> convergenceChecker0 = cMAESOptimizer1.getConvergenceChecker();
//       assertEquals(0, cMAESOptimizer1.getMaxEvaluations());
//       assertEquals(0, cMAESOptimizer1.getEvaluations());
//       assertNull(cMAESOptimizer1.getGoalType());
//       assertNotSame(cMAESOptimizer1, cMAESOptimizer0);
//       assertNotNull(convergenceChecker0);
//       assertFalse(int5 == int0);
//       assertFalse(int5 == int11);
//       assertFalse(int5 == int10);
//       assertFalse(int5 == int6);
//       assertFalse(int5 == int8);
//       assertFalse(int5 == int4);
//       assertFalse(int5 == int2);
//       assertFalse(int5 == int1);
//       assertFalse(int5 == int7);
//       assertFalse(int5 == int3);
//       assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
//       assertFalse(boolean2 == boolean0);
//       assertFalse(int4 == int11);
//       assertFalse(int4 == int10);
//       assertFalse(int4 == int9);
//       assertFalse(int4 == int0);
//       assertFalse(int4 == int1);
//       assertFalse(int4 == int3);
//       assertFalse(int4 == int6);
//       assertFalse(int4 == int8);
//       assertFalse(int4 == int7);
//       assertFalse(int4 == int2);
//       assertFalse(int4 == int5);
//       assertFalse(int4 == int12);
//       assertFalse(int12 == int2);
//       assertFalse(int12 == int11);
//       assertFalse(int12 == int7);
//       assertFalse(int12 == int8);
//       assertFalse(int12 == int4);
//       assertFalse(int12 == int3);
//       assertFalse(int12 == int0);
//       assertFalse(int12 == int6);
//       assertFalse(int12 == int10);
//       assertFalse(int12 == int1);
//       
//       CMAESOptimizer cMAESOptimizer2 = new CMAESOptimizer(int10, doubleArray0, int4, double0, boolean0, int4, int11, (RandomGenerator) well44497b0, boolean0, convergenceChecker0);
//       assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
//       assertEquals(0, cMAESOptimizer1.getMaxEvaluations());
//       assertEquals(0, cMAESOptimizer1.getEvaluations());
//       assertNull(cMAESOptimizer1.getGoalType());
//       assertNull(cMAESOptimizer2.getGoalType());
//       assertEquals(0, cMAESOptimizer2.getMaxEvaluations());
//       assertEquals(0, cMAESOptimizer2.getEvaluations());
//       assertNotSame(cMAESOptimizer1, cMAESOptimizer2);
//       assertNotSame(cMAESOptimizer1, cMAESOptimizer0);
//       assertNotSame(doubleArray0, doubleArray1);
//       assertNotSame(cMAESOptimizer2, cMAESOptimizer0);
//       assertNotSame(cMAESOptimizer2, cMAESOptimizer1);
//       assertNotNull(cMAESOptimizer2);
//       assertFalse(int5 == int0);
//       assertFalse(int5 == int11);
//       assertFalse(int5 == int10);
//       assertFalse(int5 == int6);
//       assertFalse(int5 == int8);
//       assertFalse(int5 == int4);
//       assertFalse(int5 == int2);
//       assertFalse(int5 == int1);
//       assertFalse(int5 == int7);
//       assertFalse(int5 == int3);
//       assertFalse(boolean0 == boolean2);
//       assertFalse(boolean0 == boolean1);
//       assertFalse(doubleArray0.equals((Object)doubleArray1));
//       assertFalse(int12 == int2);
//       assertFalse(int12 == int11);
//       assertFalse(int12 == int7);
//       assertFalse(int12 == int8);
//       assertFalse(int12 == int4);
//       assertFalse(int12 == int3);
//       assertFalse(int12 == int0);
//       assertFalse(int12 == int6);
//       assertFalse(int12 == int10);
//       assertFalse(int12 == int1);
//       assertFalse(int11 == int5);
//       assertFalse(int11 == int8);
//       assertFalse(int11 == int4);
//       assertFalse(int11 == int0);
//       assertFalse(int11 == int6);
//       assertFalse(int11 == int7);
//       assertFalse(int11 == int9);
//       assertFalse(int11 == int2);
//       assertFalse(int11 == int3);
//       assertFalse(int11 == int10);
//       assertFalse(int11 == int12);
//       assertFalse(int11 == int1);
//       assertFalse(int10 == int3);
//       assertFalse(int10 == int11);
//       assertFalse(int10 == int4);
//       assertFalse(int10 == int7);
//       assertFalse(int10 == int2);
//       assertFalse(int10 == int12);
//       assertFalse(int10 == int9);
//       assertFalse(int10 == int6);
//       assertFalse(int10 == int1);
//       assertFalse(int10 == int5);
//       assertFalse(int10 == int8);
//       assertFalse(int10 == int0);
//       assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer2));
//       assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
//       assertFalse(boolean2 == boolean0);
//       assertFalse(int4 == int11);
//       assertFalse(int4 == int10);
//       assertFalse(int4 == int9);
//       assertFalse(int4 == int0);
//       assertFalse(int4 == int1);
//       assertFalse(int4 == int3);
//       assertFalse(int4 == int6);
//       assertFalse(int4 == int8);
//       assertFalse(int4 == int7);
//       assertFalse(int4 == int2);
//       assertFalse(int4 == int5);
//       assertFalse(int4 == int12);
//       assertFalse(cMAESOptimizer2.equals((Object)cMAESOptimizer0));
//       assertFalse(cMAESOptimizer2.equals((Object)cMAESOptimizer1));
//       
//       int int13 = 3;
//       int int14 = 0;
//       UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator1 = new UnitSphereRandomVectorGenerator(int13, (RandomGenerator) well44497b0);
//       assertNotSame(unitSphereRandomVectorGenerator1, unitSphereRandomVectorGenerator0);
//       assertNotNull(unitSphereRandomVectorGenerator1);
//       assertFalse(int13 == int10);
//       assertFalse(int13 == int12);
//       assertFalse(int13 == int5);
//       assertFalse(int13 == int7);
//       assertFalse(int13 == int9);
//       assertFalse(int13 == int2);
//       assertFalse(int13 == int0);
//       assertFalse(int13 == int4);
//       assertFalse(int13 == int6);
//       assertFalse(int13 == int11);
//       assertFalse(int13 == int1);
//       assertFalse(int13 == int14);
//       assertFalse(int13 == int8);
//       assertFalse(int13 == int3);
//       assertFalse(unitSphereRandomVectorGenerator1.equals((Object)unitSphereRandomVectorGenerator0));
//       
//       MicrosphereInterpolatingFunction microsphereInterpolatingFunction1 = new MicrosphereInterpolatingFunction(doubleArray2, doubleArray2[0], int14, int5, unitSphereRandomVectorGenerator1);
//       assertNotSame(microsphereInterpolatingFunction1, microsphereInterpolatingFunction0);
//       assertNotSame(unitSphereRandomVectorGenerator1, unitSphereRandomVectorGenerator0);
//       assertNotNull(microsphereInterpolatingFunction1);
//       assertFalse(int13 == int10);
//       assertFalse(int13 == int12);
//       assertFalse(int13 == int5);
//       assertFalse(int13 == int7);
//       assertFalse(int13 == int9);
//       assertFalse(int13 == int2);
//       assertFalse(int13 == int0);
//       assertFalse(int13 == int4);
//       assertFalse(int13 == int6);
//       assertFalse(int13 == int11);
//       assertFalse(int13 == int1);
//       assertFalse(int13 == int14);
//       assertFalse(int13 == int8);
//       assertFalse(int13 == int3);
//       assertFalse(int5 == int0);
//       assertFalse(int5 == int11);
//       assertFalse(int5 == int10);
//       assertFalse(int5 == int6);
//       assertFalse(int5 == int8);
//       assertFalse(int5 == int4);
//       assertFalse(int5 == int2);
//       assertFalse(int5 == int13);
//       assertFalse(int5 == int1);
//       assertFalse(int5 == int7);
//       assertFalse(int5 == int3);
//       assertFalse(int14 == int10);
//       assertFalse(int14 == int8);
//       assertFalse(int14 == int7);
//       assertFalse(int14 == int1);
//       assertFalse(int14 == int13);
//       assertFalse(int14 == int3);
//       assertFalse(int14 == int0);
//       assertFalse(int14 == int11);
//       assertFalse(int14 == int2);
//       assertFalse(int14 == int4);
//       assertFalse(int14 == int6);
//       assertFalse(microsphereInterpolatingFunction1.equals((Object)microsphereInterpolatingFunction0));
//       assertFalse(unitSphereRandomVectorGenerator1.equals((Object)unitSphereRandomVectorGenerator0));
//       
//       GoalType goalType1 = GoalType.MINIMIZE;
//       assertNotSame(goalType1, goalType0);
//       
//       // Undeclared exception!
//       try {
//         PointValuePair pointValuePair1 = cMAESOptimizer2.optimize(int13, (MultivariateFunction) microsphereInterpolatingFunction1, goalType1, doubleArray2[1], doubleArray1, doubleArray1);
//         fail("Expecting exception: NullPointerException");
//       
//       } catch(NullPointerException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test06()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) int0;
      int int1 = 18;
      boolean boolean0 = true;
      int int2 = 387;
      int[] intArray0 = new int[9];
      intArray0[0] = int2;
      intArray0[1] = int2;
      intArray0[3] = intArray0[1];
      intArray0[4] = int0;
      intArray0[5] = int2;
      int int3 = 1098;
      intArray0[6] = int3;
      int int4 = 3158;
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker();
      //  // Unstable assertion: assertEquals(1.1102230246251565E-14, simpleValueChecker0.getRelativeThreshold(), 0.01D);
      //  // Unstable assertion: assertEquals(2.2250738585072014E-306, simpleValueChecker0.getAbsoluteThreshold(), 0.01D);
      //  // Unstable assertion: assertNotNull(simpleValueChecker0);
      
      int int5 = 17;
      double[][] doubleArray1 = new double[3][5];
      doubleArray1[0] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[2]);
      
      int int6 = 23;
      Well44497b well44497b0 = new Well44497b();
      //  // Unstable assertion: assertNotNull(well44497b0);
      
      int int7 = 679;
      boolean boolean1 = true;
      int int8 = 10;
      int int9 = 0;
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int5, doubleArray1[1], int8, (double) int5, boolean1, int6, int9, (RandomGenerator) well44497b0, boolean1);
      //  // Unstable assertion: assertNull(cMAESOptimizer0.getGoalType());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getEvaluations());
      //  // Unstable assertion: assertNotNull(cMAESOptimizer0);
      //  // Unstable assertion: assertFalse(int9 == int3);
      //  // Unstable assertion: assertFalse(int9 == int8);
      //  // Unstable assertion: assertFalse(int9 == int5);
      //  // Unstable assertion: assertFalse(int9 == int7);
      //  // Unstable assertion: assertFalse(int9 == int2);
      //  // Unstable assertion: assertFalse(int9 == int1);
      //  // Unstable assertion: assertFalse(int9 == int4);
      //  // Unstable assertion: assertFalse(int9 == int6);
      //  // Unstable assertion: assertFalse(int6 == int0);
      //  // Unstable assertion: assertFalse(int6 == int7);
      //  // Unstable assertion: assertFalse(int6 == int8);
      //  // Unstable assertion: assertFalse(int6 == int5);
      //  // Unstable assertion: assertFalse(int6 == int3);
      //  // Unstable assertion: assertFalse(int6 == int2);
      //  // Unstable assertion: assertFalse(int6 == int9);
      //  // Unstable assertion: assertFalse(int6 == int4);
      //  // Unstable assertion: assertFalse(int6 == int1);
      //  // Unstable assertion: assertFalse(int8 == int5);
      //  // Unstable assertion: assertFalse(int8 == int0);
      //  // Unstable assertion: assertFalse(int8 == int9);
      //  // Unstable assertion: assertFalse(int8 == int7);
      //  // Unstable assertion: assertFalse(int8 == int1);
      //  // Unstable assertion: assertFalse(int8 == int2);
      //  // Unstable assertion: assertFalse(int8 == int4);
      //  // Unstable assertion: assertFalse(int8 == int6);
      //  // Unstable assertion: assertFalse(int8 == int3);
      //  // Unstable assertion: assertFalse(int5 == int7);
      //  // Unstable assertion: assertFalse(int5 == int8);
      //  // Unstable assertion: assertFalse(int5 == int1);
      //  // Unstable assertion: assertFalse(int5 == int2);
      //  // Unstable assertion: assertFalse(int5 == int4);
      //  // Unstable assertion: assertFalse(int5 == int9);
      //  // Unstable assertion: assertFalse(int5 == int0);
      //  // Unstable assertion: assertFalse(int5 == int3);
      //  // Unstable assertion: assertFalse(int5 == int6);
      
      ConvergenceChecker<PointValuePair> convergenceChecker0 = cMAESOptimizer0.getConvergenceChecker();
      //  // Unstable assertion: assertNull(cMAESOptimizer0.getGoalType());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getEvaluations());
      //  // Unstable assertion: assertNotNull(convergenceChecker0);
      //  // Unstable assertion: assertFalse(int9 == int3);
      //  // Unstable assertion: assertFalse(int9 == int8);
      //  // Unstable assertion: assertFalse(int9 == int5);
      //  // Unstable assertion: assertFalse(int9 == int7);
      //  // Unstable assertion: assertFalse(int9 == int2);
      //  // Unstable assertion: assertFalse(int9 == int1);
      //  // Unstable assertion: assertFalse(int9 == int4);
      //  // Unstable assertion: assertFalse(int9 == int6);
      //  // Unstable assertion: assertFalse(int6 == int0);
      //  // Unstable assertion: assertFalse(int6 == int7);
      //  // Unstable assertion: assertFalse(int6 == int8);
      //  // Unstable assertion: assertFalse(int6 == int5);
      //  // Unstable assertion: assertFalse(int6 == int3);
      //  // Unstable assertion: assertFalse(int6 == int2);
      //  // Unstable assertion: assertFalse(int6 == int9);
      //  // Unstable assertion: assertFalse(int6 == int4);
      //  // Unstable assertion: assertFalse(int6 == int1);
      //  // Unstable assertion: assertFalse(int8 == int5);
      //  // Unstable assertion: assertFalse(int8 == int0);
      //  // Unstable assertion: assertFalse(int8 == int9);
      //  // Unstable assertion: assertFalse(int8 == int7);
      //  // Unstable assertion: assertFalse(int8 == int1);
      //  // Unstable assertion: assertFalse(int8 == int2);
      //  // Unstable assertion: assertFalse(int8 == int4);
      //  // Unstable assertion: assertFalse(int8 == int6);
      //  // Unstable assertion: assertFalse(int8 == int3);
      //  // Unstable assertion: assertFalse(int5 == int7);
      //  // Unstable assertion: assertFalse(int5 == int8);
      //  // Unstable assertion: assertFalse(int5 == int1);
      //  // Unstable assertion: assertFalse(int5 == int2);
      //  // Unstable assertion: assertFalse(int5 == int4);
      //  // Unstable assertion: assertFalse(int5 == int9);
      //  // Unstable assertion: assertFalse(int5 == int0);
      //  // Unstable assertion: assertFalse(int5 == int3);
      //  // Unstable assertion: assertFalse(int5 == int6);
      
      CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(int7, doubleArray0, int5, (double) int5, boolean1, int5, intArray0[1], (RandomGenerator) well44497b0, boolean1, convergenceChecker0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertArrayEquals(new int[] {387, 387, 0, 387, 0, 387, 1098, 0, 0}, intArray0);
      //  // Unstable assertion: assertNull(cMAESOptimizer0.getGoalType());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getEvaluations());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer1.getEvaluations());
      //  // Unstable assertion: assertNull(cMAESOptimizer1.getGoalType());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer1.getMaxEvaluations());
      //  // Unstable assertion: assertNotSame(cMAESOptimizer0, cMAESOptimizer1);
      //  // Unstable assertion: assertNotSame(cMAESOptimizer1, cMAESOptimizer0);
      //  // Unstable assertion: assertNotNull(cMAESOptimizer1);
      //  // Unstable assertion: assertFalse(int9 == int3);
      //  // Unstable assertion: assertFalse(int9 == int8);
      //  // Unstable assertion: assertFalse(int9 == int5);
      //  // Unstable assertion: assertFalse(int9 == int7);
      //  // Unstable assertion: assertFalse(int9 == int2);
      //  // Unstable assertion: assertFalse(int9 == int1);
      //  // Unstable assertion: assertFalse(int9 == int4);
      //  // Unstable assertion: assertFalse(int9 == int6);
      //  // Unstable assertion: assertFalse(int7 == int5);
      //  // Unstable assertion: assertFalse(int7 == int9);
      //  // Unstable assertion: assertFalse(int7 == int2);
      //  // Unstable assertion: assertFalse(int7 == int4);
      //  // Unstable assertion: assertFalse(int7 == int8);
      //  // Unstable assertion: assertFalse(int7 == int3);
      //  // Unstable assertion: assertFalse(int7 == int6);
      //  // Unstable assertion: assertFalse(int7 == int1);
      //  // Unstable assertion: assertFalse(int7 == int0);
      //  // Unstable assertion: assertFalse(int6 == int0);
      //  // Unstable assertion: assertFalse(int6 == int7);
      //  // Unstable assertion: assertFalse(int6 == int8);
      //  // Unstable assertion: assertFalse(int6 == int5);
      //  // Unstable assertion: assertFalse(int6 == int3);
      //  // Unstable assertion: assertFalse(int6 == int2);
      //  // Unstable assertion: assertFalse(int6 == int9);
      //  // Unstable assertion: assertFalse(int6 == int4);
      //  // Unstable assertion: assertFalse(int6 == int1);
      //  // Unstable assertion: assertFalse(int8 == int5);
      //  // Unstable assertion: assertFalse(int8 == int0);
      //  // Unstable assertion: assertFalse(int8 == int9);
      //  // Unstable assertion: assertFalse(int8 == int7);
      //  // Unstable assertion: assertFalse(int8 == int1);
      //  // Unstable assertion: assertFalse(int8 == int2);
      //  // Unstable assertion: assertFalse(int8 == int4);
      //  // Unstable assertion: assertFalse(int8 == int6);
      //  // Unstable assertion: assertFalse(int8 == int3);
      //  // Unstable assertion: assertFalse(cMAESOptimizer0.equals((Object)cMAESOptimizer1));
      //  // Unstable assertion: assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
      //  // Unstable assertion: assertFalse(int5 == int7);
      //  // Unstable assertion: assertFalse(int5 == int8);
      //  // Unstable assertion: assertFalse(int5 == int1);
      //  // Unstable assertion: assertFalse(int5 == int2);
      //  // Unstable assertion: assertFalse(int5 == int4);
      //  // Unstable assertion: assertFalse(int5 == int9);
      //  // Unstable assertion: assertFalse(int5 == int0);
      //  // Unstable assertion: assertFalse(int5 == int3);
      //  // Unstable assertion: assertFalse(int5 == int6);
      
      int int10 = 3;
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int10, (RandomGenerator) well44497b0);
      //  // Unstable assertion: assertNotNull(unitSphereRandomVectorGenerator0);
      //  // Unstable assertion: assertFalse(int10 == int8);
      //  // Unstable assertion: assertFalse(int10 == int7);
      //  // Unstable assertion: assertFalse(int10 == int5);
      //  // Unstable assertion: assertFalse(int10 == int0);
      //  // Unstable assertion: assertFalse(int10 == int9);
      //  // Unstable assertion: assertFalse(int10 == int1);
      //  // Unstable assertion: assertFalse(int10 == int6);
      //  // Unstable assertion: assertFalse(int10 == int4);
      //  // Unstable assertion: assertFalse(int10 == int2);
      //  // Unstable assertion: assertFalse(int10 == int3);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray1[0], intArray0[5], int8, unitSphereRandomVectorGenerator0);
      //  // Unstable assertion: assertArrayEquals(new int[] {387, 387, 0, 387, 0, 387, 1098, 0, 0}, intArray0);
      //  // Unstable assertion: assertNotNull(microsphereInterpolatingFunction0);
      //  // Unstable assertion: assertFalse(int8 == int5);
      //  // Unstable assertion: assertFalse(int8 == int0);
      //  // Unstable assertion: assertFalse(int8 == int9);
      //  // Unstable assertion: assertFalse(int8 == int7);
      //  // Unstable assertion: assertFalse(int8 == int10);
      //  // Unstable assertion: assertFalse(int8 == int1);
      //  // Unstable assertion: assertFalse(int8 == int2);
      //  // Unstable assertion: assertFalse(int8 == int4);
      //  // Unstable assertion: assertFalse(int8 == int6);
      //  // Unstable assertion: assertFalse(int8 == int3);
      //  // Unstable assertion: assertFalse(int10 == int8);
      //  // Unstable assertion: assertFalse(int10 == int7);
      //  // Unstable assertion: assertFalse(int10 == int5);
      //  // Unstable assertion: assertFalse(int10 == int0);
      //  // Unstable assertion: assertFalse(int10 == int9);
      //  // Unstable assertion: assertFalse(int10 == int1);
      //  // Unstable assertion: assertFalse(int10 == int6);
      //  // Unstable assertion: assertFalse(int10 == int4);
      //  // Unstable assertion: assertFalse(int10 == int2);
      //  // Unstable assertion: assertFalse(int10 == int3);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      double double0 = microsphereInterpolatingFunction0.value(doubleArray1[0]);
      //  // Unstable assertion: assertArrayEquals(new int[] {387, 387, 0, 387, 0, 387, 1098, 0, 0}, intArray0);
      //  // Unstable assertion: assertEquals(0.0, double0, 0.01D);
      //  // Unstable assertion: assertFalse(int8 == int5);
      //  // Unstable assertion: assertFalse(int8 == int0);
      //  // Unstable assertion: assertFalse(int8 == int9);
      //  // Unstable assertion: assertFalse(int8 == int7);
      //  // Unstable assertion: assertFalse(int8 == int10);
      //  // Unstable assertion: assertFalse(int8 == int1);
      //  // Unstable assertion: assertFalse(int8 == int2);
      //  // Unstable assertion: assertFalse(int8 == int4);
      //  // Unstable assertion: assertFalse(int8 == int6);
      //  // Unstable assertion: assertFalse(int8 == int3);
      //  // Unstable assertion: assertFalse(int10 == int8);
      //  // Unstable assertion: assertFalse(int10 == int7);
      //  // Unstable assertion: assertFalse(int10 == int5);
      //  // Unstable assertion: assertFalse(int10 == int0);
      //  // Unstable assertion: assertFalse(int10 == int9);
      //  // Unstable assertion: assertFalse(int10 == int1);
      //  // Unstable assertion: assertFalse(int10 == int6);
      //  // Unstable assertion: assertFalse(int10 == int4);
      //  // Unstable assertion: assertFalse(int10 == int2);
      //  // Unstable assertion: assertFalse(int10 == int3);
      
      PointValuePair pointValuePair0 = cMAESOptimizer1.optimize(int10, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[1], doubleArray0, doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertArrayEquals(new int[] {387, 387, 0, 387, 0, 387, 1098, 0, 0}, intArray0);
      //  // Unstable assertion: assertNull(cMAESOptimizer0.getGoalType());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getEvaluations());
      //  // Unstable assertion: assertEquals(4, cMAESOptimizer1.getEvaluations());
      //  // Unstable assertion: assertEquals(GoalType.MAXIMIZE, cMAESOptimizer1.getGoalType());
      //  // Unstable assertion: assertEquals(3, cMAESOptimizer1.getMaxEvaluations());
      //  // Unstable assertion: assertNotSame(cMAESOptimizer0, cMAESOptimizer1);
      //  // Unstable assertion: assertNotSame(cMAESOptimizer1, cMAESOptimizer0);
      //  // Unstable assertion: assertNotNull(pointValuePair0);
      //  // Unstable assertion: assertFalse(int6 == int0);
      //  // Unstable assertion: assertFalse(int6 == int7);
      //  // Unstable assertion: assertFalse(int6 == int8);
      //  // Unstable assertion: assertFalse(int6 == int5);
      //  // Unstable assertion: assertFalse(int6 == int10);
      //  // Unstable assertion: assertFalse(int6 == int3);
      //  // Unstable assertion: assertFalse(int6 == int2);
      //  // Unstable assertion: assertFalse(int6 == int9);
      //  // Unstable assertion: assertFalse(int6 == int4);
      //  // Unstable assertion: assertFalse(int6 == int1);
      //  // Unstable assertion: assertFalse(cMAESOptimizer0.equals((Object)cMAESOptimizer1));
      //  // Unstable assertion: assertFalse(int10 == int8);
      //  // Unstable assertion: assertFalse(int10 == int7);
      //  // Unstable assertion: assertFalse(int10 == int5);
      //  // Unstable assertion: assertFalse(int10 == int0);
      //  // Unstable assertion: assertFalse(int10 == int9);
      //  // Unstable assertion: assertFalse(int10 == int1);
      //  // Unstable assertion: assertFalse(int10 == int6);
      //  // Unstable assertion: assertFalse(int10 == int4);
      //  // Unstable assertion: assertFalse(int10 == int2);
      //  // Unstable assertion: assertFalse(int10 == int3);
      //  // Unstable assertion: assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
      //  // Unstable assertion: assertFalse(int5 == int7);
      //  // Unstable assertion: assertFalse(int5 == int8);
      //  // Unstable assertion: assertFalse(int5 == int1);
      //  // Unstable assertion: assertFalse(int5 == int2);
      //  // Unstable assertion: assertFalse(int5 == int10);
      //  // Unstable assertion: assertFalse(int5 == int4);
      //  // Unstable assertion: assertFalse(int5 == int9);
      //  // Unstable assertion: assertFalse(int5 == int0);
      //  // Unstable assertion: assertFalse(int5 == int3);
      //  // Unstable assertion: assertFalse(int5 == int6);
      //  // Unstable assertion: assertFalse(int9 == int3);
      //  // Unstable assertion: assertFalse(int9 == int8);
      //  // Unstable assertion: assertFalse(int9 == int5);
      //  // Unstable assertion: assertFalse(int9 == int10);
      //  // Unstable assertion: assertFalse(int9 == int7);
      //  // Unstable assertion: assertFalse(int9 == int2);
      //  // Unstable assertion: assertFalse(int9 == int1);
      //  // Unstable assertion: assertFalse(int9 == int4);
      //  // Unstable assertion: assertFalse(int9 == int6);
      //  // Unstable assertion: assertFalse(int7 == int5);
      //  // Unstable assertion: assertFalse(int7 == int9);
      //  // Unstable assertion: assertFalse(int7 == int2);
      //  // Unstable assertion: assertFalse(int7 == int4);
      //  // Unstable assertion: assertFalse(int7 == int8);
      //  // Unstable assertion: assertFalse(int7 == int3);
      //  // Unstable assertion: assertFalse(int7 == int10);
      //  // Unstable assertion: assertFalse(int7 == int6);
      //  // Unstable assertion: assertFalse(int7 == int1);
      //  // Unstable assertion: assertFalse(int7 == int0);
      //  // Unstable assertion: assertFalse(int8 == int5);
      //  // Unstable assertion: assertFalse(int8 == int0);
      //  // Unstable assertion: assertFalse(int8 == int9);
      //  // Unstable assertion: assertFalse(int8 == int7);
      //  // Unstable assertion: assertFalse(int8 == int10);
      //  // Unstable assertion: assertFalse(int8 == int1);
      //  // Unstable assertion: assertFalse(int8 == int2);
      //  // Unstable assertion: assertFalse(int8 == int4);
      //  // Unstable assertion: assertFalse(int8 == int6);
      //  // Unstable assertion: assertFalse(int8 == int3);
      
      int int11 = 0;
      PointValuePair pointValuePair1 = cMAESOptimizer1.optimize(int4, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[2]);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertArrayEquals(new int[] {387, 387, 0, 387, 0, 387, 1098, 0, 0}, intArray0);
      //  // Unstable assertion: assertNull(cMAESOptimizer0.getGoalType());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getEvaluations());
      //  // Unstable assertion: assertEquals(3158, cMAESOptimizer1.getMaxEvaluations());
      //  // Unstable assertion: assertEquals(680, cMAESOptimizer1.getEvaluations());
      //  // Unstable assertion: assertEquals(GoalType.MAXIMIZE, cMAESOptimizer1.getGoalType());
      //  // Unstable assertion: assertNotSame(pointValuePair1, pointValuePair0);
      //  // Unstable assertion: assertNotSame(cMAESOptimizer0, cMAESOptimizer1);
      //  // Unstable assertion: assertNotSame(cMAESOptimizer1, cMAESOptimizer0);
      //  // Unstable assertion: assertNotNull(pointValuePair1);
      //  // Unstable assertion: assertFalse(int6 == int0);
      //  // Unstable assertion: assertFalse(int6 == int7);
      //  // Unstable assertion: assertFalse(int6 == int8);
      //  // Unstable assertion: assertFalse(int6 == int5);
      //  // Unstable assertion: assertFalse(int6 == int11);
      //  // Unstable assertion: assertFalse(int6 == int10);
      //  // Unstable assertion: assertFalse(int6 == int3);
      //  // Unstable assertion: assertFalse(int6 == int2);
      //  // Unstable assertion: assertFalse(int6 == int9);
      //  // Unstable assertion: assertFalse(int6 == int4);
      //  // Unstable assertion: assertFalse(int6 == int1);
      //  // Unstable assertion: assertFalse(pointValuePair1.equals((Object)pointValuePair0));
      //  // Unstable assertion: assertFalse(cMAESOptimizer0.equals((Object)cMAESOptimizer1));
      //  // Unstable assertion: assertFalse(int4 == int5);
      //  // Unstable assertion: assertFalse(int4 == int0);
      //  // Unstable assertion: assertFalse(int4 == int8);
      //  // Unstable assertion: assertFalse(int4 == int1);
      //  // Unstable assertion: assertFalse(int4 == int6);
      //  // Unstable assertion: assertFalse(int4 == int3);
      //  // Unstable assertion: assertFalse(int4 == int2);
      //  // Unstable assertion: assertFalse(int4 == int7);
      //  // Unstable assertion: assertFalse(int4 == int9);
      //  // Unstable assertion: assertFalse(int4 == int10);
      //  // Unstable assertion: assertFalse(int4 == int11);
      //  // Unstable assertion: assertFalse(int10 == int8);
      //  // Unstable assertion: assertFalse(int10 == int7);
      //  // Unstable assertion: assertFalse(int10 == int5);
      //  // Unstable assertion: assertFalse(int10 == int0);
      //  // Unstable assertion: assertFalse(int10 == int9);
      //  // Unstable assertion: assertFalse(int10 == int1);
      //  // Unstable assertion: assertFalse(int10 == int6);
      //  // Unstable assertion: assertFalse(int10 == int11);
      //  // Unstable assertion: assertFalse(int10 == int4);
      //  // Unstable assertion: assertFalse(int10 == int2);
      //  // Unstable assertion: assertFalse(int10 == int3);
      //  // Unstable assertion: assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
      //  // Unstable assertion: assertFalse(int5 == int11);
      //  // Unstable assertion: assertFalse(int5 == int7);
      //  // Unstable assertion: assertFalse(int5 == int8);
      //  // Unstable assertion: assertFalse(int5 == int1);
      //  // Unstable assertion: assertFalse(int5 == int2);
      //  // Unstable assertion: assertFalse(int5 == int10);
      //  // Unstable assertion: assertFalse(int5 == int4);
      //  // Unstable assertion: assertFalse(int5 == int9);
      //  // Unstable assertion: assertFalse(int5 == int0);
      //  // Unstable assertion: assertFalse(int5 == int3);
      //  // Unstable assertion: assertFalse(int5 == int6);
      //  // Unstable assertion: assertFalse(int9 == int3);
      //  // Unstable assertion: assertFalse(int9 == int8);
      //  // Unstable assertion: assertFalse(int9 == int5);
      //  // Unstable assertion: assertFalse(int9 == int10);
      //  // Unstable assertion: assertFalse(int9 == int7);
      //  // Unstable assertion: assertFalse(int9 == int2);
      //  // Unstable assertion: assertFalse(int9 == int1);
      //  // Unstable assertion: assertFalse(int9 == int4);
      //  // Unstable assertion: assertFalse(int9 == int6);
      //  // Unstable assertion: assertFalse(int7 == int5);
      //  // Unstable assertion: assertFalse(int7 == int11);
      //  // Unstable assertion: assertFalse(int7 == int9);
      //  // Unstable assertion: assertFalse(int7 == int2);
      //  // Unstable assertion: assertFalse(int7 == int4);
      //  // Unstable assertion: assertFalse(int7 == int8);
      //  // Unstable assertion: assertFalse(int7 == int3);
      //  // Unstable assertion: assertFalse(int7 == int10);
      //  // Unstable assertion: assertFalse(int7 == int6);
      //  // Unstable assertion: assertFalse(int7 == int1);
      //  // Unstable assertion: assertFalse(int7 == int0);
      //  // Unstable assertion: assertFalse(int8 == int5);
      //  // Unstable assertion: assertFalse(int8 == int11);
      //  // Unstable assertion: assertFalse(int8 == int0);
      //  // Unstable assertion: assertFalse(int8 == int9);
      //  // Unstable assertion: assertFalse(int8 == int7);
      //  // Unstable assertion: assertFalse(int8 == int10);
      //  // Unstable assertion: assertFalse(int8 == int1);
      //  // Unstable assertion: assertFalse(int8 == int2);
      //  // Unstable assertion: assertFalse(int8 == int4);
      //  // Unstable assertion: assertFalse(int8 == int6);
      //  // Unstable assertion: assertFalse(int8 == int3);
      
      MultivariateFunction multivariateFunction0 = null;
      GoalType goalType1 = GoalType.MAXIMIZE;
      //  // Unstable assertion: assertSame(goalType1, goalType0);
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) int0;
      int int1 = 18;
      boolean boolean0 = true;
      int int2 = 387;
      int[] intArray0 = new int[9];
      intArray0[0] = int2;
      intArray0[1] = int2;
      intArray0[3] = intArray0[1];
      intArray0[4] = int0;
      intArray0[5] = intArray0[4];
      int int3 = 519;
      intArray0[6] = int3;
      int int4 = 3158;
      boolean boolean1 = false;
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker();
      assertEquals(2.2250738585072014E-306, simpleValueChecker0.getAbsoluteThreshold(), 0.01D);
      assertEquals(1.1102230246251565E-14, simpleValueChecker0.getRelativeThreshold(), 0.01D);
      assertNotNull(simpleValueChecker0);
      
      int int5 = 17;
      double[] doubleArray1 = new double[3];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[2] = (double) int5;
      doubleArray1[2] = (double) int5;
      double[][] doubleArray2 = new double[3][5];
      doubleArray2[0] = doubleArray1;
      assertNotNull(doubleArray2[0]);
      
      doubleArray2[1] = doubleArray1;
      assertNotNull(doubleArray2[1]);
      
      doubleArray2[2] = doubleArray0;
      assertNotNull(doubleArray2[2]);
      
      int int6 = 0;
      Well44497b well44497b0 = new Well44497b();
      assertNotNull(well44497b0);
      
      int int7 = 665;
      double double0 = 25.858497887452586;
      int int8 = 10;
      int int9 = 0;
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int5, doubleArray2[1], int8, (double) int5, boolean0, int6, int9, (RandomGenerator) well44497b0, boolean0);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNotNull(cMAESOptimizer0);
      assertFalse(int5 == int8);
      assertFalse(int5 == int7);
      assertFalse(int5 == int1);
      assertFalse(int5 == int6);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(int5 == int9);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int9 == int4);
      assertFalse(int9 == int7);
      assertFalse(int9 == int2);
      assertFalse(int9 == int1);
      assertFalse(int9 == int5);
      assertFalse(int9 == int3);
      assertFalse(int9 == int8);
      assertFalse(int6 == int7);
      assertFalse(int6 == int1);
      assertFalse(int6 == int8);
      assertFalse(int6 == int3);
      assertFalse(int6 == int2);
      assertFalse(int6 == int5);
      assertFalse(int6 == int4);
      assertFalse(boolean0 == boolean1);
      assertFalse(int8 == int9);
      assertFalse(int8 == int3);
      assertFalse(int8 == int4);
      assertFalse(int8 == int2);
      assertFalse(int8 == int6);
      assertFalse(int8 == int5);
      assertFalse(int8 == int0);
      assertFalse(int8 == int7);
      assertFalse(int8 == int1);
      
      ConvergenceChecker<PointValuePair> convergenceChecker0 = cMAESOptimizer0.getConvergenceChecker();
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNotNull(convergenceChecker0);
      assertFalse(int5 == int8);
      assertFalse(int5 == int7);
      assertFalse(int5 == int1);
      assertFalse(int5 == int6);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(int5 == int9);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int9 == int4);
      assertFalse(int9 == int7);
      assertFalse(int9 == int2);
      assertFalse(int9 == int1);
      assertFalse(int9 == int5);
      assertFalse(int9 == int3);
      assertFalse(int9 == int8);
      assertFalse(int6 == int7);
      assertFalse(int6 == int1);
      assertFalse(int6 == int8);
      assertFalse(int6 == int3);
      assertFalse(int6 == int2);
      assertFalse(int6 == int5);
      assertFalse(int6 == int4);
      assertFalse(boolean0 == boolean1);
      assertFalse(int8 == int9);
      assertFalse(int8 == int3);
      assertFalse(int8 == int4);
      assertFalse(int8 == int2);
      assertFalse(int8 == int6);
      assertFalse(int8 == int5);
      assertFalse(int8 == int0);
      assertFalse(int8 == int7);
      assertFalse(int8 == int1);
      
      CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(int7, doubleArray0, int5, double0, boolean0, int5, intArray0[1], (RandomGenerator) well44497b0, boolean0, convergenceChecker0);
      assertArrayEquals(new int[] {387, 387, 0, 387, 0, 0, 519, 0, 0}, intArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNull(cMAESOptimizer1.getGoalType());
      assertEquals(0, cMAESOptimizer1.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer1.getEvaluations());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(cMAESOptimizer0, cMAESOptimizer1);
      assertNotSame(cMAESOptimizer1, cMAESOptimizer0);
      assertNotNull(cMAESOptimizer1);
      assertFalse(int5 == int8);
      assertFalse(int5 == int7);
      assertFalse(int5 == int1);
      assertFalse(int5 == int6);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(int5 == int9);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int7 == int0);
      assertFalse(int7 == int8);
      assertFalse(int7 == int4);
      assertFalse(int7 == int2);
      assertFalse(int7 == int5);
      assertFalse(int7 == int3);
      assertFalse(int7 == int1);
      assertFalse(int7 == int6);
      assertFalse(int7 == int9);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(int9 == int4);
      assertFalse(int9 == int7);
      assertFalse(int9 == int2);
      assertFalse(int9 == int1);
      assertFalse(int9 == int5);
      assertFalse(int9 == int3);
      assertFalse(int9 == int8);
      assertFalse(int6 == int7);
      assertFalse(int6 == int1);
      assertFalse(int6 == int8);
      assertFalse(int6 == int3);
      assertFalse(int6 == int2);
      assertFalse(int6 == int5);
      assertFalse(int6 == int4);
      assertFalse(cMAESOptimizer0.equals((Object)cMAESOptimizer1));
      assertFalse(boolean0 == boolean1);
      assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
      assertFalse(int8 == int9);
      assertFalse(int8 == int3);
      assertFalse(int8 == int4);
      assertFalse(int8 == int2);
      assertFalse(int8 == int6);
      assertFalse(int8 == int5);
      assertFalse(int8 == int0);
      assertFalse(int8 == int7);
      assertFalse(int8 == int1);
      
      int int10 = 3;
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int10, (RandomGenerator) well44497b0);
      assertNotNull(unitSphereRandomVectorGenerator0);
      assertFalse(int10 == int9);
      assertFalse(int10 == int6);
      assertFalse(int10 == int8);
      assertFalse(int10 == int4);
      assertFalse(int10 == int1);
      assertFalse(int10 == int3);
      assertFalse(int10 == int7);
      assertFalse(int10 == int5);
      assertFalse(int10 == int2);
      assertFalse(int10 == int0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray2, doubleArray2[0], intArray0[5], int8, unitSphereRandomVectorGenerator0);
      assertArrayEquals(new int[] {387, 387, 0, 387, 0, 0, 519, 0, 0}, intArray0);
      assertNotNull(microsphereInterpolatingFunction0);
      assertFalse(int10 == int9);
      assertFalse(int10 == int6);
      assertFalse(int10 == int8);
      assertFalse(int10 == int4);
      assertFalse(int10 == int1);
      assertFalse(int10 == int3);
      assertFalse(int10 == int7);
      assertFalse(int10 == int5);
      assertFalse(int10 == int2);
      assertFalse(int10 == int0);
      assertFalse(int8 == int9);
      assertFalse(int8 == int3);
      assertFalse(int8 == int4);
      assertFalse(int8 == int2);
      assertFalse(int8 == int6);
      assertFalse(int8 == int5);
      assertFalse(int8 == int0);
      assertFalse(int8 == int7);
      assertFalse(int8 == int1);
      assertFalse(int8 == int10);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      PointValuePair pointValuePair0 = cMAESOptimizer1.optimize(int10, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray2[1], doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 17.0}, doubleArray1, 0.01);
      assertArrayEquals(new int[] {387, 387, 0, 387, 0, 0, 519, 0, 0}, intArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(3, cMAESOptimizer1.getMaxEvaluations());
      assertEquals(4, cMAESOptimizer1.getEvaluations());
      assertEquals(GoalType.MAXIMIZE, cMAESOptimizer1.getGoalType());
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(cMAESOptimizer0, cMAESOptimizer1);
      assertNotSame(cMAESOptimizer1, cMAESOptimizer0);
      assertNotNull(pointValuePair0);
      assertFalse(int10 == int9);
      assertFalse(int10 == int6);
      assertFalse(int10 == int8);
      assertFalse(int10 == int4);
      assertFalse(int10 == int1);
      assertFalse(int10 == int3);
      assertFalse(int10 == int7);
      assertFalse(int10 == int5);
      assertFalse(int10 == int2);
      assertFalse(int10 == int0);
      assertFalse(int9 == int4);
      assertFalse(int9 == int7);
      assertFalse(int9 == int2);
      assertFalse(int9 == int10);
      assertFalse(int9 == int1);
      assertFalse(int9 == int5);
      assertFalse(int9 == int3);
      assertFalse(int9 == int8);
      assertFalse(int6 == int10);
      assertFalse(int6 == int7);
      assertFalse(int6 == int1);
      assertFalse(int6 == int8);
      assertFalse(int6 == int3);
      assertFalse(int6 == int2);
      assertFalse(int6 == int5);
      assertFalse(int6 == int4);
      assertFalse(boolean0 == boolean1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(int5 == int8);
      assertFalse(int5 == int7);
      assertFalse(int5 == int10);
      assertFalse(int5 == int1);
      assertFalse(int5 == int6);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(int5 == int9);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int7 == int0);
      assertFalse(int7 == int10);
      assertFalse(int7 == int8);
      assertFalse(int7 == int4);
      assertFalse(int7 == int2);
      assertFalse(int7 == int5);
      assertFalse(int7 == int3);
      assertFalse(int7 == int1);
      assertFalse(int7 == int6);
      assertFalse(int7 == int9);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(cMAESOptimizer0.equals((Object)cMAESOptimizer1));
      assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
      assertFalse(int8 == int9);
      assertFalse(int8 == int3);
      assertFalse(int8 == int4);
      assertFalse(int8 == int2);
      assertFalse(int8 == int6);
      assertFalse(int8 == int5);
      assertFalse(int8 == int0);
      assertFalse(int8 == int7);
      assertFalse(int8 == int1);
      assertFalse(int8 == int10);
      
      int int11 = 0;
      PointValuePair pointValuePair1 = cMAESOptimizer1.optimize(int4, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray2[2]);
      assertArrayEquals(new int[] {387, 387, 0, 387, 0, 0, 519, 0, 0}, intArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(666, cMAESOptimizer1.getEvaluations());
      assertEquals(3158, cMAESOptimizer1.getMaxEvaluations());
      assertEquals(GoalType.MAXIMIZE, cMAESOptimizer1.getGoalType());
      assertNotSame(pointValuePair1, pointValuePair0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(cMAESOptimizer0, cMAESOptimizer1);
      assertNotSame(cMAESOptimizer1, cMAESOptimizer0);
      assertNotNull(pointValuePair1);
      assertFalse(int10 == int9);
      assertFalse(int10 == int6);
      assertFalse(int10 == int11);
      assertFalse(int10 == int8);
      assertFalse(int10 == int4);
      assertFalse(int10 == int1);
      assertFalse(int10 == int3);
      assertFalse(int10 == int7);
      assertFalse(int10 == int5);
      assertFalse(int10 == int2);
      assertFalse(int10 == int0);
      assertFalse(pointValuePair1.equals((Object)pointValuePair0));
      assertFalse(int9 == int4);
      assertFalse(int9 == int7);
      assertFalse(int9 == int2);
      assertFalse(int9 == int10);
      assertFalse(int9 == int1);
      assertFalse(int9 == int5);
      assertFalse(int9 == int3);
      assertFalse(int9 == int8);
      assertFalse(int6 == int10);
      assertFalse(int6 == int7);
      assertFalse(int6 == int1);
      assertFalse(int6 == int8);
      assertFalse(int6 == int3);
      assertFalse(int6 == int2);
      assertFalse(int6 == int5);
      assertFalse(int6 == int4);
      assertFalse(boolean0 == boolean1);
      assertFalse(int4 == int7);
      assertFalse(int4 == int2);
      assertFalse(int4 == int9);
      assertFalse(int4 == int6);
      assertFalse(int4 == int10);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int5);
      assertFalse(int4 == int8);
      assertFalse(int4 == int0);
      assertFalse(int4 == int11);
      assertFalse(int5 == int8);
      assertFalse(int5 == int11);
      assertFalse(int5 == int7);
      assertFalse(int5 == int10);
      assertFalse(int5 == int1);
      assertFalse(int5 == int6);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(int5 == int9);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int7 == int0);
      assertFalse(int7 == int10);
      assertFalse(int7 == int8);
      assertFalse(int7 == int4);
      assertFalse(int7 == int2);
      assertFalse(int7 == int5);
      assertFalse(int7 == int3);
      assertFalse(int7 == int11);
      assertFalse(int7 == int1);
      assertFalse(int7 == int6);
      assertFalse(int7 == int9);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(cMAESOptimizer0.equals((Object)cMAESOptimizer1));
      assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
      assertFalse(int8 == int9);
      assertFalse(int8 == int3);
      assertFalse(int8 == int4);
      assertFalse(int8 == int11);
      assertFalse(int8 == int2);
      assertFalse(int8 == int6);
      assertFalse(int8 == int5);
      assertFalse(int8 == int0);
      assertFalse(int8 == int7);
      assertFalse(int8 == int1);
      assertFalse(int8 == int10);
      
      GoalType goalType1 = GoalType.MAXIMIZE;
      assertSame(goalType1, goalType0);
  }

  @Test
  public void test08()  throws Throwable  {
      int int0 = 0;
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertNotNull(cMAESOptimizer0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) int0;
      CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(int0);
      assertNull(cMAESOptimizer1.getGoalType());
      assertEquals(0, cMAESOptimizer1.getEvaluations());
      assertEquals(0, cMAESOptimizer1.getMaxEvaluations());
      assertNotSame(cMAESOptimizer1, cMAESOptimizer0);
      assertNotNull(cMAESOptimizer1);
      assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
      
      // Undeclared exception!
      try {
        double double0 = cMAESOptimizer1.computeObjectiveValue(doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNotNull(cMAESOptimizer0);
      
      List<RealMatrix> list0 = cMAESOptimizer0.getStatisticsDHistory();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      int int1 = (-1);
      double[] doubleArray1 = new double[3];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) int0;
      GoalType goalType0 = cMAESOptimizer0.getGoalType();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(int0 == int1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      doubleArray1[1] = (double) int1;
      doubleArray1[2] = (double) int1;
      CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(int1, doubleArray1);
      assertArrayEquals(new double[] {0.0, (-1.0), (-1.0)}, doubleArray1, 0.01);
      assertEquals(0, cMAESOptimizer1.getEvaluations());
      assertNull(cMAESOptimizer1.getGoalType());
      assertEquals(0, cMAESOptimizer1.getMaxEvaluations());
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(cMAESOptimizer1, cMAESOptimizer0);
      assertNotNull(cMAESOptimizer1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(int1 == int0);
      assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
      
      doubleArray1[0] = (double) int1;
      doubleArray1[1] = (double) int1;
      doubleArray1[2] = (double) int1;
      double double0 = 0.0;
      doubleArray1[0] = double0;
      doubleArray1[1] = double0;
      doubleArray1[2] = (double) int1;
      ConvergenceChecker<PointValuePair> convergenceChecker0 = cMAESOptimizer1.getConvergenceChecker();
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0)}, doubleArray1, 0.01);
      assertEquals(0, cMAESOptimizer1.getEvaluations());
      assertNull(cMAESOptimizer1.getGoalType());
      assertEquals(0, cMAESOptimizer1.getMaxEvaluations());
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(cMAESOptimizer1, cMAESOptimizer0);
      assertNotNull(convergenceChecker0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(int1 == int0);
      assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
      
      double[][] doubleArray2 = new double[3][5];
      doubleArray2[0] = doubleArray1;
      assertNotNull(doubleArray2[0]);
      
      doubleArray2[1] = doubleArray1;
      assertNotNull(doubleArray2[1]);
      
      doubleArray2[2] = doubleArray0;
      assertNotNull(doubleArray2[2]);
      
      int int2 = 0;
      Well44497b well44497b0 = new Well44497b();
      assertNotNull(well44497b0);
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int1, (RandomGenerator) well44497b0);
      assertNotNull(unitSphereRandomVectorGenerator0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray2, doubleArray2[0], int2, int0, unitSphereRandomVectorGenerator0);
      assertNotNull(microsphereInterpolatingFunction0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      GoalType goalType1 = GoalType.MAXIMIZE;
      // Undeclared exception!
      try {
        PointValuePair pointValuePair0 = cMAESOptimizer1.optimize(int0, (MultivariateFunction) microsphereInterpolatingFunction0, goalType1, doubleArray2[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = (-28.62614708423);
      boolean boolean0 = true;
      int int0 = 3444;
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getEvaluations());
      //  // Unstable assertion: assertNull(cMAESOptimizer0.getGoalType());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertNotNull(cMAESOptimizer0);
      
      GoalType goalType0 = cMAESOptimizer0.getGoalType();
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getEvaluations());
      //  // Unstable assertion: assertNull(cMAESOptimizer0.getGoalType());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      
      double[][] doubleArray1 = new double[4][3];
      doubleArray1[0] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[3]);
      
      GoalType goalType1 = cMAESOptimizer0.getGoalType();
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getEvaluations());
      //  // Unstable assertion: assertNull(cMAESOptimizer0.getGoalType());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      
      int int1 = 959;
      int int2 = 0;
      doubleArray1[0] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[1]);
      
      doubleArray1[3] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[3]);
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int0);
      //  // Unstable assertion: assertNotNull(unitSphereRandomVectorGenerator0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int0 == int2);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray1[3], int1, int2, unitSphereRandomVectorGenerator0);
      //  // Unstable assertion: assertNotNull(microsphereInterpolatingFunction0);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int1 == int2);
      //  // Unstable assertion: assertFalse(int2 == int1);
      //  // Unstable assertion: assertFalse(int2 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int0 == int2);
      
      GoalType goalType2 = GoalType.MAXIMIZE;
      PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(int0, (MultivariateFunction) microsphereInterpolatingFunction0, goalType2, doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(3445, cMAESOptimizer0.getEvaluations());
      //  // Unstable assertion: assertEquals(3444, cMAESOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertEquals(GoalType.MAXIMIZE, cMAESOptimizer0.getGoalType());
      //  // Unstable assertion: assertNotNull(pointValuePair0);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int1 == int2);
      //  // Unstable assertion: assertFalse(int2 == int1);
      //  // Unstable assertion: assertFalse(int2 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int0 == int2);
      
      int int3 = 560;
      Well44497a well44497a0 = new Well44497a();
      //  // Unstable assertion: assertNotNull(well44497a0);
  }
}
