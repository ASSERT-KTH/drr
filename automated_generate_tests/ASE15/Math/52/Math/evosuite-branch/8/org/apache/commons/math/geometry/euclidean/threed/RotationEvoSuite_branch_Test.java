/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:12:23 GMT 2014
 */

package org.apache.commons.math.geometry.euclidean.threed;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.geometry.Vector;
import org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException;
import org.apache.commons.math.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException;
import org.apache.commons.math.geometry.euclidean.threed.Rotation;
import org.apache.commons.math.geometry.euclidean.threed.RotationOrder;
import org.apache.commons.math.geometry.euclidean.threed.Vector3D;



import org.junit.runner.RunWith;


public class RotationEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      double double0 = 0.9999999999;
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(0.5, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(0.5, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(0.5, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(0.5, rotation0.getQ1(), 0.01D);
      
      Vector3D vector3D0 = rotation0.getAxis();
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(1.0000000000000002, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals((-0.5773502691896258), vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals((-0.5773502691896258), vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals((-0.6154797086703875), vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(0.5773502691896258, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals((-0.5773502691896258), vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(1.7320508075688776, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(0.5, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(0.5, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(0.5, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(0.5, rotation0.getQ1(), 0.01D);
      
      Rotation rotation1 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      //  // Unstable assertion: assertNotNull(rotation1);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation1.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation1.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation1.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation1.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation1.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0000000000000002, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals((-0.5773502691896258), vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals((-0.5773502691896258), vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals((-0.6154797086703875), vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(0.5773502691896258, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals((-0.5773502691896258), vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(1.7320508075688776, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(0.5, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(0.5, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(0.5, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(0.5, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertNotSame(rotation1, rotation0);
      //  // Unstable assertion: assertNotSame(rotation0, rotation1);
      //  // Unstable assertion: assertFalse(rotation1.equals((Object)rotation0));
      //  // Unstable assertion: assertFalse(rotation0.equals((Object)rotation1));
      
      RotationOrder rotationOrder0 = RotationOrder.ZYZ;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("ZYZ", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation1.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZYZ;
      assertNotNull(rotationOrder0);
      assertEquals("ZYZ", rotationOrder0.toString());
      
      double double0 = (-880.0);
      double double1 = 0.0;
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double1, double1, double0, double1, boolean0);
      assertNotNull(rotation0);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals((-880.0), rotation0.getQ2(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      double double0 = 1788.86347;
      RotationOrder rotationOrder0 = RotationOrder.ZXZ;
      assertNotNull(rotationOrder0);
      assertEquals("ZXZ", rotationOrder0.toString());
      
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals("ZXZ", rotationOrder0.toString());
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.16319374130559275, rotation0.getQ0(), 0.01D);
      assertEquals((-0.5816305142425666), rotation0.getQ3(), 0.01D);
      assertEquals(2.8137387923266424, rotation0.getAngle(), 0.01D);
      assertEquals((-0.7969151446048762), rotation0.getQ1(), 0.01D);
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertEquals("ZXZ", rotationOrder0.toString());
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.16319374130559275, rotation0.getQ0(), 0.01D);
      assertEquals((-0.5816305142425666), rotation0.getQ3(), 0.01D);
      assertEquals(2.8137387923266424, rotation0.getAngle(), 0.01D);
      assertEquals((-0.7969151446048762), rotation0.getQ1(), 0.01D);
      assertArrayEquals(new double[] {1.297250107407654, 1.8443425461821394, 1.297250107407654}, doubleArray0, 0.01);
  }

  @Test
  public void test03()  throws Throwable  {
      double double0 = 0.0;
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.ZXZ;
      assertNotNull(rotationOrder0);
      assertEquals("ZXZ", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.ZXZ;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("ZXZ", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      double double0 = 1061.91025;
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals(0.5, rotation0.getQ2(), 0.01D);
      assertEquals(0.5, rotation0.getQ3(), 0.01D);
      assertEquals(0.5, rotation0.getQ0(), 0.01D);
      assertEquals(0.5, rotation0.getQ1(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.YZY;
      assertNotNull(rotationOrder0);
      assertEquals("YZY", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertEquals("YZY", rotationOrder0.toString());
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals(0.5, rotation0.getQ2(), 0.01D);
      assertEquals(0.5, rotation0.getQ3(), 0.01D);
      assertEquals(0.5, rotation0.getQ0(), 0.01D);
      assertEquals(0.5, rotation0.getQ1(), 0.01D);
      assertArrayEquals(new double[] {3.141592653589793, 1.5707963267948966, 1.5707963267948966}, doubleArray0, 0.01);
  }

  @Test
  public void test06()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 109.8378148251;
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double0, double1, boolean0);
      assertNotNull(rotation0);
      assertEquals(1.0, rotation0.getQ3(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      RotationOrder rotationOrder0 = RotationOrder.YZY;
      assertNotNull(rotationOrder0);
      assertEquals("YZY", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YZY;
      assertNotNull(rotationOrder0);
      assertEquals("YZY", rotationOrder0.toString());
      
      Rotation rotation0 = Rotation.IDENTITY;
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      double double0 = (-0.49999999999999994);
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      assertNotNull(rotationOrder0);
      assertEquals("YXY", rotationOrder0.toString());
      
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.1084801003082023, rotation0.getAngle(), 0.01D);
      assertEquals(0.4645213596389286, rotation0.getQ2(), 0.01D);
      assertEquals(0.24740395925452296, rotation0.getQ1(), 0.01D);
      assertEquals(0.8503006452922329, rotation0.getQ0(), 0.01D);
      assertEquals("YXY", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.1084801003082023, rotation0.getAngle(), 0.01D);
      assertEquals(0.4645213596389286, rotation0.getQ2(), 0.01D);
      assertEquals(0.24740395925452296, rotation0.getQ1(), 0.01D);
      assertEquals(0.8503006452922329, rotation0.getQ0(), 0.01D);
      assertEquals("YXY", rotationOrder0.toString());
      assertArrayEquals(new double[] {2.641592653589793, 0.499999999999999, 2.641592653589793}, doubleArray0, 0.01);
  }

  @Test
  public void test09()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      assertNotNull(vector3D0);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      
      Vector3D vector3D1 = vector3D0.negate();
      assertNotNull(vector3D1);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(-0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(-0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(-0.0, vector3D1.getZ(), 0.01D);
      assertEquals(-0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D1);
      assertNotNull(rotation0);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(-0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(-0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(-0.0, vector3D1.getZ(), 0.01D);
      assertEquals(-0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(-0.0, rotation0.getQ2(), 0.01D);
      assertEquals(1.0, rotation0.getQ3(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      assertNotNull(rotationOrder0);
      assertEquals("YXY", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      double double0 = 0.0;
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      assertNotNull(rotationOrder0);
      assertEquals("YXY", rotationOrder0.toString());
      
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals("YXY", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      double double0 = 0.1;
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(0.5, rotation0.getQ2(), 0.01D);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals(0.5, rotation0.getQ1(), 0.01D);
      assertEquals(0.5, rotation0.getQ0(), 0.01D);
      assertEquals(0.5, rotation0.getQ3(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      assertNotNull(rotationOrder0);
      assertEquals("XZX", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertEquals("XZX", rotationOrder0.toString());
      assertEquals(0.5, rotation0.getQ2(), 0.01D);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals(0.5, rotation0.getQ1(), 0.01D);
      assertEquals(0.5, rotation0.getQ0(), 0.01D);
      assertEquals(0.5, rotation0.getQ3(), 0.01D);
      assertArrayEquals(new double[] {1.5707963267948966, 1.5707963267948966, 3.141592653589793}, doubleArray0, 0.01);
  }

  @Test
  public void test12()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      assertNotNull(vector3D0);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getY(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      
      double double0 = (-1548.6937339702806);
      Vector3D vector3D1 = vector3D0.scalarMultiply(double0);
      assertNotNull(vector3D1);
      assertEquals(2398452.2816388104, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals((-1548.6937339702806), vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals((-1.5707963267948966), vector3D1.getAlpha(), 0.01D);
      assertEquals(-0.0, vector3D1.getX(), 0.01D);
      assertEquals(1548.6937339702806, vector3D1.getNorm1(), 0.01D);
      assertEquals(-0.0, vector3D1.getZ(), 0.01D);
      assertEquals(1548.6937339702806, vector3D1.getNorm(), 0.01D);
      assertEquals(-0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(1548.6937339702806, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getY(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      
      Rotation rotation0 = new Rotation(vector3D1, vector3D0);
      assertNotNull(rotation0);
      assertEquals(2398452.2816388104, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals((-1548.6937339702806), vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals((-1.5707963267948966), vector3D1.getAlpha(), 0.01D);
      assertEquals(-0.0, vector3D1.getX(), 0.01D);
      assertEquals(1548.6937339702806, vector3D1.getNorm1(), 0.01D);
      assertEquals(-0.0, vector3D1.getZ(), 0.01D);
      assertEquals(1548.6937339702806, vector3D1.getNorm(), 0.01D);
      assertEquals(-0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(1548.6937339702806, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getY(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals(-0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals((-0.9999999999999999), rotation0.getQ3(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      assertNotNull(rotationOrder0);
      assertEquals("XZX", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      assertNotNull(vector3D0);
      assertEquals(1.0, vector3D0.getY(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      assertNotNull(rotation0);
      assertEquals(1.0, vector3D0.getY(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      assertNotNull(rotationOrder0);
      assertEquals("XZX", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      
      double double0 = 0.125;
      Rotation rotation0 = new Rotation(vector3D0, double0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(0.9980475107000991, rotation0.getQ0(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.XYX;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("XYX", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      double double0 = 0.0;
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.XYX;
      assertNotNull(rotationOrder0);
      assertEquals("XYX", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      double double0 = 0.9999999999;
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(0.5, rotation0.getQ0(), 0.01D);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals(0.5, rotation0.getQ1(), 0.01D);
      assertEquals(0.5, rotation0.getQ2(), 0.01D);
      assertEquals(0.5, rotation0.getQ3(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.ZYZ;
      assertNotNull(rotationOrder0);
      assertEquals("ZYZ", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertEquals(0.5, rotation0.getQ0(), 0.01D);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals(0.5, rotation0.getQ1(), 0.01D);
      assertEquals(0.5, rotation0.getQ2(), 0.01D);
      assertEquals(0.5, rotation0.getQ3(), 0.01D);
      assertEquals("ZYZ", rotationOrder0.toString());
      assertArrayEquals(new double[] {1.5707963267948966, 1.5707963267948966, 3.141592653589793}, doubleArray0, 0.01);
  }

  @Test
  public void test17()  throws Throwable  {
      double double0 = 0.0;
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      assertNotNull(rotationOrder0);
      assertEquals("YXY", rotationOrder0.toString());
      
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals("YXY", rotationOrder0.toString());
      
      RotationOrder rotationOrder1 = RotationOrder.ZYX;
      assertNotNull(rotationOrder1);
      assertEquals("ZYX", rotationOrder1.toString());
      assertNotSame(rotationOrder1, rotationOrder0);
      assertFalse(rotationOrder1.equals((Object)rotationOrder0));
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder1);
      assertNotNull(doubleArray0);
      assertEquals("ZYX", rotationOrder1.toString());
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals("YXY", rotationOrder0.toString());
      assertArrayEquals(new double[] {0.0, -0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(rotationOrder1, rotationOrder0);
      assertNotSame(rotationOrder0, rotationOrder1);
      assertFalse(rotationOrder1.equals((Object)rotationOrder0));
      assertFalse(rotationOrder0.equals((Object)rotationOrder1));
  }

  @Test
  public void test18()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 172.0;
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double1, double1, double1, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals(172.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(172.0, rotation0.getQ2(), 0.01D);
      assertEquals(172.0, rotation0.getQ1(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      Rotation rotation1 = rotation0.revert();
      assertNotNull(rotation1);
      assertEquals((-172.0), rotation1.getQ0(), 0.01D);
      assertEquals(172.0, rotation1.getQ2(), 0.01D);
      assertEquals(172.0, rotation1.getQ1(), 0.01D);
      assertEquals(0.0, rotation1.getQ3(), 0.01D);
      assertEquals(Double.NaN, rotation1.getAngle(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals(172.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(172.0, rotation0.getQ2(), 0.01D);
      assertEquals(172.0, rotation0.getQ1(), 0.01D);
      assertNotSame(rotation1, rotation0);
      assertNotSame(rotation0, rotation1);
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      RotationOrder rotationOrder0 = RotationOrder.ZYX;
      assertNotNull(rotationOrder0);
      assertEquals("ZYX", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation1.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      
      double double0 = vector3D0.distance1((Vector<Euclidean3D>) vector3D0);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, double0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.ZYX;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("ZYX", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.ZXY;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("ZXY", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      boolean boolean0 = false;
      double double0 = (-9.575824579967328);
      double double1 = 0.0;
      Rotation rotation0 = new Rotation(double0, double0, double1, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals((-9.575824579967328), rotation0.getQ3(), 0.01D);
      assertEquals((-9.575824579967328), rotation0.getQ0(), 0.01D);
      assertEquals((-9.575824579967328), rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      RotationOrder rotationOrder0 = RotationOrder.ZXY;
      assertNotNull(rotationOrder0);
      assertEquals("ZXY", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      boolean boolean0 = false;
      double double0 = (-9.575824579967328);
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals((-9.575824579967328), rotation0.getQ3(), 0.01D);
      assertEquals((-9.575824579967328), rotation0.getQ0(), 0.01D);
      assertEquals((-9.575824579967328), rotation0.getQ2(), 0.01D);
      assertEquals((-9.575824579967328), rotation0.getQ1(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.ZXY;
      assertNotNull(rotationOrder0);
      assertEquals("ZXY", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertEquals("ZXY", rotationOrder0.toString());
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals((-9.575824579967328), rotation0.getQ3(), 0.01D);
      assertEquals((-9.575824579967328), rotation0.getQ0(), 0.01D);
      assertEquals((-9.575824579967328), rotation0.getQ2(), 0.01D);
      assertEquals((-9.575824579967328), rotation0.getQ1(), 0.01D);
      assertArrayEquals(new double[] {(-0.7867632173334075), 0.0, (-0.7867632173334075)}, doubleArray0, 0.01);
  }

  @Test
  public void test23()  throws Throwable  {
      double double0 = 0.0;
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("YZX", rotationOrder0.toString());
      
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = (-3609.6692349);
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double0, doubleArray0[0], double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals((-3609.6692349), rotation0.getQ3(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals((-3609.6692349), rotation0.getQ1(), 0.01D);
      assertEquals((-3609.6692349), rotation0.getQ0(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      assertNotNull(rotationOrder0);
      assertEquals("YZX", rotationOrder0.toString());
      
      try {
        double[] doubleArray1 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      assertNotNull(rotationOrder0);
      assertEquals("YZX", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals("YZX", rotationOrder0.toString());
      assertArrayEquals(new double[] {-0.0, 0.0, -0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test26()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isNaN());
      
      RotationOrder rotationOrder0 = RotationOrder.YXZ;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("YXZ", rotationOrder0.toString());
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      double double0 = 0.875;
      double double1 = (-0.9999999999);
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double1, double0, double1, boolean0);
      assertNotNull(rotation0);
      assertEquals((-0.9999999999), rotation0.getQ1(), 0.01D);
      assertEquals(0.875, rotation0.getQ0(), 0.01D);
      assertEquals(0.875, rotation0.getQ2(), 0.01D);
      assertEquals((-0.9999999999), rotation0.getQ3(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      RotationOrder rotationOrder0 = RotationOrder.YXZ;
      assertNotNull(rotationOrder0);
      assertEquals("YXZ", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      double double0 = 0.9999999999;
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals(0.5, rotation0.getQ0(), 0.01D);
      assertEquals(0.5, rotation0.getQ1(), 0.01D);
      assertEquals(0.5, rotation0.getQ2(), 0.01D);
      assertEquals(0.5, rotation0.getQ3(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.XYX;
      assertNotNull(rotationOrder0);
      assertEquals("XYX", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertEquals("XYX", rotationOrder0.toString());
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals(0.5, rotation0.getQ0(), 0.01D);
      assertEquals(0.5, rotation0.getQ1(), 0.01D);
      assertEquals(0.5, rotation0.getQ2(), 0.01D);
      assertEquals(0.5, rotation0.getQ3(), 0.01D);
      assertArrayEquals(new double[] {3.141592653589793, 1.5707963267948966, 1.5707963267948966}, doubleArray0, 0.01);
  }

  @Test
  public void test29()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("XZY", rotationOrder0.toString());
      
      double double0 = 0.0;
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      assertNotNull(rotationOrder0);
      assertEquals("XZY", rotationOrder0.toString());
      
      double double0 = (-563.73254752);
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals("XZY", rotationOrder0.toString());
      assertEquals(0.06364280391292787, rotation0.getQ2(), 0.01D);
      assertEquals(0.7159383981246851, rotation0.getQ0(), 0.01D);
      assertEquals(0.06364280391292781, rotation0.getQ1(), 0.01D);
      assertEquals(1.5456580994578857, rotation0.getAngle(), 0.01D);
      assertEquals((-0.6923376323087321), rotation0.getQ3(), 0.01D);
      
      RotationOrder rotationOrder1 = RotationOrder.YXZ;
      assertNotNull(rotationOrder1);
      assertEquals("YXZ", rotationOrder1.toString());
      assertNotSame(rotationOrder1, rotationOrder0);
      assertFalse(rotationOrder1.equals((Object)rotationOrder0));
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder1);
      assertNotNull(doubleArray0);
      assertEquals("YXZ", rotationOrder1.toString());
      assertEquals("XZY", rotationOrder0.toString());
      assertEquals(0.06364280391292787, rotation0.getQ2(), 0.01D);
      assertEquals(0.7159383981246851, rotation0.getQ0(), 0.01D);
      assertEquals(0.06364280391292781, rotation0.getQ1(), 0.01D);
      assertEquals(1.5456580994578857, rotation0.getAngle(), 0.01D);
      assertEquals((-0.6923376323087321), rotation0.getQ3(), 0.01D);
      assertArrayEquals(new double[] {(-0.18022819740320542), (-0.003004042340252188), 1.5375536617619279}, doubleArray0, 0.01);
      assertNotSame(rotationOrder1, rotationOrder0);
      assertNotSame(rotationOrder0, rotationOrder1);
      assertFalse(rotationOrder1.equals((Object)rotationOrder0));
      assertFalse(rotationOrder0.equals((Object)rotationOrder1));
  }

  @Test
  public void test31()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isNaN());
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isNaN());
      
      RotationOrder rotationOrder0 = RotationOrder.XYZ;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("XYZ", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      double double0 = (-1.0E-6);
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals((-1.0E-6), rotation0.getQ0(), 0.01D);
      assertEquals((-1.0E-6), rotation0.getQ1(), 0.01D);
      assertEquals((-1.0E-6), rotation0.getQ2(), 0.01D);
      assertEquals(3.1415906535897933, rotation0.getAngle(), 0.01D);
      assertEquals((-1.0E-6), rotation0.getQ3(), 0.01D);
      
      Vector3D vector3D0 = Vector3D.PLUS_I;
      assertNotNull(vector3D0);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      
      Vector3D vector3D1 = Vector3D.PLUS_J;
      assertNotNull(vector3D1);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(1.5707963267948966, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertNotSame(vector3D1, vector3D0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      
      Vector3D vector3D2 = rotation0.applyTo(vector3D1);
      assertNotNull(vector3D2);
      assertEquals((-1.0E-6), rotation0.getQ0(), 0.01D);
      assertEquals((-1.0E-6), rotation0.getQ1(), 0.01D);
      assertEquals((-1.0E-6), rotation0.getQ2(), 0.01D);
      assertEquals(3.1415906535897933, rotation0.getAngle(), 0.01D);
      assertEquals((-1.0E-6), rotation0.getQ3(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(1.5707963267948966, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D2.getZ(), 0.01D);
      assertEquals(0.999999999992, vector3D2.getNormSq(), 0.01D);
      assertEquals((-1.5707963267908966), vector3D2.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D2.getDelta(), 0.01D);
      assertEquals(0.999999999996, vector3D2.getNorm(), 0.01D);
      assertEquals((-0.999999999996), vector3D2.getY(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(0.999999999996, vector3D2.getNormInf(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(4.0E-12, vector3D2.getX(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D2, vector3D0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D2.equals((Object)vector3D0));
      
      Vector3D vector3D3 = vector3D0.crossProduct((Vector<Euclidean3D>) vector3D2);
      assertNotNull(vector3D3);
      assertEquals((-1.0E-6), rotation0.getQ0(), 0.01D);
      assertEquals((-1.0E-6), rotation0.getQ1(), 0.01D);
      assertEquals((-1.0E-6), rotation0.getQ2(), 0.01D);
      assertEquals(3.1415906535897933, rotation0.getAngle(), 0.01D);
      assertEquals((-1.0E-6), rotation0.getQ3(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(1.5707963267948966, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals((-1.5707963267948966), vector3D3.getDelta(), 0.01D);
      assertEquals(0.999999999996, vector3D3.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D3.getY(), 0.01D);
      assertEquals(0.999999999996, vector3D3.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D3.getX(), 0.01D);
      assertEquals(0.0, vector3D3.getAlpha(), 0.01D);
      assertEquals(0.999999999992, vector3D3.getNormSq(), 0.01D);
      assertEquals(0.999999999996, vector3D3.getNorm(), 0.01D);
      assertEquals(false, vector3D3.isInfinite());
      assertEquals(false, vector3D3.isNaN());
      assertEquals((-0.999999999996), vector3D3.getZ(), 0.01D);
      assertEquals(0.0, vector3D2.getZ(), 0.01D);
      assertEquals(0.999999999992, vector3D2.getNormSq(), 0.01D);
      assertEquals((-1.5707963267908966), vector3D2.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D2.getDelta(), 0.01D);
      assertEquals(0.999999999996, vector3D2.getNorm(), 0.01D);
      assertEquals((-0.999999999996), vector3D2.getY(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(0.999999999996, vector3D2.getNormInf(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(4.0E-12, vector3D2.getX(), 0.01D);
      assertNotSame(vector3D0, vector3D3);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D1, vector3D3);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D3, vector3D1);
      assertNotSame(vector3D3, vector3D2);
      assertNotSame(vector3D3, vector3D0);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D2, vector3D3);
      assertNotSame(vector3D2, vector3D0);
      assertFalse(vector3D0.equals((Object)vector3D3));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D1.equals((Object)vector3D3));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D3.equals((Object)vector3D1));
      assertFalse(vector3D3.equals((Object)vector3D2));
      assertFalse(vector3D3.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D2.equals((Object)vector3D3));
      assertFalse(vector3D2.equals((Object)vector3D0));
      
      Rotation rotation1 = new Rotation(vector3D3, vector3D0, vector3D0, vector3D3);
      assertNotNull(rotation1);
      assertEquals((-1.0E-6), rotation0.getQ0(), 0.01D);
      assertEquals((-1.0E-6), rotation0.getQ1(), 0.01D);
      assertEquals((-1.0E-6), rotation0.getQ2(), 0.01D);
      assertEquals(3.1415906535897933, rotation0.getAngle(), 0.01D);
      assertEquals((-1.0E-6), rotation0.getQ3(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(1.5707963267948966, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals((-1.5707963267948966), vector3D3.getDelta(), 0.01D);
      assertEquals(0.999999999996, vector3D3.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D3.getY(), 0.01D);
      assertEquals(0.999999999996, vector3D3.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D3.getX(), 0.01D);
      assertEquals(0.0, vector3D3.getAlpha(), 0.01D);
      assertEquals(0.999999999992, vector3D3.getNormSq(), 0.01D);
      assertEquals(0.999999999996, vector3D3.getNorm(), 0.01D);
      assertEquals(false, vector3D3.isInfinite());
      assertEquals(false, vector3D3.isNaN());
      assertEquals((-0.999999999996), vector3D3.getZ(), 0.01D);
      assertEquals(0.0, rotation1.getQ3(), 0.01D);
      assertEquals((-9.490626562425154E7), rotation1.getQ0(), 0.01D);
      assertEquals(1.0536712127723509E-8, rotation1.getAngle(), 0.01D);
      assertEquals((-5.268356063861754E-9), rotation1.getQ2(), 0.01D);
      assertEquals(0.0, rotation1.getQ1(), 0.01D);
      assertEquals(0.0, vector3D2.getZ(), 0.01D);
      assertEquals(0.999999999992, vector3D2.getNormSq(), 0.01D);
      assertEquals((-1.5707963267908966), vector3D2.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D2.getDelta(), 0.01D);
      assertEquals(0.999999999996, vector3D2.getNorm(), 0.01D);
      assertEquals((-0.999999999996), vector3D2.getY(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(0.999999999996, vector3D2.getNormInf(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(4.0E-12, vector3D2.getX(), 0.01D);
      assertNotSame(rotation0, rotation1);
      assertNotSame(vector3D0, vector3D3);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D1, vector3D3);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D3, vector3D1);
      assertNotSame(vector3D3, vector3D2);
      assertNotSame(vector3D3, vector3D0);
      assertNotSame(rotation1, rotation0);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D2, vector3D3);
      assertNotSame(vector3D2, vector3D0);
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(vector3D0.equals((Object)vector3D3));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D1.equals((Object)vector3D3));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D3.equals((Object)vector3D1));
      assertFalse(vector3D3.equals((Object)vector3D2));
      assertFalse(vector3D3.equals((Object)vector3D0));
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D2.equals((Object)vector3D3));
      assertFalse(vector3D2.equals((Object)vector3D0));
      
      RotationOrder rotationOrder0 = RotationOrder.XYZ;
      assertNotNull(rotationOrder0);
      assertEquals("XYZ", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation1.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      assertNotNull(vector3D0);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      assertNotNull(rotation0);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.XYZ;
      assertNotNull(rotationOrder0);
      assertEquals("XYZ", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals("XYZ", rotationOrder0.toString());
      assertArrayEquals(new double[] {-0.0, 0.0, -0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test34()  throws Throwable  {
      double double0 = 0.1;
      double double1 = 1707.92307034993;
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double1, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(3.1414755522972597, rotation0.getAngle(), 0.01D);
      assertEquals(5.8550646233313464E-5, rotation0.getQ3(), 0.01D);
      assertEquals(0.9999999948577329, rotation0.getQ2(), 0.01D);
      assertEquals(5.8550646233313464E-5, rotation0.getQ1(), 0.01D);
      assertEquals(5.8550646233313464E-5, rotation0.getQ0(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      Rotation rotation1 = rotation0.revert();
      assertNotNull(rotation1);
      assertEquals(5.8550646233313464E-5, rotation1.getQ3(), 0.01D);
      assertEquals(0.9999999948577329, rotation1.getQ2(), 0.01D);
      assertEquals(3.1414755522972597, rotation1.getAngle(), 0.01D);
      assertEquals(5.8550646233313464E-5, rotation1.getQ1(), 0.01D);
      assertEquals((-5.8550646233313464E-5), rotation1.getQ0(), 0.01D);
      assertEquals(3.1414755522972597, rotation0.getAngle(), 0.01D);
      assertEquals(5.8550646233313464E-5, rotation0.getQ3(), 0.01D);
      assertEquals(0.9999999948577329, rotation0.getQ2(), 0.01D);
      assertEquals(5.8550646233313464E-5, rotation0.getQ1(), 0.01D);
      assertEquals(5.8550646233313464E-5, rotation0.getQ0(), 0.01D);
      assertNotSame(rotation1, rotation0);
      assertNotSame(rotation0, rotation1);
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(double0 == double1);
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(double1 == double0);
      
      double double2 = rotation1.getAngle();
      assertEquals(5.8550646233313464E-5, rotation1.getQ3(), 0.01D);
      assertEquals(0.9999999948577329, rotation1.getQ2(), 0.01D);
      assertEquals(3.1414755522972597, rotation1.getAngle(), 0.01D);
      assertEquals(5.8550646233313464E-5, rotation1.getQ1(), 0.01D);
      assertEquals((-5.8550646233313464E-5), rotation1.getQ0(), 0.01D);
      assertEquals(3.1414755522972597, rotation0.getAngle(), 0.01D);
      assertEquals(5.8550646233313464E-5, rotation0.getQ3(), 0.01D);
      assertEquals(0.9999999948577329, rotation0.getQ2(), 0.01D);
      assertEquals(5.8550646233313464E-5, rotation0.getQ1(), 0.01D);
      assertEquals(5.8550646233313464E-5, rotation0.getQ0(), 0.01D);
      assertNotSame(rotation1, rotation0);
      assertNotSame(rotation0, rotation1);
      assertEquals(3.1414755522972597, double2, 0.01D);
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test35()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      assertNotNull(rotationOrder0);
      assertEquals("XZY", rotationOrder0.toString());
      
      double double0 = (-563.73254752);
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals("XZY", rotationOrder0.toString());
      assertEquals(0.06364280391292787, rotation0.getQ2(), 0.01D);
      assertEquals(1.5456580994578857, rotation0.getAngle(), 0.01D);
      assertEquals(0.06364280391292781, rotation0.getQ1(), 0.01D);
      assertEquals((-0.6923376323087321), rotation0.getQ3(), 0.01D);
      assertEquals(0.7159383981246851, rotation0.getQ0(), 0.01D);
      
      Rotation rotation1 = rotation0.revert();
      assertNotNull(rotation1);
      assertEquals("XZY", rotationOrder0.toString());
      assertEquals((-0.7159383981246851), rotation1.getQ0(), 0.01D);
      assertEquals(0.06364280391292781, rotation1.getQ1(), 0.01D);
      assertEquals(0.06364280391292787, rotation1.getQ2(), 0.01D);
      assertEquals((-0.6923376323087321), rotation1.getQ3(), 0.01D);
      assertEquals(1.5456580994578857, rotation1.getAngle(), 0.01D);
      assertEquals(0.06364280391292787, rotation0.getQ2(), 0.01D);
      assertEquals(1.5456580994578857, rotation0.getAngle(), 0.01D);
      assertEquals(0.06364280391292781, rotation0.getQ1(), 0.01D);
      assertEquals((-0.6923376323087321), rotation0.getQ3(), 0.01D);
      assertEquals(0.7159383981246851, rotation0.getQ0(), 0.01D);
      assertNotSame(rotation1, rotation0);
      assertNotSame(rotation0, rotation1);
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(rotation0.equals((Object)rotation1));
      
      Rotation rotation2 = rotation1.applyInverseTo(rotation0);
      assertNotNull(rotation2);
      assertEquals("XZY", rotationOrder0.toString());
      assertEquals((-0.7159383981246851), rotation1.getQ0(), 0.01D);
      assertEquals(0.06364280391292781, rotation1.getQ1(), 0.01D);
      assertEquals(0.06364280391292787, rotation1.getQ2(), 0.01D);
      assertEquals((-0.6923376323087321), rotation1.getQ3(), 0.01D);
      assertEquals(1.5456580994578857, rotation1.getAngle(), 0.01D);
      assertEquals(0.06364280391292787, rotation0.getQ2(), 0.01D);
      assertEquals(1.5456580994578857, rotation0.getAngle(), 0.01D);
      assertEquals(0.06364280391292781, rotation0.getQ1(), 0.01D);
      assertEquals((-0.6923376323087321), rotation0.getQ3(), 0.01D);
      assertEquals(0.7159383981246851, rotation0.getQ0(), 0.01D);
      assertEquals(0.09112865417117004, rotation2.getQ2(), 0.01D);
      assertEquals(3.0913161989157714, rotation2.getAngle(), 0.01D);
      assertEquals((-0.9913421908731018), rotation2.getQ3(), 0.01D);
      assertEquals(0.025135579818680143, rotation2.getQ0(), 0.01D);
      assertEquals(0.09112865417116996, rotation2.getQ1(), 0.01D);
      assertNotSame(rotation1, rotation2);
      assertNotSame(rotation1, rotation0);
      assertNotSame(rotation0, rotation2);
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation2, rotation0);
      assertNotSame(rotation2, rotation1);
      assertFalse(rotation1.equals((Object)rotation2));
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(rotation0.equals((Object)rotation2));
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(rotation2.equals((Object)rotation0));
      assertFalse(rotation2.equals((Object)rotation1));
      
      double double1 = rotation2.getAngle();
      assertEquals("XZY", rotationOrder0.toString());
      assertEquals((-0.7159383981246851), rotation1.getQ0(), 0.01D);
      assertEquals(0.06364280391292781, rotation1.getQ1(), 0.01D);
      assertEquals(0.06364280391292787, rotation1.getQ2(), 0.01D);
      assertEquals((-0.6923376323087321), rotation1.getQ3(), 0.01D);
      assertEquals(1.5456580994578857, rotation1.getAngle(), 0.01D);
      assertEquals(0.06364280391292787, rotation0.getQ2(), 0.01D);
      assertEquals(1.5456580994578857, rotation0.getAngle(), 0.01D);
      assertEquals(0.06364280391292781, rotation0.getQ1(), 0.01D);
      assertEquals((-0.6923376323087321), rotation0.getQ3(), 0.01D);
      assertEquals(0.7159383981246851, rotation0.getQ0(), 0.01D);
      assertEquals(0.09112865417117004, rotation2.getQ2(), 0.01D);
      assertEquals(3.0913161989157714, rotation2.getAngle(), 0.01D);
      assertEquals((-0.9913421908731018), rotation2.getQ3(), 0.01D);
      assertEquals(0.025135579818680143, rotation2.getQ0(), 0.01D);
      assertEquals(0.09112865417116996, rotation2.getQ1(), 0.01D);
      assertNotSame(rotation1, rotation2);
      assertNotSame(rotation1, rotation0);
      assertNotSame(rotation0, rotation2);
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation2, rotation0);
      assertNotSame(rotation2, rotation1);
      assertEquals(3.0913161989157714, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(rotation1.equals((Object)rotation2));
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(rotation0.equals((Object)rotation2));
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(rotation2.equals((Object)rotation0));
      assertFalse(rotation2.equals((Object)rotation1));
  }

  @Test
  public void test36()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      assertNotNull(rotationOrder0);
      assertEquals("XZY", rotationOrder0.toString());
      
      double double0 = (-563.73254752);
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals(0.06364280391292781, rotation0.getQ1(), 0.01D);
      assertEquals(1.5456580994578857, rotation0.getAngle(), 0.01D);
      assertEquals((-0.6923376323087321), rotation0.getQ3(), 0.01D);
      assertEquals(0.7159383981246851, rotation0.getQ0(), 0.01D);
      assertEquals(0.06364280391292787, rotation0.getQ2(), 0.01D);
      assertEquals("XZY", rotationOrder0.toString());
      
      double double1 = rotation0.getAngle();
      assertEquals(0.06364280391292781, rotation0.getQ1(), 0.01D);
      assertEquals(1.5456580994578857, rotation0.getAngle(), 0.01D);
      assertEquals((-0.6923376323087321), rotation0.getQ3(), 0.01D);
      assertEquals(0.7159383981246851, rotation0.getQ0(), 0.01D);
      assertEquals(0.06364280391292787, rotation0.getQ2(), 0.01D);
      assertEquals("XZY", rotationOrder0.toString());
      assertEquals(1.5456580994578857, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test37()  throws Throwable  {
      double double0 = 0.1;
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals(0.5, rotation0.getQ3(), 0.01D);
      assertEquals(0.5, rotation0.getQ0(), 0.01D);
      assertEquals(0.5, rotation0.getQ1(), 0.01D);
      assertEquals(0.5, rotation0.getQ2(), 0.01D);
      
      Rotation rotation1 = rotation0.revert();
      assertNotNull(rotation1);
      assertEquals((-0.5), rotation1.getQ0(), 0.01D);
      assertEquals(0.5, rotation1.getQ1(), 0.01D);
      assertEquals(0.5, rotation1.getQ2(), 0.01D);
      assertEquals(2.0943951023931953, rotation1.getAngle(), 0.01D);
      assertEquals(0.5, rotation1.getQ3(), 0.01D);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals(0.5, rotation0.getQ3(), 0.01D);
      assertEquals(0.5, rotation0.getQ0(), 0.01D);
      assertEquals(0.5, rotation0.getQ1(), 0.01D);
      assertEquals(0.5, rotation0.getQ2(), 0.01D);
      assertNotSame(rotation1, rotation0);
      assertNotSame(rotation0, rotation1);
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(rotation0.equals((Object)rotation1));
      
      Vector3D vector3D0 = rotation1.getAxis();
      assertNotNull(vector3D0);
      assertEquals(0.5773502691896258, vector3D0.getZ(), 0.01D);
      assertEquals(1.0000000000000002, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.6154797086703875, vector3D0.getDelta(), 0.01D);
      assertEquals(0.5773502691896258, vector3D0.getY(), 0.01D);
      assertEquals(0.5773502691896258, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.7320508075688776, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.5773502691896258, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals((-0.5), rotation1.getQ0(), 0.01D);
      assertEquals(0.5, rotation1.getQ1(), 0.01D);
      assertEquals(0.5, rotation1.getQ2(), 0.01D);
      assertEquals(2.0943951023931953, rotation1.getAngle(), 0.01D);
      assertEquals(0.5, rotation1.getQ3(), 0.01D);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals(0.5, rotation0.getQ3(), 0.01D);
      assertEquals(0.5, rotation0.getQ0(), 0.01D);
      assertEquals(0.5, rotation0.getQ1(), 0.01D);
      assertEquals(0.5, rotation0.getQ2(), 0.01D);
      assertNotSame(rotation1, rotation0);
      assertNotSame(rotation0, rotation1);
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(rotation0.equals((Object)rotation1));
  }

  @Test
  public void test38()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      assertNotNull(vector3D0);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      
      Vector3D vector3D1 = rotation0.getAxis();
      assertNotNull(vector3D1);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
  }

  @Test
  public void test39()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      assertNotNull(vector3D0);
      assertEquals(0.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getNormInf(), 0.01D);
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
      }
  }

  @Test
  public void test40()  throws Throwable  {
      double double0 = 0.9999999999;
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(0.5, rotation0.getQ3(), 0.01D);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals(0.5, rotation0.getQ2(), 0.01D);
      assertEquals(0.5, rotation0.getQ1(), 0.01D);
      assertEquals(0.5, rotation0.getQ0(), 0.01D);
      
      Vector3D vector3D0 = rotation0.getAxis();
      assertNotNull(vector3D0);
      assertEquals((-0.5773502691896258), vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      assertEquals((-0.5773502691896258), vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.7320508075688776, vector3D0.getNorm1(), 0.01D);
      assertEquals((-0.5773502691896258), vector3D0.getX(), 0.01D);
      assertEquals(0.5773502691896258, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0000000000000002, vector3D0.getNormSq(), 0.01D);
      assertEquals((-0.6154797086703875), vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.5, rotation0.getQ3(), 0.01D);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals(0.5, rotation0.getQ2(), 0.01D);
      assertEquals(0.5, rotation0.getQ1(), 0.01D);
      assertEquals(0.5, rotation0.getQ0(), 0.01D);
      
      Vector3D vector3D1 = Vector3D.MINUS_J;
      assertNotNull(vector3D1);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      assertEquals((-1.0), vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      
      Rotation rotation1 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D1);
      assertNotNull(rotation1);
      assertEquals((-0.5773502691896258), vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      assertEquals((-0.5773502691896258), vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.7320508075688776, vector3D0.getNorm1(), 0.01D);
      assertEquals((-0.5773502691896258), vector3D0.getX(), 0.01D);
      assertEquals(0.5773502691896258, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0000000000000002, vector3D0.getNormSq(), 0.01D);
      assertEquals((-0.6154797086703875), vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      assertEquals((-1.0), vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.5, rotation0.getQ3(), 0.01D);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals(0.5, rotation0.getQ2(), 0.01D);
      assertEquals(0.5, rotation0.getQ1(), 0.01D);
      assertEquals(0.5, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation1.getQ2(), 0.01D);
      assertEquals(0.0, rotation1.getQ1(), 0.01D);
      assertEquals(0.0, rotation1.getAngle(), 0.01D);
      assertEquals(0.0, rotation1.getQ3(), 0.01D);
      assertEquals(1.0, rotation1.getQ0(), 0.01D);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation1, rotation0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(rotation1.equals((Object)rotation0));
  }

  @Test
  public void test41()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      assertNotNull(vector3D0);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      
      Vector3D vector3D1 = vector3D0.orthogonal();
      assertNotNull(vector3D1);
      assertEquals((-1.5707963267948966), vector3D1.getDelta(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals((-1.0), vector3D1.getZ(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(3.141592653589793, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(-0.0, vector3D1.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      
      Rotation rotation0 = new Rotation(vector3D1, vector3D0, vector3D0, vector3D1);
      assertNotNull(rotation0);
      assertEquals((-1.5707963267948966), vector3D1.getDelta(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals((-1.0), vector3D1.getZ(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(3.141592653589793, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(-0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.7071067811865475, rotation0.getQ3(), 0.01D);
      assertEquals(0.7071067811865475, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
  }

  @Test
  public void test42()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZXZ;
      assertNotNull(rotationOrder0);
      assertEquals("ZXZ", rotationOrder0.toString());
      
      Vector3D vector3D0 = rotationOrder0.getA2();
      assertNotNull(vector3D0);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals("ZXZ", rotationOrder0.toString());
      
      double double0 = 0.0;
      Vector3D vector3D1 = new Vector3D(double0, vector3D0);
      assertNotNull(vector3D1);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals("ZXZ", rotationOrder0.toString());
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
      }
  }

  @Test
  public void test43()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZYZ;
      assertNotNull(rotationOrder0);
      assertEquals("ZYZ", rotationOrder0.toString());
      
      Vector3D vector3D0 = rotationOrder0.getA3();
      assertNotNull(vector3D0);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals("ZYZ", rotationOrder0.toString());
      
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      assertNotNull(vector3D1);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals("ZYZ", rotationOrder0.toString());
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, vector3D0, vector3D1, vector3D1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
      }
  }

  @Test
  public void test44()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      assertNotNull(vector3D0);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      
      Vector3D vector3D1 = vector3D0.getZero();
      assertNotNull(vector3D1);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, vector3D1, vector3D0, vector3D1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
      }
  }

  @Test
  public void test45()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      assertNotNull(vector3D0);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
      }
  }

  @Test
  public void test46()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      assertNotNull(rotationOrder0);
      assertEquals("XZY", rotationOrder0.toString());
      
      double double0 = 1820.189259;
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals((-0.11951027853900104), rotation0.getQ3(), 0.01D);
      assertEquals(2.3722411102923147, rotation0.getAngle(), 0.01D);
      assertEquals(0.6499608678313653, rotation0.getQ2(), 0.01D);
      assertEquals((-0.3752586226848455), rotation0.getQ0(), 0.01D);
      assertEquals(0.6499608678313653, rotation0.getQ1(), 0.01D);
      assertEquals("XZY", rotationOrder0.toString());
      
      double[][] doubleArray0 = rotation0.getMatrix();
      assertNotNull(doubleArray0);
      assertEquals((-0.11951027853900104), rotation0.getQ3(), 0.01D);
      assertEquals(2.3722411102923147, rotation0.getAngle(), 0.01D);
      assertEquals(0.6499608678313653, rotation0.getQ2(), 0.01D);
      assertEquals((-0.3752586226848455), rotation0.getQ0(), 0.01D);
      assertEquals(0.6499608678313653, rotation0.getQ1(), 0.01D);
      assertEquals("XZY", rotationOrder0.toString());
      
      double[] doubleArray1 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray1);
      assertEquals((-0.11951027853900104), rotation0.getQ3(), 0.01D);
      assertEquals(2.3722411102923147, rotation0.getAngle(), 0.01D);
      assertEquals(0.6499608678313653, rotation0.getQ2(), 0.01D);
      assertEquals((-0.3752586226848455), rotation0.getQ0(), 0.01D);
      assertEquals(0.6499608678313653, rotation0.getQ1(), 0.01D);
      assertEquals("XZY", rotationOrder0.toString());
      assertArrayEquals(new double[] {1.2071125715097082, (-1.2071125715097075), 1.2071125715097082}, doubleArray1, 0.01);
      
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      assertEquals((-0.11951027853900104), rotation0.getQ3(), 0.01D);
      assertEquals(2.3722411102923147, rotation0.getAngle(), 0.01D);
      assertEquals(0.6499608678313653, rotation0.getQ2(), 0.01D);
      assertEquals((-0.3752586226848455), rotation0.getQ0(), 0.01D);
      assertEquals(0.6499608678313653, rotation0.getQ1(), 0.01D);
      assertEquals("XZY", rotationOrder0.toString());
      
      Rotation rotation1 = new Rotation(doubleArray0, double0);
      assertNotNull(rotation1);
      assertEquals(0.7176341206192519, rotation1.getQ2(), 0.01D);
      assertEquals(Double.NaN, rotation1.getAngle(), 0.01D);
      assertEquals(0.730481368290666, rotation1.getQ0(), 0.01D);
      assertEquals(0.6719076799745441, rotation1.getQ1(), 0.01D);
      assertEquals((-0.527253552440757), rotation1.getQ3(), 0.01D);
      assertEquals((-0.11951027853900104), rotation0.getQ3(), 0.01D);
      assertEquals(2.3722411102923147, rotation0.getAngle(), 0.01D);
      assertEquals(0.6499608678313653, rotation0.getQ2(), 0.01D);
      assertEquals((-0.3752586226848455), rotation0.getQ0(), 0.01D);
      assertEquals(0.6499608678313653, rotation0.getQ1(), 0.01D);
      assertEquals("XZY", rotationOrder0.toString());
      assertNotSame(rotation1, rotation0);
      assertNotSame(rotation0, rotation1);
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(rotation0.equals((Object)rotation1));
  }

  @Test
  public void test47()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      assertNotNull(rotationOrder0);
      assertEquals("XZY", rotationOrder0.toString());
      
      double double0 = (-563.73254752);
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals((-0.6923376323087321), rotation0.getQ3(), 0.01D);
      assertEquals(0.06364280391292787, rotation0.getQ2(), 0.01D);
      assertEquals(1.5456580994578857, rotation0.getAngle(), 0.01D);
      assertEquals(0.7159383981246851, rotation0.getQ0(), 0.01D);
      assertEquals(0.06364280391292781, rotation0.getQ1(), 0.01D);
      assertEquals("XZY", rotationOrder0.toString());
      
      double double1 = rotation0.getQ2();
      assertEquals((-0.6923376323087321), rotation0.getQ3(), 0.01D);
      assertEquals(0.06364280391292787, rotation0.getQ2(), 0.01D);
      assertEquals(1.5456580994578857, rotation0.getAngle(), 0.01D);
      assertEquals(0.7159383981246851, rotation0.getQ0(), 0.01D);
      assertEquals(0.06364280391292781, rotation0.getQ1(), 0.01D);
      assertEquals("XZY", rotationOrder0.toString());
      assertEquals(0.06364280391292787, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      Rotation rotation1 = rotation0.revert();
      assertNotNull(rotation1);
      assertEquals((-0.7159383981246851), rotation1.getQ0(), 0.01D);
      assertEquals(1.5456580994578857, rotation1.getAngle(), 0.01D);
      assertEquals(0.06364280391292787, rotation1.getQ2(), 0.01D);
      assertEquals(0.06364280391292781, rotation1.getQ1(), 0.01D);
      assertEquals((-0.6923376323087321), rotation1.getQ3(), 0.01D);
      assertEquals((-0.6923376323087321), rotation0.getQ3(), 0.01D);
      assertEquals(0.06364280391292787, rotation0.getQ2(), 0.01D);
      assertEquals(1.5456580994578857, rotation0.getAngle(), 0.01D);
      assertEquals(0.7159383981246851, rotation0.getQ0(), 0.01D);
      assertEquals(0.06364280391292781, rotation0.getQ1(), 0.01D);
      assertEquals("XZY", rotationOrder0.toString());
      assertNotSame(rotation1, rotation0);
      assertNotSame(rotation0, rotation1);
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(double0 == double1);
      
      Rotation rotation2 = rotation1.applyInverseTo(rotation0);
      assertNotNull(rotation2);
      assertEquals((-0.7159383981246851), rotation1.getQ0(), 0.01D);
      assertEquals(1.5456580994578857, rotation1.getAngle(), 0.01D);
      assertEquals(0.06364280391292787, rotation1.getQ2(), 0.01D);
      assertEquals(0.06364280391292781, rotation1.getQ1(), 0.01D);
      assertEquals((-0.6923376323087321), rotation1.getQ3(), 0.01D);
      assertEquals((-0.6923376323087321), rotation0.getQ3(), 0.01D);
      assertEquals(0.06364280391292787, rotation0.getQ2(), 0.01D);
      assertEquals(1.5456580994578857, rotation0.getAngle(), 0.01D);
      assertEquals(0.7159383981246851, rotation0.getQ0(), 0.01D);
      assertEquals(0.06364280391292781, rotation0.getQ1(), 0.01D);
      assertEquals(0.09112865417116996, rotation2.getQ1(), 0.01D);
      assertEquals(0.09112865417117004, rotation2.getQ2(), 0.01D);
      assertEquals(0.025135579818680143, rotation2.getQ0(), 0.01D);
      assertEquals((-0.9913421908731018), rotation2.getQ3(), 0.01D);
      assertEquals(3.0913161989157714, rotation2.getAngle(), 0.01D);
      assertEquals("XZY", rotationOrder0.toString());
      assertNotSame(rotation1, rotation2);
      assertNotSame(rotation1, rotation0);
      assertNotSame(rotation0, rotation2);
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation2, rotation0);
      assertNotSame(rotation2, rotation1);
      assertFalse(rotation1.equals((Object)rotation2));
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(rotation0.equals((Object)rotation2));
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(rotation2.equals((Object)rotation0));
      assertFalse(rotation2.equals((Object)rotation1));
      assertFalse(double0 == double1);
      
      double[][] doubleArray0 = rotation2.getMatrix();
      assertNotNull(doubleArray0);
      assertEquals((-0.7159383981246851), rotation1.getQ0(), 0.01D);
      assertEquals(1.5456580994578857, rotation1.getAngle(), 0.01D);
      assertEquals(0.06364280391292787, rotation1.getQ2(), 0.01D);
      assertEquals(0.06364280391292781, rotation1.getQ1(), 0.01D);
      assertEquals((-0.6923376323087321), rotation1.getQ3(), 0.01D);
      assertEquals((-0.6923376323087321), rotation0.getQ3(), 0.01D);
      assertEquals(0.06364280391292787, rotation0.getQ2(), 0.01D);
      assertEquals(1.5456580994578857, rotation0.getAngle(), 0.01D);
      assertEquals(0.7159383981246851, rotation0.getQ0(), 0.01D);
      assertEquals(0.06364280391292781, rotation0.getQ1(), 0.01D);
      assertEquals(0.09112865417116996, rotation2.getQ1(), 0.01D);
      assertEquals(0.09112865417117004, rotation2.getQ2(), 0.01D);
      assertEquals(0.025135579818680143, rotation2.getQ0(), 0.01D);
      assertEquals((-0.9913421908731018), rotation2.getQ3(), 0.01D);
      assertEquals(3.0913161989157714, rotation2.getAngle(), 0.01D);
      assertEquals("XZY", rotationOrder0.toString());
      assertNotSame(rotation1, rotation2);
      assertNotSame(rotation1, rotation0);
      assertNotSame(rotation0, rotation2);
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation2, rotation0);
      assertNotSame(rotation2, rotation1);
      assertFalse(rotation1.equals((Object)rotation2));
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(rotation0.equals((Object)rotation2));
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(rotation2.equals((Object)rotation0));
      assertFalse(rotation2.equals((Object)rotation1));
      assertFalse(double0 == double1);
      
      Rotation rotation3 = new Rotation(doubleArray0, double1);
      assertNotNull(rotation3);
      assertEquals((-0.09112865417116994), rotation3.getQ1(), 0.01D);
      assertEquals(3.0913161989157714, rotation3.getAngle(), 0.01D);
      assertEquals(0.9913421908731018, rotation3.getQ3(), 0.01D);
      assertEquals((-0.025135579818680143), rotation3.getQ0(), 0.01D);
      assertEquals((-0.09112865417117003), rotation3.getQ2(), 0.01D);
      assertEquals((-0.7159383981246851), rotation1.getQ0(), 0.01D);
      assertEquals(1.5456580994578857, rotation1.getAngle(), 0.01D);
      assertEquals(0.06364280391292787, rotation1.getQ2(), 0.01D);
      assertEquals(0.06364280391292781, rotation1.getQ1(), 0.01D);
      assertEquals((-0.6923376323087321), rotation1.getQ3(), 0.01D);
      assertEquals((-0.6923376323087321), rotation0.getQ3(), 0.01D);
      assertEquals(0.06364280391292787, rotation0.getQ2(), 0.01D);
      assertEquals(1.5456580994578857, rotation0.getAngle(), 0.01D);
      assertEquals(0.7159383981246851, rotation0.getQ0(), 0.01D);
      assertEquals(0.06364280391292781, rotation0.getQ1(), 0.01D);
      assertEquals(0.09112865417116996, rotation2.getQ1(), 0.01D);
      assertEquals(0.09112865417117004, rotation2.getQ2(), 0.01D);
      assertEquals(0.025135579818680143, rotation2.getQ0(), 0.01D);
      assertEquals((-0.9913421908731018), rotation2.getQ3(), 0.01D);
      assertEquals(3.0913161989157714, rotation2.getAngle(), 0.01D);
      assertEquals("XZY", rotationOrder0.toString());
      assertNotSame(rotation3, rotation0);
      assertNotSame(rotation3, rotation2);
      assertNotSame(rotation3, rotation1);
      assertNotSame(rotation1, rotation3);
      assertNotSame(rotation1, rotation2);
      assertNotSame(rotation1, rotation0);
      assertNotSame(rotation0, rotation2);
      assertNotSame(rotation0, rotation3);
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation2, rotation0);
      assertNotSame(rotation2, rotation3);
      assertNotSame(rotation2, rotation1);
      assertFalse(double1 == double0);
      assertFalse(rotation3.equals((Object)rotation0));
      assertFalse(rotation3.equals((Object)rotation2));
      assertFalse(rotation3.equals((Object)rotation1));
      assertFalse(rotation1.equals((Object)rotation3));
      assertFalse(rotation1.equals((Object)rotation2));
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(rotation0.equals((Object)rotation2));
      assertFalse(rotation0.equals((Object)rotation3));
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(rotation2.equals((Object)rotation0));
      assertFalse(rotation2.equals((Object)rotation3));
      assertFalse(rotation2.equals((Object)rotation1));
      assertFalse(double0 == double1);
  }

  @Test
  public void test48()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      assertNotNull(rotationOrder0);
      assertEquals("XZY", rotationOrder0.toString());
      
      double double0 = (-1447.4);
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals((-0.6677699919506612), rotation0.getQ0(), 0.01D);
      assertEquals(0.5098125414301931, rotation0.getQ2(), 0.01D);
      assertEquals(1.6791748451905935, rotation0.getAngle(), 0.01D);
      assertEquals(0.5098125414301931, rotation0.getQ1(), 0.01D);
      assertEquals((-0.18510965142636154), rotation0.getQ3(), 0.01D);
      assertEquals("XZY", rotationOrder0.toString());
      
      double double1 = rotation0.getAngle();
      assertEquals((-0.6677699919506612), rotation0.getQ0(), 0.01D);
      assertEquals(0.5098125414301931, rotation0.getQ2(), 0.01D);
      assertEquals(1.6791748451905935, rotation0.getAngle(), 0.01D);
      assertEquals(0.5098125414301931, rotation0.getQ1(), 0.01D);
      assertEquals((-0.18510965142636154), rotation0.getQ3(), 0.01D);
      assertEquals("XZY", rotationOrder0.toString());
      assertEquals(1.6791748451905935, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      Rotation rotation1 = rotation0.revert();
      assertNotNull(rotation1);
      assertEquals((-0.6677699919506612), rotation0.getQ0(), 0.01D);
      assertEquals(0.5098125414301931, rotation0.getQ2(), 0.01D);
      assertEquals(1.6791748451905935, rotation0.getAngle(), 0.01D);
      assertEquals(0.5098125414301931, rotation0.getQ1(), 0.01D);
      assertEquals((-0.18510965142636154), rotation0.getQ3(), 0.01D);
      assertEquals("XZY", rotationOrder0.toString());
      assertEquals(1.6791748451905935, rotation1.getAngle(), 0.01D);
      assertEquals(0.5098125414301931, rotation1.getQ2(), 0.01D);
      assertEquals(0.6677699919506612, rotation1.getQ0(), 0.01D);
      assertEquals(0.5098125414301931, rotation1.getQ1(), 0.01D);
      assertEquals((-0.18510965142636154), rotation1.getQ3(), 0.01D);
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation1, rotation0);
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(double0 == double1);
      assertFalse(rotation1.equals((Object)rotation0));
      
      Rotation rotation2 = rotation1.applyInverseTo(rotation0);
      assertNotNull(rotation2);
      assertEquals((-0.6677699919506612), rotation0.getQ0(), 0.01D);
      assertEquals(0.5098125414301931, rotation0.getQ2(), 0.01D);
      assertEquals(1.6791748451905935, rotation0.getAngle(), 0.01D);
      assertEquals(0.5098125414301931, rotation0.getQ1(), 0.01D);
      assertEquals((-0.18510965142636154), rotation0.getQ3(), 0.01D);
      assertEquals("XZY", rotationOrder0.toString());
      assertEquals(1.6791748451905935, rotation1.getAngle(), 0.01D);
      assertEquals(0.5098125414301931, rotation1.getQ2(), 0.01D);
      assertEquals(0.6677699919506612, rotation1.getQ0(), 0.01D);
      assertEquals(0.5098125414301931, rotation1.getQ1(), 0.01D);
      assertEquals((-0.18510965142636154), rotation1.getQ3(), 0.01D);
      assertEquals(0.2472213408859423, rotation2.getQ3(), 0.01D);
      assertEquals((-0.10816647570042759), rotation2.getQ0(), 0.01D);
      assertEquals(2.9248356167983958, rotation2.getAngle(), 0.01D);
      assertEquals((-0.6808750333743723), rotation2.getQ2(), 0.01D);
      assertEquals((-0.6808750333743723), rotation2.getQ1(), 0.01D);
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation0, rotation2);
      assertNotSame(rotation1, rotation0);
      assertNotSame(rotation1, rotation2);
      assertNotSame(rotation2, rotation1);
      assertNotSame(rotation2, rotation0);
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(rotation0.equals((Object)rotation2));
      assertFalse(double0 == double1);
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(rotation1.equals((Object)rotation2));
      assertFalse(rotation2.equals((Object)rotation1));
      assertFalse(rotation2.equals((Object)rotation0));
      
      double[][] doubleArray0 = rotation2.getMatrix();
      assertNotNull(doubleArray0);
      assertEquals((-0.6677699919506612), rotation0.getQ0(), 0.01D);
      assertEquals(0.5098125414301931, rotation0.getQ2(), 0.01D);
      assertEquals(1.6791748451905935, rotation0.getAngle(), 0.01D);
      assertEquals(0.5098125414301931, rotation0.getQ1(), 0.01D);
      assertEquals((-0.18510965142636154), rotation0.getQ3(), 0.01D);
      assertEquals("XZY", rotationOrder0.toString());
      assertEquals(1.6791748451905935, rotation1.getAngle(), 0.01D);
      assertEquals(0.5098125414301931, rotation1.getQ2(), 0.01D);
      assertEquals(0.6677699919506612, rotation1.getQ0(), 0.01D);
      assertEquals(0.5098125414301931, rotation1.getQ1(), 0.01D);
      assertEquals((-0.18510965142636154), rotation1.getQ3(), 0.01D);
      assertEquals(0.2472213408859423, rotation2.getQ3(), 0.01D);
      assertEquals((-0.10816647570042759), rotation2.getQ0(), 0.01D);
      assertEquals(2.9248356167983958, rotation2.getAngle(), 0.01D);
      assertEquals((-0.6808750333743723), rotation2.getQ2(), 0.01D);
      assertEquals((-0.6808750333743723), rotation2.getQ1(), 0.01D);
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation0, rotation2);
      assertNotSame(rotation1, rotation0);
      assertNotSame(rotation1, rotation2);
      assertNotSame(rotation2, rotation1);
      assertNotSame(rotation2, rotation0);
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(rotation0.equals((Object)rotation2));
      assertFalse(double0 == double1);
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(rotation1.equals((Object)rotation2));
      assertFalse(rotation2.equals((Object)rotation1));
      assertFalse(rotation2.equals((Object)rotation0));
      
      Rotation rotation3 = new Rotation(doubleArray0, double1);
      assertNotNull(rotation3);
      assertEquals((-0.6677699919506612), rotation0.getQ0(), 0.01D);
      assertEquals(0.5098125414301931, rotation0.getQ2(), 0.01D);
      assertEquals(1.6791748451905935, rotation0.getAngle(), 0.01D);
      assertEquals(0.5098125414301931, rotation0.getQ1(), 0.01D);
      assertEquals((-0.18510965142636154), rotation0.getQ3(), 0.01D);
      assertEquals("XZY", rotationOrder0.toString());
      assertEquals(1.6791748451905935, rotation1.getAngle(), 0.01D);
      assertEquals(0.5098125414301931, rotation1.getQ2(), 0.01D);
      assertEquals(0.6677699919506612, rotation1.getQ0(), 0.01D);
      assertEquals(0.5098125414301931, rotation1.getQ1(), 0.01D);
      assertEquals((-0.18510965142636154), rotation1.getQ3(), 0.01D);
      assertEquals(0.2472213408859423, rotation2.getQ3(), 0.01D);
      assertEquals((-0.10816647570042759), rotation2.getQ0(), 0.01D);
      assertEquals(2.9248356167983958, rotation2.getAngle(), 0.01D);
      assertEquals((-0.6808750333743723), rotation2.getQ2(), 0.01D);
      assertEquals((-0.6808750333743723), rotation2.getQ1(), 0.01D);
      assertEquals(0.6808750333743724, rotation3.getQ2(), 0.01D);
      assertEquals((-0.2472213408859424), rotation3.getQ3(), 0.01D);
      assertEquals(0.6808750333743724, rotation3.getQ1(), 0.01D);
      assertEquals(2.9248356167984, rotation3.getAngle(), 0.01D);
      assertEquals(0.10816647570042756, rotation3.getQ0(), 0.01D);
      assertNotSame(rotation0, rotation3);
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation0, rotation2);
      assertNotSame(rotation1, rotation0);
      assertNotSame(rotation1, rotation2);
      assertNotSame(rotation1, rotation3);
      assertNotSame(rotation2, rotation1);
      assertNotSame(rotation2, rotation3);
      assertNotSame(rotation2, rotation0);
      assertNotSame(rotation3, rotation2);
      assertNotSame(rotation3, rotation1);
      assertNotSame(rotation3, rotation0);
      assertFalse(rotation0.equals((Object)rotation3));
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(rotation0.equals((Object)rotation2));
      assertFalse(double0 == double1);
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(rotation1.equals((Object)rotation2));
      assertFalse(rotation1.equals((Object)rotation3));
      assertFalse(rotation2.equals((Object)rotation1));
      assertFalse(rotation2.equals((Object)rotation3));
      assertFalse(rotation2.equals((Object)rotation0));
      assertFalse(rotation3.equals((Object)rotation2));
      assertFalse(rotation3.equals((Object)rotation1));
      assertFalse(rotation3.equals((Object)rotation0));
      assertFalse(double1 == double0);
  }

  @Test
  public void test49()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      assertNotNull(rotationOrder0);
      assertEquals("XZY", rotationOrder0.toString());
      
      double double0 = (-1447.4);
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals("XZY", rotationOrder0.toString());
      assertEquals(0.5098125414301931, rotation0.getQ1(), 0.01D);
      assertEquals(0.5098125414301931, rotation0.getQ2(), 0.01D);
      assertEquals((-0.6677699919506612), rotation0.getQ0(), 0.01D);
      assertEquals((-0.18510965142636154), rotation0.getQ3(), 0.01D);
      assertEquals(1.6791748451905935, rotation0.getAngle(), 0.01D);
      
      double double1 = rotation0.getAngle();
      assertEquals("XZY", rotationOrder0.toString());
      assertEquals(0.5098125414301931, rotation0.getQ1(), 0.01D);
      assertEquals(0.5098125414301931, rotation0.getQ2(), 0.01D);
      assertEquals((-0.6677699919506612), rotation0.getQ0(), 0.01D);
      assertEquals((-0.18510965142636154), rotation0.getQ3(), 0.01D);
      assertEquals(1.6791748451905935, rotation0.getAngle(), 0.01D);
      assertEquals(1.6791748451905935, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double[][] doubleArray0 = rotation0.getMatrix();
      assertNotNull(doubleArray0);
      assertEquals("XZY", rotationOrder0.toString());
      assertEquals(0.5098125414301931, rotation0.getQ1(), 0.01D);
      assertEquals(0.5098125414301931, rotation0.getQ2(), 0.01D);
      assertEquals((-0.6677699919506612), rotation0.getQ0(), 0.01D);
      assertEquals((-0.18510965142636154), rotation0.getQ3(), 0.01D);
      assertEquals(1.6791748451905935, rotation0.getAngle(), 0.01D);
      assertFalse(double0 == double1);
      
      Rotation rotation1 = new Rotation(doubleArray0, double1);
      assertNotNull(rotation1);
      assertEquals("XZY", rotationOrder0.toString());
      assertEquals(0.5098125414301931, rotation0.getQ1(), 0.01D);
      assertEquals(0.5098125414301931, rotation0.getQ2(), 0.01D);
      assertEquals((-0.6677699919506612), rotation0.getQ0(), 0.01D);
      assertEquals((-0.18510965142636154), rotation0.getQ3(), 0.01D);
      assertEquals(1.6791748451905935, rotation0.getAngle(), 0.01D);
      assertEquals(1.6791748451905935, rotation1.getAngle(), 0.01D);
      assertEquals((-0.5098125414301931), rotation1.getQ1(), 0.01D);
      assertEquals((-0.5098125414301931), rotation1.getQ2(), 0.01D);
      assertEquals(0.18510965142636152, rotation1.getQ3(), 0.01D);
      assertEquals(0.6677699919506612, rotation1.getQ0(), 0.01D);
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation1, rotation0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(rotation1.equals((Object)rotation0));
  }

  @Test
  public void test50()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[3];
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      doubleArray0[1] = doubleArray1;
      assertNotNull(doubleArray0[1]);
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(doubleArray0, doubleArray1[2]);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // a 3x3 matrix cannot be a rotation matrix
         //
      }
  }

  @Test
  public void test51()  throws Throwable  {
      double[][] doubleArray0 = new double[3][1];
      double[] doubleArray1 = new double[3];
      double double0 = (-432.1218871882488);
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(doubleArray0, double0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // a 3x3 matrix cannot be a rotation matrix
         //
      }
  }

  @Test
  public void test52()  throws Throwable  {
      double double0 = (-0.19);
      double[][] doubleArray0 = new double[3][8];
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(doubleArray0, double0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // a 3x8 matrix cannot be a rotation matrix
         //
      }
  }

  @Test
  public void test53()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      assertNotNull(rotationOrder0);
      assertEquals("XZY", rotationOrder0.toString());
      
      double double0 = (-1447.4);
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals("XZY", rotationOrder0.toString());
      assertEquals((-0.18510965142636154), rotation0.getQ3(), 0.01D);
      assertEquals((-0.6677699919506612), rotation0.getQ0(), 0.01D);
      assertEquals(0.5098125414301931, rotation0.getQ2(), 0.01D);
      assertEquals(0.5098125414301931, rotation0.getQ1(), 0.01D);
      assertEquals(1.6791748451905935, rotation0.getAngle(), 0.01D);
      
      double[][] doubleArray0 = rotation0.getMatrix();
      assertNotNull(doubleArray0);
      assertEquals("XZY", rotationOrder0.toString());
      assertEquals((-0.18510965142636154), rotation0.getQ3(), 0.01D);
      assertEquals((-0.6677699919506612), rotation0.getQ0(), 0.01D);
      assertEquals(0.5098125414301931, rotation0.getQ2(), 0.01D);
      assertEquals(0.5098125414301931, rotation0.getQ1(), 0.01D);
      assertEquals(1.6791748451905935, rotation0.getAngle(), 0.01D);
      
      Rotation rotation1 = null;
      try {
        rotation1 = new Rotation(doubleArray0, double0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // unable to orthogonalize matrix in 10 iterations
         //
      }
  }

  @Test
  public void test54()  throws Throwable  {
      double double0 = 0.0;
      double[][] doubleArray0 = new double[2][5];
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(doubleArray0, double0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // a 2x5 matrix cannot be a rotation matrix
         //
      }
  }

  @Test
  public void test55()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      assertNotNull(vector3D0);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      
      Vector3D vector3D1 = vector3D0.getZero();
      assertNotNull(vector3D1);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      
      double double0 = 584.63310428;
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D1, double0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm for rotation axis
         //
      }
  }

  @Test
  public void test56()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      assertNotNull(vector3D0);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      assertNotNull(rotation0);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      
      double double0 = rotation0.getQ0();
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test57()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      assertNotNull(rotationOrder0);
      assertEquals("XZY", rotationOrder0.toString());
      
      double double0 = 1820.189259;
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals("XZY", rotationOrder0.toString());
      assertEquals(0.6499608678313653, rotation0.getQ2(), 0.01D);
      assertEquals(0.6499608678313653, rotation0.getQ1(), 0.01D);
      assertEquals((-0.11951027853900104), rotation0.getQ3(), 0.01D);
      assertEquals((-0.3752586226848455), rotation0.getQ0(), 0.01D);
      assertEquals(2.3722411102923147, rotation0.getAngle(), 0.01D);
      
      double double1 = rotation0.getQ1();
      assertEquals("XZY", rotationOrder0.toString());
      assertEquals(0.6499608678313653, rotation0.getQ2(), 0.01D);
      assertEquals(0.6499608678313653, rotation0.getQ1(), 0.01D);
      assertEquals((-0.11951027853900104), rotation0.getQ3(), 0.01D);
      assertEquals((-0.3752586226848455), rotation0.getQ0(), 0.01D);
      assertEquals(2.3722411102923147, rotation0.getAngle(), 0.01D);
      assertEquals(0.6499608678313653, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test58()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      assertNotNull(rotationOrder0);
      assertEquals("XZY", rotationOrder0.toString());
      
      double double0 = 1820.189259;
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals("XZY", rotationOrder0.toString());
      assertEquals(0.6499608678313653, rotation0.getQ1(), 0.01D);
      assertEquals(2.3722411102923147, rotation0.getAngle(), 0.01D);
      assertEquals((-0.3752586226848455), rotation0.getQ0(), 0.01D);
      assertEquals((-0.11951027853900104), rotation0.getQ3(), 0.01D);
      assertEquals(0.6499608678313653, rotation0.getQ2(), 0.01D);
      
      double double1 = Rotation.distance(rotation0, rotation0);
      assertEquals("XZY", rotationOrder0.toString());
      assertEquals(0.6499608678313653, rotation0.getQ1(), 0.01D);
      assertEquals(2.3722411102923147, rotation0.getAngle(), 0.01D);
      assertEquals((-0.3752586226848455), rotation0.getQ0(), 0.01D);
      assertEquals((-0.11951027853900104), rotation0.getQ3(), 0.01D);
      assertEquals(0.6499608678313653, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test59()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      assertNotNull(vector3D0);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      assertNotNull(rotation0);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      
      double double0 = rotation0.getQ3();
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      assertEquals(Double.NaN, double0, 0.01D);
  }
}
