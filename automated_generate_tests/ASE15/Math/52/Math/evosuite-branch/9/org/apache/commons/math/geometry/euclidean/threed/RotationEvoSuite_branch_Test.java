/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:22:55 GMT 2014
 */

package org.apache.commons.math.geometry.euclidean.threed;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException;
import org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException;
import org.apache.commons.math.geometry.euclidean.threed.Rotation;
import org.apache.commons.math.geometry.euclidean.threed.RotationOrder;
import org.apache.commons.math.geometry.euclidean.threed.Vector3D;



import org.junit.runner.RunWith;


public class RotationEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      assertNotNull(vector3D0);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      assertNotNull(rotation0);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      
      double[][] doubleArray0 = rotation0.getMatrix();
      assertNotNull(doubleArray0);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      
      double double0 = (-0.999999999999998);
      Rotation rotation1 = null;
      try {
        rotation1 = new Rotation(doubleArray0, double0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // unable to orthogonalize matrix in 10 iterations
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      assertNotNull(vector3D0);
      assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      
      double double0 = (-0.050775961989788676);
      boolean boolean0 = vector3D0.isInfinite();
      assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertTrue(boolean0);
      
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals((-0.49999999999999994), rotation0.getQ0(), 0.01D);
      assertEquals(2.094395102393195, rotation0.getAngle(), 0.01D);
      assertEquals((-0.49999999999999994), rotation0.getQ2(), 0.01D);
      assertEquals((-0.49999999999999994), rotation0.getQ1(), 0.01D);
      assertEquals((-0.49999999999999994), rotation0.getQ3(), 0.01D);
      
      RotationOrder rotationOrder0 = null;
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {1.5707963267948966, 1.5707963267948968, 3.141592653589793}, doubleArray0, 0.01);
      assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals((-0.49999999999999994), rotation0.getQ0(), 0.01D);
      assertEquals(2.094395102393195, rotation0.getAngle(), 0.01D);
      assertEquals((-0.49999999999999994), rotation0.getQ2(), 0.01D);
      assertEquals((-0.49999999999999994), rotation0.getQ1(), 0.01D);
      assertEquals((-0.49999999999999994), rotation0.getQ3(), 0.01D);
  }

  @Test
  public void test02()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      assertNotNull(vector3D0);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      
      Vector3D vector3D1 = vector3D0.negate();
      assertNotNull(vector3D1);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getZ(), 0.01D);
      assertEquals(1.5707963267948966, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(-0.0, vector3D1.getX(), 0.01D);
      assertEquals(-0.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals((-3.141592653589793), vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      
      Rotation rotation0 = new Rotation(vector3D1, vector3D0);
      assertNotNull(rotation0);
      assertEquals((-1.0), rotation0.getQ2(), 0.01D);
      assertEquals(-0.0, rotation0.getQ3(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals(-0.0, rotation0.getQ1(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getZ(), 0.01D);
      assertEquals(1.5707963267948966, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(-0.0, vector3D1.getX(), 0.01D);
      assertEquals(-0.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals((-3.141592653589793), vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      
      RotationOrder rotationOrder0 = RotationOrder.ZYZ;
      assertNotNull(rotationOrder0);
      assertEquals("ZYZ", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      double double0 = (-260.6218);
      Vector3D vector3D0 = new Vector3D(double0, double0);
      assertNotNull(vector3D0);
      assertEquals(0.9830945167434834, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.1289173684667055, vector3D0.getY(), 0.01D);
      assertEquals(0.13039024795283133, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-0.13039024795283133), vector3D0.getDelta(), 0.01D);
      assertEquals(1.2420329729479733, vector3D0.getNorm1(), 0.01D);
      assertEquals((-0.1300210877377846), vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.9830945167434834, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      assertNotNull(rotation0);
      assertEquals(0.9830945167434834, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.1289173684667055, vector3D0.getY(), 0.01D);
      assertEquals(0.13039024795283133, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-0.13039024795283133), vector3D0.getDelta(), 0.01D);
      assertEquals(1.2420329729479733, vector3D0.getNorm1(), 0.01D);
      assertEquals((-0.1300210877377846), vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.9830945167434834, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.ZXZ;
      assertNotNull(rotationOrder0);
      assertEquals("ZXZ", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      assertNotNull(vector3D0);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(false, vector3D0.isInfinite());
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      assertNotNull(rotation0);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.ZYZ;
      assertNotNull(rotationOrder0);
      assertEquals("ZYZ", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      assertNotNull(vector3D0);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      
      double double0 = 0.1538461446762085;
      Rotation rotation0 = new Rotation(vector3D0, double0);
      assertNotNull(rotation0);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.1538461446762085, rotation0.getAngle(), 0.01D);
      assertEquals(-0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.07684723376998374, rotation0.getQ1(), 0.01D);
      assertEquals(-0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.9970428790487907, rotation0.getQ0(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.YZY;
      assertNotNull(rotationOrder0);
      assertEquals("YZY", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {(-1.5707963267948966), 0.15384614467620705, 1.5707963267948966}, doubleArray0, 0.01);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.1538461446762085, rotation0.getAngle(), 0.01D);
      assertEquals(-0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.07684723376998374, rotation0.getQ1(), 0.01D);
      assertEquals(-0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.9970428790487907, rotation0.getQ0(), 0.01D);
      assertEquals("YZY", rotationOrder0.toString());
  }

  @Test
  public void test06()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      assertNotNull(vector3D0);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      
      Vector3D vector3D1 = vector3D0.negate();
      assertNotNull(vector3D1);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals((-1.0), vector3D1.getX(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(-0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(-0.0, vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals((-3.141592653589793), vector3D1.getAlpha(), 0.01D);
      assertEquals(-0.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      
      Rotation rotation0 = new Rotation(vector3D1, vector3D0);
      assertNotNull(rotation0);
      assertEquals(-0.0, rotation0.getQ2(), 0.01D);
      assertEquals(-0.0, rotation0.getQ1(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals(1.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals((-1.0), vector3D1.getX(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(-0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(-0.0, vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals((-3.141592653589793), vector3D1.getAlpha(), 0.01D);
      assertEquals(-0.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      
      RotationOrder rotationOrder0 = RotationOrder.YZY;
      assertNotNull(rotationOrder0);
      assertEquals("YZY", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      assertNotNull(vector3D0);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      
      double double0 = 4376.1;
      Rotation rotation0 = new Rotation(vector3D0, double0);
      assertNotNull(rotation0);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(-0.0, rotation0.getQ3(), 0.01D);
      assertEquals(3.003026203008176, rotation0.getAngle(), 0.01D);
      assertEquals(-0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.9976008772591727, rotation0.getQ2(), 0.01D);
      assertEquals(0.06922781010352104, rotation0.getQ0(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.ZXZ;
      assertNotNull(rotationOrder0);
      assertEquals("ZXZ", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {(-1.5707963267948966), 3.003026203008176, 1.5707963267948966}, doubleArray0, 0.01);
      assertEquals("ZXZ", rotationOrder0.toString());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(-0.0, rotation0.getQ3(), 0.01D);
      assertEquals(3.003026203008176, rotation0.getAngle(), 0.01D);
      assertEquals(-0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.9976008772591727, rotation0.getQ2(), 0.01D);
      assertEquals(0.06922781010352104, rotation0.getQ0(), 0.01D);
  }

  @Test
  public void test08()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-629.7631244);
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double1, double1, boolean0);
      assertNotNull(rotation0);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals((-0.7071067811865476), rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals((-0.7071067811865476), rotation0.getQ2(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      assertNotNull(rotationOrder0);
      assertEquals("YXY", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {-0.0, 1.5707963267948963, 3.141592653589793}, doubleArray0, 0.01);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals((-0.7071067811865476), rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals((-0.7071067811865476), rotation0.getQ2(), 0.01D);
      assertEquals("YXY", rotationOrder0.toString());
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test09()  throws Throwable  {
      double double0 = 0.14982303977012634;
      double double1 = (-1.7976931348623157E308);
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double1, double1, double1, double0, boolean0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(-0.0, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(-0.0, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(-0.0, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("YXY", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(true, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("YXY", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      double double0 = (-168.5509257997414);
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, double0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals((-0.8538084040470902), rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("XZX", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      double double0 = 0.0;
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      assertNotNull(rotationOrder0);
      assertEquals("XZX", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      assertNotNull(vector3D0);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      
      double double0 = (-168.5509257997414);
      Rotation rotation0 = new Rotation(vector3D0, double0);
      assertNotNull(rotation0);
      assertEquals((-0.5205873693997586), rotation0.getQ3(), 0.01D);
      assertEquals((-0.8538084040470902), rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(1.095077494107428, rotation0.getAngle(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      assertNotNull(rotationOrder0);
      assertEquals("XZX", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {3.141592653589793, 1.095077494107428, 3.141592653589793}, doubleArray0, 0.01);
      assertEquals("XZX", rotationOrder0.toString());
      assertEquals((-0.5205873693997586), rotation0.getQ3(), 0.01D);
      assertEquals((-0.8538084040470902), rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(1.095077494107428, rotation0.getAngle(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
  }

  @Test
  public void test14()  throws Throwable  {
      double double0 = 0.0;
      boolean boolean0 = false;
      double double1 = 0.01745329052209854;
      RotationOrder rotationOrder0 = RotationOrder.XYX;
      assertNotNull(rotationOrder0);
      assertEquals("XYX", rotationOrder0.toString());
      
      Rotation rotation0 = new Rotation(double0, double1, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(0.01745329052209854, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {3.141592653589793, 3.106684300110921, 0.0}, doubleArray0, 0.01);
      assertEquals("XYX", rotationOrder0.toString());
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(0.01745329052209854, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test15()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YZY;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("YZY", rotationOrder0.toString());
      
      Vector3D vector3D0 = rotationOrder0.getA2();
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals("YZY", rotationOrder0.toString());
      
      Vector3D vector3D1 = rotationOrder0.getA3();
      //  // Unstable assertion: assertNotNull(vector3D1);
      //  // Unstable assertion: assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D1.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(1.5707963267948966, vector3D1.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D1.isInfinite());
      //  // Unstable assertion: assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D1.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D1.isNaN());
      //  // Unstable assertion: assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D1.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals("YZY", rotationOrder0.toString());
      //  // Unstable assertion: assertNotSame(vector3D1, vector3D0);
      //  // Unstable assertion: assertFalse(vector3D1.equals((Object)vector3D0));
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D1, vector3D1, vector3D0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D1.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(1.5707963267948966, vector3D1.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D1.isInfinite());
      //  // Unstable assertion: assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D1.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D1.isNaN());
      //  // Unstable assertion: assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D1.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals((-0.7071067811865475), rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals((-0.7071067811865475), rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals("YZY", rotationOrder0.toString());
      //  // Unstable assertion: assertNotSame(vector3D1, vector3D0);
      //  // Unstable assertion: assertNotSame(vector3D0, vector3D1);
      //  // Unstable assertion: assertFalse(vector3D1.equals((Object)vector3D0));
      //  // Unstable assertion: assertFalse(vector3D0.equals((Object)vector3D1));
      
      RotationOrder rotationOrder1 = RotationOrder.XYX;
      //  // Unstable assertion: assertNotNull(rotationOrder1);
      //  // Unstable assertion: assertEquals("XYX", rotationOrder1.toString());
      //  // Unstable assertion: assertNotSame(rotationOrder1, rotationOrder0);
      //  // Unstable assertion: assertFalse(rotationOrder1.equals((Object)rotationOrder0));
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder1);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YZY;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("YZY", rotationOrder0.toString());
      
      Vector3D vector3D0 = rotationOrder0.getA2();
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals("YZY", rotationOrder0.toString());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals("YZY", rotationOrder0.toString());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      
      RotationOrder rotationOrder1 = RotationOrder.XYX;
      //  // Unstable assertion: assertNotNull(rotationOrder1);
      //  // Unstable assertion: assertEquals("XYX", rotationOrder1.toString());
      //  // Unstable assertion: assertNotSame(rotationOrder1, rotationOrder0);
      //  // Unstable assertion: assertFalse(rotationOrder1.equals((Object)rotationOrder0));
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder1);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZYX;
      assertNotNull(rotationOrder0);
      assertEquals("ZYX", rotationOrder0.toString());
      
      Vector3D vector3D0 = rotationOrder0.getA3();
      assertNotNull(vector3D0);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals("ZYX", rotationOrder0.toString());
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      assertNotNull(rotation0);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals("ZYX", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {0.0, -0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals("ZYX", rotationOrder0.toString());
  }

  @Test
  public void test18()  throws Throwable  {
      double double0 = (-3801.556140597);
      double double1 = 0.0;
      double double2 = 708.6687444;
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double0, double1, double2, boolean0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals((-3801.556140597), rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals((-3801.556140597), rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(708.6687444, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      RotationOrder rotationOrder0 = RotationOrder.ZYX;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("ZYX", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZYX;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("ZYX", rotationOrder0.toString());
      
      Vector3D vector3D0 = Vector3D.NaN;
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      
      double double0 = 0.9137553607526285;
      Rotation rotation0 = new Rotation(vector3D0, double0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(-0.0, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(-0.0, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals((-0.44114818521786714), rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(0.8974342754090588, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(0.9137553607526285, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.ZXY;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("ZXY", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      //  // Unstable assertion: assertNotNull(doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {-0.0, 0.0, 0.9137553607526285}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals("ZXY", rotationOrder0.toString());
      //  // Unstable assertion: assertEquals(-0.0, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(-0.0, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals((-0.44114818521786714), rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(0.8974342754090588, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(0.9137553607526285, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getDelta(), 0.01D);
  }

  @Test
  public void test21()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZXY;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("ZXY", rotationOrder0.toString());
      
      Vector3D vector3D0 = Vector3D.MINUS_K;
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(true, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(true, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("YZX", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      assertNotNull(rotationOrder0);
      assertEquals("YZX", rotationOrder0.toString());
      
      Vector3D vector3D0 = Vector3D.PLUS_J;
      assertNotNull(vector3D0);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      
      double double0 = 2656.6005353898;
      Rotation rotation0 = new Rotation(vector3D0, double0);
      assertNotNull(rotation0);
      assertEquals(-0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.1868495471651639, rotation0.getAngle(), 0.01D);
      assertEquals((-0.8290303992136623), rotation0.getQ0(), 0.01D);
      assertEquals(-0.0, rotation0.getQ1(), 0.01D);
      assertEquals((-0.5592035382395534), rotation0.getQ2(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      
      double double1 = rotation0.getQ2();
      assertEquals(-0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.1868495471651639, rotation0.getAngle(), 0.01D);
      assertEquals((-0.8290303992136623), rotation0.getQ0(), 0.01D);
      assertEquals(-0.0, rotation0.getQ1(), 0.01D);
      assertEquals((-0.5592035382395534), rotation0.getQ2(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals((-0.5592035382395534), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      boolean boolean0 = false;
      Rotation rotation1 = new Rotation(double0, double1, double1, double0, boolean0);
      assertNotNull(rotation1);
      assertEquals(-0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.1868495471651639, rotation0.getAngle(), 0.01D);
      assertEquals((-0.8290303992136623), rotation0.getQ0(), 0.01D);
      assertEquals(-0.0, rotation0.getQ1(), 0.01D);
      assertEquals((-0.5592035382395534), rotation0.getQ2(), 0.01D);
      assertEquals(Double.NaN, rotation1.getAngle(), 0.01D);
      assertEquals((-0.5592035382395534), rotation1.getQ1(), 0.01D);
      assertEquals(2656.6005353898, rotation1.getQ0(), 0.01D);
      assertEquals((-0.5592035382395534), rotation1.getQ2(), 0.01D);
      assertEquals(2656.6005353898, rotation1.getQ3(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation1, rotation0);
      assertFalse(double1 == double0);
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(double0 == double1);
      assertFalse(rotation1.equals((Object)rotation0));
      
      try {
        double[] doubleArray0 = rotation1.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("YZX", rotationOrder0.toString());
      
      Vector3D vector3D0 = Vector3D.PLUS_J;
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      
      double double0 = 2656.6005353898;
      Rotation rotation0 = new Rotation(vector3D0, double0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(1.1868495471651639, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(-0.0, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals((-0.8290303992136623), rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(-0.0, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals((-0.5592035382395534), rotation0.getQ2(), 0.01D);
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      //  // Unstable assertion: assertNotNull(doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {(-1.186849547165164), 0.0, -0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(1.1868495471651639, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(-0.0, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals((-0.8290303992136623), rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(-0.0, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals((-0.5592035382395534), rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals("YZX", rotationOrder0.toString());
  }

  @Test
  public void test25()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YXZ;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("YXZ", rotationOrder0.toString());
      
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isInfinite());
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      double double0 = 2363.3307714681;
      RotationOrder rotationOrder0 = RotationOrder.YXZ;
      assertNotNull(rotationOrder0);
      assertEquals("YXZ", rotationOrder0.toString());
      
      double double1 = (-0.4373710111110757);
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double1, double0, double1, double1, boolean0);
      assertNotNull(rotation0);
      assertEquals(2363.3307714681, rotation0.getQ1(), 0.01D);
      assertEquals((-0.4373710111110757), rotation0.getQ3(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals((-0.4373710111110757), rotation0.getQ0(), 0.01D);
      assertEquals((-0.4373710111110757), rotation0.getQ2(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YXZ;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("YXZ", rotationOrder0.toString());
      
      Vector3D vector3D0 = rotationOrder0.getA2();
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals("YXZ", rotationOrder0.toString());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      
      double double0 = Vector3D.distanceInf(vector3D0, vector3D0);
      //  // Unstable assertion: assertEquals("YXZ", rotationOrder0.toString());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, double0, 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, double0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(1.0, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(-0.0, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(-0.0, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(-0.0, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals("YXZ", rotationOrder0.toString());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      //  // Unstable assertion: assertNotNull(doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, -0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(1.0, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(-0.0, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(-0.0, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(-0.0, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals("YXZ", rotationOrder0.toString());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
  }

  @Test
  public void test28()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("XZY", rotationOrder0.toString());
      
      Vector3D vector3D0 = rotationOrder0.getA1();
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals("XZY", rotationOrder0.toString());
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals("XZY", rotationOrder0.toString());
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      assertNotNull(rotation0);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      assertNotNull(rotationOrder0);
      assertEquals("XZY", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {0.0, -0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals("XZY", rotationOrder0.toString());
  }

  @Test
  public void test30()  throws Throwable  {
      double double0 = 1184.469;
      double double1 = (-394.8397590852327);
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double1, double1, double1, boolean0);
      assertNotNull(rotation0);
      assertEquals((-394.8397590852327), rotation0.getQ3(), 0.01D);
      assertEquals((-394.8397590852327), rotation0.getQ1(), 0.01D);
      assertEquals((-394.8397590852327), rotation0.getQ2(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals(1184.469, rotation0.getQ0(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      RotationOrder rotationOrder0 = RotationOrder.XYZ;
      assertNotNull(rotationOrder0);
      assertEquals("XYZ", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      double double0 = 12.71295117625958;
      boolean boolean0 = false;
      double double1 = 1.633123935319537E16;
      Rotation rotation0 = new Rotation(double0, double0, double1, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(1.633123935319537E16, rotation0.getQ2(), 0.01D);
      assertEquals(12.71295117625958, rotation0.getQ1(), 0.01D);
      assertEquals(12.71295117625958, rotation0.getQ0(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals(12.71295117625958, rotation0.getQ3(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      RotationOrder rotationOrder0 = RotationOrder.XYZ;
      assertNotNull(rotationOrder0);
      assertEquals("XYZ", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      double double0 = 1184.469;
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals(1184.469, rotation0.getQ3(), 0.01D);
      assertEquals(1184.469, rotation0.getQ2(), 0.01D);
      assertEquals(1184.469, rotation0.getQ1(), 0.01D);
      assertEquals(1184.469, rotation0.getQ0(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.XYZ;
      assertNotNull(rotationOrder0);
      assertEquals("XYZ", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {(-0.7853982524943607), 0.0, (-0.7853982524943607)}, doubleArray0, 0.01);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals(1184.469, rotation0.getQ3(), 0.01D);
      assertEquals(1184.469, rotation0.getQ2(), 0.01D);
      assertEquals(1184.469, rotation0.getQ1(), 0.01D);
      assertEquals(1184.469, rotation0.getQ0(), 0.01D);
      assertEquals("XYZ", rotationOrder0.toString());
  }

  @Test
  public void test33()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      assertNotNull(vector3D0);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      
      double double0 = 0.9137553607526285;
      double double1 = 2.5E-5;
      Rotation rotation0 = new Rotation(vector3D0, double1);
      assertNotNull(rotation0);
      assertEquals(0.999999999921875, rotation0.getQ0(), 0.01D);
      assertEquals(-0.0, rotation0.getQ1(), 0.01D);
      assertEquals(-0.0, rotation0.getQ3(), 0.01D);
      assertEquals((-1.2499999999674479E-5), rotation0.getQ2(), 0.01D);
      assertEquals(2.5E-5, rotation0.getAngle(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertFalse(double1 == double0);
      
      boolean boolean0 = false;
      Rotation rotation1 = new Rotation(double1, double0, double0, double1, boolean0);
      assertNotNull(rotation1);
      assertEquals(2.5E-5, rotation1.getQ0(), 0.01D);
      assertEquals(3.141542653589788, rotation1.getAngle(), 0.01D);
      assertEquals(2.5E-5, rotation1.getQ3(), 0.01D);
      assertEquals(0.9137553607526285, rotation1.getQ2(), 0.01D);
      assertEquals(0.9137553607526285, rotation1.getQ1(), 0.01D);
      assertNotSame(rotation1, rotation0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(rotation1.equals((Object)rotation0));
      
      double double2 = Rotation.distance(rotation0, rotation1);
      assertEquals(0.999999999921875, rotation0.getQ0(), 0.01D);
      assertEquals(-0.0, rotation0.getQ1(), 0.01D);
      assertEquals(-0.0, rotation0.getQ3(), 0.01D);
      assertEquals((-1.2499999999674479E-5), rotation0.getQ2(), 0.01D);
      assertEquals(2.5E-5, rotation0.getAngle(), 0.01D);
      assertEquals(2.5E-5, rotation1.getQ0(), 0.01D);
      assertEquals(3.141542653589788, rotation1.getAngle(), 0.01D);
      assertEquals(2.5E-5, rotation1.getQ3(), 0.01D);
      assertEquals(0.9137553607526285, rotation1.getQ2(), 0.01D);
      assertEquals(0.9137553607526285, rotation1.getQ1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation1, rotation0);
      assertEquals(3.1415654974738145, double2, 0.01D);
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(rotation1.equals((Object)rotation0));
  }

  @Test
  public void test34()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      assertNotNull(vector3D0);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      
      double double0 = 4376.1;
      Rotation rotation0 = new Rotation(vector3D0, double0);
      assertNotNull(rotation0);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(3.003026203008176, rotation0.getAngle(), 0.01D);
      assertEquals(-0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.06922781010352104, rotation0.getQ0(), 0.01D);
      assertEquals(-0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.9976008772591727, rotation0.getQ2(), 0.01D);
      
      double double1 = rotation0.getAngle();
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(3.003026203008176, rotation0.getAngle(), 0.01D);
      assertEquals(-0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.06922781010352104, rotation0.getQ0(), 0.01D);
      assertEquals(-0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.9976008772591727, rotation0.getQ2(), 0.01D);
      assertEquals(3.003026203008176, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test35()  throws Throwable  {
      double double0 = (-0.5);
      RotationOrder rotationOrder0 = RotationOrder.ZXY;
      assertNotNull(rotationOrder0);
      assertEquals("ZXY", rotationOrder0.toString());
      
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals("ZXY", rotationOrder0.toString());
      assertEquals(0.78083729995836, rotation0.getAngle(), 0.01D);
      assertEquals(0.17295479161025828, rotation0.getQ3(), 0.01D);
      assertEquals(0.9247498129364974, rotation0.getQ0(), 0.01D);
      assertEquals(0.29156656802867026, rotation0.getQ1(), 0.01D);
      assertEquals(0.17295479161025828, rotation0.getQ2(), 0.01D);
      
      Rotation rotation1 = rotation0.revert();
      assertNotNull(rotation1);
      assertEquals(0.17295479161025828, rotation1.getQ2(), 0.01D);
      assertEquals(0.29156656802867026, rotation1.getQ1(), 0.01D);
      assertEquals((-0.9247498129364974), rotation1.getQ0(), 0.01D);
      assertEquals(0.17295479161025828, rotation1.getQ3(), 0.01D);
      assertEquals(0.78083729995836, rotation1.getAngle(), 0.01D);
      assertEquals("ZXY", rotationOrder0.toString());
      assertEquals(0.78083729995836, rotation0.getAngle(), 0.01D);
      assertEquals(0.17295479161025828, rotation0.getQ3(), 0.01D);
      assertEquals(0.9247498129364974, rotation0.getQ0(), 0.01D);
      assertEquals(0.29156656802867026, rotation0.getQ1(), 0.01D);
      assertEquals(0.17295479161025828, rotation0.getQ2(), 0.01D);
      assertNotSame(rotation1, rotation0);
      assertNotSame(rotation0, rotation1);
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(rotation0.equals((Object)rotation1));
      
      Vector3D vector3D0 = rotation1.getAxis();
      assertNotNull(vector3D0);
      assertEquals(0.17295479161025828, rotation1.getQ2(), 0.01D);
      assertEquals(0.29156656802867026, rotation1.getQ1(), 0.01D);
      assertEquals((-0.9247498129364974), rotation1.getQ0(), 0.01D);
      assertEquals(0.17295479161025828, rotation1.getQ3(), 0.01D);
      assertEquals(0.78083729995836, rotation1.getAngle(), 0.01D);
      assertEquals("ZXY", rotationOrder0.toString());
      assertEquals(0.5353981633974483, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0000000000000004, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.7661199821932733, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.7661199821932733, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.4544558135199609, vector3D0.getY(), 0.01D);
      assertEquals(0.4544558135199609, vector3D0.getZ(), 0.01D);
      assertEquals(1.0000000000000002, vector3D0.getNorm(), 0.01D);
      assertEquals(1.6750316092331952, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.47176120142618877, vector3D0.getDelta(), 0.01D);
      assertEquals(0.78083729995836, rotation0.getAngle(), 0.01D);
      assertEquals(0.17295479161025828, rotation0.getQ3(), 0.01D);
      assertEquals(0.9247498129364974, rotation0.getQ0(), 0.01D);
      assertEquals(0.29156656802867026, rotation0.getQ1(), 0.01D);
      assertEquals(0.17295479161025828, rotation0.getQ2(), 0.01D);
      assertNotSame(rotation1, rotation0);
      assertNotSame(rotation0, rotation1);
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(rotation0.equals((Object)rotation1));
  }

  @Test
  public void test36()  throws Throwable  {
      double double0 = 0.25;
      double double1 = 2757.61299369383;
      double double2 = (-0.1);
      Vector3D vector3D0 = new Vector3D(double0, double1, double2);
      assertNotNull(vector3D0);
      assertEquals((-3.6263246428669796E-5), vector3D0.getDelta(), 0.01D);
      assertEquals(7604429.495489047, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.25, vector3D0.getX(), 0.01D);
      assertEquals(2757.96299369383, vector3D0.getNorm1(), 0.01D);
      assertEquals(2757.61299369383, vector3D0.getNormInf(), 0.01D);
      assertEquals(2757.6130068392567, vector3D0.getNorm(), 0.01D);
      assertEquals((-0.1), vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.5707056686786611, vector3D0.getAlpha(), 0.01D);
      assertEquals(2757.61299369383, vector3D0.getY(), 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      assertNotNull(rotation0);
      assertEquals((-3.6263246428669796E-5), vector3D0.getDelta(), 0.01D);
      assertEquals(7604429.495489047, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.25, vector3D0.getX(), 0.01D);
      assertEquals(2757.96299369383, vector3D0.getNorm1(), 0.01D);
      assertEquals(2757.61299369383, vector3D0.getNormInf(), 0.01D);
      assertEquals(2757.6130068392567, vector3D0.getNorm(), 0.01D);
      assertEquals((-0.1), vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.5707056686786611, vector3D0.getAlpha(), 0.01D);
      assertEquals(2757.61299369383, vector3D0.getY(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      
      Vector3D vector3D1 = rotation0.getAxis();
      assertNotNull(vector3D1);
      assertEquals((-3.6263246428669796E-5), vector3D0.getDelta(), 0.01D);
      assertEquals(7604429.495489047, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.25, vector3D0.getX(), 0.01D);
      assertEquals(2757.96299369383, vector3D0.getNorm1(), 0.01D);
      assertEquals(2757.61299369383, vector3D0.getNormInf(), 0.01D);
      assertEquals(2757.6130068392567, vector3D0.getNorm(), 0.01D);
      assertEquals((-0.1), vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.5707056686786611, vector3D0.getAlpha(), 0.01D);
      assertEquals(2757.61299369383, vector3D0.getY(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(1.0, vector3D1.getX(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test37()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      assertNotNull(vector3D0);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      assertNotNull(rotation0);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      
      Vector3D vector3D1 = rotation0.getAxis();
      assertNotNull(vector3D1);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getX(), 0.01D);
      assertEquals(true, vector3D1.isNaN());
      assertEquals(Double.NaN, vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(Double.NaN, vector3D1.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertTrue(vector3D0.equals((Object)vector3D1));
      assertTrue(vector3D1.equals((Object)vector3D0));
  }

  @Test
  public void test38()  throws Throwable  {
      double double0 = 0.0;
      Vector3D vector3D0 = Vector3D.MINUS_I;
      assertNotNull(vector3D0);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      
      Vector3D vector3D1 = new Vector3D(double0, vector3D0);
      assertNotNull(vector3D1);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(-0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(3.141592653589793, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, vector3D1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
      }
  }

  @Test
  public void test39()  throws Throwable  {
      double double0 = 0.9999999999;
      RotationOrder rotationOrder0 = RotationOrder.YZY;
      assertNotNull(rotationOrder0);
      assertEquals("YZY", rotationOrder0.toString());
      
      Vector3D vector3D0 = rotationOrder0.getA2();
      assertNotNull(vector3D0);
      assertEquals("YZY", rotationOrder0.toString());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      
      Vector3D vector3D1 = rotationOrder0.getA3();
      assertNotNull(vector3D1);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(1.5707963267948966, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals("YZY", rotationOrder0.toString());
      assertNotSame(vector3D1, vector3D0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      
      Vector3D vector3D2 = new Vector3D(double0, vector3D0, double0, vector3D1);
      assertNotNull(vector3D2);
      assertEquals(0.9999999999, vector3D2.getY(), 0.01D);
      assertEquals(1.9999999998, vector3D2.getNorm1(), 0.01D);
      assertEquals(1.5707963267948966, vector3D2.getAlpha(), 0.01D);
      assertEquals(1.9999999996, vector3D2.getNormSq(), 0.01D);
      assertEquals(1.4142135622316736, vector3D2.getNorm(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(false, vector3D2.isNaN());
      assertEquals(0.7853981633974484, vector3D2.getDelta(), 0.01D);
      assertEquals(0.9999999999, vector3D2.getZ(), 0.01D);
      assertEquals(0.9999999999, vector3D2.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D2.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(1.5707963267948966, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals("YZY", rotationOrder0.toString());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D0, vector3D2);
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D0.equals((Object)vector3D2));
      
      Rotation rotation0 = new Rotation(vector3D2, vector3D0, vector3D1, vector3D2);
      assertNotNull(rotation0);
      assertEquals(0.9999999999, vector3D2.getY(), 0.01D);
      assertEquals(1.9999999998, vector3D2.getNorm1(), 0.01D);
      assertEquals(1.5707963267948966, vector3D2.getAlpha(), 0.01D);
      assertEquals(1.9999999996, vector3D2.getNormSq(), 0.01D);
      assertEquals(1.4142135622316736, vector3D2.getNorm(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(false, vector3D2.isNaN());
      assertEquals(0.7853981633974484, vector3D2.getDelta(), 0.01D);
      assertEquals(0.9999999999, vector3D2.getZ(), 0.01D);
      assertEquals(0.9999999999, vector3D2.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D2.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(1.5707963267948966, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals("YZY", rotationOrder0.toString());
      assertEquals(0.3826834323650898, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.9238795325112866, rotation0.getQ0(), 0.01D);
      assertEquals(0.7853981633974483, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D0, vector3D2);
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D0.equals((Object)vector3D2));
  }

  @Test
  public void test40()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      assertNotNull(vector3D0);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      
      Vector3D vector3D1 = vector3D0.getZero();
      assertNotNull(vector3D1);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
      }
  }

  @Test
  public void test41()  throws Throwable  {
      double double0 = 1143.50095367;
      Vector3D vector3D0 = new Vector3D(double0, double0, double0);
      assertNotNull(vector3D0);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1143.50095367, vector3D0.getY(), 0.01D);
      assertEquals(3430.50286101, vector3D0.getNorm1(), 0.01D);
      assertEquals(1143.50095367, vector3D0.getZ(), 0.01D);
      assertEquals(0.6154797086703875, vector3D0.getDelta(), 0.01D);
      assertEquals(3922783.2931325976, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1980.6017502599045, vector3D0.getNorm(), 0.01D);
      assertEquals(1143.50095367, vector3D0.getX(), 0.01D);
      assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      assertEquals(1143.50095367, vector3D0.getNormInf(), 0.01D);
      
      Vector3D vector3D1 = vector3D0.getZero();
      assertNotNull(vector3D1);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1143.50095367, vector3D0.getY(), 0.01D);
      assertEquals(3430.50286101, vector3D0.getNorm1(), 0.01D);
      assertEquals(1143.50095367, vector3D0.getZ(), 0.01D);
      assertEquals(0.6154797086703875, vector3D0.getDelta(), 0.01D);
      assertEquals(3922783.2931325976, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1980.6017502599045, vector3D0.getNorm(), 0.01D);
      assertEquals(1143.50095367, vector3D0.getX(), 0.01D);
      assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      assertEquals(1143.50095367, vector3D0.getNormInf(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, vector3D0, vector3D1, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
      }
  }

  @Test
  public void test42()  throws Throwable  {
      double double0 = 2336.81548718069;
      Vector3D vector3D0 = new Vector3D(double0, double0, double0);
      assertNotNull(vector3D0);
      assertEquals(2336.81548718069, vector3D0.getX(), 0.01D);
      assertEquals(2336.81548718069, vector3D0.getY(), 0.01D);
      assertEquals(2336.81548718069, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.6382119863382578E7, vector3D0.getNormSq(), 0.01D);
      assertEquals(4047.4831517107737, vector3D0.getNorm(), 0.01D);
      assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(2336.81548718069, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.6154797086703873, vector3D0.getDelta(), 0.01D);
      assertEquals(7010.44646154207, vector3D0.getNorm1(), 0.01D);
      
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      assertNotNull(vector3D1);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(2336.81548718069, vector3D0.getX(), 0.01D);
      assertEquals(2336.81548718069, vector3D0.getY(), 0.01D);
      assertEquals(2336.81548718069, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.6382119863382578E7, vector3D0.getNormSq(), 0.01D);
      assertEquals(4047.4831517107737, vector3D0.getNorm(), 0.01D);
      assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(2336.81548718069, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.6154797086703873, vector3D0.getDelta(), 0.01D);
      assertEquals(7010.44646154207, vector3D0.getNorm1(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, vector3D1, vector3D0, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
      }
  }

  @Test
  public void test43()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      assertNotNull(vector3D0);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getNorm(), 0.01D);
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
      }
  }

  @Test
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 0.9999999999;
      RotationOrder rotationOrder0 = RotationOrder.YZY;
      assertNotNull(rotationOrder0);
      assertEquals("YZY", rotationOrder0.toString());
      
      Vector3D vector3D0 = rotationOrder0.getA2();
      assertNotNull(vector3D0);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals("YZY", rotationOrder0.toString());
      
      double double1 = (-3.263494184404663);
      Vector3D vector3D1 = rotationOrder0.getA3();
      assertNotNull(vector3D1);
      assertEquals("YZY", rotationOrder0.toString());
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(1.5707963267948966, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      
      Vector3D vector3D2 = vector3D1.normalize();
      assertNotNull(vector3D2);
      assertEquals("YZY", rotationOrder0.toString());
      assertEquals(1.0, vector3D2.getY(), 0.01D);
      assertEquals(1.0, vector3D2.getNormInf(), 0.01D);
      assertEquals(1.5707963267948966, vector3D2.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D2.getX(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(0.0, vector3D2.getZ(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm(), 0.01D);
      assertEquals(0.0, vector3D2.getDelta(), 0.01D);
      assertEquals(1.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(1.0, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(1.5707963267948966, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D1, vector3D2);
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertTrue(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertTrue(vector3D1.equals((Object)vector3D2));
      
      Vector3D vector3D3 = new Vector3D(double0, vector3D0, double1, vector3D2);
      assertNotNull(vector3D3);
      assertEquals(3.413267392315325, vector3D3.getNorm(), 0.01D);
      assertEquals((-3.263494184404663), vector3D3.getY(), 0.01D);
      assertEquals(4.263494184304664, vector3D3.getNorm1(), 0.01D);
      assertEquals(0.297336277387567, vector3D3.getDelta(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D3.getAlpha(), 0.01D);
      assertEquals(false, vector3D3.isInfinite());
      assertEquals(false, vector3D3.isNaN());
      assertEquals(0.0, vector3D3.getX(), 0.01D);
      assertEquals(0.9999999999, vector3D3.getZ(), 0.01D);
      assertEquals(11.650394291443058, vector3D3.getNormSq(), 0.01D);
      assertEquals(3.263494184404663, vector3D3.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals("YZY", rotationOrder0.toString());
      assertEquals(1.0, vector3D2.getY(), 0.01D);
      assertEquals(1.0, vector3D2.getNormInf(), 0.01D);
      assertEquals(1.5707963267948966, vector3D2.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D2.getX(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(0.0, vector3D2.getZ(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm(), 0.01D);
      assertEquals(0.0, vector3D2.getDelta(), 0.01D);
      assertEquals(1.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(1.0, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(1.5707963267948966, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertNotSame(vector3D3, vector3D0);
      assertNotSame(vector3D3, vector3D2);
      assertNotSame(vector3D3, vector3D1);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D0, vector3D3);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D3);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D1, vector3D3);
      assertFalse(vector3D3.equals((Object)vector3D0));
      assertFalse(vector3D3.equals((Object)vector3D2));
      assertFalse(vector3D3.equals((Object)vector3D1));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D3));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(double0 == double1);
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertTrue(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D2.equals((Object)vector3D3));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D1.equals((Object)vector3D3));
      assertTrue(vector3D1.equals((Object)vector3D2));
      assertFalse(double1 == double0);
      
      Rotation rotation0 = new Rotation(vector3D3, vector3D2, vector3D1, vector3D3);
      assertNotNull(rotation0);
      assertEquals(3.413267392315325, vector3D3.getNorm(), 0.01D);
      assertEquals((-3.263494184404663), vector3D3.getY(), 0.01D);
      assertEquals(4.263494184304664, vector3D3.getNorm1(), 0.01D);
      assertEquals(0.297336277387567, vector3D3.getDelta(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D3.getAlpha(), 0.01D);
      assertEquals(false, vector3D3.isInfinite());
      assertEquals(false, vector3D3.isNaN());
      assertEquals(0.0, vector3D3.getX(), 0.01D);
      assertEquals(0.9999999999, vector3D3.getZ(), 0.01D);
      assertEquals(11.650394291443058, vector3D3.getNormSq(), 0.01D);
      assertEquals(3.263494184404663, vector3D3.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals("YZY", rotationOrder0.toString());
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals((-0.9889692317756125), rotation0.getQ3(), 0.01D);
      assertEquals((-0.14812109438278828), rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(1.0, vector3D2.getY(), 0.01D);
      assertEquals(1.0, vector3D2.getNormInf(), 0.01D);
      assertEquals(1.5707963267948966, vector3D2.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D2.getX(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(0.0, vector3D2.getZ(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm(), 0.01D);
      assertEquals(0.0, vector3D2.getDelta(), 0.01D);
      assertEquals(1.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(1.0, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(1.5707963267948966, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertNotSame(vector3D3, vector3D0);
      assertNotSame(vector3D3, vector3D2);
      assertNotSame(vector3D3, vector3D1);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D0, vector3D3);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D3);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D1, vector3D3);
      assertFalse(vector3D3.equals((Object)vector3D0));
      assertFalse(vector3D3.equals((Object)vector3D2));
      assertFalse(vector3D3.equals((Object)vector3D1));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D3));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(double0 == double1);
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertTrue(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D2.equals((Object)vector3D3));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D1.equals((Object)vector3D3));
      assertTrue(vector3D1.equals((Object)vector3D2));
      assertFalse(double1 == double0);
      
      double[][] doubleArray1 = rotation0.getMatrix();
      assertNotNull(doubleArray1);
      assertEquals(3.413267392315325, vector3D3.getNorm(), 0.01D);
      assertEquals((-3.263494184404663), vector3D3.getY(), 0.01D);
      assertEquals(4.263494184304664, vector3D3.getNorm1(), 0.01D);
      assertEquals(0.297336277387567, vector3D3.getDelta(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D3.getAlpha(), 0.01D);
      assertEquals(false, vector3D3.isInfinite());
      assertEquals(false, vector3D3.isNaN());
      assertEquals(0.0, vector3D3.getX(), 0.01D);
      assertEquals(0.9999999999, vector3D3.getZ(), 0.01D);
      assertEquals(11.650394291443058, vector3D3.getNormSq(), 0.01D);
      assertEquals(3.263494184404663, vector3D3.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals("YZY", rotationOrder0.toString());
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals((-0.9889692317756125), rotation0.getQ3(), 0.01D);
      assertEquals((-0.14812109438278828), rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(1.0, vector3D2.getY(), 0.01D);
      assertEquals(1.0, vector3D2.getNormInf(), 0.01D);
      assertEquals(1.5707963267948966, vector3D2.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D2.getX(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(0.0, vector3D2.getZ(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm(), 0.01D);
      assertEquals(0.0, vector3D2.getDelta(), 0.01D);
      assertEquals(1.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(1.0, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(1.5707963267948966, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertNotSame(vector3D3, vector3D0);
      assertNotSame(vector3D3, vector3D2);
      assertNotSame(vector3D3, vector3D1);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D0, vector3D3);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D3);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D1, vector3D3);
      assertFalse(vector3D3.equals((Object)vector3D0));
      assertFalse(vector3D3.equals((Object)vector3D2));
      assertFalse(vector3D3.equals((Object)vector3D1));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D3));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(double0 == double1);
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertTrue(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D2.equals((Object)vector3D3));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D1.equals((Object)vector3D3));
      assertTrue(vector3D1.equals((Object)vector3D2));
      assertFalse(double1 == double0);
      
      Rotation rotation1 = new Rotation(doubleArray1, doubleArray0[0]);
      assertNotNull(rotation1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3.413267392315325, vector3D3.getNorm(), 0.01D);
      assertEquals((-3.263494184404663), vector3D3.getY(), 0.01D);
      assertEquals(4.263494184304664, vector3D3.getNorm1(), 0.01D);
      assertEquals(0.297336277387567, vector3D3.getDelta(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D3.getAlpha(), 0.01D);
      assertEquals(false, vector3D3.isInfinite());
      assertEquals(false, vector3D3.isNaN());
      assertEquals(0.0, vector3D3.getX(), 0.01D);
      assertEquals(0.9999999999, vector3D3.getZ(), 0.01D);
      assertEquals(11.650394291443058, vector3D3.getNormSq(), 0.01D);
      assertEquals(3.263494184404663, vector3D3.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals("YZY", rotationOrder0.toString());
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals((-0.9889692317756125), rotation0.getQ3(), 0.01D);
      assertEquals((-0.14812109438278828), rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(1.0, vector3D2.getY(), 0.01D);
      assertEquals(1.0, vector3D2.getNormInf(), 0.01D);
      assertEquals(1.5707963267948966, vector3D2.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D2.getX(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(0.0, vector3D2.getZ(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm(), 0.01D);
      assertEquals(0.0, vector3D2.getDelta(), 0.01D);
      assertEquals(1.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(1.0, vector3D2.getNorm1(), 0.01D);
      assertEquals(3.141592653589793, rotation1.getAngle(), 0.01D);
      assertEquals(0.14812109438278828, rotation1.getQ2(), 0.01D);
      assertEquals(0.9889692317756125, rotation1.getQ3(), 0.01D);
      assertEquals(0.0, rotation1.getQ1(), 0.01D);
      assertEquals(-0.0, rotation1.getQ0(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(1.5707963267948966, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertNotSame(vector3D3, vector3D0);
      assertNotSame(vector3D3, vector3D2);
      assertNotSame(vector3D3, vector3D1);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D0, vector3D3);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(rotation0, rotation1);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D3);
      assertNotSame(rotation1, rotation0);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D1, vector3D3);
      assertFalse(vector3D3.equals((Object)vector3D0));
      assertFalse(vector3D3.equals((Object)vector3D2));
      assertFalse(vector3D3.equals((Object)vector3D1));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D3));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(double0 == double1);
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertTrue(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D2.equals((Object)vector3D3));
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D1.equals((Object)vector3D3));
      assertTrue(vector3D1.equals((Object)vector3D2));
      assertFalse(double1 == double0);
  }

  @Test
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      RotationOrder rotationOrder0 = RotationOrder.YZY;
      assertNotNull(rotationOrder0);
      assertEquals("YZY", rotationOrder0.toString());
      
      Vector3D vector3D0 = rotationOrder0.getA2();
      assertNotNull(vector3D0);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals("YZY", rotationOrder0.toString());
      
      Vector3D vector3D1 = rotationOrder0.getA3();
      assertNotNull(vector3D1);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(1.5707963267948966, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals("YZY", rotationOrder0.toString());
      assertNotSame(vector3D1, vector3D0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      
      Vector3D vector3D2 = vector3D1.normalize();
      assertNotNull(vector3D2);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(1.5707963267948966, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D2.getZ(), 0.01D);
      assertEquals(1.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(1.5707963267948966, vector3D2.getAlpha(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(1.0, vector3D2.getY(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm(), 0.01D);
      assertEquals(0.0, vector3D2.getDelta(), 0.01D);
      assertEquals(0.0, vector3D2.getX(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D2.getNormInf(), 0.01D);
      assertEquals("YZY", rotationOrder0.toString());
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D2, vector3D0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertTrue(vector3D1.equals((Object)vector3D2));
      assertTrue(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D2.equals((Object)vector3D0));
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D2, vector3D1, vector3D0);
      assertNotNull(rotation0);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals((-0.7071067811865475), rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals((-0.7071067811865475), rotation0.getQ2(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(1.5707963267948966, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D2.getZ(), 0.01D);
      assertEquals(1.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(1.5707963267948966, vector3D2.getAlpha(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(1.0, vector3D2.getY(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm(), 0.01D);
      assertEquals(0.0, vector3D2.getDelta(), 0.01D);
      assertEquals(0.0, vector3D2.getX(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D2.getNormInf(), 0.01D);
      assertEquals("YZY", rotationOrder0.toString());
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D2, vector3D0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertTrue(vector3D1.equals((Object)vector3D2));
      assertTrue(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D2.equals((Object)vector3D0));
      
      double[][] doubleArray1 = rotation0.getMatrix();
      assertNotNull(doubleArray1);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals((-0.7071067811865475), rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals((-0.7071067811865475), rotation0.getQ2(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(1.5707963267948966, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D2.getZ(), 0.01D);
      assertEquals(1.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(1.5707963267948966, vector3D2.getAlpha(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(1.0, vector3D2.getY(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm(), 0.01D);
      assertEquals(0.0, vector3D2.getDelta(), 0.01D);
      assertEquals(0.0, vector3D2.getX(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D2.getNormInf(), 0.01D);
      assertEquals("YZY", rotationOrder0.toString());
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D2, vector3D0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertTrue(vector3D1.equals((Object)vector3D2));
      assertTrue(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D2.equals((Object)vector3D0));
      
      Rotation rotation1 = new Rotation(doubleArray1, doubleArray0[0]);
      assertNotNull(rotation1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.7071067811865476, rotation1.getQ2(), 0.01D);
      assertEquals(-0.0, rotation1.getQ0(), 0.01D);
      assertEquals(0.0, rotation1.getQ1(), 0.01D);
      assertEquals(3.141592653589793, rotation1.getAngle(), 0.01D);
      assertEquals(0.7071067811865475, rotation1.getQ3(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals((-0.7071067811865475), rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals((-0.7071067811865475), rotation0.getQ2(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(1.5707963267948966, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D2.getZ(), 0.01D);
      assertEquals(1.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(1.5707963267948966, vector3D2.getAlpha(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(1.0, vector3D2.getY(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm(), 0.01D);
      assertEquals(0.0, vector3D2.getDelta(), 0.01D);
      assertEquals(0.0, vector3D2.getX(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D2.getNormInf(), 0.01D);
      assertEquals("YZY", rotationOrder0.toString());
      assertNotSame(rotation1, rotation0);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(rotation0, rotation1);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D2, vector3D0);
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertTrue(vector3D1.equals((Object)vector3D2));
      assertTrue(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D2.equals((Object)vector3D0));
  }

  @Test
  public void test46()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[9];
      doubleArray0[2] = doubleArray1;
      assertNotNull(doubleArray0[2]);
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(doubleArray0, doubleArray1[1]);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // a 3x3 matrix cannot be a rotation matrix
         //
      }
  }

  @Test
  public void test47()  throws Throwable  {
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[3];
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(doubleArray0, doubleArray1[2]);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // a 3x3 matrix cannot be a rotation matrix
         //
      }
  }

  @Test
  public void test48()  throws Throwable  {
      double[][] doubleArray0 = new double[3][2];
      double double0 = 0.0;
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(doubleArray0, double0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // a 3x2 matrix cannot be a rotation matrix
         //
      }
  }

  @Test
  public void test49()  throws Throwable  {
      double[][] doubleArray0 = new double[4][2];
      double double0 = (-2131.7);
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(doubleArray0, double0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // a 4x2 matrix cannot be a rotation matrix
         //
      }
  }

  @Test
  public void test50()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      assertNotNull(vector3D0);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      
      double double0 = 0.7899871211727177;
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, double0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm for rotation axis
         //
      }
  }

  @Test
  public void test51()  throws Throwable  {
      double double0 = 1184.469;
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(1184.469, rotation0.getQ2(), 0.01D);
      assertEquals(1184.469, rotation0.getQ1(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals(1184.469, rotation0.getQ0(), 0.01D);
      assertEquals(1184.469, rotation0.getQ3(), 0.01D);
      
      double double1 = rotation0.getQ0();
      assertEquals(1184.469, rotation0.getQ2(), 0.01D);
      assertEquals(1184.469, rotation0.getQ1(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals(1184.469, rotation0.getQ0(), 0.01D);
      assertEquals(1184.469, rotation0.getQ3(), 0.01D);
      assertEquals(1184.469, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test52()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YXZ;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("YXZ", rotationOrder0.toString());
      
      Vector3D vector3D0 = rotationOrder0.getA2();
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals("YXZ", rotationOrder0.toString());
      
      double double0 = Vector3D.distanceInf(vector3D0, vector3D0);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals("YXZ", rotationOrder0.toString());
      //  // Unstable assertion: assertEquals(0.0, double0, 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, double0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(1.0, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(-0.0, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(-0.0, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(-0.0, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals("YXZ", rotationOrder0.toString());
      
      double double1 = rotation0.getQ1();
      //  // Unstable assertion: assertEquals(1.0, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(-0.0, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(-0.0, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(-0.0, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals("YXZ", rotationOrder0.toString());
      //  // Unstable assertion: assertEquals(-0.0, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
  }

  @Test
  public void test53()  throws Throwable  {
      double double0 = (-1871.5037733);
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals((-0.49999999999999994), rotation0.getQ3(), 0.01D);
      assertEquals((-0.49999999999999994), rotation0.getQ1(), 0.01D);
      assertEquals((-0.49999999999999994), rotation0.getQ2(), 0.01D);
      assertEquals((-0.49999999999999994), rotation0.getQ0(), 0.01D);
      assertEquals(2.094395102393195, rotation0.getAngle(), 0.01D);
      
      double double1 = rotation0.getQ3();
      assertEquals((-0.49999999999999994), rotation0.getQ3(), 0.01D);
      assertEquals((-0.49999999999999994), rotation0.getQ1(), 0.01D);
      assertEquals((-0.49999999999999994), rotation0.getQ2(), 0.01D);
      assertEquals((-0.49999999999999994), rotation0.getQ0(), 0.01D);
      assertEquals(2.094395102393195, rotation0.getAngle(), 0.01D);
      assertEquals((-0.49999999999999994), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test54()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      
      double double0 = Rotation.distance(rotation0, rotation0);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test55()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.YZY;
      assertNotNull(rotationOrder0);
      assertEquals("YZY", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }
}
