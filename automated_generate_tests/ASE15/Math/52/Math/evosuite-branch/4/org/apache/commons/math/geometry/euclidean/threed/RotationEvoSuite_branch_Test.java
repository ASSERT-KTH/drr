/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:30:36 GMT 2014
 */

package org.apache.commons.math.geometry.euclidean.threed;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException;
import org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException;
import org.apache.commons.math.geometry.euclidean.threed.Rotation;
import org.apache.commons.math.geometry.euclidean.threed.RotationOrder;
import org.apache.commons.math.geometry.euclidean.threed.Vector3D;



import org.junit.runner.RunWith;


public class RotationEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      double double0 = (-1305.3559288);
      Vector3D vector3D0 = Vector3D.MINUS_K;
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertNotNull(vector3D0);
      
      Rotation rotation0 = new Rotation(vector3D0, double0);
      assertEquals(0.7156042470944882, rotation0.getQ0(), 0.01D);
      assertEquals(-0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.6985059495382488, rotation0.getQ3(), 0.01D);
      assertEquals(-0.0, rotation0.getQ2(), 0.01D);
      assertEquals(1.5466150933540859, rotation0.getAngle(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertNotNull(rotation0);
      
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      assertEquals("XZY", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertEquals("XZY", rotationOrder0.toString());
      assertEquals(0.7156042470944882, rotation0.getQ0(), 0.01D);
      assertEquals(-0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.6985059495382488, rotation0.getQ3(), 0.01D);
      assertEquals(-0.0, rotation0.getQ2(), 0.01D);
      assertEquals(1.5466150933540859, rotation0.getAngle(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1.546615093354084), 0.0}, doubleArray0, 0.01);
      
      double[][] doubleArray1 = new double[3][1];
      doubleArray1[0] = doubleArray0;
      assertEquals("XZY", rotationOrder0.toString());
      assertEquals(0.7156042470944882, rotation0.getQ0(), 0.01D);
      assertEquals(-0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.6985059495382488, rotation0.getQ3(), 0.01D);
      assertEquals(-0.0, rotation0.getQ2(), 0.01D);
      assertEquals(1.5466150933540859, rotation0.getAngle(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertEquals("XZY", rotationOrder0.toString());
      assertEquals(0.7156042470944882, rotation0.getQ0(), 0.01D);
      assertEquals(-0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.6985059495382488, rotation0.getQ3(), 0.01D);
      assertEquals(-0.0, rotation0.getQ2(), 0.01D);
      assertEquals(1.5466150933540859, rotation0.getAngle(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      assertEquals("XZY", rotationOrder0.toString());
      assertEquals(0.7156042470944882, rotation0.getQ0(), 0.01D);
      assertEquals(-0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.6985059495382488, rotation0.getQ3(), 0.01D);
      assertEquals(-0.0, rotation0.getQ2(), 0.01D);
      assertEquals(1.5466150933540859, rotation0.getAngle(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertNotNull(doubleArray1[2]);
      
      Rotation rotation1 = null;
      try {
        rotation1 = new Rotation(doubleArray1, double0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // unable to orthogonalize matrix in 10 iterations
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      double double0 = 0.5039018405998233;
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertEquals(0.5, rotation0.getQ3(), 0.01D);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals(0.5, rotation0.getQ1(), 0.01D);
      assertEquals(0.5, rotation0.getQ0(), 0.01D);
      assertEquals(0.5, rotation0.getQ2(), 0.01D);
      assertNotNull(rotation0);
      
      RotationOrder rotationOrder0 = RotationOrder.ZYZ;
      assertEquals("ZYZ", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertEquals("ZYZ", rotationOrder0.toString());
      assertEquals(0.5, rotation0.getQ3(), 0.01D);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals(0.5, rotation0.getQ1(), 0.01D);
      assertEquals(0.5, rotation0.getQ0(), 0.01D);
      assertEquals(0.5, rotation0.getQ2(), 0.01D);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {1.5707963267948966, 1.5707963267948966, 3.141592653589793}, doubleArray0, 0.01);
  }

  @Test
  public void test02()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 235.1974447;
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double1, double0, boolean0);
      assertEquals(1.0, rotation0.getQ2(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertNotNull(rotation0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      RotationOrder rotationOrder0 = null;
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YXZ;
      assertEquals("YXZ", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      double double0 = 0.0;
      double double1 = 22.224830909228977;
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double1, double1);
      assertEquals("YXZ", rotationOrder0.toString());
      assertEquals(0.1157806673813954, rotation0.getQ3(), 0.01D);
      assertEquals(3.1144121231565767, rotation0.getAngle(), 0.01D);
      assertEquals(0.9864101531225666, rotation0.getQ2(), 0.01D);
      assertEquals(0.013589846877433403, rotation0.getQ0(), 0.01D);
      assertEquals(0.1157806673813954, rotation0.getQ1(), 0.01D);
      assertNotNull(rotation0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      RotationOrder rotationOrder1 = RotationOrder.ZXZ;
      assertEquals("ZXZ", rotationOrder1.toString());
      assertNotNull(rotationOrder1);
      assertNotSame(rotationOrder1, rotationOrder0);
      assertFalse(rotationOrder1.equals((Object)rotationOrder0));
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder1);
      assertEquals("ZXZ", rotationOrder1.toString());
      assertEquals("YXZ", rotationOrder0.toString());
      assertEquals(0.1157806673813954, rotation0.getQ3(), 0.01D);
      assertEquals(3.1144121231565767, rotation0.getAngle(), 0.01D);
      assertEquals(0.9864101531225666, rotation0.getQ2(), 0.01D);
      assertEquals(0.013589846877433403, rotation0.getQ0(), 0.01D);
      assertEquals(0.1157806673813954, rotation0.getQ1(), 0.01D);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {3.141592653589793, 2.9079103194893685, 0.23368233410042463}, doubleArray0, 0.01);
      assertNotSame(rotationOrder1, rotationOrder0);
      assertNotSame(rotationOrder0, rotationOrder1);
      assertFalse(rotationOrder1.equals((Object)rotationOrder0));
      assertFalse(double0 == double1);
      assertFalse(rotationOrder0.equals((Object)rotationOrder1));
      assertFalse(double1 == double0);
  }

  @Test
  public void test04()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(false, vector3D0.isInfinite());
      assertNotNull(vector3D0);
      
      double double0 = 0.8374626094564934;
      Rotation rotation0 = new Rotation(vector3D0, double0);
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(-0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.40660169358601256, rotation0.getQ3(), 0.01D);
      assertEquals(-0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.9136055290840716, rotation0.getQ0(), 0.01D);
      assertEquals(0.8374626094564934, rotation0.getAngle(), 0.01D);
      assertNotNull(rotation0);
      
      RotationOrder rotationOrder0 = null;
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      double double0 = 1.0737418260422525E9;
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertEquals(1.0737418260422525E9, rotation0.getQ2(), 0.01D);
      assertEquals(1.0737418260422525E9, rotation0.getQ1(), 0.01D);
      assertEquals(1.0737418260422525E9, rotation0.getQ0(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals(1.0737418260422525E9, rotation0.getQ3(), 0.01D);
      assertNotNull(rotation0);
      
      RotationOrder rotationOrder0 = RotationOrder.YZY;
      assertEquals("YZY", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      double double0 = 1.073741824E9;
      double double1 = 0.0;
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double1, double0, double1, double1, boolean0);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(1.073741824E9, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertNotNull(rotation0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      RotationOrder rotationOrder0 = RotationOrder.YZY;
      assertEquals("YZY", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      double double0 = 1.073741824E9;
      Vector3D vector3D0 = new Vector3D(double0, double0);
      assertEquals(0.6189080972864017, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-0.6653397029163253), vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals((-0.4856550878964696), vector3D0.getY(), 0.01D);
      assertEquals((-0.6173264150460421), vector3D0.getZ(), 0.01D);
      assertEquals((-0.6653397029163253), vector3D0.getAlpha(), 0.01D);
      assertEquals(0.6189080972864017, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.7218896002289137, vector3D0.getNorm1(), 0.01D);
      assertNotNull(vector3D0);
      
      double double1 = vector3D0.getY();
      assertEquals(0.6189080972864017, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-0.6653397029163253), vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals((-0.4856550878964696), vector3D0.getY(), 0.01D);
      assertEquals((-0.6173264150460421), vector3D0.getZ(), 0.01D);
      assertEquals((-0.6653397029163253), vector3D0.getAlpha(), 0.01D);
      assertEquals(0.6189080972864017, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.7218896002289137, vector3D0.getNorm1(), 0.01D);
      assertEquals((-0.4856550878964696), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double1, double0, double1, double1, boolean0);
      assertEquals(0.6189080972864017, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-0.6653397029163253), vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals((-0.4856550878964696), vector3D0.getY(), 0.01D);
      assertEquals((-0.6173264150460421), vector3D0.getZ(), 0.01D);
      assertEquals((-0.6653397029163253), vector3D0.getAlpha(), 0.01D);
      assertEquals(0.6189080972864017, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.7218896002289137, vector3D0.getNorm1(), 0.01D);
      assertEquals((-0.4856550878964696), rotation0.getQ2(), 0.01D);
      assertEquals(1.073741824E9, rotation0.getQ1(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals((-0.4856550878964696), rotation0.getQ3(), 0.01D);
      assertEquals((-0.4856550878964696), rotation0.getQ0(), 0.01D);
      assertNotNull(rotation0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      RotationOrder rotationOrder0 = RotationOrder.YZY;
      assertEquals("YZY", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertEquals(0.6189080972864017, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-0.6653397029163253), vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals((-0.4856550878964696), vector3D0.getY(), 0.01D);
      assertEquals((-0.6173264150460421), vector3D0.getZ(), 0.01D);
      assertEquals((-0.6653397029163253), vector3D0.getAlpha(), 0.01D);
      assertEquals(0.6189080972864017, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.7218896002289137, vector3D0.getNorm1(), 0.01D);
      assertEquals((-0.4856550878964696), rotation0.getQ2(), 0.01D);
      assertEquals(1.073741824E9, rotation0.getQ1(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals((-0.4856550878964696), rotation0.getQ3(), 0.01D);
      assertEquals((-0.4856550878964696), rotation0.getQ0(), 0.01D);
      assertEquals("YZY", rotationOrder0.toString());
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {0.7853981638497499, 1.6273830633706283, (-2.3561944906446466)}, doubleArray0, 0.01);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test08()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      assertEquals("YXY", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      double double0 = (-1.0);
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertEquals("YXY", rotationOrder0.toString());
      assertEquals(2.153573489132929, rotation0.getAngle(), 0.01D);
      assertEquals(0.7384602626041288, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.4741598817790378, rotation0.getQ0(), 0.01D);
      assertEquals(0.479425538604203, rotation0.getQ1(), 0.01D);
      assertNotNull(rotation0);
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertEquals("YXY", rotationOrder0.toString());
      assertEquals(2.153573489132929, rotation0.getAngle(), 0.01D);
      assertEquals(0.7384602626041288, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.4741598817790378, rotation0.getQ0(), 0.01D);
      assertEquals(0.479425538604203, rotation0.getQ1(), 0.01D);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {2.141592653589793, 0.9999999999999999, 2.141592653589793}, doubleArray0, 0.01);
  }

  @Test
  public void test09()  throws Throwable  {
      double double0 = 0.0;
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertNotNull(rotation0);
      
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      assertEquals("YXY", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YXZ;
      assertEquals("YXZ", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      double double0 = 0.0;
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertEquals("YXZ", rotationOrder0.toString());
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertNotNull(rotation0);
      
      RotationOrder rotationOrder1 = RotationOrder.ZXZ;
      assertEquals("ZXZ", rotationOrder1.toString());
      assertNotNull(rotationOrder1);
      assertNotSame(rotationOrder1, rotationOrder0);
      assertFalse(rotationOrder1.equals((Object)rotationOrder0));
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      double double0 = 272.009674966;
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      //  // Unstable assertion: assertEquals(0.5, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(0.5, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.5, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(0.5, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertNotNull(rotation0);
      
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      //  // Unstable assertion: assertEquals("XZX", rotationOrder0.toString());
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      //  // Unstable assertion: assertEquals("XZX", rotationOrder0.toString());
      //  // Unstable assertion: assertEquals(0.5, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(0.5, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.5, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(0.5, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertNotNull(doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {1.5707963267948966, 1.5707963267948966, 3.141592653589793}, doubleArray0, 0.01);
  }

  @Test
  public void test12()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 2370.7078886616;
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double1, double0, boolean0);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.0, rotation0.getQ2(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertNotNull(rotation0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      assertEquals("XZX", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(true, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertNotNull(vector3D0);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(true, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertNotNull(rotation0);
      
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      //  // Unstable assertion: assertEquals("XZX", rotationOrder0.toString());
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertNotNull(rotation0);
      
      RotationOrder rotationOrder0 = RotationOrder.XYX;
      //  // Unstable assertion: assertEquals("XYX", rotationOrder0.toString());
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      double double0 = 0.0;
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertNotNull(rotation0);
      
      RotationOrder rotationOrder0 = RotationOrder.XYX;
      //  // Unstable assertion: assertEquals("XYX", rotationOrder0.toString());
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      //  // Unstable assertion: assertEquals("YXY", rotationOrder0.toString());
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      
      Vector3D vector3D0 = Vector3D.PLUS_I;
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertNotNull(vector3D0);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertNotNull(rotation0);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertNotNull(vector3D0);
      
      double double0 = (-1.0);
      Rotation rotation0 = new Rotation(vector3D0, double0);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(0.8775825618903728, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertNotNull(rotation0);
      
      RotationOrder rotationOrder0 = RotationOrder.ZYX;
      //  // Unstable assertion: assertEquals("ZYX", rotationOrder0.toString());
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertNotNull(rotation0);
      
      double double0 = rotation0.getQ0();
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(1.0, double0, 0.01D);
      
      double double1 = (-1338.6);
      assertFalse(double1 == double0);
      
      boolean boolean0 = false;
      Rotation rotation1 = new Rotation(double0, double0, double1, double0, boolean0);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(Double.NaN, rotation1.getAngle(), 0.01D);
      assertEquals(1.0, rotation1.getQ0(), 0.01D);
      assertEquals(1.0, rotation1.getQ1(), 0.01D);
      assertEquals((-1338.6), rotation1.getQ2(), 0.01D);
      assertEquals(1.0, rotation1.getQ3(), 0.01D);
      assertNotNull(rotation1);
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation1, rotation0);
      assertFalse(double1 == double0);
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(double0 == double1);
      
      RotationOrder rotationOrder0 = RotationOrder.ZYX;
      assertEquals("ZYX", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      try {
        double[] doubleArray0 = rotation1.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertNotNull(rotation0);
      
      RotationOrder rotationOrder0 = RotationOrder.ZYX;
      assertEquals("ZYX", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertEquals("ZYX", rotationOrder0.toString());
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {0.0, -0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test20()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      //  // Unstable assertion: assertEquals((-1.0), vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertNotNull(vector3D0);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals((-1.0), vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertNotNull(rotation0);
      
      RotationOrder rotationOrder0 = RotationOrder.ZXY;
      //  // Unstable assertion: assertEquals("ZXY", rotationOrder0.toString());
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals("ZXY", rotationOrder0.toString());
      //  // Unstable assertion: assertEquals((-1.0), vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertNotNull(doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {-0.0, 0.0, -0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test21()  throws Throwable  {
      double double0 = (-1086.5399222);
      double double1 = (-279.06074265281785);
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double0, double0, double1, boolean0);
      //  // Unstable assertion: assertEquals((-1086.5399222), rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals((-1086.5399222), rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals((-1086.5399222), rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals((-279.06074265281785), rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      RotationOrder rotationOrder0 = RotationOrder.ZXY;
      //  // Unstable assertion: assertEquals("ZXY", rotationOrder0.toString());
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertNotNull(vector3D0);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertNotNull(rotation0);
      
      RotationOrder rotationOrder0 = RotationOrder.ZXY;
      //  // Unstable assertion: assertEquals("ZXY", rotationOrder0.toString());
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      //  // Unstable assertion: assertEquals("YZX", rotationOrder0.toString());
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      
      double double0 = 0.0;
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertNotNull(rotation0);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      double double0 = (-2194.17);
      double double1 = (-957.581387991962);
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double1, double1, double1, double0, boolean0);
      //  // Unstable assertion: assertEquals((-2194.17), rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals((-957.581387991962), rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals((-957.581387991962), rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals((-957.581387991962), rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      //  // Unstable assertion: assertEquals("YZX", rotationOrder0.toString());
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertNotNull(rotation0);
      
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      assertEquals("YZX", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertEquals("YZX", rotationOrder0.toString());
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {-0.0, 0.0, -0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test26()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertNotNull(vector3D0);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertNotNull(rotation0);
      
      RotationOrder rotationOrder0 = RotationOrder.YXZ;
      //  // Unstable assertion: assertEquals("YXZ", rotationOrder0.toString());
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      double double0 = 1.570796251296997;
      double double1 = (-976.650621840535);
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double0, double0, double1, boolean0);
      assertEquals(1.570796251296997, rotation0.getQ1(), 0.01D);
      assertEquals(1.570796251296997, rotation0.getQ2(), 0.01D);
      assertEquals((-976.650621840535), rotation0.getQ3(), 0.01D);
      assertEquals(1.570796251296997, rotation0.getQ0(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertNotNull(rotation0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      RotationOrder rotationOrder0 = RotationOrder.YXZ;
      assertEquals("YXZ", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XYX;
      //  // Unstable assertion: assertEquals("XYX", rotationOrder0.toString());
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      
      double double0 = (-1820.4759206);
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      //  // Unstable assertion: assertEquals((-0.6773436571427195), rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals((-0.7338072033372633), rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(3.036997222501208, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals((-0.052273879317212224), rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals("XYX", rotationOrder0.toString());
      //  // Unstable assertion: assertNotNull(rotation0);
      
      RotationOrder rotationOrder1 = RotationOrder.YXZ;
      //  // Unstable assertion: assertEquals("YXZ", rotationOrder1.toString());
      //  // Unstable assertion: assertNotNull(rotationOrder1);
      //  // Unstable assertion: assertNotSame(rotationOrder1, rotationOrder0);
      //  // Unstable assertion: assertFalse(rotationOrder1.equals((Object)rotationOrder0));
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder1);
      //  // Unstable assertion: assertEquals((-0.6773436571427195), rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals((-0.7338072033372633), rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(3.036997222501208, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals((-0.052273879317212224), rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals("XYX", rotationOrder0.toString());
      //  // Unstable assertion: assertEquals("YXZ", rotationOrder1.toString());
      //  // Unstable assertion: assertNotNull(doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {(-3.0646056411074034), (-0.07087408129668597), 1.488083491430258}, doubleArray0, 0.01);
      //  // Unstable assertion: assertNotSame(rotationOrder0, rotationOrder1);
      //  // Unstable assertion: assertNotSame(rotationOrder1, rotationOrder0);
      //  // Unstable assertion: assertFalse(rotationOrder0.equals((Object)rotationOrder1));
      //  // Unstable assertion: assertFalse(rotationOrder1.equals((Object)rotationOrder0));
  }

  @Test
  public void test29()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-162.7933026936059);
      double double2 = 2139.9185311485926;
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double1, double2, double0, double2, boolean0);
      //  // Unstable assertion: assertEquals((-162.7933026936059), rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(2139.9185311485926, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(2139.9185311485926, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      //  // Unstable assertion: assertEquals("XZY", rotationOrder0.toString());
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertNotNull(vector3D0);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertNotNull(rotation0);
      
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      //  // Unstable assertion: assertEquals("XZY", rotationOrder0.toString());
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XYZ;
      //  // Unstable assertion: assertEquals("XYZ", rotationOrder0.toString());
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      
      Vector3D vector3D0 = rotationOrder0.getA3();
      //  // Unstable assertion: assertEquals("XYZ", rotationOrder0.toString());
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertNotNull(vector3D0);
      
      Vector3D vector3D1 = Vector3D.NEGATIVE_INFINITY;
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D1.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D1.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals((-2.356194490192345), vector3D1.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D1.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D1.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D1.isNaN());
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D1.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getY(), 0.01D);
      //  // Unstable assertion: assertNotNull(vector3D1);
      //  // Unstable assertion: assertNotSame(vector3D1, vector3D0);
      //  // Unstable assertion: assertFalse(vector3D1.equals((Object)vector3D0));
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D1);
      //  // Unstable assertion: assertEquals("XYZ", rotationOrder0.toString());
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D1.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D1.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals((-2.356194490192345), vector3D1.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D1.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D1.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D1.isNaN());
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D1.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getY(), 0.01D);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertNotSame(vector3D0, vector3D1);
      //  // Unstable assertion: assertNotSame(vector3D1, vector3D0);
      //  // Unstable assertion: assertFalse(vector3D0.equals((Object)vector3D1));
      //  // Unstable assertion: assertFalse(vector3D1.equals((Object)vector3D0));
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      double double0 = (-887.325635);
      double double1 = (-3194.632301565);
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double0, double1, double0, boolean0);
      assertEquals((-887.325635), rotation0.getQ0(), 0.01D);
      assertEquals((-887.325635), rotation0.getQ1(), 0.01D);
      assertEquals((-3194.632301565), rotation0.getQ2(), 0.01D);
      assertEquals((-887.325635), rotation0.getQ3(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertNotNull(rotation0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      RotationOrder rotationOrder0 = RotationOrder.XYZ;
      assertEquals("XYZ", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      double double0 = 1.073741824E9;
      double double1 = 0.0;
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double1, double0, double1, double1, boolean0);
      assertEquals(1.073741824E9, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertNotNull(rotation0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      Rotation rotation1 = Rotation.IDENTITY;
      assertEquals(0.0, rotation1.getAngle(), 0.01D);
      assertEquals(0.0, rotation1.getQ3(), 0.01D);
      assertEquals(0.0, rotation1.getQ1(), 0.01D);
      assertEquals(1.0, rotation1.getQ0(), 0.01D);
      assertEquals(0.0, rotation1.getQ2(), 0.01D);
      assertNotNull(rotation1);
      assertNotSame(rotation1, rotation0);
      assertFalse(rotation1.equals((Object)rotation0));
      
      Rotation rotation2 = rotation0.applyInverseTo(rotation1);
      assertEquals(0.0, rotation2.getQ2(), 0.01D);
      assertEquals(1.073741824E9, rotation2.getQ1(), 0.01D);
      assertEquals(-0.0, rotation2.getQ0(), 0.01D);
      assertEquals(0.0, rotation2.getQ3(), 0.01D);
      assertEquals(3.141592653589793, rotation2.getAngle(), 0.01D);
      assertEquals(1.073741824E9, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation1.getAngle(), 0.01D);
      assertEquals(0.0, rotation1.getQ3(), 0.01D);
      assertEquals(0.0, rotation1.getQ1(), 0.01D);
      assertEquals(1.0, rotation1.getQ0(), 0.01D);
      assertEquals(0.0, rotation1.getQ2(), 0.01D);
      assertNotNull(rotation2);
      assertNotSame(rotation2, rotation1);
      assertNotSame(rotation2, rotation0);
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation0, rotation2);
      assertNotSame(rotation1, rotation0);
      assertNotSame(rotation1, rotation2);
      assertFalse(double0 == double1);
      assertFalse(rotation2.equals((Object)rotation1));
      assertFalse(rotation2.equals((Object)rotation0));
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(rotation0.equals((Object)rotation2));
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(rotation1.equals((Object)rotation2));
      assertFalse(double1 == double0);
      
      double double2 = rotation2.getAngle();
      assertEquals(0.0, rotation2.getQ2(), 0.01D);
      assertEquals(1.073741824E9, rotation2.getQ1(), 0.01D);
      assertEquals(-0.0, rotation2.getQ0(), 0.01D);
      assertEquals(0.0, rotation2.getQ3(), 0.01D);
      assertEquals(3.141592653589793, rotation2.getAngle(), 0.01D);
      assertEquals(1.073741824E9, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation1.getAngle(), 0.01D);
      assertEquals(0.0, rotation1.getQ3(), 0.01D);
      assertEquals(0.0, rotation1.getQ1(), 0.01D);
      assertEquals(1.0, rotation1.getQ0(), 0.01D);
      assertEquals(0.0, rotation1.getQ2(), 0.01D);
      assertNotSame(rotation2, rotation1);
      assertNotSame(rotation2, rotation0);
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation0, rotation2);
      assertNotSame(rotation1, rotation0);
      assertNotSame(rotation1, rotation2);
      assertEquals(3.141592653589793, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(rotation2.equals((Object)rotation1));
      assertFalse(rotation2.equals((Object)rotation0));
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(rotation0.equals((Object)rotation2));
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(rotation1.equals((Object)rotation2));
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test34()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      assertEquals("YXY", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      double double0 = (-1.0);
      double double1 = (-2020.0);
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double1, double0);
      assertEquals((-0.011906288152524935), rotation0.getQ0(), 0.01D);
      assertEquals((-0.9997571702608279), rotation0.getQ1(), 0.01D);
      assertEquals((-0.018542945140709477), rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(3.1177795146382477, rotation0.getAngle(), 0.01D);
      assertEquals("YXY", rotationOrder0.toString());
      assertNotNull(rotation0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = rotation0.getAngle();
      assertEquals((-0.011906288152524935), rotation0.getQ0(), 0.01D);
      assertEquals((-0.9997571702608279), rotation0.getQ1(), 0.01D);
      assertEquals((-0.018542945140709477), rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(3.1177795146382477, rotation0.getAngle(), 0.01D);
      assertEquals("YXY", rotationOrder0.toString());
      assertEquals(3.1177795146382477, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test35()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertNotNull(rotation0);
      
      double double0 = rotation0.getAngle();
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test36()  throws Throwable  {
      double double0 = 272.009674966;
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertEquals(0.5, rotation0.getQ1(), 0.01D);
      assertEquals(0.5, rotation0.getQ2(), 0.01D);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals(0.5, rotation0.getQ0(), 0.01D);
      assertEquals(0.5, rotation0.getQ3(), 0.01D);
      assertNotNull(rotation0);
      
      Vector3D vector3D0 = rotation0.getAxis();
      assertEquals((-0.5773502691896258), vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals((-0.5773502691896258), vector3D0.getY(), 0.01D);
      assertEquals(1.0000000000000002, vector3D0.getNormSq(), 0.01D);
      assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      assertEquals(1.7320508075688776, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.5773502691896258, vector3D0.getNormInf(), 0.01D);
      assertEquals((-0.6154797086703875), vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals((-0.5773502691896258), vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.5, rotation0.getQ1(), 0.01D);
      assertEquals(0.5, rotation0.getQ2(), 0.01D);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals(0.5, rotation0.getQ0(), 0.01D);
      assertEquals(0.5, rotation0.getQ3(), 0.01D);
      assertNotNull(vector3D0);
  }

  @Test
  public void test37()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertNotNull(rotation0);
      
      Vector3D vector3D0 = rotation0.getAxis();
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertNotNull(vector3D0);
  }

  @Test
  public void test38()  throws Throwable  {
      double double0 = 1.073741824E9;
      Vector3D vector3D0 = new Vector3D(double0, double0);
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-0.6173264150460421), vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-0.4856550878964696), vector3D0.getY(), 0.01D);
      assertEquals(0.6189080972864017, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.6189080972864017, vector3D0.getX(), 0.01D);
      assertEquals(1.7218896002289137, vector3D0.getNorm1(), 0.01D);
      assertEquals((-0.6653397029163253), vector3D0.getDelta(), 0.01D);
      assertEquals((-0.6653397029163253), vector3D0.getAlpha(), 0.01D);
      assertNotNull(vector3D0);
      
      double double1 = vector3D0.getY();
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-0.6173264150460421), vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-0.4856550878964696), vector3D0.getY(), 0.01D);
      assertEquals(0.6189080972864017, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.6189080972864017, vector3D0.getX(), 0.01D);
      assertEquals(1.7218896002289137, vector3D0.getNorm1(), 0.01D);
      assertEquals((-0.6653397029163253), vector3D0.getDelta(), 0.01D);
      assertEquals((-0.6653397029163253), vector3D0.getAlpha(), 0.01D);
      assertEquals((-0.4856550878964696), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double1, double0, double1, double1, boolean0);
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-0.6173264150460421), vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-0.4856550878964696), vector3D0.getY(), 0.01D);
      assertEquals(0.6189080972864017, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.6189080972864017, vector3D0.getX(), 0.01D);
      assertEquals(1.7218896002289137, vector3D0.getNorm1(), 0.01D);
      assertEquals((-0.6653397029163253), vector3D0.getDelta(), 0.01D);
      assertEquals((-0.6653397029163253), vector3D0.getAlpha(), 0.01D);
      assertEquals((-0.4856550878964696), rotation0.getQ3(), 0.01D);
      assertEquals(1.073741824E9, rotation0.getQ1(), 0.01D);
      assertEquals((-0.4856550878964696), rotation0.getQ0(), 0.01D);
      assertEquals((-0.4856550878964696), rotation0.getQ2(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertNotNull(rotation0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      Vector3D vector3D1 = rotation0.getAxis();
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals((-4.523015468348466E-10), vector3D1.getAlpha(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals((-4.523015468348466E-10), vector3D1.getDelta(), 0.01D);
      assertEquals((-4.523015468348466E-10), vector3D1.getZ(), 0.01D);
      assertEquals(1.0, vector3D1.getX(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(1.000000000904603, vector3D1.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals((-4.523015468348466E-10), vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-0.6173264150460421), vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-0.4856550878964696), vector3D0.getY(), 0.01D);
      assertEquals(0.6189080972864017, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.6189080972864017, vector3D0.getX(), 0.01D);
      assertEquals(1.7218896002289137, vector3D0.getNorm1(), 0.01D);
      assertEquals((-0.6653397029163253), vector3D0.getDelta(), 0.01D);
      assertEquals((-0.6653397029163253), vector3D0.getAlpha(), 0.01D);
      assertEquals((-0.4856550878964696), rotation0.getQ3(), 0.01D);
      assertEquals(1.073741824E9, rotation0.getQ1(), 0.01D);
      assertEquals((-0.4856550878964696), rotation0.getQ0(), 0.01D);
      assertEquals((-0.4856550878964696), rotation0.getQ2(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertNotNull(vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test39()  throws Throwable  {
      double double0 = (-1.0);
      Vector3D vector3D0 = Vector3D.PLUS_I;
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertNotNull(vector3D0);
      
      Vector3D vector3D1 = new Vector3D(double0, vector3D0, double0, vector3D0);
      assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(3.141592653589793, vector3D1.getAlpha(), 0.01D);
      assertEquals(2.0, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals((-2.0), vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(2.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(4.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(2.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertNotNull(vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D1);
      assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(3.141592653589793, vector3D1.getAlpha(), 0.01D);
      assertEquals(2.0, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals((-2.0), vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(2.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(4.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(2.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals(-0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals((-1.0), rotation0.getQ3(), 0.01D);
      assertNotNull(rotation0);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
  }

  @Test
  public void test40()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertNotNull(vector3D0);
      
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertNotNull(vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D1, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
      }
  }

  @Test
  public void test41()  throws Throwable  {
      double double0 = (-2020.0);
      double double1 = 0.003;
      Vector3D vector3D0 = Vector3D.PLUS_I;
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertNotNull(vector3D0);
      
      Vector3D vector3D1 = new Vector3D(double1, vector3D0, double0, vector3D0);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(2019.997, vector3D1.getNorm1(), 0.01D);
      assertEquals(2019.997, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      assertEquals((-2019.997), vector3D1.getX(), 0.01D);
      assertEquals(2019.997, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(3.141592653589793, vector3D1.getAlpha(), 0.01D);
      assertEquals(4080387.880009, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertNotNull(vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      
      Rotation rotation0 = new Rotation(vector3D1, vector3D0, vector3D1, vector3D0);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(2019.997, vector3D1.getNorm1(), 0.01D);
      assertEquals(2019.997, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      assertEquals((-2019.997), vector3D1.getX(), 0.01D);
      assertEquals(2019.997, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(3.141592653589793, vector3D1.getAlpha(), 0.01D);
      assertEquals(4080387.880009, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertNotNull(rotation0);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
  }

  @Test
  public void test42()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertNotNull(vector3D0);
      
      Vector3D vector3D1 = vector3D0.orthogonal();
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(1.5707963267948966, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(-0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(-0.0, vector3D1.getZ(), 0.01D);
      assertNotNull(vector3D1);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      
      Rotation rotation0 = new Rotation(vector3D1, vector3D0, vector3D0, vector3D1);
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals((-0.7071067811865475), rotation0.getQ2(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals((-0.7071067811865475), rotation0.getQ3(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(1.5707963267948966, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(-0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(-0.0, vector3D1.getZ(), 0.01D);
      assertNotNull(rotation0);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
  }

  @Test
  public void test43()  throws Throwable  {
      double double0 = (-2679.7269);
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals((-0.5), rotation0.getQ2(), 0.01D);
      assertEquals((-0.5), rotation0.getQ1(), 0.01D);
      assertEquals((-0.5), rotation0.getQ0(), 0.01D);
      assertEquals((-0.5), rotation0.getQ3(), 0.01D);
      assertNotNull(rotation0);
      
      Vector3D vector3D0 = Vector3D.MINUS_J;
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertNotNull(vector3D0);
      
      Vector3D vector3D1 = rotation0.applyInverseTo(vector3D0);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals((-1.0), vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(false, vector3D1.isInfinite());
      assertEquals((-1.5707963267948966), vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals((-0.5), rotation0.getQ2(), 0.01D);
      assertEquals((-0.5), rotation0.getQ1(), 0.01D);
      assertEquals((-0.5), rotation0.getQ0(), 0.01D);
      assertEquals((-0.5), rotation0.getQ3(), 0.01D);
      assertNotNull(vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      
      Vector3D vector3D2 = new Vector3D(double0, vector3D0, double0, vector3D0, double0, vector3D1, double0, vector3D1);
      assertEquals(10718.9076, vector3D2.getNorm1(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(5.744749006866889E7, vector3D2.getNormSq(), 0.01D);
      assertEquals(0.7853981633974482, vector3D2.getDelta(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(5359.4538, vector3D2.getNormInf(), 0.01D);
      assertEquals(5359.4538, vector3D2.getY(), 0.01D);
      assertEquals(7579.412250872022, vector3D2.getNorm(), 0.01D);
      assertEquals(0.0, vector3D2.getX(), 0.01D);
      assertEquals(5359.4538, vector3D2.getZ(), 0.01D);
      assertEquals(1.5707963267948966, vector3D2.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals((-1.0), vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(false, vector3D1.isInfinite());
      assertEquals((-1.5707963267948966), vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals((-0.5), rotation0.getQ2(), 0.01D);
      assertEquals((-0.5), rotation0.getQ1(), 0.01D);
      assertEquals((-0.5), rotation0.getQ0(), 0.01D);
      assertEquals((-0.5), rotation0.getQ3(), 0.01D);
      assertNotNull(vector3D2);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D0, vector3D1);
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D1));
      
      Rotation rotation1 = new Rotation(vector3D2, vector3D1, vector3D1, vector3D0);
      assertEquals(0.0, rotation1.getQ3(), 0.01D);
      assertEquals(2.3561944901923453, rotation1.getAngle(), 0.01D);
      assertEquals((-0.3826834323650897), rotation1.getQ0(), 0.01D);
      assertEquals(0.0, rotation1.getQ2(), 0.01D);
      assertEquals((-0.9238795325112868), rotation1.getQ1(), 0.01D);
      assertEquals(10718.9076, vector3D2.getNorm1(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(5.744749006866889E7, vector3D2.getNormSq(), 0.01D);
      assertEquals(0.7853981633974482, vector3D2.getDelta(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(5359.4538, vector3D2.getNormInf(), 0.01D);
      assertEquals(5359.4538, vector3D2.getY(), 0.01D);
      assertEquals(7579.412250872022, vector3D2.getNorm(), 0.01D);
      assertEquals(0.0, vector3D2.getX(), 0.01D);
      assertEquals(5359.4538, vector3D2.getZ(), 0.01D);
      assertEquals(1.5707963267948966, vector3D2.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals((-1.0), vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(false, vector3D1.isInfinite());
      assertEquals((-1.5707963267948966), vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals((-0.5), rotation0.getQ2(), 0.01D);
      assertEquals((-0.5), rotation0.getQ1(), 0.01D);
      assertEquals((-0.5), rotation0.getQ0(), 0.01D);
      assertEquals((-0.5), rotation0.getQ3(), 0.01D);
      assertNotNull(rotation1);
      assertNotSame(rotation1, rotation0);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(rotation0, rotation1);
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(rotation0.equals((Object)rotation1));
  }

  @Test
  public void test44()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertNotNull(vector3D0);
      
      Vector3D vector3D1 = Vector3D.MINUS_I;
      assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals((-1.0), vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(3.141592653589793, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertNotNull(vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D1, vector3D1, vector3D1, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
      }
  }

  @Test
  public void test45()  throws Throwable  {
      double double0 = 0.0;
      Vector3D vector3D0 = Vector3D.PLUS_J;
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getY(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertNotNull(vector3D0);
      
      Vector3D vector3D1 = new Vector3D(double0, vector3D0, double0, vector3D0);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getY(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertNotNull(vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, vector3D0, vector3D1, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
      }
  }

  @Test
  public void test46()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertNotNull(vector3D0);
      
      Vector3D vector3D1 = Vector3D.ZERO;
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertNotNull(vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, vector3D1, vector3D0, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
      }
  }

  @Test
  public void test47()  throws Throwable  {
      double double0 = (-2679.7269);
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[9];
      doubleArray0[2] = doubleArray1;
      assertNotNull(doubleArray0[2]);
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(doubleArray0, double0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // a 3x3 matrix cannot be a rotation matrix
         //
      }
  }

  @Test
  public void test48()  throws Throwable  {
      double double0 = 1084.426;
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[8];
      doubleArray0[1] = doubleArray1;
      assertNotNull(doubleArray0[1]);
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(doubleArray0, double0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // a 3x3 matrix cannot be a rotation matrix
         //
      }
  }

  @Test
  public void test49()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[5];
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(doubleArray0, doubleArray1[2]);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // a 3x5 matrix cannot be a rotation matrix
         //
      }
  }

  @Test
  public void test50()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertNotNull(rotation0);
      
      double double0 = rotation0.getQ0();
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(1.0, double0, 0.01D);
      
      double[][] doubleArray0 = rotation0.getMatrix();
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertNotNull(doubleArray0);
      
      Rotation rotation1 = new Rotation(doubleArray0, double0);
      assertEquals(0.0, rotation1.getQ2(), 0.01D);
      assertEquals(0.0, rotation1.getQ1(), 0.01D);
      assertEquals(0.0, rotation1.getAngle(), 0.01D);
      assertEquals(1.0, rotation1.getQ0(), 0.01D);
      assertEquals(0.0, rotation1.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertNotNull(rotation1);
      assertNotSame(rotation1, rotation0);
      assertNotSame(rotation0, rotation1);
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(rotation0.equals((Object)rotation1));
  }

  @Test
  public void test51()  throws Throwable  {
      double[][] doubleArray0 = new double[6][10];
      double[] doubleArray1 = new double[16];
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(doubleArray0, doubleArray1[0]);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // a 6x10 matrix cannot be a rotation matrix
         //
      }
  }

  @Test
  public void test52()  throws Throwable  {
      double double0 = (-0.2499999997677497);
      Vector3D vector3D0 = Vector3D.ZERO;
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertNotNull(vector3D0);
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, double0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm for rotation axis
         //
      }
  }

  @Test
  public void test53()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XYX;
      assertEquals("XYX", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      double double0 = (-1820.4759206);
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals((-0.6773436571427195), rotation0.getQ1(), 0.01D);
      assertEquals(3.036997222501208, rotation0.getAngle(), 0.01D);
      assertEquals((-0.7338072033372633), rotation0.getQ2(), 0.01D);
      assertEquals((-0.052273879317212224), rotation0.getQ0(), 0.01D);
      assertEquals("XYX", rotationOrder0.toString());
      assertNotNull(rotation0);
      
      double double1 = rotation0.getQ2();
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals((-0.6773436571427195), rotation0.getQ1(), 0.01D);
      assertEquals(3.036997222501208, rotation0.getAngle(), 0.01D);
      assertEquals((-0.7338072033372633), rotation0.getQ2(), 0.01D);
      assertEquals((-0.052273879317212224), rotation0.getQ0(), 0.01D);
      assertEquals("XYX", rotationOrder0.toString());
      assertEquals((-0.7338072033372633), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test54()  throws Throwable  {
      double double0 = 272.009674966;
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertEquals(0.5, rotation0.getQ3(), 0.01D);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals(0.5, rotation0.getQ1(), 0.01D);
      assertEquals(0.5, rotation0.getQ0(), 0.01D);
      assertEquals(0.5, rotation0.getQ2(), 0.01D);
      assertNotNull(rotation0);
      
      double double1 = rotation0.getQ1();
      assertEquals(0.5, rotation0.getQ3(), 0.01D);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals(0.5, rotation0.getQ1(), 0.01D);
      assertEquals(0.5, rotation0.getQ0(), 0.01D);
      assertEquals(0.5, rotation0.getQ2(), 0.01D);
      assertEquals(0.5, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test55()  throws Throwable  {
      double double0 = 0.5039018405998233;
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertEquals(0.5, rotation0.getQ0(), 0.01D);
      assertEquals(0.5, rotation0.getQ1(), 0.01D);
      assertEquals(0.5, rotation0.getQ2(), 0.01D);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals(0.5, rotation0.getQ3(), 0.01D);
      assertNotNull(rotation0);
      
      double double1 = rotation0.getQ3();
      assertEquals(0.5, rotation0.getQ0(), 0.01D);
      assertEquals(0.5, rotation0.getQ1(), 0.01D);
      assertEquals(0.5, rotation0.getQ2(), 0.01D);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals(0.5, rotation0.getQ3(), 0.01D);
      assertEquals(0.5, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test56()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertNotNull(rotation0);
      
      double double0 = Rotation.distance(rotation0, rotation0);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test57()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertNotNull(rotation0);
      
      RotationOrder rotationOrder0 = RotationOrder.XYZ;
      assertEquals("XYZ", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertEquals("XYZ", rotationOrder0.toString());
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {-0.0, 0.0, -0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test58()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertNotNull(rotation0);
      
      Rotation rotation1 = rotation0.revert();
      assertEquals(0.0, rotation1.getQ2(), 0.01D);
      assertEquals(0.0, rotation1.getQ1(), 0.01D);
      assertEquals(0.0, rotation1.getAngle(), 0.01D);
      assertEquals((-1.0), rotation1.getQ0(), 0.01D);
      assertEquals(0.0, rotation1.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertNotNull(rotation1);
      assertNotSame(rotation1, rotation0);
      assertNotSame(rotation0, rotation1);
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(rotation0.equals((Object)rotation1));
  }
}
