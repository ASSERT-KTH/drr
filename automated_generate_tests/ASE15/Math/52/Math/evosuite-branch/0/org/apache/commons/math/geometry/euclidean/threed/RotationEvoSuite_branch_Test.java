/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:48:51 GMT 2014
 */

package org.apache.commons.math.geometry.euclidean.threed;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.geometry.Vector;
import org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException;
import org.apache.commons.math.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException;
import org.apache.commons.math.geometry.euclidean.threed.Rotation;
import org.apache.commons.math.geometry.euclidean.threed.RotationOrder;
import org.apache.commons.math.geometry.euclidean.threed.Vector3D;



import org.junit.runner.RunWith;


public class RotationEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      double double0 = (-2.2250738585072014E-308);
      double double1 = (-302.12646486361217);
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      assertNotNull(rotationOrder0);
      assertEquals("YXY", rotationOrder0.toString());
      
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double1, double1);
      assertNotNull(rotation0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.7500504586620766, rotation0.getAngle(), 0.01D);
      assertEquals((-0.06950161919471425), rotation0.getQ3(), 0.01D);
      assertEquals(0.9304983808052858, rotation0.getQ0(), 0.01D);
      assertEquals(0.2543052184364827, rotation0.getQ2(), 0.01D);
      assertEquals(0.2543052184364827, rotation0.getQ1(), 0.01D);
      assertEquals("YXY", rotationOrder0.toString());
      
      RotationOrder rotationOrder1 = RotationOrder.ZYZ;
      assertNotNull(rotationOrder1);
      assertFalse(rotationOrder1.equals((Object)rotationOrder0));
      assertNotSame(rotationOrder1, rotationOrder0);
      assertEquals("ZYZ", rotationOrder1.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder1);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {2.4307489451524518, 0.7357681493522276, (-2.281640035232238)}, doubleArray0, 0.01);
      assertFalse(rotationOrder1.equals((Object)rotationOrder0));
      assertFalse(double1 == double0);
      assertFalse(rotationOrder0.equals((Object)rotationOrder1));
      assertFalse(double0 == double1);
      assertNotSame(rotationOrder1, rotationOrder0);
      assertNotSame(rotationOrder0, rotationOrder1);
      assertEquals("ZYZ", rotationOrder1.toString());
      assertEquals(0.7500504586620766, rotation0.getAngle(), 0.01D);
      assertEquals((-0.06950161919471425), rotation0.getQ3(), 0.01D);
      assertEquals(0.9304983808052858, rotation0.getQ0(), 0.01D);
      assertEquals(0.2543052184364827, rotation0.getQ2(), 0.01D);
      assertEquals(0.2543052184364827, rotation0.getQ1(), 0.01D);
      assertEquals("YXY", rotationOrder0.toString());
  }

  @Test
  public void test01()  throws Throwable  {
      double double0 = 0.0;
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      
      RotationOrder rotationOrder0 = null;
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      double double0 = 322.504;
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(0.5, rotation0.getQ0(), 0.01D);
      assertEquals(0.5, rotation0.getQ1(), 0.01D);
      assertEquals(0.5, rotation0.getQ2(), 0.01D);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals(0.5, rotation0.getQ3(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.ZXZ;
      assertNotNull(rotationOrder0);
      assertEquals("ZXZ", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {3.141592653589793, 1.5707963267948966, 1.5707963267948966}, doubleArray0, 0.01);
      assertEquals(0.5, rotation0.getQ0(), 0.01D);
      assertEquals(0.5, rotation0.getQ1(), 0.01D);
      assertEquals(0.5, rotation0.getQ2(), 0.01D);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals(0.5, rotation0.getQ3(), 0.01D);
      assertEquals("ZXZ", rotationOrder0.toString());
  }

  @Test
  public void test03()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 1.073741824E9;
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double0, double0, double1, boolean0);
      assertNotNull(rotation0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.073741824E9, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.ZXZ;
      assertNotNull(rotationOrder0);
      assertEquals("ZXZ", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      double double0 = 0.0;
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.ZXZ;
      assertNotNull(rotationOrder0);
      assertEquals("ZXZ", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YZY;
      assertNotNull(rotationOrder0);
      assertEquals("YZY", rotationOrder0.toString());
      
      Vector3D vector3D0 = rotationOrder0.getA2();
      assertNotNull(vector3D0);
      assertEquals("YZY", rotationOrder0.toString());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      
      double double0 = vector3D0.getNorm();
      assertEquals(1.0, double0, 0.01D);
      assertEquals("YZY", rotationOrder0.toString());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals("YZY", rotationOrder0.toString());
      assertEquals((-0.7384602626041288), rotation0.getQ2(), 0.01D);
      assertEquals(0.4741598817790378, rotation0.getQ0(), 0.01D);
      assertEquals((-0.479425538604203), rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(2.153573489132929, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {1.0, 0.9999999999999999, 1.0}, doubleArray0, 0.01);
      assertEquals("YZY", rotationOrder0.toString());
      assertEquals((-0.7384602626041288), rotation0.getQ2(), 0.01D);
      assertEquals(0.4741598817790378, rotation0.getQ0(), 0.01D);
      assertEquals((-0.479425538604203), rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(2.153573489132929, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
  }

  @Test
  public void test06()  throws Throwable  {
      double double0 = (-2.2250738585072014E-308);
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      assertNotNull(rotationOrder0);
      assertEquals("YXY", rotationOrder0.toString());
      
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals(2.2250738585072014E-308, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(1.1125369292536007E-308, rotation0.getQ1(), 0.01D);
      assertEquals("YXY", rotationOrder0.toString());
      
      RotationOrder rotationOrder1 = RotationOrder.ZYZ;
      assertNotNull(rotationOrder1);
      assertFalse(rotationOrder1.equals((Object)rotationOrder0));
      assertNotSame(rotationOrder1, rotationOrder0);
      assertEquals("ZYZ", rotationOrder1.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      double double0 = 1.2024170231855396;
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(0.5, rotation0.getQ3(), 0.01D);
      assertEquals(0.5, rotation0.getQ1(), 0.01D);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals(0.5, rotation0.getQ2(), 0.01D);
      assertEquals(0.5, rotation0.getQ0(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      assertNotNull(rotationOrder0);
      assertEquals("YXY", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {1.5707963267948966, 1.5707963267948966, 3.141592653589793}, doubleArray0, 0.01);
      assertEquals("YXY", rotationOrder0.toString());
      assertEquals(0.5, rotation0.getQ3(), 0.01D);
      assertEquals(0.5, rotation0.getQ1(), 0.01D);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals(0.5, rotation0.getQ2(), 0.01D);
      assertEquals(0.5, rotation0.getQ0(), 0.01D);
  }

  @Test
  public void test08()  throws Throwable  {
      double double0 = (-2.2250738585072014E-308);
      double double1 = (-302.12646486361217);
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      assertNotNull(rotationOrder0);
      assertEquals("YXY", rotationOrder0.toString());
      
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double1, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1.0), rotation0.getQ1(), 0.01D);
      assertEquals((-7.3647102034296E-311), rotation0.getQ3(), 0.01D);
      assertEquals((-7.3647102034296E-311), rotation0.getQ0(), 0.01D);
      assertEquals((-7.3647102034296E-311), rotation0.getQ2(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      double double0 = (-2.2250738585072014E-308);
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      assertNotNull(rotationOrder0);
      assertEquals("YXY", rotationOrder0.toString());
      
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals(2.2250738585072014E-308, rotation0.getQ2(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(1.1125369292536007E-308, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals("YXY", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      assertNotNull(rotationOrder0);
      assertEquals("XZX", rotationOrder0.toString());
      
      double double0 = (-1842.1605340983376);
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals((-0.31020030979449587), rotation0.getQ0(), 0.01D);
      assertEquals((-0.5593650010132741), rotation0.getQ3(), 0.01D);
      assertEquals(2.5107851961038468, rotation0.getAngle(), 0.01D);
      assertEquals((-0.7686914618003888), rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals("XZX", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {1.95435355887101, 1.1872390947187832, 1.95435355887101}, doubleArray0, 0.01);
      assertEquals((-0.31020030979449587), rotation0.getQ0(), 0.01D);
      assertEquals((-0.5593650010132741), rotation0.getQ3(), 0.01D);
      assertEquals(2.5107851961038468, rotation0.getAngle(), 0.01D);
      assertEquals((-0.7686914618003888), rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals("XZX", rotationOrder0.toString());
  }

  @Test
  public void test11()  throws Throwable  {
      double double0 = 0.001;
      double double1 = 2.85040095144011776E17;
      double double2 = 0.0;
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double2, double0, double1, double0, boolean0);
      assertNotNull(rotation0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(3.508278368679209E-21, rotation0.getQ3(), 0.01D);
      assertEquals(1.0, rotation0.getQ2(), 0.01D);
      assertEquals(3.508278368679209E-21, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      assertNotNull(rotationOrder0);
      assertEquals("XZX", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      assertNotNull(rotationOrder0);
      assertEquals("XZX", rotationOrder0.toString());
      
      Vector3D vector3D0 = Vector3D.PLUS_I;
      assertNotNull(vector3D0);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      assertNotNull(rotation0);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      double double0 = (-1532.846);
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals((-1532.846), rotation0.getQ2(), 0.01D);
      assertEquals((-1532.846), rotation0.getQ1(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals((-1532.846), rotation0.getQ3(), 0.01D);
      assertEquals((-1532.846), rotation0.getQ0(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.XYX;
      assertNotNull(rotationOrder0);
      assertEquals("XYX", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      double double0 = 0.0;
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.XYX;
      assertNotNull(rotationOrder0);
      assertEquals("XYX", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      double double0 = (-1532.846);
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals((-0.5), rotation0.getQ2(), 0.01D);
      assertEquals((-0.5), rotation0.getQ3(), 0.01D);
      assertEquals((-0.5), rotation0.getQ1(), 0.01D);
      assertEquals((-0.5), rotation0.getQ0(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.XYX;
      assertNotNull(rotationOrder0);
      assertEquals("XYX", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {3.141592653589793, 1.5707963267948966, 1.5707963267948966}, doubleArray0, 0.01);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals((-0.5), rotation0.getQ2(), 0.01D);
      assertEquals((-0.5), rotation0.getQ3(), 0.01D);
      assertEquals((-0.5), rotation0.getQ1(), 0.01D);
      assertEquals((-0.5), rotation0.getQ0(), 0.01D);
      assertEquals("XYX", rotationOrder0.toString());
  }

  @Test
  public void test16()  throws Throwable  {
      double double0 = 0.0;
      Vector3D vector3D0 = new Vector3D(double0, double0);
      assertNotNull(vector3D0);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.ZYX;
      assertNotNull(rotationOrder0);
      assertEquals("ZYX", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {0.0, -0.0, 0.0}, doubleArray0, 0.01);
      assertEquals("ZYX", rotationOrder0.toString());
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
  }

  @Test
  public void test17()  throws Throwable  {
      double double0 = 2551.52;
      double double1 = 0.0;
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double1, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(2551.52, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(2551.52, rotation0.getQ3(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals(2551.52, rotation0.getQ2(), 0.01D);
      
      Rotation rotation1 = rotation0.revert();
      assertNotNull(rotation1);
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertNotSame(rotation1, rotation0);
      assertNotSame(rotation0, rotation1);
      assertEquals(2551.52, rotation1.getQ3(), 0.01D);
      assertEquals(Double.NaN, rotation1.getAngle(), 0.01D);
      assertEquals(0.0, rotation1.getQ1(), 0.01D);
      assertEquals((-2551.52), rotation1.getQ0(), 0.01D);
      assertEquals(2551.52, rotation1.getQ2(), 0.01D);
      assertEquals(2551.52, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(2551.52, rotation0.getQ3(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals(2551.52, rotation0.getQ2(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.ZYX;
      assertNotNull(rotationOrder0);
      assertEquals("ZYX", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation1.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      double double0 = 2551.52;
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals(2551.52, rotation0.getQ2(), 0.01D);
      assertEquals(2551.52, rotation0.getQ0(), 0.01D);
      assertEquals(2551.52, rotation0.getQ1(), 0.01D);
      assertEquals(2551.52, rotation0.getQ3(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.ZYX;
      assertNotNull(rotationOrder0);
      assertEquals("ZYX", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.ZXY;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("ZXY", rotationOrder0.toString());
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      double double0 = 7.0;
      double double1 = (-1161.6402163634261);
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double0, double1, double0, boolean0);
      assertNotNull(rotation0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals((-1161.6402163634261), rotation0.getQ2(), 0.01D);
      assertEquals(7.0, rotation0.getQ3(), 0.01D);
      assertEquals(7.0, rotation0.getQ0(), 0.01D);
      assertEquals(7.0, rotation0.getQ1(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.ZXY;
      assertNotNull(rotationOrder0);
      assertEquals("ZXY", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      assertNotNull(vector3D0);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      assertNotNull(rotation0);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.ZXY;
      assertNotNull(rotationOrder0);
      assertEquals("ZXY", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {-0.0, 0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals("ZXY", rotationOrder0.toString());
  }

  @Test
  public void test22()  throws Throwable  {
      double double0 = 0.0;
      Vector3D vector3D0 = new Vector3D(double0, double0);
      assertNotNull(vector3D0);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      assertNotNull(rotationOrder0);
      assertEquals("YZX", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {-0.0, 0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals("YZX", rotationOrder0.toString());
  }

  @Test
  public void test23()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("YZX", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.YXZ;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("YXZ", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 792.2124937763385;
      double double2 = (-717.11856321);
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double0, double1, double2, boolean0);
      assertNotNull(rotation0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals((-717.11856321), rotation0.getQ3(), 0.01D);
      assertEquals(792.2124937763385, rotation0.getQ2(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.YXZ;
      assertNotNull(rotationOrder0);
      assertEquals("YXZ", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YZY;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("YZY", rotationOrder0.toString());
      
      Vector3D vector3D0 = rotationOrder0.getA2();
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals("YZY", rotationOrder0.toString());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals("YZY", rotationOrder0.toString());
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      double double0 = 0.0;
      Vector3D vector3D0 = Vector3D.NaN;
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, double0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("XZY", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZXY;
      assertNotNull(rotationOrder0);
      assertEquals("ZXY", rotationOrder0.toString());
      
      double double0 = 1107.4140105;
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals(3.1360769889813778, rotation0.getAngle(), 0.01D);
      assertEquals((-0.0027578288083628943), rotation0.getQ0(), 0.01D);
      assertEquals(9.192741978426566E-4, rotation0.getQ1(), 0.01D);
      assertEquals((-0.7071037934119759), rotation0.getQ2(), 0.01D);
      assertEquals((-0.7071037934119759), rotation0.getQ3(), 0.01D);
      assertEquals("ZXY", rotationOrder0.toString());
      
      RotationOrder rotationOrder1 = RotationOrder.XZY;
      assertNotNull(rotationOrder1);
      assertFalse(rotationOrder1.equals((Object)rotationOrder0));
      assertNotSame(rotationOrder1, rotationOrder0);
      assertEquals("XZY", rotationOrder1.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder1);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {1.5707895662173588, (-0.002600100808660966), (-3.136392425605122)}, doubleArray0, 0.01);
      assertFalse(rotationOrder0.equals((Object)rotationOrder1));
      assertFalse(rotationOrder1.equals((Object)rotationOrder0));
      assertNotSame(rotationOrder0, rotationOrder1);
      assertNotSame(rotationOrder1, rotationOrder0);
      assertEquals(3.1360769889813778, rotation0.getAngle(), 0.01D);
      assertEquals((-0.0027578288083628943), rotation0.getQ0(), 0.01D);
      assertEquals(9.192741978426566E-4, rotation0.getQ1(), 0.01D);
      assertEquals((-0.7071037934119759), rotation0.getQ2(), 0.01D);
      assertEquals((-0.7071037934119759), rotation0.getQ3(), 0.01D);
      assertEquals("ZXY", rotationOrder0.toString());
      assertEquals("XZY", rotationOrder1.toString());
  }

  @Test
  public void test29()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XYZ;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("XYZ", rotationOrder0.toString());
      
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      double double0 = (-2814.0612415954874);
      double double1 = 0.0;
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double1, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-2814.0612415954874), rotation0.getQ3(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals((-2814.0612415954874), rotation0.getQ2(), 0.01D);
      assertEquals((-2814.0612415954874), rotation0.getQ0(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.XYZ;
      assertNotNull(rotationOrder0);
      assertEquals("XYZ", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      assertNotNull(rotation0);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.XYZ;
      assertNotNull(rotationOrder0);
      assertEquals("XYZ", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {-0.0, 0.0, -0.0}, doubleArray0, 0.01);
      assertEquals("XYZ", rotationOrder0.toString());
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
  }

  @Test
  public void test32()  throws Throwable  {
      double double0 = 0.0;
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      
      double double1 = rotation0.getAngle();
      assertEquals(3.141592653589793, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
  }

  @Test
  public void test33()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.YXZ;
      assertNotNull(rotationOrder0);
      assertEquals("YXZ", rotationOrder0.toString());
      
      double double0 = 297.81505291141;
      double double1 = 0.0;
      Rotation rotation1 = new Rotation(rotationOrder0, double0, double0, double1);
      assertNotNull(rotation1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(rotation1.equals((Object)rotation0));
      assertNotSame(rotation1, rotation0);
      assertEquals("YXZ", rotationOrder0.toString());
      assertEquals(2.945609236369346, rotation1.getAngle(), 0.01D);
      assertEquals(0.09783495836643617, rotation1.getQ0(), 0.01D);
      assertEquals((-0.29709136521931073), rotation1.getQ1(), 0.01D);
      assertEquals((-0.29709136521931073), rotation1.getQ2(), 0.01D);
      assertEquals(0.9021650416335639, rotation1.getQ3(), 0.01D);
      
      double double2 = Rotation.distance(rotation0, rotation1);
      assertEquals(2.945609236369346, double2, 0.01D);
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(rotation1.equals((Object)rotation0));
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation1, rotation0);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals("YXZ", rotationOrder0.toString());
      assertEquals(2.945609236369346, rotation1.getAngle(), 0.01D);
      assertEquals(0.09783495836643617, rotation1.getQ0(), 0.01D);
      assertEquals((-0.29709136521931073), rotation1.getQ1(), 0.01D);
      assertEquals((-0.29709136521931073), rotation1.getQ2(), 0.01D);
      assertEquals(0.9021650416335639, rotation1.getQ3(), 0.01D);
  }

  @Test
  public void test34()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      
      Rotation rotation1 = rotation0.applyInverseTo(rotation0);
      assertNotNull(rotation1);
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(rotation1.equals((Object)rotation0));
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation1, rotation0);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals((-1.0), rotation1.getQ0(), 0.01D);
      assertEquals(0.0, rotation1.getQ3(), 0.01D);
      assertEquals(0.0, rotation1.getAngle(), 0.01D);
      assertEquals(0.0, rotation1.getQ1(), 0.01D);
      assertEquals(0.0, rotation1.getQ2(), 0.01D);
      
      double double0 = Rotation.distance(rotation0, rotation1);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(rotation1.equals((Object)rotation0));
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation1, rotation0);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals((-1.0), rotation1.getQ0(), 0.01D);
      assertEquals(0.0, rotation1.getQ3(), 0.01D);
      assertEquals(0.0, rotation1.getAngle(), 0.01D);
      assertEquals(0.0, rotation1.getQ1(), 0.01D);
      assertEquals(0.0, rotation1.getQ2(), 0.01D);
  }

  @Test
  public void test35()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZXY;
      assertNotNull(rotationOrder0);
      assertEquals("ZXY", rotationOrder0.toString());
      
      double double0 = 1107.4140105;
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals((-0.7071037934119759), rotation0.getQ2(), 0.01D);
      assertEquals(3.1360769889813778, rotation0.getAngle(), 0.01D);
      assertEquals((-0.7071037934119759), rotation0.getQ3(), 0.01D);
      assertEquals(9.192741978426566E-4, rotation0.getQ1(), 0.01D);
      assertEquals((-0.0027578288083628943), rotation0.getQ0(), 0.01D);
      assertEquals("ZXY", rotationOrder0.toString());
      
      Vector3D vector3D0 = rotation0.getAxis();
      assertNotNull(vector3D0);
      assertEquals((-0.7071037934119759), rotation0.getQ2(), 0.01D);
      assertEquals(3.1360769889813778, rotation0.getAngle(), 0.01D);
      assertEquals((-0.7071037934119759), rotation0.getQ3(), 0.01D);
      assertEquals(9.192741978426566E-4, rotation0.getQ1(), 0.01D);
      assertEquals((-0.0027578288083628943), rotation0.getQ0(), 0.01D);
      assertEquals("ZXY", rotationOrder0.toString());
      assertEquals((-0.707106482408598), vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.9999999999999999, vector3D0.getNorm(), 0.01D);
      assertEquals((-1.569496271996003), vector3D0.getAlpha(), 0.01D);
      assertEquals((-0.7853977408617093), vector3D0.getDelta(), 0.01D);
      assertEquals(0.707106482408598, vector3D0.getNormInf(), 0.01D);
      assertEquals((-0.707106482408598), vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.9999999999999998, vector3D0.getNormSq(), 0.01D);
      assertEquals(9.192776936875887E-4, vector3D0.getX(), 0.01D);
      assertEquals(1.4151322425108837, vector3D0.getNorm1(), 0.01D);
  }

  @Test
  public void test36()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      assertNotNull(vector3D0);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      
      Vector3D vector3D1 = vector3D0.negate();
      assertNotNull(vector3D1);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertEquals(-0.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals((-3.141592653589793), vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(-0.0, vector3D1.getZ(), 0.01D);
      assertEquals(-0.0, vector3D1.getDelta(), 0.01D);
      assertEquals((-1.0), vector3D1.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D1);
      assertNotNull(rotation0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertEquals(-0.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals((-3.141592653589793), vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(-0.0, vector3D1.getZ(), 0.01D);
      assertEquals(-0.0, vector3D1.getDelta(), 0.01D);
      assertEquals((-1.0), vector3D1.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals((-1.0), rotation0.getQ3(), 0.01D);
      assertEquals(-0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
  }

  @Test
  public void test37()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      
      Vector3D vector3D0 = rotation0.getAxis();
      assertNotNull(vector3D0);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      
      Vector3D vector3D1 = vector3D0.subtract((Vector<Euclidean3D>) vector3D0);
      assertNotNull(vector3D1);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      
      Rotation rotation1 = null;
      try {
        rotation1 = new Rotation(vector3D1, vector3D1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      double double0 = (-2.2250738585072014E-308);
      double double1 = (-302.12646486361217);
      Vector3D vector3D0 = new Vector3D(double0, double1);
      assertNotNull(vector3D0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.369607198483537, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.8609967616105715, vector3D0.getX(), 0.01D);
      assertEquals((-1.9157813865190396E-308), vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals((-2.2250738585072014E-308), vector3D0.getAlpha(), 0.01D);
      assertEquals(0.8609967616105715, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals((-0.5086104368729654), vector3D0.getZ(), 0.01D);
      assertEquals((-0.5335701189920197), vector3D0.getDelta(), 0.01D);
      
      Vector3D vector3D1 = new Vector3D(double0, double1, double1);
      assertNotNull(vector3D1);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertNotSame(vector3D1, vector3D0);
      assertEquals((-302.12646486361217), vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals((-302.12646486361217), vector3D1.getZ(), 0.01D);
      assertEquals((-2.2250738585072014E-308), vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals((-0.7853981633974482), vector3D1.getDelta(), 0.01D);
      assertEquals(604.2529297272243, vector3D1.getNorm1(), 0.01D);
      assertEquals(182560.80154196697, vector3D1.getNormSq(), 0.01D);
      assertEquals(302.12646486361217, vector3D1.getNormInf(), 0.01D);
      assertEquals(427.2713441619587, vector3D1.getNorm(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D1.getAlpha(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D1, vector3D0, vector3D1, vector3D0);
      assertNotNull(rotation0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertEquals((-302.12646486361217), vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals((-302.12646486361217), vector3D1.getZ(), 0.01D);
      assertEquals((-2.2250738585072014E-308), vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals((-0.7853981633974482), vector3D1.getDelta(), 0.01D);
      assertEquals(604.2529297272243, vector3D1.getNorm1(), 0.01D);
      assertEquals(182560.80154196697, vector3D1.getNormSq(), 0.01D);
      assertEquals(302.12646486361217, vector3D1.getNormInf(), 0.01D);
      assertEquals(427.2713441619587, vector3D1.getNorm(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.369607198483537, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.8609967616105715, vector3D0.getX(), 0.01D);
      assertEquals((-1.9157813865190396E-308), vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals((-2.2250738585072014E-308), vector3D0.getAlpha(), 0.01D);
      assertEquals(0.8609967616105715, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals((-0.5086104368729654), vector3D0.getZ(), 0.01D);
      assertEquals((-0.5335701189920197), vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
  }

  @Test
  public void test39()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      assertNotNull(vector3D0);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      
      Vector3D vector3D1 = vector3D0.orthogonal();
      assertNotNull(vector3D1);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(1.5707963267948966, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getZ(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(-0.0, vector3D1.getX(), 0.01D);
      assertEquals(3.141592653589793, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D1, vector3D1, vector3D0);
      assertNotNull(rotation0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(1.5707963267948966, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getZ(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(-0.0, vector3D1.getX(), 0.01D);
      assertEquals(3.141592653589793, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals((-0.7071067811865475), rotation0.getQ3(), 0.01D);
      assertEquals((-0.7071067811865475), rotation0.getQ1(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
  }

  @Test
  public void test40()  throws Throwable  {
      double double0 = 322.504;
      double double1 = 0.0;
      Vector3D vector3D0 = new Vector3D(double0, double1, double1);
      assertNotNull(vector3D0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(322.504, vector3D0.getNorm1(), 0.01D);
      assertEquals(104008.830016, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(322.504, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(322.504, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(322.504, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertFalse(double0 == double1);
      assertEquals(0.5, rotation0.getQ1(), 0.01D);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals(0.5, rotation0.getQ2(), 0.01D);
      assertEquals(0.5, rotation0.getQ0(), 0.01D);
      assertEquals(0.5, rotation0.getQ3(), 0.01D);
      
      Vector3D vector3D1 = rotation0.getAxis();
      assertNotNull(vector3D1);
      assertFalse(double0 == double1);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertNotSame(vector3D1, vector3D0);
      assertEquals(0.5, rotation0.getQ1(), 0.01D);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals(0.5, rotation0.getQ2(), 0.01D);
      assertEquals(0.5, rotation0.getQ0(), 0.01D);
      assertEquals(0.5, rotation0.getQ3(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals((-0.5773502691896258), vector3D1.getZ(), 0.01D);
      assertEquals(1.0000000000000002, vector3D1.getNormSq(), 0.01D);
      assertEquals((-0.6154797086703875), vector3D1.getDelta(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.7320508075688776, vector3D1.getNorm1(), 0.01D);
      assertEquals((-0.5773502691896258), vector3D1.getY(), 0.01D);
      assertEquals((-2.356194490192345), vector3D1.getAlpha(), 0.01D);
      assertEquals(0.5773502691896258, vector3D1.getNormInf(), 0.01D);
      assertEquals((-0.5773502691896258), vector3D1.getX(), 0.01D);
      
      Rotation rotation1 = new Rotation(vector3D0, vector3D1, vector3D1, vector3D1);
      assertNotNull(rotation1);
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(double0 == double1);
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(double1 == double0);
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation1, rotation0);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertEquals(0.5, rotation0.getQ1(), 0.01D);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals(0.5, rotation0.getQ2(), 0.01D);
      assertEquals(0.5, rotation0.getQ0(), 0.01D);
      assertEquals(0.5, rotation0.getQ3(), 0.01D);
      assertEquals((-0.650115170077832), rotation1.getQ0(), 0.01D);
      assertEquals((-0.44403691512113547), rotation1.getQ3(), 0.01D);
      assertEquals(1.3578660807217287, rotation1.getAngle(), 0.01D);
      assertEquals(0.44403691512113547, rotation1.getQ2(), 0.01D);
      assertEquals(0.0, rotation1.getQ1(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals((-0.5773502691896258), vector3D1.getZ(), 0.01D);
      assertEquals(1.0000000000000002, vector3D1.getNormSq(), 0.01D);
      assertEquals((-0.6154797086703875), vector3D1.getDelta(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.7320508075688776, vector3D1.getNorm1(), 0.01D);
      assertEquals((-0.5773502691896258), vector3D1.getY(), 0.01D);
      assertEquals((-2.356194490192345), vector3D1.getAlpha(), 0.01D);
      assertEquals(0.5773502691896258, vector3D1.getNormInf(), 0.01D);
      assertEquals((-0.5773502691896258), vector3D1.getX(), 0.01D);
      assertEquals(322.504, vector3D0.getNorm1(), 0.01D);
      assertEquals(104008.830016, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(322.504, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(322.504, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(322.504, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
  }

  @Test
  public void test41()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      assertNotNull(vector3D0);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      
      Vector3D vector3D1 = vector3D0.getZero();
      assertNotNull(vector3D1);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
      }
  }

  @Test
  public void test42()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      assertNotNull(vector3D0);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      
      Vector3D vector3D1 = Vector3D.ZERO;
      assertNotNull(vector3D1);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertNotSame(vector3D1, vector3D0);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, vector3D0, vector3D1, vector3D1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
      }
  }

  @Test
  public void test43()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      assertNotNull(vector3D0);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      
      Vector3D vector3D1 = vector3D0.subtract((Vector<Euclidean3D>) vector3D0);
      assertNotNull(vector3D1);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, vector3D1, vector3D0, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
      }
  }

  @Test
  public void test44()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      assertNotNull(vector3D0);
      assertEquals(0.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
      }
  }

  @Test
  public void test45()  throws Throwable  {
      double double0 = (-302.12646486361217);
      double double1 = (-2509.50150268);
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      assertNotNull(rotationOrder0);
      assertEquals("YXY", rotationOrder0.toString());
      
      double double2 = 2.0;
      Rotation rotation0 = new Rotation(rotationOrder0, double1, double2, double0);
      assertNotNull(rotation0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals((-0.02631781606778219), rotation0.getQ0(), 0.01D);
      assertEquals(3.0889509434124074, rotation0.getAngle(), 0.01D);
      assertEquals((-0.5396609623493728), rotation0.getQ2(), 0.01D);
      assertEquals(0.7027970947244621, rotation0.getQ3(), 0.01D);
      assertEquals(0.4627630732031528, rotation0.getQ1(), 0.01D);
      assertEquals("YXY", rotationOrder0.toString());
      
      double[][] doubleArray0 = rotation0.getMatrix();
      assertNotNull(doubleArray0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals((-0.02631781606778219), rotation0.getQ0(), 0.01D);
      assertEquals(3.0889509434124074, rotation0.getAngle(), 0.01D);
      assertEquals((-0.5396609623493728), rotation0.getQ2(), 0.01D);
      assertEquals(0.7027970947244621, rotation0.getQ3(), 0.01D);
      assertEquals(0.4627630732031528, rotation0.getQ1(), 0.01D);
      assertEquals("YXY", rotationOrder0.toString());
      
      Rotation rotation1 = new Rotation(doubleArray0, double2);
      assertNotNull(rotation1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(rotation0.equals((Object)rotation1));
      assertNotSame(rotation1, rotation0);
      assertNotSame(rotation0, rotation1);
      assertEquals(3.0889509434124074, rotation1.getAngle(), 0.01D);
      assertEquals(0.7027970947244621, rotation1.getQ3(), 0.01D);
      assertEquals(0.46276307320315285, rotation1.getQ1(), 0.01D);
      assertEquals((-0.026317816067782256), rotation1.getQ0(), 0.01D);
      assertEquals((-0.5396609623493729), rotation1.getQ2(), 0.01D);
      assertEquals((-0.02631781606778219), rotation0.getQ0(), 0.01D);
      assertEquals(3.0889509434124074, rotation0.getAngle(), 0.01D);
      assertEquals((-0.5396609623493728), rotation0.getQ2(), 0.01D);
      assertEquals(0.7027970947244621, rotation0.getQ3(), 0.01D);
      assertEquals(0.4627630732031528, rotation0.getQ1(), 0.01D);
      assertEquals("YXY", rotationOrder0.toString());
  }

  @Test
  public void test46()  throws Throwable  {
      double double0 = (-2.2250738585072014E-308);
      double double1 = (-2509.50150268);
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      assertNotNull(rotationOrder0);
      assertEquals("YXY", rotationOrder0.toString());
      
      double double2 = 2.0;
      Rotation rotation0 = new Rotation(rotationOrder0, double1, double2, double0);
      assertNotNull(rotation0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals("YXY", rotationOrder0.toString());
      assertEquals(0.2611125867391196, rotation0.getQ1(), 0.01D);
      assertEquals((-0.513631405989037), rotation0.getQ2(), 0.01D);
      assertEquals(0.7999335193126844, rotation0.getQ3(), 0.01D);
      assertEquals((-0.16765846387270114), rotation0.getQ0(), 0.01D);
      assertEquals(2.804684591853827, rotation0.getAngle(), 0.01D);
      
      double[][] doubleArray0 = rotation0.getMatrix();
      assertNotNull(doubleArray0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals("YXY", rotationOrder0.toString());
      assertEquals(0.2611125867391196, rotation0.getQ1(), 0.01D);
      assertEquals((-0.513631405989037), rotation0.getQ2(), 0.01D);
      assertEquals(0.7999335193126844, rotation0.getQ3(), 0.01D);
      assertEquals((-0.16765846387270114), rotation0.getQ0(), 0.01D);
      assertEquals(2.804684591853827, rotation0.getAngle(), 0.01D);
      
      Rotation rotation1 = new Rotation(doubleArray0, double2);
      assertNotNull(rotation1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation1, rotation0);
      assertEquals("YXY", rotationOrder0.toString());
      assertEquals(0.2611125867391196, rotation0.getQ1(), 0.01D);
      assertEquals((-0.513631405989037), rotation0.getQ2(), 0.01D);
      assertEquals(0.7999335193126844, rotation0.getQ3(), 0.01D);
      assertEquals((-0.16765846387270114), rotation0.getQ0(), 0.01D);
      assertEquals(2.804684591853827, rotation0.getAngle(), 0.01D);
      assertEquals(2.804684591853827, rotation1.getAngle(), 0.01D);
      assertEquals((-0.7999335193126845), rotation1.getQ3(), 0.01D);
      assertEquals((-0.2611125867391196), rotation1.getQ1(), 0.01D);
      assertEquals(0.513631405989037, rotation1.getQ2(), 0.01D);
      assertEquals(0.1676584638727011, rotation1.getQ0(), 0.01D);
  }

  @Test
  public void test47()  throws Throwable  {
      double double0 = (-2.2250738585072014E-308);
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      assertNotNull(rotationOrder0);
      assertEquals("YXY", rotationOrder0.toString());
      
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals("YXY", rotationOrder0.toString());
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.1125369292536007E-308, rotation0.getQ1(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(2.2250738585072014E-308, rotation0.getQ2(), 0.01D);
      
      double[][] doubleArray0 = rotation0.getMatrix();
      assertNotNull(doubleArray0);
      assertEquals("YXY", rotationOrder0.toString());
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.1125369292536007E-308, rotation0.getQ1(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(2.2250738585072014E-308, rotation0.getQ2(), 0.01D);
      
      double double1 = 0.25;
      Rotation rotation1 = new Rotation(doubleArray0, double1);
      assertNotNull(rotation1);
      assertFalse(double1 == double0);
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(double0 == double1);
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation1, rotation0);
      assertEquals("YXY", rotationOrder0.toString());
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.1125369292536007E-308, rotation0.getQ1(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(2.2250738585072014E-308, rotation0.getQ2(), 0.01D);
      assertEquals(1.1125369292536007E-308, rotation1.getQ1(), 0.01D);
      assertEquals(2.2250738585072014E-308, rotation1.getQ2(), 0.01D);
      assertEquals(0.0, rotation1.getQ3(), 0.01D);
      assertEquals(1.0, rotation1.getQ0(), 0.01D);
      assertEquals(0.0, rotation1.getAngle(), 0.01D);
  }

  @Test
  public void test48()  throws Throwable  {
      double double0 = 0.0;
      double[][] doubleArray0 = new double[3][1];
      double[] doubleArray1 = new double[3];
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      doubleArray0[1] = doubleArray0[0];
      assertNotNull(doubleArray0[1]);
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(doubleArray0, double0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // a 3x3 matrix cannot be a rotation matrix
         //
      }
  }

  @Test
  public void test49()  throws Throwable  {
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[3];
      double double0 = (-13.728300094622252);
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(doubleArray0, double0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // a 3x3 matrix cannot be a rotation matrix
         //
      }
  }

  @Test
  public void test50()  throws Throwable  {
      double[][] doubleArray0 = new double[3][6];
      double double0 = 4788.410160641281;
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(doubleArray0, double0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // a 3x6 matrix cannot be a rotation matrix
         //
      }
  }

  @Test
  public void test51()  throws Throwable  {
      double double0 = (-1532.846);
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals((-0.5), rotation0.getQ3(), 0.01D);
      assertEquals((-0.5), rotation0.getQ2(), 0.01D);
      assertEquals((-0.5), rotation0.getQ1(), 0.01D);
      assertEquals((-0.5), rotation0.getQ0(), 0.01D);
      
      double[][] doubleArray0 = rotation0.getMatrix();
      assertNotNull(doubleArray0);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals((-0.5), rotation0.getQ3(), 0.01D);
      assertEquals((-0.5), rotation0.getQ2(), 0.01D);
      assertEquals((-0.5), rotation0.getQ1(), 0.01D);
      assertEquals((-0.5), rotation0.getQ0(), 0.01D);
      
      Rotation rotation1 = null;
      try {
        rotation1 = new Rotation(doubleArray0, double0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // unable to orthogonalize matrix in 10 iterations
         //
      }
  }

  @Test
  public void test52()  throws Throwable  {
      double[][] doubleArray0 = new double[7][4];
      double double0 = 0.0;
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(doubleArray0, double0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // a 7x4 matrix cannot be a rotation matrix
         //
      }
  }

  @Test
  public void test53()  throws Throwable  {
      double double0 = 0.0;
      Vector3D vector3D0 = new Vector3D(double0, double0);
      assertNotNull(vector3D0);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      
      double double1 = rotation0.getQ2();
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      
      Vector3D vector3D1 = new Vector3D(double0, vector3D0, double1, vector3D0, double0, vector3D0, double0, vector3D0);
      assertNotNull(vector3D1);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertTrue(double1 == double0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertTrue(double0 == double1);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      
      Rotation rotation1 = null;
      try {
        rotation1 = new Rotation(vector3D1, double0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm for rotation axis
         //
      }
  }

  @Test
  public void test54()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      
      double double0 = rotation0.getQ0();
      assertEquals(1.0, double0, 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
  }

  @Test
  public void test55()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      assertNotNull(rotation0);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      
      double double0 = rotation0.getQ1();
      assertEquals(0.0, double0, 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
  }

  @Test
  public void test56()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      assertNotNull(rotation0);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      
      double double0 = Rotation.distance(rotation0, rotation0);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
  }

  @Test
  public void test57()  throws Throwable  {
      double double0 = 1.2024170231855396;
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(0.5, rotation0.getQ3(), 0.01D);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals(0.5, rotation0.getQ1(), 0.01D);
      assertEquals(0.5, rotation0.getQ2(), 0.01D);
      assertEquals(0.5, rotation0.getQ0(), 0.01D);
      
      double double1 = rotation0.getQ3();
      assertEquals(0.5, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.5, rotation0.getQ3(), 0.01D);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals(0.5, rotation0.getQ1(), 0.01D);
      assertEquals(0.5, rotation0.getQ2(), 0.01D);
      assertEquals(0.5, rotation0.getQ0(), 0.01D);
  }

  @Test
  public void test58()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.YXZ;
      assertNotNull(rotationOrder0);
      assertEquals("YXZ", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {0.0, -0.0, 0.0}, doubleArray0, 0.01);
      assertEquals("YXZ", rotationOrder0.toString());
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
  }
}
