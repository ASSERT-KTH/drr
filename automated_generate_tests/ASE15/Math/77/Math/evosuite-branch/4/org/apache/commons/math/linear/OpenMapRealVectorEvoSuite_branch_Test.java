/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:19:57 GMT 2014
 */

package org.apache.commons.math.linear;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.MatrixIndexException;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealVector;



import org.junit.runner.RunWith;


public class OpenMapRealVectorEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      int int0 = 1;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.copy();
      assertNotNull(openMapRealVector1);
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(1, openMapRealVector1.getDimension());
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector0.mapCoshToSelf();
      assertNotNull(openMapRealVector2);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(1, openMapRealVector2.getDimension());
      assertSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      
      boolean boolean0 = openMapRealVector1.equals((Object) openMapRealVector0);
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(1, openMapRealVector1.getDimension());
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertFalse(boolean0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 1;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      
      openMapRealVector0.set((double) int0);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapSinToSelf();
      assertNotNull(openMapRealVector1);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(1, openMapRealVector1.getDimension());
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertSame(openMapRealVector0, openMapRealVector1);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.unitVector();
      assertNotNull(openMapRealVector2);
      assertEquals(1, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      
      boolean boolean0 = openMapRealVector2.equals((Object) openMapRealVector0);
      assertEquals(1, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertFalse(boolean0);
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = 1;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      
      openMapRealVector0.set((double) int0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.unitVector();
      assertNotNull(openMapRealVector1);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(1, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1, openMapRealVector0.getDimension());
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      
      boolean boolean0 = openMapRealVector1.equals((Object) openMapRealVector0);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(1, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1, openMapRealVector0.getDimension());
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertTrue(boolean0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = (-366);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      //  // Unstable assertion: assertNotNull(openMapRealVector0);
      //  // Unstable assertion: assertEquals(-366, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(-0.0, openMapRealVector0.getSparcity(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(int0);
      //  // Unstable assertion: assertNotNull(openMapRealVector1);
      //  // Unstable assertion: assertEquals(-366, openMapRealVector1.getDimension());
      //  // Unstable assertion: assertEquals(-0.0, openMapRealVector1.getSparcity(), 0.01D);
      //  // Unstable assertion: assertNotSame(openMapRealVector1, openMapRealVector0);
      //  // Unstable assertion: assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      
      boolean boolean0 = openMapRealVector0.equals((Object) openMapRealVector1);
      //  // Unstable assertion: assertEquals(-366, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(-0.0, openMapRealVector0.getSparcity(), 0.01D);
      //  // Unstable assertion: assertEquals(-366, openMapRealVector1.getDimension());
      //  // Unstable assertion: assertEquals(-0.0, openMapRealVector1.getSparcity(), 0.01D);
      //  // Unstable assertion: assertNotSame(openMapRealVector0, openMapRealVector1);
      //  // Unstable assertion: assertNotSame(openMapRealVector1, openMapRealVector0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      //  // Unstable assertion: assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = 37;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(37, openMapRealVector0.getDimension());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = openMapRealVector0.equals(object0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(37, openMapRealVector0.getDimension());
      assertFalse(boolean0);
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = 635;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(635, openMapRealVector0.getDimension());
      
      Object object0 = null;
      boolean boolean0 = openMapRealVector0.equals(object0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(635, openMapRealVector0.getDimension());
      assertFalse(boolean0);
  }

  @Test
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[7]);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      
      int int0 = (-366);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(int0, int0);
      assertNotNull(openMapRealVector1);
      assertEquals(-0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(-366, openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      
      boolean boolean0 = openMapRealVector1.equals((Object) openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(-0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(-366, openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertFalse(boolean0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = (-1245.8917888035853);
      doubleArray0[2] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, (-1245.8917888035853), 0.0}, doubleArray0, 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.25, openMapRealVector0.getSparcity(), 0.01D);
      
      int int0 = openMapRealVector0.hashCode();
      assertArrayEquals(new double[] {0.0, 0.0, (-1245.8917888035853), 0.0}, doubleArray0, 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.25, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(146452270, int0);
  }

  @Test
  public void test08()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertNotNull(openMapRealVector0);
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      
      // Undeclared exception!
      try {
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.unitVector();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // cannot normalize a zero norm vector
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = (-2427.3712363194327);
      doubleArray0[4] = double0;
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-2427.3712363194327), 0.0}, doubleArray0, 0.01);
      assertEquals(2427.3712363194327, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(2427.3712363194327, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(2427.3712363194327, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) arrayRealVector0);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-2427.3712363194327), 0.0}, doubleArray0, 0.01);
      assertEquals(2427.3712363194327, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(2427.3712363194327, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(2427.3712363194327, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.16666666666666666, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(6, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract((RealVector) arrayRealVector0);
      assertNotNull(openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-2427.3712363194327), 0.0}, doubleArray0, 0.01);
      assertEquals(2427.3712363194327, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(2427.3712363194327, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(2427.3712363194327, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(6, openMapRealVector1.getDimension());
      assertEquals(0.16666666666666666, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(6, openMapRealVector0.getDimension());
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.subtract(openMapRealVector0);
      assertNotNull(openMapRealVector2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-2427.3712363194327), 0.0}, doubleArray0, 0.01);
      assertEquals(2427.3712363194327, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(2427.3712363194327, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(2427.3712363194327, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.16666666666666666, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(6, openMapRealVector2.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(6, openMapRealVector1.getDimension());
      assertEquals(0.16666666666666666, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(6, openMapRealVector0.getDimension());
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
  }

  @Test
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0);
      assertNotNull(openMapRealVector0);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract((RealVector) openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertEquals(Double.NaN, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector1.getDimension());
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 31;
      int int1 = 3;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int1);
      assertNotNull(openMapRealVector0);
      assertEquals(31, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      double[] doubleArray0 = new double[2];
      openMapRealVector0.setSubVector(int1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(31, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test13()  throws Throwable  {
      double double0 = (-3027.11574);
      Double[] doubleArray0 = new Double[10];
      doubleArray0[0] = (Double) double0;
      doubleArray0[1] = (Double) double0;
      doubleArray0[2] = (Double) double0;
      doubleArray0[3] = (Double) double0;
      doubleArray0[4] = (Double) double0;
      doubleArray0[5] = (Double) double0;
      doubleArray0[6] = (Double) double0;
      doubleArray0[7] = (Double) double0;
      doubleArray0[8] = doubleArray0[7];
      doubleArray0[9] = (Double) double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[2]);
      assertNotNull(openMapRealVector0);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      
      double[] doubleArray1 = new double[10];
      OpenMapRealMatrix openMapRealMatrix0 = (OpenMapRealMatrix)openMapRealVector0.outerProduct(doubleArray1);
      assertNotNull(openMapRealMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(10, openMapRealMatrix0.getRowDimension());
      assertEquals(10, openMapRealMatrix0.getColumnDimension());
  }

  @Test
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[25];
      double double0 = 540.5;
      doubleArray0[3] = double0;
      int int0 = 0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0);
      assertNotNull(openMapRealVector0);
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0);
      assertNotNull(openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 540.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(25, openMapRealVector1.getDimension());
      assertEquals(0.04, openMapRealVector1.getSparcity(), 0.01D);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      
      boolean boolean0 = openMapRealVector1.isNaN();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 540.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(25, openMapRealVector1.getDimension());
      assertEquals(0.04, openMapRealVector1.getSparcity(), 0.01D);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertFalse(boolean0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = Double.NaN;
      doubleArray0[0] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(0.1, openMapRealVector0.getSparcity(), 0.01D);
      
      boolean boolean0 = openMapRealVector0.isNaN();
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(0.1, openMapRealVector0.getSparcity(), 0.01D);
      assertTrue(boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      assertEquals(0.5, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(2, openMapRealVector0.getDimension());
      
      boolean boolean0 = openMapRealVector0.isInfinite();
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      assertEquals(0.5, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(2, openMapRealVector0.getDimension());
      assertTrue(boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = 75;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(75, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      
      openMapRealVector0.set((double) int0);
      assertEquals(75, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      
      boolean boolean0 = openMapRealVector0.isInfinite();
      assertEquals(75, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = Double.NaN;
      doubleArray0[0] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(0.1, openMapRealVector0.getSparcity(), 0.01D);
      
      boolean boolean0 = openMapRealVector0.isInfinite();
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(0.1, openMapRealVector0.getSparcity(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = (-793);
      double[] doubleArray0 = new double[8];
      doubleArray0[4] = (double) int0;
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-793.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(793.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(793.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(793.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapSin();
      assertNotNull(arrayRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-793.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, arrayRealVector1.getDimension());
      assertEquals(0.9683795037912949, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.9683795037912949, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.9683795037912949, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(793.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(793.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(793.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) arrayRealVector1);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-793.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, arrayRealVector1.getDimension());
      assertEquals(0.9683795037912949, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.9683795037912949, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.9683795037912949, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(0.125, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(793.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(793.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(793.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      
      double double0 = openMapRealVector0.getLInfDistance(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-793.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, arrayRealVector1.getDimension());
      assertEquals(0.9683795037912949, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.9683795037912949, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.9683795037912949, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(0.125, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(793.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(793.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(793.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertEquals(792.0316204962087, double0, 0.01D);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
  }

  @Test
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(7, arrayRealVector0.getDimension());
      
      double double0 = openMapRealVector0.getLInfDistance((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test21()  throws Throwable  {
      int int0 = 37;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(37, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapCosh();
      assertNotNull(openMapRealVector1);
      assertEquals(37, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(37, openMapRealVector0.getDimension());
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      
      double double0 = openMapRealVector0.getLInfDistance((RealVector) openMapRealVector1);
      assertEquals(37, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(37, openMapRealVector0.getDimension());
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(1.0, double0, 0.01D);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
  }

  @Test
  public void test22()  throws Throwable  {
      int int0 = 31;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(31, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapAcosToSelf();
      assertNotNull(openMapRealVector1);
      assertEquals(31, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(31, openMapRealVector1.getDimension());
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.ebeDivide((RealVector) openMapRealVector0);
      assertNotNull(openMapRealVector2);
      assertEquals(31, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(31, openMapRealVector2.getDimension());
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      
      double double0 = openMapRealVector0.getLInfDistance((RealVector) openMapRealVector2);
      assertEquals(31, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(31, openMapRealVector2.getDimension());
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertEquals(0.5707963267948966, double0, 0.01D);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
  }

  @Test
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) arrayRealVector0);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      
      double double0 = openMapRealVector0.getL1Distance((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = 75;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(75, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapSubtract((double) int0);
      assertNotNull(openMapRealVector1);
      assertEquals(75, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(75, openMapRealVector0.getDimension());
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      
      double double0 = openMapRealVector0.getL1Distance((RealVector) openMapRealVector1);
      assertEquals(75, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(75, openMapRealVector0.getDimension());
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(5625.0, double0, 0.01D);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
  }

  @Test
  public void test25()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      double double0 = 0.031251389109740166;
      Double double1 = new Double(double0);
      assertEquals(0.031251389109740166, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = double1;
      doubleArray0[4] = doubleArray0[3];
      doubleArray0[5] = doubleArray0[3];
      doubleArray0[6] = doubleArray0[1];
      doubleArray0[7] = doubleArray0[2];
      doubleArray0[8] = doubleArray0[7];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) double1);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector0.getDimension());
      assertTrue(double1.equals((Object)double0));
      
      double double2 = openMapRealVector0.getL1Distance((RealVector) openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.0, double2, 0.01D);
      assertTrue(double1.equals((Object)double0));
      assertFalse(double1.equals((Object)double2));
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
  }

  @Test
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) arrayRealVector0);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      
      double double0 = openMapRealVector0.getDistance((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = 1;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) int0;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector1);
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.5, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(2, openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      
      double double0 = openMapRealVector0.getDistance(openMapRealVector1);
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.5, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(2, openMapRealVector1.getDimension());
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(1.0, double0, 0.01D);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
  }

  @Test
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int int0 = (-12);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) int0);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(3, openMapRealVector0.getDimension());
      
      double double0 = openMapRealVector0.getDistance(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = 635;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0);
      assertNotNull(openMapRealVector0);
      assertEquals(635, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      
      double double0 = openMapRealVector0.getDistance((RealVector) openMapRealVector0);
      assertEquals(635, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = Double.NaN;
      doubleArray0[0] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.1, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      
      double[] doubleArray1 = openMapRealVector0.toArray();
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.1, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[3]);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      
      int int0 = 1;
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.getSubVector(int0, int0);
      assertNotNull(openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(1, openMapRealVector1.getDimension());
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
  }

  @Test
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int int0 = (-12);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) int0);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(3, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply(doubleArray0);
      assertNotNull(openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(3, openMapRealVector0.getDimension());
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
  }

  @Test
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int int0 = (-12);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) int0);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply((RealVector) openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(3, openMapRealVector1.getDimension());
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
  }

  @Test
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = Double.NaN;
      doubleArray0[0] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(0.1, openMapRealVector0.getSparcity(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide(doubleArray0);
      assertNotNull(openMapRealVector1);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, openMapRealVector1.getDimension());
      assertEquals(0.1, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(0.1, openMapRealVector0.getSparcity(), 0.01D);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
  }

  @Test
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int int0 = 2830;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0);
      assertNotNull(openMapRealVector0);
      assertEquals(2830, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      
      try {
        double double0 = openMapRealVector0.dotProduct(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector length mismatch: got 2,830 but expected 3
         //
      }
  }

  @Test
  public void test36()  throws Throwable  {
      int int0 = 1;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1, openMapRealVector0.getDimension());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) int0;
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.projection(doubleArray0);
      assertNotNull(openMapRealVector1);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(1, openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test
  public void test37()  throws Throwable  {
      int int0 = 75;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(75, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = null;
      // Undeclared exception!
      try {
        OpenMapRealVector openMapRealVector2 = openMapRealVector0.append((RealVector) openMapRealVector1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      int int0 = 1;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) int0;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector1);
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, openMapRealVector1.getDimension());
      assertEquals(0.5, openMapRealVector1.getSparcity(), 0.01D);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.append(openMapRealVector1);
      assertNotNull(openMapRealVector2);
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0.3333333333333333, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(3, openMapRealVector2.getDimension());
      assertEquals(2, openMapRealVector1.getDimension());
      assertEquals(0.5, openMapRealVector1.getSparcity(), 0.01D);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
  }

  @Test
  public void test39()  throws Throwable  {
      int int0 = 0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0);
      assertNotNull(openMapRealVector0);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append((RealVector) openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertEquals(0, openMapRealVector1.getDimension());
      assertEquals(Double.NaN, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
  }

  @Test
  public void test40()  throws Throwable  {
      Double[] doubleArray0 = new Double[10];
      double double0 = 0.0;
      Double double1 = new Double(double0);
      assertEquals(0.0, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = double1;
      doubleArray0[4] = doubleArray0[2];
      doubleArray0[5] = doubleArray0[1];
      double double2 = (-1.0);
      Double double3 = new Double(double2);
      assertNotSame(double3, double1);
      assertEquals((-1.0), (double)double3, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double3.equals((Object)double0));
      assertFalse(double3.equals((Object)double1));
      assertTrue(double3.equals((Object)double2));
      
      doubleArray0[6] = double3;
      doubleArray0[7] = doubleArray0[0];
      doubleArray0[8] = doubleArray0[3];
      doubleArray0[9] = doubleArray0[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.1, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      
      double double4 = 1.0;
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(double4);
      assertNotNull(openMapRealVector1);
      assertEquals(0.1, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(10, openMapRealVector1.getDimension());
      assertEquals(0.9, openMapRealVector1.getSparcity(), 0.01D);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(double4 == double2);
      assertFalse(double4 == double0);
      
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector1.add((RealVector) openMapRealVector0);
      assertNotNull(openMapRealVector2);
      assertEquals(0.1, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(10, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector1.getDimension());
      assertEquals(0.9, openMapRealVector1.getSparcity(), 0.01D);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(double4 == double2);
      assertFalse(double4 == double0);
  }

  @Test
  public void test41()  throws Throwable  {
      Double[] doubleArray0 = new Double[10];
      double double0 = 0.0;
      Double double1 = new Double(double0);
      assertEquals(0.0, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      double double2 = 41.57066555;
      Double double3 = new Double(double2);
      assertNotSame(double3, double1);
      assertEquals(41.57066555, (double)double3, 0.01D);
      assertFalse(double2 == double0);
      assertTrue(double3.equals((Object)double2));
      assertFalse(double3.equals((Object)double1));
      assertFalse(double3.equals((Object)double0));
      
      doubleArray0[1] = double3;
      Double double4 = new Double((double) double3);
      assertNotSame(double4, double1);
      assertNotSame(double4, double3);
      assertNotSame(double3, double1);
      assertNotSame(double3, double4);
      assertEquals(41.57066555, (double)double4, 0.01D);
      assertFalse(double4.equals((Object)double0));
      assertTrue(double4.equals((Object)double3));
      assertFalse(double4.equals((Object)double1));
      assertTrue(double4.equals((Object)double2));
      assertFalse(double2 == double0);
      assertTrue(double3.equals((Object)double4));
      assertTrue(double3.equals((Object)double2));
      assertFalse(double3.equals((Object)double1));
      assertFalse(double3.equals((Object)double0));
      
      doubleArray0[2] = double4;
      doubleArray0[3] = doubleArray0[0];
      doubleArray0[4] = doubleArray0[2];
      doubleArray0[5] = double1;
      doubleArray0[6] = double4;
      doubleArray0[7] = doubleArray0[0];
      doubleArray0[8] = doubleArray0[0];
      doubleArray0[9] = doubleArray0[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.5, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd((double) doubleArray0[2]);
      assertNotNull(openMapRealVector1);
      assertEquals(0.5, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector1.add((RealVector) openMapRealVector0);
      assertNotNull(openMapRealVector2);
      assertEquals(0.5, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(10, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.add((RealVector) openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test
  public void test43()  throws Throwable  {
      int int0 = (-793);
      double[] doubleArray0 = new double[8];
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) arrayRealVector0);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      
      try {
        openMapRealVector0.setSubVector(int0, (RealVector) openMapRealVector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // index -793 out of allowed range [0, 7]
         //
      }
  }

  @Test
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) arrayRealVector0);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(6, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0[3]);
      assertNotNull(openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(6, openMapRealVector0.getDimension());
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
  }

  @Test
  public void test45()  throws Throwable  {
      int int0 = 37;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0);
      assertNotNull(openMapRealVector0);
      assertEquals(37, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      
      double double0 = openMapRealVector0.getSparcity();
      assertEquals(37, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 382.0242176984851;
      doubleArray0[8] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 382.0242176984851, 0.0}, doubleArray0, 0.01);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(0.1, openMapRealVector0.getSparcity(), 0.01D);
      
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 382.0242176984851, 0.0}, doubleArray0, 0.01);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(382.0242176984851, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(382.0242176984851, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(382.0242176984851, arrayRealVector0.getL1Norm(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapInv();
      assertNotNull(arrayRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 382.0242176984851, 0.0}, doubleArray0, 0.01);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(382.0242176984851, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(382.0242176984851, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(382.0242176984851, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(10, arrayRealVector1.getDimension());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(true, arrayRealVector1.isInfinite());
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      
      ArrayRealVector arrayRealVector2 = (ArrayRealVector)openMapRealVector0.add((RealVector) arrayRealVector1);
      assertNotNull(arrayRealVector2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 382.0242176984851, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector2.getLInfNorm(), 0.01D);
      assertEquals(10, arrayRealVector2.getDimension());
      assertEquals(true, arrayRealVector2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector2.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector2.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(382.0242176984851, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(382.0242176984851, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(382.0242176984851, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(0.1, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(10, arrayRealVector1.getDimension());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(true, arrayRealVector1.isInfinite());
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector2));
  }

  @Test
  public void test47()  throws Throwable  {
      int int0 = 1;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1, openMapRealVector0.getDimension());
      
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector0.new OpenMapSparseIterator();
      assertNotNull(openMapRealVector_OpenMapSparseIterator0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1, openMapRealVector0.getDimension());
      
      // Undeclared exception!
      try {
        openMapRealVector_OpenMapSparseIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported
         //
      }
  }
}
