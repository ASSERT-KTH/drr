/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:47:36 GMT 2014
 */

package org.apache.commons.math.linear;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealVector;



import org.junit.runner.RunWith;


public class OpenMapRealVectorEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 225.6;
      doubleArray0[0] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {225.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(0.1, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(doubleArray0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertArrayEquals(new double[] {225.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector1.getDimension());
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(0.1, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector1);
      
      boolean boolean0 = openMapRealVector1.equals((Object) openMapRealVector0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertArrayEquals(new double[] {225.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector1.getDimension());
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(0.1, openMapRealVector0.getSparcity(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(3, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(double0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(3, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(3, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector1);
      
      boolean boolean0 = openMapRealVector1.equals((Object) openMapRealVector0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(3, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(3, openMapRealVector0.getDimension());
      assertTrue(boolean0);
  }

  @Test
  public void test02()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      int int0 = 0;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(int0, int0, int0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(Double.NaN, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector1.getDimension());
      assertNotNull(openMapRealVector1);
      
      boolean boolean0 = openMapRealVector1.equals((Object) openMapRealVector0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(Double.NaN, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector1.getDimension());
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test03()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      int int0 = 3;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(int0, int0, int0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(3, openMapRealVector1.getDimension());
      assertNotNull(openMapRealVector1);
      
      boolean boolean0 = openMapRealVector1.equals((Object) openMapRealVector0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(3, openMapRealVector1.getDimension());
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      int int0 = 2349;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(2349, (int)integer0);
      
      boolean boolean0 = openMapRealVector0.equals((Object) integer0);
      assertTrue(integer0.equals((Object)int0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertFalse(boolean0);
  }

  @Test
  public void test05()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      Object object0 = null;
      boolean boolean0 = openMapRealVector0.equals(object0);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test06()  throws Throwable  {
      Double[] doubleArray0 = new Double[10];
      double double0 = 0.0;
      Double double1 = new Double(double0);
      assertTrue(double1.equals((Object)double0));
      assertEquals(0.0, (double)double1, 0.01D);
      
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = doubleArray0[1];
      doubleArray0[4] = doubleArray0[2];
      doubleArray0[5] = doubleArray0[3];
      doubleArray0[6] = double1;
      doubleArray0[7] = doubleArray0[2];
      doubleArray0[8] = doubleArray0[1];
      doubleArray0[9] = doubleArray0[2];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      double[] doubleArray1 = new double[10];
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.projection(doubleArray1);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector1.getDimension());
      assertNotNull(openMapRealVector1);
      
      boolean boolean0 = openMapRealVector1.equals((Object) openMapRealVector0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector1.getDimension());
      assertFalse(boolean0);
  }

  @Test
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = (-1.0);
      doubleArray0[5] = double0;
      int int0 = 3;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, (-1.0), 0.0}, doubleArray0, 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector1.getDimension());
      assertEquals(0.1, openMapRealVector1.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector1);
      
      int int1 = openMapRealVector1.hashCode();
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, (-1.0), 0.0}, doubleArray0, 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector1.getDimension());
      assertEquals(0.1, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals((-685526755), int1);
  }

  @Test
  public void test08()  throws Throwable  {
      Double[] doubleArray0 = new Double[10];
      double double0 = 0.0;
      Double double1 = new Double(double0);
      assertTrue(double1.equals((Object)double0));
      assertEquals(0.0, (double)double1, 0.01D);
      
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = doubleArray0[0];
      double double2 = 4276.726563335196;
      Double double3 = new Double(double2);
      assertFalse(double2 == double0);
      assertFalse(double3.equals((Object)double0));
      assertFalse(double3.equals((Object)double1));
      assertTrue(double3.equals((Object)double2));
      assertNotSame(double3, double1);
      assertEquals(4276.726563335196, (double)double3, 0.01D);
      
      doubleArray0[4] = double3;
      doubleArray0[5] = double3;
      doubleArray0[6] = doubleArray0[0];
      doubleArray0[7] = doubleArray0[0];
      doubleArray0[8] = doubleArray0[1];
      doubleArray0[9] = doubleArray0[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(0.2, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.unitVector();
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(0.2, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(0.2, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector1.getDimension());
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test09()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract((RealVector) openMapRealVector0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(0, openMapRealVector1.getDimension());
      assertEquals(Double.NaN, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test10()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertNotNull(arrayRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract((RealVector) arrayRealVector0);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0, openMapRealVector1.getDimension());
      assertEquals(Double.NaN, openMapRealVector1.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) int0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) int0);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.14285714285714285, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(7, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(doubleArray0[1]);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(7, openMapRealVector1.getDimension());
      assertEquals(0.14285714285714285, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(7, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector1);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.subtract(openMapRealVector1);
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(7, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(7, openMapRealVector1.getDimension());
      assertEquals(0.14285714285714285, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(7, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector2);
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[7];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(7, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      openMapRealVector0.set(doubleArray0[1]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(7, openMapRealVector0.getDimension());
  }

  @Test
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[3]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealMatrix openMapRealMatrix0 = (OpenMapRealMatrix)openMapRealVector0.outerProduct(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, openMapRealMatrix0.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(9, openMapRealMatrix0.getRowDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector0.getDimension());
      assertNotNull(openMapRealMatrix0);
  }

  @Test
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[20];
      double double0 = (-2291.9968851);
      doubleArray0[3] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[3]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-2291.9968851), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(20, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapAsinToSelf();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-2291.9968851), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(20, openMapRealVector1.getDimension());
      assertEquals(20, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector1);
      
      boolean boolean0 = openMapRealVector0.isNaN();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-2291.9968851), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertEquals(20, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertTrue(boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 1.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(double0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(10, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector1);
      
      boolean boolean0 = openMapRealVector1.isNaN();
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(10, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = (-33.1);
      doubleArray0[1] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-33.1), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.2, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapLog10ToSelf();
      assertArrayEquals(new double[] {0.0, (-33.1), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector1.getDimension());
      assertNotNull(openMapRealVector1);
      
      boolean boolean0 = openMapRealVector0.isInfinite();
      assertArrayEquals(new double[] {0.0, (-33.1), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = (-33.1);
      doubleArray0[1] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-33.1), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.2, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      boolean boolean0 = openMapRealVector0.isInfinite();
      assertArrayEquals(new double[] {0.0, (-33.1), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.2, openMapRealVector0.getSparcity(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = (-33.1);
      doubleArray0[1] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-33.1), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.2, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      doubleArray0[4] = doubleArray0[1];
      double double1 = openMapRealVector0.getLInfDistance(doubleArray0);
      assertFalse(double1 == double0);
      assertArrayEquals(new double[] {0.0, (-33.1), 0.0, 0.0, (-33.1)}, doubleArray0, 0.01);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.2, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(33.1, double1, 0.01D);
  }

  @Test
  public void test19()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      double double0 = openMapRealVector0.getLInfDistance((RealVector) arrayRealVector0);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 1739.70263170454;
      double double1 = 784.686;
      doubleArray0[2] = double1;
      doubleArray0[4] = double0;
      doubleArray0[5] = double1;
      doubleArray0[3] = doubleArray0[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[3]);
      assertArrayEquals(new double[] {0.0, 0.0, 784.686, 1739.70263170454, 1739.70263170454, 784.686, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.2222222222222222, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.projection(doubleArray0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertArrayEquals(new double[] {0.0, 0.0, 784.686, 1739.70263170454, 1739.70263170454, 784.686, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.2222222222222222, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0.4444444444444444, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector1.getDimension());
      assertNotNull(openMapRealVector1);
      
      double double2 = openMapRealVector0.getLInfDistance((RealVector) openMapRealVector1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertArrayEquals(new double[] {0.0, 0.0, 784.686, 1739.70263170454, 1739.70263170454, 784.686, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.2222222222222222, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0.4444444444444444, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(652.034454904248, double2, 0.01D);
  }

  @Test
  public void test21()  throws Throwable  {
      int int0 = 2877;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0, int0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(2877, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector((RealVector) openMapRealVector0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2877, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(2877, openMapRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      double double0 = openMapRealVector0.getL1Distance((RealVector) arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2877, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(2877, openMapRealVector0.getDimension());
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = (-33.1);
      doubleArray0[1] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-33.1), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.2, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.projection(doubleArray0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertArrayEquals(new double[] {0.0, (-33.1), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(0.2, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector1.getDimension());
      assertEquals(0.2, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector1);
      
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector0.mapLog10ToSelf();
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertArrayEquals(new double[] {0.0, (-33.1), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector2.getDimension());
      assertNotNull(openMapRealVector2);
      
      double double1 = openMapRealVector1.getL1Distance((RealVector) openMapRealVector2);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(double1 == double0);
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertArrayEquals(new double[] {0.0, (-33.1), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertEquals(0.2, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector2.getDimension());
      assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[20];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[3]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(20, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      double double0 = openMapRealVector0.getDistance(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(20, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test24()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      double double0 = openMapRealVector0.getDistance((RealVector) arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) int0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) int0);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.14285714285714285, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(doubleArray0[1]);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.14285714285714285, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(7, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector1);
      
      double double0 = openMapRealVector0.getDistance((RealVector) openMapRealVector1);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.14285714285714285, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(7, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(2.6457513110645907, double0, 0.01D);
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = 2349;
      int int1 = 471;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int1, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(2349, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf((double) int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertEquals(2349, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(2349, openMapRealVector1.getDimension());
      assertNotNull(openMapRealVector1);
      
      Integer integer0 = new Integer(int1);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertFalse(int1 == int0);
      assertEquals(471, (int)integer0);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.getSubVector((int) integer0, int1);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(int0 == int1);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertFalse(int1 == int0);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertEquals(2349, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(471, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(2349, openMapRealVector1.getDimension());
      assertNotNull(openMapRealVector2);
  }

  @Test
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[3]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply(doubleArray0);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test28()  throws Throwable  {
      double double0 = (-1.0293458369150676);
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = (Double) double0;
      doubleArray0[1] = (Double) double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(2.0586916738301353, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1.4557148429375728, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1.0293458369150676, arrayRealVector0.getLInfNorm(), 0.01D);
      assertNotNull(arrayRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply((RealVector) arrayRealVector0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(2.0586916738301353, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1.4557148429375728, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1.0293458369150676, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(2, openMapRealVector1.getDimension());
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = (-923);
      double[] doubleArray0 = new double[12];
      doubleArray0[6] = (double) int0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-923.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.08333333333333333, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(12, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide(doubleArray0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-923.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(12, openMapRealVector1.getDimension());
      assertEquals(0.08333333333333333, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(0.08333333333333333, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(12, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[3]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide((RealVector) openMapRealVector0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test31()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[7];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      double double0 = openMapRealVector0.dotProduct(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test32()  throws Throwable  {
      int int0 = 3;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(3, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append((RealVector) openMapRealVector0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(6, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test33()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertNotNull(arrayRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append((RealVector) arrayRealVector0);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(0, openMapRealVector1.getDimension());
      assertEquals(Double.NaN, openMapRealVector1.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[3]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(openMapRealVector0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(18, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test35()  throws Throwable  {
      Double[] doubleArray0 = new Double[10];
      double double0 = 0.0;
      Double double1 = new Double(double0);
      assertTrue(double1.equals((Object)double0));
      assertEquals(0.0, (double)double1, 0.01D);
      
      doubleArray0[0] = double1;
      double double2 = 1880.35004583;
      doubleArray0[1] = double1;
      doubleArray0[2] = double1;
      doubleArray0[3] = doubleArray0[1];
      double double3 = 4276.726563335196;
      Double double4 = new Double(double3);
      assertFalse(double4.equals((Object)double2));
      assertFalse(double4.equals((Object)double1));
      assertFalse(double4.equals((Object)double0));
      assertTrue(double4.equals((Object)double3));
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertNotSame(double4, double1);
      assertEquals(4276.726563335196, (double)double4, 0.01D);
      
      doubleArray0[4] = double4;
      doubleArray0[5] = doubleArray0[2];
      doubleArray0[6] = doubleArray0[1];
      doubleArray0[7] = doubleArray0[1];
      doubleArray0[8] = doubleArray0[1];
      doubleArray0[9] = doubleArray0[1];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(0.1, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      double[] doubleArray1 = new double[10];
      doubleArray1[2] = double2;
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.projection(doubleArray1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertArrayEquals(new double[] {0.0, 0.0, 1880.35004583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(0.1, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector1.getDimension());
      assertEquals(0.1, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector1);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.add(openMapRealVector0);
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertArrayEquals(new double[] {0.0, 0.0, 1880.35004583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(10, openMapRealVector2.getDimension());
      assertEquals(0.1, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(0.1, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector1.getDimension());
      assertEquals(0.1, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector2);
  }

  @Test
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 1.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(double0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector1);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.add(openMapRealVector0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector1.getDimension());
      assertEquals(10, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector2);
  }

  @Test
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[20];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[3]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(20, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.add((RealVector) openMapRealVector0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(20, openMapRealVector1.getDimension());
      assertEquals(20, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test38()  throws Throwable  {
      int int0 = 22;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(22, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector((RealVector) openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(22, openMapRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(22, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)openMapRealVector0.add((RealVector) arrayRealVector0);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(22, openMapRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(22, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(22, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertNotNull(arrayRealVector1);
  }

  @Test
  public void test39()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) int0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) int0);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.14285714285714285, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(7, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(7, openMapRealVector1.getDimension());
      assertEquals(0.14285714285714285, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(0.14285714285714285, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(7, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[20];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[3]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(20, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      int int0 = 0;
      openMapRealVector0.setSubVector(int0, (RealVector) openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(20, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
  }

  @Test
  public void test41()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      double double0 = Double.NEGATIVE_INFINITY;
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(double0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test42()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      double[] doubleArray0 = openMapRealVector0.toArray();
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(doubleArray0);
  }

  @Test
  public void test43()  throws Throwable  {
      Double[] doubleArray0 = new Double[10];
      double double0 = 0.0;
      Double double1 = new Double(double0);
      assertTrue(double1.equals((Object)double0));
      assertEquals(0.0, (double)double1, 0.01D);
      
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      doubleArray0[2] = double1;
      doubleArray0[3] = doubleArray0[1];
      doubleArray0[4] = doubleArray0[3];
      doubleArray0[5] = double1;
      doubleArray0[6] = doubleArray0[2];
      doubleArray0[7] = double1;
      doubleArray0[8] = doubleArray0[1];
      doubleArray0[9] = doubleArray0[2];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      // Undeclared exception!
      try {
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.unitVector();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // cannot normalize a zero norm vector
         //
      }
  }

  @Test
  public void test44()  throws Throwable  {
      int int0 = 4;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      double double0 = openMapRealVector0.getSparcity();
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[3]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      ArrayRealVector arrayRealVector0 = (ArrayRealVector)openMapRealVector0.add(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertNotNull(arrayRealVector0);
  }

  @Test
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(12, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector0.new OpenMapSparseIterator();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(12, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector_OpenMapSparseIterator0);
      
      // Undeclared exception!
      try {
        openMapRealVector_OpenMapSparseIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported
         //
      }
  }
}
