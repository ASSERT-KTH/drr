/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:34:26 GMT 2014
 */

package org.apache.commons.math.linear;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math.exception.NumberIsTooLargeException;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.RealMatrix;



import org.junit.runner.RunWith;


public class OpenMapRealMatrixEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      int int0 = 260;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(int0, int0);
      assertEquals(260, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(260, openMapRealMatrix0.getColumnDimension());
      assertNotNull(openMapRealMatrix0);
      
      int int1 = 0;
      openMapRealMatrix0.multiplyEntry(int1, int1, (double) int0);
      assertEquals(260, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(260, openMapRealMatrix0.getColumnDimension());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 260;
      int int1 = 274;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(int1, int0);
      assertEquals(274, openMapRealMatrix0.getRowDimension());
      assertEquals(260, openMapRealMatrix0.getColumnDimension());
      assertEquals(false, openMapRealMatrix0.isSquare());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(openMapRealMatrix0);
      
      int int2 = 0;
      openMapRealMatrix0.addToEntry(int0, int2, (double) int2);
      assertEquals(274, openMapRealMatrix0.getRowDimension());
      assertEquals(260, openMapRealMatrix0.getColumnDimension());
      assertEquals(false, openMapRealMatrix0.isSquare());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 260;
      int int1 = 274;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(int1, int0);
      assertEquals(260, openMapRealMatrix0.getColumnDimension());
      assertEquals(false, openMapRealMatrix0.isSquare());
      assertEquals(274, openMapRealMatrix0.getRowDimension());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(openMapRealMatrix0);
      
      int int2 = 5;
      openMapRealMatrix0.addToEntry(int0, int2, (double) int2);
      assertEquals(260, openMapRealMatrix0.getColumnDimension());
      assertEquals(false, openMapRealMatrix0.isSquare());
      assertEquals(274, openMapRealMatrix0.getRowDimension());
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 267;
      int int1 = 1887;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(int1, int1);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(1887, openMapRealMatrix0.getColumnDimension());
      assertEquals(1887, openMapRealMatrix0.getRowDimension());
      assertFalse(int1 == int0);
      assertNotNull(openMapRealMatrix0);
      
      double double0 = 1.2246467991473532E-16;
      openMapRealMatrix0.setEntry(int0, int0, double0);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(1887, openMapRealMatrix0.getColumnDimension());
      assertEquals(1887, openMapRealMatrix0.getRowDimension());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      OpenMapRealMatrix openMapRealMatrix1 = (OpenMapRealMatrix)openMapRealMatrix0.power(int0);
      assertEquals(1887, openMapRealMatrix1.getColumnDimension());
      assertEquals(1887, openMapRealMatrix1.getRowDimension());
      assertEquals(true, openMapRealMatrix1.isSquare());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(1887, openMapRealMatrix0.getColumnDimension());
      assertEquals(1887, openMapRealMatrix0.getRowDimension());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(openMapRealMatrix1.equals((Object)openMapRealMatrix0));
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix1));
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertNotNull(openMapRealMatrix1);
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 267;
      int int1 = 1887;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(int1, int1);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(1887, openMapRealMatrix0.getRowDimension());
      assertEquals(1887, openMapRealMatrix0.getColumnDimension());
      assertFalse(int1 == int0);
      assertNotNull(openMapRealMatrix0);
      
      openMapRealMatrix0.setEntry(int0, int0, (double) int1);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(1887, openMapRealMatrix0.getRowDimension());
      assertEquals(1887, openMapRealMatrix0.getColumnDimension());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.subtract(openMapRealMatrix0);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(1887, openMapRealMatrix0.getRowDimension());
      assertEquals(1887, openMapRealMatrix0.getColumnDimension());
      assertEquals(1887, openMapRealMatrix1.getColumnDimension());
      assertEquals(1887, openMapRealMatrix1.getRowDimension());
      assertEquals(true, openMapRealMatrix1.isSquare());
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix1));
      assertFalse(int1 == int0);
      assertFalse(openMapRealMatrix1.equals((Object)openMapRealMatrix0));
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      assertNotNull(openMapRealMatrix1);
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 8388680;
      OpenMapRealMatrix openMapRealMatrix0 = null;
      try {
        openMapRealMatrix0 = new OpenMapRealMatrix(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 70,369,952,142,400 is larger than, or equal to, the maximum (2,147,483,647)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 27;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(int0, int0);
      assertEquals(27, openMapRealMatrix0.getColumnDimension());
      assertEquals(27, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertNotNull(openMapRealMatrix0);
      
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.subtract((RealMatrix) openMapRealMatrix0);
      assertEquals(true, openMapRealMatrix1.isSquare());
      assertEquals(27, openMapRealMatrix1.getColumnDimension());
      assertEquals(27, openMapRealMatrix1.getRowDimension());
      assertEquals(27, openMapRealMatrix0.getColumnDimension());
      assertEquals(27, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertTrue(openMapRealMatrix1.equals((Object)openMapRealMatrix0));
      assertTrue(openMapRealMatrix0.equals((Object)openMapRealMatrix1));
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertNotNull(openMapRealMatrix1);
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 267;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(int0, int0);
      assertEquals(267, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(267, openMapRealMatrix0.getColumnDimension());
      assertNotNull(openMapRealMatrix0);
      
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.add(openMapRealMatrix0);
      assertEquals(267, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(267, openMapRealMatrix0.getColumnDimension());
      assertEquals(267, openMapRealMatrix1.getRowDimension());
      assertEquals(267, openMapRealMatrix1.getColumnDimension());
      assertEquals(true, openMapRealMatrix1.isSquare());
      assertTrue(openMapRealMatrix0.equals((Object)openMapRealMatrix1));
      assertTrue(openMapRealMatrix1.equals((Object)openMapRealMatrix0));
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      assertNotNull(openMapRealMatrix1);
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 267;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(int0, int0);
      assertEquals(267, openMapRealMatrix0.getRowDimension());
      assertEquals(267, openMapRealMatrix0.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertNotNull(openMapRealMatrix0);
      
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.createMatrix(int0, int0);
      assertEquals(true, openMapRealMatrix1.isSquare());
      assertEquals(267, openMapRealMatrix1.getRowDimension());
      assertEquals(267, openMapRealMatrix1.getColumnDimension());
      assertEquals(267, openMapRealMatrix0.getRowDimension());
      assertEquals(267, openMapRealMatrix0.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertTrue(openMapRealMatrix1.equals((Object)openMapRealMatrix0));
      assertTrue(openMapRealMatrix0.equals((Object)openMapRealMatrix1));
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertNotNull(openMapRealMatrix1);
  }
}
