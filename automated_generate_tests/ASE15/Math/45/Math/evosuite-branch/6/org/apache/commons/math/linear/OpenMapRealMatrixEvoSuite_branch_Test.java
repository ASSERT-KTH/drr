/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:55:37 GMT 2014
 */

package org.apache.commons.math.linear;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math.exception.NumberIsTooLargeException;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.RealMatrix;



import org.junit.runner.RunWith;


public class OpenMapRealMatrixEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      int int0 = 2474;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(int0, int0);
      assertEquals(2474, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(2474, openMapRealMatrix0.getColumnDimension());
      assertNotNull(openMapRealMatrix0);
      
      int int1 = 0;
      openMapRealMatrix0.multiplyEntry(int1, int1, (double) int0);
      assertEquals(2474, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(2474, openMapRealMatrix0.getColumnDimension());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 1;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(int0, int0);
      assertEquals(1, openMapRealMatrix0.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(1, openMapRealMatrix0.getRowDimension());
      assertNotNull(openMapRealMatrix0);
      
      int int1 = 0;
      openMapRealMatrix0.addToEntry(int1, int1, (double) int1);
      assertEquals(1, openMapRealMatrix0.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(1, openMapRealMatrix0.getRowDimension());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 1;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(int0, int0);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(1, openMapRealMatrix0.getColumnDimension());
      assertEquals(1, openMapRealMatrix0.getRowDimension());
      assertNotNull(openMapRealMatrix0);
      
      OpenMapRealMatrix openMapRealMatrix1 = (OpenMapRealMatrix)openMapRealMatrix0.add((RealMatrix) openMapRealMatrix0);
      assertEquals(1, openMapRealMatrix1.getColumnDimension());
      assertEquals(true, openMapRealMatrix1.isSquare());
      assertEquals(1, openMapRealMatrix1.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(1, openMapRealMatrix0.getColumnDimension());
      assertEquals(1, openMapRealMatrix0.getRowDimension());
      assertNotNull(openMapRealMatrix1);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertTrue(openMapRealMatrix1.equals((Object)openMapRealMatrix0));
      assertTrue(openMapRealMatrix0.equals((Object)openMapRealMatrix1));
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 1;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(int0, int0);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(1, openMapRealMatrix0.getColumnDimension());
      assertEquals(1, openMapRealMatrix0.getRowDimension());
      assertNotNull(openMapRealMatrix0);
      
      OpenMapRealMatrix openMapRealMatrix1 = (OpenMapRealMatrix)openMapRealMatrix0.preMultiply((RealMatrix) openMapRealMatrix0);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(1, openMapRealMatrix0.getColumnDimension());
      assertEquals(1, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix1.isSquare());
      assertEquals(1, openMapRealMatrix1.getColumnDimension());
      assertEquals(1, openMapRealMatrix1.getRowDimension());
      assertNotNull(openMapRealMatrix1);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      assertTrue(openMapRealMatrix0.equals((Object)openMapRealMatrix1));
      assertTrue(openMapRealMatrix1.equals((Object)openMapRealMatrix0));
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 2474;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(int0, int0);
      assertEquals(2474, openMapRealMatrix0.getColumnDimension());
      assertEquals(2474, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertNotNull(openMapRealMatrix0);
      
      int int1 = 0;
      double double0 = (-2059.6);
      openMapRealMatrix0.addToEntry(int1, int1, double0);
      assertEquals(2474, openMapRealMatrix0.getColumnDimension());
      assertEquals(2474, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.add(openMapRealMatrix0);
      assertEquals(2474, openMapRealMatrix1.getColumnDimension());
      assertEquals(2474, openMapRealMatrix1.getRowDimension());
      assertEquals(true, openMapRealMatrix1.isSquare());
      assertEquals(2474, openMapRealMatrix0.getColumnDimension());
      assertEquals(2474, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertNotNull(openMapRealMatrix1);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertFalse(openMapRealMatrix1.equals((Object)openMapRealMatrix0));
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix1));
      assertFalse(int0 == int1);
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      OpenMapRealMatrix openMapRealMatrix0 = null;
      try {
        openMapRealMatrix0 = new OpenMapRealMatrix(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4,611,686,014,132,420,609 is larger than, or equal to, the maximum (2,147,483,647)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 2474;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(int0, int0);
      assertEquals(2474, openMapRealMatrix0.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(2474, openMapRealMatrix0.getRowDimension());
      assertNotNull(openMapRealMatrix0);
      
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.copy();
      assertEquals(2474, openMapRealMatrix1.getColumnDimension());
      assertEquals(2474, openMapRealMatrix1.getRowDimension());
      assertEquals(true, openMapRealMatrix1.isSquare());
      assertEquals(2474, openMapRealMatrix0.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(2474, openMapRealMatrix0.getRowDimension());
      assertNotNull(openMapRealMatrix1);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertTrue(openMapRealMatrix1.equals((Object)openMapRealMatrix0));
      assertTrue(openMapRealMatrix0.equals((Object)openMapRealMatrix1));
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 1;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(int0, int0);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(1, openMapRealMatrix0.getColumnDimension());
      assertEquals(1, openMapRealMatrix0.getRowDimension());
      assertNotNull(openMapRealMatrix0);
      
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.subtract((RealMatrix) openMapRealMatrix0);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(1, openMapRealMatrix0.getColumnDimension());
      assertEquals(1, openMapRealMatrix0.getRowDimension());
      assertEquals(1, openMapRealMatrix1.getRowDimension());
      assertEquals(1, openMapRealMatrix1.getColumnDimension());
      assertEquals(true, openMapRealMatrix1.isSquare());
      assertNotNull(openMapRealMatrix1);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      assertTrue(openMapRealMatrix0.equals((Object)openMapRealMatrix1));
      assertTrue(openMapRealMatrix1.equals((Object)openMapRealMatrix0));
  }
}
