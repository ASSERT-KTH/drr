/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:07:31 GMT 2014
 */

package org.apache.commons.math.linear;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.InvalidMatrixException;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealMatrixImpl;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class EigenDecompositionImplEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 3989.068303909974;
      doubleArray0[0] = double0;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray0[0]);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {3989.068303909974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(decompositionSolver0);
      assertArrayEquals(new double[] {3989.068303909974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(false, decompositionSolver0.isNonSingular());
  }

  @Test
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 3989.068303909974;
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[5] = double0;
      double double1 = 0.01093203586361386;
      doubleArray0[6] = double1;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[2] = doubleArray0[2];
      doubleArray1[3] = doubleArray0[6];
      doubleArray1[4] = double0;
      doubleArray1[5] = doubleArray0[0];
      doubleArray1[6] = double1;
      doubleArray1[7] = doubleArray0[6];
      doubleArray1[8] = double1;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[3]);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 3989.068303909974, 0.01093203586361386, 3989.068303909974, 3989.068303909974, 0.01093203586361386, 0.01093203586361386, 0.01093203586361386}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3989.068303909974, 3989.068303909974, 3989.068303909974, 0.0, 0.0, 3989.068303909974, 0.01093203586361386, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(8.122612646991068E25, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(decompositionSolver0);
      assertArrayEquals(new double[] {0.0, 0.0, 3989.068303909974, 0.01093203586361386, 3989.068303909974, 3989.068303909974, 0.01093203586361386, 0.01093203586361386, 0.01093203586361386}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3989.068303909974, 3989.068303909974, 3989.068303909974, 0.0, 0.0, 3989.068303909974, 0.01093203586361386, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(8.122612646991068E25, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(true, decompositionSolver0.isNonSingular());
  }

  @Test
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 3989.068303909974;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[5] = double0;
      doubleArray0[4] = doubleArray0[3];
      double double1 = 0.01093203586361386;
      doubleArray0[6] = double1;
      double double2 = 396.0;
      double double3 = (-3057.8);
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[2] = double3;
      doubleArray1[3] = double3;
      doubleArray1[4] = double0;
      doubleArray1[5] = double2;
      doubleArray1[6] = double1;
      doubleArray1[7] = doubleArray0[6];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[3]);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, (-3057.8), (-3057.8), 3989.068303909974, 396.0, 0.01093203586361386, 0.01093203586361386, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 3989.068303909974, 3989.068303909974, 3989.068303909974, 3989.068303909974, 0.01093203586361386, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
  }

  @Test
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 3980.5763000963875;
      doubleArray0[3] = double0;
      doubleArray0[5] = double0;
      doubleArray0[4] = doubleArray0[3];
      double double1 = 0.01093;
      doubleArray0[6] = double1;
      double double2 = 396.0;
      doubleArray0[8] = double2;
      double double3 = (-3057.8);
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[2] = double1;
      doubleArray1[3] = double3;
      doubleArray1[4] = double0;
      double double4 = (-1442.149);
      doubleArray1[5] = double4;
      doubleArray1[6] = double1;
      doubleArray1[7] = doubleArray0[6];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[3]);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 3980.5763000963875, 3980.5763000963875, 3980.5763000963875, 0.01093, 0.0, 396.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.01093, (-3057.8), 3980.5763000963875, (-1442.149), 0.01093, 0.01093, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
  }

  @Test
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 3989.068303909974;
      doubleArray0[3] = double0;
      double double1 = 2648.8426785227757;
      double double2 = 1036.42;
      double double3 = (-3057.8);
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[1] = double0;
      doubleArray1[2] = double3;
      doubleArray1[3] = double3;
      doubleArray1[4] = double1;
      doubleArray1[5] = double2;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[3]);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 3989.068303909974, (-3057.8), (-3057.8), 2648.8426785227757, 1036.42, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 3989.068303909974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
  }

  @Test
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 3989.068303909974;
      doubleArray0[3] = double0;
      double double1 = 2648.8426785227757;
      doubleArray0[2] = double1;
      double double2 = 54.0;
      double double3 = 1036.42;
      doubleArray0[5] = double3;
      doubleArray0[0] = double2;
      double double4 = (-3057.8);
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[0] = doubleArray0[5];
      doubleArray1[1] = double0;
      doubleArray1[2] = double4;
      doubleArray1[3] = double4;
      doubleArray1[4] = double1;
      double double5 = (-1442.149);
      doubleArray1[5] = double5;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[3]);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {54.0, 0.0, 2648.8426785227757, 3989.068303909974, 0.0, 1036.42, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1036.42, 3989.068303909974, (-3057.8), (-3057.8), 2648.8426785227757, (-1442.149), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
  }

  @Test
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 3989.068303909974;
      doubleArray0[0] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      double double1 = 396.0;
      double double2 = (-3057.8);
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[0] = double2;
      doubleArray1[1] = double1;
      doubleArray1[2] = double2;
      doubleArray1[3] = double2;
      doubleArray1[4] = double0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[3]);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {(-3057.8), 396.0, (-3057.8), (-3057.8), 3989.068303909974, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3989.068303909974, 0.0, 3989.068303909974, 3989.068303909974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
  }

  @Test
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = (-5.081568613411374);
      double double1 = 1.0;
      doubleArray0[1] = double1;
      double double2 = 2457.82336261;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[0] = double0;
      doubleArray1[1] = double1;
      doubleArray1[2] = double2;
      doubleArray1[3] = double0;
      doubleArray1[4] = double0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[0]);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-5.081568613411374), 1.0, 2457.82336261, (-5.081568613411374), (-5.081568613411374)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals((-4.028028289467428E9), eigenDecompositionImpl0.getDeterminant(), 0.01D);
  }

  @Test
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 3989.068303909974;
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[3] = double0;
      double double1 = 1036.42;
      doubleArray0[5] = double1;
      double double2 = 396.0;
      double double3 = (-3048.001628314404);
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[0] = doubleArray0[5];
      doubleArray1[1] = double2;
      doubleArray1[2] = double3;
      doubleArray1[3] = double3;
      doubleArray1[4] = double0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[3]);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {1036.42, 396.0, (-3048.001628314404), (-3048.001628314404), 3989.068303909974, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3989.068303909974, 3989.068303909974, 0.0, 3989.068303909974, 0.0, 1036.42, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
  }

  @Test
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 2.2250738585072014E-308;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[0] = double0;
      doubleArray1[1] = double0;
      doubleArray1[2] = double0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[0]);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {2.2250738585072014E-308, 2.2250738585072014E-308, 2.2250738585072014E-308, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 3980.5763000963875;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[5] = double0;
      double double1 = 0.01093;
      doubleArray0[6] = double1;
      double double2 = (-3057.8);
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[1] = double0;
      doubleArray1[5] = double2;
      doubleArray1[6] = doubleArray0[3];
      doubleArray1[3] = double2;
      doubleArray1[7] = doubleArray0[6];
      doubleArray1[8] = double1;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[3]);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 3980.5763000963875, 0.0, (-3057.8), 0.0, (-3057.8), 3980.5763000963875, 0.01093, 0.01093}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 3980.5763000963875, 3980.5763000963875, 0.0, 3980.5763000963875, 0.01093, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 3989.068303909974;
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = double0;
      doubleArray0[6] = double0;
      doubleArray0[8] = double0;
      double double1 = 0.01093203586361386;
      double double2 = (-3057.8);
      doubleArray0[9] = doubleArray0[0];
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[2] = double2;
      doubleArray1[3] = double2;
      doubleArray1[4] = double0;
      doubleArray1[5] = doubleArray0[9];
      doubleArray1[6] = double1;
      doubleArray1[7] = doubleArray0[6];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[3]);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, (-3057.8), (-3057.8), 3989.068303909974, 3989.068303909974, 0.01093203586361386, 3989.068303909974, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3989.068303909974, 3989.068303909974, 3989.068303909974, 0.0, 0.0, 0.0, 3989.068303909974, 0.0, 3989.068303909974, 3989.068303909974}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2.9223918492714777E37, eigenDecompositionImpl0.getDeterminant(), 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 3989.068303909974;
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      double double1 = 0.01093203586361386;
      doubleArray0[6] = double1;
      double double2 = (-3057.8);
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[2] = double2;
      doubleArray1[3] = double2;
      doubleArray1[4] = double0;
      doubleArray1[5] = doubleArray1[2];
      doubleArray1[6] = double1;
      doubleArray1[7] = doubleArray0[6];
      doubleArray1[8] = double1;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[3]);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, (-3057.8), (-3057.8), 3989.068303909974, (-3057.8), 0.01093203586361386, 0.01093203586361386, 0.01093203586361386}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3989.068303909974, 3989.068303909974, 3989.068303909974, 0.0, 0.0, 0.0, 0.01093203586361386, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(8.297463948943221E38, eigenDecompositionImpl0.getDeterminant(), 0.01D);
  }

  @Test
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      double double0 = 4581.416887454701;
      doubleArray0[0] = double0;
      double double1 = (-1085.548);
      doubleArray0[1] = double0;
      doubleArray0[5] = double1;
      double double2 = 715.8;
      doubleArray0[6] = double2;
      doubleArray0[7] = double2;
      doubleArray0[8] = doubleArray0[7];
      doubleArray0[9] = double1;
      doubleArray0[10] = double0;
      doubleArray0[11] = double1;
      doubleArray0[12] = double0;
      doubleArray0[13] = double2;
      doubleArray0[15] = double0;
      doubleArray0[16] = double2;
      doubleArray0[17] = doubleArray0[1];
      double double3 = 9.0;
      doubleArray0[3] = double3;
      doubleArray0[14] = doubleArray0[3];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[3]);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {4581.416887454701, 4581.416887454701, 0.0, 9.0, 0.0, (-1085.548), 715.8, 715.8, 715.8, (-1085.548), 4581.416887454701, (-1085.548), 4581.416887454701, 715.8, 9.0, 4581.416887454701, 715.8, 4581.416887454701}, doubleArray0, 0.01);
      assertEquals(18, openMapRealVector0.getDimension());
      assertEquals(9.0, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(0.8888888888888888, openMapRealVector0.getSparcity(), 0.01D);
      
      OpenMapRealMatrix openMapRealMatrix0 = (OpenMapRealMatrix)openMapRealVector0.outerProduct(doubleArray0);
      assertNotNull(openMapRealMatrix0);
      assertArrayEquals(new double[] {4581.416887454701, 4581.416887454701, 0.0, 9.0, 0.0, (-1085.548), 715.8, 715.8, 715.8, (-1085.548), 4581.416887454701, (-1085.548), 4581.416887454701, 715.8, 9.0, 4581.416887454701, 715.8, 4581.416887454701}, doubleArray0, 0.01);
      assertEquals(18, openMapRealVector0.getDimension());
      assertEquals(9.0, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(0.8888888888888888, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(18, openMapRealMatrix0.getRowDimension());
      assertEquals(18, openMapRealMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) openMapRealMatrix0, doubleArray0[5]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {4581.416887454701, 4581.416887454701, 0.0, 9.0, 0.0, (-1085.548), 715.8, 715.8, 715.8, (-1085.548), 4581.416887454701, (-1085.548), 4581.416887454701, 715.8, 9.0, 4581.416887454701, 715.8, 4581.416887454701}, doubleArray0, 0.01);
      assertEquals(18, openMapRealVector0.getDimension());
      assertEquals(9.0, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(0.8888888888888888, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(18, openMapRealMatrix0.getRowDimension());
      assertEquals(18, openMapRealMatrix0.getColumnDimension());
  }

  @Test
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      double double0 = 4581.416887454701;
      doubleArray0[0] = double0;
      double double1 = (-1085.548);
      doubleArray0[1] = double0;
      doubleArray0[3] = double1;
      doubleArray0[5] = double1;
      double double2 = 715.8;
      doubleArray0[6] = double2;
      doubleArray0[7] = double2;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[3]);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {4581.416887454701, 4581.416887454701, 0.0, (-1085.548), 0.0, (-1085.548), 715.8, 715.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals((-1085.548), openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(18, openMapRealVector0.getDimension());
      
      OpenMapRealMatrix openMapRealMatrix0 = (OpenMapRealMatrix)openMapRealVector0.outerProduct(doubleArray0);
      assertNotNull(openMapRealMatrix0);
      assertArrayEquals(new double[] {4581.416887454701, 4581.416887454701, 0.0, (-1085.548), 0.0, (-1085.548), 715.8, 715.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(18, openMapRealMatrix0.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(18, openMapRealMatrix0.getRowDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals((-1085.548), openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(18, openMapRealVector0.getDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) openMapRealMatrix0, doubleArray0[5]);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {4581.416887454701, 4581.416887454701, 0.0, (-1085.548), 0.0, (-1085.548), 715.8, 715.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(18, openMapRealMatrix0.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(18, openMapRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals((-1085.548), openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(18, openMapRealVector0.getDimension());
  }

  @Test
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = (-3808.865970076362);
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[2] = double0;
      doubleArray1[3] = double0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[2]);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, (-3808.865970076362), (-3808.865970076362), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
  }

  @Test
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = Double.POSITIVE_INFINITY;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      double double1 = (-818.51266);
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[3] = double1;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[3]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot solve degree 3 equation
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 3989.068303909974;
      doubleArray0[8] = double0;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[0] = doubleArray0[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, double0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {3989.068303909974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3989.068303909974, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 115;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(int0, int0);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(115, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(115, array2DRowRealMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, (double) int0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(115, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(115, array2DRowRealMatrix0.getRowDimension());
      
      BlockRealMatrix blockRealMatrix0 = (BlockRealMatrix)eigenDecompositionImpl0.getVT();
      assertNotNull(blockRealMatrix0);
      assertEquals(Double.NaN, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(115, blockRealMatrix0.getRowDimension());
      assertEquals(115, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(115, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(115, array2DRowRealMatrix0.getRowDimension());
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertNotNull(decompositionSolver0);
      assertEquals(false, decompositionSolver0.isNonSingular());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(115, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(115, array2DRowRealMatrix0.getRowDimension());
  }

  @Test
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray0[0]);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
  }

  @Test
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 1287.0669358813407;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, double0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      
      int int0 = 1667;
      try {
        RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1667
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[0]);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(decompositionSolver0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(false, decompositionSolver0.isNonSingular());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      
      int int0 = 1667;
      try {
        RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1667
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      int int0 = 115;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(int0, int0);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(115, array2DRowRealMatrix0.getRowDimension());
      assertEquals(115, array2DRowRealMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, (double) int0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(115, array2DRowRealMatrix0.getRowDimension());
      assertEquals(115, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertNotNull(decompositionSolver0);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(115, array2DRowRealMatrix0.getRowDimension());
      assertEquals(115, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(false, decompositionSolver0.isNonSingular());
      
      BlockRealMatrix blockRealMatrix0 = (BlockRealMatrix)eigenDecompositionImpl0.getVT();
      assertNotNull(blockRealMatrix0);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(115, array2DRowRealMatrix0.getRowDimension());
      assertEquals(115, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(115, blockRealMatrix0.getColumnDimension());
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(115, blockRealMatrix0.getRowDimension());
      assertEquals(Double.NaN, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
  }

  @Test
  public void test23()  throws Throwable  {
      int int0 = 115;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(int0, int0);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(115, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(115, array2DRowRealMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, (double) int0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(115, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(115, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      
      BlockRealMatrix blockRealMatrix0 = (BlockRealMatrix)eigenDecompositionImpl0.getVT();
      assertNotNull(blockRealMatrix0);
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(115, blockRealMatrix0.getColumnDimension());
      assertEquals(Double.NaN, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(115, blockRealMatrix0.getRowDimension());
      assertEquals(115, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(115, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      
      BlockRealMatrix blockRealMatrix1 = (BlockRealMatrix)eigenDecompositionImpl0.getVT();
      assertNotNull(blockRealMatrix1);
      assertSame(blockRealMatrix1, blockRealMatrix0);
      assertEquals(115, blockRealMatrix1.getColumnDimension());
      assertEquals(115, blockRealMatrix1.getRowDimension());
      assertEquals(Double.NaN, blockRealMatrix1.getFrobeniusNorm(), 0.01D);
      assertEquals(true, blockRealMatrix1.isSquare());
      assertEquals(115, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(115, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
  }

  @Test
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 1287.0669358813407;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, double0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(5, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(5, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(array2DRowRealMatrix1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(5, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(5, array2DRowRealMatrix1.getRowDimension());
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = 115;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(int0, int0);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(115, array2DRowRealMatrix0.getRowDimension());
      assertEquals(115, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, (double) int0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(115, array2DRowRealMatrix0.getRowDimension());
      assertEquals(115, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      
      BlockRealMatrix blockRealMatrix0 = (BlockRealMatrix)eigenDecompositionImpl0.getVT();
      assertNotNull(blockRealMatrix0);
      assertEquals(115, blockRealMatrix0.getColumnDimension());
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(115, blockRealMatrix0.getRowDimension());
      assertEquals(Double.NaN, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(115, array2DRowRealMatrix0.getRowDimension());
      assertEquals(115, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      
      BlockRealMatrix blockRealMatrix1 = (BlockRealMatrix)eigenDecompositionImpl0.getV();
      assertFalse(blockRealMatrix1.equals((Object)blockRealMatrix0));
      assertNotNull(blockRealMatrix1);
      assertNotSame(blockRealMatrix1, blockRealMatrix0);
      assertEquals(115, array2DRowRealMatrix0.getRowDimension());
      assertEquals(115, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(Double.NaN, blockRealMatrix1.getFrobeniusNorm(), 0.01D);
      assertEquals(115, blockRealMatrix1.getColumnDimension());
      assertEquals(true, blockRealMatrix1.isSquare());
      assertEquals(115, blockRealMatrix1.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = 115;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(int0, int0);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(115, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(115, array2DRowRealMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, (double) int0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(115, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(115, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      
      BlockRealMatrix blockRealMatrix0 = (BlockRealMatrix)eigenDecompositionImpl0.getV();
      assertNotNull(blockRealMatrix0);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(115, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(115, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(115, blockRealMatrix0.getColumnDimension());
      assertEquals(115, blockRealMatrix0.getRowDimension());
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(Double.NaN, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      
      BlockRealMatrix blockRealMatrix1 = (BlockRealMatrix)eigenDecompositionImpl0.getV();
      assertNotNull(blockRealMatrix1);
      assertSame(blockRealMatrix1, blockRealMatrix0);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(115, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(115, array2DRowRealMatrix0.getRowDimension());
      assertEquals(Double.NaN, blockRealMatrix1.getFrobeniusNorm(), 0.01D);
      assertEquals(115, blockRealMatrix1.getColumnDimension());
      assertEquals(true, blockRealMatrix1.isSquare());
      assertEquals(115, blockRealMatrix1.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
  }

  @Test
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 0.8253086992791177;
      doubleArray0[4] = double0;
      double[][] doubleArray1 = new double[5][2];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray0;
      assertNotNull(doubleArray1[3]);
      
      doubleArray1[4] = doubleArray0;
      assertNotNull(doubleArray1[4]);
      
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray1);
      assertNotNull(realMatrixImpl0);
      assertEquals(5, realMatrixImpl0.getRowDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(6, realMatrixImpl0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) realMatrixImpl0, doubleArray0[2]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // eigen decomposition of assymetric matrices not supported yet
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[0]);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      
      int int0 = 2151;
      try {
        double double0 = eigenDecompositionImpl0.getRealEigenvalue(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2151
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[0]);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      
      double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues();
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
  }

  @Test
  public void test30()  throws Throwable  {
      int int0 = 115;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(int0, int0);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(115, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(115, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, (double) int0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(115, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(115, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      
      try {
        double double0 = eigenDecompositionImpl0.getImagEigenvalue(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 115
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 1287.0669358813407;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, double0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      
      double[] doubleArray2 = eigenDecompositionImpl0.getImagEigenvalues();
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
  }
}
