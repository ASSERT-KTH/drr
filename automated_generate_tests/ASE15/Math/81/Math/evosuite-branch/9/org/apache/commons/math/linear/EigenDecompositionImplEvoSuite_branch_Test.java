/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:53:44 GMT 2014
 */

package org.apache.commons.math.linear;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.InvalidMatrixException;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealMatrixImpl;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class EigenDecompositionImplEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 17.74815893201932;
      doubleArray0[5] = double0;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[1]);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 17.74815893201932, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertNotNull(array2DRowRealMatrix0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(8, array2DRowRealMatrix0.getColumnDimension());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 17.74815893201932, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      double double0 = (-892.74931935348);
      doubleArray0[7] = double0;
      double double1 = 0.08325;
      doubleArray0[10] = doubleArray0[7];
      doubleArray0[11] = double1;
      doubleArray0[12] = double1;
      double double2 = 433.82653544;
      doubleArray0[13] = double2;
      doubleArray0[15] = double1;
      doubleArray0[16] = double2;
      doubleArray0[1] = doubleArray0[16];
      doubleArray0[2] = doubleArray0[15];
      doubleArray0[3] = doubleArray0[16];
      double double3 = (-296.700911614);
      doubleArray0[5] = double3;
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1.421562791329792E7, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1560.4025136145247, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(3817.8386920809608, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(17, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 433.82653544, 0.08325, 433.82653544, 0.0, (-296.700911614), 0.0, (-892.74931935348), 0.0, 0.0, (-892.74931935348), 0.08325, 0.08325, 433.82653544, 0.0, 0.08325, 433.82653544}, doubleArray0, 0.01);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1.421562791329792E7, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1560.4025136145247, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(3817.8386920809608, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(17, arrayRealVector0.getDimension());
      assertEquals(17, array2DRowRealMatrix0.getRowDimension());
      assertEquals(17, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertArrayEquals(new double[] {0.0, 433.82653544, 0.08325, 433.82653544, 0.0, (-296.700911614), 0.0, (-892.74931935348), 0.0, 0.0, (-892.74931935348), 0.08325, 0.08325, 433.82653544, 0.0, 0.08325, 433.82653544}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, double3);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1.421562791329792E7, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1560.4025136145247, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(3817.8386920809608, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(17, arrayRealVector0.getDimension());
      assertEquals(17, array2DRowRealMatrix0.getRowDimension());
      assertEquals(17, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0, 433.82653544, 0.08325, 433.82653544, 0.0, (-296.700911614), 0.0, (-892.74931935348), 0.0, 0.0, (-892.74931935348), 0.08325, 0.08325, 433.82653544, 0.0, 0.08325, 433.82653544}, doubleArray0, 0.01);
  }

  @Test
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[27];
      double double0 = 710.07534;
      doubleArray0[0] = double0;
      doubleArray0[5] = double0;
      double double1 = (-892.74931935348);
      doubleArray0[7] = double0;
      doubleArray0[8] = double0;
      doubleArray0[9] = double1;
      double double2 = 0.08325;
      doubleArray0[10] = double2;
      doubleArray0[11] = double2;
      double double3 = 433.82653544;
      doubleArray0[13] = double3;
      doubleArray0[14] = double0;
      doubleArray0[15] = double2;
      double double4 = 1.0E-12;
      doubleArray0[1] = double4;
      double double5 = 1835.09134821;
      doubleArray0[2] = double5;
      double double6 = (-440.1086);
      doubleArray0[4] = double6;
      double double7 = (-296.700911614);
      doubleArray0[5] = double7;
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(5.461389863955727E10, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2579.015713751248, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(6739.02782461748, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(27, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {710.07534, 1.0E-12, 1835.09134821, 0.0, (-440.1086), (-296.700911614), 0.0, 710.07534, 710.07534, (-892.74931935348), 0.08325, 0.08325, 0.0, 433.82653544, 710.07534, 0.08325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(5.461389863955727E10, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2579.015713751248, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(6739.02782461748, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(27, arrayRealVector0.getDimension());
      assertEquals(27, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(27, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertArrayEquals(new double[] {710.07534, 1.0E-12, 1835.09134821, 0.0, (-440.1086), (-296.700911614), 0.0, 710.07534, 710.07534, (-892.74931935348), 0.08325, 0.08325, 0.0, 433.82653544, 710.07534, 0.08325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, doubleArray0[9]);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(5.461389863955727E10, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2579.015713751248, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(6739.02782461748, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(27, arrayRealVector0.getDimension());
      assertEquals(27, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(27, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertArrayEquals(new double[] {710.07534, 1.0E-12, 1835.09134821, 0.0, (-440.1086), (-296.700911614), 0.0, 710.07534, 710.07534, (-892.74931935348), 0.08325, 0.08325, 0.0, 433.82653544, 710.07534, 0.08325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      double double0 = (-5.539942519187239);
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      double double1 = (-892.74931935348);
      doubleArray0[7] = double1;
      doubleArray0[8] = double0;
      doubleArray0[9] = double1;
      double double2 = 0.08325;
      doubleArray0[12] = double2;
      double double3 = 433.5387995633613;
      doubleArray0[13] = double3;
      doubleArray0[14] = double0;
      doubleArray0[15] = double2;
      doubleArray0[4] = doubleArray0[12];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(2246.9869008662577, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(638620.4879777092, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1334.9576999839026, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(17, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {(-5.539942519187239), (-5.539942519187239), (-5.539942519187239), 0.0, 0.08325, 0.0, 0.0, (-892.74931935348), (-5.539942519187239), (-892.74931935348), 0.0, 0.0, 0.08325, 433.5387995633613, (-5.539942519187239), 0.08325, 0.0}, doubleArray0, 0.01);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(17, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(17, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(2246.9869008662577, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(638620.4879777092, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1334.9576999839026, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(17, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {(-5.539942519187239), (-5.539942519187239), (-5.539942519187239), 0.0, 0.08325, 0.0, 0.0, (-892.74931935348), (-5.539942519187239), (-892.74931935348), 0.0, 0.0, 0.08325, 433.5387995633613, (-5.539942519187239), 0.08325, 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, doubleArray0[9]);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(17, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(17, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(2246.9869008662577, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(638620.4879777092, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1334.9576999839026, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(17, arrayRealVector0.getDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {(-5.539942519187239), (-5.539942519187239), (-5.539942519187239), 0.0, 0.08325, 0.0, 0.0, (-892.74931935348), (-5.539942519187239), (-892.74931935348), 0.0, 0.0, 0.08325, 433.5387995633613, (-5.539942519187239), 0.08325, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 1.0E-12;
      double double1 = 1835.09134821;
      doubleArray0[2] = double1;
      doubleArray0[0] = double0;
      doubleArray0[1] = double1;
      double double2 = 12.652715413889496;
      doubleArray0[3] = double2;
      double double3 = (-440.1086);
      doubleArray0[4] = double3;
      double double4 = (-296.700911614);
      doubleArray0[5] = double4;
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertEquals(2648.9634981449394, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(29361.461571360014, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(4419.64492344789, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {1.0E-12, 1835.09134821, 1835.09134821, 12.652715413889496, (-440.1086), (-296.700911614)}, doubleArray0, 0.01);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(2648.9634981449394, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(29361.461571360014, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(4419.64492344789, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {1.0E-12, 1835.09134821, 1835.09134821, 12.652715413889496, (-440.1086), (-296.700911614)}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, doubleArray0[4]);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(2648.9634981449394, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(29361.461571360014, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(4419.64492344789, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {1.0E-12, 1835.09134821, 1835.09134821, 12.652715413889496, (-440.1086), (-296.700911614)}, doubleArray0, 0.01);
  }

  @Test
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      double double0 = (-892.74931935348);
      doubleArray0[7] = double0;
      double double1 = 0.08325;
      doubleArray0[10] = double1;
      doubleArray0[11] = double1;
      doubleArray0[12] = double1;
      double double2 = 433.82653544;
      doubleArray0[13] = double2;
      doubleArray0[15] = double1;
      double double3 = 1.0E-12;
      doubleArray0[1] = double3;
      doubleArray0[2] = doubleArray0[7];
      double double4 = (-440.1086);
      doubleArray0[4] = double4;
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertEquals(1.4626804848287433E7, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(17, arrayRealVector0.getDimension());
      assertEquals(1405.668440557832, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(2659.766774146962, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {0.0, 1.0E-12, (-892.74931935348), 0.0, (-440.1086), 0.0, 0.0, (-892.74931935348), 0.0, 0.0, 0.08325, 0.08325, 0.08325, 433.82653544, 0.0, 0.08325, 0.0}, doubleArray0, 0.01);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(17, array2DRowRealMatrix0.getRowDimension());
      assertEquals(17, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1.4626804848287433E7, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(17, arrayRealVector0.getDimension());
      assertEquals(1405.668440557832, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(2659.766774146962, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {0.0, 1.0E-12, (-892.74931935348), 0.0, (-440.1086), 0.0, 0.0, (-892.74931935348), 0.0, 0.0, 0.08325, 0.08325, 0.08325, 433.82653544, 0.0, 0.08325, 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, doubleArray0[7]);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(17, array2DRowRealMatrix0.getRowDimension());
      assertEquals(17, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(1.4626804848287433E7, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(17, arrayRealVector0.getDimension());
      assertEquals(1405.668440557832, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(2659.766774146962, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {0.0, 1.0E-12, (-892.74931935348), 0.0, (-440.1086), 0.0, 0.0, (-892.74931935348), 0.0, 0.0, 0.08325, 0.08325, 0.08325, 433.82653544, 0.0, 0.08325, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 1835.09134821;
      doubleArray0[2] = double0;
      doubleArray0[1] = double0;
      doubleArray0[3] = doubleArray0[2];
      double double1 = (-440.1086);
      doubleArray0[4] = double1;
      double double2 = (-297.4306818561032);
      doubleArray0[5] = double2;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[3] = double0;
      doubleArray1[4] = double0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray1, doubleArray0, double1);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1835.09134821, 1835.09134821, 1835.09134821, (-440.1086), (-297.4306818561032)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1835.09134821, 1835.09134821, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      double double0 = (-892.74931935348);
      doubleArray0[7] = double0;
      double double1 = 0.08325;
      doubleArray0[10] = doubleArray0[7];
      doubleArray0[11] = double1;
      doubleArray0[12] = double1;
      doubleArray0[13] = double1;
      doubleArray0[15] = double1;
      doubleArray0[16] = doubleArray0[11];
      doubleArray0[1] = doubleArray0[16];
      doubleArray0[2] = doubleArray0[10];
      double double2 = (-296.700911614);
      doubleArray0[5] = double2;
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertEquals(1574.4953204612136, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1.4628168816287417E7, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2975.448369674441, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(17, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {0.0, 0.08325, (-892.74931935348), 0.0, 0.0, (-296.700911614), 0.0, (-892.74931935348), 0.0, 0.0, (-892.74931935348), 0.08325, 0.08325, 0.08325, 0.0, 0.08325, 0.08325}, doubleArray0, 0.01);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(1574.4953204612136, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1.4628168816287417E7, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2975.448369674441, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(17, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(17, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(17, array2DRowRealMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {0.0, 0.08325, (-892.74931935348), 0.0, 0.0, (-296.700911614), 0.0, (-892.74931935348), 0.0, 0.0, (-892.74931935348), 0.08325, 0.08325, 0.08325, 0.0, 0.08325, 0.08325}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, doubleArray0[0]);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(1574.4953204612136, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1.4628168816287417E7, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2975.448369674441, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(17, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(17, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(17, array2DRowRealMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {0.0, 0.08325, (-892.74931935348), 0.0, 0.0, (-296.700911614), 0.0, (-892.74931935348), 0.0, 0.0, (-892.74931935348), 0.08325, 0.08325, 0.08325, 0.0, 0.08325, 0.08325}, doubleArray0, 0.01);
  }

  @Test
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = (-2024.73);
      doubleArray0[0] = double0;
      doubleArray0[4] = double0;
      double double1 = 17.74815893201932;
      doubleArray0[5] = double1;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[1] = double1;
      doubleArray1[2] = double1;
      doubleArray1[0] = double1;
      doubleArray1[3] = double0;
      doubleArray0[5] = double0;
      doubleArray1[5] = doubleArray1[2];
      doubleArray1[6] = double0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray0[5]);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals((-1.4009082922881465E27), eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2024.73), 0.0, 0.0, 0.0, (-2024.73), (-2024.73), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {17.74815893201932, 17.74815893201932, 17.74815893201932, (-2024.73), 0.0, 17.74815893201932, (-2024.73)}, doubleArray1, 0.01);
  }

  @Test
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 0.6379201168992835;
      doubleArray0[0] = double0;
      double double1 = 1.0E-12;
      doubleArray0[1] = double1;
      double double2 = 1835.747772528205;
      doubleArray0[2] = double2;
      double double3 = (-440.1086);
      doubleArray0[4] = double3;
      double double4 = (-296.700911614);
      doubleArray0[5] = double4;
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertEquals(14696.188902096028, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(2573.1952042591047, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(1910.9414700693687, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {0.6379201168992835, 1.0E-12, 1835.747772528205, 0.0, (-440.1086), (-296.700911614)}, doubleArray0, 0.01);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(14696.188902096028, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(2573.1952042591047, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(1910.9414700693687, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertArrayEquals(new double[] {0.6379201168992835, 1.0E-12, 1835.747772528205, 0.0, (-440.1086), (-296.700911614)}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, doubleArray0[3]);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(14696.188902096028, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(2573.1952042591047, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(1910.9414700693687, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertArrayEquals(new double[] {0.6379201168992835, 1.0E-12, 1835.747772528205, 0.0, (-440.1086), (-296.700911614)}, doubleArray0, 0.01);
  }

  @Test
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      double double0 = (-5.539942519187239);
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      double double1 = (-892.74931935348);
      doubleArray0[7] = double1;
      doubleArray0[9] = double1;
      double double2 = 0.08325;
      doubleArray0[11] = double2;
      double double3 = 433.5387995633613;
      doubleArray0[13] = double3;
      doubleArray0[14] = double0;
      doubleArray0[15] = double2;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(2241.3637083470703, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(17, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(638620.4879777092, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1334.9462022316227, arrayRealVector0.getNorm(), 0.01D);
      assertArrayEquals(new double[] {(-5.539942519187239), (-5.539942519187239), (-5.539942519187239), 0.0, 0.0, 0.0, 0.0, (-892.74931935348), 0.0, (-892.74931935348), 0.0, 0.08325, 0.0, 433.5387995633613, (-5.539942519187239), 0.08325, 0.0}, doubleArray0, 0.01);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(2241.3637083470703, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(17, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(638620.4879777092, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1334.9462022316227, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(17, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(17, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertArrayEquals(new double[] {(-5.539942519187239), (-5.539942519187239), (-5.539942519187239), 0.0, 0.0, 0.0, 0.0, (-892.74931935348), 0.0, (-892.74931935348), 0.0, 0.08325, 0.0, 433.5387995633613, (-5.539942519187239), 0.08325, 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, doubleArray0[15]);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(2241.3637083470703, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(17, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(638620.4879777092, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1334.9462022316227, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(17, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(17, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertArrayEquals(new double[] {(-5.539942519187239), (-5.539942519187239), (-5.539942519187239), 0.0, 0.0, 0.0, 0.0, (-892.74931935348), 0.0, (-892.74931935348), 0.0, 0.08325, 0.0, 433.5387995633613, (-5.539942519187239), 0.08325, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 244.9560825884;
      doubleArray0[5] = double0;
      doubleArray0[8] = doubleArray0[5];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[7] = double0;
      doubleArray1[5] = doubleArray0[5];
      doubleArray1[6] = double0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray0[6]);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 244.9560825884, 0.0, 0.0, 244.9560825884}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 244.9560825884, 244.9560825884, 244.9560825884}, doubleArray1, 0.01);
  }

  @Test
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      double double0 = (-5.539942519187239);
      doubleArray0[0] = double0;
      doubleArray0[2] = double0;
      double double1 = (-892.74931935348);
      doubleArray0[7] = double1;
      doubleArray0[8] = double0;
      doubleArray0[9] = double1;
      double double2 = 0.08325;
      doubleArray0[11] = double2;
      doubleArray0[12] = double2;
      double double3 = 433.5387995633613;
      doubleArray0[13] = double3;
      doubleArray0[14] = double0;
      doubleArray0[15] = double2;
      doubleArray0[0] = double3;
      double double4 = 1.0E-12;
      doubleArray0[1] = double4;
      doubleArray0[5] = doubleArray0[7];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(3562.195134744726, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(2.8412398768184446E7, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(17, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1663.4325705459246, arrayRealVector0.getNorm(), 0.01D);
      assertArrayEquals(new double[] {433.5387995633613, 1.0E-12, (-5.539942519187239), 0.0, 0.0, (-892.74931935348), 0.0, (-892.74931935348), (-5.539942519187239), (-892.74931935348), 0.0, 0.08325, 0.08325, 433.5387995633613, (-5.539942519187239), 0.08325, 0.0}, doubleArray0, 0.01);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(17, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(17, array2DRowRealMatrix0.getRowDimension());
      assertEquals(3562.195134744726, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(2.8412398768184446E7, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(17, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1663.4325705459246, arrayRealVector0.getNorm(), 0.01D);
      assertArrayEquals(new double[] {433.5387995633613, 1.0E-12, (-5.539942519187239), 0.0, 0.0, (-892.74931935348), 0.0, (-892.74931935348), (-5.539942519187239), (-892.74931935348), 0.0, 0.08325, 0.08325, 433.5387995633613, (-5.539942519187239), 0.08325, 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, doubleArray0[2]);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(17, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(17, array2DRowRealMatrix0.getRowDimension());
      assertEquals(3562.195134744726, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(2.8412398768184446E7, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(17, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1663.4325705459246, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {433.5387995633613, 1.0E-12, (-5.539942519187239), 0.0, 0.0, (-892.74931935348), 0.0, (-892.74931935348), (-5.539942519187239), (-892.74931935348), 0.0, 0.08325, 0.08325, 433.5387995633613, (-5.539942519187239), 0.08325, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      double double0 = (-5.539942519187239);
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      double double1 = (-892.74931935348);
      doubleArray0[7] = double1;
      doubleArray0[9] = double1;
      doubleArray0[3] = doubleArray0[2];
      doubleArray0[11] = doubleArray0[1];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(17, arrayRealVector0.getDimension());
      assertEquals(1813.1983513028963, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1262.598966112274, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(638620.4879777092, arrayRealVector0.getLInfNorm(), 0.01D);
      assertArrayEquals(new double[] {(-5.539942519187239), (-5.539942519187239), (-5.539942519187239), (-5.539942519187239), 0.0, 0.0, 0.0, (-892.74931935348), 0.0, (-892.74931935348), 0.0, (-5.539942519187239), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(17, arrayRealVector0.getDimension());
      assertEquals(1813.1983513028963, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1262.598966112274, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(638620.4879777092, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(17, array2DRowRealMatrix0.getRowDimension());
      assertEquals(17, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertArrayEquals(new double[] {(-5.539942519187239), (-5.539942519187239), (-5.539942519187239), (-5.539942519187239), 0.0, 0.0, 0.0, (-892.74931935348), 0.0, (-892.74931935348), 0.0, (-5.539942519187239), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, doubleArray0[15]);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(17, arrayRealVector0.getDimension());
      assertEquals(1813.1983513028963, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1262.598966112274, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(638620.4879777092, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(17, array2DRowRealMatrix0.getRowDimension());
      assertEquals(17, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertArrayEquals(new double[] {(-5.539942519187239), (-5.539942519187239), (-5.539942519187239), (-5.539942519187239), 0.0, 0.0, 0.0, (-892.74931935348), 0.0, (-892.74931935348), 0.0, (-5.539942519187239), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = (-2024.73);
      doubleArray0[0] = double0;
      doubleArray0[2] = double0;
      doubleArray0[4] = double0;
      double double1 = 17.74815893201932;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[1] = double1;
      doubleArray1[2] = double1;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[1]);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 17.74815893201932, 17.74815893201932, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2024.73), 0.0, (-2024.73), 0.0, (-2024.73), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      assertNotNull(array2DRowRealMatrix0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
      assertEquals(8, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 17.74815893201932, 17.74815893201932, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2024.73), 0.0, (-2024.73), 0.0, (-2024.73), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl1 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, double0);
      assertNotNull(eigenDecompositionImpl1);
      assertFalse(double0 == double1);
      assertFalse(eigenDecompositionImpl0.equals((Object)eigenDecompositionImpl1));
      assertFalse(eigenDecompositionImpl1.equals((Object)eigenDecompositionImpl0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(0.0, eigenDecompositionImpl1.getDeterminant(), 0.01D);
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
      assertEquals(8, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertNotSame(eigenDecompositionImpl0, eigenDecompositionImpl1);
      assertNotSame(eigenDecompositionImpl1, eigenDecompositionImpl0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 17.74815893201932, 17.74815893201932, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2024.73), 0.0, (-2024.73), 0.0, (-2024.73), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 1.0E-12;
      doubleArray0[1] = double0;
      double double1 = 1835.747772528205;
      doubleArray0[2] = double1;
      double double2 = (-440.1086);
      doubleArray0[4] = double2;
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertEquals(1887.7673225628803, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(2275.8563725282056, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(14685.982180225647, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {0.0, 1.0E-12, 1835.747772528205, 0.0, (-440.1086), 0.0}, doubleArray0, 0.01);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1887.7673225628803, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(2275.8563725282056, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(14685.982180225647, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {0.0, 1.0E-12, 1835.747772528205, 0.0, (-440.1086), 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, doubleArray0[3]);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(1887.7673225628803, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(2275.8563725282056, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(14685.982180225647, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {0.0, 1.0E-12, 1835.747772528205, 0.0, (-440.1086), 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      double double0 = 3259.0270861944887;
      doubleArray0[3] = double0;
      doubleArray0[5] = double0;
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertEquals(6518.054172388977, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(3337243.7362631564, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(4608.960305437516, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(14, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 3259.0270861944887, 0.0, 3259.0270861944887, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(6518.054172388977, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(3337243.7362631564, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(4608.960305437516, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 3259.0270861944887, 0.0, 3259.0270861944887, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, doubleArray0[2]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot solve degree 3 equation
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, doubleArray0[3]);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertNotNull(decompositionSolver0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, decompositionSolver0.isNonSingular());
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      DecompositionSolver decompositionSolver1 = eigenDecompositionImpl0.getSolver();
      assertNotNull(decompositionSolver1);
      assertFalse(decompositionSolver1.equals((Object)decompositionSolver0));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(false, decompositionSolver1.isNonSingular());
      assertNotSame(decompositionSolver1, decompositionSolver0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(17, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(17, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(17, array2DRowRealMatrix0.getRowDimension());
      assertEquals(17, array2DRowRealMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, doubleArray0[4]);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(17, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(17, array2DRowRealMatrix0.getRowDimension());
      assertEquals(17, array2DRowRealMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(0.0, double0, 0.01D);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(17, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(17, array2DRowRealMatrix0.getRowDimension());
      assertEquals(17, array2DRowRealMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, doubleArray0[3]);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertNotNull(decompositionSolver0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(false, decompositionSolver0.isNonSingular());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = (-3195);
      try {
        RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3195
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 9.0;
      double[][] doubleArray1 = new double[8][7];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray0;
      assertNotNull(doubleArray1[3]);
      
      doubleArray1[4] = doubleArray0;
      assertNotNull(doubleArray1[4]);
      
      doubleArray1[5] = doubleArray0;
      assertNotNull(doubleArray1[5]);
      
      doubleArray1[6] = doubleArray0;
      assertNotNull(doubleArray1[6]);
      
      doubleArray1[7] = doubleArray0;
      assertNotNull(doubleArray1[7]);
      
      boolean boolean0 = true;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray1, boolean0);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(8, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, double0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(8, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertNotNull(decompositionSolver0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(8, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, decompositionSolver0.isNonSingular());
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertNotNull(array2DRowRealMatrix1);
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(8, array2DRowRealMatrix1.getRowDimension());
      assertEquals(8, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(8, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
  }

  @Test
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[1]);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertNotNull(array2DRowRealMatrix0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(8, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertNotNull(array2DRowRealMatrix1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(8, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(8, array2DRowRealMatrix1.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, doubleArray0[3]);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      assertNotNull(array2DRowRealMatrix1);
      assertTrue(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertTrue(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertEquals(6, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(6, array2DRowRealMatrix1.getRowDimension());
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Array2DRowRealMatrix array2DRowRealMatrix2 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      assertNotNull(array2DRowRealMatrix2);
      assertTrue(array2DRowRealMatrix2.equals((Object)array2DRowRealMatrix0));
      assertTrue(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertTrue(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix2));
      assertEquals(6, array2DRowRealMatrix2.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix2.isSquare());
      assertEquals(6, array2DRowRealMatrix2.getRowDimension());
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertSame(array2DRowRealMatrix2, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix2, array2DRowRealMatrix0);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix2);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, doubleArray0[3]);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertNotNull(decompositionSolver0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(false, decompositionSolver0.isNonSingular());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      assertNotNull(array2DRowRealMatrix1);
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertEquals(6, array2DRowRealMatrix1.getRowDimension());
      assertEquals(6, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, doubleArray0[3]);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      assertNotNull(array2DRowRealMatrix1);
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(6, array2DRowRealMatrix1.getRowDimension());
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(6, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Array2DRowRealMatrix array2DRowRealMatrix2 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      assertNotNull(array2DRowRealMatrix2);
      assertFalse(array2DRowRealMatrix2.equals((Object)array2DRowRealMatrix0));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix2));
      assertEquals(true, array2DRowRealMatrix2.isSquare());
      assertEquals(6, array2DRowRealMatrix2.getColumnDimension());
      assertEquals(6, array2DRowRealMatrix2.getRowDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertSame(array2DRowRealMatrix2, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix2, array2DRowRealMatrix0);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = (-708.5649);
      doubleArray0[2] = double0;
      double[][] doubleArray1 = new double[7][5];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray0;
      assertNotNull(doubleArray1[3]);
      
      doubleArray1[4] = doubleArray0;
      assertNotNull(doubleArray1[4]);
      
      doubleArray1[5] = doubleArray1[1];
      assertNotNull(doubleArray1[5]);
      
      doubleArray1[6] = doubleArray0;
      assertNotNull(doubleArray1[6]);
      
      boolean boolean0 = true;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray1, boolean0);
      assertNotNull(realMatrixImpl0);
      assertEquals(7, realMatrixImpl0.getRowDimension());
      assertEquals(7, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) realMatrixImpl0, doubleArray0[0]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // eigen decomposition of assymetric matrices not supported yet
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, doubleArray0[3]);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = (-813);
      try {
        double double0 = eigenDecompositionImpl0.getRealEigenvalue(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -813
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, doubleArray0[3]);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = eigenDecompositionImpl0.getRealEigenvalues();
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray0[4]);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      int int0 = 0;
      double double0 = eigenDecompositionImpl0.getImagEigenvalue(int0);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, doubleArray0[3]);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }
}
