/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:46:52 GMT 2014
 */

package org.apache.commons.math3.util;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math3.util.FastMath;



import org.junit.runner.RunWith;


public class FastMathEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      double double0 = 3.141592653589793;
      double double1 = FastMath.sin(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.2246467991473532E-16, double1, 0.01D);
  }

  @Test
  public void test001()  throws Throwable  {
      float float0 = (-3453.0F);
      float float1 = FastMath.copySign(float0, float0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals((-3453.0F), float1, 0.01F);
  }

  @Test
  public void test002()  throws Throwable  {
      float float0 = 2375.624F;
      float float1 = FastMath.copySign(float0, float0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals(2375.624F, float1, 0.01F);
      
      float float2 = (-287.12912F);
      assertFalse(float2 == float1);
      
      float float3 = FastMath.copySign(float1, float2);
      assertFalse(float2 == float3);
      assertFalse(float2 == float1);
      assertFalse(float2 == float0);
      assertFalse(float1 == float2);
      assertFalse(float1 == float3);
      assertTrue(float1 == float0);
      assertFalse(float3 == float0);
      assertFalse(float3 == float1);
      assertFalse(float3 == float2);
      assertTrue(float0 == float1);
      assertFalse(float0 == float3);
      assertFalse(float0 == float2);
      assertEquals((-2375.624F), float3, 0.01F);
  }

  @Test
  public void test003()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      float float1 = (-3453.0F);
      float float2 = FastMath.copySign(float1, float0);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
      assertFalse(float1 == float0);
      assertFalse(float1 == float2);
      assertEquals(3453.0F, float2, 0.01F);
  }

  @Test
  public void test004()  throws Throwable  {
      double double0 = (-3040.6540441515);
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.abs(float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      
      double double1 = FastMath.copySign(double0, (double) float1);
      assertFalse(float1 == float0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(float0 == float1);
      assertEquals(3040.6540441515, double1, 0.01D);
  }

  @Test
  public void test005()  throws Throwable  {
      double double0 = (-3040.6540441515);
      double double1 = FastMath.copySign(double0, double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals((-3040.6540441515), double1, 0.01D);
  }

  @Test
  public void test006()  throws Throwable  {
      double double0 = (-6.054133004896379E-110);
      int int0 = 478;
      double double1 = FastMath.hypot(double0, (double) int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(478.0, double1, 0.01D);
  }

  @Test
  public void test007()  throws Throwable  {
      double double0 = 1121.8100963255008;
      double double1 = FastMath.cos(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-0.96599835958691), double1, 0.01D);
      
      double double2 = FastMath.log(double0, double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(1.0, double2, 0.01D);
      
      int int0 = FastMath.getExponent(double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(0, int0);
      
      double double3 = FastMath.hypot(double1, (double) int0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertEquals(0.96599835958691, double3, 0.01D);
  }

  @Test
  public void test008()  throws Throwable  {
      float float0 = 3149.9F;
      float float1 = FastMath.copySign(float0, float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertEquals(3149.9F, float1, 0.01F);
      
      double double0 = FastMath.asin((double) float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      
      double double1 = FastMath.hypot((double) float1, double0);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test009()  throws Throwable  {
      int int0 = (-544);
      double double0 = FastMath.log((double) int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      
      double double1 = FastMath.hypot(double0, (double) int0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test010()  throws Throwable  {
      int int0 = (-1714);
      int int1 = FastMath.max(int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals((-1714), int1);
      
      int int2 = 0;
      assertFalse(int2 == int1);
      
      double double0 = FastMath.log10((double) int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.hypot((double) int1, double0);
      assertFalse(int1 == int2);
      assertTrue(int1 == int0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int2);
      assertTrue(int0 == int1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test011()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.min(int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0, int1);
      
      double double0 = FastMath.log((double) int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.hypot(double0, (double) int0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test012()  throws Throwable  {
      double double0 = (-1188.3508946);
      double double1 = (-1895.65229264236);
      double double2 = FastMath.max(double1, double0);
      assertTrue(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
      assertEquals((-1188.3508946), double2, 0.01D);
  }

  @Test
  public void test013()  throws Throwable  {
      float float0 = (-2102.41F);
      double double0 = FastMath.tan((double) float0);
      assertEquals((-0.8160094551919383), double0, 0.01D);
      
      int int0 = 52;
      double double1 = 5.33839690397E-312;
      assertFalse(double1 == double0);
      
      double double2 = FastMath.scalb(double1, int0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(2.4042002307468455E-296, double2, 0.01D);
      
      double double3 = FastMath.max(double2, double0);
      assertFalse(double3 == double1);
      assertTrue(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertTrue(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(2.4042002307468455E-296, double3, 0.01D);
  }

  @Test
  public void test014()  throws Throwable  {
      float float0 = -0.0F;
      float float1 = FastMath.max(float0, float0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals(-0.0F, float1, 0.01F);
  }

  @Test
  public void test015()  throws Throwable  {
      int int0 = (-225);
      float float0 = 1.0F;
      float float1 = FastMath.max((float) int0, float0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals(1.0F, float1, 0.01F);
  }

  @Test
  public void test016()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.nextUp(float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals((-3.4028235E38F), float1, 0.01F);
      
      float float2 = 0.0F;
      assertFalse(float2 == float1);
      
      float float3 = FastMath.max(float2, float1);
      assertTrue(float2 == float3);
      assertFalse(float2 == float1);
      assertFalse(float2 == float0);
      assertFalse(float1 == float2);
      assertFalse(float1 == float3);
      assertFalse(float1 == float0);
      assertFalse(float3 == float0);
      assertTrue(float3 == float2);
      assertFalse(float3 == float1);
      assertFalse(float0 == float3);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertEquals(0.0F, float3, 0.01F);
  }

  @Test
  public void test017()  throws Throwable  {
      float float0 = 2110.2312F;
      float float1 = FastMath.ulp(float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(2.4414062E-4F, float1, 0.01F);
      
      int int0 = FastMath.getExponent(float1);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals((-12), int0);
      
      int int1 = 2853;
      assertFalse(int1 == int0);
      
      long long0 = FastMath.max((long) int1, (long) int0);
      assertFalse(int1 == int0);
      assertFalse(float1 == float0);
      assertFalse(int0 == int1);
      assertFalse(float0 == float1);
      assertEquals(2853L, long0);
  }

  @Test
  public void test018()  throws Throwable  {
      double double0 = (-3040.6540441515);
      double double1 = FastMath.acos(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = FastMath.min(double1, double1);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test019()  throws Throwable  {
      double double0 = (-1188.3508946);
      double double1 = FastMath.max(double0, double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals((-1188.3508946), double1, 0.01D);
      
      float float0 = 841.3162F;
      double double2 = FastMath.min((double) float0, double1);
      assertTrue(double0 == double2);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertTrue(double1 == double2);
      assertTrue(double2 == double0);
      assertTrue(double2 == double1);
      assertEquals((-1188.3508946), double2, 0.01D);
  }

  @Test
  public void test020()  throws Throwable  {
      double double0 = 1.46266767;
      double double1 = FastMath.hypot(double0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(2.0685244561586544, double1, 0.01D);
      
      int int0 = 0;
      double double2 = FastMath.min((double) int0, double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test021()  throws Throwable  {
      float float0 = -0.0F;
      float float1 = FastMath.min(float0, float0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals(-0.0F, float1, 0.01F);
  }

  @Test
  public void test022()  throws Throwable  {
      long long0 = (-1845L);
      long long1 = (-4538L);
      long long2 = FastMath.min(long0, long1);
      assertFalse(long1 == long0);
      assertTrue(long1 == long2);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertEquals((-4538L), long2);
  }

  @Test
  public void test023()  throws Throwable  {
      int int0 = (-1908);
      int int1 = 341;
      int int2 = FastMath.min(int1, int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(int0 == int1);
      assertTrue(int0 == int2);
      assertEquals((-1908), int2);
  }

  @Test
  public void test024()  throws Throwable  {
      double double0 = (-0.5);
      double double1 = FastMath.rint(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test025()  throws Throwable  {
      double double0 = (-1.0389614239253089E-8);
      double double1 = FastMath.rint(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(-0.0, double1, 0.01D);
  }

  @Test
  public void test026()  throws Throwable  {
      double double0 = (-4.9E-324);
      float float0 = 1429.0F;
      float float1 = FastMath.nextUp(float0);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertEquals(1429.0001F, float1, 0.01F);
      
      double double1 = FastMath.pow(double0, (double) float1);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = FastMath.rint(double1);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test027()  throws Throwable  {
      double double0 = (-1.2133811978747018E-8);
      double double1 = FastMath.ceil(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(-0.0, double1, 0.01D);
  }

  @Test
  public void test028()  throws Throwable  {
      double double0 = 0.8109631538391113;
      long long0 = FastMath.round(double0);
      assertEquals(1L, long0);
      
      double double1 = FastMath.ceil((double) long0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.0, double1, 0.01D);
  }

  @Test
  public void test029()  throws Throwable  {
      int int0 = (-2603);
      double double0 = FastMath.rint((double) int0);
      assertEquals((-2603.0), double0, 0.01D);
  }

  @Test
  public void test030()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      long long0 = FastMath.round((double) float0);
      assertEquals((-9223372036854775808L), long0);
  }

  @Test
  public void test031()  throws Throwable  {
      float float0 = (-48.031662F);
      float float1 = FastMath.nextUp(float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals((-48.03166F), float1, 0.01F);
  }

  @Test
  public void test032()  throws Throwable  {
      float float0 = 2110.2312F;
      float float1 = FastMath.ulp(float0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(2.4414062E-4F, float1, 0.01F);
      
      int int0 = FastMath.getExponent(float1);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals((-12), int0);
      
      float float2 = FastMath.nextAfter(float1, (double) int0);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
      assertFalse(float1 == float0);
      assertFalse(float1 == float2);
      assertEquals(2.4414061E-4F, float2, 0.01F);
  }

  @Test
  public void test033()  throws Throwable  {
      float float0 = 1274.8151F;
      float float1 = 0.0F;
      float float2 = FastMath.min(float0, float1);
      assertFalse(float2 == float0);
      assertTrue(float2 == float1);
      assertFalse(float1 == float0);
      assertTrue(float1 == float2);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
      assertEquals(0.0F, float2, 0.01F);
      
      int int0 = (-2746);
      float float3 = FastMath.nextAfter(float2, (double) int0);
      assertFalse(float3 == float1);
      assertFalse(float3 == float2);
      assertFalse(float3 == float0);
      assertFalse(float2 == float3);
      assertFalse(float2 == float0);
      assertTrue(float2 == float1);
      assertFalse(float1 == float3);
      assertFalse(float1 == float0);
      assertTrue(float1 == float2);
      assertFalse(float0 == float3);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
      assertEquals((-1.4E-45F), float3, 0.01F);
  }

  @Test
  public void test034()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = FastMath.nextUp(float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(1.4E-45F, float1, 0.01F);
  }

  @Test
  public void test035()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.acos(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.5707963267948966, double1, 0.01D);
      
      double double2 = FastMath.asin(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(Double.NaN, double2, 0.01D);
      
      float float0 = (-87.31888F);
      float float1 = FastMath.nextAfter(float0, double2);
      assertFalse(float1 == float0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(float0 == float1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test
  public void test036()  throws Throwable  {
      float float0 = Float.NaN;
      float float1 = FastMath.nextUp(float0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test
  public void test037()  throws Throwable  {
      double double0 = 1.46266767;
      double double1 = FastMath.hypot(double0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(2.0685244561586544, double1, 0.01D);
      
      double double2 = FastMath.nextUp(double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(2.068524456158655, double2, 0.01D);
  }

  @Test
  public void test038()  throws Throwable  {
      double double0 = 1229.77866814;
      double double1 = FastMath.cbrt(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(10.713769991447597, double1, 0.01D);
      
      long long0 = 2147483648L;
      long long1 = FastMath.abs(long0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals(2147483648L, long1);
      
      double double2 = FastMath.nextAfter((double) long1, double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(2.1474836479999998E9, double2, 0.01D);
  }

  @Test
  public void test039()  throws Throwable  {
      double double0 = -0.0;
      double double1 = FastMath.max(double0, double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(-0.0, double1, 0.01D);
      
      double double2 = (-380.9558);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.rint(double2);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertEquals((-381.0), double3, 0.01D);
      
      double double4 = FastMath.nextAfter(double1, double3);
      assertFalse(double2 == double4);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double4);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertTrue(double1 == double0);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double4);
      assertFalse(double3 == double2);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertFalse(double4 == double0);
      assertFalse(double4 == double3);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertFalse(double0 == double4);
      assertFalse(double0 == double3);
      assertEquals((-4.9E-324), double4, 0.01D);
  }

  @Test
  public void test040()  throws Throwable  {
      int int0 = 0;
      double double0 = FastMath.nextUp((double) int0);
      assertEquals(4.9E-324, double0, 0.01D);
  }

  @Test
  public void test041()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log10(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.nextUp(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals((-1.7976931348623157E308), double2, 0.01D);
  }

  @Test
  public void test042()  throws Throwable  {
      double double0 = (-1489.4914848245);
      double double1 = FastMath.nextAfter(double0, double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals((-1489.4914848245), double1, 0.01D);
  }

  @Test
  public void test043()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.acos(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(1.5707963267948966, double1, 0.01D);
      
      double double2 = FastMath.asin(double1);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      
      double double3 = FastMath.nextUp(double2);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertTrue(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertTrue(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double3, 0.01D);
  }

  @Test
  public void test044()  throws Throwable  {
      float float0 = (-613.4702F);
      int int0 = 264;
      float float1 = FastMath.scalb(float0, int0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
  }

  @Test
  public void test045()  throws Throwable  {
      int int0 = (-139);
      int int1 = (-277);
      float float0 = FastMath.scalb((float) int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(-0.0F, float0, 0.01F);
  }

  @Test
  public void test046()  throws Throwable  {
      float float0 = 839.584F;
      int int0 = (-139);
      float float1 = FastMath.scalb(float0, int0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(1.204744E-39F, float1, 0.01F);
      
      float float2 = FastMath.scalb(float1, int0);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(float2 == float1);
      assertFalse(float2 == float0);
      assertFalse(float1 == float2);
      assertFalse(float1 == float0);
      assertEquals(0.0F, float2, 0.01F);
  }

  @Test
  public void test047()  throws Throwable  {
      float float0 = 296.17694F;
      int int0 = 276;
      float float1 = FastMath.scalb(float0, int0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
  }

  @Test
  public void test048()  throws Throwable  {
      float float0 = (-1.0F);
      int int0 = 2853;
      float float1 = FastMath.scalb(float0, int0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
  }

  @Test
  public void test049()  throws Throwable  {
      int int0 = 913;
      int int1 = (-1430);
      float float0 = FastMath.scalb((float) int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test050()  throws Throwable  {
      int int0 = (-708);
      float float0 = FastMath.scalb((float) int0, int0);
      assertEquals(-0.0F, float0, 0.01F);
  }

  @Test
  public void test051()  throws Throwable  {
      int int0 = 0;
      int int1 = (-139);
      float float0 = FastMath.scalb((float) int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test052()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      int int0 = 344;
      float float1 = FastMath.scalb(float0, int0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
  }

  @Test
  public void test053()  throws Throwable  {
      float float0 = Float.NaN;
      int int0 = 1456;
      float float1 = FastMath.scalb(float0, int0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test
  public void test054()  throws Throwable  {
      float float0 = 841.3162F;
      int int0 = 0;
      float float1 = FastMath.scalb(float0, int0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals(841.3162F, float1, 0.01F);
  }

  @Test
  public void test055()  throws Throwable  {
      float float0 = 841.3162F;
      int int0 = (-139);
      float float1 = FastMath.scalb(float0, int0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(1.20723E-39F, float1, 0.01F);
  }

  @Test
  public void test056()  throws Throwable  {
      double double0 = (-1.0626125049032536E262);
      double double1 = FastMath.cos(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.9170036947633541, double1, 0.01D);
      
      int int0 = 1208;
      double double2 = FastMath.scalb(double1, int0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test057()  throws Throwable  {
      double double0 = 5.33839690397E-312;
      int int0 = 1976;
      double double1 = FastMath.scalb(double0, int0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(3.6532743865271267E283, double1, 0.01D);
  }

  @Test
  public void test058()  throws Throwable  {
      float float0 = (-417.252F);
      int int0 = (-1355);
      double double0 = FastMath.scalb((double) float0, int0);
      assertEquals(-0.0, double0, 0.01D);
  }

  @Test
  public void test059()  throws Throwable  {
      double double0 = 0.5104348659515381;
      double double1 = FastMath.sqrt(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.7144472450444036, double1, 0.01D);
      
      int int0 = (-1355);
      double double2 = FastMath.scalb(double1, int0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test060()  throws Throwable  {
      double double0 = 1491.146626967545;
      double double1 = FastMath.signum(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.0, double1, 0.01D);
      
      float float0 = (-1048.093F);
      int int0 = FastMath.round(float0);
      assertEquals((-1048), int0);
      
      double double2 = FastMath.scalb(double1, int0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(3.31561842E-316, double2, 0.01D);
  }

  @Test
  public void test061()  throws Throwable  {
      double double0 = (-2559.5092806);
      int int0 = 2778;
      double double1 = FastMath.scalb(double0, int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test062()  throws Throwable  {
      long long0 = 346L;
      long long1 = FastMath.min(long0, long0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals(346L, long1);
      
      int int0 = 2778;
      double double0 = FastMath.scalb((double) long1, int0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test063()  throws Throwable  {
      float float0 = 1274.8151F;
      float float1 = FastMath.nextAfter(float0, (double) float0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals(1274.8151F, float1, 0.01F);
      
      int int0 = (-2746);
      double double0 = FastMath.scalb((double) float1, int0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test064()  throws Throwable  {
      double double0 = 1121.8100963255008;
      double double1 = FastMath.log(double0, double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.0, double1, 0.01D);
      
      int int0 = FastMath.getExponent(double1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0, int0);
      
      double double2 = FastMath.hypot((double) int0, (double) int0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test065()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log10(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      int int0 = 8388608;
      double double2 = FastMath.scalb(double1, int0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test066()  throws Throwable  {
      double double0 = (-3481.642842446);
      double double1 = FastMath.log(double0, double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      int int0 = (-5279);
      double double2 = FastMath.scalb(double1, int0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test067()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.ulp(float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
  }

  @Test
  public void test068()  throws Throwable  {
      double double0 = (-1489.4914848245);
      double double1 = FastMath.sinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.ulp(double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test069()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = FastMath.ulp(float0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertEquals(0.0F, float1, 0.01F);
  }

  @Test
  public void test070()  throws Throwable  {
      long long0 = (-321L);
      long long1 = FastMath.abs(long0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(321L, long1);
  }

  @Test
  public void test071()  throws Throwable  {
      int int0 = (-303);
      int int1 = FastMath.abs(int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(303, int1);
  }

  @Test
  public void test072()  throws Throwable  {
      int int0 = 457;
      int int1 = FastMath.abs(int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(457, int1);
  }

  @Test
  public void test073()  throws Throwable  {
      double double0 = 4.151794514828518E-8;
      long long0 = FastMath.round(double0);
      assertEquals(0L, long0);
      
      double double1 = FastMath.toDegrees((double) long0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test074()  throws Throwable  {
      double double0 = 5.106228040084293E259;
      double double1 = FastMath.exp(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.toDegrees(double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test075()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.toRadians(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test076()  throws Throwable  {
      float float0 = 2110.2312F;
      float float1 = FastMath.ulp(float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(2.4414062E-4F, float1, 0.01F);
      
      double double0 = FastMath.toRadians((double) float1);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(4.261057744126781E-6, double0, 0.01D);
  }

  @Test
  public void test077()  throws Throwable  {
      double double0 = 1289.1;
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.toRadians(double1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test078()  throws Throwable  {
      double double0 = (-1216.191884827);
      double double1 = FastMath.log10(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = FastMath.cbrt(double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test079()  throws Throwable  {
      double double0 = 4.9E-324;
      double double1 = FastMath.cbrt(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.7031839360032603E-108, double1, 0.01D);
  }

  @Test
  public void test080()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.cbrt((double) float0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test081()  throws Throwable  {
      double double0 = 2.3195229636950566E-16;
      double double1 = FastMath.cbrt(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(6.144212471161966E-6, double1, 0.01D);
      
      double double2 = FastMath.acos(double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(1.5707901825824253, double2, 0.01D);
  }

  @Test
  public void test082()  throws Throwable  {
      double double0 = 1121.8100963255008;
      double double1 = FastMath.cos(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-0.96599835958691), double1, 0.01D);
      
      double double2 = FastMath.acos(double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(2.880073659645171, double2, 0.01D);
  }

  @Test
  public void test083()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.cosh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.0, double1, 0.01D);
      
      double double2 = FastMath.acos(double1);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test084()  throws Throwable  {
      float float0 = (-1.0F);
      double double0 = FastMath.acos((double) float0);
      assertEquals(3.141592653589793, double0, 0.01D);
  }

  @Test
  public void test085()  throws Throwable  {
      double double0 = 1148.36900224918;
      double double1 = FastMath.asinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(7.739245325895586, double1, 0.01D);
      
      double double2 = FastMath.acos(double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test086()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.asin(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test087()  throws Throwable  {
      double double0 = (-1593.25);
      double double1 = FastMath.expm1(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1.0), double1, 0.01D);
      
      double double2 = FastMath.asin(double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals((-1.5707963267948966), double2, 0.01D);
  }

  @Test
  public void test088()  throws Throwable  {
      float float0 = 1185.0F;
      float float1 = FastMath.signum(float0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(1.0F, float1, 0.01F);
      
      double double0 = FastMath.asin((double) float1);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(1.5707963267948966, double0, 0.01D);
  }

  @Test
  public void test089()  throws Throwable  {
      double double0 = (-438.0);
      double double1 = FastMath.asin(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test090()  throws Throwable  {
      double double0 = (-4.9E-324);
      double double1 = 2730.398748918751;
      double double2 = FastMath.atan2(double0, double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(-0.0, double2, 0.01D);
  }

  @Test
  public void test091()  throws Throwable  {
      double double0 = 2.31374454498291;
      double double1 = FastMath.cosh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(5.105554883893661, double1, 0.01D);
      
      int int0 = 0;
      double double2 = FastMath.ulp((double) int0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(4.9E-324, double2, 0.01D);
      
      double double3 = FastMath.atan2(double1, double2);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertEquals(1.5707963267948966, double3, 0.01D);
  }

  @Test
  public void test092()  throws Throwable  {
      double double0 = 0.23015019297599792;
      double double1 = FastMath.log1p(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.20713627004030505, double1, 0.01D);
      
      double double2 = 0.0;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.atan2(double1, double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertEquals(1.5707963267948966, double3, 0.01D);
  }

  @Test
  public void test093()  throws Throwable  {
      double double0 = (-1392.28176586356);
      long long0 = FastMath.round(double0);
      assertEquals((-1392L), long0);
      
      double double1 = 0.0;
      double double2 = FastMath.atan2((double) long0, double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals((-1.5707963267948966), double2, 0.01D);
  }

  @Test
  public void test094()  throws Throwable  {
      double double0 = (-1485.7656);
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.atan2(double0, double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals((-3.141592653589793), double2, 0.01D);
  }

  @Test
  public void test095()  throws Throwable  {
      double double0 = 2.718281828459045;
      double double1 = 0.0;
      double double2 = FastMath.log10(double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      
      long long0 = FastMath.round(double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(3L, long0);
      
      double double3 = FastMath.atan2((double) long0, double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertEquals(3.141592653589793, double3, 0.01D);
  }

  @Test
  public void test096()  throws Throwable  {
      double double0 = 1289.1;
      double double1 = FastMath.acosh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(7.85484660956777, double1, 0.01D);
      
      double double2 = FastMath.sinh(double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      
      double double3 = FastMath.atan2(double1, double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertEquals(0.0, double3, 0.01D);
  }

  @Test
  public void test097()  throws Throwable  {
      double double0 = 989.190205;
      double double1 = FastMath.log(double0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.0, double1, 0.01D);
      
      float float0 = Float.NEGATIVE_INFINITY;
      double double2 = FastMath.atan2((double) float0, double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals((-1.5707963267948966), double2, 0.01D);
  }

  @Test
  public void test098()  throws Throwable  {
      double double0 = (-3963.15550243804);
      int int0 = 0;
      double double1 = FastMath.scalb(double0, int0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals((-3963.15550243804), double1, 0.01D);
      
      double double2 = 3.8656278695544835E114;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.expm1(double1);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertEquals((-1.0), double3, 0.01D);
      
      double double4 = FastMath.sinh(double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double4);
      assertFalse(double2 == double3);
      assertFalse(double4 == double1);
      assertFalse(double4 == double3);
      assertFalse(double4 == double0);
      assertFalse(double4 == double2);
      assertEquals(Double.POSITIVE_INFINITY, double4, 0.01D);
      
      double double5 = FastMath.atanh(double3);
      assertFalse(double3 == double4);
      assertFalse(double3 == double5);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double0 == double4);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double5);
      assertTrue(double1 == double0);
      assertFalse(double1 == double4);
      assertFalse(double1 == double2);
      assertFalse(double1 == double5);
      assertFalse(double1 == double3);
      assertFalse(double5 == double1);
      assertFalse(double5 == double2);
      assertFalse(double5 == double4);
      assertFalse(double5 == double0);
      assertFalse(double5 == double3);
      assertEquals(Double.NEGATIVE_INFINITY, double5, 0.01D);
      
      double double6 = FastMath.atan2(double4, double5);
      assertFalse(double3 == double4);
      assertFalse(double3 == double5);
      assertFalse(double3 == double1);
      assertFalse(double3 == double6);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double5);
      assertFalse(double2 == double6);
      assertFalse(double2 == double4);
      assertFalse(double2 == double3);
      assertFalse(double4 == double5);
      assertFalse(double4 == double1);
      assertFalse(double4 == double3);
      assertFalse(double4 == double0);
      assertFalse(double4 == double2);
      assertFalse(double4 == double6);
      assertFalse(double6 == double1);
      assertFalse(double6 == double0);
      assertFalse(double6 == double2);
      assertFalse(double6 == double4);
      assertFalse(double6 == double5);
      assertFalse(double6 == double3);
      assertFalse(double0 == double4);
      assertFalse(double0 == double6);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double5);
      assertTrue(double1 == double0);
      assertFalse(double1 == double4);
      assertFalse(double1 == double2);
      assertFalse(double1 == double5);
      assertFalse(double1 == double6);
      assertFalse(double1 == double3);
      assertFalse(double5 == double1);
      assertFalse(double5 == double2);
      assertFalse(double5 == double6);
      assertFalse(double5 == double4);
      assertFalse(double5 == double0);
      assertFalse(double5 == double3);
      assertEquals(2.356194490192345, double6, 0.01D);
  }

  @Test
  public void test099()  throws Throwable  {
      int int0 = 0;
      double double0 = FastMath.cosh((double) int0);
      assertEquals(1.0, double0, 0.01D);
      
      double double1 = 1873.8207040346067;
      assertFalse(double1 == double0);
      
      double double2 = FastMath.sinh(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      
      double double3 = FastMath.atan2(double2, double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(1.5707963267948966, double3, 0.01D);
  }

  @Test
  public void test100()  throws Throwable  {
      float float0 = -0.0F;
      double double0 = FastMath.atan2((double) float0, (double) float0);
      assertEquals((-3.141592653589793), double0, 0.01D);
  }

  @Test
  public void test101()  throws Throwable  {
      float float0 = (-2102.41F);
      double double0 = FastMath.tan((double) float0);
      assertEquals((-0.8160094551919383), double0, 0.01D);
      
      float float1 = 0.0F;
      int int0 = FastMath.round(float1);
      assertFalse(float1 == float0);
      assertEquals(0, int0);
      
      double double1 = FastMath.atan2((double) int0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(3.141592653589793, double1, 0.01D);
  }

  @Test
  public void test102()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      double double1 = 0.0;
      double double2 = FastMath.atan2(double1, double0);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test103()  throws Throwable  {
      double double0 = 0.0;
      float float0 = 1.4E-45F;
      double double1 = FastMath.log10(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      int int0 = FastMath.round(float0);
      assertEquals(0, int0);
      
      double double2 = FastMath.atan2((double) int0, double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(3.141592653589793, double2, 0.01D);
  }

  @Test
  public void test104()  throws Throwable  {
      float float0 = 1.4E-45F;
      float float1 = FastMath.min(float0, float0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals(1.4E-45F, float1, 0.01F);
      
      int int0 = FastMath.round(float0);
      assertTrue(float0 == float1);
      assertEquals(0, int0);
      
      double double0 = FastMath.atan2((double) int0, (double) float1);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test105()  throws Throwable  {
      double double0 = (-5.902712448725381E-8);
      double double1 = FastMath.asin(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-5.9027124487253846E-8), double1, 0.01D);
  }

  @Test
  public void test106()  throws Throwable  {
      double double0 = (-1188.3508946);
      float float0 = 839.584F;
      float float1 = FastMath.abs(float0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals(839.584F, float1, 0.01F);
      
      double double1 = FastMath.atan2((double) float1, double0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(2.5265096795465767, double1, 0.01D);
  }

  @Test
  public void test107()  throws Throwable  {
      double double0 = (-7.049068240916723E166);
      double double1 = FastMath.atan(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1.5707963267948966), double1, 0.01D);
  }

  @Test
  public void test108()  throws Throwable  {
      float float0 = 839.584F;
      float float1 = FastMath.abs(float0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals(839.584F, float1, 0.01F);
      
      int int0 = (-139);
      float float2 = FastMath.min((float) int0, float0);
      assertTrue(float0 == float1);
      assertFalse(float0 == float2);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertEquals((-139.0F), float2, 0.01F);
      
      double double0 = FastMath.atan2((double) float1, (double) float2);
      assertFalse(float1 == float2);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertFalse(float0 == float2);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertEquals(1.7348662873167648, double0, 0.01D);
  }

  @Test
  public void test109()  throws Throwable  {
      double double0 = (-549.89);
      int int0 = 1107;
      double double1 = FastMath.scalb(double0, int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.tan(double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test110()  throws Throwable  {
      double double0 = 1148.36900224918;
      double double1 = (-2559.5092806);
      double double2 = FastMath.expm1(double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      
      double double3 = FastMath.atan2(double1, double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertEquals(-0.0, double3, 0.01D);
      
      double double4 = FastMath.tan(double3);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertTrue(double3 == double4);
      assertFalse(double3 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double4);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double4);
      assertFalse(double4 == double1);
      assertTrue(double4 == double3);
      assertFalse(double4 == double0);
      assertFalse(double4 == double2);
      assertFalse(double1 == double4);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertEquals(-0.0, double4, 0.01D);
  }

  @Test
  public void test111()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.abs(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
      
      double double2 = FastMath.tan(double1);
      assertTrue(double2 == double1);
      assertTrue(double2 == double0);
      assertTrue(double1 == double0);
      assertTrue(double1 == double2);
      assertTrue(double0 == double1);
      assertTrue(double0 == double2);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test112()  throws Throwable  {
      double double0 = 1.8014398509481984E16;
      double double1 = FastMath.floor(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(1.8014398509481984E16, double1, 0.01D);
      
      double double2 = FastMath.cos(double1);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      assertEquals((-0.4413505874729857), double2, 0.01D);
  }

  @Test
  public void test113()  throws Throwable  {
      float float0 = 1.4E-45F;
      float float1 = FastMath.min(float0, float0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals(1.4E-45F, float1, 0.01F);
      
      double double0 = FastMath.cos((double) float1);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test114()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log10(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.cos(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test115()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      double double0 = FastMath.sin((double) float0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test116()  throws Throwable  {
      int int0 = (-2603);
      double double0 = FastMath.scalb((double) int0, int0);
      assertEquals(-0.0, double0, 0.01D);
      
      double double1 = FastMath.sin(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(-0.0, double1, 0.01D);
  }

  @Test
  public void test117()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.sin(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test118()  throws Throwable  {
      float float0 = 3.4028235E38F;
      double double0 = FastMath.sin((double) float0);
      assertEquals((-0.5218765233336585), double0, 0.01D);
  }

  @Test
  public void test119()  throws Throwable  {
      double double0 = (-1392.28176586356);
      long long0 = FastMath.round(double0);
      assertEquals((-1392L), long0);
      
      long long1 = (-3512299194304650054L);
      assertFalse(long1 == long0);
      
      long long2 = FastMath.min(long1, long0);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertFalse(long1 == long0);
      assertTrue(long1 == long2);
      assertEquals((-3512299194304650054L), long2);
      
      double double1 = FastMath.sin((double) long2);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(double1 == double0);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertFalse(long1 == long0);
      assertTrue(long1 == long2);
      assertFalse(double0 == double1);
      assertEquals((-0.7561374296495502), double1, 0.01D);
  }

  @Test
  public void test120()  throws Throwable  {
      double double0 = (-1.0292817180691822E123);
      double double1 = FastMath.sin(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.9901928140716272, double1, 0.01D);
  }

  @Test
  public void test121()  throws Throwable  {
      double double0 = (-6.488296536838142E224);
      double double1 = FastMath.tan(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-0.43018959752620717), double1, 0.01D);
  }

  @Test
  public void test122()  throws Throwable  {
      double double0 = 1.4977047507315718E290;
      double double1 = FastMath.cos(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-0.9984982584122354), double1, 0.01D);
  }

  @Test
  public void test123()  throws Throwable  {
      double double0 = (-1.1878772398311421E260);
      double double1 = FastMath.cos(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-0.4834049487738686), double1, 0.01D);
  }

  @Test
  public void test124()  throws Throwable  {
      long long0 = 4208363204685324176L;
      long long1 = FastMath.max(long0, long0);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals(4208363204685324176L, long1);
      
      double double0 = FastMath.cos((double) long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals((-0.15563282229381037), double0, 0.01D);
  }

  @Test
  public void test125()  throws Throwable  {
      double double0 = 3793.45842;
      double double1 = FastMath.tan(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(67.97971480063535, double1, 0.01D);
  }

  @Test
  public void test126()  throws Throwable  {
      int int0 = 0;
      double double0 = FastMath.cosh((double) int0);
      assertEquals(1.0, double0, 0.01D);
      
      double double1 = FastMath.tan(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.5574077246549023, double1, 0.01D);
  }

  @Test
  public void test127()  throws Throwable  {
      float float0 = 2110.2312F;
      float float1 = FastMath.ulp(float0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(2.4414062E-4F, float1, 0.01F);
      
      double double0 = FastMath.sin((double) float1);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(2.441406225746808E-4, double0, 0.01D);
  }

  @Test
  public void test128()  throws Throwable  {
      double double0 = (-3481.642842446);
      int int0 = (-5279);
      double double1 = FastMath.pow(double0, int0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test129()  throws Throwable  {
      double double0 = 1.46266767;
      double double1 = FastMath.hypot(double0, double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(2.0685244561586544, double1, 0.01D);
      
      int int0 = 0;
      double double2 = FastMath.pow(double1, int0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(1.0, double2, 0.01D);
  }

  @Test
  public void test130()  throws Throwable  {
      double double0 = (-1489.4914848245);
      double double1 = FastMath.sinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      float float0 = 2110.2312F;
      int int0 = FastMath.getExponent(float0);
      assertEquals(11, int0);
      
      double double2 = FastMath.pow(double1, int0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test131()  throws Throwable  {
      double double0 = (-3040.6540441515);
      double double1 = FastMath.acos(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = (-8.0E298);
      //  // Unstable assertion: assertFalse(double2 == double1);
      
      double double3 = FastMath.pow(double1, double2);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertEquals(0.0, double3, 0.01D);
  }

  @Test
  public void test132()  throws Throwable  {
      double double0 = 1.7976931348623157E308;
      int int0 = 276;
      long long0 = FastMath.min((long) int0, (long) int0);
      assertEquals(276L, long0);
      
      double double1 = FastMath.pow((double) long0, double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test133()  throws Throwable  {
      int int0 = 1212;
      double double0 = (-2858.898703);
      double double1 = FastMath.pow(double0, (double) int0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test134()  throws Throwable  {
      double double0 = (-599.24952);
      double double1 = 1.5340733916570804E145;
      double double2 = FastMath.pow(double0, double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test135()  throws Throwable  {
      double double0 = 0.0;
      long long0 = 2147483648L;
      long long1 = FastMath.abs(long0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals(2147483648L, long1);
      
      double double1 = FastMath.log((double) long0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertTrue(long0 == long1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.atan2((double) long1, (double) long1);
      assertTrue(long1 == long0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(long0 == long1);
      assertEquals(0.7853981633974483, double2, 0.01D);
      
      double double3 = FastMath.pow(double2, double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertTrue(long1 == long0);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertTrue(long0 == long1);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
  }

  @Test
  public void test136()  throws Throwable  {
      double double0 = (-1727.989419);
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.pow(double1, double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test137()  throws Throwable  {
      double double0 = 2.31374454498291;
      int int0 = (-2395);
      double double1 = FastMath.sinh((double) int0);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.pow(double1, double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test138()  throws Throwable  {
      float float0 = 1736.0F;
      int int0 = 2080;
      float float1 = FastMath.scalb(float0, int0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      
      double double0 = (-1.0143341551207646E-7);
      double double1 = FastMath.pow(double0, (double) float1);
      assertFalse(double0 == double1);
      assertFalse(float0 == float1);
      assertFalse(double1 == double0);
      assertFalse(float1 == float0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test139()  throws Throwable  {
      float float0 = 1736.0F;
      int int0 = 2080;
      float float1 = FastMath.scalb(float0, int0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      
      long long0 = FastMath.abs((long) int0);
      assertEquals(2080L, long0);
      
      double double0 = FastMath.pow((double) long0, (double) float1);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test140()  throws Throwable  {
      int int0 = 3638;
      int int1 = 0;
      int int2 = FastMath.max(int0, int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int1);
      assertTrue(int0 == int2);
      assertEquals(3638, int2);
      
      double double0 = FastMath.log((double) int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.sinh((double) int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(double1 == double0);
      assertFalse(int0 == int1);
      assertTrue(int0 == int2);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.pow(double1, double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(int0 == int1);
      assertTrue(int0 == int2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test141()  throws Throwable  {
      int int0 = 3638;
      double double0 = FastMath.sinh((double) int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.pow(double0, (double) int0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test142()  throws Throwable  {
      float float0 = 1.0F;
      float float1 = FastMath.max(float0, float0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertEquals(1.0F, float1, 0.01F);
      
      double double0 = 0.6724261045455933;
      double double1 = FastMath.pow(double0, (double) float1);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertEquals(0.6724261045455933, double1, 0.01D);
      
      int int0 = 174;
      double double2 = FastMath.log(double1, (double) float1);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertEquals(-0.0, double2, 0.01D);
      
      double double3 = FastMath.pow(double2, (double) int0);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertEquals(0.0, double3, 0.01D);
  }

  @Test
  public void test143()  throws Throwable  {
      float float0 = 1.0F;
      float float1 = FastMath.max(float0, float0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals(1.0F, float1, 0.01F);
      
      double double0 = 0.6724261045455933;
      double double1 = FastMath.log(double0, (double) float1);
      assertTrue(float1 == float0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertTrue(float0 == float1);
      assertEquals(-0.0, double1, 0.01D);
      
      int int0 = (-4552);
      double double2 = FastMath.pow(double1, (double) int0);
      assertTrue(float1 == float0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertTrue(float0 == float1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test144()  throws Throwable  {
      double double0 = -0.0;
      double double1 = 2505.84423;
      double double2 = FastMath.pow(double0, double1);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test145()  throws Throwable  {
      float float0 = 1.0F;
      float float1 = FastMath.max(float0, float0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals(1.0F, float1, 0.01F);
      
      double double0 = 0.6724261045455933;
      double double1 = FastMath.pow(double0, (double) float0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertTrue(float0 == float1);
      assertEquals(0.6724261045455933, double1, 0.01D);
      
      int int0 = (-2323);
      double double2 = FastMath.log(double1, (double) float1);
      assertTrue(float1 == float0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(float0 == float1);
      assertEquals(-0.0, double2, 0.01D);
      
      double double3 = FastMath.pow(double2, (double) int0);
      assertTrue(float1 == float0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertTrue(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertTrue(float0 == float1);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertEquals(Double.NEGATIVE_INFINITY, double3, 0.01D);
  }

  @Test
  public void test146()  throws Throwable  {
      int int0 = 0;
      float float0 = (-1048.093F);
      double double0 = FastMath.pow((double) int0, (double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test147()  throws Throwable  {
      double double0 = (-1188.3508946);
      double double1 = 0.0;
      double double2 = FastMath.pow(double0, double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(1.0, double2, 0.01D);
  }

  @Test
  public void test148()  throws Throwable  {
      double double0 = (-861.9051);
      double double1 = FastMath.log1p(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test149()  throws Throwable  {
      int int0 = 913;
      double double0 = FastMath.pow((double) int0, (double) int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.log1p(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test150()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log1p(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test151()  throws Throwable  {
      double double0 = 0.8109631538391113;
      long long0 = FastMath.round(double0);
      assertEquals(1L, long0);
      
      double double1 = FastMath.pow((double) long0, (double) long0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.0, double1, 0.01D);
  }

  @Test
  public void test152()  throws Throwable  {
      int int0 = (-269);
      double double0 = (-1.4664256074684026);
      double double1 = FastMath.pow(double0, (double) int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1.8882102259093926E-45), double1, 0.01D);
  }

  @Test
  public void test153()  throws Throwable  {
      float float0 = 1.0F;
      float float1 = FastMath.max(float0, float0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals(1.0F, float1, 0.01F);
      
      double double0 = 0.6724261045455933;
      double double1 = 1819.36992763;
      double double2 = FastMath.pow(double0, double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(2.640612961E-314, double2, 0.01D);
      
      double double3 = FastMath.log(double2, (double) float1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertTrue(float1 == float0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertTrue(float0 == float1);
      assertEquals(-0.0, double3, 0.01D);
  }

  @Test
  public void test154()  throws Throwable  {
      double double0 = 3196.1024044888754;
      double double1 = FastMath.cosh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.log10(double1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test155()  throws Throwable  {
      int int0 = 0;
      double double0 = FastMath.cosh((double) int0);
      assertEquals(1.0, double0, 0.01D);
      
      double double1 = FastMath.atanh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test156()  throws Throwable  {
      double double0 = (-1489.4914848245);
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      float float0 = 2110.2312F;
      double double2 = FastMath.pow((double) float0, double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(0.0, double2, 0.01D);
      
      double double3 = FastMath.log(double2, double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertEquals(Double.NaN, double3, 0.01D);
  }

  @Test
  public void test157()  throws Throwable  {
      double double0 = (-2.3114497793159813E-8);
      double double1 = FastMath.expm1(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-2.3114497526019812E-8), double1, 0.01D);
  }

  @Test
  public void test158()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.min(int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0, int1);
      
      double double0 = FastMath.expm1((double) int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test159()  throws Throwable  {
      int int0 = (-728);
      double double0 = FastMath.expm1((double) int0);
      assertEquals((-1.0), double0, 0.01D);
  }

  @Test
  public void test160()  throws Throwable  {
      float float0 = (-1048.093F);
      float float1 = FastMath.signum(float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals((-1.0F), float1, 0.01F);
  }

  @Test
  public void test161()  throws Throwable  {
      float float0 = 1.4E-45F;
      int int0 = FastMath.round(float0);
      assertEquals(0, int0);
      
      float float1 = FastMath.signum((float) int0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test
  public void test162()  throws Throwable  {
      double double0 = 4.473779311490168E-38;
      double double1 = FastMath.atanh(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(4.473779311490168E-38, double1, 0.01D);
  }

  @Test
  public void test163()  throws Throwable  {
      double double0 = 0.087;
      double double1 = FastMath.atanh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.08722050326312049, double1, 0.01D);
  }

  @Test
  public void test164()  throws Throwable  {
      double double0 = 1.7976931348623157E308;
      double double1 = FastMath.sin(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.004961954789184062, double1, 0.01D);
      
      double double2 = FastMath.atanh(double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(0.004961995512540884, double2, 0.01D);
  }

  @Test
  public void test165()  throws Throwable  {
      double double0 = 662.9;
      double double1 = FastMath.sin(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-0.023947802962747435), double1, 0.01D);
      
      double double2 = FastMath.asinh(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals((-0.02394551455335276), double2, 0.01D);
  }

  @Test
  public void test166()  throws Throwable  {
      double double0 = 0.0875862700108075;
      double double1 = FastMath.atanh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.08781127502621158, double1, 0.01D);
      
      double double2 = FastMath.asinh(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(0.08769881532170411, double2, 0.01D);
  }

  @Test
  public void test167()  throws Throwable  {
      double double0 = 0.13755163550376892;
      double double1 = FastMath.asinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.13712153100177288, double1, 0.01D);
  }

  @Test
  public void test168()  throws Throwable  {
      double double0 = 5.865827662008209E-8;
      double double1 = FastMath.sqrt(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(2.4219470807613054E-4, double1, 0.01D);
      
      double double2 = FastMath.asinh(double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(2.4219470570834326E-4, double2, 0.01D);
  }

  @Test
  public void test169()  throws Throwable  {
      double double0 = (-226.41331642);
      int int0 = (-1023);
      double double1 = FastMath.scalb(double0, int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-2.5189317579203065E-306), double1, 0.01D);
      
      double double2 = FastMath.tanh(double1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals((-2.5189317579203065E-306), double2, 0.01D);
  }

  @Test
  public void test170()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.tanh((double) float0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test171()  throws Throwable  {
      double double0 = (-523.2618464858);
      double double1 = FastMath.floor(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-524.0), double1, 0.01D);
      
      double double2 = FastMath.tanh(double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals((-1.0), double2, 0.01D);
  }

  @Test
  public void test172()  throws Throwable  {
      double double0 = (-11.981124440136);
      double double1 = FastMath.toDegrees(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-686.4678642408342), double1, 0.01D);
      
      double double2 = FastMath.cosh(double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(6.732485830384929E297, double2, 0.01D);
      
      double double3 = FastMath.tanh(double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertEquals(1.0, double3, 0.01D);
  }

  @Test
  public void test173()  throws Throwable  {
      double double0 = 0.8109631538391113;
      long long0 = FastMath.round(double0);
      assertEquals(1L, long0);
      
      double double1 = FastMath.tanh((double) long0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.7615941559557649, double1, 0.01D);
  }

  @Test
  public void test174()  throws Throwable  {
      float float0 = 1.4E-45F;
      double double0 = FastMath.sinh((double) float0);
      assertEquals(1.401298464324817E-45, double0, 0.01D);
  }

  @Test
  public void test175()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      double double0 = FastMath.signum((double) float0);
      assertEquals((-1.0), double0, 0.01D);
      
      double double1 = FastMath.sinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1.1752011936438014), double1, 0.01D);
  }

  @Test
  public void test176()  throws Throwable  {
      float float0 = (-48.031662F);
      double double0 = FastMath.sinh((double) float0);
      assertEquals((-3.6212271020482553E20), double0, 0.01D);
  }

  @Test
  public void test177()  throws Throwable  {
      double double0 = (-1188.3508946);
      float float0 = 841.3162F;
      double double1 = FastMath.pow((double) float0, double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
      
      double double2 = FastMath.sinh(double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test178()  throws Throwable  {
      double double0 = 268.0;
      double double1 = FastMath.sinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.229960471813275E116, double1, 0.01D);
  }

  @Test
  public void test179()  throws Throwable  {
      double double0 = (-4.9E-324);
      double double1 = FastMath.cosh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.0, double1, 0.01D);
  }

  @Test
  public void test180()  throws Throwable  {
      double double0 = 3.141592653589793;
      double double1 = FastMath.ceil(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(4.0, double1, 0.01D);
      
      double double2 = FastMath.cosh(double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(27.308232836016487, double2, 0.01D);
  }

  @Test
  public void test181()  throws Throwable  {
      double double0 = 499.4408071042365;
      double double1 = FastMath.cosh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(4.011959747256328E216, double1, 0.01D);
  }

  @Test
  public void test182()  throws Throwable  {
      double double0 = (-1188.3508946);
      double double1 = FastMath.cosh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test183()  throws Throwable  {
      double double0 = (-1188.3508946);
      double double1 = FastMath.nextUp(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1188.3508945999997), double1, 0.01D);
  }

  @Test
  public void test184()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.signum(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
      
      double double2 = FastMath.atan(double1);
      assertTrue(double1 == double2);
      assertTrue(double1 == double0);
      assertTrue(double0 == double2);
      assertTrue(double0 == double1);
      assertTrue(double2 == double0);
      assertTrue(double2 == double1);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test185()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.IEEEremainder(double0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test186()  throws Throwable  {
      double double0 = FastMath.random();
      assertEquals(0.0, double0, 0.01D);
  }
}
