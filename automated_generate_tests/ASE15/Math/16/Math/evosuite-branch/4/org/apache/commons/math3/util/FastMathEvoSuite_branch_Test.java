/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:08:59 GMT 2014
 */

package org.apache.commons.math3.util;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math3.util.FastMath;



import org.junit.runner.RunWith;


public class FastMathEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      double double0 = 0.0;
      long long0 = (-3075L);
      double double1 = FastMath.pow(double0, double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      int int0 = FastMath.round((float) long0);
      assertEquals((-3075), int0);
      
      double double2 = FastMath.acos(double1);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      
      double double3 = FastMath.atan2(double2, (double) int0);
      assertEquals(3.141592653589793, double3, 0.01D);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      assertFalse(double0 == double3);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      
      double double4 = FastMath.tan(double3);
      assertEquals((-1.2246467991473532E-16), double4, 0.01D);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double4);
      assertTrue(double2 == double0);
      assertFalse(double4 == double0);
      assertFalse(double4 == double1);
      assertFalse(double4 == double3);
      assertFalse(double4 == double2);
      assertFalse(double0 == double3);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double4);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double4);
      assertFalse(double1 == double0);
      assertFalse(double3 == double4);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
  }

  @Test
  public void test001()  throws Throwable  {
      float float0 = -0.0F;
      float float1 = FastMath.signum(float0);
      //  // Unstable assertion: assertEquals(-0.0F, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      
      float float2 = FastMath.abs(float1);
      //  // Unstable assertion: assertEquals(0.0F, float2, 0.01F);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertFalse(float0 == float2);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertFalse(float1 == float2);
      //  // Unstable assertion: assertFalse(float2 == float0);
      //  // Unstable assertion: assertFalse(float2 == float1);
      
      float float3 = FastMath.copySign(float0, float2);
      //  // Unstable assertion: assertEquals(0.0F, float3, 0.01F);
      //  // Unstable assertion: assertFalse(float3 == float0);
      //  // Unstable assertion: assertTrue(float3 == float2);
      //  // Unstable assertion: assertFalse(float3 == float1);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertFalse(float0 == float2);
      //  // Unstable assertion: assertFalse(float0 == float3);
      //  // Unstable assertion: assertFalse(float1 == float3);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertFalse(float1 == float2);
      //  // Unstable assertion: assertTrue(float2 == float3);
      //  // Unstable assertion: assertFalse(float2 == float0);
      //  // Unstable assertion: assertFalse(float2 == float1);
  }

  @Test
  public void test002()  throws Throwable  {
      int int0 = 0;
      float float0 = (-841.9F);
      float float1 = FastMath.copySign((float) int0, float0);
      assertEquals(-0.0F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test003()  throws Throwable  {
      float float0 = (-5397.7314F);
      int int0 = FastMath.round(float0);
      assertEquals((-5398), int0);
      
      float float1 = FastMath.copySign((float) int0, (float) int0);
      assertEquals((-5398.0F), float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test004()  throws Throwable  {
      double double0 = (-426.05390600128914);
      double double1 = FastMath.expm1(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.copySign(double1, double0);
      assertEquals((-1.0), double2, 0.01D);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test005()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.ulp(double0);
      assertEquals(4.9E-324, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = (-1628.7251392865155);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.max(double2, double2);
      assertEquals((-1628.7251392865155), double3, 0.01D);
      assertTrue(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double3 == double1);
      assertTrue(double3 == double2);
      assertFalse(double3 == double0);
      
      double double4 = FastMath.copySign(double1, double3);
      assertEquals((-4.9E-324), double4, 0.01D);
      assertFalse(double4 == double3);
      assertFalse(double4 == double2);
      assertFalse(double4 == double0);
      assertFalse(double4 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double4);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertTrue(double2 == double3);
      assertFalse(double2 == double4);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double3 == double1);
      assertFalse(double3 == double4);
      assertTrue(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double1 == double4);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test006()  throws Throwable  {
      double double0 = (-349.844404646568);
      double double1 = FastMath.log(double0, double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int0 = (-4235);
      int int1 = FastMath.min(int0, int0);
      assertEquals((-4235), int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      double double2 = FastMath.copySign((double) int1, double1);
      assertEquals(4235.0, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(int1 == int0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(int0 == int1);
  }

  @Test
  public void test007()  throws Throwable  {
      long long0 = (-954L);
      long long1 = FastMath.min(long0, long0);
      assertEquals((-954L), long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      
      float float0 = 0.0F;
      float float1 = FastMath.copySign(float0, float0);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double0 = FastMath.hypot((double) float1, (double) long1);
      assertEquals(954.0, double0, 0.01D);
      assertTrue(long0 == long1);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertTrue(long1 == long0);
  }

  @Test
  public void test008()  throws Throwable  {
      double double0 = (-5.1088103279787804E-8);
      int int0 = 18;
      double double1 = FastMath.hypot((double) int0, double0);
      assertEquals(18.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test009()  throws Throwable  {
      int int0 = 1410;
      double double0 = (-73.430171);
      double double1 = FastMath.log(double0, (double) int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double2 = FastMath.hypot((double) int0, double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
  }

  @Test
  public void test010()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.cbrt(double0);
      //  // Unstable assertion: assertEquals(0.0, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertTrue(double1 == double0);
      
      double double2 = 2.268329019570017E70;
      //  // Unstable assertion: assertFalse(double2 == double1);
      
      double double3 = FastMath.acos(double2);
      //  // Unstable assertion: assertEquals(Double.NaN, double3, 0.01D);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double0);
      
      double double4 = FastMath.hypot(double3, double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double4, 0.01D);
      //  // Unstable assertion: assertFalse(double4 == double2);
      //  // Unstable assertion: assertFalse(double4 == double0);
      //  // Unstable assertion: assertTrue(double4 == double3);
      //  // Unstable assertion: assertFalse(double4 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double4);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertTrue(double3 == double4);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double4);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double4);
  }

  @Test
  public void test011()  throws Throwable  {
      double double0 = (-6.017681359527226E272);
      double double1 = FastMath.sinh(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      int int0 = 1040;
      float float0 = FastMath.max((float) int0, (float) int0);
      assertEquals(1040.0F, float0, 0.01F);
      
      double double2 = FastMath.hypot((double) float0, double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test012()  throws Throwable  {
      float float0 = (-93.248344F);
      int int0 = 1024;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = FastMath.hypot((double) float1, (double) float1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test013()  throws Throwable  {
      double double0 = -0.0;
      double double1 = FastMath.max(double0, double0);
      assertEquals(-0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test014()  throws Throwable  {
      int int0 = (-527);
      int int1 = FastMath.min(int0, int0);
      assertEquals((-527), int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      double double0 = 0.0;
      int int2 = FastMath.getExponent(double0);
      assertEquals((-1023), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      double double1 = FastMath.max((double) int2, (double) int1);
      assertEquals((-527.0), double1, 0.01D);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int2);
      assertTrue(int0 == int1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test015()  throws Throwable  {
      double double0 = (-349.844404646568);
      int int0 = (-4235);
      int int1 = FastMath.min(int0, int0);
      assertEquals((-4235), int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      double double1 = FastMath.max(double0, (double) int1);
      assertEquals((-349.844404646568), double1, 0.01D);
      assertTrue(int0 == int1);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertTrue(int1 == int0);
  }

  @Test
  public void test016()  throws Throwable  {
      int int0 = 0;
      float float0 = -0.0F;
      float float1 = FastMath.max(float0, (float) int0);
      //  // Unstable assertion: assertEquals(0.0F, float1, 0.01F);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertFalse(float1 == float0);
  }

  @Test
  public void test017()  throws Throwable  {
      double double0 = 0.16666666666666666;
      double double1 = FastMath.abs(double0);
      assertEquals(0.16666666666666666, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      int int0 = FastMath.getExponent(double1);
      assertEquals((-3), int0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      float float0 = 699.95F;
      float float1 = FastMath.max((float) int0, float0);
      assertEquals(699.95F, float1, 0.01F);
      assertTrue(double1 == double0);
      assertTrue(float1 == float0);
      assertTrue(double0 == double1);
      assertTrue(float0 == float1);
  }

  @Test
  public void test018()  throws Throwable  {
      float float0 = 556.7859F;
      int int0 = 0;
      float float1 = FastMath.max(float0, (float) int0);
      assertEquals(556.7859F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test
  public void test019()  throws Throwable  {
      float float0 = (-1.0F);
      int int0 = FastMath.round(float0);
      assertEquals((-1), int0);
      
      int int1 = (-422);
      assertFalse(int1 == int0);
      
      int int2 = FastMath.max(int0, int1);
      assertEquals((-1), int2);
      assertFalse(int0 == int1);
      assertTrue(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test
  public void test020()  throws Throwable  {
      float float0 = -0.0F;
      float float1 = FastMath.signum(float0);
      assertEquals(-0.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double0 = FastMath.min((double) float1, (double) float1);
      assertEquals(-0.0, double0, 0.01D);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test
  public void test021()  throws Throwable  {
      double double0 = (-3.356118100840571E-7);
      float float0 = (-505.786F);
      double double1 = FastMath.min((double) float0, double0);
      assertEquals((-505.7860107421875), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test022()  throws Throwable  {
      double double0 = 0.16666666666666666;
      double double1 = FastMath.abs(double0);
      assertEquals(0.16666666666666666, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      double double2 = 1944.3;
      assertFalse(double2 == double1);
      
      int int0 = FastMath.getExponent(double2);
      assertEquals(10, int0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.min((double) int0, double1);
      assertEquals(0.16666666666666666, double3, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double3 == double2);
      assertTrue(double3 == double1);
      assertTrue(double3 == double0);
      assertTrue(double1 == double0);
      assertTrue(double1 == double3);
      assertFalse(double1 == double2);
  }

  @Test
  public void test023()  throws Throwable  {
      float float0 = (-505.786F);
      int int0 = FastMath.round(float0);
      assertEquals((-506), int0);
      
      double double0 = FastMath.min((double) int0, (double) int0);
      assertEquals((-506.0), double0, 0.01D);
  }

  @Test
  public void test024()  throws Throwable  {
      int int0 = 0;
      float float0 = -0.0F;
      float float1 = FastMath.min(float0, (float) int0);
      assertEquals(-0.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test
  public void test025()  throws Throwable  {
      float float0 = 1.0F;
      int int0 = 0;
      float float1 = FastMath.min((float) int0, float0);
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test026()  throws Throwable  {
      float float0 = (-505.786F);
      int int0 = FastMath.round(float0);
      assertEquals((-506), int0);
      
      float float1 = FastMath.min(float0, (float) int0);
      assertEquals((-506.0F), float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test027()  throws Throwable  {
      int int0 = 0;
      int int1 = 4552;
      int int2 = FastMath.max(int0, int1);
      assertEquals(4552, int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      
      int int3 = FastMath.min(int2, int0);
      assertEquals(0, int3);
      assertFalse(int0 == int1);
      assertTrue(int0 == int3);
      assertFalse(int0 == int2);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int1 == int3);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
  }

  @Test
  public void test028()  throws Throwable  {
      double double0 = 1623.5;
      double double1 = FastMath.rint(double0);
      assertEquals(1624.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test029()  throws Throwable  {
      double double0 = (-1.0E-6);
      double double1 = FastMath.toRadians(double0);
      assertEquals((-1.7453292519943295E-8), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.rint(double1);
      assertEquals(-0.0, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test030()  throws Throwable  {
      int int0 = (-527);
      int int1 = FastMath.min(int0, int0);
      assertEquals((-527), int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      double double0 = FastMath.sin((double) int1);
      assertEquals(0.708637871481491, double0, 0.01D);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      double double1 = FastMath.rint(double0);
      assertEquals(1.0, double1, 0.01D);
      assertTrue(int0 == int1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test031()  throws Throwable  {
      float float0 = (-505.786F);
      int int0 = FastMath.round(float0);
      assertEquals((-506), int0);
      
      double double0 = FastMath.rint((double) int0);
      assertEquals((-506.0), double0, 0.01D);
  }

  @Test
  public void test032()  throws Throwable  {
      double double0 = (-4.813899778443457E-9);
      double double1 = FastMath.ceil(double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test033()  throws Throwable  {
      float float0 = 2444.5251F;
      double double0 = FastMath.ulp((double) float0);
      assertEquals(4.547473508864641E-13, double0, 0.01D);
      
      double double1 = FastMath.ceil(double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test034()  throws Throwable  {
      float float0 = -0.0F;
      float float1 = FastMath.signum(float0);
      assertEquals(-0.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double0 = FastMath.ceil((double) float1);
      assertEquals(-0.0, double0, 0.01D);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test
  public void test035()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      int int0 = FastMath.round(float0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test
  public void test036()  throws Throwable  {
      double double0 = 0.0;
      long long0 = FastMath.round(double0);
      assertEquals(0L, long0);
      
      double double1 = (-2475.30321264736);
      float float0 = FastMath.nextAfter((float) long0, double1);
      assertEquals((-1.4E-45F), float0, 0.01F);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test037()  throws Throwable  {
      long long0 = 0L;
      long long1 = FastMath.abs(long0);
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      float float0 = FastMath.nextUp((float) long1);
      assertEquals(1.4E-45F, float0, 0.01F);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
  }

  @Test
  public void test038()  throws Throwable  {
      int int0 = 1410;
      long long0 = FastMath.min((long) int0, (long) int0);
      assertEquals(1410L, long0);
      
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.nextAfter(float0, (double) long0);
      assertEquals((-3.4028235E38F), float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test039()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      long long0 = 2779L;
      float float1 = FastMath.nextAfter(float0, (double) long0);
      assertEquals(3.4028235E38F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test040()  throws Throwable  {
      int int0 = 1410;
      double double0 = (-73.430171);
      double double1 = FastMath.log(double0, (double) int0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      float float0 = FastMath.nextAfter((float) int0, double1);
      assertEquals(Float.NaN, float0, 0.01F);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test041()  throws Throwable  {
      float float0 = Float.NaN;
      float float1 = FastMath.nextUp(float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
  }

  @Test
  public void test042()  throws Throwable  {
      float float0 = -0.0F;
      float float1 = FastMath.signum(float0);
      assertEquals(-0.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double0 = FastMath.atan2((double) float1, (double) float1);
      assertEquals((-3.141592653589793), double0, 0.01D);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      float float2 = (-5397.7314F);
      assertFalse(float2 == float1);
      
      double double1 = FastMath.nextAfter(double0, (double) float2);
      assertEquals((-3.1415926535897936), double1, 0.01D);
      assertFalse(float1 == float2);
      assertTrue(float1 == float0);
      assertFalse(double1 == double0);
      assertTrue(float0 == float1);
      assertFalse(float0 == float2);
      assertFalse(double0 == double1);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
  }

  @Test
  public void test043()  throws Throwable  {
      double double0 = (-2490.986760465);
      int int0 = 834;
      double double1 = FastMath.nextAfter((double) int0, double0);
      assertEquals(833.9999999999999, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test044()  throws Throwable  {
      double double0 = 1969.644161692663;
      double double1 = FastMath.floor(double0);
      assertEquals(1969.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      int int0 = 0;
      double double2 = FastMath.nextAfter((double) int0, double1);
      assertEquals(4.9E-324, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test045()  throws Throwable  {
      long long0 = (-954L);
      long long1 = 0L;
      double double0 = FastMath.nextAfter((double) long1, (double) long0);
      assertEquals((-4.9E-324), double0, 0.01D);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
  }

  @Test
  public void test046()  throws Throwable  {
      int int0 = 1410;
      float float0 = Float.NEGATIVE_INFINITY;
      double double0 = FastMath.nextAfter((double) float0, (double) int0);
      assertEquals((-1.7976931348623157E308), double0, 0.01D);
  }

  @Test
  public void test047()  throws Throwable  {
      long long0 = 1733L;
      int int0 = 1172;
      double double0 = FastMath.scalb((double) long0, int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.nextAfter(double0, (double) int0);
      assertEquals(1.7976931348623157E308, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test048()  throws Throwable  {
      int int0 = (-2197);
      int int1 = FastMath.abs(int0);
      //  // Unstable assertion: assertEquals(2197, int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      
      double double0 = FastMath.asin((double) int1);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      
      double double1 = FastMath.nextAfter((double) int0, double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertFalse(int0 == int1);
  }

  @Test
  public void test049()  throws Throwable  {
      int int0 = (-2465);
      double double0 = FastMath.sqrt((double) int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      
      double double1 = FastMath.nextUp(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertTrue(double1 == double0);
  }

  @Test
  public void test050()  throws Throwable  {
      int int0 = (-1494);
      int int1 = 146;
      float float0 = FastMath.scalb((float) int0, int1);
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test051()  throws Throwable  {
      int int0 = (-2197);
      int int1 = FastMath.abs(int0);
      assertEquals(2197, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      int int2 = (-172);
      assertFalse(int2 == int1);
      
      float float0 = FastMath.scalb((float) int1, int2);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
  }

  @Test
  public void test052()  throws Throwable  {
      float float0 = 323.27692F;
      int int0 = (-144);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(1.4496E-41F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test053()  throws Throwable  {
      int int0 = (-2197);
      int int1 = FastMath.abs(int0);
      assertEquals(2197, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      int int2 = (-144);
      assertFalse(int2 == int1);
      
      float float0 = FastMath.scalb((float) int1, int2);
      assertEquals(9.8517E-41F, float0, 0.01F);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
  }

  @Test
  public void test054()  throws Throwable  {
      int int0 = (-2197);
      int int1 = (-172);
      float float0 = FastMath.scalb((float) int0, int1);
      assertEquals(-0.0F, float0, 0.01F);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test055()  throws Throwable  {
      int int0 = 1024;
      int int1 = 146;
      float float0 = FastMath.scalb((float) int0, int1);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test056()  throws Throwable  {
      float float0 = 2171.9863F;
      int int0 = 1808;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test057()  throws Throwable  {
      int int0 = (-2197);
      int int1 = FastMath.abs(int0);
      assertEquals(2197, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      int int2 = (-127);
      assertFalse(int2 == int1);
      
      float float0 = FastMath.scalb((float) int1, int2);
      assertEquals(1.2912805E-35F, float0, 0.01F);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test
  public void test058()  throws Throwable  {
      float float0 = (-505.786F);
      int int0 = FastMath.round(float0);
      assertEquals((-506), int0);
      
      double double0 = 0.0;
      long long0 = FastMath.round(double0);
      assertEquals(0L, long0);
      
      float float1 = FastMath.scalb((float) long0, int0);
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test059()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      int int0 = (-641);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test
  public void test060()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = 0;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
  }

  @Test
  public void test061()  throws Throwable  {
      double double0 = 2.5187968110874885E-38;
      int int0 = 1064;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(4.978614747923594E282, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test062()  throws Throwable  {
      float float0 = 2171.9863F;
      int int0 = (-1250);
      double double0 = FastMath.scalb((double) float0, int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test063()  throws Throwable  {
      double double0 = (-169.1187444);
      int int0 = (-1039);
      double double1 = FastMath.scalb(double0, int0);
      assertEquals((-2.870954110321E-311), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test064()  throws Throwable  {
      double double0 = 1812.9;
      int int0 = (-1033);
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(1.9696466787537625E-308, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test065()  throws Throwable  {
      int int0 = (-1494);
      double double0 = 1.8928981707279692E271;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(3.453931574455612E-179, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test066()  throws Throwable  {
      double double0 = (-2490.986760465);
      int int0 = 2780;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test067()  throws Throwable  {
      long long0 = (-954L);
      long long1 = FastMath.min(long0, long0);
      assertEquals((-954L), long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      
      long long2 = 1498L;
      assertFalse(long2 == long1);
      
      long long3 = FastMath.max(long2, long1);
      assertEquals(1498L, long3);
      assertFalse(long3 == long1);
      assertFalse(long3 == long0);
      assertTrue(long3 == long2);
      assertFalse(long0 == long2);
      assertTrue(long0 == long1);
      assertFalse(long0 == long3);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertTrue(long2 == long3);
      assertFalse(long1 == long2);
      assertFalse(long1 == long3);
      assertTrue(long1 == long0);
      
      int int0 = (-4319);
      double double0 = FastMath.scalb((double) long3, int0);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(long3 == long1);
      assertFalse(long3 == long0);
      assertTrue(long3 == long2);
      assertFalse(long0 == long2);
      assertTrue(long0 == long1);
      assertFalse(long0 == long3);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertTrue(long2 == long3);
      assertFalse(long1 == long2);
      assertFalse(long1 == long3);
      assertTrue(long1 == long0);
  }

  @Test
  public void test068()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = FastMath.getExponent((double) float0);
      assertEquals((-1023), int0);
      
      int int1 = (-3363);
      assertFalse(int1 == int0);
      
      double double0 = FastMath.scalb((double) int0, int1);
      assertEquals(-0.0, double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test069()  throws Throwable  {
      float float0 = 1.0F;
      int int0 = FastMath.getExponent(float0);
      assertEquals(0, int0);
      
      double double0 = FastMath.hypot((double) int0, (double) int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test070()  throws Throwable  {
      double double0 = (-9.481088691357648E229);
      double double1 = FastMath.acosh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      int int0 = (-4772);
      double double2 = FastMath.scalb(double1, int0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
  }

  @Test
  public void test071()  throws Throwable  {
      int int0 = 1410;
      double double0 = (-73.430171);
      double double1 = FastMath.log(double0, (double) int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      int int1 = FastMath.abs(int0);
      //  // Unstable assertion: assertEquals(1410, int1);
      //  // Unstable assertion: assertTrue(int1 == int0);
      //  // Unstable assertion: assertTrue(int0 == int1);
      
      double double2 = FastMath.scalb(double1, int1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertTrue(int1 == int0);
      //  // Unstable assertion: assertTrue(int0 == int1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
  }

  @Test
  public void test072()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.ulp(float0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test073()  throws Throwable  {
      int int0 = (-4235);
      int int1 = FastMath.min(int0, int0);
      assertEquals((-4235), int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      float float0 = FastMath.ulp((float) int1);
      assertEquals(4.8828125E-4F, float0, 0.01F);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test074()  throws Throwable  {
      double double0 = (-9.481088691357648E229);
      double double1 = FastMath.acosh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.ulp(double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test075()  throws Throwable  {
      long long0 = 0L;
      long long1 = FastMath.max(long0, long0);
      assertEquals(0L, long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      
      double double0 = FastMath.abs((double) long1);
      assertEquals(0.0, double0, 0.01D);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
  }

  @Test
  public void test076()  throws Throwable  {
      float float0 = (-505.786F);
      int int0 = FastMath.round(float0);
      assertEquals((-506), int0);
      
      float float1 = FastMath.abs((float) int0);
      assertEquals(506.0F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test077()  throws Throwable  {
      long long0 = (-3075L);
      int int0 = FastMath.round((float) long0);
      assertEquals((-3075), int0);
      
      long long1 = FastMath.abs((long) int0);
      assertEquals(3075L, long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
  }

  @Test
  public void test078()  throws Throwable  {
      float float0 = 0.0F;
      long long0 = FastMath.round((double) float0);
      assertEquals(0L, long0);
      
      double double0 = FastMath.toDegrees((double) long0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test079()  throws Throwable  {
      float float0 = (-505.786F);
      int int0 = FastMath.round(float0);
      assertEquals((-506), int0);
      
      double double0 = FastMath.toDegrees((double) int0);
      assertEquals((-28991.664433619655), double0, 0.01D);
  }

  @Test
  public void test080()  throws Throwable  {
      long long0 = 1733L;
      int int0 = 1172;
      double double0 = FastMath.scalb((double) long0, int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.toDegrees(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test081()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.toRadians(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test082()  throws Throwable  {
      double double0 = 3468.586699;
      double double1 = FastMath.exp(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.toRadians(double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
  }

  @Test
  public void test083()  throws Throwable  {
      double double0 = (-1.7846700158234043E30);
      double double1 = FastMath.sqrt(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double2 = FastMath.cbrt(double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
  }

  @Test
  public void test084()  throws Throwable  {
      float float0 = 1.0F;
      int int0 = FastMath.getExponent(float0);
      assertEquals(0, int0);
      
      double double0 = FastMath.ulp((double) int0);
      assertEquals(4.9E-324, double0, 0.01D);
      
      double double1 = FastMath.cbrt(double0);
      assertEquals(1.7031839360032603E-108, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test085()  throws Throwable  {
      double double0 = (-2490.986760465);
      int int0 = 834;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals((-2.8535652198060134E254), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.cbrt(double1);
      assertEquals((-6.583587333674459E84), double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test086()  throws Throwable  {
      double double0 = 0.24740394949913025;
      double double1 = FastMath.acos(double0);
      assertEquals(1.3207963368632913, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test087()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.acos(double0);
      assertEquals(1.5707963267948966, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test088()  throws Throwable  {
      float float0 = (-1.0F);
      double double0 = FastMath.acos((double) float0);
      assertEquals(3.141592653589793, double0, 0.01D);
  }

  @Test
  public void test089()  throws Throwable  {
      double double0 = (-975.9542);
      double double1 = FastMath.acos(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test090()  throws Throwable  {
      float float0 = (-1.0F);
      int int0 = FastMath.round(float0);
      assertEquals((-1), int0);
      
      double double0 = FastMath.asin((double) int0);
      assertEquals((-1.5707963267948966), double0, 0.01D);
  }

  @Test
  public void test091()  throws Throwable  {
      double double0 = 0.24740394949913025;
      double double1 = FastMath.floor(double0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.cos(double1);
      assertEquals(1.0, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.asin(double2);
      assertEquals(1.5707963267948966, double3, 0.01D);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
  }

  @Test
  public void test092()  throws Throwable  {
      float float0 = (-505.786F);
      int int0 = FastMath.round(float0);
      assertEquals((-506), int0);
      
      double double0 = 3190.2285582327763;
      double double1 = FastMath.IEEEremainder(double0, (double) int0);
      assertEquals(154.22855823277632, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.asin(double1);
      assertEquals(Double.NaN, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test093()  throws Throwable  {
      int int0 = (-527);
      int int1 = FastMath.min(int0, int0);
      assertEquals((-527), int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      double double0 = FastMath.sin((double) int1);
      assertEquals(0.708637871481491, double0, 0.01D);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      double double1 = FastMath.atan2(double0, double0);
      assertEquals(0.7853981633974483, double1, 0.01D);
      assertTrue(int0 == int1);
      assertFalse(double0 == double1);
      assertTrue(int1 == int0);
      assertFalse(double1 == double0);
  }

  @Test
  public void test094()  throws Throwable  {
      int int0 = (-527);
      int int1 = FastMath.min(int0, int0);
      assertEquals((-527), int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      double double0 = FastMath.atan2((double) int1, (double) int1);
      assertEquals((-2.356194490192345), double0, 0.01D);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test095()  throws Throwable  {
      double double0 = 0.0;
      long long0 = FastMath.round(double0);
      assertEquals(0L, long0);
      
      int int0 = 624;
      int int1 = FastMath.abs(int0);
      assertEquals(624, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      double double1 = FastMath.atan2((double) int1, (double) long0);
      assertEquals(1.5707963267948966, double1, 0.01D);
      assertFalse(double1 == double0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test096()  throws Throwable  {
      double double0 = (-1949.63309);
      double double1 = 0.0;
      double double2 = FastMath.atan2(double0, double1);
      assertEquals((-1.5707963267948966), double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test097()  throws Throwable  {
      double double0 = (-9.481088691357648E229);
      double double1 = FastMath.sinh(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.atan2(double0, double1);
      assertEquals((-3.141592653589793), double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test098()  throws Throwable  {
      double double0 = (-9.481088691357648E229);
      double double1 = FastMath.acosh(double0);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      double double2 = FastMath.log10(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      
      double double3 = FastMath.atan2(double2, double1);
      //  // Unstable assertion: assertEquals(0.0, double3, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
  }

  @Test
  public void test099()  throws Throwable  {
      double double0 = (-9.481088691357648E229);
      double double1 = FastMath.acosh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.atan2(double0, double1);
      assertEquals(-0.0, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test100()  throws Throwable  {
      double double0 = (-9.481088691357648E229);
      double double1 = FastMath.acosh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.sinh(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      
      double double3 = FastMath.atan2(double2, double1);
      assertEquals((-0.7853981633974483), double3, 0.01D);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
  }

  @Test
  public void test101()  throws Throwable  {
      double double0 = (-4.813899778443457E-9);
      int int0 = 1213;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.atan2(double1, double0);
      assertEquals((-1.5707963267948966), double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test102()  throws Throwable  {
      double double0 = (-9.481088691357648E229);
      double double1 = FastMath.acosh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.atan2(double1, double1);
      assertEquals(0.7853981633974483, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test103()  throws Throwable  {
      double double0 = (-130.560774);
      double double1 = 3468.586699;
      double double2 = FastMath.exp(double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      
      double double3 = FastMath.atan2(double2, double0);
      assertEquals(1.5707963267948966, double3, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test104()  throws Throwable  {
      double double0 = (-1628.7251392865155);
      double double1 = FastMath.atan(double0);
      assertEquals((-1.5701823497338057), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test105()  throws Throwable  {
      float float0 = 2444.5251F;
      double double0 = FastMath.ulp((double) float0);
      assertEquals(4.547473508864641E-13, double0, 0.01D);
      
      double double1 = FastMath.asin(double0);
      assertEquals(4.547473508864641E-13, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test106()  throws Throwable  {
      int int0 = (-527);
      int int1 = FastMath.min(int0, int0);
      assertEquals((-527), int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      double double0 = FastMath.IEEEremainder((double) int0, (double) int1);
      assertEquals(-0.0, double0, 0.01D);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      int int2 = FastMath.abs(int0);
      assertEquals(527, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(int0 == int1);
      assertFalse(int0 == int2);
      
      double double1 = FastMath.ulp(double0);
      assertEquals(4.9E-324, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(int1 == int2);
      assertTrue(int1 == int0);
      assertFalse(double0 == double1);
      assertTrue(int0 == int1);
      assertFalse(int0 == int2);
      
      double double2 = FastMath.atan2((double) int2, double1);
      assertEquals(1.5707963267948966, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int2);
      assertTrue(int1 == int0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(int0 == int1);
      assertFalse(int0 == int2);
  }

  @Test
  public void test107()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.atan(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test108()  throws Throwable  {
      float float0 = 3669.31F;
      float float1 = FastMath.nextUp(float0);
      assertEquals(3669.3103F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = FastMath.tan((double) float1);
      assertEquals((-0.07003080715363866), double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test109()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log10(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.tan(double1);
      assertEquals(Double.NaN, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test110()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.tan(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test111()  throws Throwable  {
      double double0 = 218.98624137163912;
      double double1 = FastMath.cos(double0);
      assertEquals(0.6016394077531296, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test112()  throws Throwable  {
      double double0 = (-2490.986760465);
      double double1 = FastMath.cos(double0);
      assertEquals((-0.9564485282893176), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test113()  throws Throwable  {
      double double0 = 3468.586699;
      double double1 = FastMath.exp(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.cos(double1);
      assertEquals(Double.NaN, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test114()  throws Throwable  {
      float float0 = (-505.786F);
      double double0 = FastMath.sin((double) float0);
      assertEquals((-0.010406297941925916), double0, 0.01D);
  }

  @Test
  public void test115()  throws Throwable  {
      float float0 = 1.0F;
      int int0 = FastMath.getExponent(float0);
      assertEquals(0, int0);
      
      double double0 = FastMath.log((double) float0, (double) int0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.sin(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test116()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.atan2(double0, double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      double double2 = FastMath.sin(double1);
      assertEquals(0.0, double2, 0.01D);
      assertTrue(double1 == double2);
      assertTrue(double1 == double0);
      assertTrue(double2 == double0);
      assertTrue(double2 == double1);
      assertTrue(double0 == double1);
      assertTrue(double0 == double2);
  }

  @Test
  public void test117()  throws Throwable  {
      double double0 = 6.098975200926637E77;
      double double1 = FastMath.tan(double0);
      assertEquals(2.1464947944454567, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test118()  throws Throwable  {
      double double0 = (-5.235397688850367E180);
      double double1 = FastMath.sin(double0);
      assertEquals(0.41143330321337285, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test119()  throws Throwable  {
      double double0 = 2.5904487437231458E96;
      double double1 = FastMath.cos(double0);
      assertEquals(0.930059265324741, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test120()  throws Throwable  {
      double double0 = (-4.952031310451961E63);
      double double1 = FastMath.sin(double0);
      assertEquals(0.16970188123012234, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test121()  throws Throwable  {
      long long0 = (-88L);
      double double0 = FastMath.sinh((double) long0);
      assertEquals((-8.258181274970009E37), double0, 0.01D);
      
      double double1 = FastMath.sin(double0);
      assertEquals((-0.9996106924231769), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test122()  throws Throwable  {
      double double0 = 1.0143022354947225E63;
      double double1 = FastMath.sin(double0);
      assertEquals(0.3947315339062494, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test123()  throws Throwable  {
      double double0 = (-1.7846700158234043E30);
      double double1 = FastMath.sin(double0);
      assertEquals(0.8162175225182366, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test124()  throws Throwable  {
      double double0 = 1.73927483790327808E18;
      double double1 = FastMath.tan(double0);
      assertEquals(0.38898204164678446, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test125()  throws Throwable  {
      double double0 = (-9.481088691357648E229);
      double double1 = FastMath.acosh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      long long0 = FastMath.round(double1);
      assertEquals(9223372036854775807L, long0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.sin((double) long0);
      assertEquals(0.9999303766734422, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test126()  throws Throwable  {
      float float0 = (-1.0F);
      int int0 = FastMath.round(float0);
      assertEquals((-1), int0);
      
      double double0 = FastMath.tan((double) int0);
      assertEquals((-1.5574077246549023), double0, 0.01D);
  }

  @Test
  public void test127()  throws Throwable  {
      double double0 = (-349.844404646568);
      double double1 = FastMath.log(double0, double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = 3282.5632793572786;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.copySign(double2, double1);
      assertEquals(3282.5632793572786, double3, 0.01D);
      assertTrue(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertTrue(double3 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      
      double double4 = FastMath.tan(double3);
      assertEquals((-0.4240239619603122), double4, 0.01D);
      assertTrue(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double4);
      assertFalse(double2 == double0);
      assertFalse(double1 == double4);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double4 == double3);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertFalse(double4 == double0);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double4);
      assertTrue(double3 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double4);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test128()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.asin((double) float0);
      assertEquals(0.0, double0, 0.01D);
      
      int int0 = 2173;
      double double1 = FastMath.pow(double0, int0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test129()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = 0;
      double double0 = FastMath.pow((double) float0, int0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test130()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = FastMath.getExponent((double) float0);
      assertEquals((-1023), int0);
      
      double double0 = FastMath.pow((double) float0, int0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test131()  throws Throwable  {
      long long0 = 623L;
      long long1 = (-88L);
      long long2 = FastMath.min(long0, long1);
      assertEquals((-88L), long2);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(long1 == long0);
      assertTrue(long1 == long2);
      
      double double0 = FastMath.pow((double) long2, (double) long0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(long1 == long0);
      assertTrue(long1 == long2);
  }

  @Test
  public void test132()  throws Throwable  {
      int int0 = (-1494);
      double double0 = FastMath.pow((double) int0, (double) int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test133()  throws Throwable  {
      float float0 = (-93.248344F);
      double double0 = FastMath.asin((double) float0);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      
      double double1 = FastMath.pow((double) float0, double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertTrue(double1 == double0);
  }

  @Test
  public void test134()  throws Throwable  {
      double double0 = (-3.825558165008403E-137);
      double double1 = FastMath.sin(double0);
      assertEquals((-3.825558165008403E-137), double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      double double2 = FastMath.pow(double1, double1);
      assertEquals(Double.NaN, double2, 0.01D);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
  }

  @Test
  public void test135()  throws Throwable  {
      double double0 = (-4.813899778443457E-9);
      int int0 = 1213;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.pow((double) int0, double1);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test136()  throws Throwable  {
      double double0 = (-4.813899778443457E-9);
      int int0 = 1213;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.pow(double0, double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test137()  throws Throwable  {
      double double0 = (-9.481088691357648E229);
      double double1 = FastMath.sinh(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = 1419.9931071038295;
      assertFalse(double2 == double1);
      
      long long0 = FastMath.round(double2);
      assertEquals(1420L, long0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      
      double double3 = FastMath.pow(double1, (double) long0);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
  }

  @Test
  public void test138()  throws Throwable  {
      double double0 = (-9.481088691357648E229);
      double double1 = FastMath.sinh(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      float float0 = (-1.0F);
      int int0 = FastMath.round(float0);
      assertEquals((-1), int0);
      
      double double2 = FastMath.pow(double1, (double) int0);
      assertEquals(-0.0, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test139()  throws Throwable  {
      double double0 = (-9.481088691357648E229);
      double double1 = FastMath.sinh(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      float float0 = (-52.21603F);
      int int0 = FastMath.round(float0);
      assertEquals((-52), int0);
      
      double double2 = FastMath.pow(double1, (double) int0);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test140()  throws Throwable  {
      double double0 = (-9.481088691357648E229);
      double double1 = FastMath.acosh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.sinh(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      
      double double3 = FastMath.sinh(double2);
      assertEquals(Double.NEGATIVE_INFINITY, double3, 0.01D);
      assertTrue(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertTrue(double3 == double2);
      
      long long0 = FastMath.round(double1);
      assertEquals(9223372036854775807L, long0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      
      double double4 = FastMath.pow(double3, (double) long0);
      assertEquals(Double.NEGATIVE_INFINITY, double4, 0.01D);
      assertTrue(double2 == double4);
      assertTrue(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double4);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double4);
      assertFalse(double1 == double0);
      assertTrue(double4 == double2);
      assertTrue(double4 == double3);
      assertFalse(double4 == double1);
      assertFalse(double4 == double0);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertTrue(double3 == double4);
      assertTrue(double3 == double2);
  }

  @Test
  public void test141()  throws Throwable  {
      double double0 = 17.426716074031784;
      int int0 = 1213;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.pow(double0, double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
  }

  @Test
  public void test142()  throws Throwable  {
      double double0 = (-9.481088691357648E229);
      double double1 = FastMath.acosh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      float float0 = (-52.21603F);
      int int0 = FastMath.round(float0);
      assertEquals((-52), int0);
      
      double double2 = FastMath.pow(double1, (double) int0);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test143()  throws Throwable  {
      double double0 = (-9.481088691357648E229);
      double double1 = FastMath.acosh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      long long0 = FastMath.round(double1);
      assertEquals(9223372036854775807L, long0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.pow(double1, (double) long0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test144()  throws Throwable  {
      float float0 = (-1082.023F);
      float float1 = 1.4E-45F;
      float float2 = FastMath.min(float1, float1);
      assertEquals(1.4E-45F, float2, 0.01F);
      assertTrue(float1 == float2);
      assertFalse(float1 == float0);
      assertFalse(float2 == float0);
      assertTrue(float2 == float1);
      
      double double0 = FastMath.IEEEremainder((double) float0, (double) float0);
      assertEquals(-0.0, double0, 0.01D);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      
      double double1 = FastMath.log((double) float1, (double) float2);
      assertEquals(1.0, double1, 0.01D);
      assertTrue(float1 == float2);
      assertFalse(float1 == float0);
      assertFalse(float2 == float0);
      assertTrue(float2 == float1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.pow(double0, double1);
      assertEquals(-0.0, double2, 0.01D);
      assertTrue(float1 == float2);
      assertFalse(float1 == float0);
      assertTrue(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
      assertFalse(float2 == float0);
      assertTrue(float2 == float1);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test145()  throws Throwable  {
      double double0 = 0.031;
      double double1 = FastMath.nextAfter(double0, double0);
      assertEquals(0.031, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      float float0 = (-93.248344F);
      int int0 = 1024;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      int int1 = (-1494);
      float float2 = FastMath.nextAfter((float) int1, (double) float1);
      assertEquals((-1494.0001F), float2, 0.01F);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(float2 == float1);
      assertFalse(float2 == float0);
      assertFalse(float1 == float2);
      assertFalse(float1 == float0);
      
      float float3 = FastMath.scalb(float2, int1);
      assertEquals(-0.0F, float3, 0.01F);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(float0 == float3);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(float3 == float1);
      assertFalse(float3 == float0);
      assertFalse(float3 == float2);
      assertFalse(float2 == float3);
      assertFalse(float2 == float1);
      assertFalse(float2 == float0);
      assertFalse(float1 == float2);
      assertFalse(float1 == float0);
      assertFalse(float1 == float3);
      
      double double2 = FastMath.pow((double) float3, double1);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(float0 == float3);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertFalse(float3 == float1);
      assertFalse(float3 == float0);
      assertFalse(float3 == float2);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(float2 == float3);
      assertFalse(float2 == float1);
      assertFalse(float2 == float0);
      assertFalse(float1 == float2);
      assertFalse(float1 == float0);
      assertFalse(float1 == float3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test146()  throws Throwable  {
      float float0 = (-93.248344F);
      int int0 = 1024;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      int int1 = (-1494);
      double double0 = FastMath.scalb((double) float0, int1);
      assertEquals(-0.0, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(float0 == float1);
      
      double double1 = FastMath.pow(double0, (double) float1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(double1 == double0);
      assertFalse(int1 == int0);
      assertFalse(float0 == float1);
      assertFalse(double0 == double1);
      assertFalse(int0 == int1);
  }

  @Test
  public void test147()  throws Throwable  {
      float float0 = (-93.248344F);
      int int0 = 1024;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      int int1 = (-1494);
      float float2 = FastMath.scalb((float) int0, int1);
      assertEquals(0.0F, float2, 0.01F);
      assertFalse(int1 == int0);
      assertFalse(float2 == float1);
      assertFalse(float2 == float0);
      assertFalse(int0 == int1);
      
      double double0 = FastMath.pow((double) float2, (double) float1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(float2 == float1);
      assertFalse(float2 == float0);
      assertFalse(int0 == int1);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
      assertFalse(float1 == float0);
      assertFalse(float1 == float2);
  }

  @Test
  public void test148()  throws Throwable  {
      int int0 = (-2197);
      double double0 = FastMath.log1p((double) int0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test149()  throws Throwable  {
      double double0 = 4060.4589441826097;
      double double1 = FastMath.log1p(double0);
      assertEquals(8.309297533904305, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test150()  throws Throwable  {
      double double0 = (-9.481088691357648E229);
      double double1 = FastMath.acosh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.log1p(double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test151()  throws Throwable  {
      double double0 = (-426.05390600128914);
      double double1 = FastMath.expm1(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.log1p(double1);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test152()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log1p(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test153()  throws Throwable  {
      float float0 = 1.0F;
      double double0 = FastMath.log10((double) float0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test154()  throws Throwable  {
      float float0 = 1.0F;
      double double0 = 0.5039018405998233;
      double double1 = FastMath.log((double) float0, double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test155()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.ulp(double0);
      assertEquals(4.9E-324, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.log(double1, double1);
      assertEquals(1.0, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test156()  throws Throwable  {
      int int0 = 2290;
      double double0 = FastMath.scalb((double) int0, int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.log10(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test157()  throws Throwable  {
      double double0 = (-9.633854121180397E-9);
      double double1 = FastMath.expm1(double0);
      assertEquals((-9.633854074774825E-9), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test158()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.expm1(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test159()  throws Throwable  {
      float float0 = 1449.307F;
      double double0 = FastMath.expm1((double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test160()  throws Throwable  {
      double double0 = 1.2991611957550049;
      double double1 = (-2826.552);
      double double2 = FastMath.pow(double0, double1);
      assertEquals(5.34E-322, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test161()  throws Throwable  {
      double double0 = (-731.440114266841);
      double double1 = FastMath.expm1(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test162()  throws Throwable  {
      double double0 = (-1563.12381);
      double double1 = FastMath.expm1(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test163()  throws Throwable  {
      float float0 = (-139.08F);
      float float1 = FastMath.signum(float0);
      assertEquals((-1.0F), float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      double double0 = FastMath.expm1((double) float1);
      assertEquals((-0.6321205588285577), double0, 0.01D);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test164()  throws Throwable  {
      int int0 = 2290;
      int int1 = FastMath.min(int0, int0);
      assertEquals(2290, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      float float0 = FastMath.signum((float) int1);
      assertEquals(1.0F, float0, 0.01F);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test165()  throws Throwable  {
      float float0 = 2444.5251F;
      double double0 = FastMath.sinh((double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.signum(double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test166()  throws Throwable  {
      double double0 = (-9.633854121180397E-9);
      double double1 = FastMath.floor(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.signum(double1);
      assertEquals((-1.0), double2, 0.01D);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
  }

  @Test
  public void test167()  throws Throwable  {
      float float0 = -0.0F;
      double double0 = FastMath.signum((double) float0);
      assertEquals(-0.0, double0, 0.01D);
  }

  @Test
  public void test168()  throws Throwable  {
      double double0 = 0.008336750013465571;
      double double1 = FastMath.atanh(double0);
      assertEquals(0.008336943160121329, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test169()  throws Throwable  {
      double double0 = (-0.05417713522911072);
      double double1 = FastMath.atanh(double0);
      assertEquals((-0.05423023499691139), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test170()  throws Throwable  {
      double double0 = 0.09495499730110168;
      double double1 = FastMath.atanh(double0);
      assertEquals(0.09524193692408771, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test171()  throws Throwable  {
      double double0 = (-748.469347180343);
      double double1 = FastMath.atanh(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test172()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = FastMath.nextAfter(float0, (double) float0);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      double double0 = FastMath.atanh((double) float1);
      assertEquals(0.0, double0, 0.01D);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
  }

  @Test
  public void test173()  throws Throwable  {
      double double0 = 0.031;
      double double1 = FastMath.asinh(double0);
      assertEquals(0.03099503697929222, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test174()  throws Throwable  {
      double double0 = 0.06666666666666667;
      double double1 = FastMath.asinh(double0);
      assertEquals(0.06661738245555289, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test175()  throws Throwable  {
      double double0 = 0.16666666666666666;
      double double1 = FastMath.abs(double0);
      assertEquals(0.16666666666666666, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      double double2 = FastMath.asinh(double1);
      assertEquals(0.16590455026930118, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test176()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = FastMath.max(float0, float0);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double0 = FastMath.asinh((double) float1);
      assertEquals(0.0, double0, 0.01D);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test
  public void test177()  throws Throwable  {
      double double0 = (-2995.08495135);
      double double1 = FastMath.tan(double0);
      assertEquals((-2.21753967110521), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.asinh(double1);
      assertEquals((-1.5368945788018349), double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test178()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.cos(double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.tanh(double1);
      assertEquals(0.7615941559557649, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test179()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.tanh((double) float0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test180()  throws Throwable  {
      double double0 = (-636.0);
      double double1 = FastMath.tanh(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test181()  throws Throwable  {
      double double0 = (-349.844404646568);
      double double1 = FastMath.cos(double0);
      assertEquals((-0.4288110098995869), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.tanh(double1);
      assertEquals((-0.4043271736315257), double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test182()  throws Throwable  {
      double double0 = (-349.844404646568);
      double double1 = FastMath.log(double0, double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      double double2 = FastMath.tanh(double1);
      //  // Unstable assertion: assertEquals(1.0, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
  }

  @Test
  public void test183()  throws Throwable  {
      float float0 = 2444.5251F;
      double double0 = FastMath.ulp((double) float0);
      assertEquals(4.547473508864641E-13, double0, 0.01D);
      
      double double1 = FastMath.sinh(double0);
      assertEquals(4.547473508864641E-13, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test184()  throws Throwable  {
      float float0 = -0.0F;
      float float1 = FastMath.signum(float0);
      assertEquals(-0.0F, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      double double0 = FastMath.atan2((double) float1, (double) float1);
      assertEquals((-3.141592653589793), double0, 0.01D);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      double double1 = FastMath.sinh(double0);
      assertEquals((-11.548739357257746), double1, 0.01D);
      assertTrue(float0 == float1);
      assertFalse(double0 == double1);
      assertTrue(float1 == float0);
      assertFalse(double1 == double0);
  }

  @Test
  public void test185()  throws Throwable  {
      float float0 = 556.7859F;
      double double0 = FastMath.sinh((double) float0);
      assertEquals(3.221135959349928E241, double0, 0.01D);
  }

  @Test
  public void test186()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.sinh(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test187()  throws Throwable  {
      double double0 = (-1.9841269659586505E-4);
      double double1 = FastMath.cosh(double0);
      assertEquals(1.0000000196837993, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test188()  throws Throwable  {
      float float0 = (-1341.0F);
      float float1 = FastMath.nextUp(float0);
      assertEquals((-1340.9999F), float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = FastMath.cosh((double) float1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test189()  throws Throwable  {
      double double0 = (-662.4410868799246);
      double double1 = FastMath.cosh(double0);
      assertEquals(2.474449655977482E287, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test190()  throws Throwable  {
      int int0 = 173;
      double double0 = FastMath.cosh((double) int0);
      assertEquals(6.790712962373925E74, double0, 0.01D);
  }

  @Test
  public void test191()  throws Throwable  {
      double double0 = 4060.4589441826097;
      double double1 = FastMath.cosh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test192()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.cosh(double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test193()  throws Throwable  {
      double double0 = -0.0;
      double double1 = FastMath.ulp(double0);
      //  // Unstable assertion: assertEquals(4.9E-324, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      double double2 = FastMath.toRadians(double1);
      //  // Unstable assertion: assertEquals(0.0, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
  }

  @Test
  public void test194()  throws Throwable  {
      double double0 = (-2.957007209750105E-8);
      double double1 = FastMath.acos(double0);
      assertEquals(1.5707963563649687, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test195()  throws Throwable  {
      int int0 = (-4235);
      int int1 = FastMath.min(int0, int0);
      assertEquals((-4235), int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      double double0 = FastMath.nextUp((double) int1);
      assertEquals((-4234.999999999999), double0, 0.01D);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test196()  throws Throwable  {
      double double0 = (-2490.986760465);
      int int0 = 834;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals((-2.8535652198060134E254), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.atan(double1);
      assertEquals((-1.5707963267948966), double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test197()  throws Throwable  {
      double double0 = FastMath.random();
      assertEquals(0.0, double0, 0.01D);
  }
}
