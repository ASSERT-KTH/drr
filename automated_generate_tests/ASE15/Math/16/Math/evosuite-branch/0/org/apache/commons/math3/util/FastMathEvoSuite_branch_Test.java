/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:24:48 GMT 2014
 */

package org.apache.commons.math3.util;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.util.FastMath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class FastMathEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      float float0 = 1.0F;
      float float1 = FastMath.copySign(float0, float0);
      assertEquals(1.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      int int0 = (-232);
      float float2 = FastMath.copySign((float) int0, float1);
      assertEquals(232.0F, float2, 0.01F);
      assertTrue(float1 == float0);
      assertFalse(float1 == float2);
      assertTrue(float0 == float1);
      assertFalse(float0 == float2);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
  }

  @Test
  public void test001()  throws Throwable  {
      double double0 = (-3176.3761758821097);
      double double1 = FastMath.copySign(double0, double0);
      assertEquals((-3176.3761758821097), double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test002()  throws Throwable  {
      double double0 = 7546.0;
      float float0 = (-819.0F);
      double double1 = FastMath.copySign(double0, (double) float0);
      assertEquals((-7546.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test003()  throws Throwable  {
      int int0 = 0;
      long long0 = FastMath.max((long) int0, (long) int0);
      assertEquals(0L, long0);
      
      double double0 = FastMath.copySign((double) int0, (double) long0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test004()  throws Throwable  {
      double double0 = (-297.35030260093373);
      float float0 = 1.0F;
      double double1 = FastMath.min(double0, double0);
      assertEquals((-297.35030260093373), double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      double double2 = FastMath.copySign(double1, (double) float0);
      assertEquals(297.35030260093373, double2, 0.01D);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
  }

  @Test
  public void test005()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = (-3267);
      double double0 = FastMath.hypot((double) int0, (double) float0);
      assertEquals(3267.0, double0, 0.01D);
  }

  @Test
  public void test006()  throws Throwable  {
      double double0 = (-1950.2);
      int int0 = (-1237);
      double double1 = FastMath.cosh(double0);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      double double2 = FastMath.cos(double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      
      double double3 = FastMath.hypot((double) int0, double2);
      //  // Unstable assertion: assertEquals(Double.NaN, double3, 0.01D);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertTrue(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertTrue(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
  }

  @Test
  public void test007()  throws Throwable  {
      double double0 = (-1950.2);
      int int0 = 1211;
      double double1 = FastMath.pow(double0, int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      double double2 = FastMath.hypot(double1, double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
  }

  @Test
  public void test008()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.rint(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      double double2 = FastMath.log10(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      
      double double3 = FastMath.hypot(double1, double2);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertTrue(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
  }

  @Test
  public void test009()  throws Throwable  {
      double double0 = (-1950.2);
      double double1 = FastMath.cosh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.hypot(double1, double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test010()  throws Throwable  {
      float float0 = -0.0F;
      double double0 = FastMath.max((double) float0, (double) float0);
      assertEquals(-0.0, double0, 0.01D);
  }

  @Test
  public void test011()  throws Throwable  {
      double double0 = (-1748.037);
      double double1 = FastMath.asinh(double0);
      assertEquals((-8.15939598541555), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      float float0 = 0.0F;
      double double2 = FastMath.log10((double) float0);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.max(double2, double1);
      assertEquals((-8.15939598541555), double3, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertTrue(double1 == double3);
      assertFalse(double3 == double0);
      assertTrue(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
  }

  @Test
  public void test012()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = 1785.31977967;
      double double1 = FastMath.max(double0, (double) float0);
      assertEquals(1785.31977967, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test013()  throws Throwable  {
      double double0 = (-1748.037);
      double double1 = FastMath.asinh(double0);
      assertEquals((-8.15939598541555), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.max(double1, double1);
      assertEquals((-8.15939598541555), double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
  }

  @Test
  public void test014()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = 1.1974215507507324;
      int int0 = FastMath.getExponent(double0);
      //  // Unstable assertion: assertEquals(0, int0);
      
      int int1 = (-1756);
      //  // Unstable assertion: assertFalse(int1 == int0);
      
      float float1 = FastMath.copySign((float) int0, (float) int1);
      //  // Unstable assertion: assertEquals(-0.0F, float1, 0.01F);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      
      float float2 = FastMath.max(float1, float0);
      //  // Unstable assertion: assertEquals(0.0F, float2, 0.01F);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertTrue(float0 == float2);
      //  // Unstable assertion: assertTrue(float2 == float0);
      //  // Unstable assertion: assertFalse(float2 == float1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(float1 == float2);
      //  // Unstable assertion: assertFalse(int0 == int1);
  }

  @Test
  public void test015()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = 1770.0F;
      float float2 = FastMath.max(float0, float1);
      assertEquals(1770.0F, float2, 0.01F);
      assertFalse(float2 == float0);
      assertTrue(float2 == float1);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertTrue(float1 == float2);
      assertFalse(float1 == float0);
  }

  @Test
  public void test016()  throws Throwable  {
      float float0 = 1.0F;
      int int0 = (-232);
      float float1 = FastMath.max(float0, (float) int0);
      assertEquals(1.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test
  public void test017()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = FastMath.max(float0, float0);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
  }

  @Test
  public void test018()  throws Throwable  {
      int int0 = 525;
      int int1 = 8;
      int int2 = FastMath.max(int0, int1);
      assertEquals(525, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
  }

  @Test
  public void test019()  throws Throwable  {
      double double0 = (-297.35030260093373);
      double double1 = FastMath.cosh(double0);
      assertEquals(6.863815738051969E128, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.min(double0, double1);
      assertEquals((-297.35030260093373), double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
  }

  @Test
  public void test020()  throws Throwable  {
      double double0 = 0.008336750013465571;
      long long0 = 2152L;
      double double1 = FastMath.min((double) long0, double0);
      assertEquals(0.008336750013465571, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test021()  throws Throwable  {
      float float0 = (-3827.7212F);
      float float1 = 348.3F;
      float float2 = FastMath.min(float0, float1);
      assertEquals((-3827.7212F), float2, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float1 == float2);
      assertFalse(float0 == float1);
      assertTrue(float0 == float2);
      assertFalse(float2 == float1);
      assertTrue(float2 == float0);
  }

  @Test
  public void test022()  throws Throwable  {
      float float0 = (-665.3F);
      int int0 = FastMath.getExponent(float0);
      assertEquals(9, int0);
      
      float float1 = 899.2F;
      float float2 = FastMath.min(float1, (float) int0);
      assertEquals(9.0F, float2, 0.01F);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertFalse(float1 == float2);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
  }

  @Test
  public void test023()  throws Throwable  {
      int int0 = (-1578);
      long long0 = FastMath.min((long) int0, (long) int0);
      assertEquals((-1578L), long0);
  }

  @Test
  public void test024()  throws Throwable  {
      int int0 = 1386;
      int int1 = 0;
      int int2 = FastMath.min(int0, int1);
      assertEquals(0, int2);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test
  public void test025()  throws Throwable  {
      double double0 = (-1.9841269659586505E-4);
      double double1 = FastMath.rint(double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test026()  throws Throwable  {
      double double0 = (-1950.2);
      double double1 = FastMath.cosh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.rint(double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test027()  throws Throwable  {
      double double0 = (-0.6208465581107783);
      double double1 = FastMath.ceil(double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test028()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.ceil((double) float0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test029()  throws Throwable  {
      double double0 = (-961.0);
      double double1 = FastMath.rint(double0);
      assertEquals((-961.0), double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test030()  throws Throwable  {
      double double0 = (-4.073965591445897E121);
      double double1 = FastMath.rint(double0);
      assertEquals((-4.073965591445897E121), double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test031()  throws Throwable  {
      int int0 = 331;
      float float0 = FastMath.nextUp((float) int0);
      assertEquals(331.00003F, float0, 0.01F);
  }

  @Test
  public void test032()  throws Throwable  {
      double double0 = (-0.7271555275932001);
      long long0 = 1892L;
      double double1 = FastMath.asinh(double0);
      assertEquals((-0.6747713324306386), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      float float0 = FastMath.nextAfter((float) long0, double1);
      assertEquals(1891.9999F, float0, 0.01F);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test033()  throws Throwable  {
      int int0 = (-1014);
      int int1 = FastMath.max(int0, int0);
      assertEquals((-1014), int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      float float0 = 0.0F;
      float float1 = FastMath.nextAfter(float0, (double) int1);
      assertEquals((-1.4E-45F), float1, 0.01F);
      assertFalse(float0 == float1);
      assertTrue(int0 == int1);
      assertFalse(float1 == float0);
      assertTrue(int1 == int0);
  }

  @Test
  public void test034()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.nextUp(float0);
      assertEquals((-3.4028235E38F), float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test035()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = FastMath.getExponent(float0);
      assertEquals((-127), int0);
      
      float float1 = FastMath.nextAfter((float) int0, (double) int0);
      assertEquals((-127.0F), float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test036()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      int int0 = FastMath.round(float0);
      assertEquals(Integer.MAX_VALUE, int0);
      
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      double double0 = FastMath.IEEEremainder((double) float1, (double) float0);
      assertEquals(Double.NaN, double0, 0.01D);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      float float2 = FastMath.nextAfter((float) int0, double0);
      assertEquals(Float.NaN, float2, 0.01F);
      assertFalse(float0 == float2);
      assertTrue(float0 == float1);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertFalse(float1 == float2);
      assertTrue(float1 == float0);
  }

  @Test
  public void test037()  throws Throwable  {
      float float0 = Float.NaN;
      float float1 = FastMath.nextUp(float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
  }

  @Test
  public void test038()  throws Throwable  {
      double double0 = (-1950.2);
      int int0 = (-1237);
      double double1 = FastMath.pow(double0, int0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.hypot(double1, double0);
      assertEquals(1950.2, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      
      double double3 = FastMath.nextUp(double2);
      assertEquals(1950.2000000000003, double3, 0.01D);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
  }

  @Test
  public void test039()  throws Throwable  {
      double double0 = 2060.4682175582548;
      double double1 = 0.0;
      double double2 = FastMath.nextAfter(double0, double1);
      assertEquals(2060.4682175582543, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test040()  throws Throwable  {
      double double0 = (-1950.2);
      double double1 = FastMath.cos(double0);
      assertEquals((-0.7458156664564383), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.nextUp(double1);
      assertEquals((-0.7458156664564382), double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test041()  throws Throwable  {
      float float0 = 3.4028235E38F;
      int int0 = 128;
      float float1 = FastMath.signum((float) int0);
      assertEquals(1.0F, float1, 0.01F);
      assertFalse(float1 == float0);
      
      float float2 = FastMath.scalb(float0, int0);
      assertEquals(Float.POSITIVE_INFINITY, float2, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
      assertFalse(float2 == float1);
      assertFalse(float2 == float0);
      
      double double0 = FastMath.nextAfter((double) float2, (double) float1);
      assertEquals(1.7976931348623157E308, double0, 0.01D);
      assertFalse(float1 == float2);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
      assertFalse(float2 == float1);
      assertFalse(float2 == float0);
  }

  @Test
  public void test042()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = FastMath.signum(float0);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double0 = FastMath.log((double) float1);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double1 = FastMath.nextUp(double0);
      assertEquals((-1.7976931348623157E308), double1, 0.01D);
      assertTrue(float1 == float0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertTrue(float0 == float1);
  }

  @Test
  public void test043()  throws Throwable  {
      long long0 = 0L;
      double double0 = FastMath.nextAfter((double) long0, (double) long0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test044()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.hypot(double0, double0);
      //  // Unstable assertion: assertEquals(0.0, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertTrue(double0 == double1);
      
      double double2 = FastMath.IEEEremainder(double1, double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertTrue(double0 == double1);
      
      double double3 = FastMath.nextAfter(double1, double2);
      //  // Unstable assertion: assertEquals(Double.NaN, double3, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertTrue(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double1);
  }

  @Test
  public void test045()  throws Throwable  {
      double double0 = 2.309229850769043;
      double double1 = FastMath.hypot(double0, double0);
      //  // Unstable assertion: assertEquals(3.265744173594379, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      double double2 = FastMath.acos(double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      double double3 = FastMath.nextAfter(double2, double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double3, 0.01D);
      //  // Unstable assertion: assertTrue(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertTrue(double2 == double3);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
  }

  @Test
  public void test046()  throws Throwable  {
      float float0 = 1.0F;
      int int0 = (-232);
      float float1 = FastMath.ulp(float0);
      assertEquals(1.1920929E-7F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      int int1 = FastMath.getExponent(float1);
      assertEquals((-23), int1);
      assertFalse(int1 == int0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      float float2 = FastMath.scalb((float) int1, int0);
      assertEquals(-0.0F, float2, 0.01F);
      assertFalse(int1 == int0);
      assertFalse(float1 == float2);
      assertFalse(float1 == float0);
      assertFalse(int0 == int1);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
  }

  @Test
  public void test047()  throws Throwable  {
      float float0 = (-1.0F);
      int int0 = (-127);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals((-5.877472E-39F), float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test048()  throws Throwable  {
      int int0 = 198;
      float float0 = FastMath.abs((float) int0);
      assertEquals(198.0F, float0, 0.01F);
      
      int int1 = (-127);
      float float1 = FastMath.scalb(float0, int1);
      assertEquals(1.1637394E-36F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test049()  throws Throwable  {
      float float0 = (-3825.0F);
      int int0 = (-974);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(-0.0F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test050()  throws Throwable  {
      int int0 = 702;
      int int1 = (-531);
      float float0 = FastMath.scalb((float) int0, int1);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test051()  throws Throwable  {
      long long0 = 0L;
      int int0 = 770;
      float float0 = FastMath.scalb((float) long0, int0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test052()  throws Throwable  {
      int int0 = 0;
      float float0 = FastMath.scalb((float) int0, int0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test053()  throws Throwable  {
      float float0 = 1.0F;
      float float1 = FastMath.copySign(float0, float0);
      assertEquals(1.0F, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      int int0 = (-232);
      float float2 = FastMath.scalb(float1, int0);
      assertEquals(0.0F, float2, 0.01F);
      assertFalse(float0 == float2);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertFalse(float1 == float2);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
  }

  @Test
  public void test054()  throws Throwable  {
      float float0 = 245.4819F;
      int int0 = 1299;
      double double0 = FastMath.scalb((double) float0, int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test055()  throws Throwable  {
      double double0 = (-177.4);
      int int0 = (-1756);
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test056()  throws Throwable  {
      double double0 = 1.997844754509471E-9;
      int int0 = (-1042);
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(4.4E-323, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test057()  throws Throwable  {
      double double0 = 1.1974215507507324;
      int int0 = (-1756);
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test058()  throws Throwable  {
      double double0 = 7.980432566722885E241;
      int int0 = (-1418);
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(1.1002530489078863E-185, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test059()  throws Throwable  {
      double double0 = (-3.9986783938944604E-8);
      int int0 = 2217;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test060()  throws Throwable  {
      int int0 = (-3074);
      int int1 = FastMath.min(int0, int0);
      assertEquals((-3074), int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      double double0 = FastMath.scalb((double) int1, int1);
      assertEquals(-0.0, double0, 0.01D);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test061()  throws Throwable  {
      double double0 = 3853.258703909;
      double double1 = FastMath.signum(double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      int int0 = (-3309);
      double double2 = FastMath.scalb(double1, int0);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test062()  throws Throwable  {
      int int0 = (-1578);
      int int1 = FastMath.abs(int0);
      //  // Unstable assertion: assertEquals(1578, int1);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      
      double double0 = FastMath.acos((double) int1);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      
      double double1 = FastMath.scalb(double0, int1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
  }

  @Test
  public void test063()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.ulp(float0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test064()  throws Throwable  {
      double double0 = 3777.249;
      double double1 = FastMath.expm1(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.ulp(double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
  }

  @Test
  public void test065()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.abs(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test066()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.toDegrees(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test067()  throws Throwable  {
      double double0 = 3259.15508;
      double double1 = FastMath.cosh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.toDegrees(double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test068()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.toRadians((double) float0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test069()  throws Throwable  {
      int int0 = 128;
      float float0 = FastMath.scalb((float) int0, int0);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
      
      double double0 = FastMath.toRadians((double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test070()  throws Throwable  {
      float float0 = (-1014.1069F);
      double double0 = FastMath.ceil((double) float0);
      //  // Unstable assertion: assertEquals((-1014.0), double0, 0.01D);
      
      double double1 = FastMath.sqrt(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      double double2 = FastMath.cbrt(double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
  }

  @Test
  public void test071()  throws Throwable  {
      long long0 = 0L;
      long long1 = FastMath.abs(long0);
      assertEquals(0L, long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      
      double double0 = FastMath.cbrt((double) long1);
      assertEquals(0.0, double0, 0.01D);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
  }

  @Test
  public void test072()  throws Throwable  {
      double double0 = (-1748.037);
      float float0 = 0.0F;
      double double1 = FastMath.nextAfter((double) float0, double0);
      assertEquals((-4.9E-324), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.cbrt(double1);
      assertEquals((-1.7031839360032603E-108), double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test073()  throws Throwable  {
      long long0 = (-4294L);
      long long1 = FastMath.abs(long0);
      assertEquals(4294L, long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      
      double double0 = FastMath.cbrt((double) long1);
      assertEquals(16.253766385351593, double0, 0.01D);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test
  public void test074()  throws Throwable  {
      double double0 = (-1.2351697477129173E-65);
      double double1 = FastMath.acos(double0);
      assertEquals(1.5707963267948966, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test075()  throws Throwable  {
      double double0 = (-1.3811462167E-314);
      double double1 = FastMath.acos(double0);
      assertEquals(1.5707963267948966, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test076()  throws Throwable  {
      double double0 = 9.956860681280245E-10;
      double double1 = FastMath.acos(double0);
      assertEquals(1.5707963257992106, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test077()  throws Throwable  {
      double double0 = 9.429257929713919E-133;
      double double1 = FastMath.cosh(double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.acos(double1);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test078()  throws Throwable  {
      int int0 = (-1756);
      double double0 = FastMath.signum((double) int0);
      assertEquals((-1.0), double0, 0.01D);
      
      double double1 = FastMath.acos(double0);
      assertEquals(3.141592653589793, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test079()  throws Throwable  {
      double double0 = 1.1974215507507324;
      int int0 = FastMath.getExponent(double0);
      assertEquals(0, int0);
      
      double double1 = FastMath.acos((double) int0);
      assertEquals(1.5707963267948966, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test080()  throws Throwable  {
      float float0 = (-665.3F);
      int int0 = FastMath.getExponent(float0);
      assertEquals(9, int0);
      
      float float1 = FastMath.nextAfter(float0, (double) int0);
      assertEquals((-665.2999F), float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      double double0 = FastMath.acos((double) float1);
      assertEquals(Double.NaN, double0, 0.01D);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test081()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      float float0 = (-1.4E-45F);
      float float1 = FastMath.copySign(float0, (float) long0);
      assertEquals((-1.4E-45F), float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      double double0 = FastMath.asin((double) float1);
      assertEquals((-1.401298464324817E-45), double0, 0.01D);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
  }

  @Test
  public void test082()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.asin(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test083()  throws Throwable  {
      double double0 = 0.6931470632553101;
      double double1 = FastMath.ceil(double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.asin(double1);
      assertEquals(1.5707963267948966, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test084()  throws Throwable  {
      float float0 = (-819.0F);
      float float1 = FastMath.min(float0, float0);
      assertEquals((-819.0F), float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      double double0 = FastMath.tanh((double) float1);
      assertEquals((-1.0), double0, 0.01D);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      double double1 = FastMath.asin(double0);
      assertEquals((-1.5707963267948966), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
  }

  @Test
  public void test085()  throws Throwable  {
      int int0 = (-232);
      float float0 = Float.POSITIVE_INFINITY;
      float float1 = FastMath.nextAfter(float0, (double) int0);
      assertEquals(3.4028235E38F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = FastMath.asin((double) float1);
      assertEquals(Double.NaN, double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test086()  throws Throwable  {
      double double0 = (-1950.2);
      double double1 = FastMath.asin(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test087()  throws Throwable  {
      double double0 = 1416.13;
      double double1 = FastMath.tan(double0);
      assertEquals((-0.8918369304395173), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = 0.0;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.atan2(double1, double2);
      assertEquals((-1.5707963267948966), double3, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
  }

  @Test
  public void test088()  throws Throwable  {
      double double0 = 1416.13;
      double double1 = 0.0;
      double double2 = FastMath.atan2(double0, double1);
      assertEquals(1.5707963267948966, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test089()  throws Throwable  {
      double double0 = 203.2762235129;
      float float0 = (-1.0F);
      int int0 = 128;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double1 = FastMath.atan2(double0, (double) float1);
      assertEquals(3.141592653589793, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertFalse(double0 == double1);
  }

  @Test
  public void test090()  throws Throwable  {
      double double0 = (-1.1297099377879534);
      float float0 = (-1.0F);
      int int0 = 128;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double1 = FastMath.atan2(double0, (double) float1);
      assertEquals((-3.141592653589793), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(float1 == float0);
      assertFalse(double0 == double1);
      assertFalse(float0 == float1);
  }

  @Test
  public void test091()  throws Throwable  {
      double double0 = 2915.19;
      long long0 = 4368491638549381120L;
      double double1 = FastMath.tan(double0);
      assertEquals((-0.21103422640172007), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.pow(double0, (double) long0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      
      double double3 = FastMath.atan2(double1, double2);
      assertEquals(-0.0, double3, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
  }

  @Test
  public void test092()  throws Throwable  {
      long long0 = 0L;
      long long1 = 4368491638549381120L;
      long long2 = FastMath.max(long0, long1);
      assertEquals(4368491638549381120L, long2);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertTrue(long1 == long2);
      assertFalse(long1 == long0);
      
      double double0 = FastMath.pow((double) long2, (double) long1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertTrue(long1 == long2);
      assertFalse(long1 == long0);
      
      double double1 = FastMath.atan2((double) long2, double0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertTrue(long1 == long2);
      assertFalse(long1 == long0);
  }

  @Test
  public void test093()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.atan2(double1, double1);
      assertEquals((-2.356194490192345), double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test094()  throws Throwable  {
      int int0 = 850;
      double double0 = FastMath.floor((double) int0);
      assertEquals(850.0, double0, 0.01D);
      
      float float0 = (-2096.0F);
      float float1 = FastMath.signum(float0);
      assertEquals((-1.0F), float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      float float2 = FastMath.scalb(float1, int0);
      assertEquals(Float.NEGATIVE_INFINITY, float2, 0.01F);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(float2 == float1);
      assertFalse(float2 == float0);
      assertFalse(float1 == float2);
      assertFalse(float1 == float0);
      
      double double1 = FastMath.atan2((double) float2, double0);
      assertEquals((-1.5707963267948966), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(float2 == float1);
      assertFalse(float2 == float0);
      assertFalse(float1 == float2);
      assertFalse(float1 == float0);
  }

  @Test
  public void test095()  throws Throwable  {
      double double0 = (-1950.2);
      int int0 = (-1237);
      double double1 = FastMath.cosh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int1 = FastMath.max(int0, int0);
      assertEquals((-1237), int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      double double2 = FastMath.atan2(double1, (double) int1);
      assertEquals(1.5707963267948966, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test096()  throws Throwable  {
      float float0 = -0.0F;
      float float1 = FastMath.min(float0, float0);
      assertEquals(-0.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double0 = FastMath.atan2((double) float0, (double) float1);
      assertEquals((-3.141592653589793), double0, 0.01D);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test
  public void test097()  throws Throwable  {
      int int0 = 0;
      float float0 = FastMath.ulp((float) int0);
      assertEquals(0.0F, float0, 0.01F);
      
      double double0 = (-20.0);
      double double1 = FastMath.atan2((double) float0, double0);
      assertEquals(3.141592653589793, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test098()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = FastMath.signum(float0);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      double double0 = 3259.15508;
      double double1 = FastMath.cosh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.atan2((double) float1, double1);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(float0 == float1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(float1 == float0);
  }

  @Test
  public void test099()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.atan2(double0, double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test100()  throws Throwable  {
      double double0 = (-1.6661676835672304E143);
      long long0 = (-9223372036854775808L);
      long long1 = 2201L;
      long long2 = FastMath.min(long0, long1);
      //  // Unstable assertion: assertEquals(2201L, long2);
      //  // Unstable assertion: assertTrue(long1 == long2);
      //  // Unstable assertion: assertFalse(long1 == long0);
      //  // Unstable assertion: assertFalse(long0 == long1);
      //  // Unstable assertion: assertFalse(long0 == long2);
      //  // Unstable assertion: assertTrue(long2 == long1);
      //  // Unstable assertion: assertFalse(long2 == long0);
      
      double double1 = FastMath.tanh(double0);
      //  // Unstable assertion: assertEquals((-1.0), double1, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      double double2 = FastMath.atan2((double) long2, double1);
      //  // Unstable assertion: assertEquals(1.5712506657004814, double2, 0.01D);
      //  // Unstable assertion: assertTrue(long1 == long2);
      //  // Unstable assertion: assertFalse(long1 == long0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(long0 == long1);
      //  // Unstable assertion: assertFalse(long0 == long2);
      //  // Unstable assertion: assertTrue(long2 == long1);
      //  // Unstable assertion: assertFalse(long2 == long0);
  }

  @Test
  public void test101()  throws Throwable  {
      double double0 = 0.0;
      int int0 = FastMath.getExponent(double0);
      assertEquals((-1023), int0);
      
      double double1 = (-9.084495133765657E196);
      double double2 = FastMath.atan2(double1, (double) int0);
      assertEquals((-1.5707963267948966), double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test102()  throws Throwable  {
      double double0 = (-4.9E-324);
      double double1 = 497.794190545;
      double double2 = FastMath.atan2(double1, double0);
      assertEquals(1.5707963267948966, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test103()  throws Throwable  {
      double double0 = (-944.341745);
      double double1 = FastMath.abs(double0);
      assertEquals(944.341745, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      float float0 = (-665.3F);
      int int0 = FastMath.getExponent(float0);
      assertEquals(9, int0);
      
      double double2 = FastMath.atan2((double) int0, double1);
      assertEquals(0.009530159578538394, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test104()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.atan((double) float0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test105()  throws Throwable  {
      float float0 = 1.0F;
      double double0 = FastMath.cosh((double) float0);
      assertEquals(1.5430806348152437, double0, 0.01D);
      
      double double1 = FastMath.tan(double0);
      assertEquals(36.07140440247247, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test106()  throws Throwable  {
      int int0 = 850;
      float float0 = FastMath.scalb((float) int0, int0);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
      
      double double0 = FastMath.tan((double) float0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test107()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.atanh((double) float0);
      assertEquals(0.0, double0, 0.01D);
      
      double double1 = FastMath.tan(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test108()  throws Throwable  {
      double double0 = (-999.580190380737);
      double double1 = FastMath.hypot(double0, double0);
      assertEquals(1413.6198619159186, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.cos(double1);
      assertEquals(0.9953154246880632, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test109()  throws Throwable  {
      double double0 = 48.22702765;
      double double1 = FastMath.cos(double0);
      assertEquals((-0.45079742135856743), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test110()  throws Throwable  {
      double double0 = 253.19873299;
      double double1 = FastMath.sin(double0);
      assertEquals(0.9551813940778887, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test111()  throws Throwable  {
      double double0 = 3777.249;
      double double1 = FastMath.expm1(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.sin(double1);
      assertEquals(Double.NaN, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test112()  throws Throwable  {
      int int0 = 0;
      double double0 = FastMath.sin((double) int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test113()  throws Throwable  {
      double double0 = (-4.073965591445897E121);
      double double1 = FastMath.sin(double0);
      assertEquals(0.4444024706121466, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test114()  throws Throwable  {
      double double0 = (-1.7976931348623157E308);
      double double1 = FastMath.sin(double0);
      assertEquals((-0.004961954789184062), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test115()  throws Throwable  {
      double double0 = (-9.084495133765657E196);
      double double1 = FastMath.tan(double0);
      assertEquals(0.3724718057252538, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test116()  throws Throwable  {
      double double0 = (-8.833499967268279E225);
      double double1 = FastMath.sin(double0);
      assertEquals((-0.14951967708537298), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test117()  throws Throwable  {
      long long0 = 4368491638549381120L;
      double double0 = FastMath.tan((double) long0);
      assertEquals((-9.363750787553254), double0, 0.01D);
  }

  @Test
  public void test118()  throws Throwable  {
      double double0 = 8.006569251375383E36;
      double double1 = FastMath.tan(double0);
      assertEquals((-0.6283560778629167), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test119()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      double double0 = FastMath.cos((double) long0);
      assertEquals(0.011800076512800236, double0, 0.01D);
  }

  @Test
  public void test120()  throws Throwable  {
      double double0 = (-944.341745);
      double double1 = FastMath.abs(double0);
      assertEquals(944.341745, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.cos(double1);
      assertEquals((-0.288971755146735), double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      
      double double3 = FastMath.tan(double2);
      assertEquals((-0.29729331941974313), double3, 0.01D);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
  }

  @Test
  public void test121()  throws Throwable  {
      int int0 = 331;
      double double0 = FastMath.tan((double) int0);
      assertEquals(2.1350642443063275, double0, 0.01D);
  }

  @Test
  public void test122()  throws Throwable  {
      double double0 = 1.2940962314605713;
      double double1 = FastMath.sin(double0);
      assertEquals(0.961962151309999, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test123()  throws Throwable  {
      double double0 = 1785.31977967;
      int int0 = 144;
      double double1 = FastMath.pow(double0, int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double2 = FastMath.pow(double1, double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
  }

  @Test
  public void test124()  throws Throwable  {
      double double0 = (-0.7271555275932001);
      long long0 = 1892L;
      double double1 = FastMath.asinh(double0);
      assertEquals((-0.6747713324306386), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.pow(double1, (double) long0);
      assertEquals(4.9E-324, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test125()  throws Throwable  {
      double double0 = (-2563.16);
      double double1 = FastMath.pow(double0, double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test126()  throws Throwable  {
      float float0 = (-3.4028235E38F);
      double double0 = FastMath.pow((double) float0, (double) float0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test127()  throws Throwable  {
      long long0 = 4368491638549381120L;
      double double0 = (-4.503599627370496E15);
      double double1 = FastMath.pow(double0, (double) long0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test128()  throws Throwable  {
      double double0 = (-754.974283);
      int int0 = 1270;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.pow((double) int0, double1);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test129()  throws Throwable  {
      double double0 = 2.309229850769043;
      double double1 = FastMath.hypot(double0, double0);
      assertEquals(3.265744173594379, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = (-754.974283);
      assertFalse(double2 == double1);
      
      int int0 = 1270;
      double double3 = FastMath.scalb(double2, int0);
      assertEquals(Double.NEGATIVE_INFINITY, double3, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      
      int int1 = FastMath.getExponent(double1);
      assertEquals(1, int1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(int1 == int0);
      
      double double4 = FastMath.pow(double3, (double) int1);
      assertEquals(Double.NEGATIVE_INFINITY, double4, 0.01D);
      assertFalse(double4 == double2);
      assertTrue(double4 == double3);
      assertFalse(double4 == double1);
      assertFalse(double4 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double4);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double4);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double4);
      assertFalse(double2 == double0);
      assertFalse(double3 == double2);
      assertTrue(double3 == double4);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test130()  throws Throwable  {
      double double0 = 2.309229850769043;
      double double1 = FastMath.hypot(double0, double0);
      assertEquals(3.265744173594379, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = (-754.974283);
      assertFalse(double2 == double1);
      
      int int0 = 1270;
      double double3 = FastMath.scalb(double2, int0);
      assertEquals(Double.NEGATIVE_INFINITY, double3, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      
      double double4 = FastMath.pow(double3, double1);
      assertEquals(Double.POSITIVE_INFINITY, double4, 0.01D);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertFalse(double4 == double3);
      assertFalse(double4 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double4);
      assertFalse(double0 == double3);
      assertFalse(double2 == double4);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double4);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double1 == double4);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
  }

  @Test
  public void test131()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.hypot(double0, double0);
      //  // Unstable assertion: assertEquals(0.0, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertTrue(double1 == double0);
      
      double double2 = (-754.974283);
      //  // Unstable assertion: assertFalse(double2 == double1);
      
      int int0 = 1270;
      double double3 = FastMath.scalb(double2, int0);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, double3, 0.01D);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double1);
      
      int int1 = FastMath.getExponent(double1);
      //  // Unstable assertion: assertEquals((-1023), int1);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      
      double double4 = FastMath.pow(double3, (double) int1);
      //  // Unstable assertion: assertEquals(-0.0, double4, 0.01D);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double4);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double4);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double4);
      //  // Unstable assertion: assertFalse(double4 == double2);
      //  // Unstable assertion: assertFalse(double4 == double1);
      //  // Unstable assertion: assertFalse(double4 == double3);
      //  // Unstable assertion: assertFalse(double4 == double0);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double4);
      //  // Unstable assertion: assertFalse(double1 == double2);
  }

  @Test
  public void test132()  throws Throwable  {
      int int0 = 850;
      float float0 = (-1326.0F);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = FastMath.pow((double) float1, (double) float1);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test133()  throws Throwable  {
      int int0 = 850;
      float float0 = (-1326.0F);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      double double0 = FastMath.pow((double) float1, (double) float0);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test134()  throws Throwable  {
      int int0 = 850;
      float float0 = (-2096.0F);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = FastMath.pow((double) float1, (double) int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test135()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = FastMath.nextUp(float0);
      assertEquals(1.4E-45F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      double double0 = 1785.31977967;
      double double1 = FastMath.abs(double0);
      assertEquals(1785.31977967, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      double double2 = FastMath.cosh(double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      
      double double3 = FastMath.pow((double) float1, double2);
      assertEquals(0.0, double3, 0.01D);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(float0 == float1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double1 == double3);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(float1 == float0);
  }

  @Test
  public void test136()  throws Throwable  {
      double double0 = 7546.0;
      float float0 = (-819.0F);
      float float1 = FastMath.min(float0, float0);
      assertEquals((-819.0F), float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double1 = FastMath.cosh((double) float1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.pow(double0, double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertTrue(float1 == float0);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(float0 == float1);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
  }

  @Test
  public void test137()  throws Throwable  {
      int int0 = 0;
      long long0 = 2152L;
      long long1 = FastMath.max(long0, (long) int0);
      assertEquals(2152L, long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      
      double double0 = FastMath.sinh((double) long1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      
      double double1 = (-683.1214923128314);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.pow(double0, double1);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(long0 == long1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(long1 == long0);
  }

  @Test
  public void test138()  throws Throwable  {
      double double0 = 0.008336750013465571;
      int int0 = 0;
      long long0 = 2152L;
      long long1 = FastMath.max(long0, (long) int0);
      assertEquals(2152L, long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      double double1 = FastMath.sinh((double) long1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertTrue(long1 == long0);
      assertFalse(double1 == double0);
      assertTrue(long0 == long1);
      
      double double2 = FastMath.pow(double1, double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertTrue(long1 == long0);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertTrue(long0 == long1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test139()  throws Throwable  {
      float float0 = (-819.0F);
      int int0 = 0;
      double double0 = FastMath.pow((double) int0, (double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test140()  throws Throwable  {
      double double0 = 7546.0;
      int int0 = 0;
      double double1 = FastMath.pow((double) int0, double0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test141()  throws Throwable  {
      double double0 = 1.1974215507507324;
      int int0 = FastMath.getExponent(double0);
      assertEquals(0, int0);
      
      double double1 = FastMath.pow((double) int0, (double) int0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test142()  throws Throwable  {
      double double0 = (-1950.2);
      int int0 = (-1237);
      double double1 = FastMath.pow(double0, int0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.log1p(double1);
      assertEquals(0.0, double2, 0.01D);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test143()  throws Throwable  {
      long long0 = 0L;
      double double0 = FastMath.acosh((double) long0);
      //  // Unstable assertion: assertEquals(710.1881780014921, double0, 0.01D);
      
      double double1 = FastMath.log1p(double0);
      //  // Unstable assertion: assertEquals(6.566937061453962, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
  }

  @Test
  public void test144()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      double double0 = FastMath.log1p((double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test145()  throws Throwable  {
      float float0 = (-3.4028235E38F);
      float float1 = FastMath.signum(float0);
      assertEquals((-1.0F), float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = FastMath.log1p((double) float1);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test146()  throws Throwable  {
      float float0 = 3.4028235E38F;
      int int0 = 128;
      float float1 = FastMath.signum((float) int0);
      assertEquals(1.0F, float1, 0.01F);
      assertFalse(float1 == float0);
      
      double double0 = FastMath.pow((double) float1, (double) float0);
      assertEquals(1.0, double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test147()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = FastMath.getExponent((double) float0);
      assertEquals((-1023), int0);
      
      double double0 = 0.9985313415527344;
      double double1 = FastMath.log(double0, (double) int0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test148()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.abs(int0);
      assertEquals(0, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      double double0 = FastMath.nextUp((double) int1);
      assertEquals(4.9E-324, double0, 0.01D);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      double double1 = FastMath.log10(double0);
      assertEquals((-323.3062153431158), double1, 0.01D);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test149()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      double double0 = FastMath.log10((double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test150()  throws Throwable  {
      double double0 = 3278.621695990742;
      int int0 = Integer.MAX_VALUE;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.log(double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
  }

  @Test
  public void test151()  throws Throwable  {
      int int0 = (-1237);
      double double0 = FastMath.log1p((double) int0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test152()  throws Throwable  {
      double double0 = (-0.12502530217170715);
      double double1 = FastMath.expm1(double0);
      assertEquals((-0.11752542622107999), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test153()  throws Throwable  {
      double double0 = (-0.7271555275932001);
      long long0 = 1875L;
      double double1 = FastMath.asinh(double0);
      assertEquals((-0.6747713324306386), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.pow(double1, (double) long0);
      assertEquals((-4.664E-321), double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test154()  throws Throwable  {
      double double0 = (-1306.71705924);
      double double1 = FastMath.expm1(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test155()  throws Throwable  {
      double double0 = 0.8109631538391113;
      double double1 = FastMath.ulp(double0);
      assertEquals(1.1102230246251565E-16, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.atanh(double1);
      assertEquals(1.1102230246251565E-16, double2, 0.01D);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test156()  throws Throwable  {
      double double0 = 0.06666666666666667;
      double double1 = FastMath.atanh(double0);
      assertEquals(0.06676569631226131, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test157()  throws Throwable  {
      double double0 = 0.09228715300559998;
      double double1 = FastMath.min(double0, double0);
      assertEquals(0.09228715300559998, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      double double2 = FastMath.atanh(double1);
      assertEquals(0.09255050079185806, double2, 0.01D);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
  }

  @Test
  public void test158()  throws Throwable  {
      double double0 = 0.008336750013465571;
      double double1 = FastMath.atanh(double0);
      assertEquals(0.008336943160121329, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test159()  throws Throwable  {
      double double0 = (-1563.0);
      double double1 = FastMath.atanh(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test160()  throws Throwable  {
      double double0 = 0.036;
      double double1 = FastMath.asinh(double0);
      assertEquals(0.035992228531467885, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test161()  throws Throwable  {
      double double0 = 0.1256551444530487;
      double double1 = FastMath.asinh(double0);
      assertEquals(0.12532680601536822, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test162()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.asinh((double) float0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test163()  throws Throwable  {
      double double0 = (-1.2351697477129173E-65);
      double double1 = FastMath.tanh(double0);
      assertEquals((-1.2351697477129173E-65), double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test164()  throws Throwable  {
      double double0 = 2.309229850769043;
      double double1 = FastMath.hypot(double0, double0);
      assertEquals(3.265744173594379, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.tanh(double1);
      assertEquals(0.9970905666517006, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test165()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.signum(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      double double2 = FastMath.tanh(double1);
      assertEquals(0.0, double2, 0.01D);
      assertTrue(double1 == double2);
      assertTrue(double1 == double0);
      assertTrue(double0 == double2);
      assertTrue(double0 == double1);
      assertTrue(double2 == double0);
      assertTrue(double2 == double1);
  }

  @Test
  public void test166()  throws Throwable  {
      double double0 = 253.19873299;
      double double1 = FastMath.tanh(double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test167()  throws Throwable  {
      double double0 = (-4.9E-324);
      double double1 = FastMath.sinh(double0);
      assertEquals((-4.9E-324), double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test168()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.sinh((double) float0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test169()  throws Throwable  {
      double double0 = (-64.5821205658);
      double double1 = FastMath.sinh(double0);
      assertEquals((-5.579928007346825E27), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test170()  throws Throwable  {
      double double0 = (-3283.552120151654);
      double double1 = FastMath.sinh(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test171()  throws Throwable  {
      int int0 = 128;
      double double0 = FastMath.sinh((double) int0);
      assertEquals(1.9438542029972974E55, double0, 0.01D);
  }

  @Test
  public void test172()  throws Throwable  {
      float float0 = 1.0F;
      double double0 = FastMath.sinh((double) float0);
      assertEquals(1.1752011936438014, double0, 0.01D);
  }

  @Test
  public void test173()  throws Throwable  {
      float float0 = (-1.4E-45F);
      double double0 = FastMath.cosh((double) float0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test174()  throws Throwable  {
      double double0 = (-3283.552120151654);
      int int0 = 0;
      double double1 = FastMath.pow(double0, int0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.cosh(double1);
      assertEquals(1.5430806348152437, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test175()  throws Throwable  {
      int int0 = 144;
      long long0 = FastMath.abs((long) int0);
      assertEquals(144L, long0);
      
      double double0 = FastMath.cosh((double) long0);
      assertEquals(1.727330328358773E62, double0, 0.01D);
  }

  @Test
  public void test176()  throws Throwable  {
      double double0 = (-4.9E-324);
      double double1 = FastMath.hypot(double0, double0);
      assertEquals(4.9E-324, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.toRadians(double1);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test177()  throws Throwable  {
      double double0 = (-944.341745);
      double double1 = FastMath.abs(double0);
      assertEquals(944.341745, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.toRadians(double1);
      assertEquals(16.481872714278698, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test178()  throws Throwable  {
      double double0 = (-1307.77702);
      double double1 = FastMath.toDegrees(double0);
      assertEquals((-74930.10379019585), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test179()  throws Throwable  {
      float float0 = 1.0F;
      double double0 = FastMath.cos((double) float0);
      assertEquals(0.5403023058681398, double0, 0.01D);
  }

  @Test
  public void test180()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.expm1((double) float0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test181()  throws Throwable  {
      double double0 = 2060.4682175582548;
      double double1 = FastMath.log(double0);
      assertEquals(7.630688526033973, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      long long0 = FastMath.round(double1);
      assertEquals(8L, long0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test182()  throws Throwable  {
      double double0 = FastMath.random();
      assertEquals(0.0, double0, 0.01D);
  }
}
