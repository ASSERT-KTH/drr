/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:35:48 GMT 2014
 */

package org.apache.commons.math3.util;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.util.FastMath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class FastMathEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      double double0 = (-4511.78116);
      double double1 = FastMath.nextUp(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-4511.7811599999995), double1, 0.01D);
      
      double double2 = 0.0;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.atan2(double2, double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(3.141592653589793, double3, 0.01D);
      
      double double4 = FastMath.sin(double3);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double4);
      assertFalse(double1 == double4);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double4);
      assertFalse(double2 == double4);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double4 == double2);
      assertFalse(double4 == double0);
      assertFalse(double4 == double3);
      assertFalse(double4 == double1);
      assertEquals(1.2246467991473532E-16, double4, 0.01D);
  }

  @Test
  public void test001()  throws Throwable  {
      long long0 = 4607182418800017408L;
      float float0 = (-1.0F);
      float float1 = FastMath.copySign(float0, (float) long0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(1.0F, float1, 0.01F);
  }

  @Test
  public void test002()  throws Throwable  {
      double double0 = 981.093574463026;
      int int0 = (-292);
      int int1 = FastMath.getExponent(double0);
      assertFalse(int1 == int0);
      assertEquals(9, int1);
      
      float float0 = FastMath.copySign((float) int1, (float) int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-9.0F), float0, 0.01F);
  }

  @Test
  public void test003()  throws Throwable  {
      int int0 = 0;
      float float0 = FastMath.copySign((float) int0, (float) int0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test004()  throws Throwable  {
      int int0 = (-1698);
      float float0 = FastMath.copySign((float) int0, (float) int0);
      assertEquals((-1698.0F), float0, 0.01F);
  }

  @Test
  public void test005()  throws Throwable  {
      double double0 = (-1402.2776633809733);
      double double1 = 0.0;
      double double2 = FastMath.copySign(double0, double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(1402.2776633809733, double2, 0.01D);
  }

  @Test
  public void test006()  throws Throwable  {
      double double0 = (-1402.2776633809733);
      double double1 = FastMath.copySign(double0, double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals((-1402.2776633809733), double1, 0.01D);
  }

  @Test
  public void test007()  throws Throwable  {
      double double0 = 6.3818993714899675E249;
      double double1 = 0.0;
      double double2 = FastMath.hypot(double1, double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      assertEquals(6.3818993714899675E249, double2, 0.01D);
  }

  @Test
  public void test008()  throws Throwable  {
      float float0 = (-1.0F);
      double double0 = FastMath.acosh((double) float0);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      
      double double1 = FastMath.toDegrees((double) float0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals((-57.29577951308232), double1, 0.01D);
      
      double double2 = FastMath.hypot(double1, double0);
      //  // Unstable assertion: assertTrue(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertTrue(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test009()  throws Throwable  {
      double double0 = 0.1111111111111111;
      double double1 = FastMath.max(double0, double0);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertEquals(0.1111111111111111, double1, 0.01D);
      
      long long0 = 0L;
      long long1 = FastMath.min(long0, long0);
      //  // Unstable assertion: assertTrue(long1 == long0);
      //  // Unstable assertion: assertTrue(long0 == long1);
      //  // Unstable assertion: assertEquals(0L, long1);
      
      double double2 = FastMath.log((double) long1, (double) long1);
      //  // Unstable assertion: assertTrue(long1 == long0);
      //  // Unstable assertion: assertTrue(long0 == long1);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      
      double double3 = FastMath.hypot(double2, double1);
      //  // Unstable assertion: assertTrue(long1 == long0);
      //  // Unstable assertion: assertTrue(long0 == long1);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertTrue(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertTrue(double3 == double2);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertEquals(Double.NaN, double3, 0.01D);
  }

  @Test
  public void test010()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.toRadians(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
      
      double double2 = Double.POSITIVE_INFINITY;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.hypot(double1, double2);
      assertTrue(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertTrue(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double3);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double3);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
  }

  @Test
  public void test011()  throws Throwable  {
      double double0 = 0.0;
      double double1 = Double.POSITIVE_INFINITY;
      double double2 = FastMath.hypot(double1, double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test012()  throws Throwable  {
      double double0 = 0.0;
      int int0 = (-1698);
      double double1 = FastMath.scalb(double0, int0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
      
      float float0 = FastMath.scalb((float) int0, int0);
      assertEquals(-0.0F, float0, 0.01F);
      
      double double2 = FastMath.max((double) float0, double1);
      assertTrue(double1 == double0);
      assertTrue(double1 == double2);
      assertTrue(double2 == double1);
      assertTrue(double2 == double0);
      assertTrue(double0 == double2);
      assertTrue(double0 == double1);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test013()  throws Throwable  {
      double double0 = (-150.78);
      float float0 = 2850.1F;
      float float1 = FastMath.nextUp(float0);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertEquals(2850.1003F, float1, 0.01F);
      
      double double1 = FastMath.log(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = FastMath.max((double) float1, double1);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test014()  throws Throwable  {
      double double0 = (-5928.746739021882);
      int int0 = 0;
      double double1 = FastMath.cos(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-0.8465097163317438), double1, 0.01D);
      
      double double2 = FastMath.max((double) int0, double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test015()  throws Throwable  {
      float float0 = -0.0F;
      float float1 = FastMath.signum(float0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals(-0.0F, float1, 0.01F);
      
      float float2 = FastMath.max(float1, float1);
      assertTrue(float2 == float1);
      assertTrue(float2 == float0);
      assertTrue(float0 == float1);
      assertTrue(float0 == float2);
      assertTrue(float1 == float0);
      assertTrue(float1 == float2);
      assertEquals(-0.0F, float2, 0.01F);
  }

  @Test
  public void test016()  throws Throwable  {
      float float0 = 2004.5671F;
      int int0 = FastMath.getExponent(float0);
      assertEquals(10, int0);
      
      int int1 = 0;
      assertFalse(int1 == int0);
      
      float float1 = FastMath.max((float) int1, (float) int0);
      assertFalse(int0 == int1);
      assertFalse(float1 == float0);
      assertFalse(int1 == int0);
      assertFalse(float0 == float1);
      assertEquals(10.0F, float1, 0.01F);
  }

  @Test
  public void test017()  throws Throwable  {
      int int0 = 56;
      int int1 = 2098;
      float float0 = FastMath.max((float) int1, (float) int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(2098.0F, float0, 0.01F);
  }

  @Test
  public void test018()  throws Throwable  {
      float float0 = 1169.1893F;
      int int0 = FastMath.round(float0);
      assertEquals(1169, int0);
      
      float float1 = 214.212F;
      int int1 = FastMath.round(float1);
      assertFalse(int1 == int0);
      assertFalse(float1 == float0);
      assertEquals(214, int1);
      
      long long0 = FastMath.max((long) int0, (long) int1);
      assertFalse(int1 == int0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertFalse(int0 == int1);
      assertEquals(1169L, long0);
  }

  @Test
  public void test019()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1665);
      int int2 = FastMath.max(int0, int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
  }

  @Test
  public void test020()  throws Throwable  {
      double double0 = (-3003.955551);
      double double1 = FastMath.log10(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = 1488.371542164589;
      //  // Unstable assertion: assertFalse(double2 == double1);
      
      double double3 = FastMath.min(double2, double1);
      //  // Unstable assertion: assertTrue(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertTrue(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertEquals(1488.371542164589, double3, 0.01D);
  }

  @Test
  public void test021()  throws Throwable  {
      double double0 = (-1513.898639953326);
      int int0 = 0;
      int int1 = FastMath.min(int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0, int1);
      
      double double1 = FastMath.min((double) int1, double0);
      assertTrue(int1 == int0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertTrue(int0 == int1);
      assertEquals((-1513.898639953326), double1, 0.01D);
  }

  @Test
  public void test022()  throws Throwable  {
      double double0 = (-3003.955551);
      double double1 = FastMath.min(double0, double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals((-3003.955551), double1, 0.01D);
  }

  @Test
  public void test023()  throws Throwable  {
      float float0 = -0.0F;
      float float1 = FastMath.min(float0, float0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals(-0.0F, float1, 0.01F);
  }

  @Test
  public void test024()  throws Throwable  {
      int int0 = 0;
      float float0 = Float.NaN;
      float float1 = FastMath.min((float) int0, float0);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertEquals(0.0F, float1, 0.01F);
  }

  @Test
  public void test025()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.min(int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0, int1);
      
      long long0 = 866L;
      long long1 = FastMath.min(long0, (long) int1);
      assertTrue(int1 == int0);
      assertFalse(long1 == long0);
      assertTrue(int0 == int1);
      assertFalse(long0 == long1);
      assertEquals(0L, long1);
  }

  @Test
  public void test026()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1953);
      int int2 = FastMath.min(int0, int1);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals((-1953), int2);
  }

  @Test
  public void test027()  throws Throwable  {
      float float0 = 0.5F;
      double double0 = FastMath.rint((double) float0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test028()  throws Throwable  {
      double double0 = (-7.800414592973399E-9);
      double double1 = FastMath.rint(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(-0.0, double1, 0.01D);
  }

  @Test
  public void test029()  throws Throwable  {
      double double0 = (-3003.955551);
      double double1 = FastMath.log10(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = FastMath.rint(double1);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test030()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.rint((double) float0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test031()  throws Throwable  {
      double double0 = (-3.514601201473235E-136);
      double double1 = FastMath.ceil(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(-0.0, double1, 0.01D);
  }

  @Test
  public void test032()  throws Throwable  {
      double double0 = 1838.4429522105836;
      double double1 = FastMath.ceil(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1839.0, double1, 0.01D);
  }

  @Test
  public void test033()  throws Throwable  {
      float float0 = 0.5F;
      int int0 = FastMath.getExponent((double) float0);
      assertEquals((-1), int0);
      
      double double0 = FastMath.ceil((double) int0);
      assertEquals((-1.0), double0, 0.01D);
  }

  @Test
  public void test034()  throws Throwable  {
      double double0 = (-646.33742069);
      double double1 = FastMath.sinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-2.510413476141213E280), double1, 0.01D);
      
      long long0 = FastMath.round(double1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-9223372036854775808L), long0);
  }

  @Test
  public void test035()  throws Throwable  {
      float float0 = (-582.71F);
      int int0 = FastMath.round(float0);
      assertEquals((-583), int0);
      
      int int1 = 1488;
      assertFalse(int1 == int0);
      
      float float1 = FastMath.nextAfter((float) int1, (double) int0);
      assertFalse(int1 == int0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertFalse(int0 == int1);
      assertEquals(1487.9999F, float1, 0.01F);
  }

  @Test
  public void test036()  throws Throwable  {
      int int0 = (-2331);
      float float0 = 0.0F;
      int int1 = FastMath.round(float0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      float float1 = FastMath.nextAfter((float) int1, (double) int0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1.4E-45F), float1, 0.01F);
  }

  @Test
  public void test037()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.signum(float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals((-1.0F), float1, 0.01F);
      
      float float2 = FastMath.nextAfter(float0, (double) float1);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertFalse(float1 == float2);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
      assertEquals((-3.4028235E38F), float2, 0.01F);
  }

  @Test
  public void test038()  throws Throwable  {
      int int0 = 56;
      int int1 = FastMath.abs(int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(56, int1);
      
      float float0 = Float.POSITIVE_INFINITY;
      float float1 = FastMath.nextAfter(float0, (double) int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(3.4028235E38F, float1, 0.01F);
  }

  @Test
  public void test039()  throws Throwable  {
      long long0 = 9218868437227405312L;
      float float0 = FastMath.nextAfter((float) long0, (double) long0);
      assertEquals(9.2188684E18F, float0, 0.01F);
  }

  @Test
  public void test040()  throws Throwable  {
      float float0 = 238.51F;
      float float1 = FastMath.signum(float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(1.0F, float1, 0.01F);
      
      double double0 = FastMath.asin((double) float0);
      assertFalse(float0 == float1);
      assertEquals(Double.NaN, double0, 0.01D);
      
      float float2 = FastMath.nextAfter(float1, double0);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertFalse(float1 == float2);
      assertFalse(float1 == float0);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertEquals(Float.NaN, float2, 0.01F);
  }

  @Test
  public void test041()  throws Throwable  {
      int int0 = 0;
      float float0 = Float.NaN;
      float float1 = FastMath.nextAfter(float0, (double) int0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test
  public void test042()  throws Throwable  {
      double double0 = 1.625;
      double double1 = FastMath.acosh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.0667324319014355, double1, 0.01D);
      
      double double2 = FastMath.nextAfter(double0, double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(1.6249999999999998, double2, 0.01D);
  }

  @Test
  public void test043()  throws Throwable  {
      double double0 = 1664.946817542204;
      double double1 = FastMath.pow(double0, double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = 0.0;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.nextAfter(double1, double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertEquals(1.7976931348623157E308, double3, 0.01D);
  }

  @Test
  public void test044()  throws Throwable  {
      double double0 = (-2876.434);
      double double1 = FastMath.sinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      int int0 = 0;
      double double2 = FastMath.nextAfter(double1, (double) int0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals((-1.7976931348623157E308), double2, 0.01D);
  }

  @Test
  public void test045()  throws Throwable  {
      float float0 = 1.0F;
      double double0 = FastMath.signum((double) float0);
      assertEquals(1.0, double0, 0.01D);
      
      double double1 = FastMath.nextAfter(double0, double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(1.0, double1, 0.01D);
  }

  @Test
  public void test046()  throws Throwable  {
      double double0 = 0.0;
      float float0 = 0.0F;
      float float1 = FastMath.max(float0, float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertEquals(0.0F, float1, 0.01F);
      
      int int0 = (-3283);
      double double1 = FastMath.IEEEremainder((double) int0, double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = FastMath.nextAfter((double) float1, double1);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test047()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.min(int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0, int1);
      
      float float0 = Float.NaN;
      double double0 = FastMath.nextAfter((double) float0, (double) int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test048()  throws Throwable  {
      float float0 = 593.0671F;
      int int0 = 264;
      float float1 = FastMath.scalb(float0, int0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
  }

  @Test
  public void test049()  throws Throwable  {
      long long0 = 0L;
      float float0 = FastMath.nextUp((float) long0);
      assertEquals(1.4E-45F, float0, 0.01F);
      
      int int0 = 264;
      float float1 = FastMath.scalb(float0, int0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(4.1538375E34F, float1, 0.01F);
  }

  @Test
  public void test050()  throws Throwable  {
      float float0 = 1897.9653F;
      int int0 = (-165);
      float float1 = FastMath.scalb(float0, int0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test
  public void test051()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.getExponent((float) int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-127), int1);
      
      float float0 = FastMath.scalb((float) int1, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-7.464389E-37F), float0, 0.01F);
  }

  @Test
  public void test052()  throws Throwable  {
      int int0 = (-1698);
      int int1 = (-275);
      float float0 = FastMath.scalb((float) int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(-0.0F, float0, 0.01F);
  }

  @Test
  public void test053()  throws Throwable  {
      float float0 = (-1757.844F);
      int int0 = 245;
      float float1 = FastMath.scalb(float0, int0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
  }

  @Test
  public void test054()  throws Throwable  {
      float float0 = (-1.4E-45F);
      float float1 = 351.0F;
      int int0 = FastMath.round(float1);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertEquals(351, int0);
      
      float float2 = FastMath.scalb(float0, int0);
      //  // Unstable assertion: assertFalse(float2 == float1);
      //  // Unstable assertion: assertTrue(float2 == float0);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(float1 == float2);
      //  // Unstable assertion: assertTrue(float0 == float2);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertEquals((-1.4E-45F), float2, 0.01F);
  }

  @Test
  public void test055()  throws Throwable  {
      float float0 = 659.8F;
      int int0 = 1298;
      float float1 = FastMath.scalb(float0, int0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      
      float float2 = FastMath.scalb(float1, int0);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertTrue(float1 == float2);
      assertTrue(float2 == float1);
      assertFalse(float2 == float0);
      assertEquals(Float.POSITIVE_INFINITY, float2, 0.01F);
  }

  @Test
  public void test056()  throws Throwable  {
      float float0 = Float.NaN;
      int int0 = 491;
      float float1 = FastMath.scalb(float0, int0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test
  public void test057()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.min(int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0, int1);
      
      float float0 = FastMath.scalb((float) int1, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test058()  throws Throwable  {
      int int0 = (-1619);
      int int1 = FastMath.abs(int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1619, int1);
      
      float float0 = FastMath.scalb((float) int1, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test059()  throws Throwable  {
      double double0 = (-5928.746739021882);
      int int0 = 1711;
      double double1 = FastMath.scalb(double0, int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test060()  throws Throwable  {
      double double0 = (-5928.746739021882);
      double double1 = FastMath.sin(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.5323732714514795, double1, 0.01D);
      
      int int0 = 1711;
      double double2 = FastMath.scalb(double1, int0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test061()  throws Throwable  {
      float float0 = 3855.7356F;
      int int0 = (-1133);
      double double0 = FastMath.scalb((double) float0, int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test062()  throws Throwable  {
      double double0 = 692.461294065107;
      int int0 = (-1055);
      double double1 = FastMath.scalb(double0, int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.793701113E-315, double1, 0.01D);
  }

  @Test
  public void test063()  throws Throwable  {
      int int0 = (-1133);
      double double0 = FastMath.scalb((double) int0, int0);
      assertEquals(-0.0, double0, 0.01D);
  }

  @Test
  public void test064()  throws Throwable  {
      double double0 = 0.902267575263977;
      double double1 = FastMath.toRadians(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.015747539922342145, double1, 0.01D);
      
      int int0 = 1024;
      double double2 = FastMath.scalb(double1, int0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(2.830924440936472E306, double2, 0.01D);
  }

  @Test
  public void test065()  throws Throwable  {
      float float0 = 1.0F;
      double double0 = (-704.1228);
      double double1 = FastMath.copySign((double) float0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1.0), double1, 0.01D);
      
      int int0 = 3498;
      double double2 = FastMath.scalb(double1, int0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test066()  throws Throwable  {
      double double0 = 0.1111111111111111;
      int int0 = 3677;
      double double1 = FastMath.scalb(double0, int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test067()  throws Throwable  {
      int int0 = (-2331);
      int int1 = 17;
      double double0 = FastMath.scalb((double) int1, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test068()  throws Throwable  {
      int int0 = (-1502);
      int int1 = (-3746);
      double double0 = FastMath.scalb((double) int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(-0.0, double0, 0.01D);
  }

  @Test
  public void test069()  throws Throwable  {
      double double0 = 1664.946817542204;
      double double1 = FastMath.pow(double0, double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      int int0 = (-3670);
      double double2 = FastMath.scalb(double1, int0);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test070()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.toRadians(double0);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertEquals(0.0, double1, 0.01D);
      
      double double2 = FastMath.log(double1, double0);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      
      int int0 = Integer.MIN_VALUE;
      double double3 = FastMath.scalb(double2, int0);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertTrue(double3 == double2);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertTrue(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double3, 0.01D);
  }

  @Test
  public void test071()  throws Throwable  {
      float float0 = (-1261.88F);
      int int0 = 353;
      float float1 = FastMath.scalb(float0, int0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      
      float float2 = FastMath.ulp(float1);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertFalse(float1 == float2);
      assertFalse(float1 == float0);
      assertEquals(Float.POSITIVE_INFINITY, float2, 0.01F);
  }

  @Test
  public void test072()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = FastMath.abs(float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertEquals(0.0F, float1, 0.01F);
      
      float float2 = FastMath.ulp(float1);
      //  // Unstable assertion: assertTrue(float0 == float2);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float2 == float1);
      //  // Unstable assertion: assertTrue(float2 == float0);
      //  // Unstable assertion: assertTrue(float1 == float2);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertEquals(0.0F, float2, 0.01F);
  }

  @Test
  public void test073()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      double double1 = FastMath.ulp(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test074()  throws Throwable  {
      double double0 = 0.0;
      int int0 = FastMath.getExponent(double0);
      assertEquals((-1023), int0);
      
      float float0 = FastMath.abs((float) int0);
      assertEquals(1023.0F, float0, 0.01F);
  }

  @Test
  public void test075()  throws Throwable  {
      float float0 = 1169.1893F;
      int int0 = FastMath.round(float0);
      assertEquals(1169, int0);
      
      long long0 = FastMath.abs((long) int0);
      assertEquals(1169L, long0);
  }

  @Test
  public void test076()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.toDegrees(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test077()  throws Throwable  {
      double double0 = 1664.946817542204;
      double double1 = FastMath.pow(double0, double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.toDegrees(double1);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test078()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.ulp(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(4.9E-324, double1, 0.01D);
      
      double double2 = FastMath.toRadians(double1);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test079()  throws Throwable  {
      double double0 = 1664.946817542204;
      double double1 = FastMath.pow(double0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.toRadians(double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test080()  throws Throwable  {
      long long0 = 2321L;
      double double0 = FastMath.acos((double) long0);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      
      double double1 = FastMath.cbrt(double0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test081()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.cbrt(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test082()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.ulp(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(4.9E-324, double1, 0.01D);
      
      double double2 = FastMath.cbrt(double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(1.7031839360032603E-108, double2, 0.01D);
  }

  @Test
  public void test083()  throws Throwable  {
      double double0 = 2553.824;
      double double1 = FastMath.cbrt(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(13.668797869767673, double1, 0.01D);
  }

  @Test
  public void test084()  throws Throwable  {
      double double0 = (-1.56400149127482E-259);
      double double1 = FastMath.acos(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.5707963267948966, double1, 0.01D);
  }

  @Test
  public void test085()  throws Throwable  {
      double double0 = (-620.90345079);
      double double1 = FastMath.cos(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.4249455250622175, double1, 0.01D);
      
      double double2 = FastMath.acos(double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(1.1318946207790959, double2, 0.01D);
  }

  @Test
  public void test086()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.cos(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.0, double1, 0.01D);
      
      double double2 = FastMath.acos(double1);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test087()  throws Throwable  {
      float float0 = 0.5F;
      int int0 = FastMath.getExponent((double) float0);
      assertEquals((-1), int0);
      
      double double0 = FastMath.acos((double) int0);
      assertEquals(3.141592653589793, double0, 0.01D);
  }

  @Test
  public void test088()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.copySign(double0, double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
      
      double double2 = FastMath.acos(double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertEquals(1.5707963267948966, double2, 0.01D);
  }

  @Test
  public void test089()  throws Throwable  {
      double double0 = (-1245.63233);
      double double1 = FastMath.tan(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-109.2012502322662), double1, 0.01D);
      
      double double2 = FastMath.acos(double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test090()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.asin(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test091()  throws Throwable  {
      float float0 = (-1.0F);
      float float1 = FastMath.signum(float0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals((-1.0F), float1, 0.01F);
      
      double double0 = FastMath.asin((double) float1);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals((-1.5707963267948966), double0, 0.01D);
  }

  @Test
  public void test092()  throws Throwable  {
      float float0 = 1.0F;
      double double0 = FastMath.asin((double) float0);
      assertEquals(1.5707963267948966, double0, 0.01D);
  }

  @Test
  public void test093()  throws Throwable  {
      double double0 = 0.1111111111111111;
      double double1 = FastMath.max(double0, double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.1111111111111111, double1, 0.01D);
      
      double double2 = 1888.0;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.log(double1, double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertEquals((-3.43309164867), double3, 0.01D);
      
      double double4 = FastMath.asin(double3);
      assertFalse(double0 == double4);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertFalse(double4 == double1);
      assertFalse(double4 == double2);
      assertFalse(double4 == double3);
      assertFalse(double4 == double0);
      assertFalse(double3 == double4);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double1 == double4);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double4);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertEquals(Double.NaN, double4, 0.01D);
  }

  @Test
  public void test094()  throws Throwable  {
      double double0 = (-620.90345079);
      double double1 = 0.0;
      float float0 = 2004.5671F;
      float float1 = (-6.9F);
      float float2 = FastMath.min(float0, float1);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(float2 == float0);
      assertTrue(float2 == float1);
      assertTrue(float1 == float2);
      assertFalse(float1 == float0);
      assertEquals((-6.9F), float2, 0.01F);
      
      double double2 = FastMath.nextAfter(double1, (double) float2);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(float2 == float0);
      assertTrue(float2 == float1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(float1 == float2);
      assertFalse(float1 == float0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals((-4.9E-324), double2, 0.01D);
      
      double double3 = FastMath.atan2(double0, double2);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(float2 == float0);
      assertTrue(float2 == float1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertTrue(float1 == float2);
      assertFalse(float1 == float0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertEquals((-1.5707963267948966), double3, 0.01D);
  }

  @Test
  public void test095()  throws Throwable  {
      double double0 = (-620.90345079);
      double double1 = 0.0;
      double double2 = FastMath.hypot(double0, double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(620.90345079, double2, 0.01D);
      
      double double3 = FastMath.nextAfter(double1, double2);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertEquals(4.9E-324, double3, 0.01D);
      
      double double4 = FastMath.atan2(double2, double3);
      assertFalse(double4 == double3);
      assertFalse(double4 == double1);
      assertFalse(double4 == double0);
      assertFalse(double4 == double2);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double4);
      assertFalse(double2 == double4);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double1 == double3);
      assertFalse(double1 == double4);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double4);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertEquals(1.5707963267948966, double4, 0.01D);
  }

  @Test
  public void test096()  throws Throwable  {
      double double0 = 1571.007335941;
      double double1 = FastMath.atan(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.5701597926157977, double1, 0.01D);
      
      double double2 = FastMath.random();
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(0.0, double2, 0.01D);
      
      double double3 = FastMath.atan2(double1, double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertEquals(1.5707963267948966, double3, 0.01D);
  }

  @Test
  public void test097()  throws Throwable  {
      double double0 = (-3003.955551);
      double double1 = 0.0;
      double double2 = FastMath.atan2(double0, double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals((-1.5707963267948966), double2, 0.01D);
  }

  @Test
  public void test098()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.signum(float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals((-1.0F), float1, 0.01F);
      
      double double0 = FastMath.atan2((double) float1, (double) float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals((-3.141592653589793), double0, 0.01D);
  }

  @Test
  public void test099()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-906.4396);
      double double2 = FastMath.log10(double1);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      
      double double3 = FastMath.log10(double0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, double3, 0.01D);
      
      double double4 = FastMath.atan2(double2, double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double4);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double4 == double3);
      //  // Unstable assertion: assertFalse(double4 == double0);
      //  // Unstable assertion: assertFalse(double4 == double1);
      //  // Unstable assertion: assertFalse(double4 == double2);
      //  // Unstable assertion: assertFalse(double0 == double4);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double4);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double2 == double4);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertEquals(3.141592653589793, double4, 0.01D);
  }

  @Test
  public void test100()  throws Throwable  {
      double double0 = (-5928.746739021882);
      double double1 = Double.POSITIVE_INFINITY;
      double double2 = FastMath.atan2(double0, double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(-0.0, double2, 0.01D);
  }

  @Test
  public void test101()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.ulp(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(4.9E-324, double1, 0.01D);
      
      double double2 = 1655.02087;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.expm1(double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
      
      double double4 = FastMath.atan2(double1, double3);
      assertFalse(double1 == double4);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double2 == double4);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double4 == double3);
      assertFalse(double4 == double1);
      assertTrue(double4 == double0);
      assertFalse(double4 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertTrue(double0 == double4);
      assertFalse(double0 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double4);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertEquals(0.0, double4, 0.01D);
  }

  @Test
  public void test102()  throws Throwable  {
      int int0 = (-1502);
      float float0 = Float.NEGATIVE_INFINITY;
      double double0 = FastMath.atan2((double) float0, (double) int0);
      assertEquals((-1.5707963267948966), double0, 0.01D);
  }

  @Test
  public void test103()  throws Throwable  {
      double double0 = 1664.946817542204;
      int int0 = FastMath.getExponent(double0);
      assertEquals(10, int0);
      
      double double1 = FastMath.pow(double0, double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.pow(double1, double1);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      
      double double3 = FastMath.atan2(double2, (double) int0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertTrue(double2 == double1);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(1.5707963267948966, double3, 0.01D);
  }

  @Test
  public void test104()  throws Throwable  {
      double double0 = 1664.946817542204;
      double double1 = FastMath.pow(double0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.atan2(double1, double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(0.7853981633974483, double2, 0.01D);
  }

  @Test
  public void test105()  throws Throwable  {
      float float0 = -0.0F;
      float float1 = FastMath.signum(float0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals(-0.0F, float1, 0.01F);
      
      double double0 = FastMath.atan2((double) float1, (double) float1);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals((-3.141592653589793), double0, 0.01D);
  }

  @Test
  public void test106()  throws Throwable  {
      double double0 = 1664.946817542204;
      double double1 = FastMath.pow(double0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      float float0 = 1.4E-45F;
      long long0 = FastMath.round((double) float0);
      assertEquals(0L, long0);
      
      double double2 = FastMath.atan2((double) long0, double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test107()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.atan2(double0, double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test108()  throws Throwable  {
      double double0 = (-2876.434);
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.random();
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(0.0, double2, 0.01D);
      
      double double3 = FastMath.atan2(double2, double1);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertEquals(3.141592653589793, double3, 0.01D);
  }

  @Test
  public void test109()  throws Throwable  {
      double double0 = (-2.3640641240074437E-8);
      double double1 = FastMath.asin(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-2.364064124007444E-8), double1, 0.01D);
  }

  @Test
  public void test110()  throws Throwable  {
      double double0 = (-1245.63233);
      double double1 = (-1.0626125049032536E262);
      double double2 = FastMath.atan2(double1, double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals((-1.5707963267948966), double2, 0.01D);
  }

  @Test
  public void test111()  throws Throwable  {
      double double0 = (-1245.63233);
      double double1 = FastMath.atanh(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      float float0 = (-1093.26F);
      int int0 = FastMath.round(float0);
      //  // Unstable assertion: assertEquals((-1093), int0);
      
      double double2 = FastMath.atan2((double) int0, double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertEquals(1.5707963267948966, double2, 0.01D);
  }

  @Test
  public void test112()  throws Throwable  {
      double double0 = (-620.90345079);
      double double1 = FastMath.tan(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(2.1301999216660743, double1, 0.01D);
  }

  @Test
  public void test113()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      double double1 = FastMath.tan(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test114()  throws Throwable  {
      float float0 = -0.0F;
      double double0 = FastMath.tan((double) float0);
      assertEquals(-0.0, double0, 0.01D);
  }

  @Test
  public void test115()  throws Throwable  {
      double double0 = FastMath.random();
      assertEquals(0.0, double0, 0.01D);
      
      double double1 = FastMath.tan(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test116()  throws Throwable  {
      float float0 = 2850.1F;
      double double0 = FastMath.expm1((double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.cos(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test117()  throws Throwable  {
      double double0 = (-2725.196557246897);
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.sin(double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test118()  throws Throwable  {
      int int0 = 0;
      double double0 = FastMath.sin((double) int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test119()  throws Throwable  {
      double double0 = 1.6448897917725177E233;
      double double1 = FastMath.cos(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.309550855844218, double1, 0.01D);
  }

  @Test
  public void test120()  throws Throwable  {
      double double0 = 2.268329019570017E70;
      double double1 = FastMath.sin(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-0.748429969611847), double1, 0.01D);
  }

  @Test
  public void test121()  throws Throwable  {
      double double0 = 3.0465278560980536E188;
      double double1 = FastMath.sin(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.29834584066270603, double1, 0.01D);
  }

  @Test
  public void test122()  throws Throwable  {
      double double0 = 656.9;
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(9.705438603221082E284, double1, 0.01D);
      
      double double2 = FastMath.sin(double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(0.002371136373324272, double2, 0.01D);
  }

  @Test
  public void test123()  throws Throwable  {
      double double0 = 6.3818993714899675E249;
      double double1 = FastMath.tan(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-2.4118574163755273), double1, 0.01D);
  }

  @Test
  public void test124()  throws Throwable  {
      double double0 = (-1.6802196396307013E-7);
      int int0 = 966;
      double double1 = FastMath.scalb(double0, int0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1.047953151764642E284), double1, 0.01D);
      
      double double2 = FastMath.cos(double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals((-0.8575773393881152), double2, 0.01D);
  }

  @Test
  public void test125()  throws Throwable  {
      double double0 = 8.720743087611513E168;
      double double1 = FastMath.cos(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-0.9559428335687961), double1, 0.01D);
  }

  @Test
  public void test126()  throws Throwable  {
      double double0 = 1.633123935319537E16;
      double double1 = FastMath.sin(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-0.9586967629285477), double1, 0.01D);
  }

  @Test
  public void test127()  throws Throwable  {
      float float0 = 214.212F;
      double double0 = FastMath.exp((double) float0);
      assertEquals(1.074216938440228E93, double0, 0.01D);
      
      double double1 = FastMath.tan(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1.758596253261317), double1, 0.01D);
  }

  @Test
  public void test128()  throws Throwable  {
      long long0 = 736L;
      long long1 = 9223372036854775807L;
      long long2 = FastMath.max(long0, long1);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertTrue(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertEquals(9223372036854775807L, long2);
      
      double double0 = FastMath.sin((double) long2);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertTrue(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertEquals(0.9999303766734422, double0, 0.01D);
  }

  @Test
  public void test129()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.ulp(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(4.9E-324, double1, 0.01D);
      
      double double2 = FastMath.tan(double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertEquals(4.9E-324, double2, 0.01D);
  }

  @Test
  public void test130()  throws Throwable  {
      int int0 = (-1619);
      long long0 = FastMath.abs((long) int0);
      assertEquals(1619L, long0);
      
      double double0 = FastMath.tan((double) long0);
      assertEquals(1.870242723546135, double0, 0.01D);
  }

  @Test
  public void test131()  throws Throwable  {
      double double0 = (-0.1666666567325592);
      double double1 = FastMath.sin(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-0.16589612289696218), double1, 0.01D);
  }

  @Test
  public void test132()  throws Throwable  {
      float float0 = 2004.5671F;
      int int0 = FastMath.getExponent(float0);
      assertEquals(10, int0);
      
      int int1 = (-1275);
      assertFalse(int1 == int0);
      
      double double0 = FastMath.pow((double) int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test133()  throws Throwable  {
      double double0 = 656.9;
      int int0 = 0;
      double double1 = FastMath.pow(double0, int0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.0, double1, 0.01D);
  }

  @Test
  public void test134()  throws Throwable  {
      float float0 = 2004.5671F;
      int int0 = FastMath.getExponent(float0);
      assertEquals(10, int0);
      
      double double0 = FastMath.pow((double) float0, int0);
      assertEquals(1.0476255119964817E33, double0, 0.01D);
  }

  @Test
  public void test135()  throws Throwable  {
      long long0 = 9218868437227405312L;
      long long1 = FastMath.max(long0, long0);
      //  // Unstable assertion: assertTrue(long1 == long0);
      //  // Unstable assertion: assertTrue(long0 == long1);
      //  // Unstable assertion: assertEquals(9218868437227405312L, long1);
      
      float float0 = Float.NaN;
      float float1 = FastMath.abs(float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      
      double double0 = FastMath.pow((double) long1, (double) float1);
      //  // Unstable assertion: assertTrue(long1 == long0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(long0 == long1);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test136()  throws Throwable  {
      double double0 = (-145.33978010432);
      double double1 = 1888.0;
      double double2 = FastMath.pow(double0, double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test137()  throws Throwable  {
      double double0 = (-150.78);
      float float0 = 2850.1F;
      float float1 = FastMath.nextUp(float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(2850.1003F, float1, 0.01F);
      
      double double1 = FastMath.pow(double0, (double) float1);
      assertFalse(double1 == double0);
      assertFalse(float1 == float0);
      assertFalse(double0 == double1);
      assertFalse(float0 == float1);
      assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test138()  throws Throwable  {
      double double0 = (-2.9275804461593914E217);
      long long0 = (-2783L);
      double double1 = FastMath.pow((double) long0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test139()  throws Throwable  {
      long long0 = 9218868437227405312L;
      long long1 = FastMath.max(long0, long0);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals(9218868437227405312L, long1);
      
      double double0 = (-2983.2);
      double double1 = FastMath.pow(double0, (double) long1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test140()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-906.4396);
      double double2 = FastMath.log10(double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      
      double double3 = FastMath.pow(double1, double2);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double0 == double1);
      assertTrue(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(0.0, double3, 0.01D);
  }

  @Test
  public void test141()  throws Throwable  {
      float float0 = (-1.0F);
      double double0 = FastMath.log1p((double) float0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      
      float float1 = FastMath.min(float0, float0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals((-1.0F), float1, 0.01F);
      
      double double1 = FastMath.pow(double0, (double) float1);
      assertFalse(double1 == double0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertFalse(double0 == double1);
      assertEquals(-0.0, double1, 0.01D);
  }

  @Test
  public void test142()  throws Throwable  {
      double double0 = 1571.007335941;
      double double1 = FastMath.atan(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.5701597926157977, double1, 0.01D);
      
      float float0 = (-1.0F);
      double double2 = FastMath.log1p((double) float0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      
      double double3 = FastMath.pow(double2, double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
  }

  @Test
  public void test143()  throws Throwable  {
      float float0 = 1.0F;
      int int0 = FastMath.round(float0);
      assertEquals(1, int0);
      
      double double0 = 1130.0024072;
      double double1 = FastMath.log((double) float0, double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.pow((double) int0, double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test144()  throws Throwable  {
      double double0 = 1664.946817542204;
      double double1 = FastMath.pow(double0, double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = 1271.0;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.pow(double2, double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double3 == double0);
      assertTrue(double3 == double1);
      assertFalse(double3 == double2);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
  }

  @Test
  public void test145()  throws Throwable  {
      float float0 = (-348.1F);
      double double0 = -0.0;
      double double1 = FastMath.pow(double0, (double) float0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test146()  throws Throwable  {
      float float0 = 1232.1184F;
      double double0 = -0.0;
      double double1 = FastMath.pow(double0, (double) float0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test147()  throws Throwable  {
      long long0 = 9218868437227405312L;
      long long1 = 0L;
      double double0 = FastMath.pow((double) long1, (double) long0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test148()  throws Throwable  {
      double double0 = (-2876.434);
      double double1 = FastMath.sinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      int int0 = 0;
      int int1 = FastMath.min(int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      double double2 = FastMath.pow(double1, (double) int1);
      assertTrue(int0 == int1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(int1 == int0);
      assertEquals(1.0, double2, 0.01D);
  }

  @Test
  public void test149()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.min(int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      double double0 = FastMath.log1p((double) int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test150()  throws Throwable  {
      double double0 = (-1245.63233);
      double double1 = FastMath.tan(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals((-109.2012502322662), double1, 0.01D);
      
      double double2 = FastMath.atanh(double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      
      double double3 = FastMath.log1p(double2);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double3);
      //  // Unstable assertion: assertEquals(Double.NaN, double3, 0.01D);
  }

  @Test
  public void test151()  throws Throwable  {
      double double0 = (-1245.63233);
      double double1 = FastMath.log1p(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test152()  throws Throwable  {
      float float0 = 238.51F;
      float float1 = FastMath.signum(float0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(1.0F, float1, 0.01F);
      
      double double0 = FastMath.log10((double) float1);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test153()  throws Throwable  {
      double double0 = 0.9985313415527344;
      double double1 = FastMath.log(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-0.0014697379831921558), double1, 0.01D);
  }

  @Test
  public void test154()  throws Throwable  {
      double double0 = 0.3333333134651184;
      double double1 = FastMath.asinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.32745013138861473, double1, 0.01D);
  }

  @Test
  public void test155()  throws Throwable  {
      double double0 = 0.625;
      double double1 = FastMath.log(double0, double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.0, double1, 0.01D);
      
      int int0 = (-1051);
      double double2 = FastMath.scalb(double1, int0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(4.144523E-317, double2, 0.01D);
      
      double double3 = FastMath.log(double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertEquals((-728.4976867685025), double3, 0.01D);
  }

  @Test
  public void test156()  throws Throwable  {
      float float0 = 659.8F;
      int int0 = 1298;
      float float1 = FastMath.scalb(float0, int0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      
      double double0 = FastMath.log10((double) float1);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test157()  throws Throwable  {
      double double0 = 8.18942426109357E231;
      double double1 = FastMath.asinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test158()  throws Throwable  {
      float float0 = (-1.0F);
      float float1 = FastMath.nextUp(float0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals((-0.99999994F), float1, 0.01F);
      
      double double0 = FastMath.expm1((double) float1);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals((-0.6321205369012336), double0, 0.01D);
  }

  @Test
  public void test159()  throws Throwable  {
      float float0 = (-1735.5F);
      int int0 = FastMath.getExponent(float0);
      assertEquals(10, int0);
      
      double double0 = (-324.3368248650413);
      double double1 = FastMath.pow((double) int0, double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test160()  throws Throwable  {
      double double0 = (-1612.0818906803);
      double double1 = FastMath.expm1(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1.0), double1, 0.01D);
  }

  @Test
  public void test161()  throws Throwable  {
      double double0 = 0.0;
      long long0 = FastMath.round(double0);
      assertEquals(0L, long0);
      
      double double1 = FastMath.signum((double) long0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test162()  throws Throwable  {
      double double0 = (-54.3292252);
      double double1 = FastMath.signum(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1.0), double1, 0.01D);
  }

  @Test
  public void test163()  throws Throwable  {
      double double0 = 0.008333333333333333;
      double double1 = FastMath.atanh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.008333526242605851, double1, 0.01D);
  }

  @Test
  public void test164()  throws Throwable  {
      double double0 = 0.087;
      double double1 = FastMath.atanh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.08722050326312049, double1, 0.01D);
  }

  @Test
  public void test165()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.atanh(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test166()  throws Throwable  {
      double double0 = 0.097;
      double double1 = FastMath.asinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.09684852829972478, double1, 0.01D);
  }

  @Test
  public void test167()  throws Throwable  {
      double double0 = (-0.1428571423679182);
      double double1 = FastMath.atan(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-0.14189705412472375), double1, 0.01D);
      
      double double2 = FastMath.asinh(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals((-0.14142514007239856), double2, 0.01D);
  }

  @Test
  public void test168()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.asinh((double) float0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test169()  throws Throwable  {
      double double0 = 0.09090909090909091;
      double double1 = FastMath.tanh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.0906594777770402, double1, 0.01D);
  }

  @Test
  public void test170()  throws Throwable  {
      double double0 = (-1612.0818906803);
      double double1 = FastMath.atan2(double0, double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-2.356194490192345), double1, 0.01D);
      
      double double2 = FastMath.tanh(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals((-0.9821933800072388), double2, 0.01D);
  }

  @Test
  public void test171()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.tanh(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test172()  throws Throwable  {
      double double0 = 1571.007335941;
      double double1 = FastMath.asin(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = FastMath.tanh(double1);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertEquals(1.0, double2, 0.01D);
  }

  @Test
  public void test173()  throws Throwable  {
      double double0 = (-3003.955551);
      double double1 = FastMath.tanh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1.0), double1, 0.01D);
  }

  @Test
  public void test174()  throws Throwable  {
      double double0 = 981.093574463026;
      double double1 = FastMath.asinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(7.581815282116861, double1, 0.01D);
      
      double double2 = FastMath.sinh(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(981.0935744630259, double2, 0.01D);
  }

  @Test
  public void test175()  throws Throwable  {
      int int0 = (-1133);
      int int1 = FastMath.max(int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals((-1133), int1);
      
      double double0 = FastMath.pow((double) int1, (double) int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(-0.0, double0, 0.01D);
      
      double double1 = FastMath.sinh(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(-0.0, double1, 0.01D);
  }

  @Test
  public void test176()  throws Throwable  {
      double double0 = (-1.251E-8);
      double double1 = FastMath.sinh(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals((-1.251E-8), double1, 0.01D);
  }

  @Test
  public void test177()  throws Throwable  {
      double double0 = (-906.4396);
      double double1 = FastMath.log10(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = FastMath.sinh(double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test178()  throws Throwable  {
      double double0 = (-4.566098167230033E-8);
      double double1 = FastMath.cosh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.000000000000001, double1, 0.01D);
  }

  @Test
  public void test179()  throws Throwable  {
      float float0 = (-1255.6162F);
      double double0 = FastMath.cosh((double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test180()  throws Throwable  {
      float float0 = (-591.77515F);
      double double0 = FastMath.cosh((double) float0);
      assertEquals(5.0541793614215506E256, double0, 0.01D);
  }

  @Test
  public void test181()  throws Throwable  {
      double double0 = 656.9;
      double double1 = FastMath.cosh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(9.705438603221082E284, double1, 0.01D);
  }

  @Test
  public void test182()  throws Throwable  {
      float float0 = 2850.1F;
      float float1 = FastMath.nextUp(float0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(2850.1003F, float1, 0.01F);
      
      double double0 = FastMath.cosh((double) float1);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test183()  throws Throwable  {
      double double0 = 0.902267575263977;
      double double1 = FastMath.toRadians(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.015747539922342145, double1, 0.01D);
      
      double double2 = FastMath.cosh(double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(1.000123995069181, double2, 0.01D);
  }

  @Test
  public void test184()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.ulp(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(4.9E-324, double1, 0.01D);
      
      int int0 = (-1619);
      double double2 = FastMath.atan2(double1, (double) int0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(3.141592653589793, double2, 0.01D);
  }

  @Test
  public void test185()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.min(int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      double double0 = FastMath.expm1((double) int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test186()  throws Throwable  {
      double double0 = (-1402.2776633809733);
      double double1 = FastMath.cos(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.42906414054088093, double1, 0.01D);
      
      double double2 = FastMath.nextUp(double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(0.429064140540881, double2, 0.01D);
  }

  @Test
  public void test187()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.min(int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0, int1);
      
      double double0 = FastMath.atan((double) int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test188()  throws Throwable  {
      double double0 = (-3003.955551);
      double double1 = FastMath.hypot(double0, double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(4248.234680990144, double1, 0.01D);
  }

  @Test
  public void test189()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.abs(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
      
      long long0 = FastMath.round(double1);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0L, long0);
  }
}
