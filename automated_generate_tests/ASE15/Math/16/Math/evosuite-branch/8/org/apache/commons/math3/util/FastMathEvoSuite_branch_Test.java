/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:53:09 GMT 2014
 */

package org.apache.commons.math3.util;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math3.util.FastMath;



import org.junit.runner.RunWith;


public class FastMathEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      double double0 = 3.141592653589793;
      double double1 = FastMath.cos(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test001()  throws Throwable  {
      float float0 = (-1101.0F);
      float float1 = 1.0F;
      float float2 = FastMath.copySign(float0, float1);
      assertEquals(1101.0F, float2, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float1 == float2);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
  }

  @Test
  public void test002()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = (-1.0F);
      float float2 = FastMath.copySign(float0, float1);
      //  // Unstable assertion: assertEquals(-0.0F, float2, 0.01F);
      //  // Unstable assertion: assertFalse(float1 == float2);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(float0 == float2);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertFalse(float2 == float1);
      //  // Unstable assertion: assertFalse(float2 == float0);
  }

  @Test
  public void test003()  throws Throwable  {
      float float0 = (-1160.093F);
      float float1 = FastMath.copySign(float0, float0);
      assertEquals((-1160.093F), float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
  }

  @Test
  public void test004()  throws Throwable  {
      float float0 = (-1.4E-45F);
      float float1 = 0.0F;
      double double0 = FastMath.copySign((double) float0, (double) float1);
      assertEquals(1.401298464324817E-45, double0, 0.01D);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test005()  throws Throwable  {
      double double0 = 161.08837865645;
      double double1 = (-468.93229408019056);
      double double2 = FastMath.copySign(double0, double1);
      assertEquals((-161.08837865645), double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test006()  throws Throwable  {
      float float0 = (-3.4028235E38F);
      int int0 = (-6);
      double double0 = FastMath.scalb((double) float0, int0);
      assertEquals((-5.3169116662270134E36), double0, 0.01D);
      
      double double1 = FastMath.copySign(double0, (double) int0);
      assertEquals((-5.3169116662270134E36), double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test007()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.tan(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      int int0 = FastMath.getExponent(double1);
      assertEquals((-1023), int0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      float float0 = 0.0F;
      double double2 = FastMath.hypot((double) float0, (double) int0);
      assertEquals(1023.0, double2, 0.01D);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test008()  throws Throwable  {
      double double0 = 936.5917705624672;
      double double1 = FastMath.max(double0, double0);
      //  // Unstable assertion: assertEquals(936.5917705624672, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertTrue(double1 == double0);
      
      double double2 = FastMath.asin(double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      
      double double3 = FastMath.hypot(double1, double2);
      //  // Unstable assertion: assertEquals(Double.NaN, double3, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertTrue(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertTrue(double3 == double2);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
  }

  @Test
  public void test009()  throws Throwable  {
      double double0 = (-1.5821896727910552E-8);
      double double1 = FastMath.log(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      double double2 = FastMath.hypot(double1, double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
  }

  @Test
  public void test010()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.tan(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      float float0 = 1175.0798F;
      int int0 = 276;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      double double2 = FastMath.hypot(double1, (double) float1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test011()  throws Throwable  {
      double double0 = 1025.8216534;
      double double1 = 0.0;
      double double2 = FastMath.log(double0, double1);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.hypot(double2, double2);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test012()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.acosh(double0);
      //  // Unstable assertion: assertEquals(710.1881780014921, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double2 = -0.0;
      //  // Unstable assertion: assertFalse(double2 == double1);
      
      double double3 = FastMath.max(double2, double2);
      //  // Unstable assertion: assertEquals(-0.0, double3, 0.01D);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertTrue(double3 == double2);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertTrue(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double0);
      
      double double4 = FastMath.max(double3, double1);
      //  // Unstable assertion: assertEquals(710.1881780014921, double4, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double4);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double4);
      //  // Unstable assertion: assertTrue(double3 == double2);
      //  // Unstable assertion: assertFalse(double4 == double2);
      //  // Unstable assertion: assertTrue(double4 == double1);
      //  // Unstable assertion: assertFalse(double4 == double0);
      //  // Unstable assertion: assertFalse(double4 == double3);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double4);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertTrue(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double4);
      //  // Unstable assertion: assertFalse(double2 == double0);
  }

  @Test
  public void test013()  throws Throwable  {
      float float0 = 1768.0092F;
      int int0 = (-1818);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      float float2 = FastMath.max(float1, float0);
      assertEquals(1768.0092F, float2, 0.01F);
      assertTrue(float2 == float0);
      assertFalse(float2 == float1);
      assertFalse(float1 == float0);
      assertFalse(float1 == float2);
      assertTrue(float0 == float2);
      assertFalse(float0 == float1);
  }

  @Test
  public void test014()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = (-1190.7517F);
      float float2 = FastMath.max(float0, float1);
      assertEquals(0.0F, float2, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float1 == float2);
      assertTrue(float2 == float0);
      assertFalse(float2 == float1);
      assertTrue(float0 == float2);
      assertFalse(float0 == float1);
  }

  @Test
  public void test015()  throws Throwable  {
      int int0 = (-1818);
      int int1 = FastMath.max(int0, int0);
      assertEquals((-1818), int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      long long0 = 5244L;
      long long1 = FastMath.max(long0, (long) int1);
      assertEquals(5244L, long1);
      assertTrue(long1 == long0);
      assertTrue(int0 == int1);
      assertTrue(long0 == long1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test016()  throws Throwable  {
      int int0 = (-1023);
      int int1 = (-1982);
      int int2 = FastMath.max(int0, int1);
      assertEquals((-1023), int2);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test
  public void test017()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = FastMath.copySign(float0, float0);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      float float2 = Float.NEGATIVE_INFINITY;
      assertFalse(float2 == float1);
      
      double double0 = FastMath.min((double) float2, (double) float1);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      assertTrue(float1 == float0);
      assertFalse(float1 == float2);
      assertFalse(float0 == float2);
      assertTrue(float0 == float1);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
  }

  @Test
  public void test018()  throws Throwable  {
      double double0 = 0.0;
      float float0 = 0.5F;
      float float1 = FastMath.max(float0, float0);
      assertEquals(0.5F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double1 = FastMath.min((double) float1, double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(float1 == float0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertTrue(float0 == float1);
  }

  @Test
  public void test019()  throws Throwable  {
      double double0 = 3.141592653589793;
      double double1 = FastMath.toDegrees(double0);
      assertEquals(180.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.min(double1, double1);
      assertEquals(180.0, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
  }

  @Test
  public void test020()  throws Throwable  {
      float float0 = (-1683.0F);
      int int0 = (-1965);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(-0.0F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      float float2 = FastMath.min(float1, float1);
      assertEquals(-0.0F, float2, 0.01F);
      assertTrue(float2 == float1);
      assertFalse(float2 == float0);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertTrue(float1 == float2);
      assertFalse(float1 == float0);
  }

  @Test
  public void test021()  throws Throwable  {
      float float0 = (-2782.2F);
      float float1 = 0.0F;
      float float2 = FastMath.min(float0, float1);
      assertEquals((-2782.2F), float2, 0.01F);
      assertTrue(float0 == float2);
      assertFalse(float0 == float1);
      assertTrue(float2 == float0);
      assertFalse(float2 == float1);
      assertFalse(float1 == float2);
      assertFalse(float1 == float0);
  }

  @Test
  public void test022()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.tan(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      int int0 = 276;
      int int1 = FastMath.getExponent(double1);
      assertEquals((-1023), int1);
      assertFalse(int1 == int0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      long long0 = FastMath.min((long) int0, (long) int1);
      assertEquals((-1023L), long0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test023()  throws Throwable  {
      int int0 = 3;
      int int1 = 0;
      int int2 = FastMath.min(int0, int1);
      assertEquals(0, int2);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test
  public void test024()  throws Throwable  {
      double double0 = 0.5;
      double double1 = FastMath.rint(double0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test025()  throws Throwable  {
      double double0 = (-0.25);
      double double1 = FastMath.rint(double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test026()  throws Throwable  {
      double double0 = (-3.8809601937571554E-8);
      double double1 = FastMath.ceil(double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test027()  throws Throwable  {
      int int0 = (-1794);
      double double0 = FastMath.ceil((double) int0);
      assertEquals((-1794.0), double0, 0.01D);
  }

  @Test
  public void test028()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      int int0 = FastMath.round(float0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test
  public void test029()  throws Throwable  {
      float float0 = (-3.4028235E38F);
      double double0 = FastMath.cosh((double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.rint(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test030()  throws Throwable  {
      float float0 = (-1160.093F);
      int int0 = 2015;
      float float1 = FastMath.nextAfter((float) int0, (double) float0);
      assertEquals(2014.9999F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test031()  throws Throwable  {
      double double0 = (-1979.1995070637408);
      float float0 = -0.0F;
      float float1 = FastMath.max(float0, float0);
      assertEquals(-0.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      float float2 = FastMath.nextAfter(float1, double0);
      assertEquals((-1.4E-45F), float2, 0.01F);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertFalse(float1 == float2);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertFalse(float0 == float2);
  }

  @Test
  public void test032()  throws Throwable  {
      int int0 = 0;
      float float0 = FastMath.nextUp((float) int0);
      assertEquals(1.4E-45F, float0, 0.01F);
  }

  @Test
  public void test033()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.nextUp(float0);
      assertEquals((-3.4028235E38F), float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test034()  throws Throwable  {
      float float0 = (-1683.0F);
      int int0 = (-1965);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(-0.0F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      float float2 = Float.POSITIVE_INFINITY;
      assertFalse(float2 == float1);
      
      float float3 = FastMath.nextAfter(float2, (double) float1);
      assertEquals(3.4028235E38F, float3, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
      assertFalse(float0 == float3);
      assertFalse(float3 == float1);
      assertFalse(float3 == float0);
      assertFalse(float3 == float2);
      assertFalse(float2 == float3);
      assertFalse(float2 == float1);
      assertFalse(float2 == float0);
      assertFalse(float1 == float3);
      assertFalse(float1 == float0);
      assertFalse(float1 == float2);
  }

  @Test
  public void test035()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.sqrt(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      float float0 = 0.0F;
      float float1 = FastMath.nextAfter(float0, double1);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertTrue(float0 == float1);
  }

  @Test
  public void test036()  throws Throwable  {
      int int0 = (-1072);
      double double0 = FastMath.log((double) int0);
      assertEquals(Double.NaN, double0, 0.01D);
      
      float float0 = FastMath.nextAfter((float) int0, double0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test
  public void test037()  throws Throwable  {
      float float0 = Float.NaN;
      float float1 = FastMath.nextUp(float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
  }

  @Test
  public void test038()  throws Throwable  {
      double double0 = 161.08837865645;
      int int0 = 611;
      double double1 = FastMath.nextAfter(double0, (double) int0);
      assertEquals(161.08837865645003, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test039()  throws Throwable  {
      double double0 = (-229.0);
      double double1 = FastMath.tanh(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      int int0 = 18;
      int int1 = FastMath.max(int0, int0);
      assertEquals(18, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      double double2 = FastMath.nextAfter((double) int1, double1);
      assertEquals(17.999999999999996, double2, 0.01D);
      assertTrue(int1 == int0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(int0 == int1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test040()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = FastMath.copySign(float0, float0);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      float float2 = Float.NEGATIVE_INFINITY;
      assertFalse(float2 == float1);
      
      float float3 = FastMath.min(float2, float2);
      assertEquals(Float.NEGATIVE_INFINITY, float3, 0.01F);
      assertFalse(float3 == float1);
      assertTrue(float3 == float2);
      assertFalse(float3 == float0);
      assertFalse(float2 == float1);
      assertFalse(float2 == float0);
      assertTrue(float2 == float3);
      
      double double0 = FastMath.nextAfter((double) float1, (double) float3);
      assertEquals((-4.9E-324), double0, 0.01D);
      assertFalse(float1 == float3);
      assertFalse(float1 == float2);
      assertTrue(float1 == float0);
      assertFalse(float3 == float1);
      assertTrue(float3 == float2);
      assertFalse(float3 == float0);
      assertFalse(float0 == float2);
      assertTrue(float0 == float1);
      assertFalse(float0 == float3);
      assertFalse(float2 == float1);
      assertFalse(float2 == float0);
      assertTrue(float2 == float3);
  }

  @Test
  public void test041()  throws Throwable  {
      int int0 = 3898;
      double double0 = (-297.751899926);
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.nextAfter(double1, (double) int0);
      assertEquals((-1.7976931348623157E308), double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test042()  throws Throwable  {
      int int0 = 2299;
      float float0 = FastMath.scalb((float) int0, int0);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
      
      double double0 = FastMath.nextAfter((double) float0, (double) int0);
      assertEquals(1.7976931348623157E308, double0, 0.01D);
  }

  @Test
  public void test043()  throws Throwable  {
      int int0 = 35;
      float float0 = FastMath.copySign((float) int0, (float) int0);
      assertEquals(35.0F, float0, 0.01F);
      
      double double0 = FastMath.nextAfter((double) float0, (double) float0);
      assertEquals(35.0, double0, 0.01D);
  }

  @Test
  public void test044()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 916;
      int int1 = FastMath.min(int0, int0);
      //  // Unstable assertion: assertEquals(916, int1);
      //  // Unstable assertion: assertTrue(int1 == int0);
      //  // Unstable assertion: assertTrue(int0 == int1);
      
      double double1 = FastMath.acos((double) int1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(int1 == int0);
      //  // Unstable assertion: assertTrue(int0 == int1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      double double2 = FastMath.nextAfter(double0, double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertTrue(int1 == int0);
      //  // Unstable assertion: assertTrue(int0 == int1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
  }

  @Test
  public void test045()  throws Throwable  {
      double double0 = 0.0;
      int int0 = (-835);
      double double1 = FastMath.pow(double0, int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double2 = FastMath.nextUp(double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
  }

  @Test
  public void test046()  throws Throwable  {
      int int0 = (-3142);
      int int1 = 128;
      float float0 = FastMath.scalb((float) int0, int1);
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test047()  throws Throwable  {
      float float0 = (-1303.0181F);
      int int0 = (-233);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(-0.0F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test048()  throws Throwable  {
      float float0 = (-600.58F);
      int int0 = (-147);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals((-3.366E-42F), float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test049()  throws Throwable  {
      float float0 = 1.4E-45F;
      int int0 = FastMath.getExponent(float0);
      assertEquals((-127), int0);
      
      float float1 = FastMath.scalb((float) int0, int0);
      assertEquals((-7.464389E-37F), float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test050()  throws Throwable  {
      double double0 = 304.346620547;
      long long0 = FastMath.round(double0);
      assertEquals(304L, long0);
      
      int int0 = (-233);
      float float0 = FastMath.scalb((float) long0, int0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test051()  throws Throwable  {
      float float0 = (-3136.0F);
      int int0 = 905;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test052()  throws Throwable  {
      int int0 = 2855;
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
  }

  @Test
  public void test053()  throws Throwable  {
      float float0 = Float.NaN;
      int int0 = 611;
      float float1 = FastMath.scalb(float0, int0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
  }

  @Test
  public void test054()  throws Throwable  {
      float float0 = 3207.66F;
      int int0 = 11;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(6569287.5F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test055()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = (-1768);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
  }

  @Test
  public void test056()  throws Throwable  {
      float float0 = 1883.6854F;
      int int0 = FastMath.getExponent(float0);
      assertEquals(10, int0);
      
      int int1 = 1024;
      assertFalse(int1 == int0);
      
      double double0 = FastMath.scalb((double) int0, int1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test057()  throws Throwable  {
      int int0 = (-1072);
      double double0 = 0.0;
      int int1 = FastMath.abs(int0);
      assertEquals(1072, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      double double1 = FastMath.nextUp(double0);
      assertEquals(4.9E-324, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.scalb(double1, int1);
      assertEquals(0.25, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(int1 == int0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(int0 == int1);
  }

  @Test
  public void test058()  throws Throwable  {
      double double0 = 1433.03421;
      int int0 = (-1218);
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test059()  throws Throwable  {
      double double0 = 0.0;
      int int0 = FastMath.getExponent(double0);
      assertEquals((-1023), int0);
      
      double double1 = 0.5294657344456065;
      double double2 = FastMath.scalb(double1, int0);
      assertEquals(5.890501823451176E-309, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test060()  throws Throwable  {
      int int0 = (-1537);
      double double0 = FastMath.scalb((double) int0, int0);
      assertEquals(-0.0, double0, 0.01D);
  }

  @Test
  public void test061()  throws Throwable  {
      float float0 = (-1.0F);
      float float1 = FastMath.nextUp(float0);
      assertEquals((-0.99999994F), float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = 0.0;
      int int0 = FastMath.getExponent(double0);
      assertEquals((-1023), int0);
      
      double double1 = FastMath.scalb((double) float1, int0);
      assertEquals((-1.112536862941232E-308), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(float1 == float0);
      assertFalse(double1 == double0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test062()  throws Throwable  {
      float float0 = 491.3069F;
      double double0 = 0.0;
      int int0 = FastMath.getExponent(double0);
      assertEquals((-1023), int0);
      
      double double1 = FastMath.scalb((double) float0, int0);
      assertEquals(5.465970528983011E-306, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test063()  throws Throwable  {
      double double0 = 845.068593;
      int int0 = 2806;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test064()  throws Throwable  {
      double double0 = 3014.85706;
      double double1 = FastMath.tan(double0);
      assertEquals((-1.8352443410669865), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int0 = (-3610);
      double double2 = FastMath.scalb(double1, int0);
      assertEquals(-0.0, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test065()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.tan(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      float float0 = 0.0F;
      double double2 = FastMath.hypot((double) float0, double1);
      assertEquals(0.0, double2, 0.01D);
      assertTrue(double0 == double2);
      assertTrue(double0 == double1);
      assertTrue(double2 == double1);
      assertTrue(double2 == double0);
      assertTrue(double1 == double2);
      assertTrue(double1 == double0);
  }

  @Test
  public void test066()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      int int0 = (-2448);
      double double2 = FastMath.scalb(double1, int0);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test067()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      float float1 = FastMath.ulp(float0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test
  public void test068()  throws Throwable  {
      int int0 = (-1218);
      double double0 = FastMath.sinh((double) int0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.ulp(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test069()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.abs(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test070()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = FastMath.ulp(float0);
      //  // Unstable assertion: assertEquals(0.0F, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
  }

  @Test
  public void test071()  throws Throwable  {
      float float0 = (-1683.0F);
      float float1 = FastMath.abs(float0);
      assertEquals(1683.0F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test072()  throws Throwable  {
      int int0 = (-1965);
      long long0 = FastMath.abs((long) int0);
      assertEquals(1965L, long0);
  }

  @Test
  public void test073()  throws Throwable  {
      int int0 = 276;
      int int1 = FastMath.getExponent((double) int0);
      assertEquals(8, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      int int2 = FastMath.abs(int1);
      assertEquals(8, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
  }

  @Test
  public void test074()  throws Throwable  {
      int int0 = 35;
      float float0 = FastMath.copySign((float) int0, (float) int0);
      assertEquals(35.0F, float0, 0.01F);
      
      int int1 = (-3610);
      double double0 = FastMath.scalb((double) float0, int1);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      double double1 = FastMath.toDegrees(double0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test075()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-1377.15622308882);
      double double2 = FastMath.pow(double0, double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      
      double double3 = FastMath.toDegrees(double2);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
      assertFalse(double2 == double0);
      assertTrue(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertTrue(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test076()  throws Throwable  {
      int int0 = 0;
      double double0 = FastMath.toRadians((double) int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test077()  throws Throwable  {
      float float0 = 491.3069F;
      double double0 = FastMath.toRadians((double) float0);
      assertEquals(8.574922776876525, double0, 0.01D);
  }

  @Test
  public void test078()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      double double0 = FastMath.toRadians((double) float0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test079()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-1377.15622308882);
      double double2 = FastMath.pow(double0, double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.cbrt(double2);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double3 == double1);
      assertTrue(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(double2 == double3);
  }

  @Test
  public void test080()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.cbrt(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test081()  throws Throwable  {
      double double0 = 3.141592653589793;
      double double1 = FastMath.toDegrees(double0);
      assertEquals(180.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.cbrt(double1);
      assertEquals(5.646216173286171, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test082()  throws Throwable  {
      double double0 = (-0.25);
      double double1 = FastMath.acos(double0);
      assertEquals(1.8234765819369754, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test083()  throws Throwable  {
      double double0 = 240.98808324237;
      double double1 = 0.0;
      double double2 = FastMath.nextAfter(double1, double0);
      assertEquals(4.9E-324, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      
      double double3 = FastMath.acos(double2);
      assertEquals(1.5707963267948966, double3, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test084()  throws Throwable  {
      double double0 = (-2625.8895);
      double double1 = FastMath.atan(double0);
      assertEquals((-1.5704155034770617), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.exp(double1);
      assertEquals(0.20795875681666484, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      
      double double3 = FastMath.acos(double2);
      assertEquals(1.3613086988281717, double3, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
  }

  @Test
  public void test085()  throws Throwable  {
      double double0 = 6.591143677421159E-251;
      double double1 = FastMath.ceil(double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.acos(double1);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test086()  throws Throwable  {
      float float0 = (-1.0F);
      double double0 = FastMath.acos((double) float0);
      assertEquals(3.141592653589793, double0, 0.01D);
  }

  @Test
  public void test087()  throws Throwable  {
      double double0 = (-980.9990767964628);
      double double1 = FastMath.acos(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test088()  throws Throwable  {
      long long0 = 4009L;
      long long1 = FastMath.min(long0, long0);
      assertEquals(4009L, long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      double double0 = FastMath.acos((double) long1);
      assertEquals(Double.NaN, double0, 0.01D);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
  }

  @Test
  public void test089()  throws Throwable  {
      float float0 = (-374.0F);
      double double0 = FastMath.log((double) float0);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      
      double double1 = FastMath.signum(double0);
      //  // Unstable assertion: assertEquals(1.0, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      double double2 = FastMath.log10(double1);
      //  // Unstable assertion: assertEquals(0.0, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      
      double double3 = FastMath.asin(double2);
      //  // Unstable assertion: assertEquals(0.0, double3, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertTrue(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertTrue(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
  }

  @Test
  public void test090()  throws Throwable  {
      double double0 = (-229.0);
      double double1 = FastMath.tanh(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.asin(double1);
      assertEquals((-1.5707963267948966), double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test091()  throws Throwable  {
      float float0 = (-6101.799F);
      int int0 = FastMath.getExponent(float0);
      assertEquals(12, int0);
      
      float float1 = FastMath.signum((float) int0);
      assertEquals(1.0F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = FastMath.asin((double) float1);
      assertEquals(1.5707963267948966, double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test092()  throws Throwable  {
      double double0 = 0.0;
      int int0 = FastMath.getExponent(double0);
      assertEquals((-1023), int0);
      
      double double1 = FastMath.asin((double) int0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test093()  throws Throwable  {
      int int0 = (-1537);
      double double0 = 0.0;
      double double1 = FastMath.ulp(double0);
      assertEquals(4.9E-324, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.atan2((double) int0, double1);
      assertEquals((-1.5707963267948966), double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test094()  throws Throwable  {
      int int0 = (-3563);
      int int1 = 0;
      double double0 = FastMath.atan2((double) int0, (double) int1);
      assertEquals((-1.5707963267948966), double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test095()  throws Throwable  {
      double double0 = (-4.6694407626686244E235);
      double double1 = FastMath.abs(double0);
      assertEquals(4.6694407626686244E235, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = 0.0;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.atan2(double1, double2);
      assertEquals(1.5707963267948966, double3, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test096()  throws Throwable  {
      int int0 = (-1818);
      double double0 = Double.POSITIVE_INFINITY;
      double double1 = FastMath.atan2((double) int0, double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test097()  throws Throwable  {
      float float0 = 1768.0092F;
      float float1 = FastMath.ulp(float0);
      assertEquals(1.2207031E-4F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = Double.POSITIVE_INFINITY;
      double double1 = FastMath.atan2((double) float1, double0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test098()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      float float0 = 1811.0F;
      float float1 = FastMath.abs(float0);
      assertEquals(1811.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double1 = FastMath.atan2(double0, (double) float1);
      assertEquals((-1.5707963267948966), double1, 0.01D);
      assertFalse(double1 == double0);
      assertTrue(float1 == float0);
      assertFalse(double0 == double1);
      assertTrue(float0 == float1);
  }

  @Test
  public void test099()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      double double1 = FastMath.atan2(double0, double0);
      assertEquals((-2.356194490192345), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test100()  throws Throwable  {
      double double0 = 6.591143677421159E-251;
      double double1 = (-104.89);
      double double2 = FastMath.pow(double0, double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      
      double double3 = FastMath.atan2(double2, double1);
      assertEquals(1.5707963267948966, double3, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
  }

  @Test
  public void test101()  throws Throwable  {
      float float0 = -0.0F;
      float float1 = FastMath.max(float0, float0);
      assertEquals(-0.0F, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      double double0 = FastMath.atan2((double) float1, (double) float1);
      assertEquals((-3.141592653589793), double0, 0.01D);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
  }

  @Test
  public void test102()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 3;
      float float0 = (-0.4895976F);
      float float1 = FastMath.min((float) int0, float0);
      assertEquals((-0.4895976F), float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double1 = FastMath.atan2(double0, (double) float1);
      assertEquals(3.141592653589793, double1, 0.01D);
      assertFalse(double1 == double0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertFalse(double0 == double1);
  }

  @Test
  public void test103()  throws Throwable  {
      int int0 = (-1818);
      int int1 = 0;
      int int2 = FastMath.max(int0, int1);
      assertEquals(0, int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      
      double double0 = Double.POSITIVE_INFINITY;
      double double1 = FastMath.atan2((double) int2, double0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(double1 == double0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(double0 == double1);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
  }

  @Test
  public void test104()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 3;
      float float0 = FastMath.min((float) int0, (float) int0);
      assertEquals(3.0F, float0, 0.01F);
      
      double double1 = FastMath.atan2(double0, (double) float0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test105()  throws Throwable  {
      double double0 = (-1.2281487504266522E-8);
      double double1 = FastMath.asin(double0);
      assertEquals((-1.2281487504266522E-8), double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test106()  throws Throwable  {
      int int0 = 2299;
      float float0 = FastMath.scalb((float) int0, int0);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
      
      double double0 = FastMath.atan((double) float0);
      assertEquals(1.5707963267948966, double0, 0.01D);
  }

  @Test
  public void test107()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      double double1 = FastMath.tan(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test108()  throws Throwable  {
      float float0 = -0.0F;
      double double0 = FastMath.tan((double) float0);
      assertEquals(-0.0, double0, 0.01D);
  }

  @Test
  public void test109()  throws Throwable  {
      double double0 = (-2625.8895);
      double double1 = FastMath.cos(double0);
      assertEquals(0.8860888735666248, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test110()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.cos(double1);
      assertEquals(Double.NaN, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test111()  throws Throwable  {
      double double0 = (-737.2898);
      double double1 = FastMath.sin(double0);
      assertEquals((-0.8329809443067343), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test112()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      double double0 = FastMath.sin((double) float0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test113()  throws Throwable  {
      float float0 = -0.0F;
      double double0 = FastMath.sin((double) float0);
      assertEquals(-0.0, double0, 0.01D);
  }

  @Test
  public void test114()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.acos(double0);
      assertEquals(1.5707963267948966, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.pow(double0, double1);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
      assertTrue(double2 == double0);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.sin(double2);
      assertEquals(0.0, double3, 0.01D);
      assertTrue(double3 == double2);
      assertFalse(double3 == double1);
      assertTrue(double3 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
      assertTrue(double0 == double3);
      assertTrue(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(double2 == double3);
  }

  @Test
  public void test115()  throws Throwable  {
      double double0 = (-0.25);
      double double1 = (-8.0E298);
      double double2 = FastMath.nextAfter(double1, double0);
      assertEquals((-7.999999999999999E298), double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.tan(double2);
      assertEquals(0.03399534394082457, double3, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test116()  throws Throwable  {
      double double0 = 4.091704288360009E306;
      double double1 = FastMath.sin(double0);
      assertEquals((-0.9736395032348791), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test117()  throws Throwable  {
      double double0 = (-3.609949022969024E295);
      double double1 = FastMath.cos(double0);
      assertEquals((-0.09616969131337104), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test118()  throws Throwable  {
      double double0 = 613.7457879565729;
      double double1 = FastMath.sinh(double0);
      assertEquals(1.759458409109178E266, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.cos(double1);
      assertEquals((-0.4438888303964104), double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test119()  throws Throwable  {
      double double0 = 4.503599627370496E15;
      double double1 = FastMath.sin(double0);
      assertEquals(0.8742173026236351, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test120()  throws Throwable  {
      float float0 = (-3.4028235E38F);
      double double0 = FastMath.tan((double) float0);
      assertEquals(0.6117979498342481, double0, 0.01D);
  }

  @Test
  public void test121()  throws Throwable  {
      double double0 = (-4.135121057126514E24);
      double double1 = FastMath.tan(double0);
      assertEquals((-0.02457967515371647), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.tan(double1);
      assertEquals((-0.0245846263726276), double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test122()  throws Throwable  {
      double double0 = 2.7294301888986675E-195;
      double double1 = FastMath.sin(double0);
      assertEquals(2.7294301888986675E-195, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test123()  throws Throwable  {
      double double0 = (-4.135121057126514E24);
      double double1 = FastMath.tan(double0);
      assertEquals((-0.02457967515371647), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      int int0 = 3;
      double double2 = FastMath.pow(double1, int0);
      assertEquals((-1.4850067126406976E-5), double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test124()  throws Throwable  {
      float float0 = Float.NaN;
      int int0 = 0;
      double double0 = FastMath.pow((double) float0, int0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test125()  throws Throwable  {
      int int0 = (-1794);
      double double0 = FastMath.pow((double) int0, (double) int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test126()  throws Throwable  {
      double double0 = (-980.9990767964628);
      double double1 = FastMath.pow(double0, double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test127()  throws Throwable  {
      double double0 = (-8.0E298);
      double double1 = FastMath.pow(double0, double0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test128()  throws Throwable  {
      float float0 = Float.NaN;
      int int0 = (-865);
      double double0 = FastMath.ulp((double) float0);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      
      double double1 = FastMath.pow((double) int0, double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertTrue(double0 == double1);
  }

  @Test
  public void test129()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      int int0 = (-2448);
      int int1 = FastMath.max(int0, int0);
      assertEquals((-2448), int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      double double2 = FastMath.pow((double) int1, double1);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      assertTrue(int0 == int1);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
      assertTrue(int1 == int0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test130()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      float float0 = (-1.0F);
      double double2 = FastMath.pow((double) float0, double1);
      assertEquals(Double.NaN, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test131()  throws Throwable  {
      float float0 = (-1160.093F);
      double double0 = 1202.7474724784483;
      int int0 = 2015;
      double double1 = FastMath.scalb((double) float0, int0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.max(double0, (double) float0);
      assertEquals(1202.7474724784483, double2, 0.01D);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      
      double double3 = FastMath.pow(double1, double2);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertTrue(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
  }

  @Test
  public void test132()  throws Throwable  {
      float float0 = (-1160.093F);
      int int0 = 2015;
      double double0 = FastMath.scalb((double) float0, int0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.pow(double0, double0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test133()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      double double0 = 0.9166666666666666;
      double double1 = FastMath.pow(double0, (double) float0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test134()  throws Throwable  {
      float float0 = (-3.4028235E38F);
      double double0 = FastMath.cosh((double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      int int0 = (-6);
      double double1 = FastMath.scalb((double) float0, int0);
      assertEquals((-5.3169116662270134E36), double1, 0.01D);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.pow(double1, double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test135()  throws Throwable  {
      float float0 = (-3.4028235E38F);
      double double0 = FastMath.cosh((double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      int int0 = (-6);
      double double1 = FastMath.scalb((double) float0, int0);
      assertEquals((-5.3169116662270134E36), double1, 0.01D);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.pow(double0, double1);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test136()  throws Throwable  {
      float float0 = (-3.4028235E38F);
      double double0 = FastMath.cosh((double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.pow(double0, double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test137()  throws Throwable  {
      float float0 = 681.898F;
      float float1 = -0.0F;
      float float2 = FastMath.max(float1, float1);
      assertEquals(-0.0F, float2, 0.01F);
      assertFalse(float1 == float0);
      assertTrue(float1 == float2);
      assertFalse(float2 == float0);
      assertTrue(float2 == float1);
      
      double double0 = FastMath.pow((double) float2, (double) float0);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(float1 == float0);
      assertTrue(float1 == float2);
      assertFalse(float2 == float0);
      assertTrue(float2 == float1);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
  }

  @Test
  public void test138()  throws Throwable  {
      double double0 = 161.08837865645;
      double double1 = FastMath.cos(double0);
      assertEquals((-0.6469997289275572), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.log10(double1);
      assertEquals(Double.NaN, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test139()  throws Throwable  {
      int int0 = 0;
      long long0 = FastMath.abs((long) int0);
      assertEquals(0L, long0);
      
      double double0 = FastMath.log1p((double) long0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test140()  throws Throwable  {
      int int0 = 18;
      double double0 = FastMath.log1p((double) int0);
      assertEquals(2.9444389791664403, double0, 0.01D);
  }

  @Test
  public void test141()  throws Throwable  {
      double double0 = 1817.238;
      double double1 = FastMath.sinh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.log1p(double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
  }

  @Test
  public void test142()  throws Throwable  {
      double double0 = (-7.678973146281339E-156);
      double double1 = FastMath.floor(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.log1p(double1);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test143()  throws Throwable  {
      float float0 = 0.5F;
      float float1 = FastMath.max(float0, float0);
      assertEquals(0.5F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double0 = FastMath.log((double) float1);
      assertEquals((-0.6931471805599453), double0, 0.01D);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test
  public void test144()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.acos(double0);
      assertEquals(1.5707963267948966, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.log(double1, double1);
      assertEquals(1.0, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test145()  throws Throwable  {
      float float0 = (-1303.0181F);
      float float1 = FastMath.signum(float0);
      assertEquals((-1.0F), float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      float float2 = 1.0F;
      assertFalse(float2 == float1);
      
      double double0 = FastMath.log((double) float2, (double) float1);
      assertEquals(Double.NaN, double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float1 == float2);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(float2 == float1);
      assertFalse(float2 == float0);
  }

  @Test
  public void test146()  throws Throwable  {
      double double0 = (-0.0013888888689039883);
      double double1 = FastMath.log1p(double0);
      assertEquals((-0.0013898542690416104), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test147()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.nextUp(double0);
      assertEquals(4.9E-324, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.pow(double1, double1);
      assertEquals(1.0, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test148()  throws Throwable  {
      double double0 = 3090.45475;
      double double1 = FastMath.expm1(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.log10(double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test149()  throws Throwable  {
      double double0 = (-2.6033824355191673E-8);
      double double1 = FastMath.expm1(double0);
      assertEquals((-2.603382401631167E-8), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test150()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.expm1(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test151()  throws Throwable  {
      float float0 = (-1160.093F);
      long long0 = (-9223372036854775808L);
      long long1 = (-17L);
      long long2 = FastMath.max(long0, long1);
      assertEquals((-17L), long2);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertTrue(long1 == long2);
      assertFalse(long1 == long0);
      
      double double0 = FastMath.pow((double) float0, (double) long2);
      assertEquals((-8.009809395544569E-53), double0, 0.01D);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertTrue(long1 == long2);
      assertFalse(long1 == long0);
  }

  @Test
  public void test152()  throws Throwable  {
      double double0 = (-723.2);
      double double1 = FastMath.expm1(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test153()  throws Throwable  {
      float float0 = (-1160.093F);
      int int0 = 2015;
      double double0 = FastMath.scalb((double) float0, int0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.expm1(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test154()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = FastMath.signum(float0);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test
  public void test155()  throws Throwable  {
      int int0 = 0;
      double double0 = FastMath.signum((double) int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test156()  throws Throwable  {
      double double0 = (-1974.189625);
      double double1 = FastMath.signum(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test157()  throws Throwable  {
      double double0 = 0.07250232994556427;
      double double1 = FastMath.atanh(double0);
      assertEquals(0.07262977041774157, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test158()  throws Throwable  {
      double double0 = 0.1256551444530487;
      double double1 = FastMath.atanh(double0);
      assertEquals(0.1263228131832331, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test159()  throws Throwable  {
      float float0 = Float.NaN;
      double double0 = FastMath.atanh((double) float0);
      //  // Unstable assertion: assertEquals(355.09408900074607, double0, 0.01D);
  }

  @Test
  public void test160()  throws Throwable  {
      double double0 = (-4.135121057126514E24);
      double double1 = FastMath.tan(double0);
      assertEquals((-0.02457967515371647), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.atanh(double1);
      assertEquals((-0.02458462697123124), double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test161()  throws Throwable  {
      int int0 = 0;
      double double0 = FastMath.atanh((double) int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test162()  throws Throwable  {
      double double0 = 0.031;
      double double1 = FastMath.asinh(double0);
      assertEquals(0.03099503697929222, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test163()  throws Throwable  {
      double double0 = 0.041666666666666664;
      double double1 = FastMath.asinh(double0);
      assertEquals(0.04165461974878966, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test164()  throws Throwable  {
      double double0 = 0.10555580258369446;
      double double1 = FastMath.asinh(double0);
      assertEquals(0.10536076132116569, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test165()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.tan(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      double double2 = FastMath.asinh(double1);
      assertEquals(0.0, double2, 0.01D);
      assertTrue(double0 == double2);
      assertTrue(double0 == double1);
      assertTrue(double2 == double0);
      assertTrue(double2 == double1);
      assertTrue(double1 == double0);
      assertTrue(double1 == double2);
  }

  @Test
  public void test166()  throws Throwable  {
      double double0 = (-8.0E298);
      double double1 = FastMath.asinh(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test167()  throws Throwable  {
      double double0 = 1235.262145;
      double double1 = FastMath.sqrt(double0);
      assertEquals(35.14629631981156, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.asinh(double1);
      assertEquals(4.252868750185641, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      
      double double3 = FastMath.tanh(double2);
      assertEquals(0.9995954732140117, double3, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
  }

  @Test
  public void test168()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.tanh(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test169()  throws Throwable  {
      double double0 = (-0.25);
      double double1 = FastMath.tanh(double0);
      assertEquals((-0.24491866240370913), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test170()  throws Throwable  {
      double double0 = 304.346620547;
      double double1 = FastMath.rint(double0);
      assertEquals(304.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.tanh(double1);
      assertEquals(1.0, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test171()  throws Throwable  {
      double double0 = (-4.135121057126514E24);
      double double1 = FastMath.tan(double0);
      assertEquals((-0.02457967515371647), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.sinh(double1);
      assertEquals((-0.02458215023967047), double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test172()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.sinh(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test173()  throws Throwable  {
      double double0 = (-507.81601265);
      double double1 = FastMath.sinh(double0);
      assertEquals((-1.740452280461754E220), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test174()  throws Throwable  {
      double double0 = 6.591143677421159E-251;
      double double1 = FastMath.ceil(double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.sinh(double1);
      assertEquals(1.1752011936438014, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test175()  throws Throwable  {
      float float0 = (-1.0F);
      double double0 = FastMath.cosh((double) float0);
      assertEquals(1.5430806348152437, double0, 0.01D);
  }

  @Test
  public void test176()  throws Throwable  {
      double double0 = (-229.0);
      double double1 = FastMath.cosh(double0);
      assertEquals(1.4203859252447964E99, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test177()  throws Throwable  {
      double double0 = 151.109379712;
      double double1 = FastMath.cosh(double0);
      assertEquals(2.113195986020676E65, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test178()  throws Throwable  {
      double double0 = 1376.42227001;
      double double1 = FastMath.cosh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test179()  throws Throwable  {
      double double0 = 3.141592653589793;
      double double1 = FastMath.cosh(double0);
      assertEquals(11.591953275521519, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test180()  throws Throwable  {
      int int0 = (-1072);
      double double0 = 0.0;
      int int1 = FastMath.abs(int0);
      assertEquals(1072, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      double double1 = FastMath.nextUp(double0);
      assertEquals(4.9E-324, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.atan2(double1, (double) int1);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(int0 == int1);
      assertTrue(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(int1 == int0);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
  }

  @Test
  public void test181()  throws Throwable  {
      double double0 = (-501.00584138372454);
      double double1 = FastMath.atan2(double0, double0);
      assertEquals((-2.356194490192345), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test182()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.cos(double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test183()  throws Throwable  {
      double double0 = 3174.813897889298;
      double double1 = FastMath.hypot(double0, double0);
      assertEquals(4489.864872405636, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int0 = FastMath.getExponent(double1);
      assertEquals(12, int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      float float0 = FastMath.nextUp((float) int0);
      assertEquals(12.000001F, float0, 0.01F);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test184()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.pow(double0, double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.IEEEremainder(double1, double1);
      assertEquals(0.0, double2, 0.01D);
      assertTrue(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
  }

  @Test
  public void test185()  throws Throwable  {
      double double0 = 0.0;
      float float0 = 1175.0798F;
      double double1 = FastMath.hypot((double) float0, double0);
      assertEquals(1175.079833984375, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test186()  throws Throwable  {
      double double0 = FastMath.random();
      assertEquals(0.0, double0, 0.01D);
  }
}
